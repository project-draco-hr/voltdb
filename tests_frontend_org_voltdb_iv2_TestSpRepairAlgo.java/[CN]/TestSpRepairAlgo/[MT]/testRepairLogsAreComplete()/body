{
  SpPromoteAlgo term=new SpPromoteAlgo(null,null,0,null,VoltZK.iv2masters,"Test");
  SpPromoteAlgo.ReplicaRepairStruct notDone1=new SpPromoteAlgo.ReplicaRepairStruct();
  notDone1.m_receivedResponses=1;
  notDone1.m_expectedResponses=2;
  assertTrue(notDone1.logsComplete() != 0);
  SpPromoteAlgo.ReplicaRepairStruct notDone2=new SpPromoteAlgo.ReplicaRepairStruct();
  notDone2.m_receivedResponses=0;
  notDone2.m_expectedResponses=10;
  SpPromoteAlgo.ReplicaRepairStruct done1=new SpPromoteAlgo.ReplicaRepairStruct();
  done1.m_receivedResponses=5;
  done1.m_expectedResponses=5;
  assertTrue(done1.logsComplete() == 0);
  SpPromoteAlgo.ReplicaRepairStruct done2=new SpPromoteAlgo.ReplicaRepairStruct();
  done2.m_receivedResponses=10;
  done2.m_expectedResponses=10;
  term.m_replicaRepairStructs.put(0L,notDone1);
  term.m_replicaRepairStructs.put(1L,done1);
  term.m_replicaRepairStructs.put(2L,notDone2);
  term.m_replicaRepairStructs.put(3L,done2);
  assertFalse(term.areRepairLogsComplete());
  term.m_replicaRepairStructs.clear();
  term.m_replicaRepairStructs.put(2L,notDone2);
  assertFalse(term.areRepairLogsComplete());
  term.m_replicaRepairStructs.clear();
  term.m_replicaRepairStructs.put(1L,done1);
  term.m_replicaRepairStructs.put(3L,done2);
  assertTrue(term.areRepairLogsComplete());
  term.m_replicaRepairStructs.clear();
  term.m_replicaRepairStructs.put(3L,done2);
  assertTrue(term.areRepairLogsComplete());
}
