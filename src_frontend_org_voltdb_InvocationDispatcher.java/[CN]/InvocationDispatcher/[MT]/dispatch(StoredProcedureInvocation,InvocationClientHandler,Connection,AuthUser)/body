{
  final long nowNanos=System.nanoTime();
  final CatalogContext catalogContext=m_catalogContext.get();
  String procName=task.getProcName();
  Procedure catProc=getProcedureFromName(procName,catalogContext);
  if (catProc == null) {
    String errorMessage="Procedure " + procName + " was not found";
    RateLimitedLogger.tryLogForMessage(EstTime.currentTimeMillis(),60,TimeUnit.SECONDS,authLog,Level.WARN,errorMessage + ". This message is rate limited to once every 60 seconds.");
    return unexpectedFailureResponse(errorMessage,task.clientHandle);
  }
  if (!allowPauseModeExecution(handler,catProc,task)) {
    return new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,new VoltTable[0],"Server is paused and is available in read-only mode - please try again later.",task.clientHandle);
  }
  ClientResponseImpl error=null;
  if ((error=m_permissionValidator.shouldAccept(procName,user,task,catProc)) != null) {
    return error;
  }
  if ((error=m_invocationValidator.shouldAccept(procName,user,task,catProc)) != null) {
    return error;
  }
  int batchTimeout=task.getBatchTimeout();
  if (BatchTimeoutOverrideType.isUserSetTimeout(batchTimeout)) {
    if (!user.hasPermission(Permission.ADMIN)) {
      int systemTimeout=catalogContext.cluster.getDeployment().get("deployment").getSystemsettings().get("systemsettings").getQuerytimeout();
      if (systemTimeout != ExecutionEngine.NO_BATCH_TIMEOUT_VALUE && (batchTimeout > systemTimeout || batchTimeout == ExecutionEngine.NO_BATCH_TIMEOUT_VALUE)) {
        String errorMessage="The attempted individual query timeout value " + batchTimeout + " milliseconds override was ignored because the connection lacks ADMIN privileges.";
        RateLimitedLogger.tryLogForMessage(EstTime.currentTimeMillis(),60,TimeUnit.SECONDS,log,Level.INFO,errorMessage + " This message is rate limited to once every 60 seconds.");
        task.setBatchTimeout(systemTimeout);
      }
    }
  }
  if (task.getAllPartition()) {
    if (!catProc.getSinglepartition() || (catProc.getPartitionparameter() != 0) || catProc.getSystemproc()) {
      return new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Invalid procedure for all-partition execution. " + "Targeted procedure must be partitioned, must be partitioned on the first parameter, " + "and must not be a system procedure.",task.clientHandle);
    }
  }
  if (catProc.getSystemproc()) {
    if ("@Ping".equals(procName)) {
      return new ClientResponseImpl(ClientResponseImpl.SUCCESS,new VoltTable[0],"",task.clientHandle);
    }
 else     if ("@ExecuteTask".equals(procName)) {
      return unexpectedFailureResponse("@ExecuteTask is a reserved procedure only for VoltDB internal use",task.clientHandle);
    }
 else     if ("@GetPartitionKeys".equals(procName)) {
      return dispatchGetPartitionKeys(task);
    }
 else     if ("@Subscribe".equals(procName)) {
      return dispatchSubscribe(handler,task);
    }
 else     if ("@Statistics".equals(procName)) {
      return dispatchStatistics(OpsSelector.STATISTICS,task,ccxn);
    }
 else     if ("@SystemCatalog".equals(procName)) {
      return dispatchStatistics(OpsSelector.SYSTEMCATALOG,task,ccxn);
    }
 else     if ("@SystemInformation".equals(procName)) {
      return dispatchStatistics(OpsSelector.SYSTEMINFORMATION,task,ccxn);
    }
 else     if ("@GC".equals(procName)) {
      return dispatchSystemGC(handler,task);
    }
 else     if ("@StopNode".equals(procName)) {
      return dispatchStopNode(task);
    }
 else     if ("@Explain".equals(procName)) {
      return dispatchAdHoc(task,handler,ccxn,true,user);
    }
 else     if ("@ExplainProc".equals(procName)) {
      return dispatchExplainProcedure(task,handler,ccxn,user);
    }
 else     if ("@AdHoc".equals(procName)) {
      return dispatchAdHoc(task,handler,ccxn,false,user);
    }
 else     if ("@AdHocSpForTest".equals(procName)) {
      return dispatchAdHocSpForTest(task,handler,ccxn,false,user);
    }
 else     if (procName.equals("@LoadSinglepartitionTable")) {
      return dispatchLoadSinglepartitionTable(catProc,task,handler,ccxn);
    }
    if (!MiscUtils.isPro()) {
      SystemProcedureCatalog.Config sysProcConfig=SystemProcedureCatalog.listing.get(procName);
      if ((sysProcConfig != null) && (sysProcConfig.commercial)) {
        return new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],procName + " is available in the Enterprise Edition of VoltDB only.",task.clientHandle);
      }
    }
    final boolean useDdlSchema=catalogContext.cluster.getUseddlschema();
    if ("@UpdateApplicationCatalog".equals(procName)) {
      return dispatchUpdateApplicationCatalog(task,handler,ccxn,user,useDdlSchema);
    }
 else     if ("@UpdateClasses".equals(procName)) {
      return dispatchUpdateApplicationCatalog(task,handler,ccxn,user,useDdlSchema);
    }
 else     if ("@SnapshotSave".equals(procName)) {
      m_snapshotDaemon.requestUserSnapshot(task,ccxn);
      return null;
    }
 else     if ("@Promote".equals(procName)) {
      return dispatchPromote(catProc,task,handler,ccxn);
    }
 else     if ("@SnapshotStatus".equals(procName)) {
      Object[] params=new Object[]{"SNAPSHOTSTATUS"};
      task.setParams(params);
      return dispatchStatistics(OpsSelector.STATISTICS,task,ccxn);
    }
 else     if ("@SnapshotScan".equals(procName)) {
      return dispatchStatistics(OpsSelector.SNAPSHOTSCAN,task,ccxn);
    }
 else     if ("@SnapshotDelete".equals(procName)) {
      return dispatchStatistics(OpsSelector.SNAPSHOTDELETE,task,ccxn);
    }
 else     if ("@SnapshotRestore".equals(procName)) {
      ClientResponseImpl retval=SnapshotUtil.transformRestoreParamsToJSON(task);
      if (retval != null) {
        return retval;
      }
      if (m_isInitialRestore.compareAndSet(true,false) && isSchemaEmpty()) {
        return useSnapshotCatalogToRestoreSnapshotSchema(task,handler,ccxn,user);
      }
    }
  }
  if (("@Pause".equals(procName) || "@Resume".equals(procName)) && !handler.isAdmin()) {
    return unexpectedFailureResponse(procName + " is not available to this client",task.clientHandle);
  }
  int partition=-1;
  try {
    partition=getPartitionForProcedure(catProc,task);
  }
 catch (  Exception e) {
    return getMispartitionedErrorResponse(task,catProc,e);
  }
  boolean success=createTransaction(handler.connectionId(),task,catProc.getReadonly(),catProc.getSinglepartition(),catProc.getEverysite(),partition,task.getSerializedSize(),nowNanos);
  if (!success) {
    return new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,new VoltTable[0],"VoltDB failed to create the transaction internally.  It is possible this " + "was caused by a node failure or intentional shutdown. If the cluster recovers, " + "it should be safe to resend the work, as the work was never started.",task.clientHandle);
  }
  return null;
}
