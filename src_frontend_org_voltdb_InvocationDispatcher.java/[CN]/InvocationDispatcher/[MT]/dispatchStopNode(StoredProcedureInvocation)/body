{
  Object params[]=task.getParams().toArray();
  if (params.length != 1 || params[0] == null) {
    return gracefulFailureResponse("@StopNode must provide hostId",task.clientHandle);
  }
  if (!(params[0] instanceof Integer)) {
    return gracefulFailureResponse("@StopNode must have one Integer parameter specified. Provided type was " + params[0].getClass().getName(),task.clientHandle);
  }
  int ihid=(Integer)params[0];
  final HostMessenger hostMessenger=VoltDB.instance().getHostMessenger();
  Set<Integer> liveHids=hostMessenger.getLiveHostIds();
  if (!liveHids.contains(ihid)) {
    return gracefulFailureResponse("Invalid Host Id or Host Id not member of cluster: " + ihid,task.clientHandle);
  }
  if (!m_cartographer.isClusterSafeIfNodeDies(liveHids,ihid)) {
    hostLog.info("Its unsafe to shutdown node with hostId: " + ihid + " Cannot stop the requested node. Stopping individual nodes is only allowed on a K-safe cluster."+ " And all rejoin nodes should be completed."+ " Use shutdown to stop the cluster.");
    return gracefulFailureResponse("Cannot stop the requested node. Stopping individual nodes is only allowed on a K-safe cluster." + " And all rejoin nodes should be completed." + " Use shutdown to stop the cluster.",task.clientHandle);
  }
  int hid=hostMessenger.getHostId();
  if (hid == ihid) {
    VoltDB.instance().halt();
  }
 else {
    hostMessenger.sendPoisonPill("@StopNode",ihid,ForeignHost.CRASH_ME);
  }
  return new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[0],"SUCCESS",task.clientHandle);
}
