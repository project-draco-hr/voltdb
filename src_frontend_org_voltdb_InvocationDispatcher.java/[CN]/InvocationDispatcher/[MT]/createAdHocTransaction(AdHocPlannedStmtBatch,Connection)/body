{
  ByteBuffer buf=null;
  try {
    buf=plannedStmtBatch.flattenPlanArrayToBuffer();
  }
 catch (  IOException e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  assert(buf.hasArray());
  StoredProcedureInvocation task=new StoredProcedureInvocation();
  task.type=plannedStmtBatch.work.invocationType;
  task.originalTxnId=plannedStmtBatch.work.originalTxnId;
  task.originalUniqueId=plannedStmtBatch.work.originalUniqueId;
  task.batchTimeout=plannedStmtBatch.work.m_batchTimeout;
  boolean isSinglePartition=plannedStmtBatch.isSinglePartitionCompatible() || m_isConfiguredForNonVoltDBBackend;
  int partition=-1;
  if (isSinglePartition) {
    if (plannedStmtBatch.isReadOnly()) {
      task.procName="@AdHoc_RO_SP";
    }
 else {
      task.procName="@AdHoc_RW_SP";
    }
    int type=VoltType.NULL.getValue();
    Object partitionParam=plannedStmtBatch.partitionParam();
    byte[] param=null;
    if (partitionParam != null) {
      type=VoltType.typeFromClass(partitionParam.getClass()).getValue();
      param=VoltType.valueToBytes(partitionParam);
    }
    partition=TheHashinator.getPartitionForParameter(type,partitionParam);
    task.setParams(param,(byte)type,buf.array());
  }
 else {
    if (plannedStmtBatch.isReadOnly()) {
      task.procName="@AdHoc_RO_MP";
    }
 else {
      task.procName="@AdHoc_RW_MP";
    }
    task.setParams(buf.array());
  }
  task.clientHandle=plannedStmtBatch.clientHandle;
  ClientResponseImpl error=null;
  if (VoltDB.instance().getMode() == OperationMode.PAUSED && !plannedStmtBatch.isReadOnly() && !plannedStmtBatch.adminConnection) {
    error=new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,new VoltTable[0],"Server is paused and is available in read-only mode - please try again later",plannedStmtBatch.clientHandle);
    ByteBuffer buffer=ByteBuffer.allocate(error.getSerializedSize() + 4);
    buffer.putInt(buffer.capacity() - 4);
    error.flattenToBuffer(buffer).flip();
    c.writeStream().enqueue(buffer);
  }
 else   if ((error=m_permissionValidator.shouldAccept(task.procName,plannedStmtBatch.work.user,task,SystemProcedureCatalog.listing.get(task.procName).asCatalogProcedure())) != null) {
    ByteBuffer buffer=ByteBuffer.allocate(error.getSerializedSize() + 4);
    buffer.putInt(buffer.capacity() - 4);
    error.flattenToBuffer(buffer).flip();
    c.writeStream().enqueue(buffer);
  }
 else   if ((error=m_invocationValidator.shouldAccept(task.procName,plannedStmtBatch.work.user,task,SystemProcedureCatalog.listing.get(task.procName).asCatalogProcedure())) != null) {
    ByteBuffer buffer=ByteBuffer.allocate(error.getSerializedSize() + 4);
    buffer.putInt(buffer.capacity() - 4);
    error.flattenToBuffer(buffer).flip();
    c.writeStream().enqueue(buffer);
  }
 else {
    try {
      task=MiscUtils.roundTripForCL(task);
    }
 catch (    Exception e) {
      VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
    }
    createTransaction(plannedStmtBatch.connectionId,task,plannedStmtBatch.isReadOnly(),isSinglePartition,false,partition,task.getSerializedSize(),System.nanoTime());
  }
}
