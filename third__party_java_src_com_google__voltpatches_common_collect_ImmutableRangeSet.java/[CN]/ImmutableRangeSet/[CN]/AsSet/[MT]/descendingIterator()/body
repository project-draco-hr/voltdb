{
  return new AbstractIterator<C>(){
    final Iterator<Range<C>> rangeItr=ranges.reverse().iterator();
    Iterator<C> elemItr=Iterators.emptyIterator();
    @Override protected C computeNext(){
      while (!elemItr.hasNext()) {
        if (rangeItr.hasNext()) {
          elemItr=ContiguousSet.create(rangeItr.next(),domain).descendingIterator();
        }
 else {
          return endOfData();
        }
      }
      return elemItr.next();
    }
  }
;
}
