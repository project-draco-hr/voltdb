{
  final int TYPE_NULL_TINYINT=3;
  final int TYPE_NOT_NULL_TINYINT=4;
  final int TYPE_NULL_SMALLINT=5;
  final int TYPE_NOT_NULL_SMALLINT=6;
  final int TYPE_NULL_INTEGER=7;
  final int TYPE_NOT_NULL_INTEGER=8;
  final int TYPE_NULL_BIGINT=9;
  final int TYPE_NOT_NULL_BIGINT=10;
  final int TYPE_NULL_TIMESTAMP=11;
  final int TYPE_NOT_NULL_TIMESTAMP=12;
  final int TYPE_NULL_FLOAT=13;
  final int TYPE_NOT_NULL_FLOAT=14;
  final int TYPE_NULL_DECIMAL=15;
  final int TYPE_NOT_NULL_DECIMAL=16;
  final int TYPE_NULL_VARCHAR25=17;
  final int TYPE_NOT_NULL_VARCHAR25=18;
  final int TYPE_NULL_VARCHAR128=19;
  final int TYPE_NOT_NULL_VARCHAR128=20;
  final int TYPE_NULL_VARCHAR1024=21;
  final int TYPE_NOT_NULL_VARCHAR1024=22;
  voltQueueSQL(selectMirrorRow,key,value);
  VoltTable[] mirrorResults=voltExecuteSQL();
  System.out.println("mirrorResults: " + mirrorResults.toString());
  VoltTable rowData=mirrorResults[0];
  System.out.println("rowData: " + rowData.toString() + ". rowData.getRowCount(): "+ rowData.getRowCount());
  long deletedCount=0;
  boolean rowCheckOk=true;
  if (rowData.getRowCount() == 1) {
    byte ntiVal=(byte)rowData.fetchRow(0).get(TYPE_NULL_TINYINT,VoltType.TINYINT);
    if (ntiVal == type_null_tinyint) {
      System.out.println("type_null_tinyint match");
    }
 else {
      System.out.println("Mirror type_null_tinyint (" + type_null_tinyint + ") "+ "not equal to import type_null_tinyint ("+ ntiVal+ ")");
      rowCheckOk=false;
    }
    byte tiVal=(byte)rowData.fetchRow(0).get(TYPE_NOT_NULL_TINYINT,VoltType.TINYINT);
    if (tiVal == type_not_null_tinyint) {
      System.out.println("type_not_null_tinyint match!");
    }
 else {
      System.out.println("Mirror type_not_null_tinyint (" + type_not_null_tinyint + ") "+ "not equal to import type_not_null_tinyint ("+ tiVal+ ")");
      rowCheckOk=false;
    }
    short nsiVal=(short)rowData.fetchRow(0).get(TYPE_NULL_SMALLINT,VoltType.SMALLINT);
    if (nsiVal == type_null_smallint) {
      System.out.println("type_null_smallint match!");
    }
 else {
      System.out.println("Mirror type_null_smallint (" + type_null_smallint + ") "+ "not equal to import type_null_smallint ("+ nsiVal+ ")");
      rowCheckOk=false;
    }
    short siVal=(short)rowData.fetchRow(0).get(TYPE_NOT_NULL_SMALLINT,VoltType.SMALLINT);
    if (siVal == type_not_null_smallint) {
      System.out.println("type_not_null_smallint match!");
    }
 else {
      System.out.println("Mirror type_not_null_smallint (" + type_not_null_smallint + ") "+ "not equal to import type_not_null_smallint ("+ siVal+ ")");
      rowCheckOk=false;
    }
    int nintVal=(int)rowData.fetchRow(0).get(TYPE_NULL_INTEGER,VoltType.INTEGER);
    if (nintVal == type_null_integer) {
      System.out.println("type_null_integer match!!");
    }
 else {
      System.out.println("Mirror type_null_integer (" + type_null_integer + ") "+ "not equal to import type_null_integer ("+ nintVal+ ")");
      rowCheckOk=false;
    }
    int intVal=(int)rowData.fetchRow(0).get(TYPE_NOT_NULL_INTEGER,VoltType.INTEGER);
    if (intVal == type_not_null_integer) {
      System.out.println("type_not_null_integer match!!");
    }
 else {
      System.out.println("Mirror type_not_null_integer (" + type_not_null_integer + ") "+ "not equal to import type_not_null_integer ("+ intVal+ ")");
      rowCheckOk=false;
    }
    long nbigVal=(long)rowData.fetchRow(0).get(TYPE_NULL_BIGINT,VoltType.BIGINT);
    if (nbigVal == type_null_bigint) {
      System.out.println("type_null_bigint match!");
    }
 else {
      System.out.println("Mirror type_null_bigint (" + type_null_bigint + ") "+ "not equal to import type_null_bigint ("+ nbigVal+ ")");
      rowCheckOk=false;
    }
    long bigVal=(long)rowData.fetchRow(0).get(TYPE_NOT_NULL_BIGINT,VoltType.BIGINT);
    if (bigVal == type_not_null_bigint) {
      System.out.println("type_not_null_bigint match!");
    }
 else {
      System.out.println("Mirror type_not_null_bigint (" + type_not_null_bigint + ") "+ "not equal to import type_not_null_bigint ("+ bigVal+ ")");
      rowCheckOk=false;
    }
    TimestampType ntsVal=(TimestampType)rowData.fetchRow(0).get(TYPE_NULL_TIMESTAMP,VoltType.TIMESTAMP);
    if (ntsVal.equals(type_null_timestamp) || (ntsVal.toString().equals("null") && type_null_timestamp.toString().equals("null"))) {
      System.out.println("type_null_timestamp match!!");
    }
 else {
      System.out.println("Mirror type_null_timestamp (" + type_null_timestamp + ") "+ "not equal to import type_null_timestamp ("+ ntsVal+ ")");
      rowCheckOk=false;
    }
    TimestampType tsVal=(TimestampType)rowData.fetchRow(0).get(TYPE_NOT_NULL_TIMESTAMP,VoltType.TIMESTAMP);
    if (tsVal.equals(type_not_null_timestamp)) {
      System.out.println("type_not_null_timestamp match!!");
    }
 else {
      System.out.println("Mirror type_not_null_timestamp (" + type_not_null_timestamp + ") "+ "not equal to import type_not_null_timestamp ("+ tsVal+ ")");
      rowCheckOk=false;
    }
    double nfloatVal=(double)rowData.fetchRow(0).get(TYPE_NULL_FLOAT,VoltType.FLOAT);
    if (nfloatVal == type_null_float) {
      System.out.println("type_null_float match!!");
    }
 else {
      System.out.println("Mirror type_null_float (" + type_null_float + ") "+ "not equal to import type_null_float ("+ nfloatVal+ ")");
      rowCheckOk=false;
    }
    double floatVal=(double)rowData.fetchRow(0).get(TYPE_NOT_NULL_FLOAT,VoltType.FLOAT);
    if (floatVal == type_not_null_float) {
      System.out.println("type_not_null_float match!!");
    }
 else {
      System.out.println("Mirror type_not_null_float (" + type_not_null_float + ") "+ "not equal to import type_not_null_float ("+ floatVal+ ")");
      rowCheckOk=false;
    }
    BigDecimal ndecimalVal=(BigDecimal)rowData.fetchRow(0).get(TYPE_NULL_DECIMAL,VoltType.DECIMAL);
    if (ndecimalVal.equals(type_null_decimal) || (ndecimalVal.toString().equals("null") && type_null_decimal.toString().equals("null"))) {
      System.out.println("type_null_decimal match!!");
    }
 else {
      System.out.println("Mirror type_null_decimal (" + type_null_decimal + ") "+ "not equal to import type_null_decimal ("+ ndecimalVal+ ")");
      rowCheckOk=false;
    }
    BigDecimal decimalVal=(BigDecimal)rowData.fetchRow(0).get(TYPE_NOT_NULL_DECIMAL,VoltType.DECIMAL);
    if (decimalVal.equals(type_not_null_decimal)) {
      System.out.println("type_not_null_decimal match!!");
    }
 else {
      System.out.println("Mirror type_not_null_decimal (" + type_not_null_decimal + ") "+ "not equal to import type_not_null_decimal ("+ decimalVal+ ")");
      rowCheckOk=false;
    }
    String nstring25Val=(String)rowData.fetchRow(0).get(TYPE_NULL_VARCHAR25,VoltType.STRING);
    if (nstring25Val.equals(type_null_varchar25) || (nstring25Val.toString().equals("null") && type_null_varchar25.toString().equals("null"))) {
      System.out.println("type_null_varchar25 match!!");
    }
 else {
      System.out.println("Mirror type_null_varchar25 (" + type_null_varchar25 + ") "+ "not equal to import type_null_varchar25 ("+ nstring25Val+ ")");
      rowCheckOk=false;
    }
    String string25Val=(String)rowData.fetchRow(0).get(TYPE_NOT_NULL_VARCHAR25,VoltType.STRING);
    if (string25Val.equals(type_not_null_varchar25)) {
      System.out.println("type_not_null_varchar25 match!!");
    }
 else {
      System.out.println("Mirror type_not_null_varchar25 (" + type_not_null_varchar25 + ") "+ "not equal to import type_not_null_varchar25 ("+ string25Val+ ")");
      rowCheckOk=false;
    }
    String nstring128Val=(String)rowData.fetchRow(0).get(TYPE_NULL_VARCHAR128,VoltType.STRING);
    if (nstring128Val.equals(type_null_varchar128) || (nstring128Val.toString().equals("null") && type_null_varchar128.toString().equals("null"))) {
      System.out.println("type_null_varchar128 match!!");
    }
 else {
      System.out.println("Mirror type_null_varchar128 (" + type_null_varchar128 + ") "+ "not equal to import type_null_varchar128 ("+ nstring128Val+ ")");
      rowCheckOk=false;
    }
    String string128Val=(String)rowData.fetchRow(0).get(TYPE_NOT_NULL_VARCHAR128,VoltType.STRING);
    if (string128Val.equals(type_not_null_varchar128)) {
      System.out.println("type_not_null_varchar128 match!!");
    }
 else {
      System.out.println("Mirror type_not_null_varchar128 (" + type_not_null_varchar128 + ") "+ "not equal to import type_not_null_varchar128 ("+ string128Val+ ")");
      rowCheckOk=false;
    }
    String nstring1024Val=(String)rowData.fetchRow(0).get(TYPE_NULL_VARCHAR1024,VoltType.STRING);
    if (nstring1024Val.toString().equals(type_null_varchar1024) || (nstring1024Val.toString().equals("null") && type_null_varchar1024.toString().equals("null"))) {
      System.out.println("type_null_varchar1024 match!!");
    }
 else {
      System.out.println("Mirror type_null_varchar1024 (" + type_null_varchar1024 + ") "+ "not equal to import type_null_varchar1024 ("+ nstring1024Val+ ")");
      rowCheckOk=false;
    }
    String string1024Val=(String)rowData.fetchRow(0).get(TYPE_NOT_NULL_VARCHAR1024,VoltType.STRING);
    if (string1024Val.equals(type_not_null_varchar1024)) {
      System.out.println("type_not_null_varchar1024 match!!");
    }
 else {
      System.out.println("Mirror type_not_null_varchar1024 (" + type_not_null_varchar1024 + ") "+ "not equal to import type_not_null_varchar1024 ("+ string1024Val+ ")");
      rowCheckOk=false;
    }
    if (rowCheckOk) {
      voltQueueSQL(deleteMirrorRow,EXPECT_SCALAR_LONG,key,value);
      deletedCount=voltExecuteSQL()[0].asScalarLong();
    }
  }
 else {
    voltQueueSQL(importInsert,key,value,rowid_group,type_null_tinyint,type_not_null_tinyint,type_null_smallint,type_not_null_smallint,type_null_integer,type_not_null_integer,type_null_bigint,type_not_null_bigint,type_null_timestamp,type_not_null_timestamp,type_null_float,type_not_null_float,type_null_decimal,type_not_null_decimal,type_null_varchar25,type_not_null_varchar25,type_null_varchar128,type_not_null_varchar128,type_null_varchar1024,type_not_null_varchar1024);
    voltExecuteSQL();
  }
  voltQueueSQL(selectCounts);
  VoltTable[] result=voltExecuteSQL();
  VoltTable data=result[0];
  long nrows=data.getRowCount();
  if (nrows > 0) {
    long ck=data.fetchRow(0).getLong(0);
    voltQueueSQL(updateCounts,deletedCount,ck);
    voltExecuteSQL(true);
  }
 else {
    voltQueueSQL(insertCounts,key,deletedCount);
    voltExecuteSQL(true);
  }
  return 0;
}
