{
  final int TYPE_NULL_TINYINT=3;
  final int TYPE_NOT_NULL_TINYINT=4;
  final int TYPE_NULL_SMALLINT=5;
  final int TYPE_NOT_NULL_SMALLINT=6;
  final int TYPE_NULL_INTEGER=7;
  final int TYPE_NOT_NULL_INTEGER=8;
  final int TYPE_NULL_BIGINT=9;
  final int TYPE_NOT_NULL_BIGINT=10;
  final int TYPE_NULL_TIMESTAMP=11;
  final int TYPE_NOT_NULL_TIMESTAMP=12;
  final int TYPE_NULL_FLOAT=13;
  final int TYPE_NOT_NULL_FLOAT=14;
  final int TYPE_NULL_DECIMAL=15;
  final int TYPE_NOT_NULL_DECIMAL=16;
  final int TYPE_NULL_VARCHAR25=17;
  final int TYPE_NOT_NULL_VARCHAR25=18;
  final int TYPE_NULL_VARCHAR128=19;
  final int TYPE_NOT_NULL_VARCHAR128=20;
  final int TYPE_NULL_VARCHAR1024=21;
  final int TYPE_NOT_NULL_VARCHAR1024=22;
  voltQueueSQL(selectMirrorRow,key,value);
  VoltTable[] mirrorResults=voltExecuteSQL();
  VoltTable rowData=mirrorResults[0];
  long deletedCount=0;
  boolean rowCheckOk=true;
  if (rowData.getRowCount() == 1) {
    byte ntiVal=(byte)rowData.fetchRow(0).get(TYPE_NULL_TINYINT,VoltType.TINYINT);
    if (ntiVal != type_null_tinyint) {
      rowCheckOk=reportMismatch("type_null_tinyint",String.valueOf(type_null_tinyint),String.valueOf(ntiVal));
    }
    byte tiVal=(byte)rowData.fetchRow(0).get(TYPE_NOT_NULL_TINYINT,VoltType.TINYINT);
    if (tiVal != type_not_null_tinyint) {
      rowCheckOk=reportMismatch("type_not_null_tinyint",String.valueOf(type_not_null_tinyint),String.valueOf(tiVal));
    }
    short nsiVal=(short)rowData.fetchRow(0).get(TYPE_NULL_SMALLINT,VoltType.SMALLINT);
    if (nsiVal != type_null_smallint) {
      rowCheckOk=reportMismatch("type_null_smallint",String.valueOf(type_null_smallint),String.valueOf(nsiVal));
    }
    short siVal=(short)rowData.fetchRow(0).get(TYPE_NOT_NULL_SMALLINT,VoltType.SMALLINT);
    if (siVal != type_not_null_smallint) {
      rowCheckOk=reportMismatch("type_not_null_smallint",String.valueOf(type_not_null_smallint),String.valueOf(siVal));
    }
    int nintVal=(int)rowData.fetchRow(0).get(TYPE_NULL_INTEGER,VoltType.INTEGER);
    if (nintVal != type_null_integer) {
      rowCheckOk=reportMismatch("type_null_integer",String.valueOf(type_null_integer),String.valueOf(nintVal));
    }
    int intVal=(int)rowData.fetchRow(0).get(TYPE_NOT_NULL_INTEGER,VoltType.INTEGER);
    if (intVal != type_not_null_integer) {
      rowCheckOk=reportMismatch("type_not_null_integer",String.valueOf(type_not_null_integer),String.valueOf(intVal));
    }
    long nbigVal=(long)rowData.fetchRow(0).get(TYPE_NULL_BIGINT,VoltType.BIGINT);
    if (nbigVal != type_null_bigint) {
      rowCheckOk=reportMismatch("type_null_bigint",String.valueOf(type_null_bigint),String.valueOf(nbigVal));
    }
    long bigVal=(long)rowData.fetchRow(0).get(TYPE_NOT_NULL_BIGINT,VoltType.BIGINT);
    if (bigVal != type_not_null_bigint) {
      rowCheckOk=reportMismatch("type_not_null_bigint",String.valueOf(type_not_null_bigint),String.valueOf(bigVal));
    }
    TimestampType ntsVal=(TimestampType)rowData.fetchRow(0).get(TYPE_NULL_TIMESTAMP,VoltType.TIMESTAMP);
    if (!(ntsVal == null && type_null_timestamp == null) && !ntsVal.equals(type_null_timestamp)) {
      rowCheckOk=reportMismatch("type_null_timestamp",type_null_timestamp.toString(),ntsVal.toString());
    }
    TimestampType tsVal=(TimestampType)rowData.fetchRow(0).get(TYPE_NOT_NULL_TIMESTAMP,VoltType.TIMESTAMP);
    if (!tsVal.equals(type_not_null_timestamp)) {
      rowCheckOk=reportMismatch("type_not_null_timestamp",type_not_null_timestamp.toString(),tsVal.toString());
    }
    double nfloatVal=(double)rowData.fetchRow(0).get(TYPE_NULL_FLOAT,VoltType.FLOAT);
    if (nfloatVal != type_null_float) {
      rowCheckOk=reportMismatch("type_null_float",String.valueOf(type_null_float),String.valueOf(nfloatVal));
    }
    double floatVal=(double)rowData.fetchRow(0).get(TYPE_NOT_NULL_FLOAT,VoltType.FLOAT);
    if (floatVal != type_not_null_float) {
      rowCheckOk=reportMismatch("type_not_null_float",String.valueOf(type_not_null_float),String.valueOf(floatVal));
    }
    BigDecimal ndecimalVal=(BigDecimal)rowData.fetchRow(0).get(TYPE_NULL_DECIMAL,VoltType.DECIMAL);
    if (!(ndecimalVal == null && type_null_decimal == null) && !ndecimalVal.equals(type_null_decimal)) {
      rowCheckOk=reportMismatch("type_null_decimal",type_null_decimal.toString(),ndecimalVal.toString());
    }
    BigDecimal decimalVal=(BigDecimal)rowData.fetchRow(0).get(TYPE_NOT_NULL_DECIMAL,VoltType.DECIMAL);
    if (!decimalVal.equals(type_not_null_decimal)) {
      rowCheckOk=reportMismatch("type_not_null_decimal",type_not_null_decimal.toString(),decimalVal.toString());
    }
    String nstring25Val=(String)rowData.fetchRow(0).get(TYPE_NULL_VARCHAR25,VoltType.STRING);
    if (!(nstring25Val == null && type_null_varchar25 == null) && !nstring25Val.equals(type_null_varchar25)) {
      rowCheckOk=reportMismatch("type_null_varchar25",type_null_varchar25,nstring25Val);
    }
    String string25Val=(String)rowData.fetchRow(0).get(TYPE_NOT_NULL_VARCHAR25,VoltType.STRING);
    if (!string25Val.equals(type_not_null_varchar25)) {
      rowCheckOk=reportMismatch("type_not_null_varchar25",type_not_null_varchar25,string25Val);
    }
    String nstring128Val=(String)rowData.fetchRow(0).get(TYPE_NULL_VARCHAR128,VoltType.STRING);
    if (!(nstring128Val == null && type_null_varchar128 == null) && !nstring128Val.equals(type_null_varchar128)) {
      rowCheckOk=reportMismatch("type_null_varchar128",type_null_varchar128,nstring128Val);
    }
    String string128Val=(String)rowData.fetchRow(0).get(TYPE_NOT_NULL_VARCHAR128,VoltType.STRING);
    if (!string128Val.equals(type_not_null_varchar128)) {
      rowCheckOk=reportMismatch("type_not_null_varchar128",type_not_null_varchar128,string128Val);
    }
    String nstring1024Val=(String)rowData.fetchRow(0).get(TYPE_NULL_VARCHAR1024,VoltType.STRING);
    if (!(nstring1024Val == null && type_null_varchar1024 == null) && !nstring1024Val.equals(type_null_varchar1024)) {
      rowCheckOk=reportMismatch("type_null_varchar1024",type_null_varchar1024,nstring1024Val);
    }
    String string1024Val=(String)rowData.fetchRow(0).get(TYPE_NOT_NULL_VARCHAR1024,VoltType.STRING);
    if (!string1024Val.equals(type_not_null_varchar1024)) {
      rowCheckOk=reportMismatch("type_not_null_varchar1024",type_not_null_varchar1024,string1024Val);
    }
    if (rowCheckOk) {
      voltQueueSQL(deleteMirrorRow,EXPECT_SCALAR_LONG,key,value);
      deletedCount=voltExecuteSQL()[0].asScalarLong();
    }
    if (deletedCount != 1) {
      System.out.println("Rows deleted: " + deletedCount + ", key: "+ key+ ", value: "+ value);
    }
  }
 else {
    voltQueueSQL(importInsert,key,value,rowid_group,type_null_tinyint,type_not_null_tinyint,type_null_smallint,type_not_null_smallint,type_null_integer,type_not_null_integer,type_null_bigint,type_not_null_bigint,type_null_timestamp,type_not_null_timestamp,type_null_float,type_not_null_float,type_null_decimal,type_not_null_decimal,type_null_varchar25,type_not_null_varchar25,type_null_varchar128,type_not_null_varchar128,type_null_varchar1024,type_not_null_varchar1024);
    voltExecuteSQL();
  }
  voltQueueSQL(selectCounts);
  VoltTable[] result=voltExecuteSQL();
  VoltTable data=result[0];
  long nrows=data.getRowCount();
  if (nrows > 0) {
    long ck=data.fetchRow(0).getLong(0);
    voltQueueSQL(updateCounts,deletedCount,ck);
    voltExecuteSQL(true);
  }
 else {
    voltQueueSQL(insertCounts,key,deletedCount);
    voltExecuteSQL(true);
  }
  return 0;
}
