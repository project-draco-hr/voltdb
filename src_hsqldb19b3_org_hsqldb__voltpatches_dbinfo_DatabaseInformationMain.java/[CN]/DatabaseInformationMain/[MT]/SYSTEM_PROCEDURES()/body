{
  Table t=sysTables[SYSTEM_PROCEDURES];
  if (t == null) {
    t=createBlankTable(sysTableHsqlNames[SYSTEM_PROCEDURES]);
    addColumn(t,"PROCEDURE_CAT",SQL_IDENTIFIER);
    addColumn(t,"PROCEDURE_SCHEM",SQL_IDENTIFIER);
    addColumn(t,"PROCEDURE_NAME",SQL_IDENTIFIER);
    addColumn(t,"NUM_INPUT_PARAMS",Type.SQL_INTEGER);
    addColumn(t,"NUM_OUTPUT_PARAMS",Type.SQL_INTEGER);
    addColumn(t,"NUM_RESULT_SETS",Type.SQL_INTEGER);
    addColumn(t,"REMARKS",CHARACTER_DATA);
    addColumn(t,"PROCEDURE_TYPE",Type.SQL_SMALLINT);
    addColumn(t,"SPECIFIC_NAME",SQL_IDENTIFIER);
    addColumn(t,"ORIGIN",CHARACTER_DATA);
    HsqlName name=HsqlNameManager.newInfoSchemaObjectName(sysTableHsqlNames[SYSTEM_PROCEDURES].name,false,SchemaObject.INDEX);
    t.createPrimaryKey(name,new int[]{1,2,8,0},false);
    return t;
  }
  String catalog;
  String schema;
  String procName;
  Integer numInputParams;
  Integer numOutputParams;
  Integer numResultSets;
  String remarks;
  Integer procRType;
  String procOrigin;
  String specificName;
  String alias;
  HsqlArrayList aliasList;
  Iterator methods;
  Object[] methodInfo;
  Method method;
  String methodOrigin;
  Object[] row;
  methods=ns.iterateAllAccessibleMethods(session,true);
  catalog=database.getCatalogName().name;
  schema=database.schemaManager.getDefaultSchemaHsqlName().name;
  while (methods.hasNext()) {
    methodInfo=(Object[])methods.next();
    method=(Method)methodInfo[0];
    aliasList=(HsqlArrayList)methodInfo[1];
    methodOrigin=(String)methodInfo[2];
    pi.setMethod(method);
    procName=pi.getFQN();
    numInputParams=pi.getInputParmCount();
    numOutputParams=pi.getOutputParmCount();
    numResultSets=pi.getResultSetCount();
    remarks=pi.getRemark();
    procRType=pi.getResultType(methodOrigin);
    specificName=pi.getSpecificName();
    procOrigin=pi.getOrigin(methodOrigin);
    addProcRows(t,aliasList,catalog,schema,procName,numInputParams,numOutputParams,numResultSets,remarks,procRType,specificName,procOrigin);
  }
  return t;
}
