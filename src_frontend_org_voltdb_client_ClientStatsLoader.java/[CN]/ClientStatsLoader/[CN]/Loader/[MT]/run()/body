{
  long sleepLess=0;
synchronized (ClientStatsLoader.this) {
    try {
      while (true) {
        if (m_shouldStop) {
          break;
        }
        try {
          if (m_pollInterval - sleepLess > 0) {
            ClientStatsLoader.this.wait(m_pollInterval - sleepLess);
          }
        }
 catch (        InterruptedException e) {
          return;
        }
        final long startTime=System.currentTimeMillis();
        final VoltTable ioStats=m_distributer.getConnectionStats(true);
        final VoltTable procedureStats=m_distributer.getProcedureStats(true);
        boolean first=true;
        try {
          while (ioStats.advanceRow()) {
            int index=2;
            if (first) {
              insertConnectionStatsStmt.setTimestamp(index++,new Timestamp(ioStats.getLong("TIMESTAMP")));
            }
 else {
              index++;
            }
            insertConnectionStatsStmt.setString(index++,ioStats.getString("HOSTNAME"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("CONNECTION_ID"));
            insertConnectionStatsStmt.setInt(index++,(int)ioStats.getLong("SERVER_HOST_ID"));
            insertConnectionStatsStmt.setString(index++,ioStats.getString("SERVER_HOSTNAME"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("SERVER_CONNECTION_ID"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("INVOCATIONS_COMPLETED"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("INVOCATIONS_ABORTED"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("INVOCATIONS_FAILED"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("BYTES_READ"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("MESSAGES_READ"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("BYTES_WRITTEN"));
            insertConnectionStatsStmt.setLong(index++,ioStats.getLong("MESSAGES_WRITTEN"));
            insertConnectionStatsStmt.addBatch();
          }
          insertConnectionStatsStmt.executeBatch();
        }
 catch (        SQLException e) {
          if (e.getCause() instanceof InterruptedException) {
            return;
          }
          e.printStackTrace();
        }
        first=true;
        try {
          while (procedureStats.advanceRow()) {
            int index=2;
            if (first) {
              insertProcedureStatsStmt.setTimestamp(index++,new Timestamp(procedureStats.getLong("TIMESTAMP")));
            }
 else {
              index++;
            }
            insertProcedureStatsStmt.setString(index++,procedureStats.getString("HOSTNAME"));
            insertProcedureStatsStmt.setLong(index++,procedureStats.getLong("CONNECTION_ID"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("SERVER_HOST_ID"));
            insertProcedureStatsStmt.setString(index++,procedureStats.getString("SERVER_HOSTNAME"));
            insertProcedureStatsStmt.setLong(index++,procedureStats.getLong("SERVER_CONNECTION_ID"));
            insertProcedureStatsStmt.setString(index++,procedureStats.getString("PROCEDURE_NAME"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("ROUNDTRIPTIME_AVG"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("ROUNDTRIPTIME_MIN"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("ROUNDTRIPTIME_MAX"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("CLUSTER_ROUNDTRIPTIME_AVG"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("CLUSTER_ROUNDTRIPTIME_MIN"));
            insertProcedureStatsStmt.setInt(index++,(int)procedureStats.getLong("CLUSTER_ROUNDTRIPTIME_MAX"));
            insertProcedureStatsStmt.setLong(index++,procedureStats.getLong("INVOCATIONS_COMPLETED"));
            insertProcedureStatsStmt.setLong(index++,procedureStats.getLong("INVOCATIONS_ABORTED"));
            insertProcedureStatsStmt.setLong(index++,procedureStats.getLong("INVOCATIONS_FAILED"));
            insertProcedureStatsStmt.addBatch();
          }
          insertProcedureStatsStmt.executeBatch();
        }
 catch (        SQLException e) {
          if (e.getCause() instanceof InterruptedException) {
            return;
          }
          e.printStackTrace();
        }
        try {
          m_conn.commit();
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
        final long endTime=System.currentTimeMillis();
        sleepLess=endTime - startTime;
      }
    }
  finally {
      m_stopped=true;
      ClientStatsLoader.this.notifyAll();
    }
  }
}
