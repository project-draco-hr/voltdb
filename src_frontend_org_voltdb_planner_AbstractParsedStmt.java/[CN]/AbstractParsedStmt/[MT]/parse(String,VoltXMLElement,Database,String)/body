{
  final String INSERT_NODE_NAME="insert";
  final String UPDATE_NODE_NAME="update";
  final String DELETE_NODE_NAME="delete";
  final String SELECT_NODE_NAME="select";
  AbstractParsedStmt retval=null;
  if (stmtTypeElement == null) {
    System.err.println("Unexpected error parsing hsql parsed stmt xml");
    throw new RuntimeException("Unexpected error parsing hsql parsed stmt xml");
  }
  if (stmtTypeElement.name.equalsIgnoreCase(INSERT_NODE_NAME)) {
    retval=new ParsedInsertStmt();
  }
 else   if (stmtTypeElement.name.equalsIgnoreCase(UPDATE_NODE_NAME)) {
    retval=new ParsedUpdateStmt();
  }
 else   if (stmtTypeElement.name.equalsIgnoreCase(DELETE_NODE_NAME)) {
    retval=new ParsedDeleteStmt();
  }
 else   if (stmtTypeElement.name.equalsIgnoreCase(SELECT_NODE_NAME)) {
    retval=new ParsedSelectStmt();
  }
 else {
    throw new RuntimeException("Unexpected Element: " + stmtTypeElement.name);
  }
  for (  VoltXMLElement node : stmtTypeElement.children) {
    if (node.name.equalsIgnoreCase("parameters")) {
      retval.parseParameters(node,db);
    }
    if (node.name.equalsIgnoreCase("tablescans")) {
      retval.parseTables(node,db);
    }
    if (node.name.equalsIgnoreCase("scan_columns")) {
      retval.parseScanColumns(node,db);
    }
  }
  retval.parse(stmtTypeElement,db);
  retval.analyzeWhereExpression(db);
  assert(retval.multiTableSelectionList.size() == 0);
  assert(retval.noTableSelectionList.size() == 0);
  retval.sql=sql;
  retval.joinOrder=joinOrder;
  return retval;
}
