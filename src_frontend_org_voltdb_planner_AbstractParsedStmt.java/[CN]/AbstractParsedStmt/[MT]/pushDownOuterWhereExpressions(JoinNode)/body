{
  assert(joinNode != null && joinNode.m_leftNode != null && joinNode.m_rightNode != null);
  JoinNode outerNode=joinNode.m_leftNode;
  JoinType joinType=joinNode.m_rightNode.m_joinType;
  if (joinType == JoinType.INNER) {
    joinNode.m_joinInnerList.addAll(joinNode.m_whereInnerList);
    joinNode.m_whereInnerList.clear();
    joinNode.m_joinOuterList.addAll(joinNode.m_whereOuterList);
    joinNode.m_whereOuterList.clear();
    joinNode.m_joinInnerOuterList.addAll(joinNode.m_whereInnerOuterList);
    joinNode.m_whereInnerOuterList.clear();
  }
  if (outerNode.m_table == null) {
    Collection<Table> innerTables=outerNode.m_rightNode.generateTableJoinOrder();
    Collection<Table> outerTables=outerNode.m_leftNode.generateTableJoinOrder();
    List<AbstractExpression> pushDownExprList=(joinType == JoinType.INNER) ? joinNode.m_joinOuterList : joinNode.m_whereOuterList;
    classifyOuterJoinExpressions(pushDownExprList,outerTables,innerTables,outerNode.m_whereOuterList,outerNode.m_whereInnerList,outerNode.m_whereInnerOuterList);
    pushDownExprList.clear();
    pushDownOuterWhereExpressions(outerNode);
  }
}
