{
  String type=exprNode.attributes.get("type");
  ExpressionType exprType=ExpressionType.get(type);
  AbstractExpression expr=null;
  if (exprType == ExpressionType.INVALID) {
    throw new PlanningErrorException("Unsupported operation type '" + type + "'");
  }
  try {
    expr=exprType.getExpressionClass().newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
  expr.setExpressionType(exprType);
  if (expr instanceof TupleValueExpression) {
    return expr;
  }
  if (expr instanceof AggregateExpression) {
    String node;
    if ((node=exprNode.attributes.get("distinct")) != null) {
      AggregateExpression ae=(AggregateExpression)expr;
      ae.m_distinct=Boolean.parseBoolean(node);
    }
  }
  VoltXMLElement leftExprNode=exprNode.children.get(0);
  assert(leftExprNode != null);
  VoltXMLElement rightExprNode=null;
  if (exprNode.children.size() > 1)   rightExprNode=exprNode.children.get(1);
  AbstractExpression leftExpr=parseExpressionTree(paramsById,leftExprNode);
  assert((leftExpr != null) || (exprType == ExpressionType.AGGREGATE_COUNT));
  expr.setLeft(leftExpr);
  if (expr.needsRightExpression()) {
    assert(rightExprNode != null);
    AbstractExpression rightExpr=parseExpressionTree(paramsById,rightExprNode);
    assert(rightExpr != null);
    expr.setRight(rightExpr);
  }
  return expr;
}
