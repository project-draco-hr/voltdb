{
  if (expr.getExpressionType() != ExpressionType.COMPARE_EQUAL) {
    return;
  }
  AbstractExpression leftExpr=expr.getLeft();
  AbstractExpression rightExpr=expr.getRight();
  if ((!(leftExpr instanceof TupleValueExpression)) && leftExpr.hasAnySubexpressionOfClass(TupleValueExpression.class)) {
    return;
  }
  if ((!(rightExpr instanceof TupleValueExpression)) && rightExpr.hasAnySubexpressionOfClass(TupleValueExpression.class)) {
    return;
  }
  Set<AbstractExpression> eqSet1=null;
  if (valueEquivalence.containsKey(leftExpr)) {
    eqSet1=valueEquivalence.get(leftExpr);
  }
  if (valueEquivalence.containsKey(rightExpr)) {
    Set<AbstractExpression> eqSet2=valueEquivalence.get(rightExpr);
    if (eqSet1 == null) {
      valueEquivalence.put(leftExpr,eqSet2);
      eqSet2.add(leftExpr);
    }
 else {
      for (      AbstractExpression eqMember : eqSet2) {
        eqSet1.add(eqMember);
        valueEquivalence.put(eqMember,eqSet1);
      }
    }
  }
 else {
    if (eqSet1 == null) {
      eqSet1=new HashSet<AbstractExpression>();
      valueEquivalence.put(leftExpr,eqSet1);
      eqSet1.add(leftExpr);
    }
    valueEquivalence.put(rightExpr,eqSet1);
    eqSet1.add(rightExpr);
  }
}
