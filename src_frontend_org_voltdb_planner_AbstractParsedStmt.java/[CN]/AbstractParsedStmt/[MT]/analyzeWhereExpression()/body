{
  ArrayDeque<AbstractExpression> in=new ArrayDeque<AbstractExpression>();
  ArrayDeque<AbstractExpression> out=new ArrayDeque<AbstractExpression>();
  for (  Map.Entry<Table,AbstractParsedStmt.JoinInfo> tableJoinInfo : this.tableJoinList.entrySet()) {
    AbstractParsedStmt.JoinInfo joinInfo=tableJoinInfo.getValue();
    if (joinInfo.joinExpr != null) {
      in.add(joinInfo.joinExpr);
    }
    if (joinInfo.whereExpr != null) {
      in.add(joinInfo.whereExpr);
    }
  }
  AbstractExpression inExpr=null;
  while ((inExpr=in.poll()) != null) {
    if (inExpr.getExpressionType() == ExpressionType.CONJUNCTION_AND) {
      in.add(inExpr.getLeft());
      in.add(inExpr.getRight());
    }
 else {
      out.add(inExpr);
    }
  }
  if (out.isEmpty()) {
    return;
  }
  whereSelectionList.addAll(out);
  this.analyzeWhereExpression(whereSelectionList);
}
