{
  String type=attrs.getNamedItem("type").getNodeValue();
  ExpressionType exprType=ExpressionType.get(type);
  AbstractExpression expr=null;
  if (exprType == ExpressionType.INVALID) {
    throw new PlanningErrorException("Unsupported operation type '" + type + "'");
  }
  try {
    expr=exprType.getExpressionClass().newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
  expr.setExpressionType(exprType);
  if (expr instanceof TupleValueExpression) {
    return expr;
  }
  if (expr instanceof AggregateExpression) {
    Node node;
    if ((node=attrs.getNamedItem("distinct")) != null) {
      AggregateExpression ae=(AggregateExpression)expr;
      ae.m_distinct=Boolean.parseBoolean(node.getNodeValue());
    }
  }
  NodeList children=exprNode.getChildNodes();
  int i=0;
  Node leftExprNode=children.item(i++);
  while ((leftExprNode != null) && (leftExprNode.getNodeType() != Node.ELEMENT_NODE))   leftExprNode=children.item(i++);
  assert(leftExprNode != null);
  Node rightExprNode=children.item(i++);
  while ((rightExprNode != null) && (rightExprNode.getNodeType() != Node.ELEMENT_NODE))   rightExprNode=children.item(i++);
  AbstractExpression leftExpr=parseExpressionTree(leftExprNode,db);
  assert((leftExpr != null) || (exprType == ExpressionType.AGGREGATE_COUNT));
  expr.setLeft(leftExpr);
  if (ExpressionUtil.needsRightExpression(expr)) {
    assert(rightExprNode != null);
    AbstractExpression rightExpr=parseExpressionTree(rightExprNode,db);
    assert(rightExpr != null);
    expr.setRight(rightExpr);
  }
  return expr;
}
