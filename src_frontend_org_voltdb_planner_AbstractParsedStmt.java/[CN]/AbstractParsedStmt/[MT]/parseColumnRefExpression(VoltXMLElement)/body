{
  List<TupleValueExpression> childExprs=null;
  if (!exprNode.children.isEmpty()) {
    childExprs=new ArrayList<TupleValueExpression>();
    for (    VoltXMLElement childRefExpr : exprNode.children) {
      if (childRefExpr.name.toLowerCase().equals("columnref")) {
        childExprs.add(parseColumnRefExpression(childRefExpr));
      }
    }
  }
  String tableName=exprNode.attributes.get("table");
  String tableAlias=exprNode.attributes.get("tablealias");
  boolean hasChildren=childExprs != null && !childExprs.isEmpty();
  if (tableName == null) {
    if (hasChildren == true) {
      tableName=childExprs.get(0).getTableName();
      tableAlias=childExprs.get(0).getTableAlias();
    }
    if (tableName == null) {
      assert(m_DDLIndexedTable != null);
      tableName=m_DDLIndexedTable.getTypeName();
    }
  }
  assert(tableName != null);
  if (tableAlias == null) {
    if (hasChildren) {
      for (      TupleValueExpression childTVE : childExprs) {
        tableAlias=childTVE.getTableAlias();
        assert(tableAliasIndexMap.containsKey(childTVE.getTableAlias()));
        int tableIdx=tableAliasIndexMap.get(childTVE.getTableAlias());
        StmtTableScan childTable=stmtCache.get(tableIdx);
        if (childTable.m_isInner == false) {
          break;
        }
      }
    }
 else {
      tableAlias=tableName;
    }
  }
  String columnName=exprNode.attributes.get("column");
  String columnAlias=exprNode.attributes.get("alias");
  TupleValueExpression expr=new TupleValueExpression(tableName,tableAlias,columnName,columnAlias);
  if (childExprs != null && !childExprs.isEmpty()) {
    expr.setChildExpressions(childExprs);
  }
  expr.resolveForDB(m_db);
  addScanColumn(expr);
  return expr;
}
