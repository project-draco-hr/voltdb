{
  List<TupleValueExpression> childExprs=null;
  if (!exprNode.children.isEmpty()) {
    childExprs=new ArrayList<TupleValueExpression>();
    for (    VoltXMLElement childRefExpr : exprNode.children) {
      if (childRefExpr.name.toLowerCase().equals("columnref")) {
        childExprs.add(parseColumnRefExpression(childRefExpr));
      }
    }
  }
  String tableName=null;
  String tableAlias=null;
  boolean isNotUsingColumn=childExprs == null || childExprs.isEmpty();
  if (isNotUsingColumn) {
    tableName=exprNode.attributes.get("table");
    tableAlias=exprNode.attributes.get("tablealias");
    if (tableName == null) {
      assert(m_DDLIndexedTable != null);
      tableName=m_DDLIndexedTable.getTypeName();
    }
    if (tableAlias == null) {
      tableAlias=tableName;
    }
  }
 else {
    for (    TupleValueExpression childTVE : childExprs) {
      tableName=childTVE.getTableName();
      tableAlias=childTVE.getTableAlias();
      assert(tableAliasIndexMap.containsKey(childTVE.getTableAlias()));
      int tableIdx=tableAliasIndexMap.get(childTVE.getTableAlias());
      StmtTableScan childTable=stmtCache.get(tableIdx);
      if (childTable.m_isInner == false) {
        break;
      }
    }
  }
  assert(tableName != null);
  String columnName=exprNode.attributes.get("column");
  String columnAlias=exprNode.attributes.get("alias");
  TupleValueExpression expr=new TupleValueExpression(tableName,tableAlias,columnName,columnAlias);
  if (childExprs != null && !childExprs.isEmpty()) {
    expr.setChildExpressions(childExprs);
  }
  expr.resolveForDB(m_db);
  addScanColumn(expr);
  return expr;
}
