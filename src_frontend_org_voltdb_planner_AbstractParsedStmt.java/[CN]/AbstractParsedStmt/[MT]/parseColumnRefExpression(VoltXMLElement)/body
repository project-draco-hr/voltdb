{
  String tableName=exprNode.attributes.get("table");
  if (tableName == null) {
    assert(m_DDLIndexedTable != null);
    tableName=m_DDLIndexedTable.getTypeName();
  }
  assert(tableName != null);
  String tableAlias=exprNode.attributes.get("tablealias");
  if (tableAlias == null) {
    tableAlias=tableName;
  }
  String columnName=exprNode.attributes.get("column");
  String columnAlias=exprNode.attributes.get("alias");
  TupleValueExpression expr=new TupleValueExpression(tableName,tableAlias,columnName,columnAlias);
  String usingAttr=exprNode.attributes.get("using");
  boolean isUsingColumn=usingAttr != null ? Boolean.parseBoolean(usingAttr) : false;
  int differentiator=Integer.parseInt(exprNode.attributes.get("index"));
  if (differentiator == -1 && isUsingColumn) {
    for (    VoltXMLElement usingElem : exprNode.children) {
      String usingTableAlias=usingElem.attributes.get("tablealias");
      if (usingTableAlias != null && usingTableAlias.equals(tableAlias)) {
        differentiator=Integer.parseInt(usingElem.attributes.get("index"));
      }
    }
  }
  expr.setDifferentiator(differentiator);
  StmtTableScan tableScan=resolveStmtTableScanByAlias(tableAlias);
  if (tableScan == null) {
    throw new PlanningErrorException("Object not found: " + tableAlias);
  }
  tableScan.resolveTVE(expr);
  if (m_stmtId == tableScan.getStatementId()) {
    return expr;
  }
  int paramIdx=NEXT_PARAMETER_ID++;
  ParameterValueExpression pve=new ParameterValueExpression(paramIdx,expr);
  m_parameterTveMap.put(paramIdx,expr);
  return pve;
}
