{
  String tableName=tableNode.attributes.get("table");
  assert(tableName != null);
  String tableAlias=tableNode.attributes.get("tablealias");
  if (tableAlias == null) {
    tableAlias=tableName;
  }
  m_tableAliasListAsJoinOrder.add(tableAlias);
  VoltXMLElement subqueryElement=null;
  for (  VoltXMLElement childNode : tableNode.children) {
    if (!childNode.name.equals("tablesubquery")) {
      continue;
    }
    if (childNode.children.isEmpty()) {
      continue;
    }
    subqueryElement=childNode.children.get(0);
    break;
  }
  StmtTableScan tableScan=null;
  Table table=null;
  if (subqueryElement == null) {
    table=getTableFromDB(tableName);
    assert(table != null);
    m_tableList.add(table);
    tableScan=addTableToStmtCache(table,tableAlias);
  }
 else {
    AbstractParsedStmt subquery=parseFromSubQuery(subqueryElement);
    tableScan=addSubqueryToStmtCache(subquery,tableAlias);
  }
  AbstractExpression joinExpr=parseJoinCondition(tableNode);
  AbstractExpression whereExpr=parseWhereCondition(tableNode);
  int nodeId=(m_joinTree == null) ? 0 : m_joinTree.getId() + 1;
  JoinNode leafNode;
  if (table != null) {
    leafNode=new TableLeafNode(nodeId,joinExpr,whereExpr,(StmtTargetTableScan)tableScan);
  }
 else {
    assert(tableScan instanceof StmtSubqueryScan);
    leafNode=new SubqueryLeafNode(nodeId,joinExpr,whereExpr,(StmtSubqueryScan)tableScan);
  }
  if (m_joinTree == null) {
    m_joinTree=leafNode;
  }
 else {
    JoinType joinType=JoinType.get(tableNode.attributes.get("jointype"));
    assert(joinType != JoinType.INVALID);
    if (joinType == JoinType.FULL) {
      throw new PlanningErrorException("VoltDB does not support full outer joins");
    }
    JoinNode joinNode=new BranchNode(nodeId + 1,joinType,m_joinTree,leafNode);
    m_joinTree=joinNode;
  }
}
