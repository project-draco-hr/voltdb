{
  assert(!nextJoinTree.m_hasOuterJoin);
  if (joinTree.m_wasAnalyzed == false) {
    Collection<AbstractExpression> exprList=joinTree.getAllExpressions();
    HashSet<Table> tableSet=new HashSet<Table>();
    for (    AbstractExpression expr : exprList) {
      tableSet.clear();
      getTablesForExpression(expr,tableSet);
      if (tableSet.size() == 0) {
        noTableSelectionList.add(expr);
      }
 else       if (tableSet.size() == 1) {
        Table table=(Table)tableSet.toArray()[0];
        ArrayList<AbstractExpression> exprs;
        if (joinTree.m_tableFilterList.containsKey(table)) {
          exprs=joinTree.m_tableFilterList.get(table);
        }
 else {
          exprs=new ArrayList<AbstractExpression>();
          joinTree.m_tableFilterList.put(table,exprs);
        }
        expr.m_isJoiningClause=false;
        exprs.add(expr);
      }
 else       if (tableSet.size() == 2) {
        JoinTree.TablePair pair=new JoinTree.TablePair();
        pair.t1=(Table)tableSet.toArray()[0];
        pair.t2=(Table)tableSet.toArray()[1];
        ArrayList<AbstractExpression> exprs;
        if (joinTree.m_joinSelectionList.containsKey(pair)) {
          exprs=joinTree.m_joinSelectionList.get(pair);
        }
 else {
          exprs=new ArrayList<AbstractExpression>();
          joinTree.m_joinSelectionList.put(pair,exprs);
        }
        expr.m_isJoiningClause=true;
        exprs.add(expr);
      }
 else       if (tableSet.size() > 2) {
        multiTableSelectionList.add(expr);
      }
    }
    joinTree.m_wasAnalyzed=true;
  }
  nextJoinTree.m_tableFilterList=joinTree.m_tableFilterList;
  nextJoinTree.m_joinSelectionList=joinTree.m_joinSelectionList;
}
