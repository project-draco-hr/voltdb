{
  String retval="SQL:\n\t" + sql + "\n";
  retval+="PARAMETERS:\n\t";
  for (  VoltType param : paramList) {
    retval+=param.toString() + " ";
  }
  retval+="\nTABLE SOURCES:\n\t";
  for (  Table table : tableList) {
    retval+=table.getTypeName() + " ";
  }
  retval+="\nSCAN COLUMNS:\n";
  if (scanColumns != null) {
    for (    String table : scanColumns.keySet()) {
      retval+="\tTable: " + table + ":\n";
      for (      SchemaColumn col : scanColumns.get(table)) {
        retval+="\t\tColumn: " + col.getColumnName() + ": ";
        retval+=col.getExpression().toString() + "\n";
      }
    }
  }
 else {
    retval+="\tALL\n";
  }
  if (joinTree.m_root != null) {
    retval+="\nTABLES:\n";
    ArrayDeque<JoinTree.JoinNode> joinNodes=new ArrayDeque<JoinTree.JoinNode>();
    joinNodes.add(joinTree.m_root);
    while (!joinNodes.isEmpty()) {
      JoinTree.JoinNode joinNode=joinNodes.poll();
      if (joinNode == null) {
        continue;
      }
      if (joinNode.m_leftNode != null) {
        joinNodes.add(joinNode.m_leftNode);
      }
      if (joinNode.m_rightNode != null) {
        joinNodes.add(joinNode.m_rightNode);
      }
      if (joinNode.m_table != null) {
        retval+="\tTABLE: " + joinNode.m_table.getTypeName() + ", JOIN: "+ joinNode.m_joinType.toString()+ "\n";
        int i=0;
        if (joinNode.m_joinExpr != null) {
          retval+="\t\t JOIN CONDITIONS:\n";
          retval+="\t\t\t(" + String.valueOf(i++) + ") "+ joinNode.m_joinExpr.toString()+ "\n";
        }
        int j=0;
        if (joinNode.m_whereExpr != null) {
          retval+="\t\t WHERE CONDITIONS:\n";
          retval+="\t\t\t(" + String.valueOf(j++) + ") "+ joinNode.m_whereExpr.toString()+ "\n";
        }
      }
    }
  }
  retval+="NO TABLE SELECTION LIST:\n";
  int i=0;
  for (  AbstractExpression expr : noTableSelectionList)   retval+="\t(" + String.valueOf(i++) + ") "+ expr.toString()+ "\n";
  retval+="MULTI TABLE SELECTION LIST:\n";
  i=0;
  for (  AbstractExpression expr : multiTableSelectionList)   retval+="\t(" + String.valueOf(i++) + ") "+ expr.toString()+ "\n";
  return retval;
}
