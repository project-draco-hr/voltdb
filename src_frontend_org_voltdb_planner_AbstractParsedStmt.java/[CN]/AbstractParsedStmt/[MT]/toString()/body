{
  String retval="SQL:\n\t" + sql + "\n";
  retval+="PARAMETERS:\n\t";
  for (  VoltType param : paramList) {
    retval+=param.toString() + " ";
  }
  retval+="\nTABLE SOURCES:\n\t";
  for (  Table table : tableList) {
    retval+=table.getTypeName() + " ";
  }
  retval+="\nSCAN COLUMNS:\n";
  if (scanColumns != null) {
    for (    String table : scanColumns.keySet()) {
      retval+="\tTable: " + table + ":\n";
      for (      SchemaColumn col : scanColumns.get(table)) {
        retval+="\t\tColumn: " + col.getColumnName() + ": ";
        retval+=col.getExpression().toString() + "\n";
      }
    }
  }
 else {
    retval+="\tALL\n";
  }
  if (!tableJoinList.isEmpty()) {
    int i=0;
    int j=0;
    retval+="\nTABLES:\n";
    for (    Map.Entry<Table,JoinInfo> entry : tableJoinList.entrySet()) {
      JoinInfo joinInfo=entry.getValue();
      retval+="\tTABLE: " + entry.getKey().getTypeName() + ", JOIN: "+ joinInfo.toString()+ "\n";
      if (joinInfo.joinExpr != null) {
        retval+="\t\t JOIN CONDITIONS:\n";
        retval+="\t\t\t(" + String.valueOf(i++) + ") "+ joinInfo.joinExpr.toString()+ "\n";
      }
      if (joinInfo.whereExpr != null) {
        retval+="\t\t WHERE CONDITIONS:\n";
        retval+="\t\t\t(" + String.valueOf(j++) + ") "+ joinInfo.whereExpr.toString()+ "\n";
      }
    }
    retval+="WHERE SELECTION LIST:\n";
    for (    AbstractExpression expr : whereSelectionList)     retval+="\t(" + String.valueOf(i++) + ") "+ expr.toString()+ "\n";
    retval+="NO TABLE SELECTION LIST:\n";
    i=0;
    for (    AbstractExpression expr : noTableSelectionList)     retval+="\t(" + String.valueOf(i++) + ") "+ expr.toString()+ "\n";
    retval+="TABLE FILTER LIST:\n";
    for (    Entry<Table,ArrayList<AbstractExpression>> pair : tableFilterList.entrySet()) {
      i=0;
      retval+="\tTABLE: " + pair.getKey().getTypeName() + "\n";
      for (      AbstractExpression expr : pair.getValue())       retval+="\t\t(" + String.valueOf(i++) + ") "+ expr.toString()+ "\n";
    }
    retval+="JOIN CLAUSE LIST:\n";
    for (    Entry<TablePair,ArrayList<AbstractExpression>> pair : joinSelectionList.entrySet()) {
      i=0;
      retval+="\tTABLES: " + pair.getKey().t1.getTypeName() + " and "+ pair.getKey().t2.getTypeName()+ "\n";
      for (      AbstractExpression expr : pair.getValue())       retval+="\t\t(" + String.valueOf(i++) + ") "+ expr.toString()+ "\n";
    }
  }
  return retval;
}
