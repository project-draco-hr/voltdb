{
  int id=Integer.parseInt(exprNode.attributes.get("id"));
  if (!m_parsingInDisplayColumns) {
    if (m_windowedExpressions.size() > 0) {
      WindowedExpression we=m_windowedExpressions.get(0);
      if (we.getXMLID() == id) {
        return we.getDisplayListExpression();
      }
    }
    throw new PlanningErrorException("Windowed expressions can only appear in the select list.");
  }
  List<AbstractExpression> partitionbyExprs=new ArrayList<>();
  List<AbstractExpression> orderbyExprs=new ArrayList<>();
  List<SortDirectionType> orderbyDirs=new ArrayList<>();
  for (  VoltXMLElement ele : exprNode.children) {
    if (ele.name.equals("partitionbyList")) {
      for (int i=0; i < ele.children.size(); i++) {
        VoltXMLElement childNode=ele.children.get(i);
        AbstractExpression expr=parseExpressionNode(childNode);
        ExpressionUtil.finalizeValueTypes(expr);
        partitionbyExprs.add(expr);
      }
    }
 else     if (ele.name.equals("orderbyList")) {
      for (int i=0; i < ele.children.size(); i++) {
        VoltXMLElement childNode=ele.children.get(i);
        SortDirectionType sortDir=Boolean.valueOf(childNode.attributes.get("decending")) ? SortDirectionType.DESC : SortDirectionType.ASC;
        AbstractExpression expr=parseExpressionNode(childNode.children.get(0));
        ExpressionUtil.finalizeValueTypes(expr);
        orderbyExprs.add(expr);
        orderbyDirs.add(sortDir);
      }
    }
 else {
      throw new PlanningErrorException("invalid RANK expression found: " + ele.name);
    }
  }
  String columnName=WINDOWED_AGGREGATE_COLUMN_NAME;
  String alias=WINDOWED_AGGREGATE_COLUMN_NAME;
  if (exprNode.attributes.containsKey("alias")) {
    alias=exprNode.attributes.get("alias");
  }
  WindowedExpression rankExpr=new WindowedExpression(ExpressionType.AGGREGATE_WINDOWED_RANK,partitionbyExprs,orderbyExprs,orderbyDirs,id);
  ExpressionUtil.finalizeValueTypes(rankExpr);
  int offset=m_windowedExpressions.size();
  m_windowedExpressions.add(rankExpr);
  TupleValueExpression tve=new TupleValueExpression(TEMP_TABLE_NAME,TEMP_TABLE_NAME,alias,alias);
  tve.setColumnIndex(offset);
  tve.setValueType(rankExpr.getValueType());
  tve.setValueSize(rankExpr.getValueSize());
  rankExpr.setDisplayListExpression(tve);
  return tve;
}
