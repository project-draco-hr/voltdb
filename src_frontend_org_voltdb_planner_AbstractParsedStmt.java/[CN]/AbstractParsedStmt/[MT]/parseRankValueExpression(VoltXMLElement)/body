{
  List<AbstractExpression> partitionbyExprs=new ArrayList<AbstractExpression>();
  List<AbstractExpression> orderbyExprs=new ArrayList<AbstractExpression>();
  List<SortDirectionType> orderbyDirs=new ArrayList<SortDirectionType>();
  boolean areAllDecending=false;
  boolean isPercentRank=Boolean.valueOf(exprNode.attributes.get("isPercentRank"));
  for (  VoltXMLElement ele : exprNode.children) {
    if (ele.name.equals("partitionbyList")) {
      for (int i=0; i < ele.children.size(); i++) {
        VoltXMLElement childNode=ele.children.get(i);
        AbstractExpression expr=parseExpressionNode(childNode);
        partitionbyExprs.add(expr);
      }
    }
 else     if (ele.name.equals("orderbyList")) {
      for (int i=0; i < ele.children.size(); i++) {
        VoltXMLElement childNode=ele.children.get(i);
        SortDirectionType sortDir=Boolean.valueOf(childNode.attributes.get("decending")) ? SortDirectionType.DESC : SortDirectionType.ASC;
        AbstractExpression expr=parseExpressionNode(childNode.children.get(0));
        orderbyExprs.add(expr);
        orderbyDirs.add(sortDir);
      }
    }
 else {
      throw new PlanningErrorException("invalid RANK expression found: " + ele.name);
    }
  }
  WindowedExpression rankExpr=new WindowedExpression(ExpressionType.AGGREGATE_WINDOWED_RANK,partitionbyExprs,orderbyExprs,orderbyDirs,m_db,areAllDecending,isPercentRank);
  return rankExpr;
}
