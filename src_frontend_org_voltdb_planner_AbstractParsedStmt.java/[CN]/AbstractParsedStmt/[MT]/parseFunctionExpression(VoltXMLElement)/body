{
  String name=exprNode.attributes.get("name").toLowerCase();
  String disabled=exprNode.attributes.get("disabled");
  if (disabled != null) {
    throw new PlanningErrorException("Function '" + name + "' is not supported in VoltDB: "+ disabled);
  }
  String value_type_name=exprNode.attributes.get("valuetype");
  VoltType value_type=VoltType.typeFromString(value_type_name);
  String function_id=exprNode.attributes.get("function_id");
  assert(function_id != null);
  int idArg=0;
  try {
    idArg=Integer.parseInt(function_id);
  }
 catch (  NumberFormatException nfe) {
  }
  assert(idArg > 0);
  String result_type_parameter_index=exprNode.attributes.get("result_type_parameter_index");
  String implied_argument=exprNode.attributes.get("implied_argument");
  ArrayList<AbstractExpression> args=new ArrayList<AbstractExpression>();
  for (  VoltXMLElement argNode : exprNode.children) {
    assert(argNode != null);
    AbstractExpression argExpr=parseExpressionTreeHelper(argNode);
    assert(argExpr != null);
    args.add(argExpr);
  }
  FunctionExpression expr=new FunctionExpression();
  expr.setAttributes(name,implied_argument,idArg);
  expr.setArgs(args);
  if (value_type != null) {
    expr.setValueType(value_type);
    expr.setValueSize(value_type.getMaxLengthInBytes());
  }
  if (result_type_parameter_index != null) {
    int parameter_idx=-1;
    try {
      parameter_idx=Integer.parseInt(result_type_parameter_index);
    }
 catch (    NumberFormatException nfe) {
    }
    assert(parameter_idx >= 0);
    assert(parameter_idx < args.size());
    expr.setResultTypeParameterIndex(parameter_idx);
    expr.negotiateInitialValueTypes();
  }
  return expr;
}
