{
  assert(joinNode != null);
  assert(joinNode.m_leftNode != null && joinNode.m_rightNode != null);
  if (joinNode.m_leftNode.m_table == null) {
    analyzeOuterJoinExpressions(joinNode.m_leftNode);
  }
  if (joinNode.m_rightNode.m_table == null) {
    analyzeOuterJoinExpressions(joinNode.m_rightNode);
  }
  assert(joinNode.m_rightNode.m_joinType == JoinType.LEFT || joinNode.m_rightNode.m_joinType == JoinType.INNER);
  assert(joinNode.m_leftNode.m_joinType == JoinType.INNER);
  ArrayList<AbstractExpression> joinList=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> whereList=new ArrayList<AbstractExpression>();
  joinList.addAll(ExpressionUtil.uncombineAny(joinNode.m_rightNode.m_joinExpr));
  joinList.addAll(ExpressionUtil.uncombineAny(joinNode.m_leftNode.m_joinExpr));
  whereList.addAll(ExpressionUtil.uncombineAny(joinNode.m_leftNode.m_whereExpr));
  whereList.addAll(ExpressionUtil.uncombineAny(joinNode.m_rightNode.m_whereExpr));
  Collection<Table> innerTables=joinNode.m_rightNode.generateTableJoinOrder();
  Collection<Table> outerTables=joinNode.m_leftNode.generateTableJoinOrder();
  classifyOuterJoinExpressions(joinList,outerTables,innerTables,joinNode.m_joinOuterList,joinNode.m_joinInnerList,joinNode.m_joinInnerOuterList);
  applyTransitiveEquivalence(joinNode,joinNode.m_joinInnerList,joinNode.m_joinOuterList,joinNode.m_joinInnerOuterList);
  classifyOuterJoinExpressions(whereList,outerTables,innerTables,joinNode.m_whereOuterList,joinNode.m_whereInnerList,joinNode.m_whereInnerOuterList);
  applyTransitiveEquivalence(joinNode,joinNode.m_whereInnerList,joinNode.m_whereOuterList,joinNode.m_whereInnerOuterList);
}
