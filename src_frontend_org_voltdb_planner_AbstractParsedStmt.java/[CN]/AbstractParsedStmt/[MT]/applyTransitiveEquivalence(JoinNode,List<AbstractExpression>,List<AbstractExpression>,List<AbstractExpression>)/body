{
  ArrayList<AbstractExpression> singleTableExprs=new ArrayList<AbstractExpression>();
  singleTableExprs.addAll(innerTableExprs);
  singleTableExprs.addAll(outerTableExprs);
  HashMap<AbstractExpression,Set<AbstractExpression>> eqMap1=analyzeValueEquivalence(singleTableExprs);
  ArrayList<AbstractExpression> simplifiedInnerExprs=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> simplifiedOuterExprs=new ArrayList<AbstractExpression>();
  for (  AbstractExpression expr : innerOuterTableExprs) {
    if (!isSimpleEquivalenceExpression(expr)) {
      continue;
    }
    AbstractExpression leftExpr=expr.getLeft();
    AbstractExpression rightExpr=expr.getRight();
    assert(leftExpr instanceof TupleValueExpression && rightExpr instanceof TupleValueExpression);
    Set<AbstractExpression> eqSet1=eqMap1.get(leftExpr);
    AbstractExpression singleExpr=leftExpr;
    if (eqSet1 == null) {
      eqSet1=eqMap1.get(rightExpr);
      if (eqSet1 == null) {
        continue;
      }
      singleExpr=rightExpr;
    }
    for (    AbstractExpression eqExpr : eqSet1) {
      if (eqExpr instanceof ConstantValueExpression) {
        TupleValueExpression tve=null;
        if (singleExpr == leftExpr) {
          expr.setLeft(eqExpr);
          tve=(TupleValueExpression)rightExpr;
        }
 else {
          expr.setRight(eqExpr);
          tve=(TupleValueExpression)leftExpr;
        }
        if (joinNode.isInnerTable(tve.getTableName())) {
          simplifiedInnerExprs.add(expr);
        }
 else {
          simplifiedOuterExprs.add(expr);
        }
        break;
      }
    }
  }
  innerTableExprs.addAll(simplifiedInnerExprs);
  outerTableExprs.addAll(simplifiedOuterExprs);
  innerOuterTableExprs.removeAll(simplifiedInnerExprs);
  innerOuterTableExprs.removeAll(simplifiedOuterExprs);
}
