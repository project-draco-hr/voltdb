{
  String name=exprNode.attributes.get("name").toLowerCase();
  String value_type_name=exprNode.attributes.get("type");
  VoltType value_type=VoltType.typeFromString(value_type_name);
  String id=exprNode.attributes.get("id");
  assert(id != null);
  int idArg=Integer.parseInt(id);
  String parameter=exprNode.attributes.get("parameter");
  int parameter_idx=-1;
  if (parameter != null) {
    try {
      parameter_idx=Integer.parseInt(parameter);
    }
 catch (    NumberFormatException nfe) {
    }
  }
  String volt_alias=exprNode.attributes.get("volt_alias");
  if (volt_alias == null) {
    volt_alias=name;
  }
  ArrayList<AbstractExpression> args=new ArrayList<AbstractExpression>();
  for (  VoltXMLElement argNode : exprNode.children) {
    assert(argNode != null);
    AbstractExpression argExpr=parseExpressionTree(argNode,db);
    assert(argExpr != null);
    args.add(argExpr);
  }
  if (parameter_idx != -1) {
    AbstractExpression param_arg=args.get(parameter_idx);
    VoltType param_type=param_arg.getValueType();
    if (value_type != param_type) {
      if (value_type == null) {
        value_type=param_type;
      }
 else       if (value_type == VoltType.NUMERIC) {
        if (param_type != null) {
          value_type=param_type;
        }
      }
 else       if ((param_type == null) || (param_type == VoltType.NUMERIC)) {
        param_arg.refineValueType(value_type);
      }
    }
  }
  FunctionExpression expr=new FunctionExpression();
  expr.setAttributes(name,volt_alias,idArg,parameter_idx);
  if (value_type != null) {
    expr.setValueType(value_type);
    expr.setValueSize(value_type.getMaxLengthInBytes());
  }
  expr.setArgs(args);
  return expr;
}
