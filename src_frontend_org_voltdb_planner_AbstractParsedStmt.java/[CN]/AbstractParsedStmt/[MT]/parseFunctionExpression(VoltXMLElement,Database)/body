{
  String name=exprNode.attributes.get("name").toLowerCase();
  String value_type_name=exprNode.attributes.get("type");
  VoltType value_type=VoltType.typeFromString(value_type_name);
  AbstractExpression expr=null;
  ArrayList<AbstractExpression> args=new ArrayList<AbstractExpression>();
  for (  VoltXMLElement argNode : exprNode.children) {
    assert(argNode != null);
    AbstractExpression argExpr=parseExpressionTree(argNode,db);
    assert(argExpr != null);
    args.add(argExpr);
  }
  List<SQLFunction> overloads=SQLFunction.functionsByNameAndArgumentCount(name,args.size());
  if (overloads == null) {
    throw new PlanningErrorException("Function '" + name + "' with "+ args.size()+ " arguments is not supported");
  }
  SQLFunction resolved=null;
  for (  SQLFunction supportedFunction : overloads) {
    resolved=supportedFunction;
    if (!supportedFunction.hasParameter()) {
      break;
    }
    VoltType paramType=supportedFunction.paramType();
    if (paramType.equals(value_type)) {
      break;
    }
    if (paramType.equals(VoltType.NUMERIC) && (value_type.isExactNumeric() || value_type.equals(VoltType.FLOAT))) {
      break;
    }
    resolved=null;
  }
  if (resolved == null) {
    throw new PlanningErrorException("Function '" + name + "' does not support argument type '"+ value_type_name+ "'");
  }
  ExpressionType exprType=resolved.getExpressionType();
  try {
    expr=exprType.getExpressionClass().newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
  expr.setExpressionType(exprType);
  VoltType vt=resolved.getValueType();
  if (vt != null) {
    expr.setValueType(vt);
    expr.setValueSize(vt.getMaxLengthInBytes());
  }
  expr.setArgs(args);
  return expr;
}
