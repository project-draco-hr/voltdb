{
  String optype=exprNode.attributes.get("optype");
  ExpressionType exprType=ExpressionType.get(optype);
  AbstractExpression expr=null;
  if (exprType == ExpressionType.INVALID) {
    throw new PlanningErrorException("Unsupported operation type '" + optype + "'");
  }
  try {
    expr=exprType.getExpressionClass().newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
  expr.setExpressionType(exprType);
  if (exprType == ExpressionType.OPERATOR_CASE_WHEN || exprType == ExpressionType.OPERATOR_ALTERNATIVE) {
    String valueType=exprNode.attributes.get("valuetype");
    expr.setValueType(VoltType.typeFromString(valueType));
  }
  if (expr instanceof ComparisonExpression) {
    String opsubtype=exprNode.attributes.get("opsubtype");
    if (opsubtype != null) {
      QuantifierType quantifier=QuantifierType.get(opsubtype);
      if (quantifier != QuantifierType.NONE) {
        ((ComparisonExpression)expr).setQuantifier(quantifier);
      }
    }
  }
  VoltXMLElement leftExprNode=exprNode.children.get(0);
  assert(leftExprNode != null);
  AbstractExpression leftExpr=parseExpressionNode(leftExprNode);
  assert((leftExpr != null) || (exprType == ExpressionType.AGGREGATE_COUNT));
  expr.setLeft(leftExpr);
  VoltXMLElement rightExprNode=null;
  if (exprNode.children.size() > 1) {
    rightExprNode=exprNode.children.get(1);
  }
  if (expr.needsRightExpression()) {
    assert(rightExprNode != null);
    AbstractExpression rightExpr=parseExpressionNode(rightExprNode);
    assert(rightExpr != null);
    expr.setRight(rightExpr);
  }
 else {
    assert(rightExprNode == null);
    if (exprType == ExpressionType.OPERATOR_CAST) {
      String valuetype=exprNode.attributes.get("valuetype");
      assert(valuetype != null);
      VoltType voltType=VoltType.typeFromString(valuetype);
      expr.setValueType(voltType);
      int size=voltType.getMaxLengthInBytes();
      expr.setValueSize(size);
    }
  }
  if (exprType == ExpressionType.COMPARE_EQUAL && QuantifierType.ANY == ((ComparisonExpression)expr).getQuantifier()) {
    expr=ParsedUnionStmt.breakUpSetOpSubquery(expr);
  }
 else   if (exprType == ExpressionType.OPERATOR_EXISTS) {
    expr=optimizeExistsExpression(expr);
  }
  return expr;
}
