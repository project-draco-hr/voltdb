{
  if (joinNode == null) {
    return;
  }
  if (joinNode.m_table != null) {
    assert(joinNode.m_leftNode == null && joinNode.m_rightNode == null);
    joinNode.m_joinInnerList.addAll(ExpressionUtil.uncombineAny(joinNode.m_joinExpr));
    joinNode.m_whereInnerList.addAll(ExpressionUtil.uncombineAny(joinNode.m_whereExpr));
    return;
  }
  assert(joinNode.m_leftNode != null && joinNode.m_rightNode != null);
  analyzeJoinExpressions(joinNode.m_leftNode);
  analyzeJoinExpressions(joinNode.m_rightNode);
  assert(joinNode.m_joinType == JoinType.LEFT || joinNode.m_joinType == JoinType.INNER);
  ArrayList<AbstractExpression> joinList=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> whereList=new ArrayList<AbstractExpression>();
  joinList.addAll(ExpressionUtil.uncombineAny(joinNode.m_joinExpr));
  whereList.addAll(ExpressionUtil.uncombineAny(joinNode.m_whereExpr));
  if (joinNode.m_leftNode.m_table != null) {
    joinList.addAll(joinNode.m_leftNode.m_joinInnerList);
    joinNode.m_leftNode.m_joinInnerList.clear();
    whereList.addAll(joinNode.m_leftNode.m_whereInnerList);
    joinNode.m_leftNode.m_whereInnerList.clear();
  }
  if (joinNode.m_rightNode.m_table != null) {
    joinList.addAll(joinNode.m_rightNode.m_joinInnerList);
    joinNode.m_rightNode.m_joinInnerList.clear();
    whereList.addAll(joinNode.m_rightNode.m_whereInnerList);
    joinNode.m_rightNode.m_whereInnerList.clear();
  }
  Collection<Table> outerTables=joinNode.m_leftNode.generateTableJoinOrder();
  Collection<Table> innerTables=joinNode.m_rightNode.generateTableJoinOrder();
  classifyJoinExpressions(joinList,outerTables,innerTables,joinNode.m_joinOuterList,joinNode.m_joinInnerList,joinNode.m_joinInnerOuterList);
  applyTransitiveEquivalence(joinNode.m_joinOuterList,joinNode.m_joinInnerList,joinNode.m_joinInnerOuterList);
  classifyJoinExpressions(whereList,outerTables,innerTables,joinNode.m_whereOuterList,joinNode.m_whereInnerList,joinNode.m_whereInnerOuterList);
  applyTransitiveEquivalence(joinNode.m_whereOuterList,joinNode.m_whereInnerList,joinNode.m_whereInnerOuterList);
  pushDownExpressions(joinNode);
}
