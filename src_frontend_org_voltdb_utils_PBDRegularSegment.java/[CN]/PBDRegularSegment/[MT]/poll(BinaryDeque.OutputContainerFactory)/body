{
  if (m_closed)   throw new IOException("closed");
  if (!hasMoreEntries()) {
    return null;
  }
  final long writePos=m_fc.position();
  m_fc.position(m_readOffset);
  m_objectReadIndex++;
  try {
    m_tmpHeaderBuf.b().clear();
    while (m_tmpHeaderBuf.b().hasRemaining()) {
      int read=m_fc.read(m_tmpHeaderBuf.b());
      if (read == -1) {
        throw new EOFException();
      }
    }
    m_tmpHeaderBuf.b().flip();
    final int length=m_tmpHeaderBuf.b().getInt();
    final int flags=m_tmpHeaderBuf.b().getInt();
    final boolean compressed=(flags & FLAG_COMPRESSED) != 0;
    final int uncompressedLen;
    if (length < 1) {
      throw new IOException("Read an invalid length");
    }
    final DBBPool.BBContainer retcont;
    if (compressed) {
      final DBBPool.BBContainer compressedBuf=DBBPool.allocateDirectAndPool(length);
      try {
        while (compressedBuf.b().hasRemaining()) {
          int read=m_fc.read(compressedBuf.b());
          if (read == -1) {
            throw new EOFException();
          }
        }
        compressedBuf.b().flip();
        uncompressedLen=CompressionService.uncompressedLength(compressedBuf.bDR());
        retcont=factory.getContainer(uncompressedLen);
        retcont.b().limit(uncompressedLen);
        CompressionService.decompressBuffer(compressedBuf.bDR(),retcont.b());
      }
  finally {
        compressedBuf.discard();
      }
    }
 else {
      uncompressedLen=length;
      retcont=factory.getContainer(length);
      retcont.b().limit(length);
      while (retcont.b().hasRemaining()) {
        int read=m_fc.read(retcont.b());
        if (read == -1) {
          throw new EOFException();
        }
      }
      retcont.b().flip();
    }
    m_bytesRead+=uncompressedLen;
    return new DBBPool.BBContainer(retcont.b()){
      private boolean m_discarded=false;
      @Override public void discard(){
        checkDoubleFree();
        if (m_discarded) {
          LOG.error("PBD Container discarded more than once");
          return;
        }
        m_discarded=true;
        retcont.discard();
        m_discardCount++;
      }
    }
;
  }
  finally {
    m_readOffset=m_fc.position();
    m_fc.position(writePos);
  }
}
