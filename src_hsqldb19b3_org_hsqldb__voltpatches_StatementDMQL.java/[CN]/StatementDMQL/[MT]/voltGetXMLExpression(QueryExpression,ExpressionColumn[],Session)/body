{
  int exprType=queryExpr.getUnionType();
  if (exprType == QueryExpression.NOUNION) {
    if (!(queryExpr instanceof QuerySpecification)) {
      throw new org.hsqldb_voltpatches.HSQLInterface.HSQLParseException(queryExpr.operatorName() + " is not supported.");
    }
    QuerySpecification select=(QuerySpecification)queryExpr;
    return voltGetXMLSpecification(select,parameters,session);
  }
 else   if (exprType == QueryExpression.UNION || exprType == QueryExpression.UNION_ALL || exprType == QueryExpression.EXCEPT || exprType == QueryExpression.EXCEPT_ALL || exprType == QueryExpression.INTERSECT || exprType == QueryExpression.INTERSECT_ALL) {
    VoltXMLElement unionExpr=new VoltXMLElement("union");
    unionExpr.attributes.put("uniontype",queryExpr.operatorName());
    VoltXMLElement leftExpr=voltGetXMLExpression(queryExpr.getLeftQueryExpression(),parameters,session);
    VoltXMLElement rightExpr=voltGetXMLExpression(queryExpr.getRightQueryExpression(),parameters,session);
    voltAppendParameters(session,unionExpr,parameters);
    List<VoltXMLElement> limitOffsetXml=voltGetLimitOffsetXMLFromSortAndSlice(session,queryExpr.sortAndSlice);
    for (    VoltXMLElement elem : limitOffsetXml) {
      unionExpr.children.add(elem);
    }
    if (queryExpr.sortAndSlice.getOrderLength() > 0) {
      List<Expression> displayCols=getDisplayColumnsForSetOp(queryExpr);
      java.util.Set<Integer> ignoredColsIndexes=new java.util.HashSet<Integer>();
      VoltXMLElement orderCols=new VoltXMLElement("ordercolumns");
      unionExpr.children.add(orderCols);
      for (int i=0; i < queryExpr.sortAndSlice.exprList.size(); ++i) {
        Expression e=(Expression)queryExpr.sortAndSlice.exprList.get(i);
        assert(e.getLeftNode() != null);
        int index=e.getLeftNode().queryTableColumnIndex;
        assert(index < displayCols.size());
        Expression column=displayCols.get(index);
        e.setLeftNode(column);
        VoltXMLElement xml=e.voltGetXML(session,displayCols,ignoredColsIndexes,i);
        orderCols.children.add(xml);
      }
    }
    boolean canMergeLeft=!hasLimitOrOrder(leftExpr);
    if (canMergeLeft && "union".equalsIgnoreCase(leftExpr.name) && queryExpr.operatorName().equalsIgnoreCase(leftExpr.attributes.get("uniontype"))) {
      unionExpr.children.addAll(leftExpr.children);
    }
 else {
      unionExpr.children.add(leftExpr);
    }
    boolean canMergeRight=!hasLimitOrOrder(rightExpr);
    if (canMergeRight && exprType != QueryExpression.EXCEPT && exprType != QueryExpression.EXCEPT_ALL && "union".equalsIgnoreCase(rightExpr.name) && queryExpr.operatorName().equalsIgnoreCase(rightExpr.attributes.get("uniontype"))) {
      unionExpr.children.addAll(rightExpr.children);
    }
 else {
      unionExpr.children.add(rightExpr);
    }
    return unionExpr;
  }
 else {
    throw new org.hsqldb_voltpatches.HSQLInterface.HSQLParseException(queryExpr.operatorName() + " tuple set operator is not supported.");
  }
}
