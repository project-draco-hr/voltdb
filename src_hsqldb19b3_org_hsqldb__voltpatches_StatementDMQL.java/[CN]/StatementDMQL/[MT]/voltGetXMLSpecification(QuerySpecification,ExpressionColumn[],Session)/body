{
  VoltXMLElement query=new VoltXMLElement("select");
  if (select.isDistinctSelect) {
    query.attributes.put("distinct","true");
  }
  List<VoltXMLElement> limitOffsetXml=voltGetLimitOffsetXMLFromSortAndSlice(session,select.sortAndSlice);
  for (  VoltXMLElement elem : limitOffsetXml) {
    query.children.add(elem);
  }
  VoltXMLElement cols=new VoltXMLElement("columns");
  query.children.add(cols);
  java.util.ArrayList<Expression> orderByCols=new java.util.ArrayList<Expression>();
  java.util.ArrayList<Expression> groupByCols=new java.util.ArrayList<Expression>();
  select.displayCols.clear();
  java.util.ArrayList<Pair<Integer,HsqlNameManager.SimpleName>> aliases=new java.util.ArrayList<Pair<Integer,HsqlNameManager.SimpleName>>();
  for (int i=0; i < select.exprColumns.length; i++) {
    final Expression expr=select.exprColumns[i];
    if (expr.alias != null) {
      if (expr instanceof ExpressionColumn) {
        ExpressionColumn exprColumn=(ExpressionColumn)expr;
        if (exprColumn.alias != null && exprColumn.columnName == null) {
          aliases.add(Pair.of(expr.columnIndex,expr.alias));
        }
      }
 else       if (expr.columnIndex > -1) {
        aliases.add(Pair.of(expr.columnIndex,expr.alias));
      }
    }
    if (expr.columnIndex == -1) {
      expr.columnIndex=i;
    }
    if (isGroupByColumn(select,i)) {
      groupByCols.add(expr);
    }
 else     if (expr.opType == OpTypes.ORDER_BY) {
      if (select.sortAndSlice.hasOrder())       orderByCols.add(expr);
    }
 else     if (expr.equals(select.getHavingCondition())) {
      if (!(expr instanceof ExpressionLogical && expr.isAggregate)) {
        throw new HSQLParseException("VoltDB does not support HAVING clause without aggregation. " + "Consider using WHERE clause if possible");
      }
    }
 else     if (expr.opType != OpTypes.SIMPLE_COLUMN || (expr.isAggregate && expr.alias != null)) {
      select.displayCols.add(expr);
    }
  }
  for (  Pair<Integer,HsqlNameManager.SimpleName> alias : aliases) {
    select.exprColumns[alias.getFirst()].alias=alias.getSecond();
  }
  SimpleColumnContext context=new SimpleColumnContext(session,select.displayCols);
  Expression havingCondition=select.getHavingCondition();
  if (havingCondition != null) {
    VoltXMLElement having=new VoltXMLElement("having");
    query.children.add(having);
    VoltXMLElement havingExpr=havingCondition.voltGetXML(context.withStartKey(0),null);
    having.children.add(havingExpr);
  }
  for (int jj=0; jj < select.displayCols.size(); ++jj) {
    Expression expr=select.displayCols.get(jj);
    if (context.disabledTheColumnForDisplay(jj)) {
      continue;
    }
    VoltXMLElement xml=expr.voltGetXML(context.withStartKey(jj),null);
    cols.children.add(xml);
    assert(xml != null);
  }
  voltAppendParameters(session,query,parameters);
  VoltXMLElement scans=new VoltXMLElement("tablescans");
  query.children.add(scans);
  assert(scans != null);
  for (  RangeVariable rangeVariable : select.rangeVariables) {
    scans.children.add(rangeVariable.voltGetRangeVariableXML(session));
  }
  if (select.isGrouped) {
    VoltXMLElement groupCols=new VoltXMLElement("groupcolumns");
    query.children.add(groupCols);
    for (int jj=0; jj < groupByCols.size(); ++jj) {
      Expression expr=groupByCols.get(jj);
      VoltXMLElement xml=expr.voltGetXML(context.withStartKey(jj),null);
      groupCols.children.add(xml);
    }
  }
  if (orderByCols.size() > 0) {
    VoltXMLElement orderCols=new VoltXMLElement("ordercolumns");
    query.children.add(orderCols);
    for (int jj=0; jj < orderByCols.size(); ++jj) {
      Expression expr=orderByCols.get(jj);
      VoltXMLElement xml=expr.voltGetXML(context.withStartKey(jj),null);
      orderCols.children.add(xml);
    }
  }
  if (scans.children.size() > 1) {
    List<VoltXMLElement> exprCols=query.extractSubElements("operation","optype","operator_case_when");
    resolveUsingExpressions(exprCols,select.rangeVariables);
  }
  return query;
}
