{
  if (sb == null) {
    sb=new StringBuilder();
  }
  if ((t1 == null) && (t2 == null)) {
    return true;
  }
  if (t1 == null) {
    sb.append("t1 == NULL\n");
    return false;
  }
  if (t2 == null) {
    sb.append("t2 == NULL\n");
    return false;
  }
  if (t1.getRowCount() != t2.getRowCount()) {
    sb.append(String.format("Row count %d != %d\n",t1.getRowCount(),t2.getRowCount()));
    return false;
  }
  if (t1.getColumnCount() != t2.getColumnCount()) {
    sb.append(String.format("Col count %d != %d\n",t1.getColumnCount(),t2.getColumnCount()));
    return false;
  }
  for (int col=0; col < t1.getColumnCount(); col++) {
    if (t1.getColumnType(col) != t2.getColumnType(col)) {
      sb.append(String.format("Column %d: type %s != %s\n",col,t1.getColumnType(col).toString(),t2.getColumnType(col).toString()));
      return false;
    }
    if (t1.getColumnName(col).equals(t2.getColumnName(col)) == false) {
      sb.append(String.format("Column %d: name %s != %s\n",col,t1.getColumnName(col),t2.getColumnName(col)));
      return false;
    }
  }
  t1.resetRowPosition();
  t2.resetRowPosition();
  for (int row=0; row < t1.getRowCount(); row++) {
    t1.advanceRow();
    t2.advanceRow();
    for (int col=0; col < t1.getColumnCount(); col++) {
      Object obj1=t1.get(col,t1.getColumnType(col));
      if (t1.wasNull()) {
        obj1=null;
      }
      Object obj2=t2.get(col,t2.getColumnType(col));
      if (t2.wasNull()) {
        obj2=null;
      }
      if ((obj1 == null) && (obj2 == null)) {
        continue;
      }
      if ((obj1 == null) || (obj2 == null)) {
        sb.append(String.format("Row,Col-%d,%d of type %s: %s != %s\n",row,col,t1.getColumnType(col).toString(),String.valueOf(obj1),String.valueOf(obj2)));
        return false;
      }
      if (t1.getColumnType(col) == VoltType.VARBINARY) {
        byte[] array1=(byte[])obj1;
        byte[] array2=(byte[])obj2;
        if (Arrays.equals(array1,array2) == false) {
          sb.append(String.format("Row,Col-%d,%d of type %s: %s != %s\n",row,col,t1.getColumnType(col).toString(),Encoder.hexEncode(array1),Encoder.hexEncode(array2)));
          return false;
        }
      }
 else {
        if (obj1.equals(obj2) == false) {
          sb.append(String.format("Row,Col-%d,%d of type %s: %s != %s\n",row,col,t1.getColumnType(col).toString(),obj1.toString(),obj2.toString()));
          return false;
        }
      }
    }
  }
  return true;
}
