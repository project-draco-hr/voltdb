{
  VoltType[] allTypes={VoltType.BIGINT,VoltType.DECIMAL,VoltType.FLOAT,VoltType.INTEGER,VoltType.SMALLINT,VoltType.STRING,VoltType.TIMESTAMP,VoltType.TINYINT,VoltType.VARBINARY};
  VoltTable.ColumnInfo column=new VoltTable.ColumnInfo(name,allTypes[r.nextInt(allTypes.length)]);
  column.size=0;
  if ((column.type == VoltType.VARBINARY) || (column.type == VoltType.STRING)) {
    if (r.nextBoolean()) {
      column.size=r.nextInt(63) + 1;
    }
 else {
      column.size=Math.min(64 + (int)(Math.abs(r.nextGaussian()) * (1024 - 64)),1024 * 1024);
    }
  }
  Object defaultValue=null;
  if (r.nextBoolean()) {
    column.nullable=true;
    defaultValue=VoltTypeUtil.getRandomValue(column.type,column.size % 127 + 1,0.8,r);
  }
 else {
    column.nullable=false;
    defaultValue=VoltTypeUtil.getRandomValue(column.type,column.size % 127 + 1,0.0,r);
  }
  if (defaultValue != null) {
    column.defaultValue=String.valueOf(defaultValue);
  }
 else {
    column.defaultValue=null;
  }
  if ((column.type == VoltType.VARBINARY) || (column.type == VoltType.DECIMAL)) {
    column.defaultValue=null;
    column.nullable=true;
  }
  assert(column.name != null);
  assert(column.size >= 0);
  if ((column.type == VoltType.STRING) || (column.type == VoltType.VARBINARY)) {
    assert(column.size >= 0);
  }
  return column;
}
