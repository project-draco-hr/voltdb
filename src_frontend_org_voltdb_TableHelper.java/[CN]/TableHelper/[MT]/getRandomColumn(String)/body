{
  VoltType[] allTypes={VoltType.BIGINT,VoltType.DECIMAL,VoltType.FLOAT,VoltType.INTEGER,VoltType.SMALLINT,VoltType.STRING,VoltType.TIMESTAMP,VoltType.TINYINT,VoltType.VARBINARY};
  VoltType type=allTypes[m_rand.nextInt(allTypes.length)];
  int size=0;
  if ((type == VoltType.VARBINARY) || (type == VoltType.STRING)) {
    if (m_rand.nextBoolean()) {
      size=m_rand.nextInt(63) + 1;
    }
 else {
      size=Math.min(64 + (int)(Math.abs(m_rand.nextGaussian()) * (1024 - 64)),1024 * 1024);
    }
  }
  Object defaultValue=null;
  boolean nullable=false;
  if (m_rand.nextBoolean()) {
    nullable=true;
    defaultValue=VoltTypeUtil.getRandomValue(type,Math.max(size % 128,1),0.8,m_rand);
  }
 else {
    nullable=false;
    defaultValue=VoltTypeUtil.getRandomValue(type,Math.max(size % 128,1),0.0,m_rand);
  }
  if (defaultValue != null) {
    defaultValue=String.valueOf(defaultValue);
  }
 else {
    defaultValue=null;
  }
  if ((type == VoltType.VARBINARY) || (type == VoltType.DECIMAL)) {
    defaultValue=null;
    nullable=true;
  }
  assert(name != null);
  assert(size >= 0);
  if ((type == VoltType.STRING) || (type == VoltType.VARBINARY)) {
    assert(size >= 0);
  }
  return new VoltTable.ColumnInfo(name,type,size,nullable,false,(String)defaultValue);
}
