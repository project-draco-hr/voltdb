{
  System.out.printf("Filling table %s with rows starting with pkey id %d (every %d rows) until RSS=%dmb\n",t.m_name,offset,jump,mb);
  int pkeyColIndex=getBigintPrimaryKeyIndexIfExists(t);
  if (pkeyColIndex == -1) {
    pkeyColIndex=0;
    assert(t.getColumnType(0).isInteger());
  }
  final AtomicLong rss=new AtomicLong(0);
  ProcedureCallback insertCallback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        System.out.println("Error in loader callback:");
        System.out.println(((ClientResponseImpl)clientResponse).toJSONString());
        assert(false);
      }
    }
  }
;
  Thread rssThread=new Thread(){
    @Override public void run(){
      long tempRss=rss.get();
      long rssPrev=tempRss;
      while (true) {
        tempRss=MiscUtils.getMBRss(client);
        if (tempRss != rssPrev) {
          rssPrev=tempRss;
          rss.set(tempRss);
          System.out.printf("RSS=%dmb\n",tempRss);
          if (tempRss > mb) {
            return;
          }
        }
        try {
          Thread.sleep(2000);
        }
 catch (        Exception e) {
        }
      }
    }
  }
;
  long i=offset;
  long rows=0;
  rssThread.start();
  while (rss.get() < mb) {
    Object[] row=randomRow(t,Integer.MAX_VALUE,rand);
    row[pkeyColIndex]=i;
    i+=jump;
    client.callProcedure(insertCallback,t.m_name.toUpperCase() + ".insert",row);
    rows++;
    if ((rows % 100000) == 0) {
      System.out.printf("Loading 100000 rows. %d inserts sent (%d max id).\n",rows,i - 1);
    }
  }
  client.drain();
  rssThread.join();
  System.out.printf("Filled table %s with %d rows and now RSS=%dmb\n",t.m_name,rows,rss.get());
}
