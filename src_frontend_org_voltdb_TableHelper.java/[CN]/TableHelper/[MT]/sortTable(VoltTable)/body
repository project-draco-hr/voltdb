{
  Object[][] rows=new Object[table.getRowCount()][];
  table.resetRowPosition();
  int row=0;
  while (table.advanceRow()) {
    rows[row]=new Object[table.getColumnCount()];
    for (int column=0; column < table.getColumnCount(); column++) {
      rows[row][column]=table.get(column,table.getColumnType(column));
      if (table.wasNull()) {
        rows[row][column]=null;
      }
    }
    row++;
  }
  Arrays.sort(rows,new Comparator<Object[]>(){
    @Override public int compare(    Object[] o1,    Object[] o2){
      for (int i=0; i < o1.length; i++) {
        assert(o1.length == o2.length);
        if (o1[i] == o2[i]) {
          continue;
        }
        if (o1[i] == null) {
          return -1;
        }
        if (o2[i] == null) {
          return 1;
        }
        int cmp;
        if (o1[i] instanceof byte[]) {
          assert(o2[i] instanceof byte[]);
          String hex1=Encoder.hexEncode((byte[])o1[i]);
          String hex2=Encoder.hexEncode((byte[])o2[i]);
          cmp=hex1.compareTo(hex2);
        }
 else {
          cmp=o1[i].toString().compareTo(o2[i].toString());
        }
        if (cmp != 0) {
          return cmp;
        }
      }
      return 0;
    }
  }
);
  VoltTable.ColumnInfo columns[]=new VoltTable.ColumnInfo[table.getColumnCount()];
  for (int column=0; column < table.getColumnCount(); column++) {
    columns[column]=new VoltTable.ColumnInfo(table.getColumnName(column),table.getColumnType(column));
  }
  VoltTable retval=new VoltTable(columns);
  for (  Object[] rowArray : rows) {
    retval.addRow(rowArray);
  }
  return retval;
}
