{
  assert(jarPath != null);
  try {
    addLiteralSchema(transformer.toString());
    transformer=new StringBuffer();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  final String projectPath=null;
  int index=0;
  String[] schemaPath=new String[m_schemas.size()];
  Iterator<String> ite=m_schemas.iterator();
  while (ite.hasNext()) {
    schemaPath[index]=ite.next();
    index++;
  }
  compiler.setProcInfoOverrides(m_procInfoOverrides);
  if (m_diagnostics != null) {
    compiler.enableDetailedCapture();
  }
  boolean success=compiler.compileWithProjectXML(projectPath,jarPath,schemaPath);
  m_diagnostics=compiler.harvestCapturedDetail();
  if (m_compilerDebugPrintStream != null) {
    if (success) {
      compiler.summarizeSuccess(m_compilerDebugPrintStream,m_compilerDebugPrintStream,jarPath);
    }
 else {
      compiler.summarizeErrors(m_compilerDebugPrintStream,m_compilerDebugPrintStream);
    }
  }
  return success;
}
