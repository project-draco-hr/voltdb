{
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Setup & Initialization");
  System.out.println(HORIZONTAL_RULE);
  System.out.println();
  if (config.preload) {
    System.out.println("Preloading data store...");
    for (int i=config.preloadLowKey; i < config.poolsize; i++) {
      client.callProcedure(new NullCallback(),"Put",String.format(processor.KeyFormat,i),processor.generateForStore().getStoreValue());
      lastSuccessfulResponse=System.currentTimeMillis();
    }
    client.drain();
    System.out.println("Preloading complete.\n");
  }
  if (!config.runbenchmark) {
    System.out.println("Benchmark run disabled by --runbenchmark option, exiting now");
    System.exit(0);
  }
  System.out.print(HORIZONTAL_RULE);
  System.out.println("Starting Benchmark");
  System.out.println(HORIZONTAL_RULE);
  if (config.warmup > 0) {
    System.out.println("Warming up...");
    final long warmupEndTime=System.currentTimeMillis() + (1000l * config.warmup);
    while (warmupEndTime > System.currentTimeMillis()) {
      if (rand.nextDouble() < config.getputratio) {
        client.callProcedure(new NullCallback(),"Get",processor.generateRandomKeyForRetrieval());
      }
 else {
        final PayloadProcessor.Pair pair=processor.generateForStore();
        client.callProcedure(new NullCallback(),"Put",pair.Key,pair.getStoreValue());
      }
      lastSuccessfulResponse=System.currentTimeMillis();
    }
  }
  fullStatsContext.fetchAndResetBaseline();
  periodicStatsContext.fetchAndResetBaseline();
  benchmarkStartTS=System.currentTimeMillis();
  schedulePeriodicStats();
  if (totalConnections.get() == 1)   config.multisingleratio=0;
  System.out.println("\nRunning benchmark...");
  final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
  long currentTime=System.currentTimeMillis();
  long diff=benchmarkEndTime - currentTime;
  int i=1;
  long putCount=0;
  double mpRand;
  String msg="";
  while (benchmarkEndTime > currentTime && putCount < config.maxputs) {
    if (debug && diff != 0 && diff % 5000.00 == 0 && i % 5 == 0) {
      msg="i = " + i + ", Time remaining in seconds: "+ diff / 1000l + ", totalConnections = " + totalConnections.get();
      prt(msg);
      i++;
    }
    if (totalConnections.get() < 1) {
      if (debug) {
        msg="i = " + i + ", diff = '"+ diff+ ", totalConnections = "+ totalConnections.get()+ "\n";
      }
      msg+="All connections are lost! VoltDB could be down!!";
      prt(msg);
      System.exit(1);
    }
    if (rand.nextDouble() < config.getputratio) {
      mpRand=rand.nextDouble();
      if (mpRand < config.multisingleratio) {
        if (totalConnections.get() > 1 && config.poolsize > 10000) {
          slow=true;
          debug=true;
        }
 else         debug=false;
        client.callProcedure(new GetCallback(mpRand),"GetMp",processor.generateRandomKeyForRetrieval());
      }
 else {
        client.callProcedure(new GetCallback(mpRand),"Get",processor.generateRandomKeyForRetrieval());
      }
    }
 else {
      putCount++;
      final PayloadProcessor.Pair pair=processor.generateForStore();
      mpRand=rand.nextDouble();
      if (rand.nextDouble() < config.multisingleratio) {
        if (totalConnections.get() > 1 && config.poolsize > 10000) {
          slow=true;
          debug=true;
        }
 else         debug=false;
        client.callProcedure(new PutCallback(pair,mpRand),"PutMp",pair.Key,pair.getStoreValue());
      }
 else {
        client.callProcedure(new PutCallback(pair,mpRand),"Put",pair.Key,pair.getStoreValue());
      }
    }
    currentTime=System.currentTimeMillis();
    diff=benchmarkEndTime - currentTime;
  }
  timer.cancel();
}
