{
  StringBuffer sb=new StringBuffer();
switch (funcType) {
case FUNC_POSITION_CHAR:
case FUNC_POSITION_BINARY:
{
      sb.append(Tokens.T_POSITION).append('(').append(nodes[0].getSQL()).append(' ').append(Tokens.T_IN).append(' ').append(nodes[1].getSQL());
      if (nodes[2] != null && Boolean.TRUE.equals(nodes[2].valueData)) {
        sb.append(' ').append(Tokens.T_USING).append(' ').append(Tokens.T_OCTETS);
      }
      sb.append(')');
      break;
    }
case FUNC_OCCURENCES_REGEX:
  break;
case FUNC_POSITION_REGEX:
break;
case FUNC_EXTRACT:
{
int type=((Integer)nodes[0].valueData).intValue();
type=DTIType.getFieldNameTypeForToken(type);
String token=DTIType.getFieldNameTokenForType(type);
sb.append(Tokens.T_EXTRACT).append('(').append(token).append(' ').append(Tokens.T_FROM).append(' ').append(nodes[1].getSQL()).append(')');
break;
}
case FUNC_CHAR_LENGTH:
{
sb.append(Tokens.T_CHAR_LENGTH).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_BIT_LENGTH:
{
sb.append(Tokens.T_BIT_LENGTH).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_OCTET_LENGTH:
{
sb.append(Tokens.T_OCTET_LENGTH).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_ABS:
{
sb.append(Tokens.T_ABS).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_MOD:
{
sb.append(Tokens.T_MOD).append('(').append(nodes[0].getSQL()).append(',').append(nodes[1].getSQL()).append(')');
break;
}
case FUNC_LN:
{
sb.append(Tokens.T_LN).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_EXP:
{
sb.append(Tokens.T_EXP).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_POWER:
{
sb.append(Tokens.T_POWER).append('(').append(nodes[0].getSQL()).append(',').append(nodes[1].getSQL()).append(')');
break;
}
case FUNC_SQRT:
{
sb.append(Tokens.T_SQRT).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_FLOOR:
{
sb.append(Tokens.T_FLOOR).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_CEILING:
{
sb.append(Tokens.T_CEILING).append('(').append(nodes[0].getSQL()).append(')');
break;
}
case FUNC_WIDTH_BUCKET:
{
sb.append(Tokens.T_WIDTH_BUCKET).append('(').append(nodes[0].getSQL()).append(',').append(nodes[1].getSQL()).append(',').append(nodes[2].getSQL()).append(',').append(nodes[3].getSQL()).append(')');
break;
}
case FUNC_SUBSTRING_CHAR:
case FUNC_SUBSTRING_BINARY:
sb.append(Tokens.T_SUBSTRING).append('(').append(nodes[0].getSQL()).append(' ').append(Tokens.T_FROM).append(' ').append(nodes[1].getSQL());
if (nodes[2] != null) {
sb.append(' ').append(Tokens.T_FOR).append(' ').append(nodes[2].getSQL());
}
if (nodes.length > 3 && nodes[3] != null) {
if (Boolean.TRUE.equals(nodes[3].valueData)) {
sb.append(' ').append(Tokens.T_USING).append(' ').append(Tokens.T_OCTETS);
}
}
sb.append(')');
break;
case FUNC_FOLD_LOWER:
sb.append(Tokens.T_LOWER).append('(').append(nodes[0].getSQL()).append(')');
break;
case FUNC_FOLD_UPPER:
sb.append(Tokens.T_UPPER).append('(').append(nodes[0].getSQL()).append(')');
break;
case FUNC_OVERLAY_CHAR:
case FUNC_OVERLAY_BINARY:
sb.append(Tokens.T_OVERLAY).append('(').append(nodes[0].getSQL()).append(' ').append(Tokens.T_PLACING).append(' ').append(nodes[1].getSQL()).append(' ').append(Tokens.T_FROM).append(' ').append(nodes[2].getSQL());
if (nodes[3] != null) {
sb.append(' ').append(Tokens.T_FOR).append(' ').append(nodes[3].getSQL());
}
if (nodes[4] != null) {
if (Boolean.TRUE.equals(nodes[4].valueData)) {
sb.append(' ').append(Tokens.T_USING).append(' ').append(Tokens.T_OCTETS);
}
}
sb.append(')');
break;
case FUNC_TRIM_CHAR:
case FUNC_TRIM_BINARY:
String spec=null;
switch (((Number)nodes[0].valueData).intValue()) {
case Tokens.BOTH:
spec=Tokens.T_BOTH;
break;
case Tokens.LEADING:
spec=Tokens.T_LEADING;
break;
case Tokens.TRAILING:
spec=Tokens.T_TRAILING;
break;
}
sb.append(Tokens.T_TRIM).append('(').append(spec).append(' ').append(nodes[1].getSQL()).append(' ').append(Tokens.T_FROM).append(' ').append(nodes[2].getSQL()).append(')');
break;
case FUNC_CURRENT_CATALOG:
case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP:
case FUNC_CURRENT_PATH:
case FUNC_CURRENT_ROLE:
case FUNC_CURRENT_SCHEMA:
case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE:
case FUNC_CURRENT_USER:
case FUNC_SESSION_USER:
case FUNC_SYSTEM_USER:
case FUNC_USER:
case FUNC_CURRENT_DATE:
case FUNC_VALUE:
return name;
case FUNC_LOCALTIME:
case FUNC_CURRENT_TIME:
{
int precision=DateTimeType.defaultTimeFractionPrecision;
if (nodes[0] != null) {
precision=((Number)nodes[0].valueData).intValue();
}
if (precision == DateTimeType.defaultTimeFractionPrecision) {
return name;
}
sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);
sb.append(Tokens.T_CLOSEBRACKET);
return sb.toString();
}
case FUNC_LOCALTIMESTAMP:
case FUNC_CURRENT_TIMESTAMP:
{
int precision=DateTimeType.defaultTimestampFractionPrecision;
if (nodes[0] != null) {
precision=((Number)nodes[0].valueData).intValue();
}
if (precision == DateTimeType.defaultTimestampFractionPrecision) {
return name;
}
sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);
sb.append(Tokens.T_CLOSEBRACKET);
return sb.toString();
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");
}
return sb.toString();
}
