{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table FOO (" + "ID integer not null," + "VAL bigint, "+ "constraint PK_TREE primary key (ID)"+ ");\n"+ "create table FOO_R ("+ "ID integer not null,"+ "VAL bigint, "+ "constraint PK_TREE_R primary key (ID)"+ ");\n");
  builder.addPartitionInfo("FOO","ID");
  builder.setUseAdhocSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    assertFalse(findTableInSystemCatalogResults("FOOVIEW"));
    try {
      m_client.callProcedure("@AdHoc","create view FOOVIEW (VAL, TOTAL) as " + "select VAL, COUNT(*) from FOO group by VAL;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to create a view");
    }
    assertTrue(findTableInSystemCatalogResults("FOOVIEW"));
    boolean threw=false;
    try {
      m_client.callProcedure("@AdHoc","create view FOOVIEW (VAL, TOTAL) as " + "select VAL, COUNT(*) from FOO group by VAL;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertTrue("Shouldn't be able to create the same view twice",threw);
    assertTrue(findTableInSystemCatalogResults("FOOVIEW"));
    try {
      m_client.callProcedure("@AdHoc","drop view FOOVIEW;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to drop a view");
    }
    assertFalse(findTableInSystemCatalogResults("FOOVIEW"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","drop view FOOVIEW;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertTrue("Shouldn't be able to drop a view twice",threw);
    assertFalse(findTableInSystemCatalogResults("FOOVIEW"));
    try {
      m_client.callProcedure("@AdHoc","drop view FOOVIEW if exists;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to drop a bad view with if exists");
    }
    assertFalse(findTableInSystemCatalogResults("FOOVIEW"));
  }
  finally {
    teardownSystem();
  }
}
