{
  assert(plan != null);
  ArrayList<AbstractPlanNode> children=new ArrayList<AbstractPlanNode>();
  for (int i=0; i < plan.getChildCount(); i++)   children.add(plan.getChild(i));
  for (  AbstractPlanNode child : children) {
    AbstractPlanNode newChild=recursivelyApply(child);
    if (newChild == child) {
      continue;
    }
    child.removeFromGraph();
    plan.addAndLinkChild(newChild);
  }
  if ((plan instanceof AggregatePlanNode) == false)   return plan;
  assert(plan.getChildCount() == 1);
  AggregatePlanNode aggplan=(AggregatePlanNode)plan;
  if (aggplan.isTableCountStar() == false) {
    return plan;
  }
  AbstractPlanNode child=plan.getChild(0);
  if (child instanceof SeqScanPlanNode) {
    if (((SeqScanPlanNode)child).getPredicate() != null) {
      return plan;
    }
    return new TableCountPlanNode((AbstractScanPlanNode)child,aggplan);
  }
  if ((child instanceof IndexScanPlanNode) == false)   return plan;
  IndexScanPlanNode isp=(IndexScanPlanNode)child;
  if (isp.getPredicate() != null && !isp.isPredicatesOptimizableForAggregate()) {
    return plan;
  }
  if (isp.getEndExpression() == null && isp.getSearchKeyExpressions().size() == 0) {
    return new TableCountPlanNode(isp,aggplan);
  }
  Index idx=isp.getCatalogIndex();
  if (!idx.getCountable()) {
    return plan;
  }
  IndexCountPlanNode countingPlan=IndexCountPlanNode.createOrNull(isp,aggplan);
  if (countingPlan == null) {
    return plan;
  }
  return countingPlan;
}
