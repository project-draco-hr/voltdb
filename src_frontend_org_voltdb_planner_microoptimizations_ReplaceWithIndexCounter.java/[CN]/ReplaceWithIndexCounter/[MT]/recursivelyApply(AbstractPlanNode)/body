{
  assert(plan != null);
  ArrayList<AbstractPlanNode> children=new ArrayList<AbstractPlanNode>();
  for (int i=0; i < plan.getChildCount(); i++)   children.add(plan.getChild(i));
  plan.clearChildren();
  for (  AbstractPlanNode child : children) {
    child=recursivelyApply(child);
    child.clearParents();
    plan.addAndLinkChild(child);
  }
  if ((plan instanceof AggregatePlanNode) == false)   return plan;
  if (plan.getChildCount() != 1)   return plan;
  List<ExpressionType> et=((AggregatePlanNode)plan).getM_aggregateTypes();
  if ((et.size() == 1 && et.get(0).equals(ExpressionType.AGGREGATE_COUNT_STAR)) == false)   return plan;
  AbstractPlanNode child=plan.getChild(0);
  if ((child instanceof IndexScanPlanNode) == false)   return plan;
  Index idx=((IndexScanPlanNode)child).getCatalogIndex();
  if (idx.getCountable() == false)   return plan;
  IndexCountPlanNode icpn=new IndexCountPlanNode();
  if (plan.getParent(0) != null) {
    plan.getParent(0).addAndLinkChild(icpn);
  }
  plan.removeFromGraph();
  child.removeFromGraph();
  return icpn;
}
