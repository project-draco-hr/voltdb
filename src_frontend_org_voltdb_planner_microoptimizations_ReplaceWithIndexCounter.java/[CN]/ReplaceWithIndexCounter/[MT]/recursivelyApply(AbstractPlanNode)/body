{
  assert(plan != null);
  ArrayList<AbstractPlanNode> children=new ArrayList<AbstractPlanNode>();
  for (int i=0; i < plan.getChildCount(); i++)   children.add(plan.getChild(i));
  for (  AbstractPlanNode child : children) {
    AbstractPlanNode newChild=recursivelyApply(child);
    if (!newChild.equals(child)) {
      child.removeFromGraph();
      plan.addAndLinkChild(newChild);
    }
  }
  if ((plan instanceof AggregatePlanNode) == false)   return plan;
  if (plan.getChildCount() != 1)   return plan;
  List<ExpressionType> et=((AggregatePlanNode)plan).getAggregateTypes();
  if ((et.size() == 1 && et.get(0).equals(ExpressionType.AGGREGATE_COUNT_STAR)) == false)   return plan;
  AbstractPlanNode child=plan.getChild(0);
  if (child instanceof SeqScanPlanNode) {
    if (((SeqScanPlanNode)child).getPredicate() == null) {
      return new TableCountPlanNode((SeqScanPlanNode)child,(AggregatePlanNode)plan);
    }
  }
  if ((child instanceof IndexScanPlanNode) == false)   return plan;
  IndexScanPlanNode isp=(IndexScanPlanNode)child;
  if (isp.getPredicate() == null && isp.getEndExpression() == null && isp.getSearchKeyExpressions().size() == 0)   return plan;
  IndexScanPlanNode ispnChild=(IndexScanPlanNode)child;
  Index idx=ispnChild.getCatalogIndex();
  if (idx.getCountable() == false)   return plan;
  if (hasNoPostExpression(ispnChild)) {
    if (hasValidEndExpr(ispnChild.getEndExpression()) == false)     return plan;
    return new IndexCountPlanNode(ispnChild,(AggregatePlanNode)plan);
  }
  return plan;
}
