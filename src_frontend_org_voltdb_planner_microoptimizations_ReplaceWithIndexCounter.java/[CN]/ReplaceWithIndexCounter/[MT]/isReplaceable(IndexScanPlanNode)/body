{
  AbstractExpression endExpr=child.getEndExpression();
  AbstractExpression postExpr=child.getPredicate();
  ArrayList<AbstractExpression> subEndExpr=null;
  if (endExpr != null) {
    System.err.println("End Expression:\n" + endExpr);
    subEndExpr=endExpr.findAllSubexpressionsOfClass(TupleValueExpression.class);
  }
  assert(postExpr != null);
  System.err.println("Post Expression:\n" + postExpr);
  ArrayList<AbstractExpression> subExpr=postExpr.findAllSubexpressionsOfClass(TupleValueExpression.class);
  ;
  Index idx=child.getCatalogIndex();
  CatalogMap<ColumnRef> clms=idx.getColumns();
  List<AbstractExpression> searchKeyExpre=child.getSearchKeyExpressions();
  ArrayList<AbstractExpression> hasLeft=new ArrayList<AbstractExpression>(subExpr.size());
  hasLeft.addAll(subExpr);
  for (  AbstractExpression ae : subExpr) {
    if (endExpr != null && subEndExpr != null && subEndExpr.contains(ae)) {
      hasLeft.remove(ae);
    }
  }
  if (hasLeft.size() != 0)   return false;
  return true;
}
