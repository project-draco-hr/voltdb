{
  return new Maps.EntrySet<V,K>(){
    @Override Map<V,K> map(){
      return Inverse.this;
    }
    @Override public Iterator<Entry<V,K>> iterator(){
      return new Itr<Entry<V,K>>(){
        @Override Entry<V,K> output(        BiEntry<K,V> entry){
          return new InverseEntry(entry);
        }
class InverseEntry extends AbstractMapEntry<V,K> {
          BiEntry<K,V> delegate;
          InverseEntry(          BiEntry<K,V> entry){
            this.delegate=entry;
          }
          @Override public V getKey(){
            return delegate.value;
          }
          @Override public K getValue(){
            return delegate.key;
          }
          @Override public K setValue(          K key){
            K oldKey=delegate.key;
            int keyHash=smearedHash(key);
            if (keyHash == delegate.keyHash && Objects.equal(key,oldKey)) {
              return key;
            }
            checkArgument(seekByKey(key,keyHash) == null,"value already present: %s",key);
            delete(delegate);
            BiEntry<K,V> newEntry=new BiEntry<K,V>(key,keyHash,delegate.value,delegate.valueHash);
            delegate=newEntry;
            insert(newEntry,null);
            expectedModCount=modCount;
            return oldKey;
          }
        }
      }
;
    }
  }
;
}
