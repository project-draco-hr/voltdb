{
  int valueHash=smearedHash(value);
  int keyHash=smearedHash(key);
  BiEntry<K,V> oldEntryForValue=seekByValue(value,valueHash);
  if (oldEntryForValue != null && keyHash == oldEntryForValue.keyHash && Objects.equal(key,oldEntryForValue.key)) {
    return key;
  }
  BiEntry<K,V> oldEntryForKey=seekByKey(key,keyHash);
  if (oldEntryForKey != null) {
    if (force) {
      delete(oldEntryForKey);
    }
 else {
      throw new IllegalArgumentException("value already present: " + key);
    }
  }
  if (oldEntryForValue != null) {
    delete(oldEntryForValue);
  }
  BiEntry<K,V> newEntry=new BiEntry<K,V>(key,keyHash,value,valueHash);
  insert(newEntry,oldEntryForKey);
  if (oldEntryForKey != null) {
    oldEntryForKey.prevInKeyInsertionOrder=null;
    oldEntryForKey.nextInKeyInsertionOrder=null;
  }
  rehashIfNecessary();
  return Maps.keyOrNull(oldEntryForValue);
}
