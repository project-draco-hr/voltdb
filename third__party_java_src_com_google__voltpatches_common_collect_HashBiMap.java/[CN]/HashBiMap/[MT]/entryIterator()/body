{
  return new Itr<Entry<K,V>>(){
    @Override Entry<K,V> output(    BiEntry<K,V> entry){
      return new MapEntry(entry);
    }
class MapEntry extends AbstractMapEntry<K,V> {
      BiEntry<K,V> delegate;
      MapEntry(      BiEntry<K,V> entry){
        this.delegate=entry;
      }
      @Override public K getKey(){
        return delegate.key;
      }
      @Override public V getValue(){
        return delegate.value;
      }
      @Override public V setValue(      V value){
        V oldValue=delegate.value;
        int valueHash=smearedHash(value);
        if (valueHash == delegate.valueHash && Objects.equal(value,oldValue)) {
          return value;
        }
        checkArgument(seekByValue(value,valueHash) == null,"value already present: %s",value);
        delete(delegate);
        BiEntry<K,V> newEntry=new BiEntry<K,V>(delegate.key,delegate.keyHash,value,valueHash);
        insert(newEntry,delegate);
        delegate.prevInKeyInsertionOrder=null;
        delegate.nextInKeyInsertionOrder=null;
        expectedModCount=modCount;
        if (toRemove == delegate) {
          toRemove=newEntry;
        }
        delegate=newEntry;
        return oldValue;
      }
    }
  }
;
}
