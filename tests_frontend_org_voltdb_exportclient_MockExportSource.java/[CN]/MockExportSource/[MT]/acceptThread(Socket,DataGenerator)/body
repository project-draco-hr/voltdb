{
  try {
    DataInputStream in=new DataInputStream(socket.getInputStream());
    DataOutputStream out=new DataOutputStream(socket.getOutputStream());
    int messageLen=in.readInt();
    assert(messageLen == 35);
    byte version=in.readByte();
    assert(version == 0);
    String service=readString(in);
    assert(service.equals("export"));
    String username=readString(in);
    assert(username.equals(""));
    byte[] password=new byte[20];
    in.read(password);
    byte buildString[]="Dummy Buildstring".getBytes("UTF-8");
    out.writeInt(30 + buildString.length);
    out.write((byte)0);
    out.write((byte)0);
    out.writeInt(0);
    out.writeLong(0);
    out.writeLong(0);
    out.writeInt(0);
    out.writeInt(buildString.length);
    out.write(buildString);
    ExportProtoMessage m=getNextExportMessage(in);
    assert(m.isOpen());
    VoltTable schema=dataGen.tableForSchema();
    FastSerializer fs=new FastSerializer();
    fs.writeInt(1);
    fs.writeLong(0);
    fs.writeInt(0);
    String signature=dataGen.getSignature();
    fs.writeString(signature);
    fs.writeString("unnamed table");
    fs.writeLong(ManagementFactory.getRuntimeMXBean().getStartTime());
    fs.writeInt(schema.getColumnCount());
    for (int i=0; i < schema.getColumnCount(); i++) {
      fs.writeString(schema.getColumnName(i));
      fs.writeInt(schema.getColumnType(i).getValue());
    }
    fs.writeInt(1);
    fs.writeString("127.0.0.1:21212:-1:-1");
    m=new ExportProtoMessage(0,0,"i");
    m.openResponse(fs.getBuffer());
    ByteBuffer buf=ByteBuffer.allocate(m.serializableBytes() + 4);
    m.flattenToBuffer(buf);
    buf.flip();
    out.write(buf.array());
    while ((dataGen.eof() == false) && socket.isConnected()) {
      m=getNextExportMessage(in);
      assert(m.isPoll());
      VoltTable t=dataGen.nextBlock();
      if (t.getRowCount() == 0)       break;
      buf=ExportEncoder.getEncodedTable(t);
      m=new ExportProtoMessage(0,0,dataGen.getSignature());
      m.pollResponse(0,buf);
      buf=ByteBuffer.allocate(4 + m.serializableBytes());
      m.flattenToBuffer(buf);
      byte[] pollResponseBytes=buf.array();
      out.write(pollResponseBytes);
    }
    while (socket.isConnected())     Thread.sleep(100);
  }
 catch (  EOFException e) {
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}
