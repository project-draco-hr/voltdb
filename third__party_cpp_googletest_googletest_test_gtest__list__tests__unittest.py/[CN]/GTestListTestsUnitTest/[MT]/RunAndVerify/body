def RunAndVerify(self, flag_value, expected_output_re, other_flag):
    'Runs gtest_list_tests_unittest_ and verifies that it prints\n    the correct tests.\n\n    Args:\n      flag_value:         value of the --gtest_list_tests flag;\n                          None if the flag should not be present.\n      expected_output_re: regular expression that matches the expected\n                          output after running command;\n      other_flag:         a different flag to be passed to command\n                          along with gtest_list_tests;\n                          None if the flag should not be present.\n    '
    if (flag_value is None):
        flag = ''
        flag_expression = 'not set'
    elif (flag_value == '0'):
        flag = ('--%s=0' % LIST_TESTS_FLAG)
        flag_expression = '0'
    else:
        flag = ('--%s' % LIST_TESTS_FLAG)
        flag_expression = '1'
    args = [flag]
    if (other_flag is not None):
        args += [other_flag]
    output = Run(args)
    if expected_output_re:
        self.assert_(expected_output_re.match(output), ('when %s is %s, the output of "%s" is "%s",\nwhich does not match regex "%s"' % (LIST_TESTS_FLAG, flag_expression, ' '.join(args), output, expected_output_re.pattern)))
    else:
        self.assert_((not EXPECTED_OUTPUT_NO_FILTER_RE.match(output)), ('when %s is %s, the output of "%s" is "%s"' % (LIST_TESTS_FLAG, flag_expression, ' '.join(args), output)))
