import os, sys, commands, string
from buildtools import *
CTX = BuildContext(sys.argv)
CTX.CPPFLAGS += '-Wall -Wextra -Werror -Woverloaded-virtual\n            -Wpointer-arith -Wcast-qual -Wwrite-strings\n            -Winit-self -Wno-sign-compare -Wno-unused-parameter\n            -pthread\n            -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -DNOCLOCK\n            -fno-omit-frame-pointer\n            -fvisibility=default -DBOOST_SP_DISABLE_THREADS'
if ((gcc_major == 4) and (gcc_minor >= 3)):
    CTX.CPPFLAGS += ' -Wno-ignored-qualifiers -fno-strict-aliasing'
if CTX.PROFILE:
    CTX.CPPFLAGS += ' -fvisibility=default -DPROFILE_ENABLED'
CTX.LDFLAGS += ' -g3 -rdynamic'
CTX.LASTLDFLAGS = ' -ldl'
if CTX.COVERAGE:
    CTX.LDFLAGS += ' -ftest-coverage -fprofile-arcs'
if CTX.PROFILE:
    CTX.LDFLAGS = '  -L/usr/local/lib -g3 -rdynamic -lprofiler -lunwind'
CTX.INCLUDE_DIRS = ['src/ee']
CTX.SYSTEM_DIRS = ['third_party/cpp']
if (CTX.LEVEL == 'MEMCHECK'):
    CTX.TEST_EXTRAFLAGS = ' -g3 -DDEBUG -DMEMCHECK'
else:
    CTX.TEST_EXTRAFLAGS = ' -g3 -DDEBUG '
CTX.IGNORE_SYS_PREFIXES = ['/usr/include', '/usr/lib', 'third_party']
CTX.INPUT_PREFIX = 'src/ee/'
CTX.THIRD_PARTY_INPUT_PREFIX = 'third_party/cpp/'
CTX.TEST_PREFIX = 'tests/ee/'
if (CTX.LEVEL == 'MEMCHECK'):
    CTX.EXTRAFLAGS += ' -g3 -rdynamic -DDEBUG -DMEMCHECK -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/memcheck'
if (CTX.LEVEL == 'DEBUG'):
    CTX.EXTRAFLAGS += ' -g3 -rdynamic -DDEBUG -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/debug'
if (CTX.LEVEL == 'RELEASE'):
    CTX.EXTRAFLAGS += ' -g3 -O3 -mmmx -msse -msse2 -msse3 -DNDEBUG -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/release'
if CTX.COVERAGE:
    CTX.EXTRAFLAGS += ' -ftest-coverage -fprofile-arcs'
    CTX.OUTPUT_PREFIX += '-coverage'
CTX.OUTPUT_PREFIX += '/'
CTX.JNIEXT = 'so'
CTX.JNILIBFLAGS += ' -shared'
CTX.SOFLAGS += ' -shared'
CTX.SOEXT = 'so'
out = Popen('java -cp tools/ SystemPropertyPrinter java.library.path'.split(), stdout=PIPE).communicate()[0]
libpaths = ' '.join((('-L' + path) for path in out.strip().split(':') if ((path != '') and (path != '/usr/lib'))))
CTX.JNIBINFLAGS += (' ' + libpaths)
CTX.JNIBINFLAGS += ' -ljava -ljvm -lverify'
if (CTX.PLATFORM == 'Darwin'):
    CTX.CPPFLAGS += ' -DMACOSX -arch x86_64'
    CTX.JNIEXT = 'jnilib'
    CTX.JNILIBFLAGS = ' -bundle'
    CTX.JNIBINFLAGS = ' -framework JavaVM,1.6'
    CTX.SOFLAGS += '-dynamiclib -undefined dynamic_lookup -single_module'
    CTX.SOEXT = 'dylib'
    CTX.JNIFLAGS = '-framework JavaVM,1.6'
if (CTX.PLATFORM == 'Linux'):
    CTX.CPPFLAGS += ' -Wno-attributes -Wcast-align -Wconversion -DLINUX -fpic'
    CTX.NMFLAGS += ' --demangle'
CTX.INPUT[''] = '\n voltdbjni.cpp\n'
CTX.INPUT['catalog'] = '\n authprogram.cpp\n catalog.cpp\n cataloginteger.cpp\n catalogtype.cpp\n cluster.cpp\n column.cpp\n columnref.cpp\n connector.cpp\n connectortableinfo.cpp\n connectorproperty.cpp\n constraint.cpp\n constraintref.cpp\n database.cpp\n deployment.cpp\n group.cpp\n groupref.cpp\n index.cpp\n materializedviewinfo.cpp\n planfragment.cpp\n procedure.cpp\n procparameter.cpp\n program.cpp\n statement.cpp\n stmtparameter.cpp\n systemsettings.cpp\n table.cpp\n user.cpp\n userref.cpp\n snapshotschedule.cpp\n commandlog.cpp\n'
CTX.INPUT['structures'] = '\n CompactingPool.cpp\n ContiguousAllocator.cpp\n'
CTX.INPUT['common'] = '\n CompactingStringPool.cpp\n CompactingStringStorage.cpp\n FatalException.cpp\n ThreadLocalPool.cpp\n SegvException.cpp\n SerializableEEException.cpp\n SQLException.cpp\n StringRef.cpp\n tabletuple.cpp\n TupleSchema.cpp\n types.cpp\n UndoLog.cpp\n NValue.cpp\n RecoveryProtoMessage.cpp\n RecoveryProtoMessageBuilder.cpp\n DefaultTupleSerializer.cpp\n executorcontext.cpp\n serializeio.cpp\n StreamPredicateList.cpp\n TupleOutputStream.cpp\n TupleOutputStreamProcessor.cpp\n'
CTX.INPUT['execution'] = '\n FragmentManager.cpp\n JNITopend.cpp\n VoltDBEngine.cpp\n'
CTX.INPUT['executors'] = '\n abstractexecutor.cpp\n aggregateexecutor.cpp\n deleteexecutor.cpp\n distinctexecutor.cpp\n executorutil.cpp\n indexscanexecutor.cpp\n indexcountexecutor.cpp\n tablecountexecutor.cpp\n insertexecutor.cpp\n limitexecutor.cpp\n materializeexecutor.cpp\n nestloopexecutor.cpp\n nestloopindexexecutor.cpp\n orderbyexecutor.cpp\n projectionexecutor.cpp\n receiveexecutor.cpp\n sendexecutor.cpp\n seqscanexecutor.cpp\n unionexecutor.cpp\n updateexecutor.cpp\n'
CTX.INPUT['expressions'] = '\n abstractexpression.cpp\n expressionutil.cpp\n functionexpression.cpp\n tupleaddressexpression.cpp\n'
CTX.INPUT['plannodes'] = '\n abstractjoinnode.cpp\n abstractoperationnode.cpp\n abstractplannode.cpp\n abstractscannode.cpp\n aggregatenode.cpp\n deletenode.cpp\n distinctnode.cpp\n indexscannode.cpp\n indexcountnode.cpp\n tablecountnode.cpp\n insertnode.cpp\n limitnode.cpp\n materializenode.cpp\n nestloopindexnode.cpp\n nestloopnode.cpp\n orderbynode.cpp\n plannodefragment.cpp\n plannodeutil.cpp\n projectionnode.cpp\n receivenode.cpp\n SchemaColumn.cpp\n sendnode.cpp\n seqscannode.cpp\n unionnode.cpp\n updatenode.cpp\n'
CTX.INPUT['indexes'] = '\n tableindex.cpp\n tableindexfactory.cpp\n IndexStats.cpp\n'
CTX.INPUT['storage'] = '\n constraintutil.cpp\n CopyOnWriteContext.cpp\n ElasticContext.cpp\n CopyOnWriteIterator.cpp\n ConstraintFailureException.cpp\n TableStreamer.cpp\n ElasticScanner.cpp\n MaterializedViewMetadata.cpp\n persistenttable.cpp\n PersistentTableStats.cpp\n StreamedTableStats.cpp\n streamedtable.cpp\n table.cpp\n TableCatalogDelegate.cpp\n tablefactory.cpp\n TableStats.cpp\n tableutil.cpp\n temptable.cpp\n TempTableLimits.cpp\n TupleStreamWrapper.cpp\n RecoveryContext.cpp\n TupleBlock.cpp\n TableStreamerContext.cpp\n'
CTX.INPUT['stats'] = '\n StatsAgent.cpp\n StatsSource.cpp\n'
CTX.INPUT['logging'] = '\n JNILogProxy.cpp\n LogManager.cpp\n'
CTX.THIRD_PARTY_INPUT['json_spirit'] = '\n json_spirit_reader.cpp\n json_spirit_value.cpp\n json_spirit_writer.cpp\n'
CTX.THIRD_PARTY_INPUT['jsoncpp'] = '\n jsoncpp.cpp\n'
CTX.THIRD_PARTY_INPUT['crc'] = '\n crc32c.cc\n crc32ctables.cc\n'
CTX.THIRD_PARTY_INPUT['murmur3'] = '\n MurmurHash3.cpp\n'
whichtests = os.getenv('EETESTSUITE')
if (whichtests == None):
    whichtests = '${eetestsuite}'
if (whichtests == '${eetestsuite}'):
    CTX.TESTS['.'] = '\n     harness_test\n    '
if (whichtests in ('${eetestsuite}', 'catalog')):
    CTX.TESTS['catalog'] = '\n    catalog_test\n    '
if (whichtests in ('${eetestsuite}', 'logging')):
    CTX.TESTS['logging'] = '\n    logging_test\n    '
if (whichtests in ('${eetestsuite}', 'common')):
    CTX.TESTS['common'] = '\n     debuglog_test\n     serializeio_test\n     undolog_test\n     valuearray_test\n     nvalue_test\n     pool_test\n     tabletuple_test\n     elastic_hashinator_test\n    '
if (whichtests in ('${eetestsuite}', 'execution')):
    CTX.TESTS['execution'] = '\n     add_drop_table\n     engine_test\n     FragmentManagerTest\n    '
if (whichtests in ('${eetestsuite}', 'expressions')):
    CTX.TESTS['expressions'] = '\n     expression_test\n    '
if (whichtests in ('${eetestsuite}', 'indexes')):
    CTX.TESTS['indexes'] = '\n     index_key_test\n     index_scripted_test\n     index_test\n     compacting_hash_index\n    '
if (whichtests in ('${eetestsuite}', 'storage')):
    CTX.TESTS['storage'] = '\n     CompactionTest\n     CopyOnWriteTest\n     constraint_test\n     filter_test\n     persistent_table_log_test\n     PersistentTableMemStatsTest\n     serialize_test\n     StreamedTable_test\n     table_and_indexes_test\n     table_test\n     tabletuple_export_test\n     TempTableLimitsTest\n     TupleStreamWrapper_test\n    '
if (whichtests in ('${eetestsuite}', 'structures')):
    CTX.TESTS['structures'] = '\n     CompactingMapTest\n     CompactingMapIndexCountTest\n     CompactingHashTest\n     CompactingPoolTest\n    '
if (whichtests in ('${eetestsuite}', 'plannodes')):
    CTX.TESTS['plannodes'] = '\n     PlanNodeFragmentTest\n    '
if (not os.environ.get('EESKIPBUILDMAKEFILE')):
    print 'build.py: Making the makefile'
    buildMakefile(CTX)
if os.environ.get('EEONLYBUILDMAKEFILE'):
    sys.exit()
numHardwareThreads = 4
if (CTX.PLATFORM == 'Darwin'):
    numHardwareThreads = 0
    output = commands.getstatusoutput('sysctl hw.ncpu')
    numHardwareThreads = int(string.strip(string.split(output[1])[1]))
elif (CTX.PLATFORM == 'Linux'):
    numHardwareThreads = 0
    for line in open('/proc/cpuinfo').readlines():
        name_value = map(string.strip, string.split(line, ':', 1))
        if (len(name_value) != 2):
            continue
        (name, value) = name_value
        if (name == 'processor'):
            numHardwareThreads = (numHardwareThreads + 1)
retval = os.system(('make --directory=%s -j%d' % (CTX.OUTPUT_PREFIX, numHardwareThreads)))
if (retval != 0):
    sys.exit((-1))
retval = 0
if (CTX.TARGET == 'TEST'):
    retval = runTests(CTX)
elif (CTX.TARGET == 'VOLTDBIPC'):
    retval = buildIPC(CTX)
if (retval != 0):
    sys.exit((-1))
