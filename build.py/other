import os, sys, commands, string
from buildtools import *
CTX = BuildContext(sys.argv)
CTX.CPPFLAGS = '-Wall -Wextra -Werror -Woverloaded-virtual -Wconversion\n            -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings\n            -Winit-self -Wno-sign-compare -Wno-unused-parameter\n            -pthread\n            -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -DNOCLOCK\n            -fno-omit-frame-pointer\n            -fvisibility=hidden -DBOOST_SP_DISABLE_THREADS'
if ((gcc_major == 4) and (gcc_minor >= 3)):
    CTX.CPPFLAGS += ' -Wno-ignored-qualifiers -fno-strict-aliasing'
CTX.LDFLAGS = ' -g3 -rdynamic -ldl'
if CTX.COVERAGE:
    CTX.LDFLAGS += ' -ftest-coverage -fprofile-arcs'
CTX.INCLUDE_DIRS = ['src/ee']
CTX.SYSTEM_DIRS = ['third_party/cpp']
if (CTX.LEVEL == 'MEMCHECK'):
    CTX.TEST_EXTRAFLAGS = ' -g3 -DDEBUG -DMEMCHECK'
elif (CTX.LEVEL == 'MEMCHECK_NOFREELIST'):
    CTX.TEST_EXTRAFLAGS = ' -g3 -DDEBUG -DMEMCHECK -DMEMCHECK_NOFREELIST'
else:
    CTX.TEST_EXTRAFLAGS = ' -g3 -DDEBUG '
CTX.IGNORE_SYS_PREFIXES = ['/usr/include', '/usr/lib', 'third_party']
CTX.INPUT_PREFIX = 'src/ee/'
CTX.THIRD_PARTY_INPUT_PREFIX = 'third_party/cpp/'
CTX.TEST_PREFIX = 'tests/ee/'
if (CTX.LEVEL == 'MEMCHECK'):
    CTX.EXTRAFLAGS += ' -g3 -rdynamic -DDEBUG -DMEMCHECK -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/memcheck'
if (CTX.LEVEL == 'MEMCHECK_NOFREELIST'):
    CTX.EXTRAFLAGS += ' -g3 -rdynamic -DDEBUG -DMEMCHECK -DMEMCHECK_NOFREELIST -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/memcheck_nofreelist'
if (CTX.LEVEL == 'DEBUG'):
    CTX.EXTRAFLAGS += ' -g3 -rdynamic -DDEBUG -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/debug'
if (CTX.LEVEL == 'RELEASE'):
    CTX.EXTRAFLAGS += ' -g3 -O3 -mmmx -msse -msse2 -msse3 -DNDEBUG -DVOLT_LOG_LEVEL=500'
    CTX.OUTPUT_PREFIX = 'obj/release'
if CTX.COVERAGE:
    CTX.EXTRAFLAGS += ' -ftest-coverage -fprofile-arcs'
    CTX.OUTPUT_PREFIX += '-coverage'
CTX.OUTPUT_PREFIX += '/'
CTX.JNIEXT = 'so'
CTX.JNILIBFLAGS += ' -shared'
CTX.SOFLAGS += ' -shared'
CTX.SOEXT = 'so'
out = Popen('java -cp tools/ SystemPropertyPrinter java.library.path'.split(), stdout=PIPE).communicate()[0]
libpaths = ' '.join((('-L' + path) for path in out.strip().split(':') if ((path != '') and (path != '/usr/lib'))))
CTX.JNIBINFLAGS += (' ' + libpaths)
CTX.JNIBINFLAGS += ' -ljava -ljvm -lverify'
if (CTX.PLATFORM == 'Darwin'):
    CTX.CPPFLAGS += ' -DMACOSX -arch x86_64'
    CTX.JNIEXT = 'jnilib'
    CTX.JNILIBFLAGS = ' -bundle'
    CTX.JNIBINFLAGS = ' -framework JavaVM,1.6'
    CTX.SOFLAGS += '-dynamiclib -undefined dynamic_lookup -single_module'
    CTX.SOEXT = 'dylib'
    CTX.JNIFLAGS = '-framework JavaVM,1.6'
if (CTX.PLATFORM == 'Linux'):
    CTX.CPPFLAGS += ' -Wno-attributes -DLINUX -fPIC'
    CTX.NMFLAGS += ' --demangle'
CTX.INPUT[''] = '\n voltdbjni.cpp\n'
CTX.INPUT['catalog'] = '\n authprogram.cpp\n catalog.cpp\n cataloginteger.cpp\n catalogtype.cpp\n cluster.cpp\n column.cpp\n columnref.cpp\n connector.cpp\n connectordestinationinfo.cpp\n connectortableinfo.cpp\n constraint.cpp\n constraintref.cpp\n database.cpp\n group.cpp\n groupref.cpp\n host.cpp\n index.cpp\n materializedviewinfo.cpp\n partition.cpp\n planfragment.cpp\n procedure.cpp\n procparameter.cpp\n program.cpp\n site.cpp\n statement.cpp\n stmtparameter.cpp\n table.cpp\n user.cpp\n userref.cpp\n snapshotschedule.cpp\n'
CTX.INPUT['common'] = '\n SerializableEEException.cpp\n SQLException.cpp\n tabletuple.cpp\n TupleSchema.cpp\n types.cpp\n UndoLog.cpp\n NValue.cpp\n'
CTX.INPUT['execution'] = '\n JNITopend.cpp\n VoltDBEngine.cpp\n'
CTX.INPUT['executors'] = '\n abstractexecutor.cpp\n deleteexecutor.cpp\n distinctexecutor.cpp\n executorutil.cpp\n indexscanexecutor.cpp\n insertexecutor.cpp\n limitexecutor.cpp\n materializeexecutor.cpp\n nestloopexecutor.cpp\n nestloopindexexecutor.cpp\n orderbyexecutor.cpp\n projectionexecutor.cpp\n receiveexecutor.cpp\n sendexecutor.cpp\n seqscanexecutor.cpp\n unionexecutor.cpp\n updateexecutor.cpp\n'
CTX.INPUT['expressions'] = '\n abstractexpression.cpp\n expressionutil.cpp\n tupleaddressexpression.cpp\n'
CTX.INPUT['plannodes'] = '\n abstractjoinnode.cpp\n abstractoperationnode.cpp\n abstractplannode.cpp\n abstractscannode.cpp\n aggregatenode.cpp\n deletenode.cpp\n distinctnode.cpp\n indexscannode.cpp\n insertnode.cpp\n limitnode.cpp\n materializenode.cpp\n nestloopindexnode.cpp\n nestloopnode.cpp\n orderbynode.cpp\n PlanColumn.cpp\n plannodefragment.cpp\n plannodeutil.cpp\n projectionnode.cpp\n receivenode.cpp\n sendnode.cpp\n seqscannode.cpp\n unionnode.cpp\n updatenode.cpp\n'
CTX.INPUT['indexes'] = '\n arrayuniqueindex.cpp\n tableindex.cpp\n tableindexfactory.cpp\n'
CTX.INPUT['storage'] = '\n constraintutil.cpp\n CopyOnWriteContext.cpp\n CopyOnWriteIterator.cpp\n DefaultTupleSerializer.cpp\n ConstraintFailureException.cpp\n MaterializedViewMetadata.cpp\n persistenttable.cpp\n PersistentTableStats.cpp\n PersistentTableUndoDeleteAction.cpp\n PersistentTableUndoInsertAction.cpp\n PersistentTableUndoUpdateAction.cpp\n streamedtable.cpp\n table.cpp\n tablefactory.cpp\n TableStats.cpp\n tableutil.cpp\n temptable.cpp\n TupleStreamWrapper.cpp\n'
CTX.INPUT['stats'] = '\n StatsAgent.cpp\n StatsSource.cpp\n'
CTX.INPUT['logging'] = '\n JNILogProxy.cpp\n LogManager.cpp\n'
CTX.THIRD_PARTY_INPUT['json_spirit'] = '\n json_spirit_reader.cpp\n json_spirit_value.cpp\n'
CTX.TESTS['.'] = '\n harness_test\n'
CTX.TESTS['catalog'] = '\n catalog_test\n'
CTX.TESTS['logging'] = '\n logging_test\n'
CTX.TESTS['common'] = '\n debuglog_test\n serializeio_test\n undolog_test\n valuearray_test\n nvalue_test\n'
CTX.TESTS['execution'] = '\n engine_test\n executors_test\n'
CTX.TESTS['expressions'] = '\n expression_test\n'
CTX.TESTS['indexes'] = '\n index_key_test\n index_scripted_test\n index_test\n'
CTX.TESTS['storage'] = '\n CopyOnWriteTest\n constraint_test\n filter_test\n persistent_table_log_test\n serialize_test\n StreamedTable_test\n table_and_indexes_test\n table_test\n tabletuple_elt_test\n TupleStreamWrapper_test\n'
buildMakefile(CTX)
numHardwareThreads = 4
if (CTX.PLATFORM == 'Darwin'):
    numHardwareThreads = 0
    output = commands.getstatusoutput('sysctl hw.ncpu')
    numHardwareThreads = int(string.strip(string.split(output[1])[1]))
elif (CTX.PLATFORM == 'Linux'):
    numHardwareThreads = 0
    for line in open('/proc/cpuinfo').readlines():
        name_value = map(string.strip, string.split(line, ':', 1))
        if (len(name_value) != 2):
            continue
        (name, value) = name_value
        if (name == 'processor'):
            numHardwareThreads = (numHardwareThreads + 1)
print ('Detected %d hardware threads to use during the build' % numHardwareThreads)
retval = os.system(('make --directory=%s -j%d' % (CTX.OUTPUT_PREFIX, numHardwareThreads)))
print 'Make returned: ', retval
if (retval != 0):
    sys.exit((-1))
retval = 0
if (CTX.TARGET == 'TEST'):
    retval = runTests(CTX)
elif (CTX.TARGET == 'VOLTDBIPC'):
    retval = buildIPC(CTX)
if (retval != 0):
    sys.exit((-1))
