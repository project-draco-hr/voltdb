{
  Client client=getClient();
  fillTableWithFunnyPoints(client);
  VoltTable vt;
  String query="select t2.name " + "from t as t1 inner join t as t2 " + "  on t1.pt = t2.pt "+ "where t1.name = ? "+ "order by t2.pk";
  vt=client.callProcedure("@AdHoc",query,"point").getResults()[0];
  assertContentOfTable(new Object[][]{{"point"},{"closePoint"}},vt);
  vt=client.callProcedure("@AdHoc",query,"northPole1").getResults()[0];
  assertContentOfTable(new Object[][]{{"northPole1"},{"northPole2"},{"northPole3"},{"northPole4"},{"northPole5"}},vt);
  vt=client.callProcedure("@AdHoc",query,"southPole1").getResults()[0];
  assertContentOfTable(new Object[][]{{"southPole1"},{"southPole2"},{"southPole3"},{"southPole4"},{"southPole5"}},vt);
  vt=client.callProcedure("@AdHoc",query,"onAntimeridianNeg1").getResults()[0];
  assertContentOfTable(new Object[][]{{"onAntimeridianNeg1"},{"onAntimeridianNeg2"},{"onAntimeridianPos1"},{"onAntimeridianPos2"}},vt);
  vt=client.callProcedure("@AdHoc",query,"onAntimeridianPos2").getResults()[0];
  assertContentOfTable(new Object[][]{{"onAntimeridianNeg1"},{"onAntimeridianNeg2"},{"onAntimeridianPos1"},{"onAntimeridianPos2"}},vt);
}
