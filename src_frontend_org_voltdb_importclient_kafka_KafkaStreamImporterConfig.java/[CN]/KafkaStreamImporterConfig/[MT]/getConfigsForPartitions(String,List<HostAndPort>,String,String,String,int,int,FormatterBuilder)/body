{
  SimpleConsumer consumer=null;
  Map<URI,KafkaStreamImporterConfig> configs=new HashMap<>();
  List<FailedMetaDataAttempt> attempts=new ArrayList<>();
  Iterator<HostAndPort> hpitr=brokerList.iterator();
  while (configs.isEmpty() && hpitr.hasNext()) {
    HostAndPort hp=hpitr.next();
    try {
      consumer=new SimpleConsumer(hp.getHost(),hp.getPort(),soTimeout,fetchSize,CLIENT_ID);
      TopicMetadataRequest req=new TopicMetadataRequest(singletonList(topic));
      kafka.javaapi.TopicMetadataResponse resp=consumer.send(req);
      List<TopicMetadata> metaData=resp.topicsMetadata();
      if (metaData == null) {
        attempts.add(new FailedMetaDataAttempt("Failed to get topic metadata for topic " + topic + " from host "+ hp.getHost(),null));
        continue;
      }
      int partitionCount=0;
      for (      TopicMetadata item : metaData) {
        for (        PartitionMetadata part : item.partitionsMetadata()) {
          ++partitionCount;
          URI uri;
          try {
            uri=new URI("kafka",key,topic + "/partition/" + part.partitionId());
          }
 catch (          URISyntaxException ex) {
            throw new KafkaConfigurationException("unable to create topic resource URI",ex);
          }
          Broker leader=part.leader();
          if (leader == null) {
            attempts.add(new FailedMetaDataAttempt("Failed to get leader broker for topic " + topic + " partition "+ part.partitionId()+ " from host "+ hp.getHost(),null));
            continue;
          }
          KafkaStreamImporterConfig config=new KafkaStreamImporterConfig(uri,brokerList,topic,part.partitionId(),new HostAndPort(leader.host(),leader.port()),groupId,fetchSize,soTimeout,procedure,formatterBuilder);
          configs.put(uri,config);
        }
      }
      if (configs.size() != partitionCount) {
        configs.clear();
        continue;
      }
    }
 catch (    Exception e) {
      attempts.add(new FailedMetaDataAttempt("Failed to send topic metadata request for topic " + topic + " from host "+ hp.getHost(),e));
      continue;
    }
 finally {
      closeConsumer(consumer);
    }
  }
  if (!attempts.isEmpty()) {
    for (    FailedMetaDataAttempt attempt : attempts) {
      attempt.log();
    }
    attempts.clear();
    if (configs.isEmpty()) {
      throw new KafkaConfigurationException("Failed to get topic metadata for %s",topic);
    }
  }
  return configs;
}
