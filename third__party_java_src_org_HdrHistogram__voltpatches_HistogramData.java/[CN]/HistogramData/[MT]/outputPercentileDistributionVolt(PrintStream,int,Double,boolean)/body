{
  if (useCsvFormat) {
    printStream.format("\"Value\",\"Percentile\",\"TotalCount\"\n");
  }
 else {
    printStream.format("%12s %14s %10s\n\n","Value","Percentile","TotalCount");
  }
  PercentileIterator iterator=percentileIterator;
  iterator.reset(percentileTicksPerHalfDistance);
  String percentileFormatString;
  String lastLinePercentileFormatString;
  if (useCsvFormat) {
    percentileFormatString="%." + histogram.numberOfSignificantValueDigits + "f,%.12f,%d\n";
    lastLinePercentileFormatString="%." + histogram.numberOfSignificantValueDigits + "f,%.12f,%d\n";
  }
 else {
    percentileFormatString="%12." + histogram.numberOfSignificantValueDigits + "f %2.12f %10d\n";
    lastLinePercentileFormatString="%12." + histogram.numberOfSignificantValueDigits + "f %2.12f\n";
  }
  try {
    while (iterator.hasNext()) {
      HistogramIterationValue iterationValue=iterator.next();
      if (iterationValue.getPercentileLevelIteratedTo() != 100.0D) {
        printStream.format(Locale.US,percentileFormatString,iterationValue.getValueIteratedTo() / outputValueUnitScalingRatio,iterationValue.getPercentileLevelIteratedTo() / 100.0D,iterationValue.getCountAddedInThisIterationStep());
      }
 else {
        printStream.format(Locale.US,lastLinePercentileFormatString,iterationValue.getValueIteratedTo() / outputValueUnitScalingRatio,iterationValue.getPercentileLevelIteratedTo() / 100.0D,iterationValue.getCountAddedInThisIterationStep());
      }
    }
    if (!useCsvFormat) {
      double mean=getMean() / outputValueUnitScalingRatio;
      double std_deviation=getStdDeviation() / outputValueUnitScalingRatio;
      printStream.format(Locale.US,"#[Mean    = %12." + histogram.numberOfSignificantValueDigits + "f, StdDeviation   = %12."+ histogram.numberOfSignificantValueDigits+ "f]\n",mean,std_deviation);
      printStream.format(Locale.US,"#[Max     = %12." + histogram.numberOfSignificantValueDigits + "f, Total count    = %12d]\n",getMaxValue() / outputValueUnitScalingRatio,getTotalCount());
      printStream.format(Locale.US,"#[Buckets = %12d, SubBuckets     = %12d]\n",histogram.bucketCount,histogram.subBucketCount);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    if (histogram.hasOverflowed()) {
      printStream.format(Locale.US,"# Histogram counts indicate OVERFLOW values");
    }
 else {
      throw e;
    }
  }
}
