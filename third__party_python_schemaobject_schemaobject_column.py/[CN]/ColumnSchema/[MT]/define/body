def define(self, after=None, with_comment=False):
    '\n        Generate the SQL for this column definition.\n\n        ``after`` is the name(string) of the column this should appear after.\n        If ``after`` is None, ``FIRST`` is used.\n\n        ``with_comment`` boolean, add column comment to sql statement\n\n          >>> schema.databases[\'sakila\'].tables[\'rental\'].columns[\'last_update\'].define(after="staff_id")\n          \'`last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP AFTER `staff_id`\'\n          >>> schema.databases[\'sakila\'].tables[\'rental\'].columns[\'rental_id\'].define()\n          \'`rental_id` INT(11) NOT NULL auto_increment FIRST\'\n        '
    sql = []
    sql.append(('`%s` %s' % (self.field, self.type)))
    if (self.collation and self.charset and ((self.parent.options['charset'].value != self.charset) or (self.parent.options['collation'].value != self.collation))):
        sql.append(('CHARACTER SET %s COLLATE %s' % (self.charset, self.collation)))
    if (not self.null):
        sql.append('NOT NULL')
    else:
        sql.append('NULL')
    if ((self.default != None) and isinstance(self.default, basestring) and (self.default != 'CURRENT_TIMESTAMP')):
        sql.append(("DEFAULT '%s'" % self.default))
    elif (self.default != None):
        sql.append(('DEFAULT %s' % self.default))
    if self.extra:
        sql.append(self.extra)
    if (with_comment and self.comment):
        sql.append(("COMMENT '%s'" % self.comment))
    if after:
        sql.append(('AFTER `%s`' % after))
    else:
        sql.append('FIRST')
    return ' '.join(sql)
