{
  m_currentConfig=pathConfigFile;
  BufferedReader reader=new BufferedReader(new FileReader(pathConfigFile));
  String line=null;
  while ((line=reader.readLine()) != null) {
    if (line.startsWith("#")) {
      continue;
    }
 else     if (line.equalsIgnoreCase("Name:")) {
      line=reader.readLine();
      m_testName=line;
    }
 else     if (line.equalsIgnoreCase("Ref:")) {
      line=reader.readLine();
      m_pathRefPlan=new File(line).getCanonicalPath();
      m_pathRefPlan+="/";
    }
 else     if (line.equalsIgnoreCase("DDL:")) {
      line=reader.readLine();
      m_pathDDL=new File(line).getCanonicalPath();
    }
 else     if (line.equalsIgnoreCase("Base Name:")) {
      line=reader.readLine();
      m_baseName=line;
    }
 else     if (line.equalsIgnoreCase("SQL:")) {
      m_stmts.clear();
      m_numSQL=0;
      while ((line=reader.readLine()).length() > 6) {
        if (line.startsWith("#")) {
          continue;
        }
        m_stmts.add(line);
      }
      m_numSQL=m_stmts.size();
    }
 else     if (line.equalsIgnoreCase("Save Path:")) {
      line=reader.readLine();
      m_savePlanPath=new File(line).getCanonicalPath();
      m_savePlanPath+="/";
    }
 else     if (line.equalsIgnoreCase("Partition Columns:")) {
      line=reader.readLine();
      int index=line.indexOf(".");
      if (index == -1) {
        System.err.println("Config file syntax error : Partition Columns should be table.column");
      }
      Pair<String,String> p=new Pair<String,String>(line.substring(0,index),line.substring(index + 1));
      m_partitionColumns.add(p);
    }
  }
  try {
    setUpSchema();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
