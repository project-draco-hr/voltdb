{
  m_treeSizeDiff=0;
  boolean noDiff=true;
  ArrayList<String> messages=new ArrayList<String>();
  ArrayList<AbstractPlanNode> list1=oldpn1.getLists();
  ArrayList<AbstractPlanNode> list2=newpn2.getLists();
  int size1=list1.size();
  int size2=list2.size();
  m_treeSizeDiff=size1 - size2;
  diffPair intdiffPair=new diffPair(0,0);
  diffPair stringdiffPair=new diffPair(null,null);
  if (size1 != size2) {
    intdiffPair.set(size1,size2);
    messages.add("Plan tree size diff: " + intdiffPair.toString());
  }
  if (!m_changedSQL) {
    if (m_treeSizeDiff < 0) {
      messages.add("Old plan might be better");
    }
 else     if (m_treeSizeDiff > 0) {
      messages.add("New plan might be better");
    }
  }
  Map<Integer,AbstractPlanNode> projNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> projNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> limitNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> limitNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> orderByNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> orderByNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> projInlineNodes1=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> projInlineNodes2=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> limitInlineNodes1=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> limitInlineNodes2=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> orderByInlineNodes1=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> orderByInlineNodes2=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> indexScanInlineNodes1=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  Map<AbstractPlanNode,AbstractPlanNode> indexScanInlineNodes2=new LinkedHashMap<AbstractPlanNode,AbstractPlanNode>();
  for (int i=0; i < size1; i++) {
    AbstractPlanNode pn=list1.get(i);
    int id=pn.getPlanNodeId();
    int pnTypeValue=pn.getPlanNodeType().getValue();
    if (pnTypeValue == PlanNodeType.PROJECTION.getValue()) {
      projNodes1.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.LIMIT.getValue()) {
      limitNodes1.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.ORDERBY.getValue()) {
      orderByNodes1.put(id,pn);
    }
    if (pn.getInlinePlanNode(PlanNodeType.PROJECTION) != null) {
      projInlineNodes1.put(pn,pn.getInlinePlanNode(PlanNodeType.PROJECTION));
    }
    if (pn.getInlinePlanNode(PlanNodeType.LIMIT) != null) {
      limitInlineNodes1.put(pn,pn.getInlinePlanNode(PlanNodeType.LIMIT));
    }
    if (pn.getInlinePlanNode(PlanNodeType.ORDERBY) != null) {
      orderByInlineNodes1.put(pn,pn.getInlinePlanNode(PlanNodeType.ORDERBY));
    }
    if (pn.getInlinePlanNode(PlanNodeType.INDEXSCAN) != null) {
      indexScanInlineNodes1.put(pn,pn.getInlinePlanNode(PlanNodeType.INDEXSCAN));
    }
  }
  for (int i=0; i < size2; i++) {
    AbstractPlanNode pn=list2.get(i);
    int id=pn.getPlanNodeId();
    int pnTypeValue=pn.getPlanNodeType().getValue();
    if (pnTypeValue == PlanNodeType.PROJECTION.getValue()) {
      projNodes2.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.LIMIT.getValue()) {
      limitNodes2.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.ORDERBY.getValue()) {
      orderByNodes2.put(id,pn);
    }
    if (pn.getInlinePlanNode(PlanNodeType.PROJECTION) != null) {
      projInlineNodes2.put(pn,pn.getInlinePlanNode(PlanNodeType.PROJECTION));
    }
    if (pn.getInlinePlanNode(PlanNodeType.LIMIT) != null) {
      limitInlineNodes2.put(pn,pn.getInlinePlanNode(PlanNodeType.LIMIT));
    }
    if (pn.getInlinePlanNode(PlanNodeType.ORDERBY) != null) {
      orderByInlineNodes2.put(pn,pn.getInlinePlanNode(PlanNodeType.ORDERBY));
    }
    if (pn.getInlinePlanNode(PlanNodeType.INDEXSCAN) != null) {
      indexScanInlineNodes2.put(pn,pn.getInlinePlanNode(PlanNodeType.INDEXSCAN));
    }
  }
  ArrayList<Integer> indexList=new ArrayList<Integer>();
  ArrayList<AbstractPlanNode> parentNodeList=new ArrayList<AbstractPlanNode>();
  for (  AbstractPlanNode index : projInlineNodes1.keySet()) {
    parentNodeList.add(index);
  }
  String info=getKeyInfo(parentNodeList);
  stringdiffPair.setFirst(info);
  parentNodeList.clear();
  for (  AbstractPlanNode index : projInlineNodes2.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setSecond(info);
  if (!stringdiffPair.equals()) {
    messages.add("Inline Projection Nodes diff: \n" + stringdiffPair.toString());
  }
  parentNodeList.clear();
  for (  AbstractPlanNode index : limitInlineNodes1.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setFirst(info);
  parentNodeList.clear();
  for (  AbstractPlanNode index : limitInlineNodes2.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setSecond(info);
  if (!stringdiffPair.equals()) {
    messages.add("Inline Limit Nodes diff: \n" + stringdiffPair.toString());
  }
  parentNodeList.clear();
  for (  AbstractPlanNode index : limitInlineNodes1.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setFirst(info);
  parentNodeList.clear();
  for (  AbstractPlanNode index : limitInlineNodes2.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setSecond(info);
  if (!stringdiffPair.equals()) {
    messages.add("Inline OrderBy Nodes diff: \n" + stringdiffPair.toString());
  }
  parentNodeList.clear();
  for (  AbstractPlanNode index : limitInlineNodes1.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setFirst(info);
  parentNodeList.clear();
  for (  AbstractPlanNode index : limitInlineNodes2.keySet()) {
    parentNodeList.add(index);
  }
  info=getKeyInfo(parentNodeList);
  stringdiffPair.setSecond(info);
  if (!stringdiffPair.equals()) {
    messages.add("Inline IndexScan Nodes diff: \n" + stringdiffPair.toString());
  }
  parentNodeList.clear();
  for (  int index : projNodes1.keySet()) {
    indexList.add(index);
  }
  stringdiffPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : projNodes2.keySet()) {
    indexList.add(index);
  }
  stringdiffPair.setSecond(indexList.clone());
  if (!stringdiffPair.equals()) {
    messages.add("Projection Nodes diff: \n" + stringdiffPair.toString());
  }
  indexList.clear();
  for (  int index : limitNodes1.keySet()) {
    indexList.add(index);
  }
  stringdiffPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : limitNodes2.keySet()) {
    indexList.add(index);
  }
  stringdiffPair.setSecond(indexList.clone());
  if (!stringdiffPair.equals()) {
    messages.add("Limit Nodes diff: \n" + stringdiffPair.toString());
  }
  indexList.clear();
  for (  int index : orderByNodes1.keySet()) {
    indexList.add(index);
  }
  stringdiffPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : orderByNodes2.keySet()) {
    indexList.add(index);
  }
  stringdiffPair.setSecond(indexList.clone());
  if (!stringdiffPair.equals()) {
    messages.add("Order By Nodes diff: \n" + stringdiffPair.toString());
  }
  indexList.clear();
  ArrayList<AbstractPlanNode> joinNodes1=getJoinNodes(list1);
  ArrayList<AbstractPlanNode> joinNodes2=getJoinNodes(list2);
  size1=joinNodes1.size();
  size2=joinNodes2.size();
  if (size1 != size2) {
    intdiffPair.set(size1,size2);
    messages.add("Join Nodes Number diff:\n" + intdiffPair.toString() + "\nSQL statement might be changed.");
    m_changedSQL=true;
    String str1="";
    String str2="";
    for (    AbstractPlanNode pn : joinNodes1) {
      str1=str1 + pn.getPlanNodeType() + ", ";
    }
    for (    AbstractPlanNode pn : joinNodes2) {
      str2=str2 + pn.getPlanNodeType() + ", ";
    }
    if (str1.length() > 1) {
      str1.subSequence(0,str1.length() - 2);
    }
    if (str2.length() > 1) {
      str2.subSequence(0,str2.length() - 2);
    }
    stringdiffPair.set(str1,str2);
  }
 else {
    for (    AbstractPlanNode pn1 : joinNodes1) {
      for (      AbstractPlanNode pn2 : joinNodes2) {
        PlanNodeType pnt1=pn1.getPlanNodeType();
        PlanNodeType pnt2=pn2.getPlanNodeType();
        if (!pnt1.equals(pnt2)) {
          stringdiffPair.set(pnt1 + " at " + pn1.getPlanNodeId(),pnt2 + " at " + pn2.getPlanNodeId());
          messages.add("Join Node Type diff:\n" + stringdiffPair.toString());
        }
      }
    }
  }
  for (  String msg : messages) {
    if (msg.contains("diff") || msg.contains("Diff")) {
      m_diffMessages.add(msg);
      noDiff=false;
    }
  }
  return noDiff;
}
