{
  m_treeSizeDiff=0;
  ArrayList<AbstractPlanNode> list1=oldpn1.getLists();
  ArrayList<AbstractPlanNode> list2=newpn2.getLists();
  int size1=list1.size();
  int size2=list2.size();
  m_treeSizeDiff=size1 - size2;
  Pair intPair=new Pair(0,0);
  Pair stringPair=new Pair(null,null);
  if (size1 != size2) {
    intPair.set(size1,size2);
    System.out.println("Plan tree size diff: ");
    System.out.println(intPair.toString());
  }
  if (!m_changedSQL) {
    if (m_treeSizeDiff < 0) {
      System.out.println("Old plan might be better");
    }
 else     if (m_treeSizeDiff > 0) {
      System.out.println("New plan might be better");
    }
  }
  Map<Integer,AbstractPlanNode> projNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> projNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> limitNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> limitNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> orderByNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> orderByNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> projInlineNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> projInlineNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> limitInlineNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> limitInlineNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> orderByInlineNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> orderByInlineNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> indexScanInlineNodes1=new LinkedHashMap<Integer,AbstractPlanNode>();
  Map<Integer,AbstractPlanNode> indexScanInlineNodes2=new LinkedHashMap<Integer,AbstractPlanNode>();
  for (int i=0; i < size1; i++) {
    AbstractPlanNode pn=list1.get(i);
    int id=pn.getPlanNodeId();
    int pnTypeValue=pn.getPlanNodeType().getValue();
    if (pnTypeValue == PlanNodeType.PROJECTION.getValue()) {
      projNodes1.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.LIMIT.getValue()) {
      limitNodes1.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.ORDERBY.getValue()) {
      orderByNodes1.put(id,pn);
    }
    if (pn.getInlinePlanNode(PlanNodeType.PROJECTION) != null) {
      projInlineNodes1.put(id,pn.getInlinePlanNode(PlanNodeType.PROJECTION));
    }
    if (pn.getInlinePlanNode(PlanNodeType.LIMIT) != null) {
      limitInlineNodes1.put(id,pn.getInlinePlanNode(PlanNodeType.LIMIT));
    }
    if (pn.getInlinePlanNode(PlanNodeType.ORDERBY) != null) {
      orderByInlineNodes1.put(id,pn.getInlinePlanNode(PlanNodeType.ORDERBY));
    }
    if (pn.getInlinePlanNode(PlanNodeType.INDEXSCAN) != null) {
      indexScanInlineNodes1.put(id,pn.getInlinePlanNode(PlanNodeType.INDEXSCAN));
    }
  }
  for (int i=0; i < size2; i++) {
    AbstractPlanNode pn=list2.get(i);
    int id=pn.getPlanNodeId();
    int pnTypeValue=pn.getPlanNodeType().getValue();
    if (pnTypeValue == PlanNodeType.PROJECTION.getValue()) {
      projNodes2.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.LIMIT.getValue()) {
      limitNodes2.put(id,pn);
    }
 else     if (pnTypeValue == PlanNodeType.ORDERBY.getValue()) {
      orderByNodes2.put(id,pn);
    }
    if (pn.getInlinePlanNode(PlanNodeType.PROJECTION) != null) {
      projInlineNodes2.put(id,pn.getInlinePlanNode(PlanNodeType.PROJECTION));
    }
    if (pn.getInlinePlanNode(PlanNodeType.LIMIT) != null) {
      limitInlineNodes2.put(id,pn.getInlinePlanNode(PlanNodeType.LIMIT));
    }
    if (pn.getInlinePlanNode(PlanNodeType.ORDERBY) != null) {
      orderByInlineNodes2.put(id,pn.getInlinePlanNode(PlanNodeType.ORDERBY));
    }
    if (pn.getInlinePlanNode(PlanNodeType.INDEXSCAN) != null) {
      indexScanInlineNodes2.put(id,pn.getInlinePlanNode(PlanNodeType.INDEXSCAN));
    }
  }
  ArrayList<Integer> indexList=new ArrayList<Integer>();
  for (  int index : projInlineNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : projInlineNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Inline Projection Nodes diff: ");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
  for (  int index : limitInlineNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : limitInlineNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Inline Limit Nodes diff: ");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
  for (  int index : orderByInlineNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : orderByInlineNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Inline Order By Node diff: ");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
  for (  int index : indexScanInlineNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : indexScanInlineNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Inline IndexScan Node diff: ");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
  for (  int index : projNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : projNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Projection Node diff: ");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
  for (  int index : limitNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : limitNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Limit Node diff: ");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
  for (  int index : orderByNodes1.keySet()) {
    indexList.add(index);
  }
  stringPair.setFirst(indexList.clone());
  indexList.clear();
  for (  int index : orderByNodes2.keySet()) {
    indexList.add(index);
  }
  stringPair.setSecond(indexList.clone());
  if (!stringPair.equals()) {
    System.out.println("Order By Node diff:");
    System.out.println(stringPair.toString());
  }
  indexList.clear();
}
