{
  m_changedSQL=false;
  boolean noDiff=true;
  ArrayList<AbstractScanPlanNode> list1=oldpn.getScanNodeList();
  ArrayList<AbstractScanPlanNode> list2=newpn.getScanNodeList();
  int size1=list1.size();
  int size2=list2.size();
  int max=Math.max(size1,size2);
  int min=Math.min(size1,size2);
  diffPair intdiffPair=new diffPair(0,0);
  ArrayList<String> messages=new ArrayList<String>();
  AbstractScanPlanNode spn1=null;
  AbstractScanPlanNode spn2=null;
  if (max == 0) {
    messages.add("0 scan statement");
  }
 else {
    if (size1 != size2) {
      intdiffPair.set(size1,size2);
      messages.add("Scan time diff : " + "\n" + intdiffPair.toString() + "\n"+ "SQL statement might be changed");
      m_changedSQL=true;
      for (int i=0; i < min; i++) {
        spn1=list1.get(i);
        spn2=list2.get(i);
        scanNodeDiffModule(i,spn1,spn2,messages);
      }
      if (size2 < max) {
        for (int i=min; i < max; i++) {
          spn1=list1.get(i);
          spn2=null;
          scanNodeDiffModule(i,spn1,spn2,messages);
        }
      }
 else       if (size1 < max) {
        for (int i=min; i < max; i++) {
          spn1=null;
          spn2=list2.get(i);
          scanNodeDiffModule(i,spn1,spn2,messages);
        }
      }
    }
 else {
      messages.add("same leaf size");
      if (max == 1) {
        messages.add("Single scan plan");
        spn1=list1.get(0);
        spn2=list2.get(0);
        scanNodeDiffModule(0,spn1,spn2,messages);
      }
 else {
        messages.add("Join query");
        for (int i=0; i < max; i++) {
          spn1=list1.get(i);
          spn2=list2.get(i);
          scanNodeDiffModule(i,spn1,spn2,messages);
        }
      }
    }
  }
  for (  String msg : messages) {
    if (msg.contains("diff") || msg.contains("Diff")) {
      noDiff=false;
      break;
    }
  }
  m_diffMessages.addAll(messages);
  return noDiff;
}
