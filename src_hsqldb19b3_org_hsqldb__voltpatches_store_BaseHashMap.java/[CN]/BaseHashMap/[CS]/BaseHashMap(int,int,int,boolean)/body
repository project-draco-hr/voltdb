{
  if (initialCapacity <= 0) {
    throw new IllegalArgumentException();
  }
  this.loadFactor=1;
  this.initialCapacity=initialCapacity;
  threshold=initialCapacity;
  if (threshold < 3) {
    threshold=3;
  }
  int hashtablesize=(int)(initialCapacity * loadFactor);
  if (hashtablesize < 3) {
    hashtablesize=3;
  }
  hashIndex=new HashIndex(hashtablesize,initialCapacity,true);
  int arraySize=threshold;
  if (keyType == BaseHashMap.intKeyOrValue) {
    isIntKey=true;
    intKeyTable=new int[arraySize];
  }
 else   if (keyType == BaseHashMap.objectKeyOrValue) {
    isObjectKey=true;
    objectKeyTable=new Object[arraySize];
  }
 else {
    isLongKey=true;
    longKeyTable=new long[arraySize];
  }
  if (valueType == BaseHashMap.intKeyOrValue) {
    isIntValue=true;
    intValueTable=new int[arraySize];
  }
 else   if (valueType == BaseHashMap.objectKeyOrValue) {
    isObjectValue=true;
    objectValueTable=new Object[arraySize];
  }
 else   if (valueType == BaseHashMap.longKeyOrValue) {
    isLongValue=true;
    longValueTable=new long[arraySize];
  }
 else {
    isNoValue=true;
  }
  if (hasAccessCount) {
    accessTable=new int[arraySize];
  }
}
