{
  for (int i=0; i < rangeVariables.length; i++) {
    HsqlArrayList list=array[i];
    map.clear();
    set.clear();
    boolean hasChain=false;
    for (int j=0; j < list.size(); j++) {
      Expression e=(Expression)list.get(j);
      if (!e.isColumnEqual || e.getLeftNode().getRangeVariable() == e.getRightNode().getRangeVariable()) {
        continue;
      }
      if (e.getLeftNode().getRangeVariable() == rangeVariables[i]) {
        map.put(e.getLeftNode().getColumn(),e.getRightNode());
        if (!set.add(e.getLeftNode().getColumn())) {
          hasChain=true;
        }
      }
 else {
        map.put(e.getRightNode().getColumn(),e.getLeftNode());
        if (!set.add(e.getRightNode().getColumn())) {
          hasChain=true;
        }
      }
    }
    if (hasChain && !(hasOuterJoin && isJoin)) {
      Iterator keyIt=map.keySet().iterator();
      while (keyIt.hasNext()) {
        Object key=keyIt.next();
        Iterator it=map.get(key);
        set.clear();
        while (it.hasNext()) {
          set.add(it.next());
        }
        while (set.size() > 1) {
          Expression e1=(Expression)set.remove(set.size() - 1);
          for (int j=0; j < set.size(); j++) {
            Expression e2=(Expression)set.get(j);
            closeJoinChain(array,e1,e2);
          }
        }
      }
    }
  }
}
