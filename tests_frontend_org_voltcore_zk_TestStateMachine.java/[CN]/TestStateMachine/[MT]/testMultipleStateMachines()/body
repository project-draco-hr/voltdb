{
  log.info("Starting testMultipleStateMachines");
  try {
    BooleanStateMachine g1i0=m_booleanStateMachinesForGroup1[0];
    BooleanStateMachine g2i0=m_booleanStateMachinesForGroup2[0];
    ByteStateMachine g2j0=m_byteStateMachinesForGroup2[0];
    for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
      m_stateMachineGroup2[ii].registerStateMachine(m_booleanStateMachinesForGroup2[ii],bsm_states[0]);
      m_stateMachineGroup2[ii].registerStateMachine(m_byteStateMachinesForGroup2[ii],msm_states[0]);
    }
    while (!boolsInitialized(m_booleanStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup2));
    while (!bytesInitialized(m_byteStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(bytesSynchronized(m_byteStateMachinesForGroup2));
    boolean oldBoolVal=g2i0.state;
    byte oldByteVal=g2j0.state;
    g2i0.switchState();
    g2j0.switchState();
    for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
      m_stateMachineGroup1[ii].registerStateMachine(m_booleanStateMachinesForGroup1[ii],bsm_states[0]);
    }
    while (!g1i0.initialized) {
      Thread.yield();
    }
    g1i0.switchState();
    while (!g1i0.ourProposalFinished) {
      Thread.yield();
    }
    boolean unboxedExpectedState=rawBooleanStates[1];
    assertTrue(g1i0.state == unboxedExpectedState);
    int waitLoop=0;
    for (; waitLoop < 10; waitLoop++) {
      if (boolsInitialized(m_booleanStateMachinesForGroup1) && boolsSynchronized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(waitLoop < 10);
    for (int ii=0; ii < 10; ii++) {
      if (g2i0.ourProposalFinished && g2j0.ourProposalFinished && boolsSynchronized(m_booleanStateMachinesForGroup2)&& bytesSynchronized(m_byteStateMachinesForGroup2)) {
        break;
      }
      Thread.sleep(500);
    }
    assertFalse(g2i0.state == oldBoolVal);
    assertFalse(g2j0.state == oldByteVal);
  }
 catch (  Exception e) {
    fail("Exception occured during test.");
  }
}
