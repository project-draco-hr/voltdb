{
  log.info("Starting testMultipleStateMachines");
  try {
    BooleanStateMachine g1i0=m_booleanStateMachinesForGroup1[0];
    BooleanStateMachine g2i0=m_booleanStateMachinesForGroup2[0];
    ByteStateMachine g2j0=m_byteStateMachinesForGroup2[0];
    ByteStateMachine g2j1=m_byteStateMachinesForGroup2[1];
    for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
      m_booleanStateMachinesForGroup2[ii].registerStateMachineWithManager(bsm_states[0]);
      m_byteStateMachinesForGroup2[ii].registerStateMachineWithManager(msm_states[0]);
    }
    while (!boolsInitialized(m_booleanStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup2));
    while (!bytesInitialized(m_byteStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(bytesSynchronized(m_byteStateMachinesForGroup2));
    g2j0.switchState();
    g2i0.switchState();
    g2j1.switchState();
    for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
      m_booleanStateMachinesForGroup1[ii].registerStateMachineWithManager(bsm_states[0]);
    }
    int waitLoop=0;
    for (; waitLoop < 10; waitLoop++) {
      if (boolsInitialized(m_booleanStateMachinesForGroup1) && boolsSynchronized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(waitLoop < 10);
    g1i0.switchState();
    waitLoop=0;
    for (; waitLoop < 10; waitLoop++) {
      if (boolProposalOrTaskFinished(m_booleanStateMachinesForGroup2,1) && boolsSynchronized(m_booleanStateMachinesForGroup2) && byteProposalOrTaskFinished(m_byteStateMachinesForGroup2,2)&& bytesSynchronized(m_byteStateMachinesForGroup2)&& boolProposalOrTaskFinished(m_booleanStateMachinesForGroup1,1)&& boolsSynchronized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(waitLoop < 10);
    assertTrue(g2i0.state);
    assertTrue(g2j0.state == rawByteStates[2]);
    assertTrue(g1i0.state);
  }
 catch (  Exception e) {
    fail("Exception occured during test.");
  }
}
