{
  log.info("Starting testAllLateJoiners");
  try {
    BooleanStateMachine i0=m_booleanStateMachinesForGroup1[0];
    BooleanStateMachine i1=m_booleanStateMachinesForGroup1[1];
    BooleanStateMachine i2=m_booleanStateMachinesForGroup1[2];
    BooleanStateMachine i3=m_booleanStateMachinesForGroup1[3];
    m_booleanStateMachinesForGroup1[0]=null;
    m_booleanStateMachinesForGroup1[2]=null;
    m_booleanStateMachinesForGroup1[3]=null;
    m_stateMachineGroup1[1].registerStateMachine(i1);
    while (!boolsInitialized(m_booleanStateMachinesForGroup1)) {
      Thread.sleep(500);
    }
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup1));
    boolean newVal=!i1.state;
    i1.switchState();
    for (int ii=0; ii < 10; ii++) {
      if (i1.ourProposalFinished && boolsSynchronized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(i1.state == newVal);
    m_booleanStateMachinesForGroup1[0]=i0;
    m_booleanStateMachinesForGroup1[2]=i2;
    m_booleanStateMachinesForGroup1[3]=i3;
    m_stateMachineGroup1[0].registerStateMachine(i0);
    m_stateMachineGroup1[2].registerStateMachine(i2);
    m_stateMachineGroup1[3].registerStateMachine(i3);
    for (int ii=0; ii < 10; ii++) {
      if (boolsInitialized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(boolsInitialized(m_booleanStateMachinesForGroup1));
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup1));
    assertTrue(i0.state == newVal);
  }
 catch (  InterruptedException e) {
  }
}
