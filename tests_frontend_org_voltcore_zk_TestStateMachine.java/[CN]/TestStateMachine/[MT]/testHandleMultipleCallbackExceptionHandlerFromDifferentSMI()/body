{
  log.info("Starting testHandleMultipleCallbackExceptionHandlerFromDifferentSMI");
  for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
    removeStateMachinesFor(ii);
  }
  addStateMachinesFor(0,false,true,true);
  for (int ii=1; ii < NUM_AGREEMENT_SITES; ii++) {
    addStateMachinesFor(ii);
  }
  try {
    BrokenBooleanStateMachine g2i0=(BrokenBooleanStateMachine)m_booleanStateMachinesForGroup2[0];
    g2i0.brokenCallbackName="stateChangeProposed";
    BooleanStateMachine g2i1=m_booleanStateMachinesForGroup2[1];
    BrokenByteStateMachine g2j0=(BrokenByteStateMachine)m_byteStateMachinesForGroup2[0];
    g2j0.brokenCallbackName="stateChangeProposed";
    ByteStateMachine g2j1=m_byteStateMachinesForGroup2[1];
    for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
      m_booleanStateMachinesForGroup2[ii].registerStateMachineWithManager(bsm_states[0]);
      m_byteStateMachinesForGroup2[ii].registerStateMachineWithManager(msm_states[0]);
    }
    while (!boolsInitialized(m_booleanStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup2));
    while (!bytesInitialized(m_byteStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(bytesSynchronized(m_byteStateMachinesForGroup2));
    g2i1.switchState();
    g2j1.switchState();
    int waitLoop=0;
    for (; waitLoop < 5; waitLoop++) {
      if (boolProposalOrTaskFinished(m_booleanStateMachinesForGroup2,1) && boolsSynchronized(m_booleanStateMachinesForGroup2)) {
        break;
      }
      Thread.sleep(500);
    }
    assertEquals(5,waitLoop);
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup2));
    assertTrue(g2i0.state);
    assertTrue(g2i0.notifiedOfReset);
    assertTrue(g2i0.getResetCounter() == 1 || g2i0.getResetCounter() == 2);
    assertTrue(bytesSynchronized(m_byteStateMachinesForGroup2));
    assertEquals(rawByteStates[1],g2j0.state);
    assertTrue(g2j0.notifiedOfReset);
    assertEquals(g2i0.getResetCounter(),g2j0.getResetCounter());
    assertTrue(g2i0.isDirectVictim ^ g2j0.isDirectVictim);
  }
 catch (  Exception e) {
    fail("Exception occurred during test.");
  }
}
