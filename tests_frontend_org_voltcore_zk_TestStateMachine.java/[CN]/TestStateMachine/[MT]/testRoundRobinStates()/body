{
  log.info("Starting testRoundRobinStates");
  try {
    ByteStateMachine i0=m_byteStateMachinesForGroup2[0];
    ByteStateMachine i1=m_byteStateMachinesForGroup2[1];
    ByteStateMachine i2=m_byteStateMachinesForGroup2[2];
    ByteStateMachine i3=m_byteStateMachinesForGroup2[3];
    for (int ii=0; ii < NUM_AGREEMENT_SITES; ii++) {
      m_stateMachineGroup2[ii].registerStateMachine(m_booleanStateMachinesForGroup2[ii]);
      m_stateMachineGroup2[ii].registerStateMachine(m_byteStateMachinesForGroup2[ii]);
    }
    while (!bytesInitialized(m_byteStateMachinesForGroup2)) {
      Thread.sleep(500);
    }
    assertTrue(bytesSynchronized(m_byteStateMachinesForGroup2));
    i0.switchState();
    for (int ii=0; ii < 10; ii++) {
      if (i0.ourProposalFinished && bytesSynchronized(m_byteStateMachinesForGroup2)) {
        break;
      }
      Thread.sleep(500);
    }
    assert(i0.state == rawByteStates[1]);
    i1.switchState();
    i2.switchState();
    i3.switchState();
    i0.switchState();
    for (int ii=0; ii < 10; ii++) {
      if (i0.ourProposalFinished && boolsSynchronized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(i2.state == rawByteStates[2]);
  }
 catch (  Exception e) {
  }
}
