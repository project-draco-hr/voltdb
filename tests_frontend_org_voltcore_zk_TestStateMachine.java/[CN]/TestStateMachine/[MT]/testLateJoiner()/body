{
  log.info("Starting testLateJoiner");
  try {
    BooleanStateMachine i0=m_booleanStateMachinesForGroup1[0];
    BooleanStateMachine i1=m_booleanStateMachinesForGroup1[1];
    m_booleanStateMachinesForGroup1[1]=null;
    m_stateMachineGroup1[0].registerStateMachine(m_booleanStateMachinesForGroup1[0]);
    m_stateMachineGroup1[2].registerStateMachine(m_booleanStateMachinesForGroup1[2]);
    m_stateMachineGroup1[3].registerStateMachine(m_booleanStateMachinesForGroup1[3]);
    while (!boolsInitialized(m_booleanStateMachinesForGroup1)) {
      Thread.sleep(500);
    }
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup1));
    boolean newVal=!i0.state;
    i0.switchState();
    for (int ii=0; ii < 10; ii++) {
      if (i0.ourProposalFinished && boolsSynchronized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(i0.state == newVal);
    m_booleanStateMachinesForGroup1[1]=i1;
    m_stateMachineGroup1[1].registerStateMachine(i1);
    for (int ii=0; ii < 10; ii++) {
      if (boolsInitialized(m_booleanStateMachinesForGroup1)) {
        break;
      }
      Thread.sleep(500);
    }
    assertTrue(boolsInitialized(m_booleanStateMachinesForGroup1));
    assertTrue(boolsSynchronized(m_booleanStateMachinesForGroup1));
  }
 catch (  InterruptedException e) {
  }
}
