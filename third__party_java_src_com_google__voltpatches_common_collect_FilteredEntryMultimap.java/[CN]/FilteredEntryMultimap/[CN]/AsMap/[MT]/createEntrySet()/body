{
@WeakOuter class EntrySetImpl extends Maps.EntrySet<K,Collection<V>> {
    @Override Map<K,Collection<V>> map(){
      return AsMap.this;
    }
    @Override public Iterator<Entry<K,Collection<V>>> iterator(){
      return new AbstractIterator<Entry<K,Collection<V>>>(){
        final Iterator<Entry<K,Collection<V>>> backingIterator=unfiltered.asMap().entrySet().iterator();
        @Override protected Entry<K,Collection<V>> computeNext(){
          while (backingIterator.hasNext()) {
            Entry<K,Collection<V>> entry=backingIterator.next();
            K key=entry.getKey();
            Collection<V> collection=filterCollection(entry.getValue(),new ValuePredicate(key));
            if (!collection.isEmpty()) {
              return Maps.immutableEntry(key,collection);
            }
          }
          return endOfData();
        }
      }
;
    }
    @Override public boolean removeAll(    Collection<?> c){
      return removeEntriesIf(in(c));
    }
    @Override public boolean retainAll(    Collection<?> c){
      return removeEntriesIf(not(in(c)));
    }
    @Override public int size(){
      return Iterators.size(iterator());
    }
  }
  return new EntrySetImpl();
}
