{
  return new Multisets.EntrySet<K>(){
    @Override Multiset<K> multiset(){
      return Keys.this;
    }
    @Override public Iterator<Multiset.Entry<K>> iterator(){
      return Keys.this.entryIterator();
    }
    @Override public int size(){
      return FilteredEntryMultimap.this.keySet().size();
    }
    private boolean removeEntriesIf(    final Predicate<? super Multiset.Entry<K>> predicate){
      return FilteredEntryMultimap.this.removeEntriesIf(new Predicate<Map.Entry<K,Collection<V>>>(){
        @Override public boolean apply(        Map.Entry<K,Collection<V>> entry){
          return predicate.apply(Multisets.immutableEntry(entry.getKey(),entry.getValue().size()));
        }
      }
);
    }
    @Override public boolean removeAll(    Collection<?> c){
      return removeEntriesIf(in(c));
    }
    @Override public boolean retainAll(    Collection<?> c){
      return removeEntriesIf(not(in(c)));
    }
  }
;
}
