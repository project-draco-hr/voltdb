{
  super(e.dataType.isDateTimeTypeWithZone() ? OpTypes.CAST : OpTypes.ZONE_MODIFIER);
switch (e.dataType.typeCode) {
case Types.SQL_TIME_WITH_TIME_ZONE:
    nodes=new Expression[UNARY];
  nodes[LEFT]=new ExpressionOp(OpTypes.ZONE_MODIFIER,e,null);
dataType=DateTimeType.getDateTimeType(Types.SQL_TIME,e.dataType.scale);
break;
case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:
nodes=new Expression[UNARY];
nodes[LEFT]=new ExpressionOp(OpTypes.ZONE_MODIFIER,e,null);
dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,e.dataType.scale);
break;
case Types.SQL_TIME:
nodes=new Expression[BINARY];
nodes[LEFT]=e;
dataType=DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,e.dataType.scale);
break;
case Types.SQL_TIMESTAMP:
nodes=new Expression[BINARY];
nodes[LEFT]=e;
dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP_WITH_TIME_ZONE,e.dataType.scale);
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
this.alias=e.alias;
}
