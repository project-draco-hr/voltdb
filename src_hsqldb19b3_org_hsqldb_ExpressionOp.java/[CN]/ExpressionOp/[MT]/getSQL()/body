{
  StringBuffer sb=new StringBuffer(64);
  String left=getContextSQL(nodes.length > 0 ? nodes[LEFT] : null);
  String right=getContextSQL(nodes.length > 1 ? nodes[RIGHT] : null);
switch (opType) {
case OpTypes.VALUE:
    if (valueData == null) {
      return Tokens.T_NULL;
    }
  if (dataType == null) {
    throw Error.runtimeError(ErrorCode.U_S0500,"Expression.getSQL()");
  }
return dataType.convertToSQLString(valueData);
case OpTypes.CAST:
sb.append(' ').append(Tokens.T_CAST).append('(');
sb.append(left).append(' ').append(Tokens.T_AS).append(' ');
sb.append(dataType.getTypeDefinition());
sb.append(')');
return sb.toString();
case OpTypes.CASEWHEN:
sb.append(' ').append(Tokens.T_CASEWHEN).append('(');
sb.append(left).append(',').append(right).append(')');
return sb.toString();
case OpTypes.ALTERNATIVE:
sb.append(left).append(',').append(right);
return sb.toString();
case OpTypes.LIMIT:
sb.append(' ').append(Tokens.T_OFFSET).append(' ');
sb.append(left).append(' ');
sb.append(Tokens.T_FETCH).append(' ').append(Tokens.T_FIRST);
sb.append(right).append(' ').append(right).append(' ');
sb.append(Tokens.T_ROWS).append(' ').append(Tokens.T_ONLY);
sb.append(' ');
break;
case OpTypes.ZONE_MODIFIER:
sb.append(left).append(' ').append(Tokens.T_AT).append(' ');
if (nodes[RIGHT] == null) {
sb.append(Tokens.T_LOCAL).append(' ');
break;
}
sb.append(right);
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
return sb.toString();
}
