{
  List<String> children=m_zk.getChildren("/mailboxes/executionsites",new Watcher(){
    @Override public void process(    WatchedEvent event){
      try {
        getAndWatchSites();
      }
 catch (      Exception e) {
        log.error(e.getMessage());
      }
    }
  }
);
  Map<Integer,ArrayList<Long>> hostsToSites=new HashMap<Integer,ArrayList<Long>>();
  Map<Integer,ArrayList<Long>> partitionsToSites=new HashMap<Integer,ArrayList<Long>>();
  Map<Long,Integer> sitesToPartitions=new HashMap<Long,Integer>();
  for (  String child : children) {
    byte[] data=m_zk.getData(child,false,null);
    JSONObject jsObj=new JSONObject(new String(data,"UTF-8"));
    try {
      long HSId=jsObj.getLong("HSId");
      int partitionId=jsObj.getInt("partitionId");
      int hostId=MiscUtils.getHostIdFromHSId(HSId);
      ArrayList<Long> sites=new ArrayList<Long>();
      hostsToSites.put(hostId,sites);
      sites.add(HSId);
      sites=new ArrayList<Long>();
      partitionsToSites.put(partitionId,sites);
      sites.add(HSId);
      sitesToPartitions.put(HSId,partitionId);
    }
 catch (    JSONException e) {
      log.error(e.getMessage());
    }
  }
  m_hostsToSites=hostsToSites;
  m_partitionsToSites=partitionsToSites;
  m_sitesToPartitions=sitesToPartitions;
}
