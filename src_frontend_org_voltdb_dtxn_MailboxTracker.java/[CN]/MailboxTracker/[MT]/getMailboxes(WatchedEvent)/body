{
  Set<String> mailboxes;
  boolean isParentWatch=false;
  if (event != null) {
    String path=event.getPath();
    if (path != null) {
      isParentWatch=event.getPath().equals(VoltZK.mailboxes);
    }
 else {
      System.out.println("In MailboxTracker Path was null for ZK event " + event);
    }
  }
  if (event == null || isParentWatch) {
    mailboxes=new TreeSet<String>(m_zk.getChildren(VoltZK.mailboxes,m_watcher));
  }
 else {
    mailboxes=new TreeSet<String>(m_zk.getChildren(VoltZK.mailboxes,false));
  }
  Set<String> newChildren=new HashSet<String>(mailboxes);
  if (isParentWatch) {
    if (m_lastChildren != null) {
      if (m_lastChildren.equals(mailboxes)) {
        return;
      }
    }
  }
  newChildren.removeAll(m_lastChildren);
  m_lastChildren=mailboxes;
  List<ByteArrayCallback> callbacks=new ArrayList<ByteArrayCallback>();
  for (  String mailboxSet : mailboxes) {
    ByteArrayCallback cb=new ByteArrayCallback();
    if (event == null || event.getPath().equals(VoltZK.mailboxes + "/" + mailboxSet) || newChildren.contains(mailboxSet)) {
      m_zk.getData(ZKUtil.joinZKPath(VoltZK.mailboxes,mailboxSet),m_watcher,cb,null);
    }
 else {
      m_zk.getData(ZKUtil.joinZKPath(VoltZK.mailboxes,mailboxSet),false,cb,null);
    }
    callbacks.add(cb);
  }
  MessageDigest digest=MessageDigest.getInstance("SHA-1");
  Map<MailboxType,List<MailboxNodeContent>> mailboxMap=new HashMap<MailboxType,List<MailboxNodeContent>>();
  for (  ByteArrayCallback callback : callbacks) {
    try {
      byte payload[]=callback.getData();
      digest.update(payload);
      JSONObject jsObj=new JSONObject(new String(payload,"UTF-8"));
      readContents(jsObj,mailboxMap);
    }
 catch (    KeeperException.NoNodeException e) {
    }
  }
  byte digestBytes[]=digest.digest();
  if (m_lastChecksum != null && Arrays.equals(m_lastChecksum,digestBytes)) {
    return;
  }
  m_lastChecksum=digestBytes;
  m_handler.handleMailboxUpdate(mailboxMap);
}
