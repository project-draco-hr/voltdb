{
  List<String> children=m_zk.getChildren(VoltZK.mailboxes_initiators,new Watcher(){
    @Override public void process(    WatchedEvent event){
      try {
        getAndWatchInitiators();
      }
 catch (      Exception e) {
        log.error(e.getMessage());
      }
    }
  }
);
  Map<Integer,ArrayList<Long>> hostsToInitiators=new HashMap<Integer,ArrayList<Long>>();
  for (  String child : children) {
    byte[] data=m_zk.getData(VoltZK.mailboxes_initiators + child,false,null);
    JSONObject jsObj=new JSONObject(new String(data,"UTF-8"));
    try {
      long HSId=jsObj.getLong("HSId");
      int hostId=MiscUtils.getHostIdFromHSId(HSId);
      ArrayList<Long> initiators=hostsToInitiators.get(hostId);
      if (initiators == null) {
        initiators=new ArrayList<Long>();
        hostsToInitiators.put(hostId,initiators);
      }
      initiators.add(HSId);
    }
 catch (    JSONException e) {
      log.error(e.getMessage());
    }
  }
  m_hostsToInitiators=hostsToInitiators;
}
