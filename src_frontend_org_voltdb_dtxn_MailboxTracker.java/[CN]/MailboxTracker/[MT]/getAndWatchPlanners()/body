{
  List<String> children=m_zk.getChildren(VoltZK.mailboxes_asyncplanners,new Watcher(){
    @Override public void process(    WatchedEvent event){
      try {
        getAndWatchPlanners();
      }
 catch (      Exception e) {
        log.error(e.getMessage());
      }
    }
  }
);
  Map<Integer,Long> hostsToPlanners=new HashMap<Integer,Long>();
  for (  String child : children) {
    byte[] data=m_zk.getData(VoltZK.mailboxes_asyncplanners + "/" + child,false,null);
    JSONObject jsObj=new JSONObject(new String(data,"UTF-8"));
    try {
      long HSId=jsObj.getLong("HSId");
      hostsToPlanners.put(MiscUtils.getHostIdFromHSId(HSId),HSId);
    }
 catch (    JSONException e) {
      log.error(e.getMessage());
    }
  }
  m_hostsToPlanners=hostsToPlanners;
}
