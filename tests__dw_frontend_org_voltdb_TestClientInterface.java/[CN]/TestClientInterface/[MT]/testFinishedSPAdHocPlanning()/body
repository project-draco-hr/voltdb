{
  String query="select * from a where i = ?";
  int partitionParamIndex=0;
  Object[] extractedValues=new Object[0];
  VoltType[] paramTypes=new VoltType[]{VoltType.INTEGER};
  AdHocPlannedStmtBatch plannedStmtBatch=AdHocPlannedStmtBatch.mockStatementBatch(3,query,extractedValues,paramTypes,new Object[]{3},partitionParamIndex);
  m_ci.processFinishedCompilerWork(plannedStmtBatch).run();
  ArgumentCaptor<Long> destinationCaptor=ArgumentCaptor.forClass(Long.class);
  ArgumentCaptor<Iv2InitiateTaskMessage> messageCaptor=ArgumentCaptor.forClass(Iv2InitiateTaskMessage.class);
  verify(m_messenger).send(destinationCaptor.capture(),messageCaptor.capture());
  Iv2InitiateTaskMessage message=messageCaptor.getValue();
  assertTrue(message.isReadOnly());
  assertTrue(message.isSinglePartition());
  assertEquals("@AdHoc_RO_SP",message.getStoredProcedureName());
  Object partitionParam=message.getStoredProcedureInvocation().getParameterAtIndex(0);
  assertTrue(partitionParam instanceof byte[]);
  VoltType type=VoltType.get((Byte)message.getStoredProcedureInvocation().getParameterAtIndex(1));
  assertTrue(type.isInteger());
  byte[] serializedData=(byte[])message.getStoredProcedureInvocation().getParameterAtIndex(2);
  ByteBuffer buf=ByteBuffer.wrap(serializedData);
  Object[] parameters=AdHocPlannedStmtBatch.userParamsFromBuffer(buf);
  assertEquals(1,parameters.length);
  assertEquals(3,parameters[0]);
  AdHocPlannedStatement[] statements=AdHocPlannedStmtBatch.planArrayFromBuffer(buf);
  assertTrue(Arrays.equals(TheHashinator.valueToBytes(3),(byte[])partitionParam));
  assertEquals(1,statements.length);
  String sql=new String(statements[0].sql,Constants.UTF8ENCODING);
  assertEquals(query,sql);
}
