{
  String query="select * from a";
  Object[] extractedValues=new Object[0];
  VoltType[] paramTypes=new VoltType[0];
  AdHocPlannedStmtBatch plannedStmtBatch=AdHocPlannedStmtBatch.mockStatementBatch(3,query,extractedValues,paramTypes,null,-1);
  m_ci.processFinishedCompilerWork(plannedStmtBatch).run();
  ArgumentCaptor<Long> destinationCaptor=ArgumentCaptor.forClass(Long.class);
  ArgumentCaptor<Iv2InitiateTaskMessage> messageCaptor=ArgumentCaptor.forClass(Iv2InitiateTaskMessage.class);
  verify(m_messenger).send(destinationCaptor.capture(),messageCaptor.capture());
  Iv2InitiateTaskMessage message=messageCaptor.getValue();
  assertTrue(message.isReadOnly());
  assertFalse(message.isSinglePartition());
  assertEquals("@AdHoc_RO_MP",message.getStoredProcedureName());
  byte[] serializedData=(byte[])message.getStoredProcedureInvocation().getParameterAtIndex(0);
  ByteBuffer buf=ByteBuffer.wrap(serializedData);
  Object[] parameters=AdHocPlannedStmtBatch.userParamsFromBuffer(buf);
  assertEquals(0,parameters.length);
  AdHocPlannedStatement[] statements=AdHocPlannedStmtBatch.planArrayFromBuffer(buf);
  assertEquals(1,statements.length);
  String sql=new String(statements[0].sql,Constants.UTF8ENCODING);
  assertEquals(query,sql);
}
