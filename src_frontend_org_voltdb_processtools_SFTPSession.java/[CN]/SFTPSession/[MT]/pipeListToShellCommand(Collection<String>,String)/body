{
  Preconditions.checkArgument(command != null && !command.trim().isEmpty(),"specified empty or null command string");
  Preconditions.checkState(m_channel != null,"stale session");
  ChannelExec e=null;
  BufferedReader sherr=null;
  BufferedReader shout=null;
  List<String> shellout=new ArrayList<String>();
  try {
    try {
      e=(ChannelExec)m_channel.getSession().openChannel("exec");
    }
 catch (    JSchException jex) {
      throw new SSHException("opening ssh exec channel",jex);
    }
    try {
      shout=new BufferedReader(new InputStreamReader(e.getInputStream(),Charsets.UTF_8));
    }
 catch (    IOException ioex) {
      throw new SSHException("geting exec channel input stream",ioex);
    }
    try {
      sherr=new BufferedReader(new InputStreamReader(e.getErrStream(),Charsets.UTF_8));
    }
 catch (    IOException ioex) {
      throw new SSHException("getting exec channel error stream",ioex);
    }
    if (list != null && !list.isEmpty()) {
      e.setInputStream(listAsInputStream(list));
    }
    e.setCommand(command);
    try {
      e.connect(5000);
      int retries=50;
      while (!e.isClosed() && retries-- > 0) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ignoreIt) {
        }
      }
      if (retries < 0) {
        throw new SSHException("'" + command + "' timed out");
      }
    }
 catch (    JSchException jex) {
      throw new SSHException("executing '" + command + "'",jex);
    }
    try {
      String outputLine=shout.readLine();
      while (outputLine != null) {
        shellout.add(outputLine);
        outputLine=shout.readLine();
      }
    }
 catch (    IOException ioex) {
      throw new SSHException("capturing '" + command + "' output",ioex);
    }
    if (e.getExitStatus() != 0) {
      try {
        String errorLine=sherr.readLine();
        while (errorLine != null) {
          shellout.add(errorLine);
          errorLine=sherr.readLine();
        }
      }
 catch (      IOException ioex) {
        throw new SSHException("capturing '" + command + "' error",ioex);
      }
      throw new SSHException("error output from '" + command + "':\n\t"+ join(shellout,"\n\t"));
    }
    if (m_log.isDebugEnabled()) {
      m_log.debug("SSH: " + command);
    }
  }
  finally {
    if (sherr != null)     try {
      sherr.close();
    }
 catch (    Exception ignoreIt) {
    }
    if (shout != null)     try {
      shout.close();
    }
 catch (    Exception ignoreIt) {
    }
  }
  return shellout;
}
