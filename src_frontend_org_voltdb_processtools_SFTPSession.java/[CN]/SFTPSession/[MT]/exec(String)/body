{
  ChannelExec channel=null;
  BufferedReader outStrBufRdr=null;
  BufferedReader errStrBufRdr=null;
  StringBuilder result=new StringBuilder(2048);
  try {
    try {
      channel=(ChannelExec)m_session.openChannel("exec");
    }
 catch (    JSchException jex) {
      throw new SSHException("opening ssh exec channel",jex);
    }
    try {
      InputStream out=channel.getInputStream();
      InputStreamReader outStrRdr=new InputStreamReader(out,"UTF-8");
      outStrBufRdr=new BufferedReader(outStrRdr);
    }
 catch (    IOException ioex) {
      throw new SSHException("geting exec channel input stream",ioex);
    }
    try {
      InputStream err=channel.getErrStream();
      InputStreamReader errStrRdr=new InputStreamReader(err,"UTF-8");
      errStrBufRdr=new BufferedReader(errStrRdr);
    }
 catch (    IOException ioex) {
      throw new SSHException("getting exec channel error stream",ioex);
    }
    channel.setCommand(command);
    StringBuffer stdout=new StringBuffer();
    StringBuffer stderr=new StringBuffer();
    try {
      channel.connect(5000);
      int retries=50;
      while (!channel.isClosed() && retries-- > 0) {
        int ch;
        try {
          while (outStrBufRdr.ready() && (ch=outStrBufRdr.read()) > -1) {
            stdout.append((char)ch);
          }
        }
 catch (        IOException ioex) {
          throw new SSHException("capturing '" + command + "' output",ioex);
        }
        try {
          while (errStrBufRdr.ready() && (ch=errStrBufRdr.read()) > -1) {
            stderr.append((char)ch);
          }
        }
 catch (        IOException ioex) {
          throw new SSHException("capturing '" + command + "' error",ioex);
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ignoreIt) {
        }
      }
      if (retries < 0) {
        throw new SSHException("'" + command + "' timed out");
      }
    }
 catch (    JSchException jex) {
      throw new SSHException("executing '" + command + "'",jex);
    }
    int ch;
    try {
      while ((ch=outStrBufRdr.read()) > -1) {
        stdout.append((char)ch);
      }
    }
 catch (    IOException ioex) {
      throw new SSHException("capturing '" + command + "' output",ioex);
    }
    try {
      while ((ch=errStrBufRdr.read()) > -1) {
        stderr.append((char)ch);
      }
    }
 catch (    IOException ioex) {
      throw new SSHException("capturing '" + command + "' error",ioex);
    }
    result.append(stdout.toString());
    result.append(stderr.toString());
    channel.disconnect();
  }
  finally {
    if (outStrBufRdr != null)     try {
      outStrBufRdr.close();
    }
 catch (    Exception ignoreIt) {
    }
    if (errStrBufRdr != null)     try {
      errStrBufRdr.close();
    }
 catch (    Exception ignoreIt) {
    }
  }
  return result.toString();
}
