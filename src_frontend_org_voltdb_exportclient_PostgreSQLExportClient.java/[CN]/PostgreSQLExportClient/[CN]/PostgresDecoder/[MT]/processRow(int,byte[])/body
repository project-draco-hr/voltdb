{
  m_logger.debug("In processRow for table " + m_source.tableName);
  Object[] row=null;
  try {
    row=decodeRow(rowData);
  }
 catch (  IOException e) {
    m_logger.error("Unable to decode row for table: " + m_source.tableName);
    return false;
  }
  try {
    for (int i=0; i < m_source.columnTypes.size(); i++) {
      if (row[i] == null) {
        pstmt.setNull(i + 1,Types.NULL);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.DECIMAL) {
        pstmt.setBigDecimal(i + 1,(BigDecimal)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.TINYINT) {
        pstmt.setByte(i + 1,(Byte)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.SMALLINT) {
        pstmt.setShort(i + 1,(Short)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.INTEGER) {
        pstmt.setInt(i + 1,(Integer)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.BIGINT) {
        pstmt.setLong(i + 1,(Long)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.FLOAT) {
        pstmt.setDouble(i + 1,(Double)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.STRING) {
        pstmt.setString(i + 1,(String)row[i]);
      }
 else       if (m_source.columnTypes.get(i) == VoltType.TIMESTAMP) {
        TimestampType timestamp=(TimestampType)row[i];
        pstmt.setTimestamp(i + 1,timestamp.asJavaTimestamp());
      }
 else       if (m_source.columnTypes.get(i) == VoltType.VARBINARY) {
        byte[] bytes=(byte[])row[i];
        pstmt.setBytes(i + 1,bytes);
      }
    }
    try {
      pstmt.executeUpdate();
    }
 catch (    SQLException e) {
      m_logger.error("executeUpdate() failed in processRow() for table " + m_source.tableName);
      return false;
    }
  }
 catch (  Exception e) {
    m_logger.error("processRow() failed in table " + m_source.tableName);
    return false;
  }
  return true;
}
