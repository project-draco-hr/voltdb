{
  try {
    int pool=0;
    String procedure="";
    int threadCount=0;
    long rate=0;
    boolean async=false;
    boolean shareConnection=false;
    long displayInterval=10l;
    long duration=120l;
    String serverList="localhost";
    int port=21212;
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (arg.startsWith("--procedure="))       procedure=arg.split("=")[1];
 else       if (arg.startsWith("--pool="))       pool=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--threads="))       threadCount=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--rate="))       rate=Long.valueOf(arg.split("=")[1]);
 else       if (arg.equals("--async"))       async=true;
 else       if (arg.equals("--share-connection"))       shareConnection=true;
 else       if (arg.startsWith("--display-interval="))       displayInterval=Long.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--duration="))       duration=Long.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--servers="))       serverList=arg.split("=")[1];
 else       if (arg.startsWith("--port="))       port=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.equals("--help")) {
        printUsage();
        System.exit(0);
      }
 else {
        System.err.println("Invalid Usage.");
        printUsage();
        System.exit(-1);
      }
    }
    if ((pool <= 0) || (procedure == "") || (threadCount <= 0)|| (rate <= 0)) {
      System.err.println("Invalid Usage.");
      printUsage();
      System.exit(-1);
    }
    String[] servers=serverList.split(",");
    System.out.printf("-------------------------------------------------------------------------------------\n" + "       Procedure: %s\n" + "        PoolSize: %d\n"+ "         Threads: %d (%s)\n"+ "      Connection: %s\n"+ "  Rate (/Thread): %d TPS\n"+ "        Feedback: Every %,d second(s)\n"+ "        Duration: %,d second(s)\n"+ "         Servers: %s\n"+ "            Port: %d\n"+ "-------------------------------------------------------------------------------------\n",procedure,pool,threadCount,(async ? "Async" : "Sync"),(shareConnection ? "Shared" : "One-per-Thread"),rate,displayInterval,duration,serverList,port);
    AppMonitor monitor=new AppMonitor(duration * 1000l,displayInterval * 1000l);
    Client client=shareConnection ? ClientExtensions.GetClient(servers,port) : null;
    ArrayList<Thread> threads=new ArrayList<Thread>();
    for (int i=0; i < threadCount; i++) {
      threads.add(new Thread(async ? new AsyncClient(monitor,shareConnection ? client : ClientExtensions.GetClient(servers,port),rate,pool,procedure) : new SyncClient(monitor,shareConnection ? client : ClientExtensions.GetClient(servers,port),rate,pool,procedure)));
    }
    for (    Thread thread : threads)     thread.start();
    for (    Thread thread : threads)     thread.join();
    monitor.stop();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(-1);
  }
}
