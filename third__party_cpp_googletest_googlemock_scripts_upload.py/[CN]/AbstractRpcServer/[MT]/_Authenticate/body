def _Authenticate(self):
    'Authenticates the user.\n\n    The authentication process works as follows:\n     1) We get a username and password from the user\n     2) We use ClientLogin to obtain an AUTH token for the user\n        (see http://code.google.com/apis/accounts/AuthForInstalledApps.html).\n     3) We pass the auth token to /_ah/login on the server to obtain an\n        authentication cookie. If login was successful, it tries to redirect\n        us to the URL we provided.\n\n    If we attempt to access the upload API without first obtaining an\n    authentication cookie, it returns a 401 response and directs us to\n    authenticate ourselves with ClientLogin.\n    '
    for i in range(3):
        credentials = self.auth_function()
        try:
            auth_token = self._GetAuthToken(credentials[0], credentials[1])
        except ClientLoginError as e:
            if (e.reason == 'BadAuthentication'):
                print  >> sys.stderr, 'Invalid username or password.'
                continue
            if (e.reason == 'CaptchaRequired'):
                print  >> sys.stderr, 'Please go to\nhttps://www.google.com/accounts/DisplayUnlockCaptcha\nand verify you are a human.  Then try again.'
                break
            if (e.reason == 'NotVerified'):
                print  >> sys.stderr, 'Account not verified.'
                break
            if (e.reason == 'TermsNotAgreed'):
                print  >> sys.stderr, 'User has not agreed to TOS.'
                break
            if (e.reason == 'AccountDeleted'):
                print  >> sys.stderr, 'The user account has been deleted.'
                break
            if (e.reason == 'AccountDisabled'):
                print  >> sys.stderr, 'The user account has been disabled.'
                break
            if (e.reason == 'ServiceDisabled'):
                print  >> sys.stderr, "The user's access to the service has been disabled."
                break
            if (e.reason == 'ServiceUnavailable'):
                print  >> sys.stderr, 'The service is not available; try again later.'
                break
            raise
        self._GetAuthCookie(auth_token)
        return
