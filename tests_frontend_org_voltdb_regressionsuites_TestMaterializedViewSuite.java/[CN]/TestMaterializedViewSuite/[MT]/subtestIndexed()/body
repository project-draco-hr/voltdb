{
  Client client=getClient();
  truncateBeforeTest(client);
  VoltTable[] results=null;
  results=client.callProcedure("AggAges",1).getResults();
  assertEquals(1,results.length);
  assertEquals(0,results[0].getRowCount());
  assert(results != null);
  results=client.callProcedure("AddPerson",1,1L,31L,1000.0,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",1,2L,31L,1000.0,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",1,3L,33L,28920.99,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",2,4L,23L,1000.0,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",2,5L,35L,1000.0,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",2,6L,35L,1000.0,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",2,7L,23L,1000.0,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("AddPerson",2,8L,31L,2222.22,3,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("UpdatePerson",1,2L,32L,1000.0,3).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  results=client.callProcedure("DeletePerson",2,6L,NORMALLY).getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  int totalRows;
  results=client.callProcedure("INDEXED_FIRST_GROUP").getResults();
  assert(results != null);
  assertEquals(1,results.length);
  totalRows=results[0].getRowCount();
  assertEquals(1,totalRows);
  results[0].advanceRow();
  assertEquals(33L,results[0].getLong(0));
  assertEquals(28920.99,results[0].getDouble(1),0.001);
  results=client.callProcedure("INDEXED_MAX_GROUP").getResults();
  assert(results != null);
  assertEquals(1,results.length);
  totalRows=results[0].getRowCount();
  assertEquals(1,totalRows);
  results[0].advanceRow();
  assertEquals(28920.99,results[0].getDouble(0),0.001);
  results=client.callProcedure("INDEXED_MAX_IN_GROUPS",31L).getResults();
  assert(results != null);
  assertEquals(1,results.length);
  totalRows=results[0].getRowCount();
  assertEquals(1,totalRows);
  results[0].advanceRow();
  assertEquals(2222.22,results[0].getDouble(0),0.001);
  results=client.callProcedure("INDEXED_GROUPS").getResults();
  assert(results != null);
  totalRows=results[0].getRowCount();
  assertEquals(6,totalRows);
  results[0].advanceRow();
  assertEquals(23L,results[0].getLong(0));
  assertEquals(2000.0,results[0].getDouble(1),0.001);
  results[0].advanceRow();
  assertEquals(31L,results[0].getLong(0));
  assertEquals(1000.0,results[0].getDouble(1),0.001);
  results[0].advanceRow();
  assertEquals(31L,results[0].getLong(0));
  assertEquals(2222.22,results[0].getDouble(1),0.001);
  results[0].advanceRow();
  assertEquals(32L,results[0].getLong(0));
  assertEquals(1000.00,results[0].getDouble(1),0.001);
  long timestampInitializer;
  int ii;
  int delay=0;
  timestampInitializer=(System.currentTimeMillis() + (++delay)) * 1000;
  results=client.callProcedure("CONTEST.insert","Senior",timestampInitializer,"Boston","Jack").getResults();
  assertEquals(1,results.length);
  assertEquals(1L,results[0].asScalarLong());
  for (ii=0; ii < 4; ++ii) {
    timestampInitializer=(System.currentTimeMillis() + (++delay)) * 1000;
    results=client.callProcedure("CONTEST.insert","Senior",timestampInitializer,"Cambridge","anonymous " + ii).getResults();
    assertEquals(1,results.length);
    assertEquals(1L,results[0].asScalarLong());
  }
  timestampInitializer=(System.currentTimeMillis() + (++delay)) * 1000;
  for (ii=0; ii < 3; ++ii) {
    results=client.callProcedure("CONTEST.insert","Senior",timestampInitializer,"Boston","not Jack " + ii).getResults();
    assertEquals(1,results.length);
    assertEquals(1L,results[0].asScalarLong());
  }
  timestampInitializer=(System.currentTimeMillis() + (++delay)) * 1000;
  for (ii=0; ii < 3; ++ii) {
    results=client.callProcedure("CONTEST.insert","Senior",timestampInitializer,"Concord","Emerson " + ii).getResults();
    assertEquals(1,results.length);
    assertEquals(1L,results[0].asScalarLong());
  }
  for (ii=0; ii < 2; ++ii) {
    timestampInitializer=(System.currentTimeMillis() + (++delay)) * 1000;
    results=client.callProcedure("CONTEST.insert","Senior",timestampInitializer,"Lexington","Luis " + ii).getResults();
    assertEquals(1,results.length);
    assertEquals(1L,results[0].asScalarLong());
  }
  if (!isHSQL()) {
    results=client.callProcedure("@AdHoc","SELECT team, total, finish FROM V_TEAM_TIMES " + "ORDER BY total DESC, 0-SINCE_EPOCH(MILLISECOND, finish) DESC").getResults();
    assertEquals(1,results.length);
    System.out.println(results[0]);
    assertEquals(9,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals("Boston",results[0].getString(0));
    assertEquals(3,results[0].getLong(1));
    results[0].advanceRow();
    assertEquals("Concord",results[0].getString(0));
    assertEquals(3,results[0].getLong(1));
    results[0].advanceToRow(8);
    assertEquals("Lexington",results[0].getString(0));
    assertEquals(1,results[0].getLong(1));
  }
  results=client.callProcedure("@AdHoc","SELECT count(*) FROM V_TEAM_MEMBERSHIP where total > 3 ").getResults();
  assertEquals(1,results.length);
  System.out.println(results[0]);
  assertEquals(2L,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","SELECT team, finish FROM V_TEAM_TIMES ORDER BY finish DESC limit 3").getResults();
  assertEquals(1,results.length);
  System.out.println(results[0]);
  assertEquals(3,results[0].getRowCount());
  results[0].advanceRow();
  assertEquals("Lexington",results[0].getString(0));
  results[0].advanceRow();
  assertEquals("Lexington",results[0].getString(0));
  results[0].advanceRow();
  assertEquals("Concord",results[0].getString(0));
}
