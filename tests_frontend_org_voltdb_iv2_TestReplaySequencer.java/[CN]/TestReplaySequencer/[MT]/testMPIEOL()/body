{
  ReplaySequencer dut=new ReplaySequencer();
  TransactionInfoBaseMessage init1=makeIv2InitTask(101L);
  TransactionInfoBaseMessage sentinel1=makeSentinel(1L);
  TransactionInfoBaseMessage init2=makeIv2InitTask(102L);
  TransactionInfoBaseMessage init3=makeIv2InitTask(103L);
  TransactionInfoBaseMessage sentinel2=makeSentinel(2L);
  TransactionInfoBaseMessage init4=makeIv2InitTask(104L);
  TransactionInfoBaseMessage init5=makeIv2InitTask(105L);
  Assert.assertFalse(dut.offer(101L,init1));
  Assert.assertNull(dut.poll());
  Assert.assertTrue(dut.offer(1L,sentinel1));
  Assert.assertNull(dut.poll());
  Assert.assertTrue(dut.offer(102L,init2));
  Assert.assertTrue(dut.offer(103L,init3));
  Assert.assertNull(dut.poll());
  Assert.assertTrue(dut.offer(2L,sentinel2));
  Assert.assertTrue(dut.offer(104L,init4));
  Assert.assertTrue(dut.offer(105L,init5));
  Assert.assertNull(dut.poll());
  Assert.assertNull(dut.drain());
  TransactionInfoBaseMessage frag1=makeFragment(1L);
  TransactionInfoBaseMessage complete1=makeCompleteTxn(1L);
  Assert.assertTrue(dut.offer(1L,frag1));
  Assert.assertEquals(frag1,dut.poll());
  Assert.assertEquals(init2,dut.poll());
  Assert.assertEquals(init3,dut.poll());
  Assert.assertNull(dut.poll());
  Assert.assertNull(dut.drain());
  Assert.assertFalse(dut.offer(1L,complete1));
  Assert.assertNull(dut.poll());
  Assert.assertNull(dut.drain());
  Assert.assertTrue(dut.offer(0L,makeMPIEOL()));
  Assert.assertNull(dut.poll());
  Assert.assertEquals(init4,dut.drain());
  Assert.assertEquals(init5,dut.drain());
  Assert.assertNull(dut.drain());
}
