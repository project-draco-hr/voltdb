{
  TransactionInfoBaseMessage sntl1=makeSentinel(1L);
  TransactionInfoBaseMessage frag1=makeFragment(1L);
  TransactionInfoBaseMessage cmpl1=makeCompleteTxn(1L);
  TransactionInfoBaseMessage sp1a=makeIv2InitTask(100L);
  TransactionInfoBaseMessage sp1b=makeIv2InitTask(101L);
  TransactionInfoBaseMessage sp1c=makeIv2InitTask(102L);
  TransactionInfoBaseMessage sp1d=makeIv2InitTask(103L);
  TransactionInfoBaseMessage sntl2=makeSentinel(2L);
  TransactionInfoBaseMessage frag2=makeFragment(2L);
  TransactionInfoBaseMessage cmpl2=makeCompleteTxn(2L);
  TransactionInfoBaseMessage sp2a=makeIv2InitTask(104L);
  TransactionInfoBaseMessage sp2b=makeIv2InitTask(105L);
  TransactionInfoBaseMessage sp2c=makeIv2InitTask(106L);
  TransactionInfoBaseMessage sp2d=makeIv2InitTask(107L);
  ReplaySequencer dut=new ReplaySequencer();
  dut.offer(1L,sntl1);
  dut.offer(100L,sp1a);
  dut.offer(101L,sp1b);
  dut.offer(102L,sp1c);
  dut.offer(103L,sp1d);
  dut.offer(2L,sntl2);
  dut.offer(104L,sp2a);
  dut.offer(105L,sp2b);
  dut.offer(106L,sp2c);
  dut.offer(107L,sp2d);
  Assert.assertEquals(null,dut.poll());
  Assert.assertNull(dut.drain());
  dut.offer(1L,frag1);
  dut.offer(1L,cmpl1);
  Assert.assertEquals(frag1,dut.poll());
  Assert.assertEquals(sp1a,dut.poll());
  Assert.assertEquals(sp1b,dut.poll());
  Assert.assertEquals(sp1c,dut.poll());
  Assert.assertEquals(sp1d,dut.poll());
  Assert.assertEquals(null,dut.poll());
  Assert.assertNull(dut.drain());
  dut.offer(2L,frag2);
  dut.offer(2L,cmpl2);
  Assert.assertEquals(frag2,dut.poll());
  Assert.assertEquals(sp2a,dut.poll());
  Assert.assertEquals(sp2b,dut.poll());
  Assert.assertEquals(sp2c,dut.poll());
  Assert.assertEquals(sp2d,dut.poll());
  Assert.assertEquals(null,dut.poll());
  Assert.assertNull(dut.drain());
}
