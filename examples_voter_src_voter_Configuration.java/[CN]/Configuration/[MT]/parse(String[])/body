{
  try {
    for (    Field field : getClass().getFields()) {
      if (field.isAnnotationPresent(Option.class) == false) {
        continue;
      }
      Option option=field.getAnnotation(Option.class);
      String opt=option.opt();
      if (opt == null)       opt=field.getName();
      options.addOption(opt,option.hasArg(),option.desc());
    }
    CommandLineParser parser=new GnuParser();
    CommandLine cmd=parser.parse(options,args);
    for (    Field field : getClass().getFields()) {
      if (field.isAnnotationPresent(Option.class) == false) {
        continue;
      }
      Option option=field.getAnnotation(Option.class);
      String opt=option.opt();
      if (opt == null)       opt=field.getName();
      if (cmd.hasOption(opt)) {
        if (option.hasArg()) {
          assignValueToField(field,cmd.getOptionValue(opt));
        }
 else {
          if (field.getClass().equals(boolean.class) || field.getClass().equals(Boolean.class)) {
            try {
              field.set(this,true);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            printUsage();
          }
        }
      }
 else {
        if (option.required()) {
          printUsage();
        }
      }
    }
    validate();
  }
 catch (  Exception e) {
    System.err.println("Parsing failed. Reason: " + e.getMessage());
    printUsage();
  }
}
