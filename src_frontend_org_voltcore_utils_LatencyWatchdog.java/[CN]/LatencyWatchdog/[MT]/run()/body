{
  Thread.currentThread().setName("Latency Watchdog");
  System.out.printf("Latency Watchdog enabled -- threshold:%d(ms) wakeup_interval:%d(ms) min_log_interval:%d(ms)\n",WATCHDOG_THRESHOLD,WAKEUP_INTERVAL,MIN_LOG_INTERVAL);
  while (true) {
    for (    Entry<Thread,AtomicLong> entry : sLatencyMap.entrySet()) {
      Thread t=entry.getKey();
      long timestamp=entry.getValue().get();
      long now=System.currentTimeMillis();
      if ((now - timestamp > WATCHDOG_THRESHOLD) && t.getState() != Thread.State.TERMINATED) {
        StringBuilder sb=new StringBuilder();
        sb.append(t.getName() + " has been delayed for more than " + WATCHDOG_THRESHOLD+ " milliseconds\n");
        for (        StackTraceElement ste : t.getStackTrace()) {
          sb.append(ste);
          sb.append("\n");
        }
        RateLimitedLogger.tryLogForMessage(sb.toString(),now,MIN_LOG_INTERVAL,TimeUnit.MILLISECONDS,LOG,Level.ERROR);
      }
    }
    try {
      Thread.sleep(WAKEUP_INTERVAL);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
