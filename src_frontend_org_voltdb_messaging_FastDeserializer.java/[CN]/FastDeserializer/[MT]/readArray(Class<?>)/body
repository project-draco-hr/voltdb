{
  final short count=readShort();
  if (type == byte.class) {
    final byte[] retval=new byte[count];
    for (int i=0; i < count; i++) {
      retval[i]=readByte();
    }
    return retval;
  }
  if (type == short.class) {
    final short[] retval=new short[count];
    for (int i=0; i < count; i++) {
      retval[i]=readShort();
    }
    return retval;
  }
  if (type == int.class) {
    final int[] retval=new int[count];
    for (int i=0; i < count; i++)     retval[i]=readInt();
    return retval;
  }
  if (type == long.class) {
    final long[] retval=new long[count];
    for (int i=0; i < count; i++)     retval[i]=readLong();
    return retval;
  }
  if (type == Long.class) {
    final Long[] retval=new Long[count];
    for (int i=0; i < count; i++)     retval[i]=readLong();
    return retval;
  }
  if (type == String.class) {
    final String[] retval=new String[count];
    for (int i=0; i < count; i++)     retval[i]=readString();
    return retval;
  }
  if (type == double.class) {
    final double[] retval=new double[count];
    for (int i=0; i < count; i++)     retval[i]=readDouble();
    return retval;
  }
  if (type == Double.class) {
    final Double[] retval=new Double[count];
    for (int i=0; i < count; i++)     retval[i]=readDouble();
    return retval;
  }
  if (type == TimestampType.class) {
    final TimestampType[] retval=new TimestampType[count];
    for (int i=0; i < count; i++)     retval[i]=new TimestampType(readLong());
    return retval;
  }
  if (type == BigDecimal.class) {
    final BigDecimal[] retval=new BigDecimal[count];
    for (int i=0; i < count; ++i) {
      retval[i]=readBigDecimal();
    }
    return retval;
  }
  @SuppressWarnings("unchecked") final Class<FastSerializable> cls=(Class<FastSerializable>)type;
  final FastSerializable[] retval=(FastSerializable[])Array.newInstance(type,count);
  for (int i=0; i < count; i++)   retval[i]=readObject(cls);
  return retval;
}
