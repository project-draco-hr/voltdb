{
  if (numberOfBinaryOrdersOfMagnitude < 0) {
    throw new IllegalArgumentException("Cannot shift by a negative number of magnitudes");
  }
  if (numberOfBinaryOrdersOfMagnitude == 0) {
    return;
  }
  if (getTotalCount() == getCountAtIndex(0)) {
    return;
  }
  final int shiftAmount=numberOfBinaryOrdersOfMagnitude << subBucketHalfCountMagnitude;
  int maxValueIndex=countsArrayIndex(getMaxValue());
  if (maxValueIndex >= (countsArrayLength - shiftAmount)) {
    throw new ArrayIndexOutOfBoundsException("Operation would overflow, would discard recorded value counts");
  }
  long maxValueBeforeShift=maxValueUpdater.getAndSet(this,0);
  long minNonZeroValueBeforeShift=minNonZeroValueUpdater.getAndSet(this,Long.MAX_VALUE);
  boolean lowestHalfBucketPopulated=(minNonZeroValueBeforeShift < subBucketHalfCount);
  shiftNormalizingIndexByOffset(shiftAmount,lowestHalfBucketPopulated);
  updateMinAndMax(maxValueBeforeShift << numberOfBinaryOrdersOfMagnitude);
  if (minNonZeroValueBeforeShift < Long.MAX_VALUE) {
    updateMinAndMax(minNonZeroValueBeforeShift << numberOfBinaryOrdersOfMagnitude);
  }
}
