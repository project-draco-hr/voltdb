{
  this.lowestDiscernibleValue=lowestDiscernibleValue;
  this.highestTrackableValue=highestTrackableValue;
  this.numberOfSignificantValueDigits=numberOfSignificantValueDigits;
  this.integerToDoubleValueConversionRatio=integerToDoubleValueConversionRatio;
  if (normalizingIndexOffset != 0) {
    setNormalizingIndexOffset(normalizingIndexOffset);
  }
  final long largestValueWithSingleUnitResolution=2 * (long)Math.pow(10,numberOfSignificantValueDigits);
  unitMagnitude=(int)Math.floor(Math.log(lowestDiscernibleValue) / Math.log(2));
  int subBucketCountMagnitude=(int)Math.ceil(Math.log(largestValueWithSingleUnitResolution) / Math.log(2));
  subBucketHalfCountMagnitude=((subBucketCountMagnitude > 1) ? subBucketCountMagnitude : 1) - 1;
  subBucketCount=(int)Math.pow(2,(subBucketHalfCountMagnitude + 1));
  subBucketHalfCount=subBucketCount / 2;
  subBucketMask=((long)subBucketCount - 1) << unitMagnitude;
  establishSize(highestTrackableValue);
  leadingZeroCountBase=64 - unitMagnitude - subBucketHalfCountMagnitude- 1;
  percentileIterator=new PercentileIterator(this,1);
  recordedValuesIterator=new RecordedValuesIterator(this);
}
