{
  StringBuffer modified_query=new StringBuffer();
  Matcher matcher=qt.m_queryPattern.matcher(query);
  int count=0;
  while (matcher.find()) {
    StringBuffer replaceText=new StringBuffer(qt.m_initialText);
    String wholeMatch=matcher.group();
    String lastGroup=wholeMatch;
    List<String> groups=new ArrayList<String>();
    if (qt.m_debugPrint) {
      if (count < 1) {
        System.out.println("In NonVoltDBBackend.transformQuery,\n  with query    : " + query);
        System.out.println("  queryPattern: " + qt.m_queryPattern);
        System.out.println("  initialText, prefix, suffix, useAltSuffixAfter, altSuffix; " + "replacementText; groupReplacementText(s):\n    '" + qt.m_initialText + "', '"+ qt.m_prefix+ "', '"+ qt.m_suffix+ "', '"+ qt.m_useAltSuffixAfter+ "', '"+ qt.m_altSuffix+ "'\n    '"+ qt.m_replacementText+ "'; "+ qt.m_groupReplacementTexts+ "\n  useWholeMatch, columnType, multiplier, minimum, debugPrint; groups:\n    "+ qt.m_useWholeMatch+ ", "+ qt.m_columnType+ ", "+ qt.m_multiplier+ ", "+ qt.m_minimum+ ", "+ qt.m_debugPrint+ "\n    "+ qt.m_groups);
      }
      System.out.println("  " + ++count + ".wholeMatch: "+ wholeMatch);
    }
    for (    String groupName : qt.m_groups) {
      String group=matcher.group(groupName);
      groups.add(group);
      if (qt.m_debugPrint) {
        System.out.println("    group     : " + group);
      }
      if (group == null) {
        continue;
      }
 else       if (!qt.m_useWholeMatch) {
        String groupValue=group, suffixValue=qt.m_suffix;
        if (qt.m_multiplier != null && qt.m_minimum != null) {
          groupValue=Long.toString(Math.round(Math.max(Integer.parseInt(group) * qt.m_multiplier,qt.m_minimum)));
        }
        if (qt.m_altSuffix != null && group.toUpperCase().endsWith(qt.m_useAltSuffixAfter)) {
          suffixValue=qt.m_altSuffix;
        }
        replaceText.append(handleParens(groupValue,qt.m_prefix,suffixValue));
      }
      lastGroup=group;
    }
    if (qt.m_debugPrint) {
      System.out.println("    lastGroup : " + lastGroup);
    }
    if (qt.m_useWholeMatch) {
      if (qt.m_columnType != null && ((qt.m_columnType == ColumnType.INTEGER && !isIntegerColumn(lastGroup)) || (qt.m_columnType == ColumnType.GEO && !isGeoColumn(lastGroup)))) {
        replaceText.append(wholeMatch);
      }
 else {
        if (qt.m_replacementText != null) {
          wholeMatch=wholeMatch.replace(lastGroup,qt.m_replacementText);
        }
        if (qt.m_groupReplacementTexts != null && !qt.m_groupReplacementTexts.isEmpty()) {
          for (int i=0; i < Math.min(groups.size(),qt.m_groupReplacementTexts.size()); i++) {
            if (groups.get(i) != null && qt.m_groupReplacementTexts.get(i) != null) {
              wholeMatch=wholeMatch.replaceFirst(groups.get(i),qt.m_groupReplacementTexts.get(i));
            }
          }
        }
        replaceText.append(replaceGroupNameVariables(handleParens(wholeMatch,qt.m_prefix,qt.m_suffix),qt.m_groups,groups));
      }
    }
    if (qt.m_debugPrint) {
      System.out.println("  replaceText : " + replaceText);
    }
    matcher.appendReplacement(modified_query,replaceText.toString());
  }
  matcher.appendTail(modified_query);
  if ((DEBUG || qt.m_debugPrint) && !query.equalsIgnoreCase(modified_query.toString())) {
    System.out.println("In NonVoltDBBackend.transformQuery,\n  with query    : " + query);
    System.out.println("  modified_query: " + modified_query);
  }
  return modified_query.toString();
}
