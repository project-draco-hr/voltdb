{
  StringBuilder sqlOut=new StringBuilder(stmt.getText().length() * 2);
  assert(paramJavaTypes != null);
  int lastIndex=0;
  String sql=stmt.getText();
  int paramCount=StringUtils.countMatches(sql,"?");
  if (paramCount == 0) {
    params=ParameterSet.emptyParameterSet();
    paramJavaTypes=new byte[0];
  }
  Object[] paramObjs=params.toArray();
  for (int i=0; i < paramObjs.length; i++) {
    int nextIndex=sql.indexOf('?',lastIndex);
    if (nextIndex == -1)     throw new RuntimeException("SQL Statement has more arguments than params.");
    sqlOut.append(sql,lastIndex,nextIndex);
    lastIndex=nextIndex + 1;
    VoltType type=VoltType.get(paramJavaTypes[i]);
    if (VoltType.isVoltNullValue(paramObjs[i])) {
      sqlOut.append("NULL");
    }
 else     if (paramObjs[i] instanceof TimestampType) {
      if (type != VoltType.TIMESTAMP)       throw new RuntimeException("Inserting date into mismatched column type in HSQL.");
      TimestampType d=(TimestampType)paramObjs[i];
      Timestamp t=new Timestamp(d.getTime() / 1000);
      sqlOut.append('\'').append(t.toString()).append('\'');
    }
 else     if (paramObjs[i] instanceof byte[]) {
      if (type == VoltType.STRING) {
        try {
          sqlOut.append(sqlEscape(new String((byte[])paramObjs[i],"UTF-8")));
        }
 catch (        UnsupportedEncodingException e) {
          System.err.println("FATAL: Your JVM doens't support UTF-8");
          System.exit(-1);
        }
      }
 else       if (type == VoltType.VARBINARY) {
        sqlOut.append(sqlEscape(Encoder.hexEncode((byte[])paramObjs[i])));
      }
 else {
        throw new RuntimeException("Inserting string/varbinary (bytes) into mismatched column type in HSQL.");
      }
    }
 else     if (paramObjs[i] instanceof String) {
      if (type != VoltType.STRING)       throw new RuntimeException("Inserting string into mismatched column type in HSQL.");
      sqlOut.append(sqlEscape((String)paramObjs[i]));
    }
 else {
      if (type == VoltType.TIMESTAMP) {
        long t=Long.parseLong(paramObjs[i].toString());
        TimestampType d=new TimestampType(t);
        Timestamp ts=new Timestamp(d.getTime() * 1000);
        sqlOut.append('\'').append(ts.toString()).append('\'');
      }
 else       sqlOut.append(paramObjs[i].toString());
    }
  }
  sqlOut.append(sql,lastIndex,sql.length());
  return runDML(sqlOut.toString());
}
