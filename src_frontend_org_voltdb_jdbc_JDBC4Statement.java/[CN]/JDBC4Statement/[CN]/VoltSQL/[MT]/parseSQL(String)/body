{
  if (query == null || query.length() == 0)   throw SQLError.get(SQLError.ILLEGAL_STATEMENT);
  query=SingleLineComments.matcher(query).replaceAll("");
  query=EscapedSingleQuote.matcher(query).replaceAll("#(SQL_PARSER_ESCAPE_SINGLE_QUOTE)");
  Matcher stringFragmentMatcher=Extract.matcher(query);
  ArrayList<String> stringFragments=new ArrayList<String>();
  int i=0;
  while (stringFragmentMatcher.find()) {
    stringFragments.add(stringFragmentMatcher.group());
    query=stringFragmentMatcher.replaceFirst("#(SQL_PARSER_STRING_FRAGMENT#" + i + ")");
    stringFragmentMatcher=Extract.matcher(query);
    i++;
  }
  query=AutoSplit.matcher(query.trim()).replaceAll(";$1 ");
  String[] sqlFragments=query.split("\\s*;+\\s*");
  if (sqlFragments.length > 1)   throw SQLError.get(SQLError.QUERY_PARSING_ERROR);
  query=SpaceCleaner.matcher(sqlFragments[0]).replaceAll(" ").trim();
  if (query.length() == 0)   throw SQLError.get(SQLError.ILLEGAL_STATEMENT);
  byte type=0;
  if (IsSelect.matcher(query).matches())   type=TYPE_SELECT;
 else   if (IsInsert.matcher(query).matches())   type=TYPE_INSERT;
 else   if (IsUpdate.matcher(query).matches())   type=TYPE_UPDATE;
 else   if (IsDelete.matcher(query).matches())   type=TYPE_DELETE;
  if (type == 0)   throw SQLError.get(SQLError.INVALID_QUERY_TYPE);
  if (query.indexOf("'") > -1)   throw SQLError.get(SQLError.UNTERMINATED_STRING);
  String[] queryParts=null;
  int parameterCount=0;
  if (query.indexOf("?") > -1) {
    queryParts=(query + ";").split("\\?");
    parameterCount=queryParts.length - 1;
  }
 else   queryParts=new String[]{query};
  if (stringFragments.size() > 0) {
    for (int k=0; k < stringFragments.size(); k++)     for (int l=0; l < queryParts.length; l++)     queryParts[l]=queryParts[l].replace("#(SQL_PARSER_STRING_FRAGMENT#" + k + ")",stringFragments.get(k));
  }
  for (int l=0; l < queryParts.length; l++)   queryParts[l]=queryParts[l].replace("#(SQL_PARSER_ESCAPE_SINGLE_QUOTE)","''");
  for (int l=0; l < queryParts.length; l++)   if (queryParts[l].indexOf("\r") > -1 || queryParts[l].indexOf("\n") > -1)   throw SQLError.get(SQLError.QUERY_PARSING_ERROR);
  return new VoltSQL(queryParts,parameterCount,type);
}
