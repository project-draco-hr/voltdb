{
  PortConnector channel=new PortConnector("localhost",rport);
  System.out.println("Testing Connect and Close");
  for (int i=0; i < 100; i++) {
    channel.connect();
    channel.close();
  }
  System.out.println("Testing bad login message");
  channel.connect();
  ByteBuffer buf=ByteBuffer.allocate(Integer.SIZE);
  buf.putInt(10);
  buf.position(0);
  channel.write(buf);
  channel.close();
  System.out.println("Testing negative length of message");
  channel.connect();
  buf=ByteBuffer.allocate(Integer.SIZE);
  buf.putInt(-1);
  buf.position(0);
  channel.write(buf);
  channel.close();
  System.out.println("Testing zero length of message");
  channel.connect();
  buf=ByteBuffer.allocate(Integer.SIZE);
  buf.putInt(0);
  buf.position(0);
  channel.write(buf);
  channel.close();
  System.out.println("Testing too big length of message");
  channel.connect();
  buf=ByteBuffer.allocate(Integer.SIZE);
  buf.putInt(Integer.MAX_VALUE);
  buf.position(0);
  channel.write(buf);
  channel.close();
  channel.connect();
  buf=ByteBuffer.allocate(41);
  buf.putInt(37);
  buf.put((byte)'0');
  buf.putInt(8);
  buf.put("dataCase".getBytes("UTF-8"));
  buf.putInt(0);
  buf.put("".getBytes("UTF-8"));
  buf.put(ConnectionUtil.getHashedPassword(""));
  buf.flip();
  channel.write(buf);
  try {
    ByteBuffer resp=ByteBuffer.allocate(6);
    channel.read(resp,6);
    resp.flip();
    resp.getInt();
    resp.get();
    byte code=resp.get();
    assertEquals(5,code);
  }
 catch (  Exception ioex) {
    fail();
  }
  channel.close();
  doLoginAndClose();
}
