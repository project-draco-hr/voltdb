{
  VoltXMLElement query=new VoltXMLElement("select");
  if (select.isDistinctSelect)   query.attributes.put("distinct","true");
  if ((select.sortAndSlice != null) && (select.sortAndSlice.limitCondition != null)) {
    Expression limitCondition=select.sortAndSlice.limitCondition;
    if (limitCondition.nodes.length != 2) {
      throw new HSQLParseException("Parser did not create limit and offset expression for LIMIT.");
    }
    try {
      VoltXMLElement offset=new VoltXMLElement("offset");
      if (limitCondition.nodes[0].isParam == false) {
        Integer offsetValue=(Integer)limitCondition.nodes[0].getValue(session);
        if (offsetValue > 0) {
          Expression expr=new ExpressionValue(offsetValue,Type.SQL_INTEGER);
          offset.children.add(expr.voltGetXML(session));
        }
      }
 else {
        offset.attributes.put("offset_paramid",limitCondition.nodes[0].getUniqueId(session));
      }
      query.children.add(offset);
      VoltXMLElement limit=new VoltXMLElement("limit");
      if (limitCondition.nodes[1].isParam == false) {
        Integer limitValue=(Integer)limitCondition.nodes[1].getValue(session);
        Expression expr=new ExpressionValue(limitValue,Type.SQL_INTEGER);
        limit.children.add(expr.voltGetXML(session));
      }
 else {
        limit.attributes.put("limit_paramid",limitCondition.nodes[1].getUniqueId(session));
      }
      query.children.add(limit);
    }
 catch (    HsqlException ex) {
      ex.printStackTrace();
    }
  }
  VoltXMLElement scanCols=new VoltXMLElement("scan_columns");
  query.children.add(scanCols);
  assert(scanCols != null);
  HsqlList col_list=new HsqlArrayList();
  select.collectAllExpressions(col_list,Expression.columnExpressionSet,Expression.emptyExpressionSet);
  if (select.queryCondition != null) {
    Expression.collectAllExpressions(col_list,select.queryCondition,Expression.columnExpressionSet,Expression.emptyExpressionSet);
  }
  for (int i=0; i < select.exprColumns.length; i++) {
    Expression.collectAllExpressions(col_list,select.exprColumns[i],Expression.columnExpressionSet,Expression.emptyExpressionSet);
  }
  for (  RangeVariable rv : select.rangeVariables) {
    if (rv.indexCondition != null) {
      Expression.collectAllExpressions(col_list,rv.indexCondition,Expression.columnExpressionSet,Expression.emptyExpressionSet);
    }
    if (rv.indexEndCondition != null) {
      Expression.collectAllExpressions(col_list,rv.indexEndCondition,Expression.columnExpressionSet,Expression.emptyExpressionSet);
    }
    if (rv.nonIndexJoinCondition != null) {
      Expression.collectAllExpressions(col_list,rv.nonIndexJoinCondition,Expression.columnExpressionSet,Expression.emptyExpressionSet);
    }
  }
  HsqlList uniq_col_list=new HsqlArrayList();
  for (int i=0; i < col_list.size(); i++) {
    Expression orig=(Expression)col_list.get(i);
    if (!uniq_col_list.contains(orig)) {
      uniq_col_list.add(orig);
    }
  }
  for (int i=0; i < uniq_col_list.size(); i++) {
    VoltXMLElement xml=((Expression)uniq_col_list.get(i)).voltGetXML(session);
    scanCols.children.add(xml);
    assert(xml != null);
  }
  VoltXMLElement cols=new VoltXMLElement("columns");
  query.children.add(cols);
  ArrayList<Expression> orderByCols=new ArrayList<Expression>();
  ArrayList<Expression> groupByCols=new ArrayList<Expression>();
  ArrayList<Expression> displayCols=new ArrayList<Expression>();
  ArrayList<Pair<Integer,SimpleName>> aliases=new ArrayList<Pair<Integer,SimpleName>>();
  for (int i=0; i < select.exprColumns.length; i++) {
    final Expression expr=select.exprColumns[i];
    if (expr.alias != null) {
      if (expr instanceof ExpressionColumn) {
        ExpressionColumn exprColumn=(ExpressionColumn)expr;
        if (exprColumn.alias != null && exprColumn.columnName == null) {
          aliases.add(Pair.of(expr.columnIndex,expr.alias));
        }
      }
 else       if (expr.columnIndex > -1) {
        aliases.add(Pair.of(expr.columnIndex,expr.alias));
      }
    }
    if (expr.columnIndex == -1) {
      expr.columnIndex=i;
    }
    if (isGroupByColumn(select,i)) {
      groupByCols.add(expr);
    }
 else     if (expr.opType == OpTypes.ORDER_BY) {
      orderByCols.add(expr);
    }
 else     if (expr.opType != OpTypes.SIMPLE_COLUMN || (expr.isAggregate && expr.alias != null)) {
      displayCols.add(expr);
    }
  }
  for (  Pair<Integer,SimpleName> alias : aliases) {
    select.exprColumns[alias.getFirst()].alias=alias.getSecond();
  }
  Set<Integer> ignoredColsIndexes=new HashSet<Integer>();
  for (int jj=0; jj < displayCols.size(); ++jj) {
    Expression expr=displayCols.get(jj);
    if (ignoredColsIndexes.contains(jj)) {
      continue;
    }
    VoltXMLElement xml=expr.voltGetXML(session,displayCols,ignoredColsIndexes,jj);
    cols.children.add(xml);
    assert(xml != null);
  }
  voltAppendParameters(session,query);
  VoltXMLElement scans=new VoltXMLElement("tablescans");
  query.children.add(scans);
  assert(scans != null);
  for (  RangeVariable rangeVariable : select.rangeVariables) {
    scans.children.add(rangeVariable.voltGetRangeVariableXML(session));
  }
  resolveUsingColumns(cols,select.rangeVariables);
  if (select.havingCondition != null) {
    throw new HSQLParseException("VoltDB does not support the HAVING clause");
  }
  if (select.isGrouped) {
    VoltXMLElement groupCols=new VoltXMLElement("groupcolumns");
    query.children.add(groupCols);
    for (int jj=0; jj < groupByCols.size(); ++jj) {
      Expression expr=groupByCols.get(jj);
      VoltXMLElement xml=expr.voltGetXML(session,displayCols,ignoredColsIndexes,jj);
      groupCols.children.add(xml);
    }
  }
  if (orderByCols.size() > 0) {
    VoltXMLElement orderCols=new VoltXMLElement("ordercolumns");
    query.children.add(orderCols);
    for (int jj=0; jj < orderByCols.size(); ++jj) {
      Expression expr=orderByCols.get(jj);
      VoltXMLElement xml=expr.voltGetXML(session,displayCols,ignoredColsIndexes,jj);
      orderCols.children.add(xml);
    }
  }
  return query;
}
