{
  FastDeserializer in=new FastDeserializer(buf);
  byte version=in.readByte();
  type=ProcedureInvocationType.typeFromByte(version);
  if (ProcedureInvocationType.isDeprecatedInternalDRType(type)) {
    originalTxnId=in.readLong();
    originalUniqueId=in.readLong();
  }
  if (version >= BatchTimeoutOverrideType.BATCH_TIMEOUT_VERSION) {
    BatchTimeoutOverrideType batchTimeoutType=BatchTimeoutOverrideType.typeFromByte(in.readByte());
    if (batchTimeoutType == BatchTimeoutOverrideType.NO_OVERRIDE_FOR_BATCH_TIMEOUT) {
      batchTimeout=BatchTimeoutOverrideType.NO_TIMEOUT;
    }
 else {
      batchTimeout=in.readInt();
      if (batchTimeout < 0) {
        throw new IllegalArgumentException("Timeout value can't be negative.");
      }
    }
  }
  procName=in.readString().intern();
  clientHandle=in.readLong();
  serializedParams=in.remainder();
  final ByteBuffer duplicate=serializedParams.duplicate();
  params=new FutureTask<ParameterSet>(new Callable<ParameterSet>(){
    @Override public ParameterSet call() throws Exception {
      return ParameterSet.fromByteBuffer(duplicate);
    }
  }
);
}
