{
  byte[] procNameBytes=SerializationHelper.getVarbinary(buf);
  if (procNameBytes == null) {
    throw new IOException("Procedure name cannot be null in invocation deserialization.");
  }
  if (procNameBytes.length == 0) {
    throw new IOException("Procedure name cannot be length zero in invocation deserialization.");
  }
  setProcName(procNameBytes);
  clientHandle=buf.getLong();
  m_batchTimeout=BatchTimeoutOverrideType.NO_TIMEOUT;
  int extensionCount=buf.get();
  if (extensionCount < 0) {
    throw new IOException("SPI extension count was < 0: possible corrupt network data.");
  }
  if (extensionCount > 30) {
    throw new IOException("SPI extension count was > 30: possible corrupt network data.");
  }
  for (int i=0; i < extensionCount; ++i) {
    final byte type=ProcedureInvocationExtensions.readNextType(buf);
switch (type) {
case ProcedureInvocationExtensions.BATCH_TIMEOUT:
      m_batchTimeout=ProcedureInvocationExtensions.readBatchTimeout(buf);
    break;
case ProcedureInvocationExtensions.ALL_PARTITION:
  m_allPartition=ProcedureInvocationExtensions.readAllPartition(buf);
break;
default :
ProcedureInvocationExtensions.skipUnknownExtension(buf);
break;
}
}
serializedParams=buf.slice();
final ByteBuffer duplicate=serializedParams.duplicate();
params=new FutureTask<ParameterSet>(new Callable<ParameterSet>(){
@Override public ParameterSet call() throws Exception {
return ParameterSet.fromByteBuffer(duplicate);
}
}
);
}
