{
  StringBuffer sb=new StringBuffer();
switch (getConstraintType()) {
case Constraint.PRIMARY_KEY:
    if (getMainColumns().length > 1 || (getMainColumns().length == 1 && !getName().isReservedName())) {
      if (!getName().isReservedName()) {
        sb.append(Tokens.T_CONSTRAINT).append(' ');
        sb.append(getName().statementName).append(' ');
      }
      sb.append(Tokens.T_PRIMARY).append(' ').append(Tokens.T_KEY);
      getColumnList(getMain(),getMainColumns(),getMainColumns().length,sb);
    }
  break;
case Constraint.UNIQUE:
if (!getName().isReservedName()) {
  sb.append(Tokens.T_CONSTRAINT).append(' ');
  sb.append(getName().statementName);
  sb.append(' ');
}
sb.append(Tokens.T_UNIQUE);
if (indexExprs != null) {
return getExprList(sb);
}
int[] col=getMainColumns();
getColumnList(getMain(),col,col.length,sb);
break;
case Constraint.FOREIGN_KEY:
if (isForward) {
sb.append(Tokens.T_ALTER).append(' ').append(Tokens.T_TABLE).append(' ');
sb.append(getRef().getName().getSchemaQualifiedStatementName());
sb.append(' ').append(Tokens.T_ADD).append(' ');
getFKStatement(sb);
}
 else {
getFKStatement(sb);
}
break;
case Constraint.CHECK:
if (isNotNull()) {
break;
}
if (!getName().isReservedName()) {
sb.append(Tokens.T_CONSTRAINT).append(' ');
sb.append(getName().statementName).append(' ');
}
sb.append(Tokens.T_CHECK).append('(');
sb.append(check.getSQL());
sb.append(')');
break;
}
return sb.toString();
}
