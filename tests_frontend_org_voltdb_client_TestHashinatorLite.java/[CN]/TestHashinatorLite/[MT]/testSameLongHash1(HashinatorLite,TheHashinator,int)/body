{
  long valueToHash;
  int hash1, hash2;
  valueToHash=0;
  hash1=h1.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  hash2=h2.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  if (hash1 != hash2) {
    System.out.printf("Hash of %d with %d partitions => Lite: %d, Std: %d\n",valueToHash,partitionCount,hash1,hash2);
  }
  assertEquals(hash1,hash2);
  assertTrue(hash1 < partitionCount);
  assertTrue(hash1 >= 0);
  valueToHash=1;
  hash1=h1.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  hash2=h2.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  if (hash1 != hash2) {
    System.out.printf("Hash of %d with %d partitions => Lite: %d, Std: %d\n",valueToHash,partitionCount,hash1,hash2);
  }
  assertEquals(hash1,hash2);
  assertTrue(hash1 < partitionCount);
  assertTrue(hash1 >= 0);
  valueToHash=2;
  hash1=h1.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  hash2=h2.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  if (hash1 != hash2) {
    System.out.printf("Hash of %d with %d partitions => Lite: %d, Std: %d\n",valueToHash,partitionCount,hash1,hash2);
  }
  assertEquals(hash1,hash2);
  assertTrue(hash1 < partitionCount);
  assertTrue(hash1 >= 0);
  valueToHash=3;
  hash1=h1.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  hash2=h2.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
  if (hash1 != hash2) {
    System.out.printf("Hash of %d with %d partitions => Lite: %d, Std: %d\n",valueToHash,partitionCount,hash1,hash2);
  }
  assertEquals(hash1,hash2);
  assertTrue(hash1 < partitionCount);
  assertTrue(hash1 >= 0);
}
