{
  int hash1, hash2;
  for (short valueToHash=-7; valueToHash <= 7; valueToHash++) {
    hash1=h1.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
    hash2=h2.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
    if (hash1 != hash2) {
      System.out.printf("Hash of %d with %d partitions => Lite: %d, Std: %d\n",valueToHash,partitionCount,hash1,hash2);
    }
    assertEquals(hash1,hash2);
    assertTrue(hash1 < partitionCount);
    assertTrue(hash1 >= 0);
  }
  for (long valueToHash=-7; valueToHash <= 7; valueToHash++) {
    hash1=h1.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
    hash2=h2.getHashedPartitionForParameter(VoltType.typeFromObject(valueToHash).getValue(),valueToHash);
    if (hash1 != hash2) {
      System.out.printf("Hash of %d with %d partitions => Lite: %d, Std: %d\n",valueToHash,partitionCount,hash1,hash2);
    }
    assertEquals(hash1,hash2);
    assertTrue(hash1 < partitionCount);
    assertTrue(hash1 >= 0);
  }
}
