def __intToBytes(self, value, sign):
    value_bytes = ''
    if (sign == 1):
        value = ((~ value) + 1)
    while ((value != 0) and (value != (-1))):
        byte = (value & 255)
        if (((value >> 8) == 0) and (sign == 1)):
            mask = (1 << 7)
            while ((mask > 0) and ((byte & mask) == 0)):
                byte |= mask
                (mask >> 1)
        value_bytes = (struct.pack(self.ubyteType(1), byte) + value_bytes)
        value = (value >> 8)
    if (len(value_bytes) > 16):
        raise ValueError('Precision of this decimal is >38 digits')
    if (sign == 1):
        ret = struct.pack(self.ubyteType(1), 255)
    else:
        ret = struct.pack(self.ubyteType(1), 0)
    ret *= (16 - len(value_bytes))
    ret += value_bytes
    return ret
