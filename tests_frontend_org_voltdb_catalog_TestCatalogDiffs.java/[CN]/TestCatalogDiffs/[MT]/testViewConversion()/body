{
  String testDir=BuildDirectoryUtils.getBuildDirectoryPath();
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("\nCREATE TABLE A (C1 BIGINT NOT NULL, C2 BIGINT NOT NULL);");
  builder.addLiteralSchema("\nCREATE TABLE B (C1 BIGINT NOT NULL, C2 BIGINT NOT NULL);");
  builder.addLiteralSchema("\nCREATE VIEW MATVIEW(C1, NUM) AS SELECT C1, COUNT(*) FROM A GROUP BY C1;");
  builder.addPartitionInfo("A","C1");
  assertTrue("Failed to compile schema",builder.compile(testDir + File.separator + "convertmatview1.jar"));
  Catalog catOriginalSingle=catalogForJar(testDir + File.separator + "convertmatview1.jar");
  builder=new VoltProjectBuilder();
  builder.addLiteralSchema("\nCREATE TABLE A (C1 BIGINT NOT NULL, C2 BIGINT NOT NULL);");
  builder.addLiteralSchema("\nCREATE TABLE B (C1 BIGINT NOT NULL, C2 BIGINT NOT NULL);");
  builder.addLiteralSchema("\nCREATE VIEW MATVIEW(C1, NUM) AS " + "\n    SELECT A.C1, COUNT(*) FROM A JOIN B ON A.C1=B.C2 GROUP BY A.C1;");
  builder.addPartitionInfo("A","C1");
  assertTrue("Failed to compile schema",builder.compile(testDir + File.separator + "convertmatview2.jar"));
  Catalog catOriginalJoin=catalogForJar(testDir + File.separator + "convertmatview2.jar");
  builder=new VoltProjectBuilder();
  builder.addLiteralSchema("\nCREATE TABLE A (C1 BIGINT NOT NULL, C2 BIGINT NOT NULL);");
  builder.addLiteralSchema("\nCREATE TABLE B (C1 BIGINT NOT NULL, C2 BIGINT NOT NULL);");
  builder.addLiteralSchema("\nCREATE TABLE MATVIEW(C1 BIGINT NOT NULL, NUM INTEGER);");
  builder.addPartitionInfo("A","C1");
  assertTrue("Failed to compile schema",builder.compile(testDir + File.separator + "convertmatview3.jar"));
  Catalog catUpdated=catalogForJar(testDir + File.separator + "convertmatview3.jar");
  verifyDiffRejected(catOriginalSingle,catUpdated);
  verifyDiffRejected(catOriginalJoin,catUpdated);
}
