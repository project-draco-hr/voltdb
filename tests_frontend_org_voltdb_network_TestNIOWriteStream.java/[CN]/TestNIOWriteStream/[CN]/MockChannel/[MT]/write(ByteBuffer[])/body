{
  if (!m_open)   throw new IOException();
  if (m_behavior == SINK) {
    int remaining=src[0].remaining();
    src[0].position(src[0].limit());
    return remaining;
  }
 else   if (m_behavior == FULL) {
    return 0;
  }
 else   if (m_behavior == PARTIAL) {
    if (wrotePartial) {
      return 0;
    }
 else {
      wrotePartial=true;
    }
    ByteBuffer copy=ByteBuffer.allocate(src[0].remaining());
    src[0].get(copy.array(),0,src[0].remaining() / 2);
    return src[0].remaining();
  }
  assert(false);
  return -1;
}
