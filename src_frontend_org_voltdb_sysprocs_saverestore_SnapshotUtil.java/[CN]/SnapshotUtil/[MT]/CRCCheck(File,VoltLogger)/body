{
  final FileInputStream fis=new FileInputStream(f);
  try {
    final BufferedInputStream bis=new BufferedInputStream(fis);
    ByteBuffer crcBuffer=ByteBuffer.allocate(4);
    if (4 != bis.read(crcBuffer.array())) {
      logger.warn("EOF while attempting to read CRC from snapshot digest " + f + " on host "+ CoreUtils.getHostnameOrAddress());
      return null;
    }
    final int crc=crcBuffer.getInt();
    final InputStreamReader isr=new InputStreamReader(bis,StandardCharsets.UTF_8);
    CharArrayWriter caw=new CharArrayWriter();
    while (true) {
      int nextChar=isr.read();
      if (nextChar == -1) {
        break;
      }
      if (nextChar == '\n') {
        break;
      }
      caw.write(nextChar);
    }
    JSONObject obj=null;
    try {
      obj=new JSONObject(caw.toString());
    }
 catch (    JSONException e) {
    }
    if (obj == null) {
      String tableList=caw.toString();
      byte tableListBytes[]=tableList.getBytes(StandardCharsets.UTF_8);
      PureJavaCrc32 tableListCRC=new PureJavaCrc32();
      tableListCRC.update(tableListBytes);
      tableListCRC.update("\n".getBytes(StandardCharsets.UTF_8));
      final int calculatedValue=(int)tableListCRC.getValue();
      if (crc != calculatedValue) {
        logger.warn("CRC of snapshot digest " + f + " did not match digest contents");
        return null;
      }
      String tableNames[]=tableList.split(",");
      long txnId=Long.valueOf(tableNames[0]);
      obj=new JSONObject();
      try {
        obj.put("version",0);
        obj.put("txnId",txnId);
        for (int ii=1; ii < tableNames.length; ii++) {
          obj.append("tables",tableNames[ii]);
        }
      }
 catch (      JSONException e) {
        logger.warn("Exception parsing JSON of digest " + f,e);
        return null;
      }
      return obj;
    }
 else {
      String tableList=caw.toString();
      byte tableListBytes[]=tableList.getBytes(StandardCharsets.UTF_8);
      PureJavaCrc32 tableListCRC=new PureJavaCrc32();
      tableListCRC.update(tableListBytes);
      final int calculatedValue=(int)tableListCRC.getValue();
      if (crc != calculatedValue) {
        logger.warn("CRC of snapshot digest " + f + " did not match digest contents");
        return null;
      }
      return obj;
    }
  }
 catch (  Exception e) {
    logger.warn("Exception while parsing snapshot digest " + f,e);
    return null;
  }
 finally {
    try {
      if (fis != null)       fis.close();
    }
 catch (    IOException e) {
    }
  }
}
