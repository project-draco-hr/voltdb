{
  final SnapshotInitiationInfo snapInfo=new SnapshotInitiationInfo(path,nonce,blocking,format,data);
  final SettableFuture<ClientResponse> responseFuture=SettableFuture.create();
  final SimpleClientResponseAdapter adapter=new SimpleClientResponseAdapter(ClientInterface.SNAPSHOT_UTIL_CID,"SnapshotUtilAdapter");
  adapter.registerCallback(clientHandle,new SimpleClientResponseAdapter.Callback(){
    @Override public void handleResponse(    ClientResponse response){
      responseFuture.set(response);
    }
  }
);
  final SnapshotDaemon sd=VoltDB.instance().getClientInterfaces().get(0).getSnapshotDaemon();
  Runnable work=new Runnable(){
    @Override public void run(){
      ClientResponse response=null;
      final long startTime=System.currentTimeMillis();
      boolean hasRequested=false;
      while (System.currentTimeMillis() - startTime <= (120 * 60000)) {
        try {
          if (!hasRequested) {
            sd.createAndWatchRequestNode(clientHandle,adapter,snapInfo,notifyChanges);
            hasRequested=true;
          }
          try {
            response=responseFuture.get();
          }
 catch (          ExecutionException e) {
            VoltDB.crashLocalVoltDB("Should never happen",true,e);
          }
          VoltTable[] results=response.getResults();
          if (response.getStatus() != ClientResponse.SUCCESS) {
            break;
          }
 else           if (isSnapshotInProgress(results)) {
            Thread.sleep(1000);
            hasRequested=false;
            continue;
          }
 else           if (isSnapshotQueued(results) && notifyChanges) {
            Thread.sleep(1000);
            continue;
          }
 else {
            break;
          }
        }
 catch (        ForwardClientException e) {
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException e1) {
          }
          new VoltLogger("SNAPSHOT").warn("Partition detection was unable to submit a snapshot request" + "because one already existed. Retrying.");
          continue;
        }
catch (        InterruptedException ignore) {
        }
      }
      handler.handleResponse(response);
    }
  }
;
  ThreadFactory factory=CoreUtils.getThreadFactory("Snapshot Request - " + nonce);
  Thread workThread=factory.newThread(work);
  workThread.start();
}
