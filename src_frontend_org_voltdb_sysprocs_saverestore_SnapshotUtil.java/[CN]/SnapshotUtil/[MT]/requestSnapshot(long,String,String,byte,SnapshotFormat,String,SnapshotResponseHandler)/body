{
  final Connection c=new Connection(){
    @Override public WriteStream writeStream(){
      return new WriteStream(){
        @Override public void enqueue(        DeferredSerialization ds){
          throw new UnsupportedOperationException();
        }
        @Override public void enqueue(        ByteBuffer b){
          ClientResponseImpl resp=new ClientResponseImpl();
          try {
            b.position(4);
            resp.initFromBuffer(b);
            if (handler != null) {
              handler.handleResponse(resp);
            }
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
        @Override public void enqueue(        ByteBuffer[] b){
          if (b.length != 1) {
            throw new RuntimeException("Cannot use ByteBuffer chaining in enqueue");
          }
          enqueue(b[0]);
        }
        @Override public int calculatePendingWriteDelta(        long now){
          throw new UnsupportedOperationException();
        }
        @Override public boolean isEmpty(){
          throw new UnsupportedOperationException();
        }
        @Override public int getOutstandingMessageCount(){
          throw new UnsupportedOperationException();
        }
        @Override public boolean hadBackPressure(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
    @Override public NIOReadStream readStream(){
      throw new UnsupportedOperationException();
    }
    @Override public void disableReadSelection(){
      throw new UnsupportedOperationException();
    }
    @Override public void enableReadSelection(){
      throw new UnsupportedOperationException();
    }
    @Override public String getHostnameOrIP(){
      throw new UnsupportedOperationException();
    }
    @Override public long connectionId(){
      throw new UnsupportedOperationException();
    }
    @Override public Future<?> unregister(){
      throw new UnsupportedOperationException();
    }
  }
;
  final SnapshotDaemon sd=VoltDB.instance().getClientInterfaces().get(0).getSnapshotDaemon();
  Runnable work=new Runnable(){
    @Override public void run(){
      final long startTime=System.currentTimeMillis();
      while (System.currentTimeMillis() - startTime <= (120 * 60000)) {
        sd.createAndWatchRequestNode(clientHandle,c,path,nonce,blocking,format,data);
      }
    }
  }
;
  ThreadFactory factory=CoreUtils.getThreadFactory("Snapshot Request - " + nonce);
  Thread workThread=factory.newThread(work);
  workThread.start();
}
