{
  start=System.currentTimeMillis();
  long insertTimeStart=start;
  long insertTimeEnd;
  final CSVConfig cfg=new CSVConfig();
  cfg.parse(CSVLoader.class.getName(),args);
  config=cfg;
  configuration();
  final Tokenizer tokenizer;
  ICsvListReader listReader=null;
  try {
    if (CSVLoader.standin) {
      tokenizer=new Tokenizer(new BufferedReader(new InputStreamReader(System.in)),csvPreference,config.strictquotes,config.escape,config.columnsizelimit,config.skip);
      listReader=new CsvListReader(tokenizer,csvPreference);
    }
 else {
      tokenizer=new Tokenizer(new FileReader(config.file),csvPreference,config.strictquotes,config.escape,config.columnsizelimit,config.skip);
      listReader=new CsvListReader(tokenizer,csvPreference);
    }
  }
 catch (  FileNotFoundException e) {
    m_log.error("CSV file '" + config.file + "' could not be found.");
    System.exit(-1);
  }
  final String[] serverlist=config.servers.split(",");
  final ClientConfig c_config=new ClientConfig(config.user,config.password);
  c_config.setProcedureCallTimeout(0);
  Client csvClient=null;
  try {
    csvClient=CSVLoader.getClient(c_config,serverlist,config.port);
  }
 catch (  Exception e) {
    m_log.error("Error connecting to the servers: " + config.servers);
    System.exit(-1);
  }
  assert(csvClient != null);
  try {
    long readerTime;
    long insertCount;
    long ackCount;
    long rowsQueued;
    if (config.useSuppliedProcedure) {
      if (!CSVFileReader.initializeReader(cfg,csvClient,listReader)) {
        System.exit(-1);
      }
      CSVFileReader csvReader=new CSVFileReader();
      Thread readerThread=new Thread(csvReader);
      readerThread.setName("CSVFileReader");
      readerThread.setDaemon(true);
      readerThread.start();
      readerThread.join();
      readerTime=(csvReader.m_parsingTime) / 1000000;
      insertTimeEnd=System.currentTimeMillis();
      csvClient.drain();
      csvClient.close();
      insertCount=csvReader.m_processedCount.get();
      ackCount=csvReader.m_acknowledgedCount.get();
      rowsQueued=CSVFileReader.m_totalRowCount.get();
    }
 else {
      CSVFileReaderBL.m_config=cfg;
      CSVFileReaderBL.m_csvClient=csvClient;
      CSVFileReaderBL.m_listReader=listReader;
      CSVFileReaderBL csvReader=new CSVFileReaderBL();
      Thread readerThread=new Thread(csvReader);
      readerThread.setName("CSVFileReader");
      readerThread.setDaemon(true);
      readerThread.start();
      readerThread.join();
      readerTime=(csvReader.m_parsingTime) / 1000000;
      insertTimeEnd=System.currentTimeMillis();
      csvClient.close();
      readerTime=(csvReader.m_parsingTime) / 1000000;
      insertCount=csvReader.bulkLoader.getCompletedRowCount();
      ackCount=insertCount - csvReader.m_failedInsertCount.get();
      rowsQueued=CSVFileReaderBL.m_totalRowCount.get();
    }
    try {
      listReader.close();
    }
 catch (    Exception ex) {
      m_log.error("Error closing reader: " + ex);
    }
 finally {
      m_log.debug("Rows Queued by Reader: " + rowsQueued);
    }
    m_log.debug("Parsing CSV file took " + readerTime + " milliseconds.");
    m_log.debug("Inserting Data took " + ((insertTimeEnd - insertTimeStart) - readerTime) + " milliseconds.");
    m_log.info("Read " + insertCount + " rows from file and successfully inserted "+ ackCount+ " rows (final)");
    produceFiles(ackCount,insertCount);
    boolean noerrors=config.useSuppliedProcedure ? CSVFileReader.m_errorInfo.isEmpty() : CSVFileReaderBL.m_errorInfo.isEmpty();
    close_cleanup();
    if (!CSVLoader.testMode) {
      System.exit(noerrors ? 0 : -1);
    }
  }
 catch (  Exception ex) {
    m_log.error("Exception Happened while loading CSV data: " + ex);
    System.exit(1);
  }
}
