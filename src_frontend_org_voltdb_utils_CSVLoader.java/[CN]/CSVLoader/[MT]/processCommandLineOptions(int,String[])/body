{
  final String columnsMatch="--columns";
  final String failuerCountMatch="--abortfailurecount";
  final String reportDirMatch="--reportdir";
  final String stripMatch="--stripquotes";
  final String waitMatch="--wait";
  final String auditMatch="--audit";
  final String limitMatch="--limit";
  final String skipMatch="--skip";
  final String reportMatch="--report";
  final String columnsStyle="comma-separated-zero-based-column-numbers";
  while (argsUsed < args.length) {
    final String optionPrefix=args[argsUsed++];
    if (optionPrefix.equalsIgnoreCase(columnsMatch)) {
      if (argsUsed < args.length) {
        final String colsListed=args[argsUsed++];
        final String[] cols=colsListed.split(",");
        if (cols != null && cols.length > 0) {
          colProjection=new int[cols.length];
          for (int i=0; i < cols.length; i++) {
            try {
              colProjection[i]=Integer.parseInt(cols[i]);
              continue;
            }
 catch (            NumberFormatException e) {
            }
          }
          if (colProjection.length == cols.length) {
            continue;
          }
        }
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(failuerCountMatch)) {
      if (argsUsed < args.length) {
        try {
          abortfailurecount=Integer.parseInt(args[argsUsed++]);
          continue;
        }
 catch (        NumberFormatException e) {
          System.err.println("Invalid input integer parameter of abortfailurecount");
        }
        continue;
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(reportDirMatch)) {
      if (argsUsed < args.length) {
        try {
          reportdir=(args[argsUsed++]);
        }
 catch (        NumberFormatException e) {
        }
        continue;
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(waitMatch)) {
      if (argsUsed < args.length) {
        try {
          waitSeconds=Integer.parseInt(args[argsUsed++]);
          if (waitSeconds >= 0) {
            continue;
          }
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(auditMatch)) {
      if (argsUsed < args.length) {
        try {
          auditRows=Integer.parseInt(args[argsUsed++]);
          continue;
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(limitMatch)) {
      if (argsUsed < args.length) {
        try {
          limitRows=Integer.parseInt(args[argsUsed++]);
          continue;
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(skipMatch)) {
      if (argsUsed < args.length) {
        try {
          skipRows=Integer.parseInt(args[argsUsed++]);
          continue;
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(reportMatch)) {
      if (argsUsed < args.length) {
        try {
          reportEveryNRows=Integer.parseInt(args[argsUsed++]);
          if (reportEveryNRows > 0) {
            continue;
          }
        }
 catch (        NumberFormatException e) {
        }
      }
    }
 else     if (optionPrefix.equalsIgnoreCase(stripMatch)) {
      stripQuotes=true;
      continue;
    }
    System.err.println("Option arguments are invalid, expected csv filename and insert procedure name (required) and optionally" + " '" + columnsMatch + " "+ columnsStyle+ "',"+ " '"+ waitMatch+ " s (default=10 seconds)',"+ " '"+ auditMatch+ " n (default=0 rows)',"+ " '"+ limitMatch+ " n (default=all rows)',"+ " '"+ skipMatch+ " n (default=0 rows)',"+ " '"+ reportMatch+ " n (default=10000)',"+ " and/or '"+ stripMatch+ " (disabled by default)'");
    System.exit(2);
  }
}
