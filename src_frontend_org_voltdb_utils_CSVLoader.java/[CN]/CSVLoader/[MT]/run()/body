{
  int waits=0;
  int shortWaits=0;
  try {
    final CSVReader reader;
    if (CSVLoader.standin)     reader=new CSVReader(new BufferedReader(new InputStreamReader(System.in)),config.separator,config.quotechar,config.escape,config.skipline,config.strictQuotes,config.ignoreLeadingWhiteSpace);
 else     reader=new CSVReader(new FileReader(config.inputfile),config.separator,config.quotechar,config.escape,config.skipline,config.strictQuotes,config.ignoreLeadingWhiteSpace);
    ProcedureCallback cb=null;
    final Client client=ClientFactory.createClient();
    client.createConnection("localhost");
    boolean lastOK=true;
    String line[]=null;
    while ((config.limitrows-- > 0) && (line=reader.readNext()) != null) {
      outCount.incrementAndGet();
      boolean queued=false;
      while (queued == false) {
        StringBuilder linedata=new StringBuilder();
        for (        String s : line)         linedata.append(s);
        String[] correctedLine=line;
        cb=new MyCallback(outCount.get(),config,linedata.toString());
        String msg="<xin>params: ";
        for (int i=0; i < correctedLine.length; i++) {
          if (correctedLine != null)           msg+=correctedLine[i] + ",";
        }
        System.out.println(msg);
        int columnCnt=0;
        VoltTable procInfo=null;
        String lineCheckResult;
        Vector<Integer> strColIndex=new Vector<Integer>();
        try {
          procInfo=client.callProcedure("@SystemCatalog","PROCEDURECOLUMNS").getResults()[0];
          while (procInfo.advanceRow()) {
            if (insertProcedure.matches((String)procInfo.get("PROCEDURE_NAME",VoltType.STRING))) {
              if (procInfo.get("TYPE_NAME",VoltType.STRING).toString().matches("VARCHAR"))               strColIndex.add(Integer.parseInt(procInfo.get("ORDINAL_POSITION",VoltType.INTEGER).toString()) - 1);
              columnCnt++;
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        if ((lineCheckResult=checkLineFormat(correctedLine,columnCnt)) != null) {
          System.err.println("<zheng>Stop at line " + (outCount.get()) + lineCheckResult);
synchronized (errorInfo) {
            if (!errorInfo.containsKey(outCount.get())) {
              String[] info={linedata.toString(),lineCheckResult};
              errorInfo.put(outCount.get(),info);
            }
            if (errorInfo.size() >= config.abortfailurecount) {
              System.err.println("The number of Failure row data exceeds " + config.abortfailurecount);
              System.exit(1);
            }
          }
          break;
        }
        queued=client.callProcedure(cb,insertProcedure,(Object[])correctedLine);
        if (queued == false) {
          ++waits;
          if (lastOK == false) {
            ++shortWaits;
          }
          Thread.sleep(waitSeconds);
        }
        lastOK=queued;
      }
    }
    reader.close();
    client.drain();
    client.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.out.println("Inserted " + outCount.get() + " and acknowledged "+ inCount.get()+ " rows (final)");
  if (waits > 0) {
    System.out.println("Waited " + waits + " times");
    if (shortWaits > 0) {
      System.out.println("Waited too briefly? " + shortWaits + " times");
    }
  }
}
