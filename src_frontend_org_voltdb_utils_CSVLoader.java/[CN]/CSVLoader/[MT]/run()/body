{
  int waits=0;
  int shortWaits=0;
  try {
    final CSVReader reader=new CSVReader(new FileReader(config.inputfile));
    ProcedureCallback cb=null;
    final Client client=ClientFactory.createClient();
    client.createConnection("localhost");
    boolean lastOK=true;
    String line[]=null;
    while ((config.limitRows-- > 0) && (line=reader.readNext()) != null) {
      long counter=outCount.incrementAndGet();
      boolean queued=false;
      while (queued == false) {
        String[] correctedLine=line;
        cb=new MyCallback(outCount.get(),config);
        String msg="<xin>params: ";
        for (int i=0; i < correctedLine.length; i++) {
          msg+=correctedLine[i] + ",";
        }
        System.out.println(msg);
        if (!checkLineFormat(correctedLine,client)) {
          System.err.println("Stop at line " + (outCount.get()));
synchronized (invalidLines) {
            if (!invalidLines.contains(outCount.get())) {
              invalidLines.add(outCount.get());
            }
            if (invalidLines.size() >= config.abortfailurecount) {
              System.err.println("The number of Failure row data exceeds " + config.abortfailurecount);
              System.exit(1);
            }
          }
          break;
        }
        queued=client.callProcedure(cb,config.procedurename,(Object[])correctedLine);
        if (queued == false) {
          ++waits;
          if (lastOK == false) {
            ++shortWaits;
          }
          Thread.sleep(waitSeconds);
        }
        lastOK=queued;
      }
    }
    reader.close();
    client.drain();
    client.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.out.println("Inserted " + outCount.get() + " and acknowledged "+ inCount.get()+ " rows (final)");
  if (waits > 0) {
    System.out.println("Waited " + waits + " times");
    if (shortWaits > 0) {
      System.out.println("Waited too briefly? " + shortWaits + " times");
    }
  }
  return inCount.get();
}
