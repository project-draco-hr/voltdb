{
  m_sc=sc;
  InetSocketAddress remoteAddress=(InetSocketAddress)sc.socket().getRemoteSocketAddress();
  m_remoteSocketAddress=remoteAddress;
  m_remoteSocketAddressString=remoteAddress.getAddress().getHostAddress();
  m_remoteHostAndAddressAndPort="/" + m_remoteSocketAddressString + ":"+ m_remoteSocketAddress.getPort();
  m_toString=super.toString() + ":" + m_remoteHostAndAddressAndPort;
  String remoteHost=ReverseDNSCache.hostnameOrAddress(m_remoteSocketAddress.getAddress());
  if (!remoteHost.equals(m_remoteSocketAddress.getAddress().getHostAddress())) {
    m_remoteHostname=remoteHost;
    m_remoteHostAndAddressAndPort=remoteHost + m_remoteHostAndAddressAndPort;
    m_toString=super.toString() + ":" + m_remoteHostAndAddressAndPort;
  }
  m_thread=new Thread(this,"Pico Network - " + m_toString);
  m_thread.setDaemon(true);
  try {
    sc.configureBlocking(false);
    sc.socket().setTcpNoDelay(true);
    m_selector=Selector.open();
    m_interestOps=SelectionKey.OP_READ;
    m_key=m_sc.register(m_selector,m_interestOps);
  }
 catch (  IOException ex) {
    m_logger.fatal(null,ex);
    throw new RuntimeException(ex);
  }
}
