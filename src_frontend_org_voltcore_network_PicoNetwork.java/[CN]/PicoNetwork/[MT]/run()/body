{
  if (LatencyWatchdog.isEnable())   LatencyWatchdog.pet(Thread.currentThread());
  m_verbotenThreads.add(Thread.currentThread().getId());
  try {
    m_ih.starting(this);
    m_ih.started(this);
    while (m_shouldStop == false) {
      if (LatencyWatchdog.isEnable())       LatencyWatchdog.pet(Thread.currentThread());
      if (m_hadWork) {
        m_selector.selectNow();
      }
 else {
        m_selector.select();
      }
      m_hadWork=false;
      Runnable task=null;
      while ((task=m_tasks.poll()) != null) {
        m_hadWork=true;
        task.run();
      }
      dispatchReadStream();
      drainWriteStream();
    }
  }
 catch (  CancelledKeyException e) {
    networkLog.warn("Had a cancelled key exception for " + m_toString,e);
  }
catch (  IOException e) {
    final String trimmed=e.getMessage() == null ? "" : e.getMessage().trim();
    if ((e instanceof IOException && (trimmed.equalsIgnoreCase("Connection reset by peer") || trimmed.equalsIgnoreCase("broken pipe"))) || e instanceof AsynchronousCloseException || e instanceof ClosedChannelException|| e instanceof ClosedByInterruptException) {
      m_logger.debug("VoltPort died, probably of natural causes",e);
    }
 else {
      e.printStackTrace();
      networkLog.error("VoltPort died due to an unexpected exception",e);
    }
  }
catch (  Throwable ex) {
    ex.printStackTrace();
    m_logger.error(null,ex);
    m_shouldStop=true;
  }
 finally {
    m_verbotenThreads.remove(Thread.currentThread().getId());
    try {
      p_shutdown();
    }
 catch (    Throwable t) {
      m_logger.error("Error shutting down Volt Network",t);
      t.printStackTrace();
    }
  }
}
