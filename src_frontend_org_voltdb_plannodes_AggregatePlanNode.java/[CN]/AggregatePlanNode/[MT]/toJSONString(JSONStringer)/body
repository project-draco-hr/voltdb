{
  super.toJSONString(stringer);
  stringer.key("AGGREGATE_COLUMNS");
  stringer.array();
  for (int ii=0; ii < m_aggregateTypes.size(); ii++) {
    stringer.object();
    stringer.key(Members.AGGREGATE_TYPE.name()).value(m_aggregateTypes.get(ii).name());
    stringer.key(Members.AGGREGATE_DISTINCT.name()).value(m_aggregateDistinct.get(ii));
    stringer.key(Members.AGGREGATE_OUTPUT_COLUMN.name()).value(m_aggregateOutputColumns.get(ii));
    AbstractExpression ae=m_aggregateExpressions.get(ii);
    if (ae != null) {
      stringer.key(Members.AGGREGATE_EXPRESSION.name());
      stringer.object();
      ae.toJSONString(stringer);
      stringer.endObject();
    }
    stringer.endObject();
  }
  stringer.endArray();
  if (!m_groupByExpressions.isEmpty()) {
    stringer.key(Members.GROUPBY_EXPRESSIONS.name()).array();
    for (int i=0; i < m_groupByExpressions.size(); i++) {
      stringer.object();
      m_groupByExpressions.get(i).toJSONString(stringer);
      stringer.endObject();
    }
    stringer.endArray();
    if (m_partialGroupByColumns != null && !m_partialGroupByColumns.isEmpty()) {
      stringer.key(Members.PARTIAL_GROUPBY_COLUMNS.name()).array();
      for (      Integer ith : m_partialGroupByColumns) {
        stringer.value(ith.longValue());
      }
      stringer.endArray();
    }
  }
  if (m_prePredicate != null) {
    stringer.key(Members.PRE_PREDICATE.name()).value(m_prePredicate);
  }
  if (m_postPredicate != null) {
    stringer.key(Members.POST_PREDICATE.name()).value(m_postPredicate);
  }
}
