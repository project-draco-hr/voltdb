{
  assert(m_children.size() == 1);
  m_children.get(0).resolveColumnIndexes();
  NodeSchema input_schema=m_children.get(0).getOutputSchema();
  for (  SchemaColumn col : m_outputSchema.getColumns()) {
    assert(col.getExpression() instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.getExpression();
    int index=input_schema.getIndexOfTve(tve);
    if (index == -1) {
      if (!tve.getTableName().equals("VOLT_TEMP_TABLE")) {
        throw new RuntimeException("Unable to find index for column: " + col.toString());
      }
    }
 else {
      tve.setColumnIndex(index);
    }
  }
  List<TupleValueExpression> agg_tves=new ArrayList<TupleValueExpression>();
  for (  AbstractExpression agg_exp : m_aggregateExpressions) {
    agg_tves.addAll(ExpressionUtil.getTupleValueExpressions(agg_exp));
  }
  for (  TupleValueExpression tve : agg_tves) {
    int index=input_schema.getIndexOfTve(tve);
    tve.setColumnIndex(index);
  }
  List<TupleValueExpression> group_tves=new ArrayList<TupleValueExpression>();
  for (  AbstractExpression group_exp : m_groupByExpressions) {
    group_tves.addAll(ExpressionUtil.getTupleValueExpressions(group_exp));
  }
  for (  TupleValueExpression tve : group_tves) {
    int index=input_schema.getIndexOfTve(tve);
    tve.setColumnIndex(index);
  }
}
