{
  helpLoadFromJSONObject(jobj,db);
  JSONArray jarray=jobj.getJSONArray(Members.AGGREGATE_COLUMNS.name());
  int size=jarray.length();
  for (int i=0; i < size; i++) {
    JSONObject tempObj=jarray.getJSONObject(i);
    m_aggregateTypes.add(ExpressionType.get(tempObj.getString(Members.AGGREGATE_TYPE.name())));
    m_aggregateDistinct.add(tempObj.getInt(Members.AGGREGATE_DISTINCT.name()));
    m_aggregateOutputColumns.add(tempObj.getInt(Members.AGGREGATE_OUTPUT_COLUMN.name()));
    if (jobj.isNull(Members.AGGREGATE_EXPRESSION.name())) {
      m_aggregateExpressions.add(null);
    }
 else {
      m_aggregateExpressions.add(AbstractExpression.fromJSONChild(tempObj,Members.AGGREGATE_EXPRESSION.name()));
    }
  }
  AbstractExpression.loadFromJSONArrayChild(m_groupByExpressions,jobj,Members.GROUPBY_EXPRESSIONS.name(),null);
  if (!jobj.isNull(Members.PARTIAL_GROUPBY_COLUMNS.name())) {
    JSONArray jarray2=jobj.getJSONArray(Members.PARTIAL_GROUPBY_COLUMNS.name());
    int numCols=jarray2.length();
    m_partialGroupByColumns=new ArrayList<>(numCols);
    for (int ii=0; ii < numCols; ++ii) {
      m_partialGroupByColumns.add(jarray2.getInt(ii));
    }
  }
  m_prePredicate=AbstractExpression.fromJSONChild(jobj,Members.PRE_PREDICATE.name());
  m_postPredicate=AbstractExpression.fromJSONChild(jobj,Members.POST_PREDICATE.name());
}
