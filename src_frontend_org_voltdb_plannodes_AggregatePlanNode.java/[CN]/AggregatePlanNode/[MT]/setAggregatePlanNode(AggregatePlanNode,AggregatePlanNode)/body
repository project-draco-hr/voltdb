{
  destination.m_isCoordinatingAggregator=origin.m_isCoordinatingAggregator;
  destination.m_prePredicate=origin.m_prePredicate;
  destination.m_postPredicate=origin.m_postPredicate;
  for (  AbstractExpression expr : origin.m_groupByExpressions) {
    destination.addGroupByExpression(expr);
  }
  List<ExpressionType> aggregateTypes=origin.m_aggregateTypes;
  List<Integer> aggregateDistinct=origin.m_aggregateDistinct;
  List<Integer> aggregateOutputColumns=origin.m_aggregateOutputColumns;
  List<AbstractExpression> aggregateExpressions=origin.m_aggregateExpressions;
  for (int i=0; i < origin.getAggregateTypesSize(); i++) {
    destination.addAggregate(aggregateTypes.get(i),aggregateDistinct.get(i) == 1 ? true : false,aggregateOutputColumns.get(i),aggregateExpressions.get(i));
  }
  destination.setOutputSchema(origin.getOutputSchema());
  return destination;
}
