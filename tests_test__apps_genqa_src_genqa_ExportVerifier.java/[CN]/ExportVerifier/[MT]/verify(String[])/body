{
  String remoteHosts[]=args[0].split(",");
  final String homeDir="/home/" + System.getProperty("user.name");
  final String sshDir=homeDir + "/.ssh";
  final String sshConfigPath=sshDir + "/config";
  loadAllPrivateKeys(new File(sshDir));
  OpenSshConfig sshConfig=null;
  if (new File(sshConfigPath).exists()) {
    sshConfig=new OpenSshConfig(new File(sshConfigPath));
  }
  final String defaultKnownHosts=sshDir + "/known_hosts";
  if (new File(defaultKnownHosts).exists()) {
    m_jsch.setKnownHosts(defaultKnownHosts);
  }
  for (  String hostString : remoteHosts) {
    String split[]=hostString.split(":");
    String host=split[0];
    RemoteHost rh=new RemoteHost();
    rh.path=split[1];
    String user=System.getProperty("user.name");
    int port=22;
    File identityFile=null;
    if (sshConfig != null) {
      OpenSshConfig.Host hostConfig=sshConfig.lookup(host);
      if (hostConfig.getUser() != null) {
        user=hostConfig.getUser();
      }
      if (hostConfig.getPort() != -1) {
        port=hostConfig.getPort();
      }
      if (hostConfig.getIdentityFile() != null) {
        identityFile=hostConfig.getIdentityFile();
      }
    }
    Session session=null;
    if (identityFile != null) {
      JSch jsch=new JSch();
      jsch.addIdentity(identityFile.getAbsolutePath());
      session=jsch.getSession(user,host,port);
    }
 else {
      session=m_jsch.getSession(user,host,port);
    }
    rh.session=session;
    session.setConfig("StrictHostKeyChecking","no");
    session.connect();
    final ChannelSftp channel=(ChannelSftp)session.openChannel("sftp");
    rh.channel=channel;
    channel.connect();
    m_hosts.add(rh);
  }
  m_partitions=Integer.parseInt(args[1]);
  for (int i=0; i < m_partitions; i++) {
    m_rowTxnIds.put(i,new HashSet<Long>());
  }
  long ttlVerified=0;
  for (  RemoteHost rh : m_hosts) {
    boolean existsOrIsDir=true;
    try {
      SftpATTRS stat=rh.channel.stat(rh.path);
      if (!stat.isDir()) {
        existsOrIsDir=false;
      }
    }
 catch (    SftpException e) {
      if (e.id == ChannelSftp.SSH_FX_NO_SUCH_FILE) {
        existsOrIsDir=false;
      }
 else {
        Throwables.propagate(e);
      }
    }
    if (!existsOrIsDir) {
      rh.channel.mkdir(rh.path);
    }
  }
  Pair<CSVReader,Runnable> csvPair=openNextExportFile();
  CSVReader csv=csvPair.getFirst();
  m_clientPath=new File(args[2]);
  if (!m_clientPath.exists() || !m_clientPath.isDirectory()) {
    if (!m_clientPath.mkdir()) {
      throw new IOException("Issue with transaction ID path");
    }
  }
  BufferedReader txnIdReader=openNextClientFile();
  String[] row;
  boolean quit=false;
  boolean more_rows=true;
  boolean more_txnids=true;
  long lastReportTime=System.currentTimeMillis();
  while (!quit) {
    more_rows=true;
    while (!canCheckClient() && more_rows) {
      row=csv.readNext();
      if (row == null) {
        csvPair.getSecond().run();
        csvPair=openNextExportFile();
        if (csvPair == null) {
          System.out.println("No more export rows");
          more_rows=false;
          break;
        }
 else {
          csv=csvPair.getFirst();
          row=csv.readNext();
        }
      }
      verifyRow(row);
      if (++ttlVerified % VALIDATION_REPORT_INTERVAL == 0) {
        System.out.println("Verified " + ttlVerified + " rows.");
      }
      Integer partition=Integer.parseInt(row[3]);
      Long rowTxnId=Long.parseLong(row[6]);
      boolean goodness=m_rowTxnIds.get(partition).add(rowTxnId);
      if (!goodness) {
        System.out.println("Duplicate TXN ID in export stream: " + rowTxnId);
        System.exit(-1);
      }
 else {
      }
    }
    more_txnids=true;
    while ((canCheckClient() || !more_rows) && more_txnids) {
      String txnId=txnIdReader.readLine();
      if (txnId == null) {
        txnIdReader=openNextClientFile();
        if (txnIdReader == null) {
          System.out.println("No more client txn IDs");
          more_txnids=false;
        }
 else {
          txnId=txnIdReader.readLine();
        }
      }
      if (txnId != null) {
        m_clientTxnIds.add(Long.parseLong(txnId));
      }
      boolean progress=true;
      while (!m_clientTxnIds.isEmpty() && progress) {
        Long txnid=m_clientTxnIds.first();
        if (foundTxnId(txnid)) {
          m_clientTxnIds.pollFirst();
        }
 else {
          progress=false;
        }
      }
    }
    if (!more_rows || !more_txnids) {
      quit=true;
    }
    if (System.currentTimeMillis() - lastReportTime > 5000) {
      StringBuilder sb=new StringBuilder();
      sb.append(m_clientTxnIds.size()).append(' ');
      for (      HashSet<Long> txnids : m_rowTxnIds.values()) {
        sb.append(txnids.size()).append(' ');
      }
      System.out.println(sb);
      lastReportTime=System.currentTimeMillis();
    }
  }
  if (more_rows || more_txnids) {
    System.out.println("Something wasn't drained");
    System.out.println("client txns remaining: " + m_clientTxnIds.size());
    System.out.println("Export rows remaining: ");
    int total=0;
    for (int i=0; i < m_partitions; i++) {
      total+=m_rowTxnIds.get(i).size();
      System.out.println("\tpartition: " + i + ", size: "+ m_rowTxnIds.get(i).size());
    }
    if (total != 0 && m_clientTxnIds.size() != 0) {
      System.out.println("THIS IS A REAL ERROR?!");
    }
  }
}
