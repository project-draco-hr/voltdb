{
  m_partitions=Integer.parseInt(args[0]);
  for (int i=0; i < m_partitions; i++) {
    m_rowTxnIds.put(i,new HashSet<Long>());
  }
  String[] row;
  long ttlVerified=0;
  long buffered_rows=0;
  File dataPath=new File(args[1]);
  if (!dataPath.exists() || !dataPath.isDirectory()) {
    throw new IOException("Issue with export data path");
  }
  m_exportFiles=dataPath.listFiles();
  Arrays.sort(m_exportFiles,new Comparator<File>(){
    public int compare(    File f1,    File f2){
      return Long.valueOf(f1.lastModified()).compareTo(f2.lastModified());
    }
  }
);
  CSVReader csv=openNextExportFile();
  File txnidPath=new File(args[2]);
  if (!txnidPath.exists() || !txnidPath.isDirectory()) {
    throw new IOException("Issue with transaction ID path");
  }
  m_clientFiles=txnidPath.listFiles();
  Arrays.sort(m_clientFiles,new Comparator<File>(){
    public int compare(    File f1,    File f2){
      long first=Long.parseLong(f1.getName().split("-")[0]);
      long second=Long.parseLong(f2.getName().split("-")[0]);
      return (int)(first - second);
    }
  }
);
  BufferedReader txnIdReader=openNextClientFile();
  boolean quit=false;
  boolean more_rows=true;
  boolean more_txnids=true;
  while (!quit) {
    more_rows=true;
    while (!canCheckClient() && more_rows) {
      row=csv.readNext();
      if (row == null) {
        csv=openNextExportFile();
        if (csv == null) {
          System.out.println("No more export rows");
          more_rows=false;
          break;
        }
 else {
          row=csv.readNext();
        }
      }
      verifyRow(row);
      if (++ttlVerified % 1000 == 0) {
        System.out.println("Verified " + ttlVerified + " rows.");
      }
      Integer partition=Integer.parseInt(row[3]);
      Long rowTxnId=Long.parseLong(row[6]);
      boolean goodness=m_rowTxnIds.get(partition).add(rowTxnId);
      if (!goodness) {
        System.out.println("Duplicate TXN ID in export stream: " + rowTxnId);
        System.exit(-1);
      }
 else {
      }
    }
    more_txnids=true;
    while ((canCheckClient() || !more_rows) && more_txnids) {
      String txnId=txnIdReader.readLine();
      if (txnId == null) {
        txnIdReader=openNextClientFile();
        if (txnIdReader == null) {
          System.out.println("No more client txn IDs");
          more_txnids=false;
        }
 else {
          txnId=txnIdReader.readLine();
        }
      }
      if (txnId != null) {
        m_clientTxnIds.add(Long.parseLong(txnId));
      }
      boolean progress=true;
      while (!m_clientTxnIds.isEmpty() && progress) {
        Long txnid=m_clientTxnIds.first();
        if (foundTxnId(txnid)) {
          m_clientTxnIds.pollFirst();
        }
 else {
          progress=false;
        }
      }
    }
    if (!more_rows || !more_txnids) {
      quit=true;
    }
  }
  if (more_rows || more_txnids) {
    System.out.println("Something wasn't drained");
    System.out.println("client txns remaining: " + m_clientTxnIds.size());
    System.out.println("Export rows remaining: ");
    int total=0;
    for (int i=0; i < m_partitions; i++) {
      total+=m_rowTxnIds.get(i).size();
      System.out.println("\tpartition: " + i + ", size: "+ m_rowTxnIds.get(i).size());
    }
    if (total != 0 && m_clientTxnIds.size() != 0) {
      System.out.println("THIS IS A REAL ERROR?!");
    }
  }
}
