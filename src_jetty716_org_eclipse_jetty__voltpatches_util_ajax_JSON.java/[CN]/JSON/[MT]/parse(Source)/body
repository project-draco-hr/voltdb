{
  int comment_state=0;
  while (source.hasNext()) {
    char c=source.peek();
    if (comment_state == 1) {
switch (c) {
case '/':
        comment_state=-1;
      break;
case '*':
    comment_state=2;
}
}
 else if (comment_state > 1) {
switch (c) {
case '*':
  comment_state=3;
break;
case '/':
if (comment_state == 3) comment_state=0;
 else comment_state=2;
break;
default :
comment_state=2;
}
}
 else if (comment_state < 0) {
switch (c) {
case '\r':
case '\n':
comment_state=0;
break;
default :
break;
}
}
 else {
switch (c) {
case '{':
return parseObject(source);
case '[':
return parseArray(source);
case '"':
return parseString(source);
case '-':
return parseNumber(source);
case 'n':
complete("null",source);
return null;
case 't':
complete("true",source);
return Boolean.TRUE;
case 'f':
complete("false",source);
return Boolean.FALSE;
case 'u':
complete("undefined",source);
return null;
case 'N':
complete("NaN",source);
return null;
case '/':
comment_state=1;
break;
default :
if (Character.isDigit(c)) return parseNumber(source);
 else if (Character.isWhitespace(c)) break;
return handleUnknown(source,c);
}
}
source.next();
}
return null;
}
