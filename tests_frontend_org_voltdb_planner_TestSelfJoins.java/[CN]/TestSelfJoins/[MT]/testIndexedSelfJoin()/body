{
  AbstractPlanNode.enableVerboseExplainForDebugging();
  IndexScanPlanNode c;
  AbstractPlanNode apn;
  AbstractPlanNode pn;
  NestLoopIndexPlanNode nlij;
  List<AbstractExpression> searchKeys;
  apn=compile("select * FROM R2 A, R2 B WHERE A.A = B.A AND B.C > 1 ORDER BY B.C");
  System.out.println(apn.toExplainPlanString());
  pn=apn.getChild(0).getChild(0);
  apn=compile("select * FROM R2 A, R2 B WHERE A.A = B.A AND B.C > 1 ORDER BY B.A, B.C");
  System.out.println(apn.toExplainPlanString());
  pn=apn.getChild(0).getChild(0);
  apn=compile("select * FROM R2 A, R2 B WHERE A.A = B.A AND B.A > 1 ORDER BY B.A, B.C");
  System.out.println(apn.toExplainPlanString());
  pn=apn.getChild(0).getChild(0);
  apn=compile("select B.C, MAX(A.C) FROM R2 A, R2 B WHERE A.A = B.A AND B.C > 1 GROUP BY B.C ORDER BY B.C");
  System.out.println(apn.toExplainPlanString());
  pn=apn.getChild(0).getChild(0);
  apn=compile("select B.C, B.A FROM R2 A, R2 B WHERE A.A = B.A AND B.C > 1 GROUP BY B.A, B.C ORDER BY B.A, B.C");
  pn=apn.getChild(0).getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof HashAggregatePlanNode);
  pn=pn.getChild(0);
  apn=compile("select B.C, B.A FROM R2 A, R2 B WHERE A.A = B.A AND B.A > 1 GROUP BY B.A, B.C ORDER BY B.A, B.C");
  pn=apn.getChild(0).getChild(0);
  apn=compile("select B.C, B.A FROM R2 A, R2 B WHERE A.A = B.A AND B.C > 1 GROUP BY B.A, A.C ORDER BY B.A, A.C");
  pn=apn.getChild(0).getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof HashAggregatePlanNode);
  pn=pn.getChild(0);
  apn=compile("select B.C, B.A FROM R2 A, R2 B WHERE A.A = B.A AND B.A > 1 GROUP BY B.C, B.A ORDER BY B.A, B.C");
  pn=apn.getChild(0).getChild(0);
}
