{
  AbstractPlanNode pn=compile("select * FROM R1 A LEFT JOIN R1 B ON A.C = B.C AND A.A > 1 AND B.A < 0");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)pn;
  assertNotNull(nl.getPreJoinPredicate());
  AbstractExpression p=nl.getPreJoinPredicate();
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,p.getExpressionType());
  assertNotNull(nl.getJoinPredicate());
  p=nl.getJoinPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertNull(nl.getWherePredicate());
  assertEquals(2,nl.getChildCount());
  SeqScanPlanNode c=(SeqScanPlanNode)nl.getChild(0);
  assertNull(c.getPredicate());
  c=(SeqScanPlanNode)nl.getChild(1);
  assertNotNull(c.getPredicate());
  p=c.getPredicate();
  assertEquals(ExpressionType.COMPARE_LESSTHAN,p.getExpressionType());
}
