{
  JType jt;
  Token t;
  String rname;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MAP_TKN:
    jt=Map();
{
    if (true)     return jt;
  }
break;
case VECTOR_TKN:
jt=Vector();
{
if (true) return jt;
}
break;
case BYTE_TKN:
jj_consume_token(BYTE_TKN);
{
if (true) return new JByte();
}
break;
case BOOLEAN_TKN:
jj_consume_token(BOOLEAN_TKN);
{
if (true) return new JBoolean();
}
break;
case INT_TKN:
jj_consume_token(INT_TKN);
{
if (true) return new JInt();
}
break;
case LONG_TKN:
jj_consume_token(LONG_TKN);
{
if (true) return new JLong();
}
break;
case FLOAT_TKN:
jj_consume_token(FLOAT_TKN);
{
if (true) return new JFloat();
}
break;
case DOUBLE_TKN:
jj_consume_token(DOUBLE_TKN);
{
if (true) return new JDouble();
}
break;
case USTRING_TKN:
jj_consume_token(USTRING_TKN);
{
if (true) return new JString();
}
break;
case BUFFER_TKN:
jj_consume_token(BUFFER_TKN);
{
if (true) return new JBuffer();
}
break;
case IDENT_TKN:
rname=ModuleName();
if (rname.indexOf('.',0) < 0) {
rname=curModuleName + "." + rname;
}
JRecord r=(JRecord)recTab.get(rname);
if (r == null) {
System.out.println("Type " + rname + " not known. Exiting.");
System.exit(1);
}
{
if (true) return r;
}
break;
default :
jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error("Missing return statement in function");
}
