{
  VoltTable vt;
  int it;
  Client client=this.getClient();
  load(client);
  vt=client.callProcedure("@AdHoc","select * from O1 order by A_INT DESC").getResults()[0];
  assertTrue(vt.getRowCount() == 20);
  it=19;
  while (vt.advanceRow()) {
    Integer key=(Integer)vt.get(0,VoltType.INTEGER);
    Integer a=(Integer)vt.get(1,VoltType.INTEGER);
    String b=(String)vt.get(2,VoltType.STRING);
    String c=(String)vt.get(3,VoltType.STRING);
    int pos=a_int.indexOf(a);
    assertEquals(it,a.intValue());
    assertEquals(pos,key.intValue());
    assertEquals(b,a_inline_str.get(pos));
    assertEquals(c,a_pool_str.get(pos));
    it--;
  }
  vt=client.callProcedure("@AdHoc","select * from O1 order by A_INT DESC, A_INT").getResults()[0];
  assertTrue(vt.getRowCount() == 20);
  it=19;
  while (vt.advanceRow()) {
    Integer key=(Integer)vt.get(0,VoltType.INTEGER);
    Integer a=(Integer)vt.get(1,VoltType.INTEGER);
    String b=(String)vt.get(2,VoltType.STRING);
    String c=(String)vt.get(3,VoltType.STRING);
    int pos=a_int.indexOf(a);
    assertEquals(it,a.intValue());
    assertEquals(pos,key.intValue());
    assertEquals(b,a_inline_str.get(pos));
    assertEquals(c,a_pool_str.get(pos));
    it--;
  }
  vt=client.callProcedure("@AdHoc","select * from O1 order by A_INLINE_STR DESC").getResults()[0];
  assertTrue(vt.getRowCount() == 20);
  String lastString="z";
  while (vt.advanceRow()) {
    Integer key=(Integer)vt.get(0,VoltType.INTEGER);
    Integer a=(Integer)vt.get(1,VoltType.INTEGER);
    String b=(String)vt.get(2,VoltType.STRING);
    String c=(String)vt.get(3,VoltType.STRING);
    assertTrue(lastString.compareTo(b) > 0);
    lastString=b;
    int pos=a_inline_str.indexOf(b);
    assertEquals(pos,key.intValue());
    assertEquals(a,a_int.get(pos));
    assertEquals(c,a_pool_str.get(pos));
  }
  vt=client.callProcedure("@AdHoc","select * from O1 order by A_POOL_STR DESC").getResults()[0];
  assertTrue(vt.getRowCount() == 20);
  lastString=bigString + "99";
  while (vt.advanceRow()) {
    Integer key=(Integer)vt.get(0,VoltType.INTEGER);
    Integer a=(Integer)vt.get(1,VoltType.INTEGER);
    String b=(String)vt.get(2,VoltType.STRING);
    String c=(String)vt.get(3,VoltType.STRING);
    assertTrue(lastString.compareTo(c) > 0);
    lastString=c;
    int pos=a_pool_str.indexOf(c);
    assertEquals(pos,key.intValue());
    assertEquals(a,a_int.get(pos));
    assertEquals(b,a_inline_str.get(pos));
  }
  loadO3(client);
  Integer lastPk2=20;
  vt=client.callProcedure("@AdHoc","SELECT * FROM O3 WHERE PK1 = 0 ORDER BY PK2 DESC").getResults()[0];
  assertTrue(vt.getRowCount() == 20);
  System.out.println(vt.toString());
  while (vt.advanceRow()) {
    assertEquals(0,vt.getLong(0));
    Integer pk2=(Integer)vt.get(1,VoltType.INTEGER);
    assertTrue(lastPk2.compareTo(pk2) > 0);
    lastPk2=pk2;
  }
  lastPk2=20;
  vt=client.callProcedure("@AdHoc","SELECT * FROM O3 WHERE PK1 < 1 ORDER BY PK2 DESC").getResults()[0];
  assertTrue(vt.getRowCount() == 20);
  System.out.println(vt.toString());
  while (vt.advanceRow()) {
    assertEquals(0,vt.getLong(0));
    Integer pk2=(Integer)vt.get(1,VoltType.INTEGER);
    assertTrue(lastPk2.compareTo(pk2) > 0);
    lastPk2=pk2;
  }
}
