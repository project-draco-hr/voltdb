{
  VoltTable[] results;
  SynthesizedPlanFragment pfs[];
  Table catTable=ctx.getDatabase().getTables().getIgnoreCase(tableName);
  if (catTable == null) {
    throw new VoltAbortException("Table not present in catalog.");
  }
  tableName=catTable.getTypeName();
  int columnCount=table.getColumnCount();
  String insertProcName=String.format("%s.insert",tableName);
  Procedure proc=ctx.getDatabase().getProcedures().get(insertProcName);
  if (proc == null) {
    throw new VoltAbortException(String.format("Unable to locate auto-generated CRUD insert statement for table %s",tableName));
  }
  Statement catStmt=proc.getStatements().get("sql");
  if (catStmt == null) {
    throw new VoltAbortException(String.format("Unable to find SQL statement for found table %s: BAD",tableName));
  }
  SQLStmt stmt=new SQLStmt(catStmt.getSqltext());
  SQLStmtInitializer.initSQLStmt(stmt,catStmt);
  if (catTable.getIsreplicated()) {
    long queued=0;
    long executed=0;
    table.resetRowPosition();
    for (int i=0; table.advanceRow(); ++i) {
      Object[] params=new Object[columnCount];
      for (int col=0; col < columnCount; ++col) {
        params[col]=table.get(col,table.getColumnType(col));
      }
      voltQueueSQL(stmt,params);
      ++queued;
      if ((i % 100) == 0) {
        executed+=executeSQL();
      }
    }
    if (queued > executed) {
      executed+=executeSQL();
    }
    return executed;
  }
 else {
    int partitionCol=catTable.getPartitioncolumn().getIndex();
    int intType=catTable.getPartitioncolumn().getType();
    VoltType partitionType=VoltType.get((byte)intType);
    int numPartitions=m_cluster.getPartitions().size();
    VoltTable partitionedTables[]=new VoltTable[numPartitions];
    for (int i=0; i < partitionedTables.length; i++) {
      partitionedTables[i]=table.clone(1024 * 1024);
    }
    while (table.advanceRow()) {
      int p=0;
      try {
        p=TheHashinator.hashToPartition(table.get(partitionCol,partitionType));
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new RuntimeException(e.getMessage());
      }
      partitionedTables[p].add(table);
    }
    int num_exec_sites=VoltDB.instance().getCatalogContext().siteTracker.getLiveSiteCount();
    pfs=new SynthesizedPlanFragment[num_exec_sites + 1];
    int site_index=0;
    for (    long site : VoltDB.instance().getCatalogContext().siteTracker.getAllLiveSites()) {
      ParameterSet params=new ParameterSet();
      int partition=VoltDB.instance().getCatalogContext().siteTracker.getPartitionForSite(site);
      params.setParameters(tableName,partitionedTables[partition]);
      pfs[site_index]=new SynthesizedPlanFragment();
      pfs[site_index].fragmentId=SysProcFragmentId.PF_distribute;
      pfs[site_index].outputDepId=DEP_distribute;
      pfs[site_index].inputDepIds=new int[]{};
      pfs[site_index].multipartition=false;
      pfs[site_index].siteId=site;
      pfs[site_index].parameters=params;
      site_index++;
    }
    pfs[num_exec_sites]=new SynthesizedPlanFragment();
    pfs[num_exec_sites].fragmentId=SysProcFragmentId.PF_aggregate;
    pfs[num_exec_sites].inputDepIds=new int[]{DEP_distribute};
    pfs[num_exec_sites].outputDepId=DEP_aggregate;
    pfs[num_exec_sites].multipartition=false;
    pfs[num_exec_sites].parameters=new ParameterSet();
    results=executeSysProcPlanFragments(pfs,DEP_aggregate);
    return results[0].asScalarLong();
  }
}
