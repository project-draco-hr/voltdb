{
  Table catTable=ctx.getDatabase().getTables().getIgnoreCase(tableName);
  if (catTable == null) {
    throw new VoltAbortException("Table not present in catalog.");
  }
  boolean isUpsert=(upsertMode != 0);
  if (isUpsert) {
    boolean hasPkey=false;
    for (    Constraint c : catTable.getConstraints()) {
      if (c.getType() == ConstraintType.PRIMARY_KEY.getValue()) {
        hasPkey=true;
        break;
      }
    }
    if (!hasPkey) {
      throw new VoltAbortException(String.format("The --update argument cannot be used for LoadMultipartitionTable because the table %s does not have a primary key. " + "Either remove the --update argument or add a primary key to the table.",tableName));
    }
  }
  final String action=(isUpsert ? "upsert" : "insert");
  tableName=catTable.getTypeName();
  int columnCount=table.getColumnCount();
  String crudProcName=String.format("%s.%s",tableName.toUpperCase(),action);
  Procedure proc=ctx.ensureDefaultProcLoaded(crudProcName);
  if (proc == null) {
    throw new VoltAbortException(String.format("Unable to locate auto-generated CRUD %s statement for table %s",action,tableName));
  }
  m_runner.setProcNameToLoadForFragmentTasks(crudProcName);
  Statement catStmt=proc.getStatements().get(VoltDB.ANON_STMT_NAME);
  if (catStmt == null) {
    throw new VoltAbortException(String.format("Unable to find SQL statement for found table %s: BAD",tableName));
  }
  SQLStmt stmt=new SQLStmt(catStmt.getSqltext());
  m_runner.initSQLStmt(stmt,catStmt);
  if (catTable.getIsreplicated()) {
    long queued=0;
    long executed=0;
    table.resetRowPosition();
    for (int i=0; table.advanceRow(); ++i) {
      Object[] params=new Object[columnCount];
      for (int col=0; col < columnCount; ++col) {
        params[col]=table.get(col,table.getColumnType(col));
      }
      voltQueueSQL(stmt,params);
      ++queued;
      if ((i % 100) == 0) {
        executed+=executeSQL();
      }
    }
    if (queued > executed) {
      executed+=executeSQL();
    }
    return executed;
  }
 else {
    throw new VoltAbortException("LoadMultipartitionTable no longer supports loading partitioned tables" + " use CRUD procs instead");
  }
}
