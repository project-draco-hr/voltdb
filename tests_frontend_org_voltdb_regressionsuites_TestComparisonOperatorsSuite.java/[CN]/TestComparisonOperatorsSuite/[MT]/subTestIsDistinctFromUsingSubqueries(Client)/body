{
  assert(!isHSQL());
  String sql;
  sql="SELECT wage salary, count(*) from S2 " + "WHERE wage is distinct from  " + "(SELECT MIN(wage) FROM S1 where wage is distinct from 2553) "+ "GROUP BY wage "+ "HAVING COUNT(*) is distinct from 7 "+ "ORDER BY wage";
  validateTableOfLongs(client,sql,new long[][]{{Long.MIN_VALUE,1},{5253,1}});
  sql="SELECT id, wage, count(*) from S1 " + "WHERE wage is distinct from  " + "(SELECT wage FROM S2 where id is not distinct from 4) "+ "GROUP BY wage, id HAVING COUNT(*) is distinct from 7 ORDER BY id;";
  validateTableOfLongs(client,sql,new long[][]{{1,1000,1},{3,3000,1},{5,2553,1},{7,4552,1},{9,5152,1}});
  sql="SELECT id, wage salary, count(*)  from S1 " + "WHERE  (select S2.wage from S2 where S2.ID<>1 and S2.id<>5) is not distinct from wage " + "GROUP BY wage, id HAVING COUNT(*) is distinct from 7 ORDER BY wage;";
  validateTableOfLongs(client,sql,new long[][]{{10,Long.MIN_VALUE,1}});
  sql="select S1.wage, count(*) from S1 Right Join S2 " + "On S2.wage is distinct from  " + "(SELECT MIN(wage) FROM S1 where wage is  distinct from 1000) "+ "GROUP BY S1.wage  having COUNT(*) is not distinct from 1;";
  validateTableOfLongs(client,sql,new long[][]{});
  sql="select * from S1 where S1.wage = ANY " + "(select S2.wage from S2 where S2.wage is distinct from  5253 or S2.wage is not distinct from  1000);";
  validateTableOfLongs(client,sql,new long[][]{{1,1000,1}});
  sql="select * from S1 where S1.WAGE is not distinct from ANY " + "(select S2.wage from S2 where S2.wage is distinct from  5253 or S2.Wage is not distinct from  1000);";
  verifyStmtFails(client,sql,"unexpected token: SELECT");
  sql="select * from S1 where S1.WAGE is not distinct from ANY " + "(select S2.wage from S2 where S2.wage is distinct from  5253 or S2.Wage is not distinct from  Null);";
  verifyStmtFails(client,sql,"unexpected token: SELECT");
}
