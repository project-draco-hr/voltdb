{
  if (!database.isReferentialIntegrity()) {
    return;
  }
  TriggerDef[] trigVec=triggerLists[trigVecIndex];
  for (int i=0, size=trigVec.length; i < size; i++) {
    TriggerDef td=trigVec[i];
    boolean sqlTrigger=td instanceof TriggerDefSQL;
    if (td.hasOldTable()) {
    }
    if (td.isForEachRow()) {
      while (rowSet.hasNext()) {
        Object[] oldData=null;
        Object[] newData=null;
switch (td.triggerType) {
case Trigger.DELETE_AFTER_ROW:
          oldData=rowSet.getNext();
        if (!sqlTrigger) {
          oldData=(Object[])ArrayUtil.duplicateArray(oldData);
        }
      break;
case Trigger.INSERT_AFTER_ROW:
    newData=rowSet.getNext();
  if (!sqlTrigger) {
    newData=(Object[])ArrayUtil.duplicateArray(newData);
  }
break;
}
td.pushPair(session,oldData,newData);
}
rowSet.beforeFirst();
}
 else {
td.pushPair(session,null,null);
}
}
}
