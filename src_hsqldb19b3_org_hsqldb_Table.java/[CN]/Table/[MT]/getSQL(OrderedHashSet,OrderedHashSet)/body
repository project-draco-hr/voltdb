{
  for (int i=0; i < constraintList.length; i++) {
    Constraint c=constraintList[i];
    if (c.isForward) {
      unresolved.add(c);
    }
 else     if (c.getConstraintType() == Constraint.UNIQUE || c.getConstraintType() == Constraint.PRIMARY_KEY) {
      resolved.add(c.getName());
    }
  }
  HsqlArrayList list=new HsqlArrayList();
  list.add(getSQL());
  if (isText()) {
    if (((TextTable)this).isConnected() && isDataReadOnly()) {
      StringBuffer sb=new StringBuffer(64);
      sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
      sb.append(getName().getSchemaQualifiedStatementName());
      sb.append(' ').append(Tokens.T_READONLY).append(' ');
      sb.append(Tokens.T_TRUE);
      list.add(sb.toString());
    }
    String dataSource=((TextTable)this).getDataSourceDDL();
    if (dataSource != null) {
      list.add(dataSource);
    }
    String header=((TextTable)this).getDataSourceHeader();
    if (header != null) {
      list.add(header);
    }
  }
  if (!isTemp && hasIdentityColumn()) {
    list.add(NumberSequence.getRestartSQL(this));
  }
  for (int i=0; i < indexList.length; i++) {
    if (!indexList[i].isConstraint()) {
      list.add(indexList[i].getSQL());
    }
  }
  String[] array=new String[list.size()];
  list.toArray(array);
  return array;
}
