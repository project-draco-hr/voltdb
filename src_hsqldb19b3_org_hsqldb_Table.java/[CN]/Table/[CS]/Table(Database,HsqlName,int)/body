{
  this.database=database;
  tableName=name;
  persistenceId=database.persistentStoreCollection.getNextId();
switch (type) {
case SYSTEM_SUBQUERY:
    persistenceScope=SCOPE_STATEMENT;
  isSessionBased=true;
break;
case SYSTEM_TABLE:
persistenceScope=SCOPE_FULL;
isSchemaBased=true;
break;
case CACHED_TABLE:
if (DatabaseURL.isFileBasedDatabaseType(database.getType())) {
persistenceScope=SCOPE_FULL;
isSchemaBased=true;
isCached=true;
isLogged=!database.isFilesReadOnly();
break;
}
type=MEMORY_TABLE;
case MEMORY_TABLE:
persistenceScope=SCOPE_FULL;
isSchemaBased=true;
isLogged=!database.isFilesReadOnly();
break;
case TEMP_TABLE:
persistenceScope=SCOPE_TRANSACTION;
isTemp=true;
isSchemaBased=true;
isSessionBased=true;
break;
case TEMP_TEXT_TABLE:
persistenceScope=SCOPE_SESSION;
if (!DatabaseURL.isFileBasedDatabaseType(database.getType())) {
throw Error.error(ErrorCode.DATABASE_IS_MEMORY_ONLY);
}
isSchemaBased=true;
isSessionBased=true;
isTemp=true;
isText=true;
isReadOnly=true;
break;
case TEXT_TABLE:
persistenceScope=SCOPE_FULL;
if (!DatabaseURL.isFileBasedDatabaseType(database.getType())) {
throw Error.error(ErrorCode.DATABASE_IS_MEMORY_ONLY);
}
isSchemaBased=true;
isText=true;
break;
case VIEW_TABLE:
persistenceScope=SCOPE_STATEMENT;
isSchemaBased=true;
isSessionBased=true;
isView=true;
break;
case RESULT_TABLE:
persistenceScope=SCOPE_SESSION;
isSessionBased=true;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Table");
}
tableType=type;
primaryKeyCols=null;
primaryKeyTypes=null;
identityColumn=-1;
columnList=new HashMappedList();
indexList=Index.emptyArray;
constraintList=Constraint.emptyArray;
fkPath=Constraint.emptyArray;
fkConstraints=Constraint.emptyArray;
fkMainConstraints=Constraint.emptyArray;
checkConstraints=Constraint.emptyArray;
triggerList=TriggerDef.emptyArray;
triggerLists=new TriggerDef[TriggerDef.NUM_TRIGS][];
for (int i=0; i < TriggerDef.NUM_TRIGS; i++) {
triggerLists[i]=TriggerDef.emptyArray;
}
if (database.isFilesReadOnly() && isFileBased()) {
this.isReadOnly=true;
}
if (!isTemp) {
createDefaultStore();
}
}
