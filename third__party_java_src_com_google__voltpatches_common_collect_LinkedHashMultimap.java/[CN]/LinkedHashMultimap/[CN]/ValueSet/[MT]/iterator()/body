{
  return new Iterator<V>(){
    ValueSetLink<K,V> nextEntry=firstEntry;
    ValueEntry<K,V> toRemove;
    int expectedModCount=modCount;
    private void checkForComodification(){
      if (modCount != expectedModCount) {
        throw new ConcurrentModificationException();
      }
    }
    @Override public boolean hasNext(){
      checkForComodification();
      return nextEntry != ValueSet.this;
    }
    @Override public V next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      ValueEntry<K,V> entry=(ValueEntry<K,V>)nextEntry;
      V result=entry.getValue();
      toRemove=entry;
      nextEntry=entry.getSuccessorInValueSet();
      return result;
    }
    @Override public void remove(){
      checkForComodification();
      checkRemove(toRemove != null);
      ValueSet.this.remove(toRemove.getValue());
      expectedModCount=modCount;
      toRemove=null;
    }
  }
;
}
