{
  assert(m_holdingDistributedLock);
  assert(m_currentParticipants == 0);
  int newProposalVersion=-1;
  try {
    List<String> results=m_zk.getChildren(m_barrierResultsPath,false);
    for (    String resultNode : results) {
      m_zk.delete(ZKUtil.joinZKPath(m_barrierResultsPath,resultNode),-1);
    }
    Stat newProposalStat=m_zk.setData(m_barrierResultsPath,proposal,-1);
    m_zk.create(m_myParticipantPath,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
    newProposalVersion=newProposalStat.getVersion();
    m_currentParticipants=1;
  }
 catch (  KeeperException.SessionExpiredException e) {
    m_log.debug(m_stateMachineId + ": Received SessionExpiredException in wakeCommunityWithProposal");
  }
catch (  KeeperException.ConnectionLossException e) {
    m_log.debug(m_stateMachineId + ": Received ConnectionLossException in wakeCommunityWithProposal");
  }
catch (  InterruptedException e) {
    m_log.debug(m_stateMachineId + ": Received InterruptedException in wakeCommunityWithProposal");
  }
catch (  Exception e) {
    org.voltdb.VoltDB.crashLocalVoltDB("Unexpected failure in StateMachine.",true,e);
  }
  return newProposalVersion;
}
