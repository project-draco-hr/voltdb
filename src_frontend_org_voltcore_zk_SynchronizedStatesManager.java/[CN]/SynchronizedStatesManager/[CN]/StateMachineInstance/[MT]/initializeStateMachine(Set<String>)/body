{
  addIfMissing(m_statePath,CreateMode.PERSISTENT,null);
  addIfMissing(m_lockPath,CreateMode.PERSISTENT,null);
  addIfMissing(m_barrierParticipantsPath,CreateMode.PERSISTENT,null);
  lockLocalState();
  boolean ownDistributedLock=requestDistributedLock();
  ByteBuffer startStates=buildProposal(REQUEST_TYPE.INITIALIZING,m_requestedInitialState.asReadOnlyBuffer(),m_requestedInitialState.asReadOnlyBuffer());
  addIfMissing(m_barrierResultsPath,CreateMode.PERSISTENT,startStates.array());
  boolean stateMachineNodeCreated=false;
  if (ownDistributedLock) {
    stateMachineNodeCreated=addIfMissing(ZKUtil.joinZKPath(m_statePath,"STATE_INITIALIZED"),CreateMode.PERSISTENT,null);
  }
  if (m_membershipChangePending) {
    getLatestMembership();
  }
 else {
    m_knownMembers=knownMembers;
  }
  if (stateMachineNodeCreated) {
    assert(ownDistributedLock);
    m_synchronizedState=m_requestedInitialState;
    m_requestedInitialState=null;
    m_lastProposalVersion=getProposalVersion();
    ByteBuffer readOnlyResult=m_synchronizedState.asReadOnlyBuffer();
    byte result[]=new byte[1];
    result[0]=(byte)(1);
    addResultEntry(result);
    m_lockWaitingOn="bogus";
    m_log.info(m_stateMachineId + ": Initialized (first member) with State " + stateToString(m_synchronizedState.asReadOnlyBuffer()));
    m_initializationCompleted=true;
    cancelDistributedLock();
    checkForBarrierParticipantsChange();
    try {
      setInitialState(readOnlyResult);
    }
 catch (    Exception e) {
      if (m_log.isDebugEnabled()) {
        m_log.debug("Error in StateMachineInstance callbacks.",e);
      }
      m_initializationCompleted=false;
      m_shared_es.submit(new CallbackExceptionHandler(this));
    }
  }
 else {
    if (ownDistributedLock) {
      initializeFromActiveCommunity();
    }
 else {
      addResultEntry(null);
      Stat nodeStat=new Stat();
      boolean resultNodeFound=false;
{
        try {
          m_zk.getData(m_barrierResultsPath,false,nodeStat);
          resultNodeFound=true;
        }
 catch (        NoNodeException noNode) {
        }
      }
      while (!resultNodeFound)       ;
      m_lastProposalVersion=nodeStat.getVersion();
      checkForBarrierParticipantsChange();
    }
    assert(!debugIsLocalStateLocked());
  }
}
