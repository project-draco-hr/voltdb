{
  Client client=this.getClient();
  client.callProcedure("InsertDecimal",1,3.4f);
  client.callProcedure("InsertDecimal",2,3.4d);
  client.callProcedure("InsertDecimal",3,1f);
  client.callProcedure("InsertDecimal",4,1d);
  client.callProcedure("InsertDecimal",5,0.25f);
  client.callProcedure("InsertDecimal",6,0.25d);
  client.callProcedure("InsertDecimal",7,3.3f);
  client.callProcedure("InsertDecimal",8,3.3d);
  try {
    client.callProcedure("InsertDecimal",9,Double.MAX_VALUE);
    fail();
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("has more than  38 digits of precision"));
  }
catch (  Exception e) {
    fail();
  }
  try {
    client.callProcedure("InsertDecimal",9,-Double.MAX_VALUE);
    fail();
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("has more than  38 digits of precision"));
  }
catch (  Exception e) {
    fail();
  }
  try {
    client.callProcedure("InsertDecimal",9,Float.MAX_VALUE);
    fail();
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("has more than  38 digits of precision"));
  }
catch (  Exception e) {
    fail();
  }
  try {
    client.callProcedure("InsertDecimal",9,-Float.MAX_VALUE);
    fail();
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("has more than  38 digits of precision"));
  }
catch (  Exception e) {
    fail();
  }
  double nand=0.0d / 0.0d;
  float nanf=0.0f / 0.0f;
  try {
    client.callProcedure("InsertDecimal",9,nand);
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("NumberFormatException"));
  }
catch (  Exception e) {
    fail();
  }
  try {
    client.callProcedure("InsertDecimal",9,nanf);
    fail();
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("NumberFormatException"));
  }
catch (  Exception e) {
    fail();
  }
  client.callProcedure("InsertDecimal",9,Double.MIN_VALUE);
  client.callProcedure("InsertDecimal",10,Float.MIN_VALUE);
  client.callProcedure("InsertDecimal",11,123456789.01234567890123456789f);
  VoltTable table;
  table=client.callProcedure("@AdHoc","SELECT A_DECIMAL FROM WITH_DEFAULTS WHERE PKEY = 11").getResults()[0];
  assertTrue(table.getRowCount() == 1);
  table.advanceRow();
  float f=table.getDecimalAsBigDecimal(0).floatValue();
  assertEquals(123456789.01234567890123456789f,f,0.000000000001);
  client.callProcedure("InsertDecimal",12,123456789.01234567890123456789d);
  table=client.callProcedure("@AdHoc","SELECT A_DECIMAL FROM WITH_DEFAULTS WHERE PKEY = 12").getResults()[0];
  assertTrue(table.getRowCount() == 1);
  table.advanceRow();
  double d=table.getDecimalAsBigDecimal(0).doubleValue();
  assertEquals(123456789.01234567890123456789d,d,0.000000000001);
}
