{
  final Client client=this.getClient();
  long millisecondsSinceEpoch=1001001001L;
  TimestampType tst=new TimestampType(millisecondsSinceEpoch * 1000);
  java.util.Date utild=new java.util.Date(millisecondsSinceEpoch);
  java.sql.Date sqld=new java.sql.Date(millisecondsSinceEpoch);
  java.sql.Timestamp ts=new java.sql.Timestamp(millisecondsSinceEpoch);
  int lowerBound=pkey.incrementAndGet();
  client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,tst,null,null,null,null,null,null,null);
  client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,utild,null,null,null,null,null,null,null);
  client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,sqld,null,null,null,null,null,null,null);
  client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,ts,null,null,null,null,null,null,null);
  client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,tst,null,null,null,null,null,null,null);
  client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,utild,null,null,null,null,null,null,null);
  client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,sqld,null,null,null,null,null,null,null);
  client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,ts,null,null,null,null,null,null,null);
  client.callProcedure("Insert","ALLOW_NULLS",pkey.incrementAndGet(),0,0,0,0,0.0,tst,null,null,null,null,null,null,null);
  client.callProcedure("Insert","ALLOW_NULLS and use sql.Timestamp",pkey.incrementAndGet(),0,0,0,0,0.0,tst,null,null,null,null,null,null,null);
  client.callProcedure("Insert","ALLOW_NULLS and use sql.Date",pkey.incrementAndGet(),0,0,0,0,0.0,tst,null,null,null,null,null,null,null);
  client.callProcedure("Insert","ALLOW_NULLS and use util.Date",pkey.incrementAndGet(),0,0,0,0,0.0,tst,null,null,null,null,null,null,null);
  ClientResponse cr;
  VoltTable[] result;
  VoltTable vt;
  cr=client.callProcedure("@AdHoc","SELECT A_TIMESTAMP from ALLOW_NULLS where PKEY > " + lowerBound + ";");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults();
  assertEquals(12,result[0].getRowCount());
  vt=result[0];
  while (vt.advanceRow()) {
    assertEquals(tst,vt.getTimestampAsTimestamp(0));
    assertEquals(ts,vt.getTimestampAsSqlTimestamp(0));
    assertEquals(sqld,vt.getTimestampAsSqlDate(0));
    assertEquals(utild,vt.getTimestampAsUtilDate(0));
  }
  long microsecondsSinceEpoch=1001001001001L;
  TimestampType tst_micro=new TimestampType(microsecondsSinceEpoch);
  java.sql.Timestamp ts_micro=new java.sql.Timestamp(microsecondsSinceEpoch / 1000);
  assertEquals(ts,ts_micro);
  assertEquals(1000000,ts_micro.getNanos());
  ts_micro.setNanos(ts_micro.getNanos() + 1000);
  assertNotSame(tst,tst_micro);
  assertNotSame(ts,ts_micro);
  lowerBound=pkey.incrementAndGet();
  client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,tst_micro,null,null,null,null,null,null,null);
  client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,ts_micro,null,null,null,null,null,null,null);
  client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,tst_micro,null,null,null,null,null,null,null);
  client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,ts_micro,null,null,null,null,null,null,null);
  client.callProcedure("Insert","ALLOW_NULLS",pkey.incrementAndGet(),0,0,0,0,0.0,tst_micro,null,null,null,null,null,null,null);
  client.callProcedure("Insert","ALLOW_NULLS and use sql.Timestamp",pkey.incrementAndGet(),0,0,0,0,0.0,tst_micro,null,null,null,null,null,null,null);
  cr=client.callProcedure("@AdHoc","SELECT A_TIMESTAMP from ALLOW_NULLS where PKEY > " + lowerBound + ";");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults();
  assertEquals(6,result[0].getRowCount());
  vt=result[0];
  while (vt.advanceRow()) {
    assertNotSame(tst,vt.getTimestampAsTimestamp(0));
    assertNotSame(ts,vt.getTimestampAsSqlTimestamp(0));
    assertEquals(tst_micro,vt.getTimestampAsTimestamp(0));
    assertEquals(ts_micro,vt.getTimestampAsSqlTimestamp(0));
    assertEquals(sqld,vt.getTimestampAsSqlDate(0));
    assertEquals(utild,vt.getTimestampAsUtilDate(0));
  }
  java.sql.Timestamp ts_nano=new java.sql.Timestamp(millisecondsSinceEpoch);
  assertEquals(ts,ts_nano);
  assertEquals(1000000,ts_nano.getNanos());
  ts_nano.setNanos(ts_nano.getNanos() + 1001);
  assertNotSame(ts_micro,ts_nano);
  lowerBound=pkey.incrementAndGet();
  boolean caught;
  try {
    caught=false;
    cr=client.callProcedure("ALLOW_NULLS.insert",pkey.incrementAndGet(),0,0,0,0,0.0,ts_nano,null,null,null,null,null,null,null);
  }
 catch (  RuntimeException e) {
    caught=true;
  }
  assert(caught);
  try {
    caught=false;
    cr=client.callProcedure("PassObjectNull",pkey.incrementAndGet(),0,0,0,0,0.0,ts_nano,null,null,null,null,null,null,null);
  }
 catch (  RuntimeException e) {
    caught=true;
  }
  assert(caught);
  cr=client.callProcedure("@AdHoc","SELECT A_TIMESTAMP from ALLOW_NULLS where PKEY > " + lowerBound + ";");
  result=cr.getResults();
  assertEquals(0,result[0].getRowCount());
}
