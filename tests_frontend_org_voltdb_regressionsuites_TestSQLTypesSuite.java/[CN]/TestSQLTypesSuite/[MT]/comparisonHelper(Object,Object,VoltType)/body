{
switch (vt) {
case TINYINT:
    final Byte b1=(Byte)lhs;
  final Byte b2=(Byte)rhs;
return b1.byteValue() == b2.byteValue();
case SMALLINT:
final Short s1=(Short)lhs;
final Short s2=(Short)rhs;
return s1.shortValue() == s2.shortValue();
case INTEGER:
final Integer i1=(Integer)lhs;
final Integer i2=(Integer)rhs;
return i1.intValue() == i2.intValue();
case BIGINT:
final Long l1=(Long)lhs;
final Long l2=(Long)rhs;
return l1.longValue() == l2.longValue();
case FLOAT:
final Double d1=(Double)lhs;
final Double d2=(Double)rhs;
if (((d1 == VoltType.NULL_FLOAT) && (d2 <= d1)) || ((d2 == VoltType.NULL_FLOAT) && (d1 <= d2))) {
return true;
}
return (Math.abs(d1 - d2) < 0.0000000001);
case STRING:
if ((lhs == null || lhs == VoltType.NULL_STRING_OR_VARBINARY) && (rhs == null || rhs == VoltType.NULL_STRING_OR_VARBINARY)) {
return true;
}
return ((String)lhs).equals(rhs);
case VARBINARY:
boolean lhsnull=(lhs == null || lhs == VoltType.NULL_STRING_OR_VARBINARY);
boolean rhsnull=(rhs == null || rhs == VoltType.NULL_STRING_OR_VARBINARY);
if (lhsnull && rhsnull) return true;
if (lhsnull != rhsnull) return false;
String lhs2=null;
String rhs2=null;
if (lhs instanceof byte[]) lhs2=Encoder.hexEncode((byte[])lhs);
 else lhs2=(String)lhs;
if (rhs instanceof byte[]) rhs2=Encoder.hexEncode((byte[])rhs);
 else rhs2=(String)rhs;
return lhs2.equalsIgnoreCase(rhs2);
case TIMESTAMP:
if ((lhs == null || lhs == VoltType.NULL_TIMESTAMP) && (rhs == null || rhs == VoltType.NULL_TIMESTAMP)) {
return true;
}
return ((TimestampType)lhs).equals(rhs);
case DECIMAL:
if ((lhs == null || lhs == VoltType.NULL_DECIMAL) && (rhs == null || rhs == VoltType.NULL_DECIMAL)) {
return true;
}
return ((BigDecimal)lhs).equals(rhs);
case GEOGRAPHY_POINT:
{
if ((lhs == VoltType.NULL_POINT || lhs == null) && (rhs == VoltType.NULL_POINT || rhs == null)) {
return true;
}
GeographyPointValue gpvLhs=(GeographyPointValue)lhs;
GeographyPointValue gpvRhs=(GeographyPointValue)rhs;
return gpvLhs.equals(gpvRhs);
}
case GEOGRAPHY:
{
if ((lhs == VoltType.NULL_GEOGRAPHY || lhs == null) && (rhs == VoltType.NULL_GEOGRAPHY || rhs == null)) {
return true;
}
GeographyValue gvLhs=(GeographyValue)lhs;
GeographyValue gvRhs=(GeographyValue)rhs;
return gvLhs.equals(gvRhs);
}
default :
throw new IllegalArgumentException("Unknown type in comparisonHelper");
}
}
