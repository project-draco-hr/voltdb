{
  int limits[]=new int[]{1,2,5,10,12,25,Integer.MAX_VALUE};
  int offsets[]=new int[]{0,1,2,5,10,12,25};
  String selecteds[]=new String[]{"*","A.PKEY"};
  String joinops[]=new String[]{",","LEFT JOIN","RIGHT JOIN"};
  String conditions[]=new String[]{" A.PKEY < B.PKEY "," A.PKEY = B.PKEY "," A.I = B.I "};
  client.callProcedure("InsertA",-1,0);
  for (  String joinop : joinops) {
    String onwhere="ON";
    if (joinop.equals(",")) {
      onwhere="WHERE";
    }
    for (    String selected : selecteds) {
      for (      int limit : limits) {
        for (        int offset : offsets) {
          for (          String condition : conditions) {
            String query;
            VoltTable result;
            query="SELECT COUNT(*) FROM A " + joinop + " B "+ onwhere+ condition+ ";";
            result=client.callProcedure("@AdHoc",query).getResults()[0];
            long found=result.asScalarLong();
            query="SELECT " + selected + " FROM A "+ joinop+ " B "+ onwhere+ condition+ " ORDER BY A.PKEY, B.PKEY "+ ((limit == Integer.MAX_VALUE) ? "" : "LIMIT " + limit)+ ((offset == 0) ? "" : " OFFSET " + offset)+ ";";
            result=client.callProcedure("@AdHoc",query).getResults()[0];
            long expectedRowCount=Math.max(0,Math.min(limit,found - offset));
            assertEquals("Statement \"" + query + "\" produced wrong number of rows: ",expectedRowCount,result.getRowCount());
          }
        }
      }
    }
  }
}
