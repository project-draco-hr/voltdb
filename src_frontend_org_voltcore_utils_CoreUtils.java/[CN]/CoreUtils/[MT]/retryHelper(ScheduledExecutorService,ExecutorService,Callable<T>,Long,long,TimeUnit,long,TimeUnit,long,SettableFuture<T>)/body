{
  long intervalMax=maxUnit.toMillis(maxInterval);
  final long interval=Math.min(intervalMax,startUnit.toMillis(startInterval) * 2);
  ses.schedule(new Runnable(){
    @Override public void run(){
      Runnable task=new Runnable(){
        @Override public void run(){
          if (retval.isCancelled())           return;
          try {
            retval.set(callable.call());
          }
 catch (          RetryException e) {
            retryHelper(ses,es,callable,maxAttempts,interval,TimeUnit.MILLISECONDS,maxInterval,maxUnit,ii + 1,retval);
          }
catch (          Exception e3) {
            retval.setException(e3);
          }
        }
      }
;
      if (ses == es)       task.run();
 else       es.execute(task);
    }
  }
,interval,TimeUnit.MILLISECONDS);
}
