def setUp(self):
    'Create a db'
    url = (('http://' + __host_or_ip__) + ':8000/api/1.0/databases/')
    headers = {'Content-Type': 'application/json; charset=utf-8', }
    db_data = {'name': 'testDB', }
    response = requests.post(url, json=db_data, headers=headers)
    if (response.status_code == 201):
        self.assertEqual(response.status_code, 201)
    else:
        self.assertEqual(response.status_code, 404)
    last_db_id = get_last_db_id()
    url_dep = ((('http://' + __host_or_ip__) + ':8000/api/1.0/deployment/') + str(last_db_id))
    json_data = {'cluster': {'sitesperhost': 8, 'kfactor': 0, 'elastic': 'enabled', 'schema': 'DDL', }, 'paths': {'voltdbroot': {'path': 'voltdbroottest', }, 'snapshots': {'path': 'snapshotstest', }, 'exportoverflow': {'path': 'export_overflow', }, 'commandlog': {'path': 'command_logtest', }, 'commandlogsnapshot': {'path': 'command_log_snapshot', }, }, 'partition-detection': {'snapshot': {'prefix': 'voltdb_partition_detection', }, 'enabled': True, }, 'admin-mode': {'port': 21211, 'adminstartup': False, }, 'heartbeat': {'timeout': 90, }, 'httpd': {'jsonapi': {'enabled': True, }, 'port': 8080, 'enabled': True, }, 'snapshot': {'frequency': '1h', 'retain': 1, 'prefix': 'AUTOSNAP', 'enabled': False, }, 'commandlog': {'frequency': {'time': 200, 'transactions': 2147483647, }, 'synchronous': False, 'enabled': False, 'logsize': 1024, }, 'systemsettings': {'temptables': {'maxsize': 100, }, 'snapshot': {'priority': 6, }, 'elastic': {'duration': 50, 'throughput': 2, }, 'query': {'timeout': 10000, }, 'resourcemonitor': {'memorylimit': {'size': '1', }, 'disklimit': {'feature': [{'name': 'SNAPSHOTS', 'size': '2', }], 'size': '10', }, 'frequency': 5, }, }, 'security': {'enabled': True, 'provider': 'HASH', }, 'export': {'configuration': [{'enabled': False, 'type': 'kafka', 'exportconnectorclass': 'test', 'stream': 'test', 'property': [{'name': 'test', 'value': 'test', }], }], }, 'import': {'configuration': [{'enabled': False, 'type': 'kafka', 'module': 'test', 'format': 'test', 'property': [{'name': 'test', 'value': 'test', }], }], }, }
    response = requests.put(url_dep, json=json_data)
    value = response.json()
    self.assertEqual(value['status'], 1)
    self.assertEqual(response.status_code, 200)
