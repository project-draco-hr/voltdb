def test_updated_deployment_xml(self):
    'Test updated deployment xml in vdm.xml'
    last_db_id = get_last_db_id()
    data = requests.get(__url__)
    root = ElementTree.fromstring(data.content)
    for database in root.findall('databases')[0].findall('database'):
        if (database.attrib['id'] == str(last_db_id)):
            self.assertEqual(database.attrib['name'], 'testDB')
            self.assertEqual(database.attrib['id'], str(last_db_id))
            self.assertEqual(database.findall('members')[0].findall('member'), [])
    for deployment in root.findall('deployments')[0].findall('deployment'):
        if (deployment.attrib['databaseid'] == str(last_db_id)):
            for child in deployment:
                if (child.tag == 'paths'):
                    for subnode in child:
                        if (subnode.tag == 'snapshots'):
                            self.assertEqual(subnode.attrib['path'], 'snapshotstest')
                        if (subnode.tag == 'commandlogsnapshot'):
                            self.assertEqual(subnode.attrib['path'], 'command_log_snapshot')
                        if (subnode.tag == 'voltdbroot'):
                            self.assertEqual(subnode.attrib['path'], 'voltdbroottest')
                        if (subnode.tag == 'exportoverflow'):
                            self.assertEqual(subnode.attrib['path'], 'export_overflow')
                if (child.tag == 'httpd'):
                    self.assertEqual(child.attrib['enabled'], 'true')
                    self.assertEqual(child.attrib['port'], '8080')
                    for subnode in child:
                        if (subnode.tag == 'jsonapi'):
                            self.assertEqual(subnode.attrib['enabled'], 'true')
                if (child.tag == 'systemsettings'):
                    for subnode in child:
                        if (subnode.tag == 'query'):
                            self.assertEqual(subnode.attrib['timeout'], '10000')
                        if (subnode.tag == 'temptables'):
                            self.assertEqual(subnode.attrib['maxsize'], '100')
                        if (subnode.tag == 'snapshot'):
                            self.assertEqual(subnode.attrib['priority'], '6')
                        if (subnode.tag == 'elastic'):
                            self.assertEqual(subnode.attrib['duration'], '50')
                            self.assertEqual(subnode.attrib['throughput'], '2')
                        if (subnode.tag == 'resourcemonitor'):
                            for supersubnode in subnode:
                                if (supersubnode.tag == 'memorylimit'):
                                    self.assertEqual(supersubnode.attrib['size'], '1')
                                if (supersubnode.tag == 'disklimit'):
                                    for disklimit in supersubnode:
                                        self.assertEqual(disklimit.attrib['name'], 'snapshots')
                                        self.assertEqual(disklimit.attrib['size'], '2')
                if (child.tag == 'admin-mode'):
                    self.assertEqual(child.attrib['adminstartup'], 'false')
                    self.assertEqual(child.attrib['port'], '21211')
                if (child.tag == 'cluster'):
                    self.assertEqual(child.attrib['elastic'], 'enabled')
                    self.assertEqual(child.attrib['hostcount'], '1')
                    self.assertEqual(child.attrib['kfactor'], '0')
                    self.assertEqual(child.attrib['schema'], 'DDL')
                    self.assertEqual(child.attrib['sitesperhost'], '8')
                if (child.tag == 'snapshot'):
                    self.assertEqual(child.attrib['enabled'], 'false')
                    self.assertEqual(child.attrib['frequency'], '1h')
                    self.assertEqual(child.attrib['prefix'], 'AUTOSNAP')
                    self.assertEqual(child.attrib['retain'], '1')
                if (child.tag == 'security'):
                    self.assertEqual(child.attrib['enabled'], 'true')
                    self.assertEqual(child.attrib['provider'], 'HASH')
                if (child.tag == 'partition-detection'):
                    self.assertEqual(child.attrib['enabled'], 'true')
                    for subnode in child:
                        self.assertEqual(subnode.attrib['prefix'], 'voltdb_partition_detection')
