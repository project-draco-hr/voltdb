{
  final InitiateResponseMessage response=new InitiateResponseMessage(task);
  try {
    Object[] callerParams=null;
    try {
      callerParams=task.getParameters();
    }
 catch (    RuntimeException e) {
      Writer result=new StringWriter();
      PrintWriter pw=new PrintWriter(result);
      e.printStackTrace(pw);
      response.setResults(new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[]{},"Exception while deserializing procedure params\n" + result.toString()));
    }
    if (callerParams != null) {
      ClientResponseImpl cr=null;
      ProcedureRunner runner=siteConnection.getProcedureRunner(m_procName);
      if (runner == null) {
        String error="Procedure " + m_procName + " is not present in the catalog. "+ "This can happen if a catalog update removing the procedure occurred "+ "after the procedure was submitted "+ "but before the procedure was executed.";
        hostLog.debug(error);
        response.setResults(new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[]{},error));
        return response;
      }
      if (runner.checkPartition(m_txn)) {
        runner.setupTransaction(m_txn);
        cr=runner.call(task.getParameters());
        m_txn.setHash(cr.getHash());
        response.setResults(cr);
        if ((!task.isReadOnly()) && task.isSinglePartition()) {
          m_txn.storeResults(cr);
        }
      }
 else {
        response.setMispartitioned(true,task.getStoredProcedureInvocation());
      }
    }
  }
 catch (  final ExpectedProcedureException e) {
    execLog.l7dlog(Level.TRACE,LogKeys.org_voltdb_ExecutionSite_ExpectedProcedureException.name(),e);
    response.setResults(new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[]{},e.toString()));
  }
catch (  final Exception e) {
    hostLog.l7dlog(Level.ERROR,LogKeys.host_ExecutionSite_UnexpectedProcedureException.name(),e);
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  return response;
}
