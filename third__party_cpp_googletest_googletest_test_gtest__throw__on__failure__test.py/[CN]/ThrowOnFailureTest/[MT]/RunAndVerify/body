def RunAndVerify(self, env_var_value, flag_value, should_fail):
    'Runs gtest_throw_on_failure_test_ and verifies that it does\n    (or does not) exit with a non-zero code.\n\n    Args:\n      env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\n                        variable; None if the variable should be unset.\n      flag_value:       value of the --gtest_break_on_failure flag;\n                        None if the flag should not be present.\n      should_fail:      True iff the program is expected to fail.\n    '
    SetEnvVar(THROW_ON_FAILURE, env_var_value)
    if (env_var_value is None):
        env_var_value_msg = ' is not set'
    else:
        env_var_value_msg = ('=' + env_var_value)
    if (flag_value is None):
        flag = ''
    elif (flag_value == '0'):
        flag = ('--%s=0' % THROW_ON_FAILURE)
    else:
        flag = ('--%s' % THROW_ON_FAILURE)
    command = [EXE_PATH]
    if flag:
        command.append(flag)
    if should_fail:
        should_or_not = 'should'
    else:
        should_or_not = 'should not'
    failed = (not Run(command))
    SetEnvVar(THROW_ON_FAILURE, None)
    msg = ('when %s%s, an assertion failure in "%s" %s cause a non-zero exit code.' % (THROW_ON_FAILURE, env_var_value_msg, ' '.join(command), should_or_not))
    self.assert_((failed == should_fail), msg)
