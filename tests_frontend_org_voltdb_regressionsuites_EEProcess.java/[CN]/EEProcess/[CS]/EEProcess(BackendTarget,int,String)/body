{
  if (target != BackendTarget.NATIVE_EE_VALGRIND_IPC) {
    return;
  }
  if (verbose) {
    System.out.println("Running " + target);
  }
  final ArrayList<String> args=new ArrayList<>();
  final String voltdbIPCPath=System.getenv("VOLTDBIPC_PATH");
  args.add("valgrind");
  args.add("--leak-check=full");
  args.add("--show-reachable=yes");
  args.add("--num-callers=32");
  args.add("--error-exitcode=-1");
  args.add("--suppressions=tests/ee/test_utils/vdbsuppressions.supp");
  args.add("--xml=yes");
  args.add(String.format("--xml-file=%s",String.format(VALGRIND_OUTPUT_FILE_PATTERN,"%p")));
  if (voltdbIPCPath == null) {
    args.add("--quiet");
    args.add("--log-file=" + logfile);
  }
  args.add(voltdbIPCPath == null ? "./voltdbipc" : voltdbIPCPath);
  args.add(String.valueOf(siteCount));
  final ProcessBuilder pb=new ProcessBuilder(args);
  try {
    m_eeProcess=pb.start();
    final Process p=m_eeProcess;
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        p.destroy();
      }
    }
);
  }
 catch (  final IOException e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  final BufferedReader stderr=new BufferedReader(new InputStreamReader(m_eeProcess.getErrorStream()));
  final BufferedReader stdout=new BufferedReader(new InputStreamReader(m_eeProcess.getInputStream()));
  try {
    boolean failure=false;
    String pidString=stdout.readLine();
    if (pidString == null) {
      failure=true;
    }
 else {
      if (verbose) {
        System.out.println("PID string \"" + pidString + "\"");
      }
      pidString=pidString.substring("== pid = ".length());
      pidString=pidString.substring(0,pidString.indexOf(" =="));
      m_eePID=pidString;
    }
    String siteCountString=stdout.readLine();
    if (siteCountString == null) {
      failure=true;
    }
 else {
      if (verbose) {
        System.out.println("Site count string \"" + siteCountString + "\"");
      }
      siteCountString=siteCountString.substring("== eecount = ".length());
      siteCountString=siteCountString.substring(0,siteCountString.indexOf(" =="));
      int siteCount2=Integer.valueOf(siteCountString);
      assert(siteCount2 == siteCount);
      m_siteCount=siteCount;
    }
    String portString=stdout.readLine();
    if (portString == null) {
      failure=true;
    }
 else {
      if (verbose) {
        System.out.println("Port string \"" + portString + "\"");
      }
      portString=portString.substring("== port = ".length());
      portString=portString.substring(0,portString.indexOf(" =="));
      m_port=Integer.valueOf(portString);
    }
    while (true) {
      String line=null;
      if (!failure) {
        line=stdout.readLine();
      }
      if (line != null && !failure) {
        if (verbose) {
          System.out.println("[ipc=" + m_eePID + "]:::"+ line);
        }
        if (line.contains("listening")) {
          break;
        }
 else {
          continue;
        }
      }
 else {
        while ((line=stderr.readLine()) != null) {
          if (verbose) {
            System.err.println(line);
          }
        }
        try {
          m_eeProcess.waitFor();
        }
 catch (        final InterruptedException e) {
          e.printStackTrace();
        }
        VoltDB.crashLocalVoltDB("[ipc=" + m_eePID + "] Returned end of stream and exit value "+ m_eeProcess.exitValue(),false,null);
      }
    }
  }
 catch (  final IOException e) {
    e.printStackTrace();
    return;
  }
  m_valgrindOutputFile=new File(String.format(VALGRIND_OUTPUT_FILE_PATTERN,m_eePID));
  final Process p=m_eeProcess;
  m_stdoutParser=new Thread(){
    @Override public void run(){
      while (true) {
        try {
          final String line=stdout.readLine();
          if (line != null) {
            if (verbose) {
              System.out.println("[ipc=" + p.hashCode() + "]:::"+ line);
            }
          }
 else {
            try {
              p.waitFor();
            }
 catch (            final InterruptedException e) {
              e.printStackTrace();
            }
            if (verbose) {
              System.out.println("[ipc=" + m_eePID + "] Returned end of stream and exit value "+ p.exitValue());
            }
            return;
          }
        }
 catch (        final IOException e) {
          e.printStackTrace();
          return;
        }
      }
    }
  }
;
  m_stderrParser=new Thread(){
    @Override public void run(){
      while (true) {
        try {
          final String line=stderr.readLine();
          if (line != null) {
            if (verbose) {
              System.err.println("[ipc=" + p.hashCode() + "]:::"+ line);
            }
          }
 else {
            try {
              p.waitFor();
            }
 catch (            final InterruptedException e) {
              e.printStackTrace();
            }
            if (verbose) {
              System.out.println("[ipc=" + m_eePID + "] Returned end of stream and exit value "+ p.exitValue());
            }
            return;
          }
        }
 catch (        final IOException e) {
          e.printStackTrace();
          return;
        }
      }
    }
  }
;
  m_stdoutParser.setDaemon(false);
  m_stdoutParser.start();
  m_stderrParser.setDaemon(false);
  m_stderrParser.start();
}
