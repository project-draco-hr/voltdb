{
  int msgsize=44;
  if (m_request.authInfo != null) {
    msgsize+=(8 * m_request.authInfo.size());
  }
  if (m_request.request != null) {
    msgsize+=m_request.request.remaining();
  }
  ArrayList<byte[]> schemes=new ArrayList<byte[]>();
  ArrayList<byte[]> ids=new ArrayList<byte[]>();
  if (m_request.authInfo != null) {
    for (    Id id : m_request.authInfo) {
      byte bytes[]=id.getScheme().getBytes("UTF-8");
      schemes.add(bytes);
      msgsize+=bytes.length;
      bytes=id.getId().getBytes("UTF-8");
      ids.add(id.getId().getBytes());
      msgsize+=bytes.length;
    }
  }
  if (m_buffer == null) {
    m_container=pool.acquire(msgsize + 1 + HEADER_SIZE);
    m_buffer=m_container.b;
  }
  setBufferSize(msgsize + 1,pool);
  m_buffer.position(HEADER_SIZE);
  m_buffer.put(AGREEMENT_TASK_ID);
  m_buffer.putLong(m_txnId);
  m_buffer.putInt(m_initiatorId);
  m_buffer.putLong(m_lastSafeTxnId);
  m_buffer.putLong(m_request.sessionId);
  m_buffer.putInt(m_request.cxid);
  m_buffer.putInt(m_request.type);
  if (m_request.request != null) {
    m_buffer.putInt(m_request.request.remaining());
    m_buffer.put(m_request.request.duplicate());
  }
 else {
    m_buffer.putInt(-1);
  }
  if (m_request.authInfo != null) {
    m_buffer.putInt(schemes.size());
    for (    byte bytes[] : schemes) {
      m_buffer.putInt(bytes.length);
      m_buffer.put(bytes);
    }
    for (    byte bytes[] : ids) {
      m_buffer.putInt(bytes.length);
      m_buffer.put(bytes);
    }
  }
 else {
    m_buffer.putInt(-1);
  }
  m_buffer.limit(m_buffer.position());
}
