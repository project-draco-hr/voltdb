{
  IndexScanPlanNode inlineScan=(IndexScanPlanNode)m_inlineNodes.get(PlanNodeType.INDEXSCAN);
  assert(m_children.size() == 1 && inlineScan != null);
  for (  AbstractPlanNode child : m_children) {
    child.resolveColumnIndexes();
  }
  LimitPlanNode limit=(LimitPlanNode)getInlinePlanNode(PlanNodeType.LIMIT);
  if (limit != null) {
    limit.m_outputSchema=m_outputSchemaPreInlineAgg;
    limit.m_hasSignificantOutputSchema=false;
  }
  final NodeSchema completeInnerTableSchema=inlineScan.getTableSchema();
  final NodeSchema outerSchema=m_children.get(0).getOutputSchema();
  resolvePredicate(inlineScan.getPredicate(),outerSchema,completeInnerTableSchema);
  resolvePredicate(inlineScan.getEndExpression(),outerSchema,completeInnerTableSchema);
  resolvePredicate(inlineScan.getInitialExpression(),outerSchema,completeInnerTableSchema);
  resolvePredicate(inlineScan.getSkipNullPredicate(),outerSchema,completeInnerTableSchema);
  resolvePredicate(inlineScan.getSearchKeyExpressions(),outerSchema,completeInnerTableSchema);
  resolvePredicate(m_preJoinPredicate,outerSchema,completeInnerTableSchema);
  resolvePredicate(m_joinPredicate,outerSchema,completeInnerTableSchema);
  resolvePredicate(m_wherePredicate,outerSchema,completeInnerTableSchema);
  resolveSubqueryColumnIndexes();
  for (int i=0; i < m_outputSchemaPreInlineAgg.size(); ++i) {
    SchemaColumn col=m_outputSchemaPreInlineAgg.getColumns().get(i);
    assert(col.getExpression() instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.getExpression();
    int index;
    int tableIdx;
    if (i < outerSchema.size()) {
      tableIdx=0;
      index=outerSchema.getIndexOfTve(tve);
      if (index >= 0) {
        tve.setColumnIndex(index);
      }
    }
 else {
      tableIdx=1;
      index=tve.setColumnIndexUsingSchema(completeInnerTableSchema);
    }
    if (index == -1) {
      throw new RuntimeException("Unable to find index for column: " + col.toString());
    }
    tve.setTableIndex(tableIdx);
  }
  m_outputSchemaPreInlineAgg.sortByTveIndex(0,outerSchema.size());
  m_outputSchemaPreInlineAgg.sortByTveIndex(outerSchema.size(),m_outputSchemaPreInlineAgg.size());
  m_hasSignificantOutputSchema=true;
  resolveRealOutputSchema();
}
