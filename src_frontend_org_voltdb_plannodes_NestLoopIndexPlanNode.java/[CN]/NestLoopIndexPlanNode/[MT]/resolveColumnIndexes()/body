{
  IndexScanPlanNode inline_scan=(IndexScanPlanNode)m_inlineNodes.get(PlanNodeType.INDEXSCAN);
  assert(m_children.size() == 1 && inline_scan != null);
  for (  AbstractPlanNode child : m_children) {
    child.resolveColumnIndexes();
  }
  LimitPlanNode limit=(LimitPlanNode)getInlinePlanNode(PlanNodeType.LIMIT);
  if (limit != null) {
    limit.m_outputSchema=m_outputSchemaPreInlineAgg;
    limit.m_hasSignificantOutputSchema=false;
  }
  final NodeSchema complete_schema_of_inner_table=inline_scan.getTableSchema();
  final NodeSchema outer_schema=m_children.get(0).getOutputSchema();
  resolvePredicate(inline_scan.getPredicate(),outer_schema,complete_schema_of_inner_table);
  resolvePredicate(inline_scan.getEndExpression(),outer_schema,complete_schema_of_inner_table);
  resolvePredicate(inline_scan.getInitialExpression(),outer_schema,complete_schema_of_inner_table);
  resolvePredicate(inline_scan.getSkipNullPredicate(),outer_schema,complete_schema_of_inner_table);
  resolvePredicate(inline_scan.getSearchKeyExpressions(),outer_schema,complete_schema_of_inner_table);
  resolvePredicate(m_preJoinPredicate,outer_schema,complete_schema_of_inner_table);
  resolvePredicate(m_joinPredicate,outer_schema,complete_schema_of_inner_table);
  resolvePredicate(m_wherePredicate,outer_schema,complete_schema_of_inner_table);
  Collection<AbstractExpression> exprs=findAllExpressionsOfClass(AbstractSubqueryExpression.class);
  for (  AbstractExpression expr : exprs) {
    ExpressionUtil.resolveSubqueryExpressionColumnIndexes(expr);
  }
  for (int i=0; i < m_outputSchemaPreInlineAgg.size(); ++i) {
    SchemaColumn col=m_outputSchemaPreInlineAgg.getColumns().get(i);
    assert(col.getExpression() instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.getExpression();
    int index;
    int tableIdx;
    if (i < outer_schema.size()) {
      index=outer_schema.getIndexOfTve(tve);
      tableIdx=0;
    }
 else {
      index=tve.resolveColumnIndexesUsingSchema(complete_schema_of_inner_table);
      tableIdx=1;
    }
    if (index == -1) {
      throw new RuntimeException("Unable to find index for column: " + col.toString());
    }
    tve.setColumnIndex(index);
    tve.setTableIndex(tableIdx);
  }
  m_outputSchemaPreInlineAgg.sortByTveIndex(0,outer_schema.size());
  m_outputSchemaPreInlineAgg.sortByTveIndex(outer_schema.size(),m_outputSchemaPreInlineAgg.size());
  m_hasSignificantOutputSchema=true;
  resolveRealOutputSchema();
}
