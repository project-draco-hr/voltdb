{
  IndexScanPlanNode inline_scan=(IndexScanPlanNode)m_inlineNodes.get(PlanNodeType.INDEXSCAN);
  assert(m_children.size() == 1 && inline_scan != null);
  for (  AbstractPlanNode child : m_children) {
    child.resolveColumnIndexes();
  }
  for (  AbstractPlanNode inline : m_inlineNodes.values()) {
    if (inline instanceof LimitPlanNode) {
      inline.m_outputSchema=m_outputSchema.clone();
      inline.m_hasSignificantOutputSchema=false;
    }
 else {
      inline.resolveColumnIndexes();
    }
  }
  NodeSchema index_schema=inline_scan.getTableSchema();
  NodeSchema outer_schema=m_children.get(0).getOutputSchema();
  List<TupleValueExpression> predicate_tves=ExpressionUtil.getTupleValueExpressions(inline_scan.getPredicate());
  for (  TupleValueExpression tve : predicate_tves) {
    int index=tve.resolveColumnIndexesUsingSchema(outer_schema);
    int tableIdx=0;
    if (index == -1) {
      index=index_schema.getIndexOfTve(tve);
      if (index == -1) {
        throw new RuntimeException("Unable to find index for nestloopindexscan TVE: " + tve.toString());
      }
      tableIdx=1;
    }
    tve.setColumnIndex(index);
    tve.setTableIndex(tableIdx);
  }
  List<TupleValueExpression> index_tves=new ArrayList<TupleValueExpression>();
  index_tves.addAll(ExpressionUtil.getTupleValueExpressions(inline_scan.getEndExpression()));
  index_tves.addAll(ExpressionUtil.getTupleValueExpressions(inline_scan.getInitialExpression()));
  for (  AbstractExpression search_exp : inline_scan.getSearchKeyExpressions()) {
    index_tves.addAll(ExpressionUtil.getTupleValueExpressions(search_exp));
  }
  for (  TupleValueExpression tve : index_tves) {
    int index=tve.resolveColumnIndexesUsingSchema(outer_schema);
    int tableIdx=0;
    if (index == -1) {
      index=index_schema.getIndexOfTve(tve);
      if (index == -1) {
        throw new RuntimeException("Unable to find index for nestloopindexscan TVE: " + tve.toString());
      }
      tableIdx=1;
    }
    tve.setColumnIndex(index);
    tve.setTableIndex(tableIdx);
  }
  TreeMap<Integer,SchemaColumn> sort_cols=new TreeMap<Integer,SchemaColumn>();
  for (  SchemaColumn col : m_outputSchema.getColumns()) {
    assert(col.getExpression() instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.getExpression();
    int index=outer_schema.getIndexOfTve(tve);
    int tableIdx=0;
    if (index == -1) {
      index=tve.resolveColumnIndexesUsingSchema(index_schema);
      if (index == -1) {
        throw new RuntimeException("Unable to find index for column: " + col.toString());
      }
      sort_cols.put(index + outer_schema.size(),col);
      tableIdx=1;
    }
 else {
      sort_cols.put(index,col);
    }
    tve.setColumnIndex(index);
    tve.setTableIndex(tableIdx);
  }
  NodeSchema new_output_schema=new NodeSchema();
  for (  SchemaColumn col : sort_cols.values()) {
    new_output_schema.addColumn(col);
  }
  m_outputSchema=new_output_schema;
  m_hasSignificantOutputSchema=true;
  resolvePredicate(m_preJoinPredicate,outer_schema,index_schema);
  resolvePredicate(m_joinPredicate,outer_schema,index_schema);
  resolvePredicate(m_wherePredicate,outer_schema,index_schema);
}
