def readDecimal(self):
    offset = (16 * struct.calcsize('b'))
    if (self.NullCheck[self.VOLTTYPE_DECIMAL](self.rbuf[:offset]) == None):
        self.rbuf = self.rbuf[offset:]
        return None
    val = list(struct.unpack(self.ubyteType(16), self.rbuf[:offset]))
    self.rbuf = self.rbuf[offset:]
    mostSignificantBit = (1 << 7)
    isNegative = ((val[0] & mostSignificantBit) != 0)
    unscaledValue = ((- (val[0] & mostSignificantBit)) << 120)
    val[0] &= (~ mostSignificantBit)
    for x in xrange(16):
        unscaledValue += (val[x] << ((15 - x) * 8))
    unscaledValue = map((lambda x: int(x)), str(abs(unscaledValue)))
    return decimal.Decimal((isNegative, tuple(unscaledValue), (- self.__class__.DEFAULT_DECIMAL_SCALE)))
