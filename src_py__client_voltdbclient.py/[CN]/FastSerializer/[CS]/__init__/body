def __init__(self, host=None, port=21212, username='', password='', dump_file=None):
    self.wbuf = array.array('c')
    self.rbuf = ''
    self.host = host
    self.port = port
    self.dump_file = None
    if (dump_file != None):
        self.dump_file = open(dump_file, 'wb')
    self.socket = None
    if ((self.host != None) and (self.port != None)):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setblocking(1)
        self.socket.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)
        self.socket.connect((self.host, self.port))
    self.inputBOM = self.BIG_ENDIAN
    self.localBOM = self.LITTLE_ENDIAN
    self.READER = {self.VOLTTYPE_NULL: self.readNull, self.VOLTTYPE_TINYINT: self.readByte, self.VOLTTYPE_SMALLINT: self.readInt16, self.VOLTTYPE_INTEGER: self.readInt32, self.VOLTTYPE_BIGINT: self.readInt64, self.VOLTTYPE_FLOAT: self.readFloat64, self.VOLTTYPE_STRING: self.readString, self.VOLTTYPE_VARBINARY: self.readVarbinary, self.VOLTTYPE_TIMESTAMP: self.readDate, self.VOLTTYPE_DECIMAL: self.readDecimal, self.VOLTTYPE_DECIMAL_STRING: self.readDecimalString, }
    self.WRITER = {self.VOLTTYPE_NULL: self.writeNull, self.VOLTTYPE_TINYINT: self.writeByte, self.VOLTTYPE_SMALLINT: self.writeInt16, self.VOLTTYPE_INTEGER: self.writeInt32, self.VOLTTYPE_BIGINT: self.writeInt64, self.VOLTTYPE_FLOAT: self.writeFloat64, self.VOLTTYPE_STRING: self.writeString, self.VOLTTYPE_VARBINARY: self.writeVarbinary, self.VOLTTYPE_TIMESTAMP: self.writeDate, self.VOLTTYPE_DECIMAL: self.writeDecimal, self.VOLTTYPE_DECIMAL_STRING: self.writeDecimalString, }
    self.ARRAY_READER = {self.VOLTTYPE_TINYINT: self.readByteArray, self.VOLTTYPE_SMALLINT: self.readInt16Array, self.VOLTTYPE_INTEGER: self.readInt32Array, self.VOLTTYPE_BIGINT: self.readInt64Array, self.VOLTTYPE_FLOAT: self.readFloat64Array, self.VOLTTYPE_STRING: self.readStringArray, self.VOLTTYPE_TIMESTAMP: self.readDateArray, self.VOLTTYPE_DECIMAL: self.readDecimalArray, self.VOLTTYPE_DECIMAL_STRING: self.readDecimalStringArray, }
    self.__compileStructs()
    self.NULL_DECIMAL_INDICATOR = self.__intToBytes(self.__class__.NULL_DECIMAL_INDICATOR, 0)
    self.NullCheck = {self.VOLTTYPE_NULL: (lambda x: None), self.VOLTTYPE_TINYINT: (lambda x: if_else((x == self.__class__.NULL_TINYINT_INDICATOR), None, x)), self.VOLTTYPE_SMALLINT: (lambda x: if_else((x == self.__class__.NULL_SMALLINT_INDICATOR), None, x)), self.VOLTTYPE_INTEGER: (lambda x: if_else((x == self.__class__.NULL_INTEGER_INDICATOR), None, x)), self.VOLTTYPE_BIGINT: (lambda x: if_else((x == self.__class__.NULL_BIGINT_INDICATOR), None, x)), self.VOLTTYPE_FLOAT: (lambda x: if_else((abs((x - self.__class__.NULL_FLOAT_INDICATOR)) < 1e+307), None, x)), self.VOLTTYPE_STRING: (lambda x: if_else((x == self.__class__.NULL_STRING_INDICATOR), None, x)), self.VOLTTYPE_VARBINARY: (lambda x: if_else((x == self.__class__.NULL_STRING_INDICATOR), None, x)), self.VOLTTYPE_DECIMAL: (lambda x: if_else((x == self.NULL_DECIMAL_INDICATOR), None, x)), }
    if ((username != None) and (password != None) and (host != None)):
        self.authenticate(username, password)
