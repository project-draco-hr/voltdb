{
  if (isValgrind())   return;
  System.out.println("Starting testRepartition");
  int num_replicated_items_per_chunk=100;
  int num_replicated_chunks=10;
  int num_partitioned_items_per_chunk=120;
  int num_partitioned_chunks=10;
  Client client=getClient();
  loadLargeReplicatedTable(client,"REPLICATED_TESTER",num_replicated_items_per_chunk,num_partitioned_chunks);
  loadLargePartitionedTable(client,"PARTITION_TESTER",num_partitioned_items_per_chunk,num_partitioned_chunks);
  VoltTable[] results=null;
  results=saveTablesWithDefaultOptions(client);
  validateSnapshot(true);
  m_config.shutDown();
  CatalogChangeSingleProcessServer config=(CatalogChangeSingleProcessServer)m_config;
  config.recompile(4);
  m_config.startUp();
  client=getClient();
  try {
    results=client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE).getResults();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("SnapshotRestore exception: " + ex.getMessage());
  }
  checkTable(client,"PARTITION_TESTER","PT_ID",num_partitioned_items_per_chunk * num_partitioned_chunks);
  checkTable(client,"REPLICATED_TESTER","RT_ID",num_replicated_items_per_chunk * num_replicated_chunks);
  boolean ok=false;
  int foundItem=0;
  while (!ok) {
    ok=true;
    foundItem=0;
    results=client.callProcedure("@Statistics","table",0).getResults();
    while (results[0].advanceRow()) {
      if (results[0].getString("TABLE_NAME").equals("PARTITION_TESTER")) {
        long tupleCount=results[0].getLong("TUPLE_COUNT");
        ok=(ok & (tupleCount == ((num_partitioned_items_per_chunk * num_partitioned_chunks) / 4)));
        ++foundItem;
      }
    }
    ok=ok & (foundItem == 4);
  }
  while (results[0].advanceRow()) {
    if (results[0].getString("TABLE_NAME").equals("PARTITION_TESTER")) {
      assertEquals((num_partitioned_items_per_chunk * num_partitioned_chunks) / 4,results[0].getLong("TUPLE_COUNT"));
    }
  }
  config.revertCompile();
}
