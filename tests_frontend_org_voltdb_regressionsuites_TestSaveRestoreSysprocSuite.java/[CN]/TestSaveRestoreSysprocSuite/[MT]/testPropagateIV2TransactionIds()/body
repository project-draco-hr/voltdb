{
  if (isValgrind())   return;
  if (!VoltDB.instance().isIV2Enabled())   return;
  System.out.println("Starting testPropagateIV2TransactionIds");
  int num_replicated_items=1000;
  int num_partitioned_items=126;
  Client client=getClient();
  VoltTable repl_table=createReplicatedTable(num_replicated_items,0,null);
  VoltTable partition_table=createPartitionedTable(num_partitioned_items,0);
  loadTable(client,"REPLICATED_TESTER",true,repl_table);
  loadTable(client,"PARTITION_TESTER",false,partition_table);
  saveTablesWithDefaultOptions(client);
  validateSnapshot(true);
  JSONObject digest=SnapshotUtil.CRCCheck(new VoltFile(TMPDIR,TESTNONCE + "-host_0.digest"),LOG);
  JSONObject transactionIds=digest.getJSONObject("partitionTransactionIds");
  System.out.println("TRANSACTION IDS: " + transactionIds.toString());
  assertEquals(4,transactionIds.length());
  Set<Integer> partitions=new HashSet<Integer>();
  Iterator<String> keys=transactionIds.keys();
  while (keys.hasNext()) {
    final long foundTxnId=transactionIds.getLong(keys.next());
    partitions.add(TxnEgo.getPartitionId(foundTxnId));
    assertTrue(foundTxnId > TxnEgo.makeZero(TxnEgo.getPartitionId(foundTxnId)).getTxnId());
  }
  assertTrue(partitions.contains(0));
  assertTrue(partitions.contains(1));
  assertTrue(partitions.contains(2));
  assertTrue(partitions.contains(MpInitiator.MP_INIT_PID));
  m_config.shutDown();
  CatalogChangeSingleProcessServer config=(CatalogChangeSingleProcessServer)m_config;
  config.recompile(1);
  try {
    m_config.startUp(false);
    client=getClient();
    client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE).getResults();
    saveTables(client,TMPDIR,TESTNONCE + 2,true,false);
    digest=SnapshotUtil.CRCCheck(new VoltFile(TMPDIR,TESTNONCE + "2-host_0.digest"),LOG);
    JSONObject newTransactionIds=digest.getJSONObject("partitionTransactionIds");
    assertEquals(transactionIds.length(),newTransactionIds.length());
    keys=transactionIds.keys();
    while (keys.hasNext()) {
      String partitionId=keys.next();
      final long txnid=newTransactionIds.getLong(partitionId);
      if (partitionId.equals("2") || partitionId.equals("1")) {
        assertEquals(txnid,transactionIds.getLong(partitionId));
      }
 else       if (partitionId.equals(Integer.toString(MpInitiator.MP_INIT_PID)) || partitionId.equals(1)) {
        assertTrue(txnid > transactionIds.getLong(partitionId));
      }
    }
  }
  finally {
    config.revertCompile();
  }
}
