{
  if (isValgrind())   return;
  System.out.println("Starting testSnapshotSave");
  Client client=getClient();
  int num_replicated_items_per_chunk=100;
  int num_replicated_chunks=10;
  int num_partitioned_items_per_chunk=120;
  int num_partitioned_chunks=10;
  loadLargeReplicatedTable(client,"REPLICATED_TESTER",num_replicated_items_per_chunk,num_replicated_chunks);
  loadLargePartitionedTable(client,"PARTITION_TESTER",num_partitioned_items_per_chunk,num_partitioned_chunks);
  VoltTable[] results=null;
  results=client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE,(byte)1).getResults();
  validateSnapshot(true);
  checkSnapshotStatus(client,TMPDIR,TESTNONCE,null,"SUCCESS",8);
  VoltTable scanResults[]=client.callProcedure("@SnapshotScan",new Object[]{null}).getResults();
  assertNotNull(scanResults);
  assertEquals(1,scanResults.length);
  assertEquals(1,scanResults[0].getColumnCount());
  assertEquals(1,scanResults[0].getRowCount());
  assertTrue(scanResults[0].advanceRow());
  assertTrue("ERR_MSG".equals(scanResults[0].getColumnName(0)));
  scanResults=client.callProcedure("@SnapshotScan","/doesntexist").getResults();
  assertNotNull(scanResults);
  assertEquals(1,scanResults[1].getRowCount());
  assertTrue(scanResults[1].advanceRow());
  assertTrue("FAILURE".equals(scanResults[1].getString("RESULT")));
  scanResults=client.callProcedure("@SnapshotScan",TMPDIR).getResults();
  assertNotNull(scanResults);
  assertEquals(3,scanResults.length);
  assertEquals(9,scanResults[0].getColumnCount());
  assertTrue(scanResults[0].getRowCount() >= 1);
  assertTrue(scanResults[0].advanceRow());
  int count=0;
  String completeStatus=null;
  do {
    if (TESTNONCE.equals(scanResults[0].getString("NONCE"))) {
      assertTrue(TMPDIR.equals(scanResults[0].getString("PATH")));
      count++;
      completeStatus=scanResults[0].getString("COMPLETE");
    }
  }
 while (scanResults[0].advanceRow());
  assertEquals(1,count);
  assertNotNull(completeStatus);
  assertTrue("TRUE".equals(completeStatus));
  FilenameFilter cleaner=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String file){
      return file.startsWith(TESTNONCE) && file.endsWith("vpt");
    }
  }
;
  File tmp_dir=new File(TMPDIR);
  File[] tmp_files=tmp_dir.listFiles(cleaner);
  tmp_files[0].delete();
  scanResults=client.callProcedure("@SnapshotScan",TMPDIR).getResults();
  assertNotNull(scanResults);
  assertEquals(3,scanResults.length);
  assertEquals(9,scanResults[0].getColumnCount());
  assertTrue(scanResults[0].getRowCount() >= 1);
  assertTrue(scanResults[0].advanceRow());
  count=0;
  String missingTableName=null;
  do {
    if (TESTNONCE.equals(scanResults[0].getString("NONCE")) && "FALSE".equals(scanResults[0].getString("COMPLETE"))) {
      assertTrue(TMPDIR.equals(scanResults[0].getString("PATH")));
      count++;
      missingTableName=scanResults[0].getString("TABLES_MISSING");
    }
  }
 while (scanResults[0].advanceRow());
  assertEquals(1,count);
  assertNotNull(missingTableName);
  assertTrue(tmp_files[0].getName().contains(missingTableName));
  Cluster cluster=VoltDB.instance().getCatalogContext().cluster;
  Database database=cluster.getDatabases().get("database");
  CatalogMap<Table> tables=database.getTables();
  SiteTracker st=VoltDB.instance().getSiteTracker();
  int num_hosts=st.m_numberOfHosts;
  int replicated=0;
  int total_tables=0;
  int expected_entries=st.m_numberOfExecutionSites;
  for (  Table table : tables) {
    if (table.getMaterializer() == null) {
      total_tables++;
      if (table.getIsreplicated()) {
        replicated++;
      }
    }
  }
  assertEquals(expected_entries,results[0].getRowCount());
  while (results[0].advanceRow()) {
    assertEquals(results[0].getString("RESULT"),"SUCCESS");
  }
  expected_entries=((total_tables - replicated) * num_hosts) + replicated;
  try {
    results=client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE,(byte)1).getResults();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("SnapshotSave exception: " + ex.getMessage());
  }
  assertEquals(expected_entries,results[0].getRowCount());
  while (results[0].advanceRow()) {
    if (!tmp_files[0].getName().contains(results[0].getString("TABLE"))) {
      assertEquals(results[0].getString("RESULT"),"FAILURE");
      assertTrue(results[0].getString("ERR_MSG").contains("SAVE FILE ALREADY EXISTS"));
    }
  }
  VoltTable deleteResults[]=client.callProcedure("@SnapshotDelete",new String[]{TMPDIR},new String[]{TESTNONCE}).getResults();
  assertNotNull(deleteResults);
  assertEquals(1,deleteResults.length);
  assertEquals(9,deleteResults[0].getColumnCount());
  assertEquals(0,deleteResults[0].getRowCount());
  boolean hadZeroFiles=false;
  for (int ii=0; ii < 20; ii++) {
    Thread.sleep(100);
    tmp_files=tmp_dir.listFiles(cleaner);
    if (tmp_files.length == 0) {
      hadZeroFiles=true;
      break;
    }
  }
  assertTrue(hadZeroFiles);
  validateSnapshot(false);
  try {
    results=client.callProcedure("@SnapshotSave","{ uripath:\"file://" + TMPDIR + "\", nonce:\""+ TESTNONCE+ "\", block:true, format:\"csv\" }").getResults();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("SnapshotSave exception: " + ex.getMessage());
  }
  System.out.println("Created CSV snapshot");
}
