{
  Client client=getClient();
  int num_replicated_items_per_chunk=100;
  int num_replicated_chunks=10;
  int num_partitioned_items_per_chunk=120;
  int num_partitioned_chunks=10;
  loadLargeReplicatedTable(client,"REPLICATED_TESTER",num_replicated_items_per_chunk,num_replicated_chunks);
  loadLargePartitionedTable(client,"PARTITION_TESTER",num_partitioned_items_per_chunk,num_partitioned_chunks);
  VoltTable[] results=null;
  results=client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE,(byte)1).getResults();
  validateSnapshot(true);
  VoltTable statusResults[]=client.callProcedure("@SnapshotStatus").getResults();
  assertNotNull(statusResults);
  assertEquals(2,statusResults.length);
  assertEquals(8,statusResults[0].getColumnCount());
  assertEquals(1,statusResults[0].getRowCount());
  assertTrue(statusResults[0].advanceRow());
  assertTrue(TMPDIR.equals(statusResults[0].getString("PATH")));
  assertTrue(TESTNONCE.equals(statusResults[0].getString("NONCE")));
  assertFalse(0 == statusResults[0].getLong("END_TIME"));
  assertTrue("SUCCESS".equals(statusResults[0].getString("RESULT")));
  VoltTable scanResults[]=client.callProcedure("@SnapshotScan",new Object[]{null}).getResults();
  assertNotNull(scanResults);
  assertEquals(1,scanResults.length);
  assertEquals(1,scanResults[0].getColumnCount());
  assertEquals(1,scanResults[0].getRowCount());
  assertTrue(scanResults[0].advanceRow());
  assertTrue("ERR_MSG".equals(scanResults[0].getColumnName(0)));
  scanResults=client.callProcedure("@SnapshotScan","/doesntexist").getResults();
  assertNotNull(scanResults);
  assertEquals(1,scanResults[1].getRowCount());
  assertTrue(scanResults[1].advanceRow());
  assertTrue("FAILURE".equals(scanResults[1].getString("RESULT")));
  scanResults=client.callProcedure("@SnapshotScan",TMPDIR).getResults();
  assertNotNull(scanResults);
  assertEquals(3,scanResults.length);
  assertEquals(8,scanResults[0].getColumnCount());
  assertEquals(1,scanResults[0].getRowCount());
  assertTrue(scanResults[0].advanceRow());
  assertTrue(TMPDIR.equals(scanResults[0].getString("PATH")));
  assertTrue(TESTNONCE.equals(scanResults[0].getString("NONCE")));
  assertTrue("TRUE".equals(scanResults[0].getString("COMPLETE")));
  FilenameFilter cleaner=new FilenameFilter(){
    public boolean accept(    File dir,    String file){
      return file.startsWith(TESTNONCE);
    }
  }
;
  File tmp_dir=new File(TMPDIR);
  File[] tmp_files=tmp_dir.listFiles(cleaner);
  tmp_files[0].delete();
  scanResults=client.callProcedure("@SnapshotScan",TMPDIR).getResults();
  assertNotNull(scanResults);
  assertEquals(3,scanResults.length);
  assertEquals(8,scanResults[0].getColumnCount());
  assertEquals(1,scanResults[0].getRowCount());
  assertTrue(scanResults[0].advanceRow());
  assertTrue(TMPDIR.equals(scanResults[0].getString("PATH")));
  assertTrue(TESTNONCE.equals(scanResults[0].getString("NONCE")));
  assertTrue("FALSE".equals(scanResults[0].getString("COMPLETE")));
  assertTrue(tmp_files[0].getName().contains(scanResults[0].getString("TABLES_MISSING")));
  Cluster cluster=VoltDB.instance().getCatalogContext().cluster;
  Database database=cluster.getDatabases().get("database");
  CatalogMap<Table> tables=database.getTables();
  CatalogMap<Site> sites=cluster.getSites();
  int num_hosts=cluster.getHosts().size();
  int replicated=0;
  int total_tables=0;
  int expected_entries=0;
  for (  Table table : tables) {
    if (table.getMaterializer() == null) {
      total_tables++;
      if (table.getIsreplicated()) {
        replicated++;
      }
    }
  }
  for (  Site s : sites) {
    if (s.getIsexec()) {
      expected_entries++;
    }
  }
  assertEquals(expected_entries,results[0].getRowCount());
  while (results[0].advanceRow()) {
    assertEquals(results[0].getString("RESULT"),"SUCCESS");
  }
  expected_entries=((total_tables - replicated) * num_hosts) + replicated;
  try {
    results=client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE,(byte)1).getResults();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("SnapshotSave exception: " + ex.getMessage());
  }
  assertEquals(expected_entries,results[0].getRowCount());
  while (results[0].advanceRow()) {
    if (!tmp_files[0].getName().contains(results[0].getString("TABLE"))) {
      assertEquals(results[0].getString("RESULT"),"FAILURE");
      assertTrue(results[0].getString("ERR_MSG").contains("SAVE FILE ALREADY EXISTS"));
    }
  }
  VoltTable deleteResults[]=client.callProcedure("@SnapshotDelete",new String[]{TMPDIR},new String[]{TESTNONCE}).getResults();
  assertNotNull(deleteResults);
  assertEquals(1,deleteResults.length);
  assertEquals(9,deleteResults[0].getColumnCount());
  assertEquals(8,deleteResults[0].getRowCount());
  tmp_files=tmp_dir.listFiles(cleaner);
  assertEquals(0,tmp_files.length);
  validateSnapshot(false);
}
