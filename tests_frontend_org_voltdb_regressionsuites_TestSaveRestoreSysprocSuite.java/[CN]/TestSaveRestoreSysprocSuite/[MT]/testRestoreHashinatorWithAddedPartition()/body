{
  if (isValgrind())   return;
  System.out.println("Starting testDistributeReplicatedTable");
  m_config.shutDown();
  int num_replicated_items=1000;
  int num_partitioned_items=126;
  SaveRestoreTestProjectBuilder project=new SaveRestoreTestProjectBuilder();
  project.addAllDefaults();
  LocalCluster lc=new LocalCluster(JAR_NAME,1,1,0,BackendTarget.NATIVE_EE_JNI);
  lc.setHasLocalServer(false);
{
    lc.compile(project);
    lc.startUp();
    try {
      Client client=ClientFactory.createClient();
      client.createConnection(lc.getListenerAddresses().get(0));
      try {
        VoltTable repl_table=createReplicatedTable(num_replicated_items,0,null);
        VoltTable partition_table=createPartitionedTable(num_partitioned_items,0);
        loadTable(client,"REPLICATED_TESTER",true,repl_table);
        loadTable(client,"PARTITION_TESTER",false,partition_table);
        saveTablesWithDefaultOptions(client);
      }
  finally {
        client.close();
      }
    }
  finally {
      lc.shutDown();
    }
  }
{
    lc.setSiteCount(2);
    lc.compile(project);
    lc.startUp(false);
    try {
      Client client=ClientFactory.createClient();
      client.createConnection(lc.getListenerAddresses().get(0));
      try {
        ClientResponse cr;
        try {
          cr=client.callProcedure("@SnapshotRestore",getRestoreParamsJSON(true));
        }
 catch (        ProcCallException e) {
          System.err.println(e.toString());
          cr=e.getClientResponse();
          System.err.printf("%d '%s' %s\n",cr.getStatus(),cr.getStatusString(),cr.getResults()[0].toString());
        }
        assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
        VoltTable results=null;
        int attempts=0;
        while ((results == null || results.getRowCount() == 0) && attempts < 60) {
          if (attempts++ > 0) {
            Thread.sleep(1000);
          }
          results=client.callProcedure("@Statistics","table",0).getResults()[0];
        }
        assertTrue(results.getRowCount() > 0);
        long maxPartitionId=-1;
        while (results.advanceRow()) {
          String tableName=results.getString("TABLE_NAME");
          long partitionId=results.getLong("PARTITION_ID");
          long tupleCount=results.getLong("TUPLE_COUNT");
          maxPartitionId=Math.max(partitionId,maxPartitionId);
          if (tableName.equals("REPLICATED_TESTER")) {
            assertTrue(tupleCount > 0);
          }
 else           if (tableName.equals("PARTITION_TESTER")) {
            if (partitionId == 0) {
              assertTrue(tupleCount > 0);
            }
 else {
              assertTrue(tupleCount == 0);
            }
          }
        }
        assertTrue(maxPartitionId == 1);
      }
  finally {
        client.close();
      }
    }
  finally {
      lc.shutDown();
    }
  }
}
