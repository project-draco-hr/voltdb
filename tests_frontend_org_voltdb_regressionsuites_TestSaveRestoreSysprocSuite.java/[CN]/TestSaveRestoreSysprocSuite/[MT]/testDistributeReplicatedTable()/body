{
  if (isValgrind())   return;
  System.out.println("Starting testDistributeReplicatedTable");
  m_config.shutDown();
  int num_replicated_items=1000;
  int num_partitioned_items=126;
  LocalCluster lc=new LocalCluster(JAR_NAME,2,3,0,BackendTarget.NATIVE_EE_JNI);
  lc.setHasLocalServer(false);
  SaveRestoreTestProjectBuilder project=new SaveRestoreTestProjectBuilder();
  project.addAllDefaults();
  lc.compile(project);
  lc.startUp();
  try {
    Client client=ClientFactory.createClient();
    client.createConnection(lc.getListenerAddresses().get(0));
    try {
      VoltTable repl_table=createReplicatedTable(num_replicated_items,0,null);
      VoltTable partition_table=createPartitionedTable(num_partitioned_items,0);
      loadTable(client,"REPLICATED_TESTER",true,repl_table);
      loadTable(client,"PARTITION_TESTER",false,partition_table);
      saveTablesWithDefaultOptions(client);
      boolean skipFirst=true;
      int deletedFiles=0;
      for (      File f : lc.listFiles(new File(TMPDIR))) {
        if (f.getName().startsWith(TESTNONCE + "-REPLICATED")) {
          if (skipFirst) {
            skipFirst=false;
            continue;
          }
          assertTrue(f.delete());
          deletedFiles++;
        }
      }
      assertEquals(deletedFiles,2);
    }
  finally {
      client.close();
    }
    lc.shutDown();
    lc.startUp(false);
    client=ClientFactory.createClient();
    client.createConnection(lc.getListenerAddresses().get(0));
    try {
      ClientResponse cr=client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE);
      assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
      checkTable(client,"REPLICATED_TESTER","RT_ID",num_replicated_items);
      checkTable(client,"PARTITION_TESTER","PT_ID",num_partitioned_items);
      ZooKeeper zk=ZKUtil.getClient(lc.zkinterface(0),5000,ImmutableSet.<Long>of());
      doDupRestore(client,false,zk);
      long start=System.currentTimeMillis();
      while (!lc.areAllNonLocalProcessesDead()) {
        Thread.sleep(1);
        long now=System.currentTimeMillis();
        long delta=now - start;
        if (delta > 10000)         break;
      }
      assertTrue(lc.areAllNonLocalProcessesDead());
    }
  finally {
      client.close();
    }
  }
  finally {
    lc.shutDown();
  }
}
