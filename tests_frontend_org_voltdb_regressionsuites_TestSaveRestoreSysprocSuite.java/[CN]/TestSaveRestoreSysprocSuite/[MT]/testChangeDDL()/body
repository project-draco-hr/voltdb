{
  System.out.println("Starting testChangeDDL");
  int num_partitioned_items_per_chunk=120;
  int num_partitioned_chunks=10;
  Client client=getClient();
  loadLargePartitionedTable(client,"PARTITION_TESTER",num_partitioned_items_per_chunk,num_partitioned_chunks);
  VoltTable change_table=new VoltTable(new ColumnInfo("ID",VoltType.INTEGER),new ColumnInfo("BYEBYE",VoltType.INTEGER));
  VoltTable eng_2025_table=new VoltTable(new ColumnInfo("key",VoltType.STRING),new ColumnInfo("value",VoltType.VARBINARY));
  for (int i=0; i < 10; i++) {
    Object[] row=new Object[]{i,i};
    change_table.addRow(row);
    eng_2025_table.addRow(new Object[]{Integer.toString(i),new byte[64]});
  }
  loadTable(client,"CHANGE_COLUMNS",false,change_table);
  loadTable(client,"ENG_2025",true,eng_2025_table);
  VoltTable[] results=null;
  results=saveTablesWithDefaultOptions(client);
  validateSnapshot(true);
  m_config.shutDown();
  CatalogChangeSingleProcessServer config=(CatalogChangeSingleProcessServer)m_config;
  SaveRestoreTestProjectBuilder project=new SaveRestoreTestProjectBuilder();
  project.addDefaultProcedures();
  project.addDefaultPartitioning();
  project.addSchema(SaveRestoreTestProjectBuilder.class.getResource("saverestore-altered-ddl.sql"));
  config.recompile(project);
  m_config.startUp();
  client=getClient();
  try {
    results=client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE).getResults();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("SnapshotRestore exception: " + ex.getMessage());
  }
  results=client.callProcedure("@Statistics","table",0).getResults();
  boolean found_gets_created=false;
  while (results[0].advanceRow()) {
    if (results[0].getString("TABLE_NAME").equals("GETS_REMOVED")) {
      fail("Table GETS_REMOVED got reloaded");
    }
    if (results[0].getString("TABLE_NAME").equals("GETS_CREATED")) {
      found_gets_created=true;
    }
  }
  VoltTable[] change_results=client.callProcedure("SaveRestoreSelect","CHANGE_COLUMNS").getResults();
  assertEquals(3,change_results[0].getColumnCount());
  for (int i=0; i < 10; i++) {
    VoltTableRow row=change_results[0].fetchRow(i);
    assertEquals(i,row.getLong("ID"));
    assertEquals(1234,row.getLong("HASDEFAULT"));
    row.getLong("HASNULL");
    assertTrue(row.wasNull());
  }
  assertTrue(found_gets_created);
  config.revertCompile();
}
