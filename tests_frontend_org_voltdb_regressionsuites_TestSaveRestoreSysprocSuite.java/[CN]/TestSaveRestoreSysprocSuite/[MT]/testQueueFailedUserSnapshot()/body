{
  if (isValgrind())   return;
  System.out.println("Staring testQueueFailedUserSnapshot.");
  Client client=getClient();
  int num_replicated_items_per_chunk=100;
  int num_replicated_chunks=10;
  int num_partitioned_items_per_chunk=120;
  int num_partitioned_chunks=10;
  Set<String> expectedText=new HashSet<String>();
  loadLargeReplicatedTable(client,"REPLICATED_TESTER",num_replicated_items_per_chunk,num_replicated_chunks,false,expectedText);
  loadLargePartitionedTable(client,"PARTITION_TESTER",num_partitioned_items_per_chunk,num_partitioned_chunks);
  DefaultSnapshotDataTarget.m_simulateBlockedWrite=new CountDownLatch(1);
  client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE,(byte)0);
  org.voltdb.SnapshotDaemon.m_userSnapshotRetryInterval=1;
  ClientResponse r=client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE,(byte)0);
  VoltTable result=r.getResults()[0];
  assertTrue(result.advanceRow());
  assertTrue(result.getString("ERR_MSG").startsWith("SNAPSHOT REQUEST QUEUED"));
  Thread.sleep(2000);
  DefaultSnapshotDataTarget.m_simulateBlockedWrite.countDown();
  DefaultSnapshotDataTarget.m_simulateBlockedWrite=null;
  Thread.sleep(2000);
  r=client.callProcedure("@SnapshotSave",TMPDIR,TESTNONCE + "2",(byte)1);
  result=r.getResults()[0];
  while (result.advanceRow()) {
    assertTrue(result.getString("RESULT").equals("SUCCESS"));
  }
  validateSnapshot(true,false,true,TESTNONCE + "2");
}
