{
  if (isValgrind())   return;
  System.out.println("Starting testBadChangeAttributeTypes");
  Client client=getClient();
  VoltTable change_types=new VoltTable(new ColumnInfo("ID",VoltType.INTEGER),new ColumnInfo("BECOMES_INT",VoltType.TINYINT),new ColumnInfo("BECOMES_FLOAT",VoltType.INTEGER),new ColumnInfo("BECOMES_TINY",VoltType.INTEGER));
  change_types.addRow(0,100,100,100000);
  loadTable(client,"CHANGE_TYPES",true,change_types);
  VoltTable[] results=null;
  results=saveTablesWithDefaultOptions(client);
  validateSnapshot(true);
  m_config.shutDown();
  CatalogChangeSingleProcessServer config=(CatalogChangeSingleProcessServer)m_config;
  SaveRestoreTestProjectBuilder project=new SaveRestoreTestProjectBuilder();
  project.addDefaultProcedures();
  project.addDefaultPartitioning();
  project.addSchema(SaveRestoreTestProjectBuilder.class.getResource("saverestore-altered-ddl.sql"));
  config.recompile(project);
  m_config.startUp();
  client=getClient();
  try {
    results=client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE).getResults();
    fail();
  }
 catch (  ProcCallException ex) {
    assertEquals(ClientResponse.OPERATIONAL_FAILURE,ex.getClientResponse().getStatus());
    results=ex.getClientResponse().getResults();
  }
  boolean type_failure=false;
  while (results[0].advanceRow()) {
    if (results[0].getString("RESULT").equals("FAILURE")) {
      if (results[0].getString("ERR_MSG").contains("would overflow")) {
        type_failure=true;
      }
    }
  }
  assertTrue(type_failure);
  config.revertCompile();
}
