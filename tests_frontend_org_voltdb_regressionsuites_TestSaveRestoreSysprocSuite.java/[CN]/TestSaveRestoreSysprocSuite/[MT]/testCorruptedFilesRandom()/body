{
  System.out.println("Starting testCorruptedFilesRandom");
  int num_replicated_items=1000;
  int num_partitioned_items=126;
  java.util.Random r=new java.util.Random();
  final int iterations=isValgrind() ? 5 : 5;
  for (int ii=0; ii < iterations; ii++) {
    Client client=getClient();
    VoltTable repl_table=createReplicatedTable(num_replicated_items,0,null);
    VoltTable partition_table=createPartitionedTable(num_partitioned_items,0);
    loadTable(client,"REPLICATED_TESTER",true,repl_table);
    loadTable(client,"PARTITION_TESTER",false,partition_table);
    saveTablesWithDefaultOptions(client);
    validateSnapshot(true);
    releaseClient(client);
    m_config.shutDown();
    corruptTestFiles(r);
    validateSnapshot(false);
    m_config.startUp();
    client=getClient();
    VoltTable results[]=client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE).getResults();
    assertNotNull(results);
    assertNotNull(results[0]);
    boolean haveFailure=false;
    while (results[0].advanceRow()) {
      if (results[0].getString("RESULT").equals("FAILURE")) {
        haveFailure=true;
        break;
      }
    }
    if (!haveFailure) {
      System.out.println("foo");
    }
    assertTrue(haveFailure);
    deleteTestFiles();
    releaseClient(client);
    m_config.shutDown();
    m_config.startUp();
  }
}
