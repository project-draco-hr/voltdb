{
  System.out.println("Starting testSaveAndRestoreReplicatedTable");
  int num_replicated_items_per_chunk=200;
  int num_replicated_chunks=10;
  Client client=getClient();
  loadLargeReplicatedTable(client,"REPLICATED_TESTER",num_replicated_items_per_chunk,num_replicated_chunks);
  Thread.sleep(1000);
  VoltTable orig_mem=null;
  try {
    orig_mem=client.callProcedure("@Statistics","memory",0).getResults()[0];
    System.out.println("STATS: " + orig_mem.toString());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Statistics exception: " + ex.getMessage());
  }
  VoltTable[] results=null;
  results=saveTables(client);
  m_config.shutDown();
  m_config.startUp();
  client=getClient();
  try {
    client.callProcedure("@SnapshotRestore",TMPDIR,TESTNONCE,ALLOWEXPORT);
    while (results[0].advanceRow()) {
      if (results[0].getString("RESULT").equals("FAILURE")) {
        fail(results[0].getString("ERR_MSG"));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("SnapshotRestore exception: " + ex.getMessage());
  }
  VoltTable final_mem=null;
  try {
    final_mem=client.callProcedure("@Statistics","memory",0).getResults()[0];
    System.out.println("STATS: " + final_mem.toString());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail("Statistics exception: " + ex.getMessage());
  }
  checkBeforeAndAfterMemory(orig_mem,final_mem);
  checkTable(client,"REPLICATED_TESTER","RT_ID",num_replicated_items_per_chunk * num_replicated_chunks);
  results=client.callProcedure("@Statistics","table",0).getResults();
  System.out.println("@Statistics after restore:");
  System.out.println(results[0]);
  int foundItem=0;
  while (results[0].advanceRow()) {
    if (results[0].getString("TABLE_NAME").equals("REPLICATED_TESTER")) {
      ++foundItem;
      assertEquals((num_replicated_chunks * num_replicated_items_per_chunk),results[0].getLong("TUPLE_COUNT"));
    }
  }
  assertEquals(3,foundItem);
  validateSnapshot(true);
}
