import sys
from xml.dom.minidom import parse, parseString
from xml.dom import Node
from xmltools import *
if (len(sys.argv) != 3):
    print 'examply-dist-cleanup.py expects 3 arguments.'
    sys.exit((-1))
pathToBuildXml = (sys.argv[2] + '/build.xml')
pathToBasebuild = sys.argv[1]
basedom = parse(open(pathToBasebuild))
builddom = parse(open(pathToBuildXml))
killText(basedom)
killText(builddom)
baseproject = basedom.getElementsByTagName('project').item(0)
buildproject = builddom.getElementsByTagName('project').item(0)
(baseproperties, basetargets, baseothers) = splitElements(baseproject)
(buildproperties, buildtargets, buildothers) = splitElements(buildproject)
properties = mergeNodes(baseproperties, buildproperties, (lambda x: x.getAttribute('name')))
for p in properties:
    if (p.getAttribute('name') == 'voltdb.dir'):
        p.setAttribute('location', '../../voltdb')
for o in buildothers:
    if ((o.tagName == 'path') and (o.getAttribute('id') == 'project.classpath')):
        for o2 in baseothers:
            if ((o2.tagName == 'path') and (o2.getAttribute('id') == 'project.classpath')):
                baseothers.remove(o2)
                break
others = (baseothers + buildothers)
others = filterElements(others)
output = '<?xml version="1.0" ?><project name=\''
output += (buildproject.getAttribute('name') + "' default='default'/>")
output = parseString(output)
newproject = output.getElementsByTagName('project').item(0)
for p in properties:
    newproject.appendChild(cloneNode(output, p))
for o in others:
    newproject.appendChild(cloneNode(output, o))
basetargets = [cloneNode(output, t) for t in basetargets]
buildtargets = [cloneNode(output, t) for t in buildtargets]
targets = mergeTargets(basetargets, buildtargets, output)
for t in targets:
    newproject.appendChild(t)
attributeOrder = {'property': ['name', 'value', 'location'], 'target': ['name', 'depends', 'description'], 'java': ['classname'], 'javac': ['srcdir', 'destdir'], 'fileset': ['dir'], }
addWhitespace(output, newproject)
content = prettyXml(output, attributeOrder)
writeFile(pathToBuildXml, content)
