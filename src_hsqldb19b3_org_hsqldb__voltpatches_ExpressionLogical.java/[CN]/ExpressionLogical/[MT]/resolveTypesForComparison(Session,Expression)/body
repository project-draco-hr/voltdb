{
  if (exprSubType == OpTypes.ALL_QUANTIFIED || exprSubType == OpTypes.ANY_QUANTIFIED) {
    resolveTypesForAllAny(session);
    return;
  }
  if (nodes[LEFT].opType == OpTypes.ROW || nodes[RIGHT].opType == OpTypes.ROW) {
    if (nodes[LEFT].opType != OpTypes.ROW || nodes[RIGHT].opType != OpTypes.ROW || nodes[LEFT].nodes.length != nodes[RIGHT].nodes.length) {
      throw Error.error(ErrorCode.X_42564);
    }
    resolveRowTypes();
  }
 else {
    if (nodes[LEFT].isParam) {
      nodes[LEFT].dataType=nodes[RIGHT].dataType;
    }
 else     if (nodes[RIGHT].isParam) {
      nodes[RIGHT].dataType=nodes[LEFT].dataType;
    }
    if (nodes[LEFT].dataType == null || nodes[RIGHT].dataType == null) {
      throw Error.error(ErrorCode.X_42567);
    }
    if (nodes[LEFT].dataType.typeComparisonGroup != nodes[RIGHT].dataType.typeComparisonGroup) {
      if (convertDateTimeLiteral(session,nodes[LEFT],nodes[RIGHT])) {
      }
 else       if (voltConvertBinaryIntegerLiteral(session,nodes[LEFT],nodes[RIGHT])) {
      }
 else {
        throw Error.error(ErrorCode.X_42562);
      }
    }
 else     if (nodes[LEFT].dataType.isDateTimeType()) {
      if (nodes[LEFT].dataType.isDateTimeTypeWithZone() ^ nodes[RIGHT].dataType.isDateTimeTypeWithZone()) {
        nodes[LEFT]=new ExpressionOp(nodes[LEFT]);
      }
    }
  }
  if (nodes[LEFT].opType == OpTypes.VALUE && nodes[RIGHT].opType == OpTypes.VALUE) {
    setAsConstantValue(session);
  }
}
