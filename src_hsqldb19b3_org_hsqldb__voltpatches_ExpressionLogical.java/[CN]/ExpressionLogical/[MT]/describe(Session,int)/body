{
  StringBuffer sb=new StringBuffer(64);
  sb.append('\n');
  for (int i=0; i < blanks; i++) {
    sb.append(' ');
  }
switch (opType) {
case OpTypes.VALUE:
    sb.append("VALUE = ").append(valueData);
  sb.append(", TYPE = ").append(dataType.getNameString());
return sb.toString();
case OpTypes.NOT:
if (nodes[LEFT].opType == OpTypes.NOT_DISTINCT) {
sb.append(Tokens.T_DISTINCT);
return sb.toString();
}
sb.append("NOT ");
break;
case OpTypes.NOT_DISTINCT:
sb.append("NOT ");
sb.append("DISTINCT ");
break;
case OpTypes.EQUAL:
sb.append("EQUAL ");
break;
case OpTypes.GREATER_EQUAL:
sb.append("GREATER_EQUAL ");
break;
case OpTypes.GREATER:
sb.append("GREATER ");
break;
case OpTypes.SMALLER:
sb.append("SMALLER ");
break;
case OpTypes.SMALLER_EQUAL:
sb.append("SMALLER_EQUAL ");
break;
case OpTypes.NOT_EQUAL:
sb.append("NOT_EQUAL ");
break;
case OpTypes.AND:
sb.append("AND ");
break;
case OpTypes.OR:
sb.append("OR ");
break;
case OpTypes.MATCH_SIMPLE:
case OpTypes.MATCH_PARTIAL:
case OpTypes.MATCH_FULL:
case OpTypes.MATCH_UNIQUE_SIMPLE:
case OpTypes.MATCH_UNIQUE_PARTIAL:
case OpTypes.MATCH_UNIQUE_FULL:
sb.append("MATCH ");
break;
case OpTypes.IS_NULL:
sb.append("IS_NULL ");
break;
case OpTypes.UNIQUE:
sb.append("UNIQUE ");
break;
case OpTypes.EXISTS:
sb.append("EXISTS ");
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
if (nodes.length > LEFT && nodes[LEFT] != null) {
sb.append(" arg1=[");
sb.append(nodes[LEFT].describe(session,blanks + 1));
sb.append(']');
}
if (nodes.length > RIGHT && nodes[RIGHT] != null) {
sb.append(" arg2=[");
sb.append(nodes[RIGHT].describe(session,blanks + 1));
sb.append(']');
}
return sb.toString();
}
