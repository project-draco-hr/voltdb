{
  String element=null;
  boolean unsupported=false;
switch (opType) {
case OpTypes.EQUAL:
    element="equal";
  break;
case OpTypes.NOT_EQUAL:
element="notequal";
break;
case OpTypes.GREATER:
element="greaterthan";
break;
case OpTypes.GREATER_EQUAL:
element="greaterthanorequalto";
break;
case OpTypes.SMALLER:
element="lessthan";
break;
case OpTypes.SMALLER_EQUAL:
element="lessthanorequalto";
break;
case OpTypes.AND:
element="and";
break;
case OpTypes.OR:
element="or";
break;
case OpTypes.IN:
element="in";
break;
case OpTypes.IS_NULL:
element="is_null";
break;
case OpTypes.NOT:
element="not";
break;
case OpTypes.LIKE:
element="like";
break;
case OpTypes.EXISTS:
throw new HSQLParseException("VoltDB does not yet support EXISTS clause, consider using views instead");
case OpTypes.VALUE:
throw new HSQLParseException("VoltDB does not yet support where clauses containing only constants");
case OpTypes.ALL_QUANTIFIED:
unsupported=true;
element="allquantified";
break;
case OpTypes.ANY_QUANTIFIED:
unsupported=true;
element="anyquantified";
break;
case OpTypes.MATCH_FULL:
unsupported=true;
element="matchfull";
break;
case OpTypes.MATCH_PARTIAL:
unsupported=true;
element="matchpartial";
break;
case OpTypes.MATCH_SIMPLE:
unsupported=true;
element="matchsimple";
break;
case OpTypes.MATCH_UNIQUE_FULL:
unsupported=true;
element="matchuniquefull";
break;
case OpTypes.MATCH_UNIQUE_PARTIAL:
unsupported=true;
element="matchuniquepartial";
break;
case OpTypes.MATCH_UNIQUE_SIMPLE:
unsupported=true;
element="matchuniquesimple";
break;
case OpTypes.NEGATE:
unsupported=true;
element="negate";
break;
case OpTypes.NOT_DISTINCT:
unsupported=true;
element="notdistinct";
break;
case OpTypes.OVERLAPS:
unsupported=true;
element="overlaps";
break;
case OpTypes.SIMPLE_COLUMN:
unsupported=true;
element="simplecolumn";
break;
case OpTypes.UNIQUE:
unsupported=true;
element="unique";
break;
default :
throw new HSQLParseException("Unsupported Logical Operation: #" + String.valueOf(opType));
}
if (unsupported) {
throw new HSQLParseException(element + " logical operator is not supported");
}
VoltXMLElement exp=new VoltXMLElement("operation");
exp.attributes.put("id",getUniqueId(session));
exp.attributes.put("type",element);
if ((this.alias != null) && (getAlias().length() > 0)) {
exp.attributes.put("alias",getAlias());
}
for (Expression expr : nodes) {
VoltXMLElement vxmle=expr.voltGetXML(session);
exp.children.add(vxmle);
assert(vxmle != null);
}
return exp;
}
