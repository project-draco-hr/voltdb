{
  if (s.length() == 10) {
    return newDate(s);
  }
  long zoneSeconds=0;
  long seconds;
  int fraction=0;
  int endIndex=s.length();
  boolean negate;
  boolean hasZone=false;
  intervalPosition=0;
  fractionPrecision=0;
  dateTimeType=null;
  intervalString=s;
  scanDateParts(5);
  try {
    seconds=HsqlDateTime.getTimestampSeconds(s.substring(0,intervalPosition));
  }
 catch (  StackOverflowError caught) {
    throw caught;
  }
catch (  Throwable e) {
    throw Error.error(ErrorCode.X_22007);
  }
  int position;
  fraction=scanIntervalFraction(DTIType.maxFractionPrecision);
  position=intervalPosition;
  negate=scanIntervalSign();
  if (negate || position != intervalPosition) {
    zoneSeconds=scanIntervalValue(Type.SQL_INTERVAL_HOUR_TO_MINUTE);
    hasZone=true;
    if (negate) {
      zoneSeconds=-zoneSeconds;
    }
  }
  if (zoneSeconds >= DTIType.yearToSecondFactors[2] || zoneSeconds > DTIType.timezoneSecondsLimit || -zoneSeconds > DTIType.timezoneSecondsLimit) {
    throw Error.error(ErrorCode.X_22009);
  }
  if (intervalPosition != endIndex) {
    throw Error.error(ErrorCode.X_22007);
  }
  int type=hasZone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE : Types.SQL_TIMESTAMP;
  dateTimeType=DateTimeType.getDateTimeType(type,fractionPrecision);
  if (hasZone) {
    seconds-=zoneSeconds;
  }
  return new TimestampData(seconds,fraction,(int)zoneSeconds);
}
