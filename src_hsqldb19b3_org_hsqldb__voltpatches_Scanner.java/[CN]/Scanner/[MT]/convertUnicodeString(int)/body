{
  charWriter.reset(charBuffer);
  int position=0;
  for (; ; ) {
    int nextIndex=token.tokenString.indexOf(escape,position);
    if (nextIndex < 0) {
      nextIndex=token.tokenString.length();
    }
    charWriter.write(token.tokenString,position,nextIndex - position);
    if (nextIndex == token.tokenString.length()) {
      break;
    }
    nextIndex++;
    if (nextIndex == token.tokenString.length()) {
      token.tokenType=Tokens.X_MALFORMED_UNICODE_STRING;
      token.isMalformed=true;
      return;
    }
    if (token.tokenString.charAt(nextIndex) == escape) {
      charWriter.write(escape);
      nextIndex++;
      position=nextIndex;
      continue;
    }
    if (nextIndex > token.tokenString.length() - 4) {
      token.tokenType=Tokens.X_MALFORMED_UNICODE_STRING;
      token.isMalformed=true;
      return;
    }
    int hexCount=4;
    int hexIndex=0;
    int hexValue=0;
    if (token.tokenString.charAt(nextIndex) == '+') {
      nextIndex++;
      if (nextIndex > token.tokenString.length() - 6) {
        token.tokenType=Tokens.X_MALFORMED_UNICODE_STRING;
        token.isMalformed=true;
        return;
      }
      hexIndex=2;
      hexCount=8;
    }
    for (; hexIndex < hexCount; hexIndex++) {
      int character=token.tokenString.charAt(position++);
      character=getHexValue(character);
      if (character == -1) {
        token.tokenType=Tokens.X_MALFORMED_UNICODE_STRING;
        token.isMalformed=true;
        return;
      }
      hexValue|=character << ((hexCount - hexIndex - 1) * 4);
    }
    if (hexCount == 8) {
      charWriter.write(hexValue >>> 16);
    }
    charWriter.write(hexValue & (hexValue & 0xffff));
    token.tokenValue=charWriter.toString();
  }
}
