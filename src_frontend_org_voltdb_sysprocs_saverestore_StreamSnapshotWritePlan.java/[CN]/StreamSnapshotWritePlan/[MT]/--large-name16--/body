{
  assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.isEmpty());
  final StreamSnapshotRequestConfig config=new StreamSnapshotRequestConfig(jsData,context.getDatabase());
  final List<StreamSnapshotRequestConfig.Stream> localStreams=filterRemoteStreams(config.streams,Longs.asList(tracker.getLocalSites()));
  final Set<Integer> partitionsToAdd=getPartitionsToAdd(localStreams);
  final int newPartitionCount=partitionsToAdd.isEmpty() ? context.getNumberOfPartitions() : Collections.max(partitionsToAdd) + 1;
  Callable<Boolean> deferredSetup=null;
  if (config.shouldTruncate) {
    deferredSetup=coalesceTruncationSnapshotPlan(file_path,file_nonce,txnId,partitionTransactionIds,partitionUniqueIds,remoteDCLastIds,jsData,context,result,exportSequenceNumbers,drSequenceNumbers,tracker,hashinatorData,timestamp,newPartitionCount);
  }
  List<Integer> localPartitions=tracker.getPartitionsForHost(context.getHostId());
  if (!partitionsToAdd.isEmpty()) {
    createUpdatePartitionCountTasksForSites(localPartitions,newPartitionCount);
  }
  final AtomicInteger numTables=new AtomicInteger(config.tables.length);
  m_snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,SnapshotFormat.STREAM,config.tables);
  Map<Integer,byte[]> schemas=new HashMap<Integer,byte[]>();
  for (  final Table table : config.tables) {
    VoltTable schemaTable=CatalogUtil.getVoltTable(table);
    schemas.put(table.getRelativeIndex(),PrivateVoltTableFactory.getSchemaBytes(schemaTable));
  }
  List<DataTargetInfo> sdts=createDataTargets(localStreams,hashinatorData,schemas);
  for (  final Table table : config.tables) {
    createTasksForTable(table,sdts,numTables,m_snapshotRecord);
    result.addRow(context.getHostId(),CoreUtils.getHostnameOrAddress(),table.getTypeName(),"SUCCESS","");
  }
  return deferredSetup;
}
