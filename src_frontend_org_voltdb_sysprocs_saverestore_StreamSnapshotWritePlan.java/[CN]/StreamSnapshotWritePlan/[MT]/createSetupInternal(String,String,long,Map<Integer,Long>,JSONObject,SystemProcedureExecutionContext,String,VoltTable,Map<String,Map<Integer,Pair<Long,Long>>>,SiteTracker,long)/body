{
  assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.isEmpty());
  final List<Long> localHSIds=Longs.asList(tracker.getLocalSites());
  final StreamSnapshotRequestConfig config=new StreamSnapshotRequestConfig(jsData,context.getDatabase(),localHSIds);
  List<Integer> localPartitions=tracker.getPartitionsForHost(context.getHostId());
  Map<Long,Integer> tokensToAdd=createTokensToAdd(config.partitionsToAdd);
  createUpdateHashinatorTasksForSites(localPartitions,tokensToAdd,txnId);
  final AtomicInteger numTables=new AtomicInteger(config.tables.size());
  final SnapshotRegistry.Snapshot snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,SnapshotFormat.STREAM,config.tables.toArray(new Table[0]));
  Map<Integer,byte[]> schemas=new HashMap<Integer,byte[]>();
  for (  final Table table : config.tables) {
    VoltTable schemaTable=CatalogUtil.getVoltTable(table);
    schemas.put(table.getRelativeIndex(),schemaTable.getSchemaBytes());
  }
  Map<Long,SnapshotDataTarget> sdts=new HashMap<Long,SnapshotDataTarget>();
  if (config.streamPairs.size() > 0) {
    SNAP_LOG.debug("Sites to stream from: " + CoreUtils.hsIdCollectionToString(config.streamPairs.keySet()));
    for (    Entry<Long,Long> entry : config.streamPairs.entrySet()) {
      sdts.put(entry.getKey(),new StreamSnapshotDataTarget(entry.getValue(),schemas));
    }
  }
 else {
    return false;
  }
  for (  Entry<Long,SnapshotDataTarget> entry : sdts.entrySet()) {
    final ArrayList<SnapshotTableTask> partitionedSnapshotTasks=new ArrayList<SnapshotTableTask>();
    final ArrayList<SnapshotTableTask> replicatedSnapshotTasks=new ArrayList<SnapshotTableTask>();
    SnapshotDataTarget sdt=entry.getValue();
    m_targets.add(sdt);
    for (    final Table table : config.tables) {
      final Runnable onClose=new TargetStatsClosure(sdt,table.getTypeName(),numTables,snapshotRecord);
      sdt.setOnCloseHandler(onClose);
      AbstractExpression predicate=null;
      boolean deleteTuples=false;
      if (!table.getIsreplicated()) {
        predicate=createPredicateForTable(table,config);
        deleteTuples=true;
      }
      final SnapshotTableTask task=new SnapshotTableTask(table.getRelativeIndex(),sdt,new SnapshotDataFilter[0],predicate,deleteTuples,table.getIsreplicated(),table.getTypeName());
      if (table.getIsreplicated()) {
        replicatedSnapshotTasks.add(task);
      }
 else {
        partitionedSnapshotTasks.add(task);
      }
      result.addRow(context.getHostId(),hostname,table.getTypeName(),"SUCCESS","");
    }
    List<Long> thisOne=new ArrayList<Long>();
    thisOne.add(entry.getKey());
    placePartitionedTasks(partitionedSnapshotTasks,thisOne);
    placeReplicatedTasks(replicatedSnapshotTasks,thisOne);
  }
  return false;
}
