{
  assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.isEmpty());
  final List<Long> localHSIds=Longs.asList(tracker.getLocalSites());
  final StreamSnapshotRequestConfig config=new StreamSnapshotRequestConfig(jsData,context.getDatabase(),localHSIds);
  List<Integer> localPartitions=tracker.getPartitionsForHost(context.getHostId());
  if (!config.partitionsToAdd.isEmpty()) {
    Map<Long,Integer> tokensToAdd=createTokensToAdd(config.partitionsToAdd);
    createUpdateHashinatorTasksForSites(localPartitions,tokensToAdd,txnId);
  }
  final AtomicInteger numTables=new AtomicInteger(config.tables.length);
  final SnapshotRegistry.Snapshot snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,SnapshotFormat.STREAM,config.tables);
  Map<Integer,byte[]> schemas=new HashMap<Integer,byte[]>();
  for (  final Table table : config.tables) {
    VoltTable schemaTable=CatalogUtil.getVoltTable(table);
    schemas.put(table.getRelativeIndex(),schemaTable.getSchemaBytes());
  }
  ArrayListMultimap<Long,SnapshotDataTarget> sdts=ArrayListMultimap.create();
  if (config.streamPairs.size() > 0) {
    SNAP_LOG.debug("Sites to stream from: " + CoreUtils.hsIdCollectionToString(config.streamPairs.keySet()));
    for (    Entry<Long,Collection<Long>> entry : config.streamPairs.asMap().entrySet()) {
      long srcHSId=entry.getKey();
      Collection<Long> destHSIds=entry.getValue();
      for (      long destHSId : destHSIds) {
        sdts.put(srcHSId,new StreamSnapshotDataTarget(destHSId,schemas));
      }
    }
  }
 else {
    return false;
  }
  for (  final Table table : config.tables) {
    createTasksForTable(table,sdts.asMap(),config,numTables,snapshotRecord);
    result.addRow(context.getHostId(),hostname,table.getTypeName(),"SUCCESS","");
  }
  return false;
}
