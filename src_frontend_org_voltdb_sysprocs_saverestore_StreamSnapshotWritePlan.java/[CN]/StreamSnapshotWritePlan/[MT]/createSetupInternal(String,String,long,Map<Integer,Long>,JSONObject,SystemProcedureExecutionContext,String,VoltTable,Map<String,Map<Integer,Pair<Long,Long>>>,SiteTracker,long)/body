{
  Map<Long,Long> streamPairs;
  assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.isEmpty());
  final List<Table> tables=getTablesToInclude(jsData,context);
  final AtomicInteger numTables=new AtomicInteger(tables.size());
  final SnapshotRegistry.Snapshot snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,SnapshotFormat.STREAM,tables.toArray(new Table[0]));
  Map<Integer,byte[]> schemas=new HashMap<Integer,byte[]>();
  for (  final Table table : tables) {
    VoltTable schemaTable=CatalogUtil.getVoltTable(table);
    schemas.put(table.getRelativeIndex(),schemaTable.getSchemaBytes());
  }
  try {
    streamPairs=getStreamPairs(jsData,tracker);
  }
 catch (  JSONException e) {
    SnapshotRegistry.discardSnapshot(snapshotRecord);
    return true;
  }
  Map<Long,SnapshotDataTarget> sdts=new HashMap<Long,SnapshotDataTarget>();
  if (streamPairs.size() > 0) {
    SNAP_LOG.debug("Sites to stream from: " + CoreUtils.hsIdCollectionToString(streamPairs.keySet()));
    for (    Entry<Long,Long> entry : streamPairs.entrySet()) {
      sdts.put(entry.getKey(),new StreamSnapshotDataTarget(entry.getValue(),schemas));
    }
  }
 else {
    return false;
  }
  for (  Entry<Long,SnapshotDataTarget> entry : sdts.entrySet()) {
    final ArrayList<SnapshotTableTask> partitionedSnapshotTasks=new ArrayList<SnapshotTableTask>();
    final ArrayList<SnapshotTableTask> replicatedSnapshotTasks=new ArrayList<SnapshotTableTask>();
    SnapshotDataTarget sdt=entry.getValue();
    m_targets.add(sdt);
    for (    final Table table : tables) {
      final Runnable onClose=new TargetStatsClosure(sdt,table.getTypeName(),numTables,snapshotRecord);
      sdt.setOnCloseHandler(onClose);
      final SnapshotTableTask task=new SnapshotTableTask(table.getRelativeIndex(),sdt,new SnapshotDataFilter[0],table.getIsreplicated(),table.getTypeName());
      if (table.getIsreplicated()) {
        replicatedSnapshotTasks.add(task);
      }
 else {
        partitionedSnapshotTasks.add(task);
      }
      result.addRow(context.getHostId(),hostname,table.getTypeName(),"SUCCESS","");
    }
    List<Long> thisOne=new ArrayList<Long>();
    thisOne.add(entry.getKey());
    placePartitionedTasks(partitionedSnapshotTasks,thisOne);
    placeReplicatedTasks(replicatedSnapshotTasks,thisOne);
  }
  return false;
}
