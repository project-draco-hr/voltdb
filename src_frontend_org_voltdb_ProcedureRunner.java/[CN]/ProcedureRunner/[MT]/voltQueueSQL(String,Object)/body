{
  if (sql == null || sql.isEmpty()) {
    throw new IllegalArgumentException("SQL statement '" + sql + "' is null or the empty string");
  }
  try {
    AdHocPlannedStmtBatch batch=m_csp.plan(sql,args,m_isSinglePartition).get();
    if (batch.errorMsg != null) {
      throw new VoltAbortException("Failed to plan sql '" + sql + "' error: "+ batch.errorMsg);
    }
    if (m_isReadOnly && !batch.isReadOnly()) {
      throw new VoltAbortException("Attempted to queue DML adhoc sql '" + sql + "' from read only procedure");
    }
    assert(1 == batch.plannedStatements.size());
    QueuedSQL queuedSQL=new QueuedSQL();
    AdHocPlannedStatement plannedStatement=batch.plannedStatements.get(0);
    long aggFragId=ActivePlanRepository.loadOrAddRefPlanFragment(plannedStatement.core.aggregatorHash,plannedStatement.core.aggregatorFragment,sql);
    long collectorFragId=0;
    if (plannedStatement.core.collectorFragment != null) {
      collectorFragId=ActivePlanRepository.loadOrAddRefPlanFragment(plannedStatement.core.collectorHash,plannedStatement.core.collectorFragment,sql);
    }
    queuedSQL.stmt=SQLStmtAdHocHelper.createWithPlan(plannedStatement.sql,aggFragId,plannedStatement.core.aggregatorHash,true,collectorFragId,plannedStatement.core.collectorHash,true,plannedStatement.core.isReplicatedTableDML,plannedStatement.core.readOnly,plannedStatement.core.parameterTypes,m_site);
    Object[] argumentParams=args;
    if (plannedStatement.hasExtractedParams()) {
      if (args.length > 0) {
        throw new VoltAbortException("Number of arguments provided was " + args.length + " where 0 were expected for statement: "+ sql);
      }
      argumentParams=plannedStatement.extractedParamArray();
      if (argumentParams.length != queuedSQL.stmt.statementParamJavaTypes.length) {
        String msg=String.format("The wrong number of arguments (" + argumentParams.length + " vs. the "+ queuedSQL.stmt.statementParamJavaTypes.length+ " expected) were passed for the parameterized statement: %s",sql);
        throw new VoltAbortException(msg);
      }
    }
    queuedSQL.params=getCleanParams(queuedSQL.stmt,argumentParams);
    updateCRC(queuedSQL);
    m_batch.add(queuedSQL);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      throw new VoltAbortException(e.getCause());
    }
    if (e instanceof VoltAbortException) {
      throw (VoltAbortException)e;
    }
    throw new VoltAbortException(e);
  }
}
