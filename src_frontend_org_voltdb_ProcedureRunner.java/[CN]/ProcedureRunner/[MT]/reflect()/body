{
  if (m_catProc.getHasjava() == false) {
    try {
      Map<String,Field> stmtMap=ProcedureCompiler.getValidSQLStmts(null,m_procedureName,m_procedure.getClass(),true);
      Field f=stmtMap.get(VoltDB.ANON_STMT_NAME);
      assert(f != null);
      SQLStmt stmt=(SQLStmt)f.get(m_procedure);
      Statement statement=m_catProc.getStatements().get(VoltDB.ANON_STMT_NAME);
      stmt.sqlText=statement.getSqltext();
      m_cachedSingleStmt.stmt=stmt;
      int numParams=m_catProc.getParameters().size();
      m_paramTypes=new Class<?>[numParams];
      for (      ProcParameter param : m_catProc.getParameters()) {
        VoltType type=VoltType.get((byte)param.getType());
        if (type == VoltType.INTEGER)         type=VoltType.BIGINT;
        if (type == VoltType.SMALLINT)         type=VoltType.BIGINT;
        if (type == VoltType.TINYINT)         type=VoltType.BIGINT;
        m_paramTypes[param.getIndex()]=type.classFromType();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    Method[] methods=m_procedure.getClass().getDeclaredMethods();
    for (    final Method m : methods) {
      String name=m.getName();
      if (name.equals("run")) {
        if (Modifier.isPublic(m.getModifiers()) == false)         continue;
        m_procMethod=m;
        m_paramTypes=m.getParameterTypes();
      }
    }
    if (m_procMethod == null) {
      log.debug("No good method found in: " + m_procedure.getClass().getName());
    }
  }
  Map<String,Field> stmtMap=null;
  try {
    stmtMap=ProcedureCompiler.getValidSQLStmts(null,m_procedureName,m_procedure.getClass(),true);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    return;
  }
  Field[] fields=new Field[stmtMap.size()];
  int index=0;
  for (  Field f : stmtMap.values()) {
    fields[index++]=f;
  }
  for (  final Field f : fields) {
    String name=f.getName();
    Statement s=m_catProc.getStatements().get(name);
    if (s != null) {
      try {
        SQLStmt stmt=(SQLStmt)f.get(m_procedure);
        initSQLStmt(stmt,s);
      }
 catch (      IllegalArgumentException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}
