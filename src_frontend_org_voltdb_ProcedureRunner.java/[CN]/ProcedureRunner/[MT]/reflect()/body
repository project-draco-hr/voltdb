{
  if (m_catProc.getHasjava() == false) {
    try {
      Map<String,SQLStmt> stmtMap=ProcedureCompiler.getValidSQLStmts(null,m_procedureName,m_procedure.getClass(),m_procedure,true);
      SQLStmt stmt=stmtMap.get(VoltDB.ANON_STMT_NAME);
      assert(stmt != null);
      Statement statement=m_catProc.getStatements().get(VoltDB.ANON_STMT_NAME);
      String s=statement.getSqltext();
      stmt.setSQLStr(s);
      m_cachedSingleStmt.stmt=stmt;
      int numParams=m_catProc.getParameters().size();
      m_paramTypes=new Class<?>[numParams];
      m_paramTypeIsPrimitive=new boolean[numParams];
      m_paramTypeIsArray=new boolean[numParams];
      m_paramTypeComponentType=new Class<?>[numParams];
      for (      ProcParameter param : m_catProc.getParameters()) {
        VoltType type=VoltType.get((byte)param.getType());
        if (type == VoltType.INTEGER) {
          type=VoltType.BIGINT;
        }
 else         if (type == VoltType.SMALLINT) {
          type=VoltType.BIGINT;
        }
 else         if (type == VoltType.TINYINT) {
          type=VoltType.BIGINT;
        }
 else         if (type == VoltType.NUMERIC) {
          type=VoltType.FLOAT;
        }
        m_paramTypes[param.getIndex()]=type.classFromType();
        m_paramTypeIsPrimitive[param.getIndex()]=m_paramTypes[param.getIndex()].isPrimitive();
        m_paramTypeIsArray[param.getIndex()]=param.getIsarray();
        assert(m_paramTypeIsArray[param.getIndex()] == false);
        m_paramTypeComponentType[param.getIndex()]=null;
        if (m_paramTypes[param.getIndex()] == byte[].class) {
          m_paramTypeComponentType[param.getIndex()]=byte.class;
          m_paramTypeIsArray[param.getIndex()]=true;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    m_paramTypes=m_language.accept(parametersTypeRetriever,this);
    int tempParamTypesLength=m_paramTypes.length;
    m_paramTypeIsPrimitive=new boolean[tempParamTypesLength];
    m_paramTypeIsArray=new boolean[tempParamTypesLength];
    m_paramTypeComponentType=new Class<?>[tempParamTypesLength];
    for (int ii=0; ii < tempParamTypesLength; ii++) {
      m_paramTypeIsPrimitive[ii]=m_paramTypes[ii].isPrimitive();
      m_paramTypeIsArray[ii]=m_paramTypes[ii].isArray();
      m_paramTypeComponentType[ii]=m_paramTypes[ii].getComponentType();
    }
    if (m_procMethod == null && m_language == Language.JAVA) {
      throw new RuntimeException("No \"run\" method found in: " + m_procedure.getClass().getName());
    }
  }
  Map<String,SQLStmt> stmtMap=null;
  if (m_catProc.getHasjava() == false) {
    try {
      stmtMap=ProcedureCompiler.getValidSQLStmts(null,m_procedureName,m_procedure.getClass(),m_procedure,true);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      return;
    }
  }
 else {
    stmtMap=m_language.accept(sqlStatementsRetriever,this);
  }
  for (  final Entry<String,SQLStmt> entry : stmtMap.entrySet()) {
    String name=entry.getKey();
    Statement s=m_catProc.getStatements().get(name);
    if (s != null) {
      SQLStmt stmt=entry.getValue();
      initSQLStmt(stmt,s);
    }
  }
}
