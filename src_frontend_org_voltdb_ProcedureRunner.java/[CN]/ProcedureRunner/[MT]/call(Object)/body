{
  assert(m_statusCode == ClientResponse.SUCCESS);
  assert(m_statusString == null);
  assert(m_appStatusCode == ClientResponse.UNINITIALIZED_APP_STATUS_CODE);
  assert(m_appStatusString == null);
  assert(m_cachedRNG == null);
  m_inputCRC.reset();
  Object[] paramList=paramListIn;
  ClientResponseImpl retval=null;
  assert(m_batch.size() == 0);
  try {
    m_statsCollector.beginProcedure();
    VoltTable[] results=null;
    if (isSystemProcedure()) {
      final Object[] combinedParams=new Object[paramList.length + 1];
      combinedParams[0]=m_systemProcedureContext;
      for (int i=0; i < paramList.length; ++i)       combinedParams[i + 1]=paramList[i];
      paramList=combinedParams;
    }
    if (paramList.length != m_paramTypes.length) {
      m_statsCollector.endProcedure(false,true,null,null);
      String msg="PROCEDURE " + m_procedureName + " EXPECTS "+ String.valueOf(m_paramTypes.length)+ " PARAMS, BUT RECEIVED "+ String.valueOf(paramList.length);
      m_statusCode=ClientResponse.GRACEFUL_FAILURE;
      return getErrorResponse(m_statusCode,msg,null);
    }
    for (int i=0; i < m_paramTypes.length; i++) {
      try {
        paramList[i]=ParameterConverter.tryToMakeCompatible(m_paramTypes[i],paramList[i]);
        assert(ParameterConverter.verifyParameterConversion(paramList[i],m_paramTypes[i]));
      }
 catch (      Exception e) {
        m_statsCollector.endProcedure(false,true,null,null);
        String msg="PROCEDURE " + m_procedureName + " TYPE ERROR FOR PARAMETER "+ i+ ": "+ e.toString();
        m_statusCode=ClientResponse.GRACEFUL_FAILURE;
        return getErrorResponse(m_statusCode,msg,null);
      }
    }
    boolean error=false;
    boolean abort=false;
    if (m_catProc.getHasjava()) {
      try {
        if (m_language == Language.JAVA) {
          if (log.isTraceEnabled()) {
            log.trace("invoking... procMethod=" + m_procMethod.getName() + ", class="+ getClass().getName());
          }
          try {
            Object rawResult=m_procMethod.invoke(m_procedure,paramList);
            results=getResultsFromRawResults(rawResult);
          }
 catch (          IllegalAccessException e) {
            throw new InvocationTargetException(e);
          }
        }
 else         if (m_language == Language.GROOVY) {
          if (log.isTraceEnabled()) {
            log.trace("invoking... groovy closure on class=" + getClass().getName());
          }
          GroovyScriptProcedureDelegate proc=(GroovyScriptProcedureDelegate)m_procedure;
          Object rawResult=proc.m_closure.call(paramList);
          results=getResultsFromRawResults(rawResult);
        }
        log.trace("invoked");
      }
 catch (      InvocationTargetException itex) {
        Throwable ex=itex.getCause();
        if (ex instanceof VoltAbortException && !(ex instanceof EEException)) {
          abort=true;
        }
 else {
          error=true;
        }
        if (ex instanceof Error) {
          m_statsCollector.endProcedure(false,true,null,null);
          throw (Error)ex;
        }
        retval=getErrorResponse(ex);
      }
    }
 else {
      assert(m_catProc.getStatements().size() == 1);
      try {
        m_cachedSingleStmt.params=getCleanParams(m_cachedSingleStmt.stmt,paramList);
        if (getHsqlBackendIfExists() != null) {
          VoltTable table=getHsqlBackendIfExists().runSQLWithSubstitutions(m_cachedSingleStmt.stmt,m_cachedSingleStmt.params,m_cachedSingleStmt.stmt.statementParamJavaTypes);
          results=new VoltTable[]{table};
        }
 else {
          m_batch.add(m_cachedSingleStmt);
          results=voltExecuteSQL(true);
        }
      }
 catch (      SerializableException ex) {
        retval=getErrorResponse(ex);
      }
    }
    StoredProcedureInvocation invoc=(m_txnState != null ? m_txnState.getInvocation() : null);
    ParameterSet paramSet=(invoc != null ? invoc.getParams() : null);
    m_statsCollector.endProcedure(abort,error,results,paramSet);
    if (results == null)     results=new VoltTable[0];
    if (retval == null)     retval=new ClientResponseImpl(m_statusCode,m_appStatusCode,m_appStatusString,results,m_statusString);
    int hash=(int)m_inputCRC.getValue();
    if (ClientResponseImpl.isTransactionallySuccessful(retval.getStatus()) && (hash != 0)) {
      retval.setHash(hash);
    }
    if ((m_txnState != null) && (m_txnState.getInvocation() != null) && (m_txnState.getInvocation().getType() == ProcedureInvocationType.REPLICATED)) {
      retval.convertResultsToHashForDeterminism();
    }
  }
  finally {
    m_batch.clear();
    m_txnState=null;
    m_statusCode=ClientResponse.SUCCESS;
    m_statusString=null;
    m_appStatusCode=ClientResponse.UNINITIALIZED_APP_STATUS_CODE;
    m_appStatusString=null;
    m_cachedRNG=null;
    m_cachedSingleStmt.params=null;
    m_cachedSingleStmt.expectation=null;
    m_seenFinalBatch=false;
  }
  return retval;
}
