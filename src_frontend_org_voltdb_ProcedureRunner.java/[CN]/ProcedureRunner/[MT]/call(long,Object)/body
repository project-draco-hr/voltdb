{
  m_txnId=txnId;
  assert(m_txnId > 0);
  m_statusCode=Byte.MIN_VALUE;
  m_statusString=null;
  m_cachedRNG=null;
  m_statsCollector.beginProcedure();
  byte status=ClientResponseImpl.SUCCESS;
  if (paramList.length != m_paramTypesLength) {
    m_statsCollector.endProcedure(false,true);
    String msg="PROCEDURE " + m_procedureName + " EXPECTS "+ String.valueOf(m_paramTypesLength)+ " PARAMS, BUT RECEIVED "+ String.valueOf(paramList.length);
    status=ClientResponseImpl.GRACEFUL_FAILURE;
    return getErrorResponse(status,msg,null);
  }
  for (int i=0; i < m_paramTypesLength; i++) {
    try {
      paramList[i]=tryToMakeCompatible(i,paramList[i]);
    }
 catch (    Exception e) {
      m_statsCollector.endProcedure(false,true);
      String msg="PROCEDURE " + m_procedureName + " TYPE ERROR FOR PARAMETER "+ i+ ": "+ e.getMessage();
      status=ClientResponseImpl.GRACEFUL_FAILURE;
      return getErrorResponse(status,msg,null);
    }
  }
  m_batchQueryStmtIndex=0;
  VoltTable[] results=new VoltTable[0];
  if (paramList.length != m_paramTypesLength) {
    m_statsCollector.endProcedure(false,true);
    String msg="PROCEDURE " + m_procedureName + " EXPECTS "+ String.valueOf(m_paramTypesLength)+ " PARAMS, BUT RECEIVED "+ String.valueOf(paramList.length);
    status=ClientResponseImpl.GRACEFUL_FAILURE;
    return getErrorResponse(status,msg,null);
  }
  for (int i=0; i < m_paramTypesLength; i++) {
    try {
      paramList[i]=tryToMakeCompatible(i,paramList[i]);
    }
 catch (    Exception e) {
      m_statsCollector.endProcedure(false,true);
      String msg="PROCEDURE " + m_procedureName + " TYPE ERROR FOR PARAMETER "+ i+ ": "+ e.getMessage();
      status=ClientResponseImpl.GRACEFUL_FAILURE;
      return getErrorResponse(status,msg,null);
    }
  }
  ClientResponseImpl retval=null;
  boolean error=false;
  boolean abort=false;
  if (m_catProc.getHasjava()) {
    try {
      if (log.isTraceEnabled()) {
        log.trace("invoking... procMethod=" + m_procMethod.getName() + ", class="+ getClass().getName());
      }
      try {
        m_batchQueryArgs=new Object[MAX_BATCH_SIZE][];
        m_parameterSets=new ParameterSet[MAX_BATCH_SIZE];
        Object rawResult=m_procMethod.invoke(m_procedure,paramList);
        results=getResultsFromRawResults(rawResult);
      }
 catch (      IllegalAccessException e) {
        throw new InvocationTargetException(e);
      }
 finally {
        m_batchQueryArgs=null;
        m_parameterSets=null;
      }
      log.trace("invoked");
    }
 catch (    InvocationTargetException itex) {
      Throwable ex=itex.getCause();
      if (ex instanceof VoltAbortException && !(ex instanceof EEException)) {
        abort=true;
      }
 else {
        error=true;
      }
      if (ex instanceof Error) {
        m_statsCollector.endProcedure(false,true);
        throw (Error)ex;
      }
      retval=getErrorResponse(ex);
    }
  }
 else {
    assert(m_catProc.getStatements().size() == 1);
    try {
      m_batchQueryArgs=new Object[MAX_BATCH_SIZE][];
      m_parameterSets=new ParameterSet[MAX_BATCH_SIZE];
      if (!m_isNative) {
        VoltTable table=m_hsql.runSQLWithSubstitutions(m_cachedSingleStmt[0],paramList);
        results=new VoltTable[]{table};
      }
 else {
        results=executeQueriesInABatch(1,m_cachedSingleStmt,new Object[][]{paramList},true);
      }
    }
 catch (    SerializableException ex) {
      retval=getErrorResponse(ex);
    }
 finally {
      m_batchQueryArgs=null;
      m_parameterSets=null;
    }
  }
  m_statsCollector.endProcedure(abort,error);
  if (retval == null)   retval=new ClientResponseImpl(status,m_statusCode,m_statusString,results,null);
  return retval;
}
