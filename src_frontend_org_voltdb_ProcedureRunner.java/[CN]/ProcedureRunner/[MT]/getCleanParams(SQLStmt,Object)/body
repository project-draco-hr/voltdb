{
  final int numParamTypes=stmt.statementParamJavaTypes.length;
  final byte stmtParamTypes[]=stmt.statementParamJavaTypes;
  if (args.length != numParamTypes) {
    throw new ExpectedProcedureException("Number of arguments provided was " + args.length + " where "+ numParamTypes+ " was expected for statement "+ stmt.getText());
  }
  for (int ii=0; ii < numParamTypes; ii++) {
    if (args[ii] != null)     continue;
    VoltType type=VoltType.get(stmtParamTypes[ii]);
    if (type == VoltType.TINYINT)     args[ii]=Byte.MIN_VALUE;
 else     if (type == VoltType.SMALLINT)     args[ii]=Short.MIN_VALUE;
 else     if (type == VoltType.INTEGER)     args[ii]=Integer.MIN_VALUE;
 else     if (type == VoltType.BIGINT)     args[ii]=Long.MIN_VALUE;
 else     if (type == VoltType.FLOAT)     args[ii]=VoltType.NULL_FLOAT;
 else     if (type == VoltType.TIMESTAMP)     args[ii]=new TimestampType(Long.MIN_VALUE);
 else     if (type == VoltType.STRING)     args[ii]=VoltType.NULL_STRING_OR_VARBINARY;
 else     if (type == VoltType.VARBINARY)     args[ii]=VoltType.NULL_STRING_OR_VARBINARY;
 else     if (type == VoltType.DECIMAL)     args[ii]=VoltType.NULL_DECIMAL;
 else     throw new ExpectedProcedureException("Unknown type " + type + " can not be converted to NULL representation for arg "+ ii+ " for SQL stmt "+ stmt.getText());
  }
  final ParameterSet params=new ParameterSet();
  params.setParameters(args);
  return params;
}
