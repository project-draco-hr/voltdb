{
  int avail=4096;
  int bytes_read=0;
  byte content[]=new byte[avail];
  byte read[]=new byte[avail];
  DBBPool p=new DBBPool();
  DBBPool.BBContainer pc=p.acquire(avail);
  Random random=new Random(0);
  random.nextBytes(content);
  pc.b.put(content);
  pc.b.flip();
  BBInputStream is=new BBInputStream();
  is.offer(pc);
  is.EOF();
  try {
    System.out.println("available: " + is.available());
    assertEquals(avail,is.available());
    avail-=200;
    bytes_read=is.read(read,0,200);
    assertEquals(200,bytes_read);
    assertEquals(avail,is.available());
    for (int i=0; i < 200; i++) {
      assertEquals(content[i],read[i]);
    }
    avail-=200;
    bytes_read=is.read(read,0,200);
    assertEquals(200,bytes_read);
    assertEquals(avail,is.available());
    for (int i=0; i < 200; i++) {
      assertEquals(content[i + 200],read[i]);
    }
    avail-=200;
    bytes_read=is.read(read,0,200);
    assertEquals(200,bytes_read);
    assertEquals(avail,is.available());
    for (int i=0; i < 200; i++) {
      assertEquals(content[i + 400],read[i]);
    }
    bytes_read=is.read(read,0,avail);
    assertEquals(avail,bytes_read);
    assertEquals(0,is.available());
    for (int i=0; i < avail; i++) {
      assertEquals(content[i + 600],read[i]);
    }
    bytes_read=is.read(read,0,200);
    assertEquals(-1,bytes_read);
    assertEquals(0,is.available());
  }
 catch (  IOException e) {
    fail(e.getMessage());
  }
  p.clear();
}
