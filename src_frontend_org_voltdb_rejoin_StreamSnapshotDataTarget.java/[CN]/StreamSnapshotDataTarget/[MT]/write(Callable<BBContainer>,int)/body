{
  rejoinLog.trace("Starting write");
  try {
    BBContainer chunkC;
    ByteBuffer chunk;
    try {
      chunkC=tupleData.call();
      chunk=chunkC.b();
    }
 catch (    Exception e) {
      return Futures.immediateFailedFuture(e);
    }
    if (m_writeFailed.get() != null || (chunkC == null)) {
      if (chunkC != null) {
        chunkC.discard();
      }
      return null;
    }
    if (m_closed.get()) {
      chunkC.discard();
      IOException e=new IOException("Trying to write snapshot data " + "after the stream is closed");
      m_writeFailed.set(e);
      return Futures.immediateFailedFuture(e);
    }
    if (m_schemas.containsKey(tableId)) {
      byte[] schema=m_schemas.remove(tableId);
      rejoinLog.debug("Sending schema for table " + tableId);
      rejoinLog.trace("Writing schema as part of this write");
      send(StreamSnapshotMessageType.SCHEMA,tableId,schema);
    }
    chunk.put((byte)StreamSnapshotMessageType.DATA.ordinal());
    chunk.putInt(m_blockIndex);
    chunk.putInt(tableId);
    chunk.position(0);
    return send(m_blockIndex++,chunkC);
  }
  finally {
    rejoinLog.trace("Finished call to write");
  }
}
