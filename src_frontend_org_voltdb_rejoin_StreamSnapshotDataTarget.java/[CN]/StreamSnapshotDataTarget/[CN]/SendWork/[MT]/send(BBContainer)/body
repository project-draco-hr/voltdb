{
  try {
    if (message.b.isDirect()) {
      byte[] data=null;
      int compressedSize=0;
synchronized (m_compressionBuffer) {
        m_compressionBuffer.clear();
        compressedSize=CompressionService.compressBuffer(message.b,m_compressionBuffer);
        m_compressionBuffer.limit(compressedSize);
        m_compressionBuffer.position(0);
        data=new byte[compressedSize];
        m_compressionBuffer.get(data);
      }
      RejoinDataMessage msg=new RejoinDataMessage(data);
      m_mb.send(m_destHSId,msg);
      m_bytesSent.addAndGet(compressedSize);
      if (rejoinLog.isTraceEnabled()) {
        rejoinLog.trace("Sending direct buffer");
      }
    }
 else {
      byte compressedBytes[]=CompressionService.compressBytes(message.b.array(),message.b.position(),message.b.remaining());
      RejoinDataMessage msg=new RejoinDataMessage(compressedBytes);
      m_mb.send(m_destHSId,msg);
      m_bytesSent.addAndGet(compressedBytes.length);
      if (rejoinLog.isTraceEnabled()) {
        rejoinLog.trace("Sending heap buffer");
      }
    }
  }
 catch (  IOException e) {
    rejoinLog.error("Error writing rejoin snapshot block",e);
    m_future.setException(e);
    return false;
  }
  m_future.set(true);
  return true;
}
