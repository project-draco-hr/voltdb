{
switch (typeCode) {
case Types.SQL_TIME:
{
      int seconds=((TimeData)a).getSeconds() - session.getZoneSeconds();
      seconds=normaliseTime(seconds);
      return new java.sql.Time(seconds * 1000);
    }
case Types.SQL_TIME_WITH_TIME_ZONE:
{
    int seconds=((TimeData)a).getSeconds();
    return new java.sql.Time(seconds * 1000);
  }
case Types.SQL_DATE:
{
  long seconds=((TimestampData)a).getSeconds() - session.getZoneSeconds();
  return new java.sql.Date(seconds * 1000);
}
case Types.SQL_TIMESTAMP:
{
long seconds=((TimestampData)a).getSeconds() - session.getZoneSeconds();
java.sql.Timestamp value=new java.sql.Timestamp(seconds * 1000);
value.setNanos(((TimestampData)a).getNanos());
return value;
}
case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:
{
long seconds=((TimestampData)a).getSeconds();
java.sql.Timestamp value=new java.sql.Timestamp(seconds * 1000);
value.setNanos(((TimestampData)a).getNanos());
return value;
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");
}
}
