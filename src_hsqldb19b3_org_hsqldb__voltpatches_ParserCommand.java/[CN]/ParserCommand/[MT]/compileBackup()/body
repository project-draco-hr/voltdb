{
  read();
  readThis(Tokens.DATABASE);
  readThis(Tokens.TO);
  checkIsValue();
  readQuotedString();
  String path=token.tokenString;
  read();
  Boolean blockingMode=null;
  Boolean scriptMode=null;
  Boolean compression=null;
  outerLoop:   while (true) {
switch (token.tokenType) {
case Tokens.BLOCKING:
      if (blockingMode != null) {
        throw unexpectedToken();
      }
    blockingMode=Boolean.TRUE;
  read();
break;
case Tokens.SCRIPT:
if (scriptMode != null) {
throw unexpectedToken();
}
scriptMode=Boolean.TRUE;
read();
break;
case Tokens.COMPRESSED:
if (compression != null) {
throw unexpectedToken();
}
compression=Boolean.TRUE;
read();
break;
case Tokens.NOT:
read();
if (token.tokenType == Tokens.COMPRESSED) {
if (compression != null) {
throw unexpectedToken();
}
compression=Boolean.FALSE;
read();
}
 else if (token.tokenType == Tokens.BLOCKING) {
blockingMode=Boolean.FALSE;
read();
}
 else {
throw unexpectedToken();
}
break;
default :
break outerLoop;
}
}
if (scriptMode != null) {
throw unsupportedFeature("SCRIPT");
}
scriptMode=Boolean.FALSE;
if (blockingMode == null) {
throw unexpectedTokenRequire("BLOCKING");
}
if (compression == null) {
compression=Boolean.TRUE;
}
return new StatementCommand(StatementTypes.DATABASE_BACKUP,new Object[]{path,blockingMode,scriptMode,compression},null,null);
}
