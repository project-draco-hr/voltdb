{
  VoltProjectBuilder builder=new VoltProjectBuilder();
  String schema="create table A (i integer not null, s varchar(30), sh smallint, l bigint, primary key (i));";
  builder.addLiteralSchema(schema);
  builder.addPartitionInfo("A","i");
  builder.addStmtProcedure("hello","select * from A where i = ? and s = ?","A.i: 0");
  builder.addStmtProcedure("world","select * from A where i = ? and sh = ? and s = ?","A.i: 0");
  if (!excludeProcs) {
    builder.addStmtProcedure("bid","select * from A where i = ? and sh = ? and s = ?","A.i: 0");
    builder.addStmtProcedure("sum","select * from A where i = ? and sh = ? and s = ?","A.i: 0");
    builder.addStmtProcedure("calc","select * from A where i = ? and sh = ? and s = ?","A.i: 0");
    builder.addStmtProcedure("HowWillAppleNameItsVaccuumCleaner","select * from A where l = ? and sh = ? and s = ?");
    builder.addStmtProcedure("Dedupe","select * from A where l = ? and sh = ?");
    builder.addStmtProcedure("Cill","select * from A where l = ? and s = ?");
  }
  builder.configureLogging(voltroot,voltroot,false,commandLog,200,20000);
  File cat=File.createTempFile("temp-restore","catalog");
  cat.deleteOnExit();
  assertTrue(builder.compile(cat.getAbsolutePath(),sitesPerHost,hostCount,kfactor,voltroot));
  deploymentPath=builder.getPathToDeployment();
  File cat_to_use=cat;
  if (rebuildAll) {
    catalogJarFile=cat;
  }
 else {
    cat_to_use=catalogJarFile;
  }
  byte[] bytes=CatalogUtil.toBytes(cat_to_use);
  String serializedCat=CatalogUtil.loadCatalogFromJar(bytes,null);
  assertNotNull(serializedCat);
  Catalog catalog=new Catalog();
  catalog.execute(serializedCat);
  long crc=CatalogUtil.compileDeploymentAndGetCRC(catalog,deploymentPath,true);
  context=new CatalogContext(0,catalog,bytes,crc,0,0);
}
