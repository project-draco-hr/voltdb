{
  VoltProjectBuilder builder=getBuilderForTest();
  builder.addExport("org.voltdb.export.processors.RawProcessor",true,null);
  LocalCluster cluster=new LocalCluster("rejoin.jar",2,3,1,BackendTarget.NATIVE_EE_JNI,false,true);
  cluster.overrideAnyRequestForValgrind();
  cluster.setMaxHeap(256);
  boolean success=cluster.compile(builder);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("rejoin.xml"));
  cluster.setHasLocalServer(false);
  cluster.startUp();
  ClientResponse response;
  Client client;
  client=ClientFactory.createClient(m_cconfig);
  client.createConnection("localhost",cluster.port(0));
  response=client.callProcedure("InsertSinglePartition",0);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  response=client.callProcedure("Insert",1);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  response=client.callProcedure("InsertReplicated",0);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  client.close();
  client=ClientFactory.createClient(m_cconfig);
  client.createConnection("localhost",cluster.port(1));
  response=client.callProcedure("InsertSinglePartition",2);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  response=client.callProcedure("Insert",3);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  client.close();
  TrivialExportClient exportClient=new TrivialExportClient(cluster.port(0));
  exportClient.work();
  exportClient.work();
  Thread.sleep(4000);
  exportClient.work();
  Thread.sleep(4000);
  exportClient.work();
  cluster.shutDownSingleHost(0);
  Thread.sleep(100);
  VoltDB.Configuration config=new VoltDB.Configuration(cluster.portGenerator);
  config.m_enableIV2=true;
  config.m_startAction=StartAction.REJOIN;
  config.m_pathToCatalog=Configuration.getPathToCatalogForTest("rejoin.jar");
  config.m_pathToDeployment=Configuration.getPathToCatalogForTest("rejoin.xml");
  config.m_leader=":" + cluster.internalPort(1);
  config.m_isRejoinTest=true;
  cluster.setPortsFromConfig(0,config);
  ServerThread localServer=new ServerThread(config);
  localServer.start();
  localServer.waitForRejoin();
  Thread.sleep(1000);
  while (VoltDB.instance().rejoining()) {
    Thread.sleep(100);
  }
  client=ClientFactory.createClient(m_cconfig);
  client.createConnection("localhost",cluster.port(0));
  response=client.callProcedure("InsertSinglePartition",5);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  response=client.callProcedure("Insert",6);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  response=client.callProcedure("InsertReplicated",7);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  client.close();
  client=ClientFactory.createClient(m_cconfig);
  client.createConnection("localhost",cluster.port(1));
  response=client.callProcedure("InsertSinglePartition",8);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  response=client.callProcedure("Insert",9);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  client.close();
  exportClient=new TrivialExportClient(cluster.port(0));
  exportClient.work();
  Thread.sleep(4000);
  exportClient.work();
  Thread.sleep(4000);
  exportClient.work();
  localServer.shutdown();
  cluster.shutDown();
}
