{
  VoltProjectBuilder builder=getBuilderForTest();
  LocalCluster cluster=new LocalCluster("rejoin.jar",1,2,1,BackendTarget.NATIVE_EE_JNI,false,m_useIv2);
  cluster.setMaxHeap(256);
  cluster.overrideAnyRequestForValgrind();
  boolean success=cluster.compile(builder);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("rejoin.xml"));
  cluster.setHasLocalServer(false);
  cluster.startUp();
  Client client;
  client=ClientFactory.createClient(m_cconfig);
  client.createConnection("localhost",cluster.port(0));
  ProcedureCallback callback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        System.out.println(clientResponse.getStatusString());
      }
    }
  }
;
  StringBuffer shortBuffer=new StringBuffer();
  for (int ii=0; ii < 33; ii++) {
    shortBuffer.append('a');
  }
  String shortString=shortBuffer.toString();
  StringBuffer longBuffer=new StringBuffer();
  for (int ii=0; ii < 17700; ii++) {
    longBuffer.append('a');
  }
  String longString=longBuffer.toString();
  for (int ii=0; ii < 119; ii++) {
    client.callProcedure(callback,"InsertInlinedString",ii,shortString,longString);
  }
  shortBuffer.append("aaa");
  client.callProcedure(callback,"InsertInlinedString",120,shortBuffer.toString(),longString);
  client.drain();
  client.close();
  cluster.shutDownSingleHost(0);
  cluster.recoverOne(0,1,"");
  cluster.shutDown();
}
