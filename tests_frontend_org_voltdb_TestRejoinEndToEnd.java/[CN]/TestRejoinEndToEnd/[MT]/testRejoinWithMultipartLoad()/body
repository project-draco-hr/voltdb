{
  ExecutionSite.m_recoveryPermit.drainPermits();
  ExecutionSite.m_recoveryPermit.release();
  try {
    System.out.println("testRejoinWithMultipartLoad");
    VoltProjectBuilder builder=getBuilderForTest();
    builder.setSecurityEnabled(true);
    LocalCluster cluster=new LocalCluster("rejoin.jar",2,2,1,BackendTarget.NATIVE_EE_JNI,LocalCluster.FailureState.ALL_RUNNING,false,true);
    cluster.setMaxHeap(256);
    boolean success=cluster.compile(builder);
    assertTrue(success);
    MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("rejoin.xml"));
    cluster.setHasLocalServer(false);
    cluster.startUp();
    ClientResponse response;
    Client client;
    client=ClientFactory.createClient(m_cconfig);
    client.createConnection("localhost",cluster.port(1));
    response=client.callProcedure("InsertSinglePartition",33);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    response=client.callProcedure("Insert",1);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    response=client.callProcedure("InsertReplicated",34);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    cluster.shutDownSingleHost(0);
    Thread.sleep(1000);
    final Client clientForLoadThread=client;
    final java.util.concurrent.atomic.AtomicBoolean shouldContinue=new java.util.concurrent.atomic.AtomicBoolean(true);
    Thread loadThread=new Thread("Load Thread"){
      @Override public void run(){
        try {
          final long startTime=System.currentTimeMillis();
          while (shouldContinue.get()) {
            try {
              clientForLoadThread.callProcedure(new org.voltdb.client.ProcedureCallback(){
                @Override public void clientCallback(                ClientResponse clientResponse) throws Exception {
                  if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
                  }
                }
              }
,"@Statistics","MANAGEMENT",1);
              Thread.sleep(1);
              final long now=System.currentTimeMillis();
              if (now - startTime > 1000 * 10) {
                break;
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
              break;
            }
          }
        }
  finally {
          try {
            clientForLoadThread.close();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    loadThread.start();
    Thread.sleep(2000);
    ServerThread localServer=null;
    try {
      VoltDB.Configuration config=new VoltDB.Configuration(cluster.portGenerator);
      config.m_pathToCatalog=Configuration.getPathToCatalogForTest("rejoin.jar");
      config.m_pathToDeployment=Configuration.getPathToCatalogForTest("rejoin.xml");
      config.m_rejoinToHostAndPort=":" + cluster.internalPort(1);
      config.m_isRejoinTest=true;
      cluster.setPortsFromConfig(0,config);
      localServer=new ServerThread(config);
      localServer.start();
      localServer.waitForInitialization();
      Thread.sleep(2000);
      client=ClientFactory.createClient(m_cconfig);
      client.createConnection("localhost",cluster.port(1));
      response=client.callProcedure("SelectBlahSinglePartition",33);
      assertEquals(ClientResponse.SUCCESS,response.getStatus());
      assertEquals(response.getResults()[0].fetchRow(0).getLong(0),33);
    }
  finally {
      shouldContinue.set(false);
    }
    response=client.callProcedure("SelectBlah",1);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),1);
    response=client.callProcedure("SelectBlahReplicated",34);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),34);
    response=client.callProcedure("InsertSinglePartition",2);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    response=client.callProcedure("Insert",3);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    response=client.callProcedure("InsertReplicated",1);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    response=client.callProcedure("SelectBlahSinglePartition",2);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),2);
    response=client.callProcedure("SelectBlah",3);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),3);
    response=client.callProcedure("SelectBlahReplicated",1);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),1);
    cluster.shutDownSingleHost(1);
    Thread.sleep(1000);
    client.close();
    client=ClientFactory.createClient(m_cconfig);
    client.createConnection("localhost",cluster.port(0));
    response=client.callProcedure("SelectBlahSinglePartition",2);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),2);
    response=client.callProcedure("SelectBlah",3);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),3);
    response=client.callProcedure("SelectBlahReplicated",1);
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    assertEquals(response.getResults()[0].fetchRow(0).getLong(0),1);
    client.close();
    localServer.shutdown();
    cluster.shutDown();
  }
  finally {
    ExecutionSite.m_recoveryPermit.drainPermits();
    ExecutionSite.m_recoveryPermit.release(Integer.MAX_VALUE);
  }
}
