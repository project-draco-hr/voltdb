{
  Context context=getServerReadyToReceiveNewNode();
  Client client=ClientFactory.createClient();
  client.createConnection("localhost",null,null);
  ServerSocketChannel listener=null;
  if (failType != FAIL_NO_OPEN_SOCKET) {
    try {
      listener=ServerSocketChannel.open();
      listener.socket().bind(new InetSocketAddress(VoltDB.DEFAULT_INTERNAL_PORT + 1));
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
  SyncCallback scb=new SyncCallback();
  boolean success=false;
  while (!success) {
    success=client.callProcedure(scb,"@Rejoin","localhost",VoltDB.DEFAULT_INTERNAL_PORT + 1);
    if (!success)     Thread.sleep(100);
  }
  SocketChannel socket=null;
  if (failType != FAIL_NO_OPEN_SOCKET) {
    socket=listener.accept();
    listener.close();
    DataOutputStream out=new DataOutputStream(new BufferedOutputStream(socket.socket().getOutputStream()));
    DataInputStream in=new DataInputStream(new BufferedInputStream(socket.socket().getInputStream()));
    int hostId=in.readInt();
    assertEquals(hostId,1);
    if (failType != FAIL_TIMEOUT_ON_SOCKET) {
      out.writeInt(4);
      out.flush();
      in.readLong();
      if (failType == FAIL_SKEW) {
        out.writeLong(100000);
        out.writeInt(5);
      }
 else {
        out.writeLong(1);
        out.writeInt(3);
      }
      out.flush();
    }
  }
  scb.waitForResponse();
  ClientResponse response=scb.getResponse();
switch (failType) {
case FAIL_NO_OPEN_SOCKET:
    assertTrue(response.getStatus() != ClientResponse.SUCCESS);
  break;
case FAIL_TIMEOUT_ON_SOCKET:
assertTrue(response.getStatus() != ClientResponse.SUCCESS);
break;
case FAIL_SKEW:
assertTrue(response.getStatus() != ClientResponse.SUCCESS);
break;
case DONT_FAIL:
assertTrue(response.getStatus() == ClientResponse.SUCCESS);
break;
}
if (failType != FAIL_NO_OPEN_SOCKET) socket.close();
context.localServer.shutdown();
context.localServer.join();
client.close();
return failType != DONT_FAIL;
}
