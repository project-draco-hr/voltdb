{
  if (session.abortTransaction) {
    return false;
  }
  int limit=session.rowActionList.size();
  Object[] list=limit == 0 ? ValuePool.emptyObjectArray : session.rowActionList.getArray();
  try {
    writeLock.lock();
    for (int i=0; i < limit; i++) {
      RowAction rowact=(RowAction)list[i];
      if (!rowact.canCommit(session,session.tempSet)) {
        return false;
      }
    }
    endTransaction(session);
    if (limit == 0) {
      if (!mvcc) {
        endTransactionTPL(session);
      }
      try {
        session.logSequences();
        if (mvcc) {
          database.logger.writeCommitStatement(session);
        }
      }
 catch (      HsqlException e) {
      }
      return true;
    }
    session.actionTimestamp=nextChangeTimestamp();
    for (int i=0; i < limit; i++) {
      RowAction action=(RowAction)list[i];
      action.commit(session);
    }
    for (int i=0; i < session.tempSet.size(); i++) {
      Session current=(Session)session.tempSet.get(i);
      current.abortTransaction=true;
    }
    for (int i=0; i < limit; i++) {
      RowAction action=(RowAction)list[i];
      if (action.table.hasLobColumn) {
        int type=action.getCommitType(session.actionTimestamp);
switch (type) {
case RowActionBase.ACTION_INSERT:
          Row row=action.memoryRow;
        if (row == null) {
          PersistentStore store=session.sessionData.getRowStore(action.table);
          row=(Row)store.get(action.getPos(),false);
        }
      action.table.addLobUsageCount(session,row.getData());
    break;
default :
}
}
if (action.table.tableType == TableBase.TEXT_TABLE) {
PersistentStore store=session.sessionData.getRowStore(action.table);
int type=action.getCommitType(session.actionTimestamp);
switch (type) {
case RowActionBase.ACTION_DELETE:
  store.removePersistence(action.getPos());
break;
case RowActionBase.ACTION_INSERT:
Row row=(Row)store.get(action.getPos(),false);
store.commitPersistence(row);
break;
default :
}
}
}
if (getFirstLiveTransactionTimestamp() > session.actionTimestamp) {
mergeTransaction(session,list,0,limit,session.actionTimestamp);
rowActionMapRemoveTransaction(list,0,limit,true);
}
 else {
list=session.rowActionList.toArray();
addToCommittedQueue(session,list);
}
try {
session.logSequences();
database.logger.writeCommitStatement(session);
}
 catch (HsqlException e) {
}
if (mvcc) {
if (!session.waitingSessions.isEmpty()) {
for (int i=0; i < session.waitingSessions.size(); i++) {
Session current=(Session)session.waitingSessions.get(i);
current.latch.countDown();
}
session.waitingSessions.clear();
}
}
 else {
endTransactionTPL(session);
}
return true;
}
  finally {
writeLock.unlock();
session.tempSet.clear();
}
}
