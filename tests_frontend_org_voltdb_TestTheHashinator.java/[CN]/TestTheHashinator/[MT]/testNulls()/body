{
  ExecutionEngine ee=new ExecutionEngineJNI(null,1,1,0,0,"");
  int jHash=TheHashinator.hashToPartition(new Byte(VoltType.NULL_TINYINT),2);
  int cHash=ee.hashinate(VoltType.NULL_TINYINT,2);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(new Short(VoltType.NULL_SMALLINT),2);
  cHash=ee.hashinate(VoltType.NULL_SMALLINT,2);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(new Integer(VoltType.NULL_INTEGER),2);
  cHash=ee.hashinate(VoltType.NULL_INTEGER,2);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(new Long(VoltType.NULL_BIGINT),2);
  cHash=ee.hashinate(VoltType.NULL_BIGINT,2);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(VoltType.NULL_STRING,2);
  cHash=ee.hashinate(VoltType.NULL_STRING,2);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(null,2);
  cHash=ee.hashinate(null,2);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
}
