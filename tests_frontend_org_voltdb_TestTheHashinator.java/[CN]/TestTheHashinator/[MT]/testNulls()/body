{
  ExecutionEngine ee=new ExecutionEngineJNI(1,1,0,0,"",100,HashinatorType.LEGACY,LegacyHashinator.getConfigureBytes(2));
  final byte configBytes[]=LegacyHashinator.getConfigureBytes(2);
  TheHashinator.initialize(LegacyHashinator.class,configBytes);
  int jHash=TheHashinator.hashToPartition(new Byte(VoltType.NULL_TINYINT));
  int cHash=ee.hashinate(VoltType.NULL_TINYINT,HashinatorType.LEGACY,configBytes);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(new Short(VoltType.NULL_SMALLINT));
  cHash=ee.hashinate(VoltType.NULL_SMALLINT,HashinatorType.LEGACY,configBytes);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(new Integer(VoltType.NULL_INTEGER));
  cHash=ee.hashinate(VoltType.NULL_INTEGER,TheHashinator.HashinatorType.LEGACY,configBytes);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(new Long(VoltType.NULL_BIGINT));
  cHash=ee.hashinate(VoltType.NULL_BIGINT,TheHashinator.HashinatorType.LEGACY,configBytes);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(VoltType.NULL_STRING_OR_VARBINARY);
  cHash=ee.hashinate(VoltType.NULL_STRING_OR_VARBINARY,TheHashinator.HashinatorType.LEGACY,configBytes);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  jHash=TheHashinator.hashToPartition(null);
  cHash=ee.hashinate(null,TheHashinator.HashinatorType.LEGACY,configBytes);
  assertEquals(0,jHash);
  assertEquals(jHash,cHash);
  System.out.println("jhash " + jHash + " chash "+ cHash);
  try {
    ee.release();
  }
 catch (  Exception e) {
  }
}
