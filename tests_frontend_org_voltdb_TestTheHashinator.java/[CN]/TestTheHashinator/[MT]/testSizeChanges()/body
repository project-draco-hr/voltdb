{
  for (int partitionCount=1; partitionCount <= 11; partitionCount++) {
    TheHashinator.initialize(TheHashinator.getConfiguredHashinatorClass(),TheHashinator.getConfigureBytes(partitionCount));
    HashinatorConfig hashinatorConfig=TheHashinator.getCurrentConfig();
    ExecutionEngine ee=new ExecutionEngineJNI(1,1,0,0,"",100,hashinatorConfig);
    for (short valueToHash=-7; valueToHash <= 7; valueToHash++) {
      int eehash=ee.hashinate(valueToHash,hashinatorConfig);
      int javahash=TheHashinator.getPartitionForParameter(VoltType.BIGINT.getValue(),valueToHash);
      if (eehash != javahash) {
        System.out.printf("Hash of %d with %d partitions => EE: %d, Java: %d\n",valueToHash,partitionCount,eehash,javahash);
      }
      assertEquals(eehash,javahash);
      assertTrue(eehash < partitionCount);
      assertTrue(eehash >= 0);
    }
    for (long valueToHash=-7; valueToHash <= 7; valueToHash++) {
      int eehash=ee.hashinate(valueToHash,hashinatorConfig);
      int javahash=TheHashinator.getPartitionForParameter(VoltType.SMALLINT.getValue(),valueToHash);
      if (eehash != javahash) {
        System.out.printf("Hash of %d with %d partitions => EE: %d, Java: %d\n",valueToHash,partitionCount,eehash,javahash);
      }
      assertEquals(eehash,javahash);
      assertTrue(eehash < partitionCount);
      assertTrue(eehash >= 0);
    }
    try {
      ee.release();
    }
 catch (    Exception e) {
    }
  }
}
