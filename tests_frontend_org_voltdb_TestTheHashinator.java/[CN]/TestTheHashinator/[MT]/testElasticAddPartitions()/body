{
  if (hashinatorType == HashinatorType.LEGACY)   return;
  ElasticHashinator hashinator=new ElasticHashinator(ElasticHashinator.getConfigureBytes(3,ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION),false);
  byte[] newConfig=ElasticHashinator.addPartitions(hashinator,Arrays.asList(3,4,5),ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION);
  Map<Long,Integer> oldTokens=deserializeElasticConfig(hashinator.pGetCurrentConfig().getSecond());
  Map<Long,Integer> newTokens=deserializeElasticConfig(newConfig);
  for (  Map.Entry<Long,Integer> entry : oldTokens.entrySet()) {
    assertEquals(entry.getValue(),newTokens.get(entry.getKey()));
  }
  Map<Integer,Integer> newPidCounts=new HashMap<Integer,Integer>();
  for (  Map.Entry<Long,Integer> entry : newTokens.entrySet()) {
switch (entry.getValue()) {
case 3:
case 4:
case 5:
      Integer count=newPidCounts.get(entry.getValue());
    if (count == null) {
      count=0;
    }
  newPidCounts.put(entry.getValue(),++count);
}
}
assertEquals(3,newPidCounts.size());
assertEquals(ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION,(int)newPidCounts.get(3));
assertEquals(ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION,(int)newPidCounts.get(4));
assertEquals(ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION,(int)newPidCounts.get(5));
}
