{
  ExecutionEngine ee=new ExecutionEngineJNI(null,1,1,0,0,"",100);
  int partitionCount=2;
  long valueToHash=0;
  int eehash=ee.hashinate(valueToHash,partitionCount);
  int javahash=TheHashinator.hashinate(valueToHash,partitionCount);
  if (eehash != javahash) {
    System.out.printf("Hash of %d with %d partitions => EE: %d, Java: %d\n",valueToHash,partitionCount,eehash,javahash);
  }
  partitionCount=2;
  valueToHash=1;
  eehash=ee.hashinate(valueToHash,partitionCount);
  javahash=TheHashinator.hashinate(valueToHash,partitionCount);
  if (eehash != javahash) {
    System.out.printf("Hash of %d with %d partitions => EE: %d, Java: %d\n",valueToHash,partitionCount,eehash,javahash);
  }
  partitionCount=2;
  valueToHash=2;
  eehash=ee.hashinate(valueToHash,partitionCount);
  javahash=TheHashinator.hashinate(valueToHash,partitionCount);
  if (eehash != javahash) {
    System.out.printf("Hash of %d with %d partitions => EE: %d, Java: %d\n",valueToHash,partitionCount,eehash,javahash);
  }
  assertEquals(eehash,javahash);
  partitionCount=2;
  valueToHash=3;
  eehash=ee.hashinate(valueToHash,partitionCount);
  javahash=TheHashinator.hashinate(valueToHash,partitionCount);
  if (eehash != javahash) {
    System.out.printf("Hash of %d with %d partitions => EE: %d, Java: %d\n",valueToHash,partitionCount,eehash,javahash);
  }
  assertEquals(eehash,javahash);
}
