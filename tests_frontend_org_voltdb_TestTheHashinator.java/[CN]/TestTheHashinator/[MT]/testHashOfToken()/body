{
  if (hashinatorType == HashinatorType.LEGACY)   return;
  ConfigHolder holder=getConfigForElastic(6);
  ExecutionEngine ee=new ExecutionEngineJNI(1,1,0,0,"",100,hashinatorType,holder.configBytes);
  TheHashinator.initialize(getHashinatorClass(),holder.configBytes);
  final int lastPartition=holder.tokenToPartition.lastEntry().getValue();
  assertEquals(lastPartition,TheHashinator.getPartitionForParameter(VoltType.typeFromObject(holder.keyLessThanFirstToken).getValue(),holder.keyLessThanFirstToken));
  assertEquals(lastPartition,ee.hashinate(holder.keyLessThanFirstToken,hashinatorType,holder.configBytes));
  assertEquals(lastPartition,TheHashinator.getPartitionForParameter(VoltType.typeFromObject(holder.keyLessThanFirstToken).getValue(),holder.keyLessThanFirstToken));
  assertEquals(lastPartition,ee.hashinate(holder.keyGreaterThanLastToken,hashinatorType,holder.configBytes));
  for (  Map.Entry<Long,Integer> e : holder.tokenToPartition.entrySet()) {
    final int partition=e.getValue();
    final long key=holder.tokenToKeys.get(e.getKey());
    assertEquals(partition,TheHashinator.getPartitionForParameter(VoltType.typeFromObject(key).getValue(),key));
    assertEquals(partition,ee.hashinate(key,hashinatorType,holder.configBytes));
  }
  try {
    ee.release();
  }
 catch (  Exception e) {
  }
}
