{
  Map<Integer,Integer> oldTokens=deserializeElasticConfig(oldConfig);
  Map<Integer,Integer> newTokens=deserializeElasticConfig(newConfig);
  SetMultimap<Integer,Integer> iOldTokens=invertTokenMap(oldTokens);
  SetMultimap<Integer,Integer> iNewTokens=invertTokenMap(newTokens);
  assertEquals(oldTokens.size(),newTokens.size());
  assertEquals(oldTokens.size(),ElasticHashinator.DEFAULT_TOTAL_TOKENS);
  for (int ii=0; ii < originalCount; ii++) {
    Set<Integer> old=iOldTokens.get(ii);
    Set<Integer> changed=iNewTokens.get(ii);
    assertTrue(changed.size() <= old.size());
    for (    Integer t : changed) {
      assertTrue(old.contains(t));
    }
  }
  for (int ii=originalCount; ii < newCount; ii++) {
    Set<Integer> tokens=iNewTokens.get(ii);
    long count=tokens.size();
    long desired=ElasticHashinator.DEFAULT_TOTAL_TOKENS / newCount;
    assertTrue(tokens.size() == ElasticHashinator.DEFAULT_TOTAL_TOKENS / newCount || tokens.size() == ((ElasticHashinator.DEFAULT_TOTAL_TOKENS / newCount) + 1));
    for (    Integer t : tokens) {
      assertTrue(oldTokens.containsKey(t));
    }
  }
}
