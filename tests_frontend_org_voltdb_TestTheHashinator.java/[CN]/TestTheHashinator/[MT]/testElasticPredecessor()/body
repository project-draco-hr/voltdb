{
  if (hashinatorType == HashinatorType.LEGACY)   return;
  byte[] config=ElasticHashinator.getConfigureBytes(3,ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION);
  byte[] newConfig=ElasticHashinator.addPartitions(new ElasticHashinator(config),Arrays.asList(3,4,5),ElasticHashinator.DEFAULT_TOKENS_PER_PARTITION);
  TheHashinator.initialize(HashinatorType.ELASTIC.hashinatorClass,newConfig);
  Map<Long,Integer> predecessors=TheHashinator.predecessors(4);
  Map.Entry<Long,Integer> predecessor=predecessors.entrySet().iterator().next();
  assertNull(TheHashinator.predecessor(predecessor.getValue(),predecessor.getKey() - 1));
  Pair<Long,Integer> prevPredecessor=TheHashinator.predecessor(predecessor.getValue(),predecessor.getKey());
  assertNotNull(prevPredecessor);
  ElasticHashinator hashinator=new ElasticHashinator(TheHashinator.getCurrentConfig().getSecond());
  assertEquals(prevPredecessor.getSecond().intValue(),hashinator.partitionForToken(prevPredecessor.getFirst()));
  if (predecessor.getKey() != Long.MIN_VALUE) {
    assertEquals(prevPredecessor.getSecond().intValue(),hashinator.partitionForToken(predecessor.getKey() - 1));
  }
 else {
    assertEquals(prevPredecessor.getSecond().intValue(),hashinator.partitionForToken(Long.MAX_VALUE));
  }
}
