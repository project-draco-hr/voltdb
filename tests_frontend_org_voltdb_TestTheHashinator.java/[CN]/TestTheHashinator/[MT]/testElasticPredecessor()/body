{
  if (hashinatorType == HashinatorType.LEGACY)   return;
  byte[] config=ElasticHashinator.getConfigureBytes(3,ElasticHashinator.DEFAULT_TOTAL_TOKENS);
  byte[] newConfig=ElasticHashinator.addPartitions(new ElasticHashinator(config,false),3);
  TheHashinator.initialize(HashinatorType.ELASTIC.hashinatorClass,newConfig);
  Map<Integer,Integer> predecessors=TheHashinator.predecessors(4);
  Map.Entry<Integer,Integer> predecessor=predecessors.entrySet().iterator().next();
  try {
    TheHashinator.predecessor(predecessor.getValue(),predecessor.getKey() - 1);
    fail();
  }
 catch (  Exception e) {
  }
  Pair<Integer,Integer> prevPredecessor=TheHashinator.predecessor(predecessor.getValue(),predecessor.getKey());
  assertNotNull(prevPredecessor);
  ElasticHashinator hashinator=new ElasticHashinator(TheHashinator.getCurrentConfig().configBytes,false);
  assertEquals(prevPredecessor.getSecond().intValue(),hashinator.partitionForToken(prevPredecessor.getFirst()));
  if (predecessor.getKey() != Integer.MIN_VALUE) {
    assertEquals(prevPredecessor.getSecond().intValue(),hashinator.partitionForToken(predecessor.getKey() - 1));
  }
 else {
    assertEquals(prevPredecessor.getSecond().intValue(),hashinator.partitionForToken(Integer.MAX_VALUE));
  }
}
