{
  ExecutionEngine ee=new ExecutionEngineJNI(1,1,0,0,"",100,new HashinatorConfig(hashinatorType,TheHashinator.getConfigureBytes(6),0,0),false);
  for (int i=0; i < 2500; i++) {
    int partitionCount=r.nextInt(1000) + 1;
    byte[] valueToHash=new byte[r.nextInt(1000)];
    r.nextBytes(valueToHash);
    final byte configBytes[]=TheHashinator.getConfigureBytes(partitionCount);
    TheHashinator.initialize(TheHashinator.getConfiguredHashinatorClass(),configBytes);
    int eehash=ee.hashinate(valueToHash,TheHashinator.getCurrentConfig());
    int javahash=TheHashinator.getPartitionForParameter(VoltType.typeFromClass(byte[].class).getValue(),valueToHash);
    if (eehash != javahash) {
      System.out.printf("Mismatched hash of (%s) %d bytes %d partitions => EE: %d Java: %d\n",VoltType.typeFromObject(valueToHash).toSQLString(),valueToHash.length,partitionCount,eehash,javahash);
      partitionCount++;
    }
    assertTrue(eehash < partitionCount);
    assertTrue(eehash >= 0);
    assertEquals(eehash,javahash);
  }
  try {
    ee.release();
  }
 catch (  Exception e) {
  }
}
