{
  String s=ev.getActionCommand();
  if (s == null) {
    if (ev.getSource() instanceof MenuItem) {
      MenuItem i;
      s=((MenuItem)ev.getSource()).getLabel();
    }
  }
  if (s.equals("Execute")) {
    execute();
    layoutCard.show(pCard,"result");
  }
 else   if (s.equals("Tree")) {
    layoutCard.show(pCard,"tree");
  }
 else   if (s.equals("Command")) {
    layoutCard.show(pCard,"command");
  }
 else   if (s.equals("Result")) {
    layoutCard.show(pCard,"result");
  }
 else   if (s.equals("Editor")) {
    layoutCard.show(pCard,"editor");
  }
 else   if (s.equals("Exit")) {
    windowClosing(null);
  }
 else   if (s.equals("Logging on")) {
    JavaSystem.setLogToSystem(true);
  }
 else   if (s.equals("Logging off")) {
    JavaSystem.setLogToSystem(false);
  }
 else   if (s.equals("Refresh Tree")) {
    refreshTree();
    layoutCard.show(pCard,"tree");
  }
 else   if (s.startsWith("#")) {
    int i=Integer.parseInt(s.substring(1));
    txtCommand.setText(sRecent[i]);
  }
 else   if (s.equals("Connect...")) {
    connect(ZaurusConnectionDialog.createConnection(fMain,"Connect",new Insets(defWidth,defHeight,defLocX,defLocY)));
    refreshTree();
    layoutCard.show(pCard,"tree");
  }
 else   if (s.equals("View Tree")) {
    layoutCard.show(pCard,"tree");
  }
 else   if (s.equals("View Command")) {
    layoutCard.show(pCard,"command");
  }
 else   if (s.equals("View Result")) {
    layoutCard.show(pCard,"result");
  }
 else   if (s.equals("View Editor")) {
    layoutCard.show(pCard,"editor");
  }
 else   if (s.equals("Results in Grid")) {
    iResult=0;
    pResult.removeAll();
    pResult.add("Center",gResult);
    pResult.doLayout();
    layoutCard.show(pCard,"result");
  }
 else   if (s.equals("Open Script...")) {
    FileDialog f=new FileDialog(fMain,"Open Script",FileDialog.LOAD);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String file=f.getFile();
    if (file != null) {
      txtCommand.setText(DatabaseManagerCommon.readFile(f.getDirectory() + file));
    }
    layoutCard.show(pCard,"command");
  }
 else   if (s.equals("Save Script...")) {
    FileDialog f=new FileDialog(fMain,"Save Script",FileDialog.SAVE);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String file=f.getFile();
    if (file != null) {
      DatabaseManagerCommon.writeFile(f.getDirectory() + file,txtCommand.getText());
    }
  }
 else   if (s.equals("Save Result...")) {
    FileDialog f=new FileDialog(fMain,"Save Result",FileDialog.SAVE);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String file=f.getFile();
    if (file != null) {
      showResultInText();
      DatabaseManagerCommon.writeFile(f.getDirectory() + file,txtResult.getText());
    }
  }
 else   if (s.equals("Results in Text")) {
    iResult=1;
    pResult.removeAll();
    pResult.add("Center",txtResult);
    pResult.doLayout();
    showResultInText();
    layoutCard.show(pCard,"result");
  }
 else   if (s.equals("AutoCommit on")) {
    try {
      cConn.setAutoCommit(true);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("AutoCommit off")) {
    try {
      cConn.setAutoCommit(false);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Commit")) {
    try {
      cConn.commit();
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Insert test data")) {
    insertTestData();
    layoutCard.show(pCard,"result");
  }
 else   if (s.equals("Rollback")) {
    try {
      cConn.rollback();
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Disable MaxRows")) {
    try {
      sStatement.setMaxRows(0);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Set MaxRows to 100")) {
    try {
      sStatement.setMaxRows(100);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("SELECT")) {
    showHelp(DatabaseManagerCommon.selectHelp);
  }
 else   if (s.equals("INSERT")) {
    showHelp(DatabaseManagerCommon.insertHelp);
  }
 else   if (s.equals("UPDATE")) {
    showHelp(DatabaseManagerCommon.updateHelp);
  }
 else   if (s.equals("DELETE")) {
    showHelp(DatabaseManagerCommon.deleteHelp);
  }
 else   if (s.equals("CREATE TABLE")) {
    showHelp(DatabaseManagerCommon.createTableHelp);
  }
 else   if (s.equals("DROP TABLE")) {
    showHelp(DatabaseManagerCommon.dropTableHelp);
  }
 else   if (s.equals("CREATE INDEX")) {
    showHelp(DatabaseManagerCommon.createIndexHelp);
  }
 else   if (s.equals("DROP INDEX")) {
    showHelp(DatabaseManagerCommon.dropIndexHelp);
  }
 else   if (s.equals("CHECKPOINT")) {
    showHelp(DatabaseManagerCommon.checkpointHelp);
  }
 else   if (s.equals("SCRIPT")) {
    showHelp(DatabaseManagerCommon.scriptHelp);
  }
 else   if (s.equals("SHUTDOWN")) {
    showHelp(DatabaseManagerCommon.shutdownHelp);
  }
 else   if (s.equals("SET")) {
    showHelp(DatabaseManagerCommon.setHelp);
  }
 else   if (s.equals("Test Script")) {
    showHelp(DatabaseManagerCommon.testHelp);
  }
 else   if (s.equals("Show HTML-Help in browser")) {
    try {
      System.out.println("Starting Opera on index.html");
      Runtime.getRuntime().exec(new String[]{"opera","/home/QtPalmtop/help/html/hsqldb/index.html"});
    }
 catch (    IOException e) {
      System.out.println("A problem with Opera occured.");
    }
  }
}
