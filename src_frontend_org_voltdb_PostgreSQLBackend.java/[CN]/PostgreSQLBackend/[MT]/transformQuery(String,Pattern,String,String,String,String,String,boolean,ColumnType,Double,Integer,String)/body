{
  StringBuffer modified_query=new StringBuffer();
  Matcher matcher=queryPattern.matcher(query);
  while (matcher.find()) {
    StringBuffer replaceText=new StringBuffer(initText);
    String wholeMatch=null, group=null;
    wholeMatch=matcher.group();
    for (    String groupName : groups) {
      group=null;
      try {
        group=matcher.group(groupName);
      }
 catch (      IllegalArgumentException e) {
      }
      if (DEBUG) {
        System.out.println("In PostgreSQLBackend.transformQuery,\n  with query    : " + query);
        System.out.println("  queryPattern: " + queryPattern);
        System.out.println("  initText, prefix, suffix, altEnding, altText:\n    '" + initText + "', '"+ prefix+ "', '"+ suffix+ "', '"+ altEnding+ "', '"+ altText+ "'\n  useWhole, columnType, multiplier, minimum; groups:\n    '"+ useWhole+ ", "+ columnType+ ", "+ multiplier+ ", "+ minimum+ "\n"+ groups);
        System.out.println("  wholeMatch: " + wholeMatch);
        System.out.println("  group     : " + group);
      }
      if (group == null) {
        break;
      }
 else       if (!useWhole) {
        String groupValue=group, suffixValue=suffix;
        if (multiplier != null && minimum != null) {
          groupValue=Long.toString(Math.round(Math.max(Integer.parseInt(group) * multiplier,minimum)));
        }
        if (altText != null && group.toUpperCase().endsWith(altEnding)) {
          suffixValue=altText;
        }
        replaceText.append(handleParens(groupValue,prefix,suffixValue));
      }
    }
    if (useWhole) {
      if (columnType != null && ((columnType == ColumnType.INTEGER && !isIntegerColumn(group)) || (columnType == ColumnType.GEO && !isGeoColumn(group)))) {
        replaceText.append(wholeMatch);
      }
 else {
        if (altText != null && altEnding == null) {
          wholeMatch=wholeMatch.replace(group,altText);
        }
        replaceText.append(handleParens(wholeMatch,prefix,suffix));
      }
    }
    matcher.appendReplacement(modified_query,replaceText.toString());
  }
  matcher.appendTail(modified_query);
  if (DEBUG && !query.equalsIgnoreCase(modified_query.toString())) {
    System.out.println("In PostgreSQLBackend.transformQuery,\n  with query    : " + query);
    System.out.println("  modified_query: " + modified_query);
  }
  return modified_query.toString();
}
