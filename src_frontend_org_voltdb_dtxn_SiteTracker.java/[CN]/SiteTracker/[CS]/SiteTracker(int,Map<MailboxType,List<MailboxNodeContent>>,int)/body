{
  m_version=version;
  m_hostId=hostId;
  Map<Integer,List<Long>> hostsToSites=new HashMap<Integer,List<Long>>();
  Map<Integer,List<Integer>> hostsToPartitions=new HashMap<Integer,List<Integer>>();
  Map<Integer,List<Long>> partitionsToSites=new HashMap<Integer,List<Long>>();
  Map<Long,Integer> sitesToPartitions=new HashMap<Long,Integer>();
  Map<Integer,List<Long>> hostsToInitiators=new HashMap<Integer,List<Long>>();
  Map<MailboxType,List<Long>> otherHSIds=new HashMap<MailboxType,List<Long>>();
  Map<Integer,List<Long>> partitionToInitiators=new HashMap<Integer,List<Long>>();
  Map<MailboxType,Map<Integer,List<Long>>> hostsToOtherHSIds=new HashMap<MailboxType,Map<Integer,List<Long>>>();
  for (  Entry<MailboxType,List<MailboxNodeContent>> e : mailboxes.entrySet()) {
    if (e.getKey().equals(MailboxType.ExecutionSite)) {
      populateSites(e.getValue(),hostsToSites,hostsToPartitions,partitionsToSites,sitesToPartitions);
    }
 else     if (e.getKey().equals(MailboxType.Initiator)) {
      populateInitiators(e.getValue(),hostsToInitiators,partitionToInitiators);
    }
    if (e.getKey().equals(MailboxType.StatsAgent)) {
      populateStatsAgents(e.getValue());
    }
 else {
      populateOtherHSIds(e.getKey(),e.getValue(),otherHSIds,hostsToOtherHSIds);
    }
  }
  m_hostsToSitesImmutable=CoreUtils.unmodifiableMapCopy(hostsToSites);
  m_hostsToPartitionsImmutable=CoreUtils.unmodifiableMapCopy(hostsToPartitions);
  m_partitionsToSitesImmutable=CoreUtils.unmodifiableMapCopy(partitionsToSites);
  m_sitesToPartitionsImmutable=Collections.unmodifiableMap(sitesToPartitions);
  m_hostsToInitiatorsImmutable=CoreUtils.unmodifiableMapCopy(hostsToInitiators);
  m_otherHSIdsImmutable=CoreUtils.unmodifiableMapCopy(otherHSIds);
  m_partitionToInitiatorsImmutable=CoreUtils.unmodifiableMapCopy(partitionToInitiators);
  Map<MailboxType,Map<Integer,List<Long>>> hostsToOtherHSIdsReplacement=new HashMap<MailboxType,Map<Integer,List<Long>>>();
  for (  Map.Entry<MailboxType,Map<Integer,List<Long>>> e : hostsToOtherHSIds.entrySet()) {
    hostsToOtherHSIds.put(e.getKey(),CoreUtils.unmodifiableMapCopy(e.getValue()));
  }
  m_hostsToOtherHSIdsImmutable=Collections.unmodifiableMap(hostsToOtherHSIdsReplacement);
  m_allExecutionSitesArray=new long[m_allExecutionSites.size()];
  int ii=0;
  for (  Long site : m_allExecutionSites) {
    m_allExecutionSitesArray[ii++]=site;
  }
  m_numberOfPartitions=m_partitionsToSitesImmutable.keySet().size();
  m_numberOfHosts=m_hostsToSitesImmutable.keySet().size();
  m_numberOfExecutionSites=m_sitesToPartitionsImmutable.keySet().size();
  m_allPartitions=new int[m_numberOfPartitions];
  ii=0;
  for (  Integer partition : m_partitionsToSitesImmutable.keySet()) {
    m_allPartitions[ii++]=partition;
  }
  m_allSites.addAll(m_allExecutionSites);
  m_allSites.addAll(m_allInitiators);
  m_allSites.addAll(m_allIv2Initiators);
  for (  List<Long> siteIds : otherHSIds.values()) {
    m_allSites.addAll(siteIds);
  }
}
