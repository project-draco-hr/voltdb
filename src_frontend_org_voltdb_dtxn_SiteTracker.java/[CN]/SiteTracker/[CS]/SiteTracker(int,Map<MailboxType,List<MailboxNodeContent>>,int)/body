{
  m_version=version;
  m_hostId=hostId;
  Map<Integer,List<Long>> hostsToSites=new HashMap<Integer,List<Long>>();
  Map<Integer,List<Integer>> hostsToPartitions=new HashMap<Integer,List<Integer>>();
  Map<Integer,List<Long>> partitionsToSites=new HashMap<Integer,List<Long>>();
  ImmutableMap.Builder<Long,Integer> sitesToPartitions=ImmutableMap.<Long,Integer>builder();
  Map<Integer,List<Long>> hostsToInitiators=new HashMap<Integer,List<Long>>();
  Map<MailboxType,List<Long>> otherHSIds=new HashMap<MailboxType,List<Long>>();
  Map<Integer,List<Long>> partitionToInitiators=new HashMap<Integer,List<Long>>();
  ImmutableSet.Builder<Integer> allHosts=ImmutableSet.<Integer>builder();
  ImmutableSet.Builder<Long> allExecutionSites=ImmutableSet.<Long>builder();
  ImmutableSet.Builder<Long> allInitiators=ImmutableSet.<Long>builder();
  ImmutableSet.Builder<Long> allIv2Initiators=ImmutableSet.<Long>builder();
  ImmutableSet.Builder<Long> allIv2MpInitiators=ImmutableSet.<Long>builder();
  Map<MailboxType,Map<Integer,List<Long>>> hostsToOtherHSIds=new HashMap<MailboxType,Map<Integer,List<Long>>>();
  for (  Entry<MailboxType,List<MailboxNodeContent>> e : mailboxes.entrySet()) {
    if (e.getKey().equals(MailboxType.ExecutionSite)) {
      populateSites(e.getValue(),hostsToSites,hostsToPartitions,partitionsToSites,sitesToPartitions,allHosts,allExecutionSites);
    }
 else     if (e.getKey().equals(MailboxType.Initiator)) {
      populateInitiators(e.getValue(),hostsToInitiators,partitionToInitiators,allInitiators,allIv2Initiators);
    }
 else     if (e.getKey().equals(MailboxType.StatsAgent)) {
      populateStatsAgents(e.getValue());
    }
 else     if (e.getKey().equals(MailboxType.MpInitiator)) {
      populateMpInitiators(e.getValue(),allIv2MpInitiators);
    }
 else {
      populateOtherHSIds(e.getKey(),e.getValue(),otherHSIds,hostsToOtherHSIds);
    }
  }
  m_hostsToSitesImmutable=CoreUtils.unmodifiableMapCopy(hostsToSites);
  m_hostsToPartitionsImmutable=CoreUtils.unmodifiableMapCopy(hostsToPartitions);
  m_partitionsToSitesImmutable=CoreUtils.unmodifiableMapCopy(partitionsToSites);
  m_sitesToPartitionsImmutable=sitesToPartitions.build();
  m_hostsToInitiatorsImmutable=CoreUtils.unmodifiableMapCopy(hostsToInitiators);
  m_otherHSIdsImmutable=CoreUtils.unmodifiableMapCopy(otherHSIds);
  m_partitionToInitiatorsImmutable=CoreUtils.unmodifiableMapCopy(partitionToInitiators);
  m_allInitiatorsImmutable=allInitiators.build();
  m_allIv2InitiatorsImmutable=allIv2Initiators.build();
  m_allIv2MpInitiatorsImmutable=allIv2MpInitiators.build();
  m_allExecutionSitesImmutable=allExecutionSites.build();
  m_allHostsImmutable=allHosts.build();
  ImmutableMap.Builder<MailboxType,ImmutableMap<Integer,ImmutableList<Long>>> hostsToOtherHSIdsReplacement=ImmutableMap.<MailboxType,ImmutableMap<Integer,ImmutableList<Long>>>builder();
  for (  Map.Entry<MailboxType,Map<Integer,List<Long>>> e : hostsToOtherHSIds.entrySet()) {
    hostsToOtherHSIdsReplacement.put(e.getKey(),CoreUtils.unmodifiableMapCopy(e.getValue()));
  }
  m_hostsToOtherHSIdsImmutable=hostsToOtherHSIdsReplacement.build();
  m_allExecutionSitesArray=new long[m_allExecutionSitesImmutable.size()];
  int ii=0;
  for (  Long site : m_allExecutionSitesImmutable) {
    m_allExecutionSitesArray[ii++]=site;
  }
  m_numberOfPartitions=m_partitionsToSitesImmutable.keySet().size();
  m_numberOfHosts=m_hostsToSitesImmutable.keySet().size();
  m_numberOfExecutionSites=m_sitesToPartitionsImmutable.keySet().size();
  m_allPartitions=new int[m_numberOfPartitions];
  ii=0;
  for (  Integer partition : m_partitionsToSitesImmutable.keySet()) {
    m_allPartitions[ii++]=partition;
  }
  ImmutableSet.Builder<Long> allSites=ImmutableSet.<Long>builder();
  allSites.addAll(m_allExecutionSitesImmutable);
  allSites.addAll(m_allInitiatorsImmutable);
  allSites.addAll(m_allIv2InitiatorsImmutable);
  allSites.addAll(m_allIv2MpInitiatorsImmutable);
  for (  List<Long> siteIds : otherHSIds.values()) {
    allSites.addAll(siteIds);
  }
  m_allSitesImmutable=allSites.build();
}
