{
  ArrayList<Site> allSites=new ArrayList<Site>();
  m_sites=clusterSites;
  for (  Site site : clusterSites) {
    int siteId=Integer.parseInt(site.getTypeName());
    allSites.add(site);
    int hostId=Integer.parseInt(site.getHost().getTypeName());
    m_sitesToHost.put(siteId,hostId);
    if (!m_hostsToSites.containsKey(hostId)) {
      m_hostsToSites.put(hostId,new ArrayList<Integer>());
    }
    m_hostsToSites.get(hostId).add(siteId);
    if (!m_nonExecSitesForHost.containsKey(hostId)) {
      m_nonExecSitesForHost.put(hostId,new HashSet<Integer>());
    }
    if (site.getIsexec() == false) {
      m_nonExecSitesForHost.get(hostId).add(siteId);
      if (site.getIsup()) {
        m_liveSiteIds.add(siteId);
        m_liveHostIds.add(hostId);
        m_liveInitiatorCount++;
      }
 else {
        m_downHostIds.add(hostId);
      }
    }
 else {
      int partitionId=Integer.parseInt(site.getPartition().getTypeName());
      m_sitesToPartitions.put(siteId,partitionId);
      if (!m_partitionsToSites.containsKey(partitionId)) {
        m_partitionsToSites.put(partitionId,new ArrayList<Integer>());
      }
      m_partitionsToSites.get(partitionId).add(siteId);
      if (!m_partitionsToLiveSites.containsKey(partitionId)) {
        m_partitionsToLiveSites.put(partitionId,new ArrayList<Integer>());
      }
      if (site.getIsup() == true) {
        m_liveSiteCount++;
        m_liveSiteIds.add(siteId);
        m_partitionsToLiveSites.get(partitionId).add(siteId);
      }
 else {
        m_downHostIds.add(hostId);
      }
    }
  }
  m_allSites=new Site[allSites.size()];
  for (int ii=0; ii < m_allSites.length; ii++) {
    m_allSites[ii]=allSites.get(ii);
  }
  m_tempOldSitesScratch=new int[m_sites.size()];
  for (  int siteId : m_sitesToPartitions.keySet()) {
    if (getSiteForId(siteId).getIsup()) {
      m_lastHeartbeatTime.put(siteId,-1L);
    }
  }
  HashMap<Integer,ArrayList<Integer>> upHostsToExecSites=new HashMap<Integer,ArrayList<Integer>>();
  for (  Integer host : m_liveHostIds) {
    ArrayList<Integer> sites=new ArrayList<Integer>(m_hostsToSites.get(host));
    sites.removeAll(m_nonExecSitesForHost.get(host));
    upHostsToExecSites.put(host,sites);
  }
  int myHostId=0;
  if (VoltDB.instance() != null) {
    if (VoltDB.instance().getMessenger() != null) {
      myHostId=VoltDB.instance().getHostMessenger().getHostId();
    }
  }
  int ii=0;
  int numHosts=upHostsToExecSites.size();
  if (numHosts < 2) {
    m_remoteHeartbeatTargets=new int[0][];
  }
 else {
    m_remoteHeartbeatTargets=new int[upHostsToExecSites.size() - 1][];
  }
  int tempLocalHeartbeatTargets[]=new int[0];
  for (  Map.Entry<Integer,ArrayList<Integer>> entry : upHostsToExecSites.entrySet()) {
    if (entry.getKey() == myHostId) {
      tempLocalHeartbeatTargets=intArrayListToArray(entry.getValue());
    }
 else {
      m_remoteHeartbeatTargets[ii++]=intArrayListToArray(entry.getValue());
    }
  }
  m_localHeartbeatTargets=tempLocalHeartbeatTargets;
  m_firstNonExecSiteForHost=new int[m_hostsToSites.size()];
  for (ii=0; ii < m_firstNonExecSiteForHost.length; ii++) {
    HashSet<Integer> set=getNonExecSitesForHost(ii);
    if (set != null) {
      if (set.iterator().hasNext()) {
        m_firstNonExecSiteForHost[ii]=set.iterator().next();
      }
    }
  }
}
