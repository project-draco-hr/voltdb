{
  AbstractScanPlanNode dut=new SeqScanPlanNode(TABLE1,TABLE1);
  NodeSchema proj_schema=new NodeSchema();
  String[] cols=new String[4];
  TupleAddressExpression col1_exp=new TupleAddressExpression();
  proj_schema.addColumn(new SchemaColumn("","","tuple_address","tuple_address",col1_exp));
  cols[0]="tuple_address";
  ParameterValueExpression col2_exp=new ParameterValueExpression();
  col2_exp.setParameterIndex(0);
  col2_exp.setValueType(COLTYPES[1]);
  col2_exp.setValueSize(COLTYPES[1].getLengthInBytesForFixedTypes());
  proj_schema.addColumn(new SchemaColumn(TABLE1,TABLE1,COLS[1],COLS[1],col2_exp));
  cols[1]=COLS[1];
  ConstantValueExpression col3_exp=new ConstantValueExpression();
  col3_exp.setValueType(COLTYPES[3]);
  col3_exp.setValueSize(COLTYPES[3].getLengthInBytesForFixedTypes());
  col3_exp.setValue("3.14159");
  proj_schema.addColumn(new SchemaColumn(TABLE1,TABLE1,COLS[3],COLS[3],col3_exp));
  cols[2]=COLS[3];
  OperatorExpression col4_exp=new OperatorExpression();
  col4_exp.setValueType(COLTYPES[4]);
  col4_exp.setValueSize(COLTYPES[4].getLengthInBytesForFixedTypes());
  col4_exp.setExpressionType(ExpressionType.OPERATOR_PLUS);
  TupleValueExpression left=new TupleValueExpression(TABLE1,TABLE1,COLS[0],COLS[0],0);
  left.setValueType(COLTYPES[0]);
  left.setValueSize(COLTYPES[0].getLengthInBytesForFixedTypes());
  TupleValueExpression right=new TupleValueExpression(TABLE1,TABLE1,COLS[2],COLS[2],0);
  right.setValueType(COLTYPES[2]);
  right.setValueSize(COLTYPES[2].getLengthInBytesForFixedTypes());
  col4_exp.setLeft(left);
  col4_exp.setRight(right);
  proj_schema.addColumn(new SchemaColumn(TABLE1,TABLE1,COLS[4],"C1",col4_exp));
  cols[3]=COLS[4];
  ProjectionPlanNode proj_node=new ProjectionPlanNode();
  proj_node.setOutputSchema(proj_schema);
  dut.addInlinePlanNode(proj_node);
  System.out.println("ProjSchema: " + proj_schema.toString());
  dut.generateOutputSchema(m_voltdb.getDatabase());
  NodeSchema dut_schema=dut.getOutputSchema();
  System.out.println(dut_schema.toString());
  for (int i=0; i < cols.length; i++) {
    SchemaColumn col=null;
    if (i == 0) {
      col=dut_schema.find("","",cols[i],cols[i]);
    }
 else {
      col=dut_schema.find(TABLE1,TABLE1,cols[i],cols[i]);
    }
    assertNotNull(col);
    assertEquals(col.getExpression().getExpressionType(),ExpressionType.VALUE_TUPLE);
  }
}
