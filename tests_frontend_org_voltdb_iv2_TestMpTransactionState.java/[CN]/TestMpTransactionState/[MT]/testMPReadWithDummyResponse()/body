{
  long txnId=1234l;
  int batch_size=3;
  Iv2InitiateTaskMessage taskmsg=new Iv2InitiateTaskMessage(0,-1,(txnId - 1),txnId,System.currentTimeMillis(),true,false,new StoredProcedureInvocation(),0,0,false);
  int hsids=6;
  buddyHSId=0;
  long[] non_local=configureHSIds(hsids);
  MpTestPlan plan=createTestPlan(batch_size,true,false,false,non_local);
  for (  FragmentResponseMessage dummy : plan.generatedResponses) {
    if (dummy.getExecutorSiteId() == non_local[non_local.length - 1]) {
      dummy.setRecovering(true);
      for (int i=0; i < dummy.getTableCount(); i++) {
        VoltTable depTable=dummy.getTableAtIndex(i);
        depTable.setStatusCode(VoltTableUtil.NULL_DEPENDENCY_STATUS);
        depTable.clearRowData();
      }
    }
  }
  Mailbox mailbox=mock(Mailbox.class);
  SiteProcedureConnection siteConnection=mock(SiteProcedureConnection.class);
  MpTransactionState dut=new MpTransactionState(mailbox,taskmsg,allHsids,partMasters,buddyHSId,false);
  dut.setupProcedureResume(true,plan.depsToResume);
  dut.createLocalFragmentWork(plan.localWork,false);
  dut.createAllParticipatingFragmentWork(plan.remoteWork);
  verify(mailbox).send(eq(non_local),(VoltMessage)any());
  for (  FragmentResponseMessage msg : plan.generatedResponses) {
    dut.offerReceivedFragmentResponse(msg);
  }
  Map<Integer,List<VoltTable>> results=dut.recursableRun(siteConnection);
  ArgumentCaptor<BorrowTaskMessage> borrowCaptor=ArgumentCaptor.forClass(BorrowTaskMessage.class);
  verify(mailbox).send(eq(buddyHSId),borrowCaptor.capture());
  BorrowTaskMessage borrowMsg=borrowCaptor.getValue();
  Map<Integer,List<VoltTable>> inputDepMap=borrowMsg.getInputDepMap();
  for (  List<VoltTable> tables : inputDepMap.values()) {
    for (    VoltTable table : tables) {
      assertNotSame(VoltTableUtil.NULL_DEPENDENCY_STATUS,table.getStatusCode());
    }
  }
  assertEquals(batch_size,results.size());
  System.out.println(results);
}
