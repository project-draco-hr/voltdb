{
  if (message instanceof TransactionInfoBaseMessage) {
    TransactionInfoBaseMessage info=(TransactionInfoBaseMessage)message;
    if (info instanceof HeartbeatMessage) {
      long lastSeenTxnFromInitiator=m_txnQueue.noteTransactionRecievedAndReturnLastSeen(info.getInitiatorSiteId(),info.getTxnId(),true,((HeartbeatMessage)info).getLastSafeTxnId());
      HeartbeatResponseMessage response=new HeartbeatResponseMessage(m_siteId,lastSeenTxnFromInitiator,m_txnQueue.getQueueState() == QueueState.BLOCKED_SAFETY);
      try {
        m_mailbox.send(info.getInitiatorSiteId(),VoltDB.AGREEMENT_MAILBOX_ID,response);
      }
 catch (      MessagingException e) {
        throw new RuntimeException(e);
      }
      return;
    }
    assert(false);
  }
 else   if (message instanceof HeartbeatResponseMessage) {
    HeartbeatResponseMessage hrm=(HeartbeatResponseMessage)message;
    m_safetyState.updateLastSeenTxnIdFromExecutorBySiteId(hrm.getExecSiteId(),hrm.getLastReceivedTxnId(),hrm.isBlocked());
  }
 else   if (message instanceof LocalObjectMessage) {
    LocalObjectMessage lom=(LocalObjectMessage)message;
    if (lom.payload instanceof Runnable) {
      ((Runnable)lom.payload).run();
    }
 else     if (lom.payload instanceof Request) {
      Request r=(Request)lom.payload;
      long txnId=0;
      if (r.type == OpCode.createSession) {
        txnId=r.sessionId;
      }
 else {
        txnId=m_idManager.getNextUniqueTransactionId();
      }
      for (      int initiatorId : m_siteIds) {
        if (initiatorId == m_siteId)         continue;
        AgreementTaskMessage atm=new AgreementTaskMessage(r,txnId,m_siteId,m_safetyState.getNewestSafeTxnIdForExecutorBySiteId(initiatorId));
        try {
          m_mailbox.send(initiatorId,VoltDB.AGREEMENT_MAILBOX_ID,atm);
        }
 catch (        MessagingException e) {
          throw new RuntimeException(e);
        }
      }
      AgreementTaskMessage atm=new AgreementTaskMessage(r,txnId,m_siteId,m_safetyState.getNewestSafeTxnIdForExecutorBySiteId(m_siteId));
      processMessage(atm);
    }
  }
 else   if (message instanceof AgreementTaskMessage) {
    AgreementTaskMessage atm=(AgreementTaskMessage)message;
    if (!m_transactionsById.containsKey(atm.m_txnId) && atm.m_txnId > m_minTxnIdAfterRecovery) {
      m_txnQueue.noteTransactionRecievedAndReturnLastSeen(atm.m_initiatorId,atm.m_txnId,false,atm.m_lastSafeTxnId);
      AgreementTransactionState transactionState=new AgreementTransactionState(atm.m_txnId,atm.m_initiatorId,atm.m_request);
      if (m_txnQueue.add(transactionState)) {
        m_transactionsById.put(transactionState.txnId,transactionState);
      }
 else {
        m_agreementLog.info("Dropping txn " + transactionState.txnId + " data from failed initiatorSiteId: "+ transactionState.initiatorSiteId);
      }
    }
 else {
      m_recoveryLog.info("Agreement, discarding duplicate txn during recovery, txnid is " + atm.m_txnId + " this should only occur during recovery.");
    }
  }
 else   if (message instanceof BinaryPayloadMessage) {
    BinaryPayloadMessage bpm=(BinaryPayloadMessage)message;
    assert(m_recovering);
    assert(m_recoveryStage == RecoveryStage.SENT_PROPOSAL);
    if (m_recoveryStage != RecoveryStage.SENT_PROPOSAL) {
      m_recoveryLog.fatal("Received a recovery snapshot in stage " + m_recoveryStage);
      VoltDB.crashVoltDB();
    }
    long selectedRecoverBeforeTxn=ByteBuffer.wrap(bpm.m_metadata).getLong();
    if (selectedRecoverBeforeTxn < m_recoverBeforeTxn) {
      m_recoveryLog.fatal("Selected recover before txn was earlier than the  proposed recover before txn");
      VoltDB.crashVoltDB();
    }
    m_recoverBeforeTxn=selectedRecoverBeforeTxn;
    m_recoverySnapshot=bpm.m_payload;
    m_recoveryStage=RecoveryStage.RECEIVED_SNAPSHOT;
  }
 else   if (message instanceof FaultMessage) {
    FaultMessage fm=(FaultMessage)message;
    for (    NodeFailureFault fault : fm.nodeFaults) {
      for (      Integer faultedInitiator : fault.getFailedNonExecSites()) {
        m_safetyState.removeState(faultedInitiator);
      }
    }
    discoverGlobalFaultData(fm);
  }
 else   if (message instanceof RecoveryMessage) {
    RecoveryMessage rm=(RecoveryMessage)message;
    assert(m_recoverBeforeTxn == null);
    assert(m_siteRequestingRecovery == null);
    assert(m_recovering == false);
    assert(m_recoveryStage == RecoveryStage.RECOVERED);
    m_recoverBeforeTxn=rm.txnId();
    m_siteRequestingRecovery=rm.sourceSite();
  }
}
