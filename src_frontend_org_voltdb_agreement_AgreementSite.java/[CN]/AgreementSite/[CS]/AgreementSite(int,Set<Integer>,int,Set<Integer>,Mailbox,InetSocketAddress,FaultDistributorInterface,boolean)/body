{
  m_faultDistributor=faultDistributor;
  m_mailbox=mailbox;
  m_siteId=myAgreementSiteId;
  m_siteIds.addAll(agreementSiteIds);
  m_allSiteIds.addAll(agreementSiteIds);
  m_siteIds.removeAll(failedSiteIds);
  m_knownFailedSites.addAll(failedSiteIds);
  m_handledFailedSites.addAll(m_knownFailedSites);
  m_idManager=new TransactionIdManager(initiatorId,0);
  m_txnQueue=new RestrictedPriorityQueue(MiscUtils.toArray(agreementSiteIds),myAgreementSiteId,mailbox,VoltDB.AGREEMENT_MAILBOX_ID,true);
  m_safetyState=new ExecutorTxnIdSafetyState(myAgreementSiteId,MiscUtils.toArray(agreementSiteIds));
  for (  Integer sid : failedSiteIds) {
    m_txnQueue.gotFaultForInitiator(sid);
    m_safetyState.removeState(sid);
  }
  m_cnxnFactory=new NIOServerCnxn.Factory(address,10);
  m_server=new ZooKeeperServer(this);
  m_handledFailedSites.addAll(m_knownFailedSites);
  if (faultDistributor != null) {
    faultDistributor.registerFaultHandler(NodeFailureFault.NODE_FAILURE_INITIATOR,m_faultHandler,FaultType.NODE_FAILURE);
  }
  m_recovering=recovering;
  if (recovering) {
    m_recoveryStage=RecoveryStage.WAITING_FOR_SAFETY;
  }
 else {
    m_recoveryComplete.countDown();
  }
}
