{
  String tbName="T1";
  String sql, sqlNoSimplification, equivalentSql;
  sql="select A, C FROM (SELECT A, C FROM R1) T1";
  sqlNoSimplification="select A, C FROM (SELECT A, C FROM R1 LIMIT 10) T1";
  equivalentSql="SELECT A, C FROM R1 T1";
  checkSimple(sqlNoSimplification,tbName,new String[]{"A","C"},"R1",new String[]{"A","C"});
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A, C FROM (SELECT A, C FROM R1) T1 WHERE A > 0";
  sqlNoSimplification="select A, C FROM (SELECT A, C FROM R1  LIMIT 10) T1 WHERE A > 0";
  equivalentSql="SELECT A, C FROM R1 T1 WHERE A > 0";
  checkSimple(sqlNoSimplification,tbName,new String[]{"A","C"},"R1",new String[]{"A","C"},true);
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A, C FROM (SELECT A, C FROM R1) T1 WHERE T1.A < 0";
  sqlNoSimplification="select A, C FROM (SELECT A, C FROM R1  LIMIT 10) T1 WHERE T1.A < 0";
  equivalentSql="SELECT A, C FROM R1 T1 WHERE T1.A < 0;";
  checkSimple(sqlNoSimplification,tbName,new String[]{"A","C"},"R1",new String[]{"A","C"},true);
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A1, C1 FROM (SELECT A A1, C C1 FROM R1) T1 WHERE T1.A1 < 0";
  sqlNoSimplification="select A1, C1 FROM (SELECT A A1, C C1 FROM R1 LIMIT 10) T1 WHERE T1.A1 < 0";
  equivalentSql="select A A1, C C1 FROM R1 T1 WHERE T1.A < 0";
  checkSimple(sqlNoSimplification,tbName,new String[]{"A1","C1"},"R1",new String[]{"A","C"},true);
  checkSubquerySimplification(sql,equivalentSql);
  sql="select C1 FROM (SELECT A A1, C C1 FROM R1) T1 WHERE T1.A1 < 0";
  sqlNoSimplification="select C1 FROM (SELECT A A1, C C1 FROM R1  LIMIT 10) T1 WHERE T1.A1 < 0";
  equivalentSql="select C C1 FROM R1 T1 WHERE T1.A < 0";
  checkSimple(sqlNoSimplification,tbName,new String[]{"C1"},"R1",new String[]{"A","C"},true);
  checkSubquerySimplification(sql,equivalentSql);
  checkSimple("select COL1 FROM (SELECT A+3, C COL1 FROM R1  LIMIT 10) T1 WHERE T1.COL1 < 0",tbName,new String[]{"COL1"},"R1",new String[]{"C1","C"},true);
  sql="select A, C FROM (SELECT * FROM R1) T1 WHERE T1.A < 0";
  sqlNoSimplification="select A, C FROM (SELECT * FROM R1  LIMIT 10) T1 WHERE T1.A < 0";
  equivalentSql="select A, C FROM R1 T1 WHERE T1.A < 0";
  checkSimple("select A, C FROM (SELECT * FROM R1  LIMIT 10) T1 WHERE T1.A < 0",tbName,new String[]{"A","C"},"R1",new String[]{"A","C","D"},true);
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * FROM (SELECT A, D FROM R1) T1 WHERE T1.A < 0";
  sqlNoSimplification="select * FROM (SELECT A, D FROM R1 LIMIT 10) T1 WHERE T1.A < 0";
  equivalentSql="select A, D FROM R1 T1 WHERE T1.A < 0";
  checkSimple("select * FROM (SELECT A, D FROM R1  LIMIT 10) T1 WHERE T1.A < 0",tbName,new String[]{"A","D"},"R1",new String[]{"A","D"},true);
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A, C FROM (SELECT * FROM R1 where D > 3) T1 WHERE T1.A < 0";
  sqlNoSimplification="select A, C FROM (SELECT * FROM R1 where D > 3  LIMIT 10) T1 WHERE T1.A < 0";
  equivalentSql="select A, C FROM R1 T1 where T1.A < 0 and T1.D > 3";
  checkSimple(sqlNoSimplification,tbName,new String[]{"A","C"},"R1",new String[]{"A","C","D"},true);
  checkSubquerySimplification(sql,equivalentSql);
}
