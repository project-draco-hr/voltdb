{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C, SUM(distinct D) FROM P2 GROUP BY A, C) T1, R1 where T1.A = R1.A ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertFalse(pn.toExplainPlanString().contains("DISTINCT"));
  pn=planNodes.get(1).getChild(0);
  assertTrue(pn.toExplainPlanString().contains("LOOP INNER JOIN"));
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P2");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertTrue(pn.toExplainPlanString().contains("SUM DISTINCT(P2.D"));
  planNodes=compileToFragments("SELECT P2.A, P2.C, SUM(distinct P2.D) FROM P2, R1 WHERE P2.A = R1.A GROUP BY P2.A, P2.C");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  assertTrue(pn.getChild(0) instanceof ReceivePlanNode);
  pn=planNodes.get(1).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.INDEXSCAN));
  assertTrue(pn.getInlinePlanNode(PlanNodeType.INDEXSCAN).toExplainPlanString().contains("INDEX SCAN of \"P2\" using its primary key index"));
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(pn.getChild(0).toExplainPlanString().contains("SEQUENTIAL SCAN of \"R1\""));
  planNodes=compileToFragments("SELECT * FROM (SELECT DISTINCT A FROM P1) T1, P2 where T1.A = P2.A");
  assertEquals(2,planNodes.size());
  assertFalse(planNodes.get(0).toExplainPlanString().contains("AGGREGATION"));
  assertFalse(planNodes.get(0).toExplainPlanString().contains("DISTINCT"));
  assertFalse(planNodes.get(0).toExplainPlanString().contains("JOIN"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("AGGREGATION"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("INDEX INNER JOIN"));
  String errorMessage="Join of multiple partitioned tables has insufficient join criteria";
  failToCompile("SELECT * FROM (SELECT DISTINCT A, C FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A",errorMessage);
  failToCompile("SELECT * FROM (SELECT DISTINCT A FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A",errorMessage);
  planNodes=compileToFragments("SELECT * " + "FROM   (   SELECT T0.A, R1.C " + "           FROM   R1, "+ "                  (   SELECT DISTINCT P1.A "+ "                      FROM P1, R2 "+ "                      WHERE P1.A = R2.A) "+ "                  T0 "+ "           WHERE  R1.A = T0.A ) "+ "       T1, "+ "       P2 "+ "WHERE T1.A = P2.A");
  assertEquals(2,planNodes.size());
  assertFalse(planNodes.get(0).toExplainPlanString().contains("AGGREGATION"));
  assertFalse(planNodes.get(0).toExplainPlanString().contains("DISTINCT"));
  assertFalse(planNodes.get(0).toExplainPlanString().contains("JOIN"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("AGGREGATION"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("INDEX INNER JOIN"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("LOOP INNER JOIN"));
  String sql1, sql2;
  sql1="SELECT * FROM (SELECT DISTINCT A, C FROM P1) T1, P2 where T1.A = P2.A";
  sql2="SELECT * FROM (SELECT A, C FROM P1 GROUP BY A, C) T1, P2 where T1.A = P2.A";
  checkQueriesPlansAreTheSame(sql1,sql2);
  sql1="SELECT * FROM (SELECT T0.A, R1.C FROM R1, " + "                (SELECT Distinct P1.A, C FROM P1,R2 where P1.A = R2.A) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A";
  sql2="SELECT * FROM (SELECT T0.A, R1.C FROM R1, " + "                (SELECT P1.A, C FROM P1,R2 where P1.A = R2.A group by P1.A, C) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A";
  checkQueriesPlansAreTheSame(sql1,sql2);
  planNodes=compileToFragments("SELECT * FROM (SELECT DISTINCT T0.A FROM R1, " + "                (SELECT P1.A, C FROM P1,R2 where P1.A = R2.A) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A");
  assertEquals(2,planNodes.size());
  assertFalse(planNodes.get(0).toExplainPlanString().contains("AGGREGATION"));
  assertFalse(planNodes.get(0).toExplainPlanString().contains("DISTINCT"));
  assertFalse(planNodes.get(0).toExplainPlanString().contains("JOIN"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("AGGREGATION"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("INDEX INNER JOIN"));
  assertTrue(planNodes.get(1).toExplainPlanString().contains("LOOP INNER JOIN"));
  failToCompile("SELECT * FROM (SELECT DISTINCT A FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A");
  sql1="SELECT * FROM (SELECT DISTINCT T0.A, R1.C FROM R1, " + "                (SELECT P1.A, C FROM P1,R2 where P1.A = R2.A) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A";
  sql2="SELECT * FROM (SELECT T0.A, R1.C FROM R1, " + "                (SELECT P1.A, C FROM P1,R2 where P1.A = R2.A) T0 where R1.A = T0.A GROUP BY T0.A, R1.C) T1, " + "              P2 "+ "where T1.A = P2.A";
  checkQueriesPlansAreTheSame(sql1,sql2);
}
