{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  AbstractPlanNode nlpn;
  String sql, sqlNoSimplification, equivalentSql;
  sql="SELECT R1.A, R1.C FROM R1 LEFT JOIN (SELECT A, C FROM R2) T1 ON T1.C = R1.C ";
  sqlNoSimplification="SELECT R1.A, R1.C FROM R1 LEFT JOIN (SELECT A, C FROM R2 LIMIT 10) T1 ON T1.C = R1.C ";
  equivalentSql="SELECT R1.A, R1.C FROM R1 LEFT JOIN R2 T1 ON T1.C = R1.C ";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.LEFT,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"R1","A","C");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T1","C");
  pn=pn.getChild(0);
  checkSeqScan(pn,"R2","A","C");
  checkSubquerySimplification(sql,equivalentSql);
  sql="SELECT R1.A, R1.C FROM R1 LEFT JOIN (SELECT A, C FROM P1) T1 ON T1.C = R1.C ";
  sqlNoSimplification="SELECT R1.A, R1.C FROM R1 LEFT JOIN (SELECT DISTINCT A, C FROM P1) T1 ON T1.C = R1.C ";
  equivalentSql="SELECT R1.A, R1.C FROM R1 LEFT JOIN P1 T1 ON T1.C = R1.C ";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.LEFT,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"R1","A","C");
  pn=nlpn.getChild(1);
  assertEquals(PlanNodeType.RECEIVE,pn.getPlanNodeType());
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","C");
  checkSubquerySimplification(sql,equivalentSql);
  planNodes=compileToFragments("SELECT R1.A, R1.C FROM R1 LEFT JOIN (SELECT A, count(*) C FROM P1 GROUP BY A) T1 ON T1.C = R1.C ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.LEFT,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"R1","A","C");
  pn=nlpn.getChild(1);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","C");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","A","C");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.AGGREGATE));
  planNodes=compileToFragments("SELECT T1.CC FROM P1 LEFT JOIN (SELECT A, count(*) CC FROM P2 GROUP BY A) T1 ON T1.A = P1.A ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.LEFT,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P2");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.AGGREGATE));
  planNodes=compileToFragments("SELECT R1.A, R1.C FROM R1 RIGHT JOIN (SELECT A, count(*) C FROM P1 GROUP BY A) T1 ON T1.C = R1.C ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.LEFT,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"R1","A","C");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1","C");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","A","C");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.AGGREGATE));
  planNodes=compileToFragments("SELECT T1.CC FROM P1 RIGHT JOIN (SELECT A, count(*) CC FROM P2 GROUP BY A) T1 ON T1.A = P1.A ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopIndexPlanNode);
  assertEquals(JoinType.LEFT,((NestLoopIndexPlanNode)nlpn).getJoinType());
  pn=nlpn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  checkPrimaryKeyIndexScan(pn,"P1");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P2");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.AGGREGATE));
  sql="SELECT R1.A, R1.C FROM R1 INNER JOIN (SELECT A, C FROM P1) T1 ON T1.C = R1.C ";
  sqlNoSimplification="SELECT R1.A, R1.C FROM R1 INNER JOIN (SELECT DISTINCT A, C FROM P1) T1 ON T1.C = R1.C ";
  equivalentSql="SELECT R1.A, R1.C FROM R1 INNER JOIN P1 T1 ON T1.C = R1.C ";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.INNER,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"R1","A","C");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T1","C");
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A, AC FROM (SELECT A FROM R1) T1, (SELECT C AC FROM P1) T2 WHERE T1.A = T2.AC ";
  sqlNoSimplification="select A, AC FROM (SELECT A FROM R1 LIMIT 10) T1, (SELECT DISTINCT A AC FROM P1) T2 WHERE T1.A = T2.AC ";
  equivalentSql="select T1.A, T2.C AC FROM R1 T1, P1 T2 WHERE T1.A = T2.C ";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.INNER,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1","A");
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T2","AC");
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A1, A2 FROM (SELECT A A1 FROM R1) T1, (SELECT A A2 FROM P1 where A = 3) T2 WHERE T1.A1 = T2.A2 ";
  sqlNoSimplification="select A2, A1 FROM (SELECT DISTINCT A A1 FROM R1) T1, (SELECT DISTINCT A A2 FROM P1 where A = 3) T2 WHERE T1.A1 = T2.A2 ";
  equivalentSql="select T1.A A1, T2.A A2 FROM R1 T1 join P1 T2 on T2.A = 3 and T1.A = T2.A";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1","A1");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T2","A2");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","A");
  assertEquals(2,((IndexScanPlanNode)pn).getInlinePlanNodes().size());
  assertNotNull(((IndexScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(((IndexScanPlanNode)pn).getInlinePlanNode(PlanNodeType.AGGREGATE));
  checkSubquerySimplification(sql,equivalentSql);
  planNodes=compileToFragments("select C FROM (SELECT P1.C FROM P1, P2 " + "WHERE P1.A = P2.A AND P1.A = 3) T1 ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select T1.C FROM (SELECT P1.C FROM P1, P2 " + "WHERE P1.A = P2.A AND P1.A = 3) T1, R1 where T1.C > R1.C ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select T1.C FROM (SELECT P1.C FROM P1, P2 " + "WHERE P1.A = P2.A AND P1.A = 3) T1, (select C FROM R1) T2 where T1.C > T2.C ");
  assertEquals(1,planNodes.size());
}
