{
  String sql;
  String equivalentSql;
  List<String[]> ignoreList=null;
  sql="select * from (select D, C as D from R1) T;";
  equivalentSql="select D, C as D from R1 T";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select D, C as D, A as C from R1) T where C = 1;";
  equivalentSql="select D, C as D, A as C from R1 T where T.A = 1";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select C + 1 from (select D, C as D, A as C from R1) T where C = 1;";
  equivalentSql="select A + 1 from R1 T where T.A = 1";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select D, C as D from R1) T;";
  equivalentSql="select D, C as D from R1 T";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select D, C as D, A as C from R1) T where C = 1;";
  equivalentSql="select D, C as D, A as C from R1 T where T.A = 1";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select C + 1 from (select D, C as D, A as C from R1) T where C = 1;";
  equivalentSql="select A + 1 from R1 T where T.A = 1";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select * from R1) T1";
  equivalentSql="select * from R1 T1";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select T1.AA AAA from (select R1A.A AA from R1 R1A) T1 where T1.AA > 0";
  equivalentSql="select T1.A AAA from R1 T1 where T1.A > 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A from (select A from R1) T1 where A > 0";
  equivalentSql="select T1.A from R1 T1 where A > 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A from (select A from P1) T1 where A > 0";
  equivalentSql="select T1.A from P1 T1 where A > 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select * from (select * from R1 R1A) T1) T2";
  equivalentSql="select * from R1 T2";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select * from (select * from R1 R1A) T1 LIMIT 10) T2";
  equivalentSql="select * from (select * from R1 T1 LIMIT 10)T2";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select a from (select * from (select d as a, c, a as d from R1) T1) T2;";
  equivalentSql="select T2.D A from R1 T2";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select T2.AAA AAAA from (select T1.AA AAA from (select R1A.A AA from R1 R1A) T1) T2";
  equivalentSql="select T2.A AAAA from R1 T2";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select T2.AAA AAAA from " + "(select T1.AA AAA from " + "(select R1A.A AA, R1A.D DD from R1 R1A where R1A.C = 3) T1 where T1.DD < 5) "+ "T2 where T2.AAA > 0";
  equivalentSql="select T2.A AAAA from R1 T2 where T2.C = 3 and T2.D < 5 and T2.A > 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A from (select A from R1 where R1.C = 0) T1";
  equivalentSql="select T1.A from R1 T1 where T1.C = 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A from (select A from R1 where exists (select 1 from R2 where R2.A = 0)) T1";
  equivalentSql="select T1.A from R1 T1 where exists (select 1 from R2 where R2.A = 0)";
  ignoreList=new ArrayList<>();
  ignoreList.add(new String[]{"\"SUBQUERY_ID\":2","\"SUBQUERY_ID\":1"});
  ignoreList.add(new String[]{"\"STATEMENT_ID\":2","\"STATEMENT_ID\":1"});
  checkSubquerySimplification(sql,equivalentSql,ignoreList);
  sql="select C from (select A, C + 1 C from R1) T ORDER BY C";
  equivalentSql="select C + 1 C from R1 T ORDER BY C";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select MAX(D) from (select A D, C A from R1) T";
  equivalentSql="select MAX(A) from R1 T";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select MAX(A1), C from (select A + 1 A1, C from R1) T GROUP BY C";
  equivalentSql="select MAX(A + 1), C from R1 T GROUP BY C";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select MAX(A), C from (select A, C + 1 C from R1) T GROUP BY C";
  equivalentSql="select MAX(A), C + 1 C from R1 T GROUP BY (C + 1)";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select MAX(D), A from (select A D, C A from R1) T GROUP BY A HAVING MAX(D) > 5";
  equivalentSql="select MAX(A), C A from R1 T GROUP BY C HAVING MAX(A) > 5";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select MAX(D), A from (select A + 1 D, C A from R1) T GROUP BY A HAVING MAX(D) > 5";
  equivalentSql="select MAX(A + 1), C A from R1 T GROUP BY C HAVING MAX(A + 1) > 5";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select distinct * from (select A D, D from R1) T";
  equivalentSql="select distinct A D, D from R1 T";
  checkSubquerySimplification(sql,equivalentSql);
  sql="SELECT T1.TC, T2.TA FROM (SELECT C  TC FROM R1 WHERE R1.C > 0) T1 JOIN " + "(SELECT A  TA FROM R2 WHERE R2.A > 0) T2 ON T1.TC = T2.TA";
  equivalentSql="SELECT T1.C TC, T2.A TA FROM R1 T1 JOIN " + "R2 T2 ON T1.C > 0 and T2.A > 0 and T1.C = T2.A";
  checkSubquerySimplification(sql,equivalentSql,ignoreList);
  sql="SELECT T1.TC, T2.TA FROM (SELECT C  TC FROM R1 WHERE R1.C > 0) T1 LEFT JOIN " + "(SELECT A  TA FROM R2 WHERE R2.A > 0) T2 ON T1.TC = T2.TA";
  equivalentSql="SELECT T1.C TC, T2.A TA FROM R1 T1 LEFT JOIN " + "R2 T2 ON T1.C > 0 and T2.A > 0 and T1.C = T2.A";
  checkSubquerySimplification(sql,equivalentSql,ignoreList);
  sql="select T1.A, T1.C from (select A, C from P1 where A = 2) T1, P2 where T1.A = P2.A ";
  equivalentSql="select T1.A, T1.C from P1 T1, P2 where T1.A = 2 and T1.A = P2.A ";
  checkSubquerySimplification(sql,equivalentSql,ignoreList);
  sql="select T1.A, T1.C from (select A, C from P1) T1 left join P2 on T1.A = P2.A ";
  equivalentSql="select T1.A, T1.C from P1 T1 left join P2 on T1.A = P2.A ";
  checkSubquerySimplification(sql,equivalentSql,ignoreList);
  sql="select A1 A11 from (select A + 1 A1 from R1 where R1.C = 0) T1";
  equivalentSql="select T1.A + 1 A11 from R1 T1 where T1.C = 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select * from (select a + c + d as acd, a * c * d as acd from R1) T1;";
  equivalentSql="select a + c + d as acd, a * c * d as acd from R1 T1";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select AC AC1 from (select A + C AC from R1 where R1.C = 0) T1";
  equivalentSql="select T1.A + T1.C AC1 from R1 T1 where T1.C = 0";
  checkSubquerySimplification(sql,equivalentSql);
  sql="select SCALAR AC1 from (select (select A from R2) SCALAR from R1 where R1.C = 0) T1";
  equivalentSql="select  (select A from R2) AC1 from R1 T1 where T1.C = 0";
  ignoreList=new ArrayList<>();
  ignoreList.add(new String[]{"\"SUBQUERY_ID\":2","\"SUBQUERY_ID\":1"});
  ignoreList.add(new String[]{"\"STATEMENT_ID\":2","\"STATEMENT_ID\":1"});
  checkSubquerySimplification(sql,equivalentSql,ignoreList);
}
