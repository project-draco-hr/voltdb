{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  String sql, sqlNoSimplification, equivalentSql;
  sql="select A FROM (SELECT A FROM P1 WHERE A = 3) T1 ";
  sqlNoSimplification="select A FROM (SELECT A FROM P1 WHERE A = 3 LIMIT 1) T1 ";
  equivalentSql="SELECT A FROM P1 T1 WHERE A = 3";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","A");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","A");
  assertNotNull(((IndexScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A, C FROM (SELECT A, C FROM P1 WHERE A = 3) T1 ";
  sqlNoSimplification="select A, C FROM (SELECT A, C FROM P1 WHERE A = 3 LIMIT 1) T1 ";
  equivalentSql="SELECT A, C FROM P1 T1 WHERE A = 3";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","A","C");
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","A","C");
  assertNotNull(((IndexScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  checkSubquerySimplification(sql,equivalentSql);
  planNodes=compileToFragments("select C FROM (SELECT A, C FROM P1 WHERE A = 3 LIMIT 1) T1 ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select C FROM (SELECT C FROM P1 WHERE A = 3 LIMIT 1) T1 ");
  assertEquals(1,planNodes.size());
  sql="select A1, C FROM (SELECT A A1, C FROM P1) T1  ";
  sqlNoSimplification="select A1, C FROM (SELECT DISTINCT A A1, C FROM P1) T1 ";
  equivalentSql="SELECT A A1, C FROM P1 T1";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1).getChild(0);
  checkSeqScan(pn,"T1","A1","C");
  checkSubquerySimplification(sql,equivalentSql);
  sql="select A1 FROM (SELECT A A1, C FROM P1 WHERE A > 3) T1 ";
  sqlNoSimplification="select A1 FROM (SELECT A A1, C FROM P1 WHERE A > 3 LIMIT 10) T1 ";
  equivalentSql="SELECT A A1 FROM P1 T1 WHERE A > 3";
  planNodes=compileToFragments(sqlNoSimplification);
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  checkSeqScan(pn,"T1","A1");
  checkSubquerySimplification(sql,equivalentSql);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C) T1 ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  checkSeqScan(pn,"T1","C","SD");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  assertTrue(pn instanceof HashAggregatePlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","C","SD");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  planNodes=compileToFragments("select X, SD FROM " + "(SELECT C AS X, SUM(D) as SD FROM P1 GROUP BY C) T1 ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  checkSeqScan(pn,"T1","X","SD");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  assertTrue(pn instanceof HashAggregatePlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","C","SD");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  AbstractPlanNode nlpn;
  failToCompile("select * FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C) T1, P2 where T1.C = P2.A ",joinErrorMsg);
  planNodes=compileToFragments("select T1.C, T1.SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C) T1, R1 Where T1.C = R1.C ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"R1");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1","C","SD");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  assertTrue(pn instanceof HashAggregatePlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1","C","SD");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT A, C, SUM(D) as SD FROM P1 WHERE A > 3 GROUP BY A, C) T1 ");
  assertEquals(2,planNodes.size());
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT A, C, SUM(D) as SD FROM P1 WHERE A = 3 GROUP BY A, C) T1 ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select T1.C, T1.SD FROM " + "(SELECT A, C, SUM(D) as SD FROM P1 WHERE A = 3 GROUP BY A, C) T1, R1 WHERE T1.C = R1.C ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select C FROM (SELECT C FROM P1 WHERE A > 3 ORDER BY C LIMIT 5) T1 ");
  assertEquals(2,planNodes.size());
  planNodes=compileToFragments("select T1.C FROM (SELECT C FROM P1 WHERE A > 3 ORDER BY C LIMIT 5) T1, " + "R1 WHERE T1.C > R1.C ");
  assertEquals(2,planNodes.size());
  planNodes=compileToFragments("select C FROM (SELECT A, C FROM P1 WHERE A = 3 ORDER BY C LIMIT 5) T1 ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments(("select C FROM (SELECT C FROM P1 WHERE A = 3 ORDER BY C LIMIT 5) T1 "));
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select T1.C FROM (SELECT A, C FROM P1 WHERE A = 3 ORDER BY C LIMIT 5) T1, " + "R1 WHERE T1.C > R1.C ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select T1.C FROM (SELECT C FROM P1 WHERE A = 3 ORDER BY C LIMIT 5) T1, " + "R1 WHERE T1.C > R1.C ");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C ORDER BY C LIMIT 5) T1 ");
  assertEquals(2,planNodes.size());
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 WHERE A = 3 GROUP BY C ORDER BY C LIMIT 5) T1 ");
  assertEquals(1,planNodes.size());
}
