{
  AbstractPlanNode pn;
  String[] outputSchema;
  String sql, sqlNoSimplification, equivalentSql;
  sql="select T1.A, T2.A FROM (SELECT A FROM R1) T1, (SELECT A FROM R2)T2 ";
  sqlNoSimplification="select T1.A, T2.A FROM (SELECT A FROM R1 LIMIT 1) T1, (SELECT A A FROM R2 LIMIT 1)T2 ";
  equivalentSql="select T1.A, T2.A FROM R1 T1, R2 T2";
  outputSchema=new String[]{"T1.A","T2.A"};
  checkEdgeCases(sqlNoSimplification,outputSchema,"T1","A","T2","A","R1","A","R2","A");
  checkSubquerySimplification(sql,equivalentSql);
  sql="SELECT 1, * FROM (select * from R1) T1, R2 T2 WHERE T2.A < 3737632230784348203";
  sqlNoSimplification="SELECT 1, * FROM (select * from R1 LIMIT 5) T1, R2 T2 WHERE T2.A < 3737632230784348203";
  equivalentSql="SELECT 1, * FROM R1 T1, R2 T2 WHERE T2.A < 3737632230784348203";
  pn=compile(sqlNoSimplification);
  assertTrue(pn.getChild(0) instanceof ProjectionPlanNode);
  checkSubquerySimplification(sql,equivalentSql);
  sql="SELECT 2, * FROM (select * from R1) T1, R2 T2 WHERE CASE WHEN T2.A > 44 THEN T2.C END < 44 + 10";
  sqlNoSimplification="SELECT 2, * FROM (select * from R1 LIMIT 5) T1, R2 T2 WHERE CASE WHEN T2.A > 44 THEN T2.C END < 44 + 10";
  equivalentSql="SELECT 2, * FROM R1 T1, R2 T2 WHERE CASE WHEN T2.A > 44 THEN T2.C END < 44 + 10";
  pn=compile(sqlNoSimplification);
  assertTrue(pn.getChild(0) instanceof ProjectionPlanNode);
  checkSubquerySimplification(sql,equivalentSql);
  sql="SELECT -8, T2.C FROM (select * from R1) T1, R1 T2 WHERE (T2.C + 5 ) > 44";
  sqlNoSimplification="SELECT -8, T2.C FROM (select * from R1 LIMIT 5) T1, R1 T2 WHERE (T2.C + 5 ) > 44";
  equivalentSql="SELECT -8, T2.C FROM R1 T1, R1 T2 WHERE (T2.C + 5 ) > 44";
  pn=compile(sqlNoSimplification);
  assertTrue(pn.getChild(0) instanceof ProjectionPlanNode);
  checkSubquerySimplification(sql,equivalentSql);
}
