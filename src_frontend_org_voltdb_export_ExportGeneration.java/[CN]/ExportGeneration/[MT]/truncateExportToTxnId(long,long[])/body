{
  HashMap<Integer,Long> partitionToTxnId=new HashMap<Integer,Long>();
  for (  long tid : perPartitionTxnIds) {
    partitionToTxnId.put(TxnEgo.getPartitionId(tid),tid);
  }
  List<ListenableFuture<?>> tasks=new ArrayList<ListenableFuture<?>>();
  for (  HashMap<String,ExportDataSource> dataSources : m_dataSourcesByPartition.values()) {
    for (    ExportDataSource source : dataSources.values()) {
      if (VoltDB.instance().isIV2Enabled()) {
        Long truncationPoint=partitionToTxnId.get(source.getPartitionId());
        if (truncationPoint == null) {
          exportLog.error("Snapshot " + txnId + " does not include truncation point for partition "+ source.getPartitionId());
        }
 else {
          tasks.add(source.truncateExportToTxnId(truncationPoint));
        }
      }
 else {
        tasks.add(source.truncateExportToTxnId(txnId));
      }
    }
  }
  try {
    Futures.allAsList(tasks).get();
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB("Unexpected exception truncating export data during snapshot restore. " + "You can back up export overflow data and start the " + "DB without it to get past this error",true,e);
  }
  return m_drainedSources.get() == m_numSources;
}
