{
  return new Watcher(){
    @Override public void process(    final WatchedEvent event){
      final Runnable processRunnable=new Runnable(){
        @Override public void run(){
          if (m_drainedSources.get() == m_numSources) {
            return;
          }
          final AsyncCallback.ChildrenCallback childrenCallback=new org.apache.zookeeper_voltpatches.AsyncCallback.ChildrenCallback(){
            @Override public void processResult(            final int rc,            final String path,            Object ctx,            final List<String> children){
              KeeperException.Code code=KeeperException.Code.get(rc);
              if (code != KeeperException.Code.OK) {
                VoltDB.crashLocalVoltDB("Error in export leader election",true,KeeperException.create(code));
              }
              m_childUpdatingThread.execute(new Runnable(){
                @Override public void run(){
                  try {
                    handleLeaderChildrenUpdate(partition,children);
                  }
 catch (                  Throwable t) {
                    VoltDB.crashLocalVoltDB("Error in export leader election",true,t);
                  }
                }
              }
);
            }
          }
;
          m_zk.getChildren(m_leadersZKPath + "/" + partition,constructLeaderChildWatcher(partition),childrenCallback,null);
        }
      }
;
      m_childUpdatingThread.execute(processRunnable);
    }
  }
;
}
