{
  try {
    parseParamList(paramList);
    ByteBuffer paramBuf=createParametersBuffer(paramList);
    for (int i=0; i < numberOfBatches(); i++) {
      boolean finalTask=(i == numberOfBatches() - 1);
      int localTask_startDep=m_txnState.getNextDependencyId() | DtxnConstants.MULTIPARTITION_DEPENDENCY;
      int localTask_outputDep=m_txnState.getNextDependencyId();
      FragmentTaskMessage localTask=FragmentTaskMessage.createWithOneFragment(m_txnState.initiatorHSId,m_txnState.coordinatorSiteId,m_txnState.txnId,m_txnState.isReadOnly(),1,localTask_outputDep,paramBuf,false);
      localTask.addInputDepId(0,localTask_startDep);
      FragmentTaskMessage distributedTask=FragmentTaskMessage.createWithOneFragment(m_txnState.initiatorHSId,m_txnState.coordinatorSiteId,m_txnState.txnId,m_txnState.isReadOnly(),0,localTask_startDep,paramBuf,finalTask);
      m_txnState.createLocalFragmentWork(localTask,nonTransactional() && finalTask);
      m_txnState.createAllParticipatingFragmentWork(distributedTask);
      m_txnState.setupProcedureResume(finalTask,new int[]{localTask_outputDep});
      final Map<Integer,List<VoltTable>> resultDeps=m_site.recursableRun(m_txnState);
      assertTrue(resultDeps != null);
    }
    ++m_called;
    if (simulate_coordinator_dies_during_commit) {
      simulate_coordinator_dies_during_commit=false;
      throw new ThreadDeath();
    }
    VoltTable[] vta=new VoltTable[1];
    vta[0]=new VoltTable(new VoltTable.ColumnInfo("",VoltType.INTEGER));
    vta[0].addRow(new Integer(1));
    return new ClientResponseImpl(ClientResponse.SUCCESS,vta,null);
  }
 catch (  SerializableException ex) {
    byte status=0;
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,status,"",new VoltTable[0],"Intentional fuzz failure.",ex);
  }
}
