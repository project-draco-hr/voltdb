{
  final StoredProcedureInvocation spi=new StoredProcedureInvocation();
  if (!rollback) {
    spi.setProcName("org.voltdb.TestExecutionSite$MockMPVoltProcedure");
    spi.setParams("commit",new Integer(partition_id));
  }
 else {
    if (rollback_all) {
      spi.setProcName("org.voltdb.TestExecutionSite$MockMPVoltProcedureRollbackParticipant");
      spi.setParams("rollback_all",new Integer(partition_id));
    }
 else {
      spi.setProcName("org.voltdb.TestExecutionSite$MockMPVoltProcedureRollbackParticipant");
      spi.setParams("rollback_random",new Integer(partition_id));
    }
  }
  System.out.println("Creating MP proc, TXN ID: " + txn_id + ", participants: "+ participants.toString());
  final InitiateTaskMessage itm=new InitiateTaskMessage(initiator_id,coordinator_id,txn_id,readOnly,false,spi,safe_txn_id);
  int[] participants_arr=new int[participants.size()];
  for (int i=0; i < participants.size(); ++i)   participants_arr[i]=participants.get(i);
  itm.setNonCoordinatorSites(participants_arr);
  m_mboxes[coordinator_id].deliver(itm);
  for (  int participant : participants) {
    final MultiPartitionParticipantMessage mppm=new MultiPartitionParticipantMessage(initiator_id,coordinator_id,txn_id,readOnly);
    m_mboxes[participant].deliver(mppm);
  }
}
