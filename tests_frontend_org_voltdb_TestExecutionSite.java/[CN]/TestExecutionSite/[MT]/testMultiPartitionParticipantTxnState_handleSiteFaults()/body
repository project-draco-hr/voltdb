{
  start(SITE_COUNT,PARTITION_COUNT,K_FACTOR);
  StoredProcedureInvocation spi=new StoredProcedureInvocation();
  spi.setClientHandle(25);
  spi.setProcName("johnisgreat");
  spi.setParams("commit",57,"gooniestoo");
  InitiateTaskMessage mn=new InitiateTaskMessage(-1,0,-1,false,false,spi,Long.MIN_VALUE);
  final long siteId0=getHSIdForES(0);
  Mailbox m0=m_mboxes.get(siteId0);
  ExecutionSite es0=m_sites.get(siteId0);
  MultiPartitionParticipantTxnState ts=new MultiPartitionParticipantTxnState(m0,es0,mn);
  HashSet<Long> failedSites=new HashSet<Long>();
  failedSites.add(getHSIdForES(1));
  failedSites.add(getHSIdForES(2));
  failedSites.add(getHSIdForES(3));
  failedSites.add(getHSIdForES(5));
  ts.handleSiteFaults(failedSites);
  long[] nonCoordinatingSites=ts.getNonCoordinatingSites();
  assertEquals(4,nonCoordinatingSites.length);
  assertEquals(getHSIdForES(8),nonCoordinatingSites[3]);
  assertEquals(getHSIdForES(7),nonCoordinatingSites[2]);
  assertEquals(getHSIdForES(6),nonCoordinatingSites[1]);
  assertEquals(getHSIdForES(4),nonCoordinatingSites[0]);
  ts=new MultiPartitionParticipantTxnState(m0,es0,mn);
  failedSites.clear();
  failedSites.add(getHSIdForES(1));
  ts.handleSiteFaults(failedSites);
  nonCoordinatingSites=ts.getNonCoordinatingSites();
  assertEquals(7,nonCoordinatingSites.length);
  assertEquals(getHSIdForES(8),nonCoordinatingSites[6]);
  assertEquals(getHSIdForES(7),nonCoordinatingSites[5]);
  assertEquals(getHSIdForES(6),nonCoordinatingSites[4]);
  assertEquals(getHSIdForES(4),nonCoordinatingSites[2]);
  assertEquals(getHSIdForES(3),nonCoordinatingSites[1]);
  assertEquals(getHSIdForES(2),nonCoordinatingSites[0]);
  ts=new MultiPartitionParticipantTxnState(m0,es0,mn);
  failedSites.clear();
  failedSites.add(getHSIdForES(9));
  failedSites.add(getHSIdForES(10));
  ts.handleSiteFaults(failedSites);
  nonCoordinatingSites=ts.getNonCoordinatingSites();
  assertEquals(8,nonCoordinatingSites.length);
  assertEquals(getHSIdForES(8),nonCoordinatingSites[7]);
  assertEquals(getHSIdForES(7),nonCoordinatingSites[6]);
  assertEquals(getHSIdForES(6),nonCoordinatingSites[5]);
  assertEquals(getHSIdForES(5),nonCoordinatingSites[4]);
  assertEquals(getHSIdForES(3),nonCoordinatingSites[2]);
  assertEquals(getHSIdForES(2),nonCoordinatingSites[1]);
  assertEquals(getHSIdForES(1),nonCoordinatingSites[0]);
}
