{
  long seed=System.currentTimeMillis();
  m_rand=new Random(seed);
  m_checker=new ExecutionSiteFuzzChecker();
  m_voltdb=new MockVoltDB();
  m_voltdb.setFaultDistributor(new FaultDistributor(m_voltdb));
  for (int ss=0; ss < siteCount; ss++) {
    m_voltdb.addHost(getHostIdForSiteId(ss));
    m_voltdb.addSite(getInitiatorIdForSiteId(ss),getHostIdForSiteId(ss),getPartitionIdForSiteId(ss),false);
    String logname=ExecutionSite.class.getName() + "." + ss;
    m_siteLogger[ss]=new VoltLogger(logname);
    m_siteResults[ss]=new StringWriter();
    m_siteLogger[ss].addSimpleWriterAppender(m_siteResults[ss]);
    m_siteLogger[ss].setLevel(Level.TRACE);
  }
  int siteid=0;
  for (int pp=0; pp < partitionCount; pp++) {
    m_voltdb.addPartition(pp);
    for (int kk=0; kk < (kFactor + 1); kk++) {
      m_voltdb.addSite(siteid,getHostIdForSiteId(siteid),pp,true);
      m_checker.addSite(siteid,pp,m_siteResults[siteid]);
      ++siteid;
    }
  }
  if (siteid != siteCount) {
    throw new RuntimeException("Invalid setup logic.");
  }
  Procedure proc=null;
  proc=m_voltdb.addProcedureForTest(MockSPVoltProcedure.class.getName());
  proc.setReadonly(false);
  proc.setSinglepartition(true);
  proc=m_voltdb.addProcedureForTest(MockROSPVoltProcedure.class.getName());
  proc.setReadonly(true);
  proc.setSinglepartition(true);
  proc=m_voltdb.addProcedureForTest(MockMPVoltProcedure.class.getName());
  proc.setReadonly(false);
  proc.setSinglepartition(false);
  proc=m_voltdb.addProcedureForTest(MockMPVoltProcedureRollbackParticipant.class.getName());
  proc.setReadonly(false);
  proc.setSinglepartition(false);
  VoltDB.replaceVoltDBInstanceForTest(m_voltdb);
  for (int ss=0; ss < siteCount; ++ss) {
    m_mboxes[ss]=new RussianRouletteMailbox(ss);
    m_rpqs[ss]=new RestrictedPriorityARRR(getInitiatorIds(),ss,m_mboxes[ss]);
    m_sites[ss]=new ExecutionSite(m_voltdb,m_mboxes[ss],ss,null,m_rpqs[ss],false,new HashSet<Integer>(),0);
    registerMailbox(ss,m_mboxes[ss]);
  }
}
