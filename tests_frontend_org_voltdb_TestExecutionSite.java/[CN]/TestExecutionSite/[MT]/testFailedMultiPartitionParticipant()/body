{
  tearDown();
  setUp(2,2,0);
  final boolean readOnly=false, singlePartition=false;
  Thread es1;
  final StoredProcedureInvocation tx1_spi=new StoredProcedureInvocation();
  tx1_spi.setProcName("org.voltdb.TestExecutionSite$MockMPVoltProcedure");
  tx1_spi.setParams("commit",new Integer(0));
  final InitiateTaskMessage tx1_mn_1=new InitiateTaskMessage(getInitiatorIdForSiteId(0),0,DtxnConstants.DUMMY_LAST_SEEN_TXN_ID,readOnly,singlePartition,tx1_spi,Long.MAX_VALUE);
  final MultiPartitionParticipantTxnState tx1_1=new MultiPartitionParticipantTxnState(m_mboxes[0],m_sites[0],tx1_mn_1);
  int callcheck=MockMPVoltProcedure.m_called;
  assertFalse(tx1_1.isDone());
  m_sites[0].m_transactionsById.put(tx1_1.txnId,tx1_1);
  es1=new Thread(new Runnable(){
    @Override public void run(){
      m_sites[0].recursableRun(tx1_1);
    }
  }
);
  es1.start();
  m_voltdb.killSite(1);
  m_voltdb.getFaultDistributor().reportFault(new NodeFailureFault(getHostIdForSiteId(1),m_voltdb.getCatalogContext().siteTracker.getNonExecSitesForHost(getHostIdForSiteId(1)),String.valueOf(getHostIdForSiteId(1))));
  for (int ss=0; ss < SITE_COUNT; ++ss) {
    if ((ss != 1) || (ss != 0)) {
      HashSet<Integer> failedHosts=new HashSet<Integer>();
      failedHosts.add(getHostIdForSiteId(1));
      m_mboxes[0].deliver(new FailureSiteUpdateMessage(ss,failedHosts,tx1_1.initiatorSiteId,tx1_1.txnId,tx1_1.txnId));
    }
  }
  es1.join();
  assertTrue(tx1_1.isDone());
  assertFalse(tx1_1.needsRollback());
  assertEquals(null,m_sites[0].m_transactionsById.get(tx1_1.txnId));
  assertEquals((++callcheck),MockMPVoltProcedure.m_called);
}
