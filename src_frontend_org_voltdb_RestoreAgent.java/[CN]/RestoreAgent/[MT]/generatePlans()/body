{
  Map<String,Snapshot> snapshots=new HashMap<String,SnapshotUtil.Snapshot>();
  if (m_action.doesRecover()) {
    snapshots=getSnapshots();
  }
  final Long maxLastSeenTxn=m_replayAgent.getMaxLastSeenTxn();
  Set<SnapshotInfo> snapshotInfos=new HashSet<SnapshotInfo>();
  for (  Snapshot e : snapshots.values()) {
    SnapshotInfo info=checkSnapshotIsComplete(e.getTxnId(),e);
    if (m_replayAgent.getInstanceId() != null && info != null && !m_replayAgent.getInstanceId().equals(info.instanceId)) {
      m_snapshotErrLogStr.append("\nRejected snapshot ").append(info.nonce).append(" due to mismatching instance IDs.").append(" Command log ID: ").append(m_replayAgent.getInstanceId().serializeToJSONObject().toString()).append(" Snapshot ID: ").append(info.instanceId.serializeToJSONObject().toString());
      continue;
    }
    if (info != null) {
      final Map<Integer,Long> cmdlogmap=m_replayAgent.getMaxLastSeenTxnByPartition();
      final Map<Integer,Long> snapmap=info.partitionToTxnId;
      if (cmdlogmap != null) {
        for (        Integer cmdpart : cmdlogmap.keySet()) {
          Long snaptxnId=snapmap.get(cmdpart);
          if (snaptxnId == null) {
            m_snapshotErrLogStr.append("\nRejected snapshot ").append(info.nonce).append(" due to missing partition: ").append(cmdpart);
            info=null;
            break;
          }
 else           if (snaptxnId < cmdlogmap.get(cmdpart)) {
            m_snapshotErrLogStr.append("\nRejected snapshot ").append(info.nonce).append(" because it does not overlap the command log").append(" for partition: ").append(cmdpart).append(" command log txn ID: ").append(cmdlogmap.get(cmdpart)).append(" snapshot txn ID: ").append(snaptxnId);
            info=null;
            break;
          }
        }
      }
    }
    if (info != null) {
      snapshotInfos.add(info);
    }
  }
  LOG.debug("Gathered " + snapshotInfos.size() + " snapshot information");
  sendLocalRestoreInformation(maxLastSeenTxn,snapshotInfos);
  SnapshotInfo infoWithMinHostId=getRestorePlan();
  if (m_action.doesRecover()) {
    if (infoWithMinHostId != null) {
      m_replayAgent.generateReplayPlan(infoWithMinHostId.newPartitionCount,m_isLeader);
    }
  }
  m_planned=true;
  return infoWithMinHostId;
}
