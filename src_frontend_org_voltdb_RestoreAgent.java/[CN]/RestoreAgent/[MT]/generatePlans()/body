{
  Map<String,Snapshot> snapshots=new HashMap<String,SnapshotUtil.Snapshot>();
  if (m_action.doesRecover()) {
    snapshots=getSnapshots();
  }
  final Long maxLastSeenTxn=m_replayAgent.getMaxLastSeenTxn();
  Set<SnapshotInfo> snapshotInfos=new HashSet<SnapshotInfo>();
  for (  Snapshot e : snapshots.values()) {
    if (!VoltDB.instance().isIV2Enabled()) {
      if (maxLastSeenTxn != null && e.getTxnId() < maxLastSeenTxn) {
        continue;
      }
    }
    SnapshotInfo info=checkSnapshotIsComplete(e.getTxnId(),e);
    if (m_replayAgent.getInstanceId() != null && info != null && !m_replayAgent.getInstanceId().equals(info.instanceId)) {
      LOG.debug("Rejecting snapshot due to mismatching instance IDs.");
      LOG.debug("Command log ID: " + m_replayAgent.getInstanceId().serializeToJSONObject().toString());
      LOG.debug("Snapshot ID: " + info.instanceId.serializeToJSONObject().toString());
      continue;
    }
    if (VoltDB.instance().isIV2Enabled() && info != null) {
      final Map<Integer,Long> cmdlogmap=m_replayAgent.getMaxLastSeenTxnByPartition();
      final Map<Integer,Long> snapmap=info.partitionToTxnId;
      if (cmdlogmap != null) {
        if (snapmap == null || cmdlogmap.size() != snapmap.size()) {
          LOG.debug("Rejecting snapshot due to mismatching partition count (THIS IS BOGUS)");
          LOG.debug("command log count: " + cmdlogmap.size() + ", snapshot count: "+ snapmap.size());
          info=null;
        }
 else {
          for (          Integer cmdpart : cmdlogmap.keySet()) {
            Long snaptxnId=snapmap.get(cmdpart);
            if (snaptxnId == null) {
              info=null;
              LOG.debug("Rejecting snapshot due to missing partition: " + cmdpart);
              break;
            }
 else             if (snaptxnId < cmdlogmap.get(cmdpart)) {
              LOG.debug("Rejecting snapshot because it does not overlap the command log");
              LOG.debug("for partition: " + cmdpart);
              LOG.debug("command log txn ID: " + cmdlogmap.get(cmdpart));
              LOG.debug("snapshot txn ID: " + snaptxnId);
              info=null;
              break;
            }
          }
        }
      }
    }
    if (info != null) {
      snapshotInfos.add(info);
    }
  }
  LOG.debug("Gathered " + snapshotInfos.size() + " snapshot information");
  sendLocalRestoreInformation(maxLastSeenTxn,snapshotInfos);
  SnapshotInfo infoWithMinHostId=getRestorePlan();
  final int newPartitionCount=(infoWithMinHostId == null ? 0 : infoWithMinHostId.newPartitionCount);
  final int expectedPartitionCount=Math.max(m_allPartitions.length,newPartitionCount);
  if (m_action.doesRecover()) {
    m_replayAgent.generateReplayPlan(expectedPartitionCount);
  }
  m_planned=true;
  return infoWithMinHostId;
}
