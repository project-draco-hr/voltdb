{
  List<String> children=waitOnVoltZK_restore();
  if (m_action == StartAction.CREATE) {
    return null;
  }
  Map<String,Set<SnapshotInfo>> snapshotFragments=new HashMap<String,Set<SnapshotInfo>>();
  Long clStartTxnId=deserializeRestoreInformation(children,snapshotFragments);
  if (clStartTxnId != null && clStartTxnId == Long.MIN_VALUE) {
    snapshotFragments.clear();
  }
  LOG.debug("There are " + snapshotFragments.size() + " restore candidate snapshots available in the cluster");
  HashMap<String,Map<String,Set<Integer>>> snapshotTablePartitions=new HashMap<String,Map<String,Set<Integer>>>();
  Iterator<Entry<String,Set<SnapshotInfo>>> it=snapshotFragments.entrySet().iterator();
  SnapshotInfo newest=null;
  while (it.hasNext()) {
    Entry<String,Set<SnapshotInfo>> e=it.next();
    Set<String> fileTables=new HashSet<String>();
    Set<String> digestTables=null;
    String nonce=e.getKey();
    Map<String,Set<Integer>> tablePartitions=snapshotTablePartitions.get(nonce);
    if (tablePartitions == null) {
      tablePartitions=new HashMap<String,Set<Integer>>();
      snapshotTablePartitions.put(nonce,tablePartitions);
    }
    int totalPartitions=-1;
    boolean inconsistent=false;
    Set<SnapshotInfo> fragments=e.getValue();
    for (    SnapshotInfo s : fragments) {
      LOG.debug("SnapshotInfo " + s.nonce + " claims digest tables: "+ s.digestTables);
      LOG.debug("SnapshotInfo " + s.nonce + " claims files for tables: "+ s.fileTables);
      if (digestTables == null) {
        digestTables=new HashSet<String>(s.digestTables);
      }
 else       if (!digestTables.equals(s.digestTables)) {
        m_snapshotLogStr.append("\nRejected snapshot ").append(s.nonce).append(" due to disagreement in digest table list.  Got ").append(s.digestTables).append(", expecting ").append(digestTables);
        inconsistent=true;
        break;
      }
      fileTables.addAll(s.fileTables);
      if (totalPartitions == -1) {
        totalPartitions=s.partitionCount;
      }
 else       if (totalPartitions != s.partitionCount) {
        m_snapshotLogStr.append("\nRejected snapshot ").append(s.nonce).append(" due to partition count mismatch. Got ").append(s.partitionCount).append(", expecting ").append(totalPartitions);
        inconsistent=true;
        break;
      }
      for (      Entry<String,Set<Integer>> entry : s.partitions.entrySet()) {
        Set<Integer> partitions=tablePartitions.get(entry.getKey());
        if (partitions == null) {
          tablePartitions.put(entry.getKey(),entry.getValue());
        }
 else {
          partitions.addAll(entry.getValue());
        }
      }
      if (inconsistent) {
        break;
      }
    }
    if (!fileTables.equals(digestTables)) {
      m_snapshotLogStr.append("\nRejected snapshot ").append(nonce).append(" because there were not table files for all tables in the digest.  Expected ").append(digestTables).append(", but only found table data for ").append(fileTables);
      inconsistent=true;
    }
    for (    Set<Integer> partitions : tablePartitions.values()) {
      if (partitions.size() != totalPartitions) {
        m_snapshotLogStr.append("\nRejected snapshot ").append(nonce).append(" due to missing partitions. Got ").append(partitions.size()).append(", expecting ").append(totalPartitions);
        inconsistent=true;
      }
    }
    if (inconsistent) {
      it.remove();
    }
 else {
      SnapshotInfo current=consolidateSnapshotInfos(fragments);
      if (newest == null || current.isNewerThan(newest)) {
        newest=current;
      }
    }
  }
  if ((clStartTxnId != null && clStartTxnId != Long.MIN_VALUE && snapshotFragments.size() == 0) || newest == null) {
    if (m_snapshotLogStr.length() > 0) {
      LOG.error(m_snapshotLogStr.toString());
    }
    throw new RuntimeException("No viable snapshots to restore");
  }
  if (snapshotFragments.isEmpty()) {
    return null;
  }
 else {
    return newest;
  }
}
