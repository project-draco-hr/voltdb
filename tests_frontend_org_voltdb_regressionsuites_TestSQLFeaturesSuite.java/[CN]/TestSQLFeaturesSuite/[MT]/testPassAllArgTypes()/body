{
  byte b=100;
  byte bArray[]=new byte[]{100,101,102};
  short s=32000;
  short sArray[]=new short[]{32000,32001,32002};
  int i=2147483640;
  int iArray[]=new int[]{2147483640,2147483641,2147483642};
  long l=Long.MAX_VALUE - 10;
  long lArray[]=new long[]{Long.MAX_VALUE - 10,Long.MAX_VALUE - 9,Long.MAX_VALUE - 8};
  String str="foo";
  byte bString[]="bar".getBytes("UTF-8");
  TimestampType tst=new TimestampType(PassAllArgTypes.MILLISECONDS_SINCE_EPOCH_TEST_VALUE * 1000);
  java.util.Date utild=new java.util.Date(PassAllArgTypes.MILLISECONDS_SINCE_EPOCH_TEST_VALUE);
  java.sql.Date sqld=new java.sql.Date(PassAllArgTypes.MILLISECONDS_SINCE_EPOCH_TEST_VALUE);
  java.sql.Timestamp ts=new java.sql.Timestamp(PassAllArgTypes.MILLISECONDS_SINCE_EPOCH_TEST_VALUE);
  Client client=getClient();
  try {
    ClientResponse cr=client.callProcedure("PassAllArgTypes",b,bArray,s,sArray,i,iArray,l,lArray,str,bString,tst,utild,sqld,ts);
    assert(cr.getStatus() == ClientResponse.SUCCESS);
    VoltTable[] result=cr.getResults();
    assert(result.length == 4);
    VoltTable vt=result[0];
    assert(vt.getRowCount() == 1);
    VoltTableRow row=vt.fetchRow(0);
    assertEquals(row.getLong("b"),b);
    byte[] gotArray=row.getVarbinary("bArray");
    assertEquals(gotArray.length,bArray.length);
    for (int j=0; j < gotArray.length; j++) {
      assertEquals(gotArray[j],bArray[j]);
    }
    assertEquals(gotArray.length,bArray.length);
    assertEquals(row.getLong("s"),s);
    assertEquals(row.getLong("i"),i);
    assertEquals(row.getLong("l"),l);
    assertEquals(row.getString("str"),str);
    byte[] gotString=row.getVarbinary("bString");
    assertEquals(gotString.length,bString.length);
    for (int j=0; j < gotString.length; j++) {
      assertEquals(gotString[j],bString[j]);
    }
    String tsColName;
    int tsColIndex;
    tsColName="tst";
    assertEquals(row.getTimestampAsLong(tsColName),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColName),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColName),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColName),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColName),utild);
    tsColIndex=vt.getColumnIndex(tsColName);
    assertEquals(row.getTimestampAsLong(tsColIndex),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColIndex),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColIndex),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColIndex),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColIndex),utild);
    tsColName="sqld";
    assertEquals(row.getTimestampAsLong(tsColName),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColName),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColName),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColName),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColName),utild);
    tsColIndex=vt.getColumnIndex(tsColName);
    assertEquals(row.getTimestampAsLong(tsColIndex),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColIndex),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColIndex),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColIndex),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColIndex),utild);
    tsColName="utild";
    assertEquals(row.getTimestampAsLong(tsColName),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColName),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColName),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColName),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColName),utild);
    tsColIndex=vt.getColumnIndex(tsColName);
    assertEquals(row.getTimestampAsLong(tsColIndex),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColIndex),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColIndex),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColIndex),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColIndex),utild);
    tsColName="ts";
    assertEquals(row.getTimestampAsLong(tsColName),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColName),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColName),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColName),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColName),utild);
    tsColIndex=vt.getColumnIndex(tsColName);
    assertEquals(row.getTimestampAsLong(tsColIndex),tst.getTime());
    assertEquals(row.getTimestampAsTimestamp(tsColIndex),tst);
    assertEquals(row.getTimestampAsSqlTimestamp(tsColIndex),ts);
    assertEquals(row.getTimestampAsSqlDate(tsColIndex),sqld);
    assertEquals(row.getTimestampAsUtilDate(tsColIndex),utild);
    vt=result[1];
    assert(vt.getRowCount() == sArray.length);
    for (int j=0; j < sArray.length; j++) {
      assertEquals(vt.fetchRow(j).getLong("sArray"),sArray[j]);
    }
    vt=result[2];
    assert(vt.getRowCount() == iArray.length);
    for (int j=0; j < iArray.length; j++) {
      assertEquals(vt.fetchRow(j).getLong("iArray"),iArray[j]);
    }
    vt=result[3];
    assert(vt.getRowCount() == lArray.length);
    for (int j=0; j < lArray.length; j++) {
      assertEquals(vt.fetchRow(j).getLong("lArray"),lArray[j]);
    }
  }
 catch (  Exception e) {
    fail("An argument value was mishandled in PassAllArgTypes");
  }
  java.sql.Timestamp ts_nano=new java.sql.Timestamp(PassAllArgTypes.MILLISECONDS_SINCE_EPOCH_TEST_VALUE);
  assertEquals(ts,ts_nano);
  assertEquals(1000000,ts_nano.getNanos());
  ts_nano.setNanos(ts_nano.getNanos() + 1001);
  boolean caught;
  try {
    caught=false;
    client.callProcedure("PassAllArgTypes",b,bArray,s,sArray,i,iArray,l,lArray,str,bString,ts_nano,utild,sqld,ts);
  }
 catch (  RuntimeException e) {
    caught=true;
  }
catch (  Exception e) {
    caught=true;
    fail("Some other exception while testing nano noise in PassAllArgTypes" + e);
  }
  assert(caught);
}
