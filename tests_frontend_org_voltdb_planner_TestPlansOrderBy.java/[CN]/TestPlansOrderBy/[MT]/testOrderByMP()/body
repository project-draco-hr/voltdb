{
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, P_D1 + 1 from P order by P_D1");
    assertEquals(2,frags.size());
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateMergeReceive(pn,false,new int[]{0});
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1 from P order by P_D1");
    assertEquals(2,frags.size());
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateMergeReceive(pn,false,new int[]{0});
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1 from P order by P_D1 limit 3");
    assertEquals(2,frags.size());
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateMergeReceive(pn,true,new int[]{0});
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, P_D2 from P order by P_D2");
    assertEquals(2,frags.size());
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, P_D2  from P order by P_D2 limit 3");
    assertEquals(2,frags.size());
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateMergeReceive(pn,true,new int[]{1});
  }
}
