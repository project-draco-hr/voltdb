{
{
    List<AbstractPlanNode> frags=compileToFragments("select P1_D0, max(P1_D2) from P1 group by P1_D0 order by P1_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateMergeReceive(pn,false,new int[]{0});
    pn=frags.get(1).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D3, P_D1, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D1 order by P_D1, P_D3");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,true,false,false,false);
    pn=frags.get(1).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D3, P_D1, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D1 order by P_D3, P_D1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,true,false,false,false);
    pn=frags.get(1).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
}
