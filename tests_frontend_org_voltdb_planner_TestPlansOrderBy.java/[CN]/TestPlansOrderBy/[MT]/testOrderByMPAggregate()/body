{
{
    List<AbstractPlanNode> frags=compileToFragments("Select * from V_P1 ORDER BY V_G1, V_G2");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, max(P_D2) from P group by P_D1 order by P_D1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D0, max(P_D2) from P group by P_D0 order by P_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P1_D0, max(P1_D2) from P1 group by P1_D0 order by P1_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P1_D1, max(P1_D2) from P1 group by P1_D1 order by P1_D1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, max(P_D2) from P group by P_D1, P_D0 order by P_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, max(P_D2) from P group by P_D1 order by max(P_D2)");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D0, max(P_D2) from P group by P_D0 order by P_D0");
  }
}
