{
{
    List<AbstractPlanNode> frags=compileToFragments("Select * from V_P1 ORDER BY V_G1, V_G2");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,true,false,false,false);
  }
{
    List<AbstractPlanNode> frags=compileToFragments("Select V_G1, sum(V_CNT), max(v_sum_age) from V_P1_ABS GROUP BY V_G1 ORDER BY V_G1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, max(P_D2) from P where P_D1 > 0 group by P_D1 order by P_D1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,true,false,false,false);
    pn=frags.get(1).getChild(0);
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() == null);
    ;
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, P_D2, max(P_D2) from P group by P_D1, P_D2 order by P_D1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,false,true,false,false);
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, max(P_D2) from P group by P_D1 order by max(P_D2)");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, sum(P_D1), sum(P_D1)+1 from P group by P_D1 order by P_D1 limit 2");
    AbstractPlanNode pn=frags.get(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select max(P_D1) from P order by max(P_D1)");
    AbstractPlanNode pn=frags.get(0).getChild(0);
    assertEquals(PlanNodeType.AGGREGATE,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select max(P_D2), P_D0 from P group by P_D0  order by P_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,false,false,false,false);
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P1_D0, max(P1_D2) from P1 group by P1_D0 order by P1_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select max(P_D2), P_D1 from P group by P_D1, P_D0 order by P_D0");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,false,false,false,false);
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D1, P_D3, max (P_D0) from p where P_D3 = 0 group by P_D1, P_D3 order by P_D3, P_D1;");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D3, P_D1, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D1 order by P_D3, P_D1");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    assertEquals(PlanNodeType.ORDERBY,pn.getPlanNodeType());
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D3, P_D2, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D2 order by P_D3, P_D2");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,true,false,false,false);
  }
{
    List<AbstractPlanNode> frags=compileToFragments("select P_D3, P_D2, P_D0, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D2, P_D0 order by P_D3, P_D2");
    AbstractPlanNode pn=frags.get(0).getChild(0).getChild(0);
    validateAggregatedMergeReceive(pn,false,false,false,false);
  }
}
