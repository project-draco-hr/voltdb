{
  Set<Integer> dependencyIds=new HashSet<Integer>();
  VoltTable results[]=new VoltTable[1];
  for (int ii=0; ii < pfs.length - 1; ii++) {
    SynthesizedPlanFragment pf=pfs[ii];
    dependencyIds.add(pf.outputDepId);
    log.trace("Sending fragment " + pf.fragmentId + " dependency "+ pf.outputDepId+ " from "+ CoreUtils.hsIdToString(m.getHSId())+ "-"+ CoreUtils.hsIdToString(m_site.getCorrespondingSiteId())+ " to "+ CoreUtils.hsIdToString(pf.siteId));
    FragmentTaskMessage ftm=FragmentTaskMessage.createWithOneFragment(0,m.getHSId(),0,0,false,fragIdToHash(pf.fragmentId),pf.outputDepId,pf.parameters,false,m_runner.getTxnState().isForReplay());
    m.send(pf.siteId,ftm);
  }
  Map<Integer,List<VoltTable>> receivedDependencyIds=new HashMap<Integer,List<VoltTable>>();
  while (true) {
    VoltMessage vm=m.recvBlocking(1000);
    if (vm == null)     continue;
    if (vm instanceof FragmentTaskMessage) {
      FragmentTaskMessage ftm=(FragmentTaskMessage)vm;
      DependencyPair dp=m_runner.executeSysProcPlanFragment(m_runner.getTxnState(),null,hashToFragId(ftm.getPlanHash(0)),ftm.getParameterSetForFragment(0));
      FragmentResponseMessage frm=new FragmentResponseMessage(ftm,m.getHSId());
      frm.addDependency(dp.depId,dp.dependency);
      m.send(ftm.getCoordinatorHSId(),frm);
      if (!m_unexpectedDependencies.isEmpty()) {
        for (        Integer dependencyId : dependencyIds) {
          if (m_unexpectedDependencies.containsKey(dependencyId)) {
            receivedDependencyIds.put(dependencyId,m_unexpectedDependencies.remove(dependencyId));
          }
        }
        if (receivedDependencyIds.size() == dependencyIds.size() && receivedDependencyIds.keySet().equals(dependencyIds)) {
          break;
        }
      }
    }
 else     if (vm instanceof FragmentResponseMessage) {
      FragmentResponseMessage frm=(FragmentResponseMessage)vm;
      final int dependencyId=frm.getTableDependencyIdAtIndex(0);
      if (dependencyIds.contains(dependencyId)) {
        receivedDependencyIds.put(dependencyId,Arrays.asList(new VoltTable[]{frm.getTableAtIndex(0)}));
        log.trace("Received dependency at " + CoreUtils.hsIdToString(m.getHSId()) + "-"+ CoreUtils.hsIdToString(m_site.getCorrespondingSiteId())+ " from "+ CoreUtils.hsIdToString(frm.m_sourceHSId)+ " have "+ receivedDependencyIds.size()+ " "+ receivedDependencyIds.keySet()+ " and need "+ dependencyIds.size()+ " "+ dependencyIds);
        if (receivedDependencyIds.size() == dependencyIds.size() && receivedDependencyIds.keySet().equals(dependencyIds)) {
          break;
        }
      }
 else {
        if (m_unexpectedDependencies.put(dependencyId,Arrays.asList(new VoltTable[]{frm.getTableAtIndex(0)})) != null) {
          VoltDB.crashGlobalVoltDB("Received a duplicate dependency",true,null);
        }
      }
    }
  }
  results[0]=m_runner.executeSysProcPlanFragment(m_runner.getTxnState(),receivedDependencyIds,pfs[pfs.length - 1].fragmentId,pfs[pfs.length - 1].parameters).dependency;
  return results;
}
