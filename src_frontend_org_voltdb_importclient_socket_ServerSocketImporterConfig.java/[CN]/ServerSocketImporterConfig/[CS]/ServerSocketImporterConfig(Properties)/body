{
  Properties propsCopy=(Properties)props.clone();
  m_procedure=(String)propsCopy.get("procedure");
  if (m_procedure == null || m_procedure.trim().length() == 0) {
    throw new IllegalArgumentException("Missing procedure.");
  }
  String portStr=(String)propsCopy.get("port");
  try {
    m_port=Integer.parseInt(portStr);
    if (m_port <= 0) {
      throw new NumberFormatException();
    }
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException("Invalid port specification: " + portStr);
  }
  try {
    m_serverSocket=new ServerSocket(m_port);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Error starting socket importer listener on port: " + m_port,e);
  }
  try {
    m_resourceID=new URI(SOCKET_IMPORTER_URI_SCHEME,portStr,null);
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(e);
  }
  String formatter=props.getProperty(ImportDataProcessor.IMPORT_FORMATTER,CSV_FORMATTER_NAME).trim().toLowerCase();
  if (!CSV_FORMATTER_NAME.equals(formatter) && !TSV_FORMATTER_NAME.equals(formatter)) {
    throw new RuntimeException("Invalid formatter: " + formatter);
  }
  m_separator=CSV_FORMATTER_NAME.equals(formatter) ? CSVParser.DEFAULT_SEPARATOR : '\t';
}
