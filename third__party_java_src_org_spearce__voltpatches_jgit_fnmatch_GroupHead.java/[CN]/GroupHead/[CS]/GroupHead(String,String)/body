{
  super(false);
  this.characterClasses=new ArrayList<CharacterPattern>();
  this.inverse=pattern.startsWith("!");
  if (inverse) {
    pattern=pattern.substring(1);
  }
  final Matcher matcher=REGEX_PATTERN.matcher(pattern);
  while (matcher.find()) {
    final String characterClass=matcher.group(0);
    if (characterClass.length() == 3 && characterClass.charAt(1) == '-') {
      final char start=characterClass.charAt(0);
      final char end=characterClass.charAt(2);
      characterClasses.add(new CharacterRange(start,end));
    }
 else     if (characterClass.equals("[:alnum:]")) {
      characterClasses.add(LetterPattern.INSTANCE);
      characterClasses.add(DigitPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:alpha:]")) {
      characterClasses.add(LetterPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:blank:]")) {
      characterClasses.add(new OneCharacterPattern(' '));
      characterClasses.add(new OneCharacterPattern('\t'));
    }
 else     if (characterClass.equals("[:cntrl:]")) {
      characterClasses.add(new CharacterRange('\u0000','\u001F'));
      characterClasses.add(new OneCharacterPattern('\u007F'));
    }
 else     if (characterClass.equals("[:digit:]")) {
      characterClasses.add(DigitPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:graph:]")) {
      characterClasses.add(new CharacterRange('\u0021','\u007E'));
      characterClasses.add(LetterPattern.INSTANCE);
      characterClasses.add(DigitPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:lower:]")) {
      characterClasses.add(LowerPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:print:]")) {
      characterClasses.add(new CharacterRange('\u0020','\u007E'));
      characterClasses.add(LetterPattern.INSTANCE);
      characterClasses.add(DigitPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:punct:]")) {
      characterClasses.add(PunctPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:space:]")) {
      characterClasses.add(WhitespacePattern.INSTANCE);
    }
 else     if (characterClass.equals("[:upper:]")) {
      characterClasses.add(UpperPattern.INSTANCE);
    }
 else     if (characterClass.equals("[:xdigit:]")) {
      characterClasses.add(new CharacterRange('0','9'));
      characterClasses.add(new CharacterRange('a','f'));
      characterClasses.add(new CharacterRange('A','F'));
    }
 else     if (characterClass.equals("[:word:]")) {
      characterClasses.add(new OneCharacterPattern('_'));
      characterClasses.add(LetterPattern.INSTANCE);
      characterClasses.add(DigitPattern.INSTANCE);
    }
 else {
      final String message=String.format("The character class %s is not supported.",characterClass);
      throw new InvalidPatternException(message,wholePattern);
    }
    pattern=matcher.replaceFirst("");
    matcher.reset(pattern);
  }
  for (int i=0; i < pattern.length(); i++) {
    final char c=pattern.charAt(i);
    characterClasses.add(new OneCharacterPattern(c));
  }
}
