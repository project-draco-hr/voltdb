{
  Context retval=new Context();
  VoltProjectBuilder builder=getBuilderForTest();
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("rejoin.jar"),1,2,1,9998,false);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("rejoin.xml"));
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=Configuration.getPathToCatalogForTest("rejoin.jar");
  config.m_pathToDeployment=Configuration.getPathToCatalogForTest("rejoin.xml");
  config.m_adminPort=9998;
  config.m_isRejoinTest=true;
  retval.localServer=new ServerThread(config);
  InMemoryJarfile jarFile=new InMemoryJarfile(Configuration.getPathToCatalogForTest("rejoin.jar"));
  retval.catalogCRC=jarFile.getCRC();
  HostMessenger.Config config2=new HostMessenger.Config();
  config2.internalPort++;
  config2.zkInterface="127.0.0.1:2182";
  HostMessenger host2=new HostMessenger(config2);
  retval.localServer.start();
  while (VoltDB.instance().getHostMessenger() != null) {
    Thread.sleep(1);
  }
  Thread.sleep(200);
  host2.start();
  host2.waitForGroupJoin(2);
  MailboxPublisher publisher=new MailboxPublisher(VoltZK.mailboxes + "/1");
  Mailbox mbox=host2.createMailbox();
  Mailbox mbox2=host2.createMailbox();
  publisher.registerMailbox(MailboxType.ExecutionSite,new MailboxNodeContent(mbox.getHSId(),0));
  publisher.registerMailbox(MailboxType.Initiator,new MailboxNodeContent(mbox2.getHSId(),0));
  publisher.publish(host2.getZK());
  VoltZK.createPersistentZKNodes(host2.getZK());
  host2.getZK().create(VoltZK.cluster_metadata + "/" + host2.getHostId(),"{ interfaces : [ \"localhost\"], clientPort : 23, adminPort : 43, httpPort : 32 }".getBytes("UTF-8"),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  host2.waitForAllHostsToBeReady(2);
  HostMessenger host1=VoltDB.instance().getHostMessenger();
  host2.closeForeignHostSocket(host1.getHostId());
  Thread.sleep(50);
  host2.shutdown();
  Thread.sleep(50);
  for (int i=0; host1.countForeignHosts() > 0; i++) {
    if (i > 10)     fail();
    Thread.sleep(50);
  }
  assertEquals(0,host1.countForeignHosts());
  return retval;
}
