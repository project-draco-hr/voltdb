{
  List<TupleValueExpression> predicate_tves=ExpressionUtil.getTupleValueExpressions(m_predicate);
  for (  TupleValueExpression tve : predicate_tves) {
    tve.setColumnIndexUsingSchema(m_tableSchema);
  }
  ProjectionPlanNode proj=(ProjectionPlanNode)getInlinePlanNode(PlanNodeType.PROJECTION);
  if (proj != null) {
    proj.resolveColumnIndexesUsingSchema(m_tableSchema);
    m_outputSchema=proj.getOutputSchema().clone();
  }
 else {
    m_outputSchema=m_preAggOutputSchema;
    for (    SchemaColumn col : m_outputSchema.getColumns()) {
      AbstractExpression colExpr=col.getExpression();
      assert(colExpr instanceof TupleValueExpression);
      TupleValueExpression tve=(TupleValueExpression)colExpr;
      tve.setColumnIndexUsingSchema(m_tableSchema);
    }
    m_outputSchema.sortByTveIndex();
  }
  LimitPlanNode limit=(LimitPlanNode)getInlinePlanNode(PlanNodeType.LIMIT);
  if (limit != null) {
    limit.m_outputSchema=m_outputSchema.clone();
    limit.m_hasSignificantOutputSchema=false;
  }
  resolveSubqueryColumnIndexes();
  AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(this);
  if (aggNode != null) {
    aggNode.resolveColumnIndexesUsingSchema(m_outputSchema);
    m_outputSchema=aggNode.getOutputSchema().copyAndReplaceWithTVE();
    m_hasSignificantOutputSchema=true;
  }
}
