{
  List<TupleValueExpression> predicate_tves=ExpressionUtil.getTupleValueExpressions(m_predicate);
  for (  TupleValueExpression tve : predicate_tves) {
    int index=tve.resolveColumnIndexesUsingSchema(m_tableSchema);
    tve.setColumnIndex(index);
  }
  ProjectionPlanNode proj=(ProjectionPlanNode)getInlinePlanNode(PlanNodeType.PROJECTION);
  if (proj != null) {
    proj.resolveColumnIndexesUsingSchema(m_tableSchema);
    m_outputSchema=proj.getOutputSchema().clone();
    m_hasSignificantOutputSchema=false;
  }
 else {
    for (    SchemaColumn col : m_outputSchema.getColumns()) {
      assert(col.getExpression() instanceof TupleValueExpression);
      TupleValueExpression tve=(TupleValueExpression)col.getExpression();
      int index=tve.resolveColumnIndexesUsingSchema(m_tableSchema);
      tve.setColumnIndex(index);
    }
    m_outputSchema.sortByTveIndex();
  }
  LimitPlanNode limit=(LimitPlanNode)getInlinePlanNode(PlanNodeType.LIMIT);
  if (limit != null) {
    limit.m_outputSchema=m_outputSchema.clone();
    limit.m_hasSignificantOutputSchema=false;
  }
}
