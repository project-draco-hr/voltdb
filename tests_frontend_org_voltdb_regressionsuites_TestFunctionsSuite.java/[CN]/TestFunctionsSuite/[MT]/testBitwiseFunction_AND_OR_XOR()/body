{
  bitwiseFunctionChecker(1,1,3);
  bitwiseFunctionChecker(2,3,1);
  bitwiseFunctionChecker(3,-3,1);
  bitwiseFunctionChecker(4,1,-3);
  bitwiseFunctionChecker(5,Long.MAX_VALUE,Long.MIN_VALUE + 10);
  bitwiseFunctionChecker(6,Long.MIN_VALUE + 10,Long.MAX_VALUE);
  bitwiseFunctionChecker(7,-100,Long.MIN_VALUE + 10);
  bitwiseFunctionChecker(8,Long.MIN_VALUE + 10,-100);
  VoltTable vt;
  Client client=getClient();
  long in, pk, bignum;
  String sql;
  try {
    sql="select bitand(bignum, 9223372036854775809) from NUMBER_TYPES;";
    vt=client.callProcedure("@AdHoc",sql).getResults()[0];
    fail();
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("numeric value out of range"));
  }
  if (isHSQL()) {
    return;
  }
  bitwiseFunctionChecker(21,Long.MAX_VALUE,Long.MIN_VALUE);
  bitwiseFunctionChecker(22,Long.MIN_VALUE,Long.MAX_VALUE);
  pk=100;
  bignum=Long.MIN_VALUE;
  in=Long.MAX_VALUE;
  client.callProcedure("NUMBER_TYPES.insert",pk,1,1,null,1.0,1.0);
  vt=client.callProcedure("BITWISE_AND_OR_XOR",in,in,in,pk).getResults()[0];
  validateRowOfLongs(vt,new long[]{bignum & in,bignum | in,bignum ^ in});
  pk=101;
  bignum=Long.MAX_VALUE;
  in=Long.MIN_VALUE;
  client.callProcedure("NUMBER_TYPES.insert",pk,1,1,bignum,1.0,1.0);
  vt=client.callProcedure("BITWISE_AND_OR_XOR",null,null,null,pk).getResults()[0];
  validateRowOfLongs(vt,new long[]{bignum & in,bignum | in,bignum ^ in});
}
