{
  System.out.println("STARTING testAbs");
  Client client=getClient();
  initialLoad(client,"P1");
  ClientResponse cr=null;
  VoltTable r=null;
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(ID) > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  cr=client.callProcedure("WHERE_ABS");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  try {
    cr=client.callProcedure("WHERE_ABSFF");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    assertEquals(5,r.asScalarLong());
  }
 catch (  ProcCallException hsqlFailed) {
    String msg=hsqlFailed.getMessage();
    assertTrue(msg.matches(".*ExpectedProcedureException.*HSQLDB.*"));
  }
  cr=client.callProcedure("WHERE_ABSIF");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  try {
    cr=client.callProcedure("WHERE_ABSFI");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    assertEquals(5,r.asScalarLong());
  }
 catch (  ProcCallException hsqlFailed) {
    String msg=hsqlFailed.getMessage();
    assertTrue(msg.matches(".*ExpectedProcedureException.*HSQLDB.*"));
  }
  try {
    cr=client.callProcedure("WHERE_ABSWEAK");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    assertEquals(5,r.asScalarLong());
  }
 catch (  ProcCallException hsqlFailed) {
    String msg=hsqlFailed.getMessage();
    assertTrue(msg.matches(".*ExpectedProcedureException.*HSQLDB.*"));
  }
  cr=client.callProcedure("DISPLAY_ABS");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  cr=client.callProcedure("ORDER_ABS");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  long value=r.getLong(0);
  assertEquals(5,value);
  cr=client.callProcedure("AGG_OF_ABS");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  cr=client.callProcedure("INSERT_NULL",99);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",98);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",97);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",96);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",95);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  long resultA;
  long resultB;
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where NUM > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(NUM) > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(0-NUM) > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not NUM > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(0-NUM) > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(NUM) > 9");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ID = -2 - NUM");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(ID) = 2 + NUM");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(NUM) = (2 - ID)");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ID < 0");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(ID) = (0 - ID)");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ID = (0 - ABS(ID))");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  boolean caught=false;
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(DESC) > 9");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(DESC) > 'ABC'");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
  cr=client.callProcedure("@AdHoc","insert into R1 values (1, null, null, null, null)");
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","insert into R1 values (-1, null, null, null, null)");
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("violation of constraint") != -1);
    caught=true;
  }
  assertEquals(!isHSQL(),caught);
}
