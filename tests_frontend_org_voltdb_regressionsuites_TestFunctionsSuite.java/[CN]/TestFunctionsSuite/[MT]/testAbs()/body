{
  System.out.println("STARTING testAbs");
  Client client=getClient();
  ProcedureCallback callback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        throw new RuntimeException("Failed with response: " + clientResponse.getStatusString());
      }
    }
  }
;
  for (int id=7; id < 15; id++) {
    client.callProcedure(callback,"P1.insert",-id,"X" + String.valueOf(id),10,1.1);
    client.drain();
  }
  ClientResponse cr=null;
  VoltTable r=null;
  cr=client.callProcedure("WHERE_ABS");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  assertTrue(r.asScalarLong() == 5);
  try {
    cr=client.callProcedure("WHERE_ABSFF");
    assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
    r=cr.getResults()[0];
    assertTrue(r.asScalarLong() == 5);
  }
 catch (  ProcCallException hsqlFailed) {
    String msg=hsqlFailed.getMessage();
    assertTrue(msg.matches(".*ExpectedProcedureException.*HSQLDB.*"));
  }
  cr=client.callProcedure("WHERE_ABSIF");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  assertTrue(r.asScalarLong() == 5);
  try {
    cr=client.callProcedure("WHERE_ABSFI");
    assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
    r=cr.getResults()[0];
    assertTrue(r.asScalarLong() == 5);
  }
 catch (  ProcCallException hsqlFailed) {
    String msg=hsqlFailed.getMessage();
    assertTrue(msg.matches(".*ExpectedProcedureException.*HSQLDB.*"));
  }
  try {
    cr=client.callProcedure("WHERE_ABSWEAK");
    assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
    r=cr.getResults()[0];
    assertTrue(r.asScalarLong() == 5);
  }
 catch (  ProcCallException hsqlFailed) {
    String msg=hsqlFailed.getMessage();
    assertTrue(msg.matches(".*ExpectedProcedureException.*HSQLDB.*"));
  }
  cr=client.callProcedure("DISPLAY_ABS");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  assertTrue(r.asScalarLong() == 5);
  cr=client.callProcedure("ORDER_ABS");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  r.advanceRow();
  long value=r.getLong(0);
  assertTrue(value == 5);
  cr=client.callProcedure("AGG_OF_ABS");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  assertTrue(r.asScalarLong() == 5);
  cr=client.callProcedure("INSERT_NULL",99);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("INSERT_NULL",98);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("INSERT_NULL",97);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("INSERT_NULL",96);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("INSERT_NULL",95);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  long resultA;
  long resultB;
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where NUM > 9");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(NUM) > 9");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertTrue(resultA == resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where ABS(0-NUM) > 9");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertTrue(resultA == resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not NUM > 9");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(0-NUM) > 9");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertTrue(resultA == resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(NUM) > 9");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertTrue(resultA == resultB);
  boolean caught=false;
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(DESC) > 9");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not ABS(DESC) > 'ABC'");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
}
