{
  System.out.println("STARTING testNumericExpressionIndex");
  Client client=getClient();
  initialLoad(client,"R1");
  ClientResponse cr=null;
  VoltTable result=null;
  cr=client.callProcedure("@AdHoc","select ID from R1 where ABS(ID) > 9 order by NUM, ID");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(5,result.getRowCount());
  VoltTable r;
  long resultA;
  long resultB;
  cr=client.callProcedure("@AdHoc","select count(*) from R1 where (ID+ID) / 6 = -3");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from R1 where ID / 3 = -3");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from R1 where (ID+ID) / 6 = -2");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from R1 where ID / 3 = -2");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from R1 where (ID+ID) / 4 = -3");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from R1 where ID / 2 = -3");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
}
