{
  VoltServerConfig config=null;
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestFunctionsSuite.class);
  boolean success;
  VoltProjectBuilder project=new VoltProjectBuilder();
  final String literalSchema="CREATE TABLE P1 ( " + "ID INTEGER DEFAULT '0' NOT NULL, " + "DESC VARCHAR(300), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PAST TIMESTAMP DEFAULT NULL, "+ "PRIMARY KEY (ID) ); "+ "CREATE INDEX P1_ABS_NUM ON P1 ( ABS(NUM) ); "+ "CREATE INDEX P1_ABS_ID_PLUS_NUM ON P1 ( ABS(ID) + NUM ); "+ "CREATE INDEX P1_SUBSTRING_DESC ON P1 ( SUBSTRING(DESC FROM 1 FOR 2) ); "+ "CREATE INDEX P1_SUBSTRING_WITH_COL_DESC ON P1 ( SUBSTRING(DESC FROM 1 FOR 2), DESC ); "+ "CREATE INDEX P1_NUM_EXPR_WITH_STRING_COL ON P1 ( ABS(ID), DESC ); "+ "CREATE INDEX P1_MIXED_TYPE_EXPRS1 ON P1 ( ABS(ID+2), SUBSTRING(DESC FROM 1 FOR 2) ); "+ "CREATE INDEX P1_MIXED_TYPE_EXPRS2 ON P1 ( SUBSTRING(DESC FROM 1 FOR 2), ABS(ID+2) ); "+ "CREATE TABLE R1 ( "+ "ID INTEGER DEFAULT '0' NOT NULL, "+ "DESC VARCHAR(300), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PAST TIMESTAMP DEFAULT NULL, "+ "PRIMARY KEY (ID) ); "+ "CREATE UNIQUE INDEX R1_ABS_ID_DESC ON R1 ( ABS(ID), DESC ); "+ "CREATE INDEX R1_ABS_ID_SCALED ON R1 ( ID / 3 ); "+ "CREATE TABLE NUMBER_TYPES ( "+ "INTEGERNUM INTEGER DEFAULT '0' NOT NULL, "+ "TINYNUM TINYINT, "+ "SMALLNUM SMALLINT, "+ "BIGNUM BIGINT, "+ "FLOATNUM FLOAT, "+ "DECIMALNUM DECIMAL, "+ "PRIMARY KEY (INTEGERNUM) );"+ "";
  try {
    project.addLiteralSchema(literalSchema);
  }
 catch (  IOException e) {
    assertFalse(true);
  }
  project.addPartitionInfo("P1","ID");
  project.addStmtProcedure("WHERE_ABS","select count(*) from P1 where ABS(ID) > 9");
  project.addStmtProcedure("WHERE_ABSFF","select count(*) from P1 where ABS(ID - 0.4) > 9.5");
  project.addStmtProcedure("WHERE_ABSIF","select count(*) from P1 where ABS(ID) > 9.5");
  project.addStmtProcedure("WHERE_ABSFI","select count(*) from P1 where ABS(ID + 0.4) > 9");
  project.addStmtProcedure("WHERE_ABSWEAK","select count(*) from P1 where ABS(ID - 0.4) > ABS(9.5)");
  project.addStmtProcedure("DISPLAY_ABS","select ABS(ID)-2 from P1 where ID >= -7");
  project.addStmtProcedure("ORDER_ABS","select ID+12 from P1 order by ABS(ID)");
  project.addStmtProcedure("AGG_OF_ABS","select MIN(ABS(ID)-2) from P1");
  project.addStmtProcedure("DISPLAY_CEILING","select CEILING(INTEGERNUM), CEILING(TINYNUM), CEILING(SMALLNUM), CEILING(BIGNUM), CEILING(FLOATNUM), CEILING(DECIMALNUM) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_CEILING_INTEGER","select INTEGERNUM from NUMBER_TYPES order by CEILING(INTEGERNUM), INTEGERNUM");
  project.addStmtProcedure("ORDER_CEILING_TINY","select INTEGERNUM from NUMBER_TYPES order by CEILING(TINYNUM), TINYNUM");
  project.addStmtProcedure("ORDER_CEILING_SMALL","select INTEGERNUM from NUMBER_TYPES order by CEILING(SMALLNUM), SMALLNUM");
  project.addStmtProcedure("ORDER_CEILING_BIG","select INTEGERNUM from NUMBER_TYPES order by CEILING(BIGNUM), BIGNUM");
  project.addStmtProcedure("ORDER_CEILING_FLOAT","select INTEGERNUM from NUMBER_TYPES order by CEILING(FLOATNUM), FLOATNUM");
  project.addStmtProcedure("ORDER_CEILING_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by CEILING(DECIMALNUM), DECIMALNUM");
  project.addStmtProcedure("WHERE_CEILING_INTEGER","select count(*) from NUMBER_TYPES where CEILING(INTEGERNUM) = ?");
  project.addStmtProcedure("WHERE_CEILING_TINY","select count(*) from NUMBER_TYPES where CEILING(TINYNUM) = ?");
  project.addStmtProcedure("WHERE_CEILING_SMALL","select count(*) from NUMBER_TYPES where CEILING(SMALLNUM) = ?");
  project.addStmtProcedure("WHERE_CEILING_BIG","select count(*) from NUMBER_TYPES where CEILING(BIGNUM) = ?");
  project.addStmtProcedure("WHERE_CEILING_FLOAT","select count(*) from NUMBER_TYPES where CEILING(FLOATNUM) = ?");
  project.addStmtProcedure("WHERE_CEILING_DECIMAL","select count(*) from NUMBER_TYPES where CEILING(DECIMALNUM) = ?");
  project.addStmtProcedure("DISPLAY_EXP","select EXP(INTEGERNUM), EXP(TINYNUM), EXP(SMALLNUM), EXP(BIGNUM), EXP(FLOATNUM), EXP(DECIMALNUM) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_EXP_INTEGER","select INTEGERNUM, EXP(INTEGERNUM) from NUMBER_TYPES order by EXP(INTEGERNUM)");
  project.addStmtProcedure("ORDER_EXP_TINY","select INTEGERNUM, EXP(TINYNUM) from NUMBER_TYPES order by EXP(TINYNUM)");
  project.addStmtProcedure("ORDER_EXP_SMALL","select INTEGERNUM, EXP(SMALLNUM) from NUMBER_TYPES order by EXP(SMALLNUM)");
  project.addStmtProcedure("ORDER_EXP_BIG","select INTEGERNUM, EXP(BIGNUM) from NUMBER_TYPES order by EXP(BIGNUM)");
  project.addStmtProcedure("ORDER_EXP_FLOAT","select INTEGERNUM, EXP(FLOATNUM) from NUMBER_TYPES order by EXP(FLOATNUM)");
  project.addStmtProcedure("ORDER_EXP_DECIMAL","select INTEGERNUM, EXP(DECIMALNUM) from NUMBER_TYPES order by EXP(DECIMALNUM)");
  project.addStmtProcedure("WHERE_EXP_INTEGER","select count(*) from NUMBER_TYPES where EXP(INTEGERNUM) = ?");
  project.addStmtProcedure("WHERE_EXP_TINY","select count(*) from NUMBER_TYPES where EXP(TINYNUM) = ?");
  project.addStmtProcedure("WHERE_EXP_SMALL","select count(*) from NUMBER_TYPES where EXP(SMALLNUM) = ?");
  project.addStmtProcedure("WHERE_EXP_BIG","select count(*) from NUMBER_TYPES where EXP(BIGNUM) = ?");
  project.addStmtProcedure("WHERE_EXP_FLOAT","select count(*) from NUMBER_TYPES where EXP(FLOATNUM) = ?");
  project.addStmtProcedure("WHERE_EXP_DECIMAL","select count(*) from NUMBER_TYPES where EXP(DECIMALNUM) = ?");
  project.addStmtProcedure("DISPLAY_FLOOR","select FLOOR(INTEGERNUM), FLOOR(TINYNUM), FLOOR(SMALLNUM), FLOOR(BIGNUM), FLOOR(FLOATNUM), FLOOR(DECIMALNUM) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_FLOOR_INTEGER","select INTEGERNUM from NUMBER_TYPES order by FLOOR(INTEGERNUM), INTEGERNUM");
  project.addStmtProcedure("ORDER_FLOOR_TINY","select INTEGERNUM from NUMBER_TYPES order by FLOOR(TINYNUM), TINYNUM");
  project.addStmtProcedure("ORDER_FLOOR_SMALL","select INTEGERNUM from NUMBER_TYPES order by FLOOR(SMALLNUM), SMALLNUM");
  project.addStmtProcedure("ORDER_FLOOR_BIG","select INTEGERNUM from NUMBER_TYPES order by FLOOR(BIGNUM), BIGNUM");
  project.addStmtProcedure("ORDER_FLOOR_FLOAT","select INTEGERNUM from NUMBER_TYPES order by FLOOR(FLOATNUM), FLOATNUM");
  project.addStmtProcedure("ORDER_FLOOR_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by FLOOR(DECIMALNUM), DECIMALNUM");
  project.addStmtProcedure("WHERE_FLOOR_INTEGER","select count(*) from NUMBER_TYPES where FLOOR(INTEGERNUM) = ?");
  project.addStmtProcedure("WHERE_FLOOR_TINY","select count(*) from NUMBER_TYPES where FLOOR(TINYNUM) = ?");
  project.addStmtProcedure("WHERE_FLOOR_SMALL","select count(*) from NUMBER_TYPES where FLOOR(SMALLNUM) = ?");
  project.addStmtProcedure("WHERE_FLOOR_BIG","select count(*) from NUMBER_TYPES where FLOOR(BIGNUM) = ?");
  project.addStmtProcedure("WHERE_FLOOR_FLOAT","select count(*) from NUMBER_TYPES where FLOOR(FLOATNUM) = ?");
  project.addStmtProcedure("WHERE_FLOOR_DECIMAL","select count(*) from NUMBER_TYPES where FLOOR(DECIMALNUM) = ?");
  project.addStmtProcedure("DISPLAY_POWER7X","select POWER(7, INTEGERNUM), POWER(7, TINYNUM), POWER(7, SMALLNUM), POWER(7, BIGNUM), POWER(7, FLOATNUM), POWER(7, DECIMALNUM) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_POWER7X_INTEGER","select INTEGERNUM from NUMBER_TYPES order by POWER(7, INTEGERNUM)");
  project.addStmtProcedure("ORDER_POWER7X_TINY","select INTEGERNUM from NUMBER_TYPES order by POWER(7, TINYNUM)");
  project.addStmtProcedure("ORDER_POWER7X_SMALL","select INTEGERNUM from NUMBER_TYPES order by POWER(7, SMALLNUM)");
  project.addStmtProcedure("ORDER_POWER7X_BIG","select INTEGERNUM from NUMBER_TYPES order by POWER(7, BIGNUM)");
  project.addStmtProcedure("ORDER_POWER7X_FLOAT","select INTEGERNUM from NUMBER_TYPES order by POWER(7, FLOATNUM)");
  project.addStmtProcedure("ORDER_POWER7X_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by POWER(7, DECIMALNUM)");
  project.addStmtProcedure("WHERE_POWER7X_INTEGER","select count(*) from NUMBER_TYPES where POWER(7, INTEGERNUM) = ?");
  project.addStmtProcedure("WHERE_POWER7X_TINY","select count(*) from NUMBER_TYPES where POWER(7, TINYNUM) = ?");
  project.addStmtProcedure("WHERE_POWER7X_SMALL","select count(*) from NUMBER_TYPES where POWER(7, SMALLNUM) = ?");
  project.addStmtProcedure("WHERE_POWER7X_BIG","select count(*) from NUMBER_TYPES where POWER(7, BIGNUM) = ?");
  project.addStmtProcedure("WHERE_POWER7X_FLOAT","select count(*) from NUMBER_TYPES where POWER(7, FLOATNUM) = ?");
  project.addStmtProcedure("WHERE_POWER7X_DECIMAL","select count(*) from NUMBER_TYPES where POWER(7, DECIMALNUM) = ?");
  project.addStmtProcedure("DISPLAY_POWER07X","select POWER(0.7, INTEGERNUM), POWER(0.7, TINYNUM), POWER(0.7, SMALLNUM), POWER(0.7, BIGNUM), POWER(0.7, FLOATNUM), POWER(0.7, DECIMALNUM) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_POWER07X_INTEGER","select INTEGERNUM from NUMBER_TYPES order by POWER(0.7, INTEGERNUM)");
  project.addStmtProcedure("ORDER_POWER07X_TINY","select INTEGERNUM from NUMBER_TYPES order by POWER(0.7, TINYNUM)");
  project.addStmtProcedure("ORDER_POWER07X_SMALL","select INTEGERNUM from NUMBER_TYPES order by POWER(0.7, SMALLNUM)");
  project.addStmtProcedure("ORDER_POWER07X_BIG","select INTEGERNUM from NUMBER_TYPES order by POWER(0.7, BIGNUM)");
  project.addStmtProcedure("ORDER_POWER07X_FLOAT","select INTEGERNUM from NUMBER_TYPES order by POWER(0.7, FLOATNUM)");
  project.addStmtProcedure("ORDER_POWER07X_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by POWER(0.7, DECIMALNUM)");
  project.addStmtProcedure("WHERE_POWER07X_INTEGER","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(0.7, INTEGERNUM)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWER07X_TINY","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(0.7, TINYNUM)   ) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWER07X_SMALL","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(0.7, SMALLNUM)  ) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWER07X_BIG","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(0.7, BIGNUM)    ) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWER07X_FLOAT","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(0.7, FLOATNUM)  ) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWER07X_DECIMAL","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(0.7, DECIMALNUM)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("DISPLAY_POWERX7","select POWER(INTEGERNUM, 7), POWER(TINYNUM, 7), POWER(SMALLNUM, 7), POWER(BIGNUM, 7), POWER(FLOATNUM, 7), POWER(DECIMALNUM, 7) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_POWERX7_INTEGER","select INTEGERNUM from NUMBER_TYPES order by POWER(INTEGERNUM, 7)");
  project.addStmtProcedure("ORDER_POWERX7_TINY","select INTEGERNUM from NUMBER_TYPES order by POWER(TINYNUM,    7)");
  project.addStmtProcedure("ORDER_POWERX7_SMALL","select INTEGERNUM from NUMBER_TYPES order by POWER(SMALLNUM,   7)");
  project.addStmtProcedure("ORDER_POWERX7_BIG","select INTEGERNUM from NUMBER_TYPES order by POWER(BIGNUM,     7)");
  project.addStmtProcedure("ORDER_POWERX7_FLOAT","select INTEGERNUM from NUMBER_TYPES order by POWER(FLOATNUM,   7)");
  project.addStmtProcedure("ORDER_POWERX7_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by POWER(DECIMALNUM, 7)");
  project.addStmtProcedure("WHERE_POWERX7_INTEGER","select count(*) from NUMBER_TYPES where POWER(INTEGERNUM, 7) = ?");
  project.addStmtProcedure("WHERE_POWERX7_TINY","select count(*) from NUMBER_TYPES where POWER(TINYNUM,    7) = ?");
  project.addStmtProcedure("WHERE_POWERX7_SMALL","select count(*) from NUMBER_TYPES where POWER(SMALLNUM,   7) = ?");
  project.addStmtProcedure("WHERE_POWERX7_BIG","select count(*) from NUMBER_TYPES where POWER(BIGNUM,     7) = ?");
  project.addStmtProcedure("WHERE_POWERX7_FLOAT","select count(*) from NUMBER_TYPES where POWER(FLOATNUM,   7) = ?");
  project.addStmtProcedure("WHERE_POWERX7_DECIMAL","select count(*) from NUMBER_TYPES where POWER(DECIMALNUM, 7) = ?");
  project.addStmtProcedure("DISPLAY_POWERX07","select POWER(INTEGERNUM, 0.7), POWER(TINYNUM, 0.7), POWER(SMALLNUM, 0.7), POWER(BIGNUM, 0.7), POWER(FLOATNUM, 0.7), POWER(DECIMALNUM, 0.7) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_POWERX07_INTEGER","select INTEGERNUM from NUMBER_TYPES order by POWER(INTEGERNUM, 0.7)");
  project.addStmtProcedure("ORDER_POWERX07_TINY","select INTEGERNUM from NUMBER_TYPES order by POWER(TINYNUM,    0.7)");
  project.addStmtProcedure("ORDER_POWERX07_SMALL","select INTEGERNUM from NUMBER_TYPES order by POWER(SMALLNUM,   0.7)");
  project.addStmtProcedure("ORDER_POWERX07_BIG","select INTEGERNUM from NUMBER_TYPES order by POWER(BIGNUM,     0.7)");
  project.addStmtProcedure("ORDER_POWERX07_FLOAT","select INTEGERNUM from NUMBER_TYPES order by POWER(FLOATNUM,   0.7)");
  project.addStmtProcedure("ORDER_POWERX07_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by POWER(DECIMALNUM, 0.7)");
  project.addStmtProcedure("WHERE_POWERX07_INTEGER","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(INTEGERNUM, 0.7)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWERX07_TINY","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(TINYNUM,    0.7)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWERX07_SMALL","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(SMALLNUM,   0.7)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWERX07_BIG","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(BIGNUM,     0.7)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWERX07_FLOAT","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(FLOATNUM,   0.7)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("WHERE_POWERX07_DECIMAL","select count(*) from NUMBER_TYPES where ((0.0000001+POWER(DECIMALNUM, 0.7)) / (0.0000001+?)) BETWEEN 0.99 and 1.01");
  project.addStmtProcedure("DISPLAY_SQRT","select SQRT(INTEGERNUM), SQRT(TINYNUM), SQRT(SMALLNUM), SQRT(BIGNUM), SQRT(FLOATNUM), SQRT(DECIMALNUM) from NUMBER_TYPES order by INTEGERNUM");
  project.addStmtProcedure("ORDER_SQRT_INTEGER","select INTEGERNUM from NUMBER_TYPES order by SQRT(INTEGERNUM)");
  project.addStmtProcedure("ORDER_SQRT_TINY","select INTEGERNUM from NUMBER_TYPES order by SQRT(TINYNUM)");
  project.addStmtProcedure("ORDER_SQRT_SMALL","select INTEGERNUM from NUMBER_TYPES order by SQRT(SMALLNUM)");
  project.addStmtProcedure("ORDER_SQRT_BIG","select INTEGERNUM from NUMBER_TYPES order by SQRT(BIGNUM)");
  project.addStmtProcedure("ORDER_SQRT_FLOAT","select INTEGERNUM from NUMBER_TYPES order by SQRT(FLOATNUM)");
  project.addStmtProcedure("ORDER_SQRT_DECIMAL","select INTEGERNUM from NUMBER_TYPES order by SQRT(DECIMALNUM)");
  project.addStmtProcedure("WHERE_SQRT_INTEGER","select count(*) from NUMBER_TYPES where SQRT(INTEGERNUM) = ?");
  project.addStmtProcedure("WHERE_SQRT_TINY","select count(*) from NUMBER_TYPES where SQRT(TINYNUM) = ?");
  project.addStmtProcedure("WHERE_SQRT_SMALL","select count(*) from NUMBER_TYPES where SQRT(SMALLNUM) = ?");
  project.addStmtProcedure("WHERE_SQRT_BIG","select count(*) from NUMBER_TYPES where SQRT(TINYNUM) = ?");
  project.addStmtProcedure("WHERE_SQRT_FLOAT","select count(*) from NUMBER_TYPES where SQRT(FLOATNUM) = ?");
  project.addStmtProcedure("WHERE_SQRT_DECIMAL","select count(*) from NUMBER_TYPES where SQRT(DECIMALNUM) = ?");
  project.addStmtProcedure("DISPLAY_SUBSTRING","select SUBSTRING (DESC FROM 2) from P1 where ID = -12");
  project.addStmtProcedure("DISPLAY_SUBSTRING2","select SUBSTRING (DESC FROM 2 FOR 2) from P1 where ID = -12");
  project.addStmtProcedure("ORDER_SUBSTRING","select ID+15 from P1 order by SUBSTRING (DESC FROM 2)");
  project.addStmtProcedure("WHERE_SUBSTRING2","select count(*) from P1 " + "where SUBSTRING (DESC FROM 2) > '12" + paddedToNonInlineLength + "'");
  project.addStmtProcedure("WHERE_SUBSTRING3","select count(*) from P1 " + "where not SUBSTRING (DESC FROM 2 FOR 1) > '13'");
  project.addStmtProcedure("AGG_OF_SUBSTRING","select MIN(SUBSTRING (DESC FROM 2)) from P1 where ID < -7");
  project.addStmtProcedure("AGG_OF_SUBSTRING2","select MIN(SUBSTRING (DESC FROM 2 FOR 2)) from P1 where ID < -7");
  project.addStmtProcedure("PARAM_ABS","select ABS(? + NUM) from P1");
  project.addStmtProcedure("LEFT","select id, LEFT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("RIGHT","select id, RIGHT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("SPACE","select id, SPACE(?) from P1 where id = ?");
  project.addStmtProcedure("REPEAT","select id, REPEAT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("CONCAT","select id, CONCAT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("ConcatOpt","select id, DESC || ? from P1 where id = ?");
  project.addStmtProcedure("INSERT_NULL","insert into P1 values (?, null, null, null, null)");
  config=new LocalCluster("fixedsql-onesite.jar",1,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  config=new LocalCluster("fixedsql-hsql.jar",1,1,0,BackendTarget.HSQLDB_BACKEND);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  return builder;
}
