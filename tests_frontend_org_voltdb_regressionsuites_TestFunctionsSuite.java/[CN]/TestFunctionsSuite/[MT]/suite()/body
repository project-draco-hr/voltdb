{
  VoltServerConfig config=null;
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestFunctionsSuite.class);
  boolean success;
  VoltProjectBuilder project=new VoltProjectBuilder();
  final String literalSchema="CREATE TABLE P1 ( " + "ID INTEGER DEFAULT '0' NOT NULL, " + "DESC VARCHAR(300), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PAST TIMESTAMP DEFAULT NULL, "+ "PRIMARY KEY (ID) ); "+ "CREATE INDEX P1_ABS_NUM ON P1 ( ABS(NUM) ); "+ "CREATE INDEX P1_ABS_ID_PLUS_NUM ON P1 ( ABS(ID) + NUM ); "+ "CREATE TABLE R1 ( "+ "ID INTEGER DEFAULT '0' NOT NULL, "+ "DESC VARCHAR(300), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PAST TIMESTAMP DEFAULT NULL, "+ "PRIMARY KEY (ID) ); "+ "CREATE UNIQUE INDEX R1_ABS_ID ON R1 ( ABS(ID) ); "+ "CREATE INDEX R1_ABS_ID_SCALED ON R1 ( ID / 3 ); "+ "";
  try {
    project.addLiteralSchema(literalSchema);
  }
 catch (  IOException e) {
    assertFalse(true);
  }
  project.addPartitionInfo("P1","ID");
  project.addStmtProcedure("WHERE_ABS","select count(*) from P1 where ABS(ID) > 9");
  project.addStmtProcedure("WHERE_ABSFF","select count(*) from P1 where ABS(ID - 0.4) > 9.5");
  project.addStmtProcedure("WHERE_ABSIF","select count(*) from P1 where ABS(ID) > 9.5");
  project.addStmtProcedure("WHERE_ABSFI","select count(*) from P1 where ABS(ID + 0.4) > 9");
  project.addStmtProcedure("WHERE_ABSWEAK","select count(*) from P1 where ABS(ID - 0.4) > ABS(9.5)");
  project.addStmtProcedure("DISPLAY_ABS","select ABS(ID)-2 from P1 where ID >= -7");
  project.addStmtProcedure("ORDER_ABS","select ID+12 from P1 order by ABS(ID)");
  project.addStmtProcedure("AGG_OF_ABS","select MIN(ABS(ID)-2) from P1");
  project.addStmtProcedure("WHERE_SUBSTRING2","select count(*) from P1 where SUBSTRING (DESC FROM 2) > '12'");
  project.addStmtProcedure("WHERE_SUBSTRING3","select count(*) from P1 where not SUBSTRING (DESC FROM 2 FOR 1) > '13'");
  project.addStmtProcedure("DISPLAY_SUBSTRING","select SUBSTRING (DESC FROM 2) from P1 where ID = -12");
  project.addStmtProcedure("ORDER_SUBSTRING","select ID+15 from P1 order by SUBSTRING (DESC FROM 2)");
  project.addStmtProcedure("AGG_OF_SUBSTRING","select MIN(SUBSTRING (DESC FROM 2)) from P1 where ID < -7");
  project.addStmtProcedure("PARAM_ABS","select ABS(? + NUM) from P1");
  project.addStmtProcedure("LEFT","select id, LEFT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("RIGHT","select id, RIGHT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("SPACE","select id, SPACE(?) from P1 where id = ?");
  project.addStmtProcedure("REPEAT","select id, REPEAT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("CONCAT","select id, CONCAT(DESC,?) from P1 where id = ?");
  project.addStmtProcedure("ConcatOpt","select id, DESC || ? from P1 where id = ?");
  project.addStmtProcedure("INSERT_NULL","insert into P1 values (?, null, null, null, null)");
  config=new LocalCluster("fixedsql-onesite.jar",1,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  config=new LocalCluster("fixedsql-hsql.jar",1,1,0,BackendTarget.HSQLDB_BACKEND);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  return builder;
}
