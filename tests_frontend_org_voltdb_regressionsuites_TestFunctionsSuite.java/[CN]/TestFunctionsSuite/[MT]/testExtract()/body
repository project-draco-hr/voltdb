{
  System.out.println("STARTING testExtract");
  Client client=getClient();
  ProcedureCallback callback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        throw new RuntimeException("Failed with response: " + clientResponse.getStatusString());
      }
    }
  }
;
  client.callProcedure(callback,"P1.insert",0,"X0",10,1.1,new Timestamp(1000000000000L));
  client.drain();
  ClientResponse cr=null;
  VoltTable r=null;
  long result;
  cr=client.callProcedure("@AdHoc","select " + "EXTRACT(YEAR FROM PAST), EXTRACT(MONTH FROM PAST), EXTRACT(DAY FROM PAST), " + "EXTRACT(DAY_OF_WEEK FROM PAST), EXTRACT(DAY_OF_YEAR FROM PAST), "+ "EXTRACT(QUARTER FROM PAST), EXTRACT(HOUR FROM PAST), EXTRACT(MINUTE FROM PAST), EXTRACT(SECOND FROM PAST) "+ "from P1;");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  int columnIndex=0;
  final int EXPECTED_YEAR=2001;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  final int EXPECTED_MONTH=9;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  final int EXPECTED_DAY=9;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  final int EXPECTED_DOW=1;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  final int EXPECTED_DOY=252;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  final int EXPECTED_QUARTER=3;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  final int EXPECTED_HOUR=1;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  final int EXPECTED_MINUTE=46;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  final BigDecimal EXPECTED_SECONDS=new BigDecimal("40.000000000000");
  BigDecimal decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
}
