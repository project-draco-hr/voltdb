{
  System.out.println("STARTING testExtract");
  Client client=getClient();
  ClientResponse cr=null;
  VoltTable r=null;
  long result;
  int columnIndex=0;
  cr=client.callProcedure("P1.insert",1,"X0",10,1.1,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  int EXPECTED_YEAR=2001;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  int EXPECTED_MONTH=9;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  int EXPECTED_DAY=9;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  int EXPECTED_DOW=1;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  int EXPECTED_DOY=252;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  int EXPECTED_QUARTER=3;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  int EXPECTED_HOUR=1;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  int EXPECTED_MINUTE=46;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  BigDecimal EXPECTED_SECONDS=new BigDecimal("40.000000000000");
  BigDecimal decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
  cr=client.callProcedure("P1.insert",2,"X0",10,1.1,new Timestamp(-666430077000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  EXPECTED_YEAR=1948;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  EXPECTED_MONTH=11;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  EXPECTED_DAY=18;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  EXPECTED_DOW=5;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  EXPECTED_DOY=323;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  EXPECTED_QUARTER=4;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  EXPECTED_HOUR=16;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  EXPECTED_MINUTE=32;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  EXPECTED_SECONDS=new BigDecimal("3.000000000000");
  decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
  cr=client.callProcedure("P1.insert",3,"X0",10,1.1,new Timestamp(-9829676252000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  EXPECTED_YEAR=1658;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  EXPECTED_MONTH=7;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  EXPECTED_DAY=5;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  EXPECTED_DOW=6;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  EXPECTED_DOY=186;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  EXPECTED_QUARTER=3;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  EXPECTED_HOUR=14;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  EXPECTED_MINUTE=22;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  EXPECTED_SECONDS=new BigDecimal("28.000000000000");
  decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
}
