{
  final String[] fname={"LOG","LN"};
  final double[] resultValues=new double[nonnegnonzeros.length];
  final Set<Double> filters=new HashSet<>();
  for (int kk=0; kk < resultValues.length; ++kk) {
    resultValues[kk]=Math.log(nonnegnonzeros[kk]);
    filters.add(resultValues[kk]);
  }
  final boolean monotonic=true;
  final boolean ascending=true;
  final String expectedFormat="DOUBLE";
  for (  String log : fname) {
    functionTest(log,nonnegnonzeros,resultValues,filters,monotonic,ascending,expectedFormat);
  }
  Client client=getClient();
  client.callProcedure("@AdHoc","INSERT INTO P1 VALUES (5, 'wEoiXIuJwSIKBujWv', -405636, 1.38145922788945552107e-01, NULL)");
  client.callProcedure("@AdHoc","INSERT INTO P1 VALUES (2, 'wEoiXIuJwSIKBujWv', -29914, 8.98500019539639316335e-01, NULL)");
  client.callProcedure("@AdHoc","INSERT INTO P1 VALUES (4, 'WCfDDvZBPoqhanfGN', -1309657, 9.34160160574919795629e-01, NULL)");
  String sql="select * from P1 where ID > LOG(1)";
  client.callProcedure("@AdHoc",sql);
  try {
    sql="select LOG(0) from P1";
    client.callProcedure("@AdHoc",sql);
    fail("Expected for Log(zero) result: invalid result value (-inf)");
  }
 catch (  ProcCallException excp) {
    if (isHSQL()) {
      assertTrue(excp.getMessage().contains("invalid argument for natural logarithm"));
    }
 else {
      assertTrue(excp.getMessage().contains("Invalid result value (-inf)"));
    }
  }
  try {
    sql="select LOG(-10) from P1";
    client.callProcedure("@AdHoc",sql);
    fail("Expected resultfor Log(negative #): invalid result value (nan)");
  }
 catch (  ProcCallException excp) {
    if (isHSQL()) {
      assertTrue(excp.getMessage().contains("invalid argument for natural logarithm"));
    }
 else {
      assertTrue(excp.getMessage().contains("Invalid result value (nan)"));
    }
  }
}
