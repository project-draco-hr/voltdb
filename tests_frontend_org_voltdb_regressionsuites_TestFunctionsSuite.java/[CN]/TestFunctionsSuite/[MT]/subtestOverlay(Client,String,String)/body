{
  ClientResponse cr;
  VoltTable result;
  String overlayFailed=overlayProc + " got a wrong answer";
  String overlayFullLengthFailed=overlayFullLengthProc + " got a wrong answer";
  cr=client.callProcedure("@AdHoc","TRUNCATE TABLE P1;");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("P1.insert",1,"Xin@VoltDB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=client.callProcedure(overlayProc,"Jia",4,7,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"XinJia",result.getString(1));
  result=client.callProcedure(overlayProc,"Jia_",4,1,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"XinJia_VoltDB",result.getString(1));
  try {
    result=client.callProcedure(overlayProc,"Jia",4.2,7,1).getResults()[0];
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("The provided value: (4.2) of type: java.lang.Double " + "is not a match or is out of range for the target parameter type: long"));
  }
  result=client.callProcedure(overlayProc,null,4,7,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,null,result.getString(1));
  result=client.callProcedure(overlayProc,"Jia",4,null,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,null,result.getString(1));
  result=client.callProcedure(overlayProc,"Jia",null,7,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,null,result.getString(1));
  result=client.callProcedure(overlayFullLengthProc,"Jia",4,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFullLengthFailed,"XinJialtDB",result.getString(1));
  result=client.callProcedure(overlayFullLengthProc,"J",4,1).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFullLengthFailed,"XinJVoltDB",result.getString(1));
  cr=client.callProcedure("P1.insert",2,"??????@VoltDB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=client.callProcedure(overlayProc,"XinJia",1,2,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"XinJia@VoltDB",result.getString(1));
  result=client.callProcedure(overlayProc,"XinJia",8,2,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"??????@VoltXinJia",result.getString(1));
  result=client.callProcedure(overlayProc,"XinJia",1,9,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"XinJia",result.getString(1));
  result=client.callProcedure(overlayProc,"XinJia",2,7,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"???XinJiaB",result.getString(1));
  result=client.callProcedure(overlayProc,"XinJia",2,8,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"???XinJia",result.getString(1));
  result=client.callProcedure(overlayFullLengthProc,"_",3,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFullLengthFailed,"??????_VoltDB",result.getString(1));
  result=client.callProcedure(overlayFullLengthProc," at ",2,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFullLengthFailed,"??? at ltDB",result.getString(1));
  result=client.callProcedure(overlayProc,"XinJia",9,1,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"??????@VoltDXinJia",result.getString(1));
  result=client.callProcedure(overlayProc,"??????",9,1,2).getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(overlayFailed,"??????@VoltD??????",result.getString(1));
  if (!isHSQL()) {
    result=client.callProcedure(overlayProc,"XinJia",9,2,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"??????@VoltDXinJia",result.getString(1));
    result=client.callProcedure(overlayProc,"??????",9,2,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"??????@VoltD??????",result.getString(1));
    result=client.callProcedure(overlayProc,"XinJia",10,2,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"??????@VoltDBXinJia",result.getString(1));
    result=client.callProcedure(overlayProc,"??????",10,2,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"??????@VoltDB??????",result.getString(1));
    result=client.callProcedure(overlayProc,"XinJia",100,2,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"??????@VoltDBXinJia",result.getString(1));
    result=client.callProcedure(overlayProc,"XinJia",2,0,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"???XinJia???@VoltDB",result.getString(1));
    result=client.callProcedure(overlayProc,"XinJia",1,10,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"XinJia",result.getString(1));
    result=client.callProcedure(overlayProc,"XinJia",1,100,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"XinJia",result.getString(1));
    result=client.callProcedure(overlayProc,"XinJia",2,100,2).getResults()[0];
    assertTrue(result.advanceRow());
    assertEquals(overlayFailed,"???XinJia",result.getString(1));
    try {
      result=client.callProcedure(overlayProc,"XinJia",-10,2,2).getResults()[0];
      fail();
    }
 catch (    Exception ex) {
      assertTrue(ex.getMessage().contains("data exception -- OVERLAY error, not positive start argument -10"));
    }
    try {
      result=client.callProcedure(overlayProc,"XinJia",0,2,2).getResults()[0];
      fail();
    }
 catch (    Exception ex) {
      assertTrue(ex.getMessage().contains("data exception -- OVERLAY error, not positive start argument 0"));
    }
    try {
      result=client.callProcedure(overlayProc,"XinJia",1,-1,2).getResults()[0];
      fail();
    }
 catch (    Exception ex) {
      assertTrue(ex.getMessage().contains("data exception -- OVERLAY error, negative length argument -1"));
    }
  }
}
