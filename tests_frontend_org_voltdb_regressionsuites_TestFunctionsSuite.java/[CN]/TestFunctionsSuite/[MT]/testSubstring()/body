{
  System.out.println("STARTING testSubstring");
  Client client=getClient();
  initialLoad(client,"P1");
  ClientResponse cr=null;
  VoltTable r=null;
  cr=client.callProcedure("WHERE_SUBSTRING2");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  cr=client.callProcedure("WHERE_SUBSTRING3");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  assertEquals(5,r.asScalarLong());
  cr=client.callProcedure("DISPLAY_SUBSTRING");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  assertEquals("12" + paddedToNonInlineLength,r.getString(0));
  cr=client.callProcedure("DISPLAY_SUBSTRING2");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  assertEquals("12",r.getString(0));
  cr=client.callProcedure("ORDER_SUBSTRING");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  long value=r.getLong(0);
  assertEquals(5,value);
  cr=client.callProcedure("AGG_OF_SUBSTRING");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  assertEquals("10" + paddedToNonInlineLength,r.getString(0));
  cr=client.callProcedure("AGG_OF_SUBSTRING2");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  assertEquals("10",r.getString(0));
  cr=client.callProcedure("INSERT_NULL",99);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",98);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",97);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",96);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("INSERT_NULL",95);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  long resultA;
  long resultB;
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where DESC >= 'X11'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where SUBSTRING (DESC FROM 2) >= '11'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not DESC >= 'X12'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not SUBSTRING( DESC FROM 2) >= '12'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where DESC >= 'X2'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultA=r.asScalarLong();
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where SUBSTRING(DESC FROM 2 FOR 1) >= '2'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  cr=client.callProcedure("@AdHoc","select count(*) from P1 where not SUBSTRING( SUBSTRING (DESC FROM 2) FROM 1 FOR 1) < '2'");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  resultB=r.asScalarLong();
  assertEquals(resultA,resultB);
  boolean caught=false;
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not SUBSTRING( DESC FROM 2) > 9");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not SUBSTRING (1 FROM 2) > 9");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not SUBSTRING (1 FROM DESC) > '9'");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
  caught=false;
  try {
    cr=client.callProcedure("@AdHoc","select count(*) from P1 where not SUBSTRING (DESC FROM DESC) > 'ABC'");
    assertTrue(cr.getStatus() != ClientResponse.SUCCESS);
  }
 catch (  ProcCallException e) {
    String msg=e.getMessage();
    assertTrue(msg.indexOf("incompatible data type") != -1);
    caught=true;
  }
  assertTrue(caught);
}
