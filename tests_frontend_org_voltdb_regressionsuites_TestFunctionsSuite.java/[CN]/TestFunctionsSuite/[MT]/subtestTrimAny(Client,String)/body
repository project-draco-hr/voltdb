{
  ClientResponse cr;
  VoltTable result;
  String trimFailed=trimProc + " got a wrong answer";
  cr=client.callProcedure("@AdHoc","TRUNCATE TABLE P1;");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("P1.insert",1,"  VoltDB   ",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure(trimProc," "," "," ",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(trimFailed,"VoltDB   ",result.getString(1));
  assertEquals(trimFailed,"  VoltDB",result.getString(2));
  assertEquals(trimFailed,"VoltDB",result.getString(3));
  try {
    cr=client.callProcedure(trimProc,"","","",1);
    fail();
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("data exception"));
    assertTrue(ex.getMessage().contains("trim error"));
  }
  cr=client.callProcedure("P1.insert",2,"vVoltDBBB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure(trimProc,"v","B","B",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(trimFailed,"VoltDBBB",result.getString(1));
  assertEquals(trimFailed,"vVoltD",result.getString(2));
  assertEquals(trimFailed,"vVoltD",result.getString(3));
  if (!isHSQL()) {
    cr=client.callProcedure(trimProc,"vV","BB","Vv",2);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals(trimFailed,"oltDBBB",result.getString(1));
    assertEquals(trimFailed,"vVoltDB",result.getString(2));
    assertEquals(trimFailed,"vVoltDBBB",result.getString(3));
  }
  cr=client.callProcedure(trimProc,null,null,null,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(null,result.getString(1));
  assertEquals(null,result.getString(2));
  assertEquals(null,result.getString(3));
  cr=client.callProcedure("P1.insert",3,"???vVoltDBBB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure(trimProc,"???","v","???",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(trimFailed,"vVoltDBBB",result.getString(1));
  assertEquals(trimFailed,"???vVoltDBBB",result.getString(2));
  assertEquals(trimFailed,"vVoltDBBB",result.getString(3));
  if (!isHSQL()) {
    cr=client.callProcedure(trimProc,"???vVoltDBBB","???vVoltDBBB","???vVoltDBBB",3);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals(trimFailed,"",result.getString(1));
    assertEquals(trimFailed,"",result.getString(2));
    assertEquals(trimFailed,"",result.getString(3));
    cr=client.callProcedure(trimProc,"???vVoltDBBB_TEST","???vVoltDBBB???vVoltDBBB","???vVoltDBBBT",3);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals(trimFailed,"???vVoltDBBB",result.getString(1));
    assertEquals(trimFailed,"???vVoltDBBB",result.getString(2));
    assertEquals(trimFailed,"???vVoltDBBB",result.getString(3));
  }
  cr=client.callProcedure("P1.insert",4,"??????vVoltDBBB?????????",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure(trimProc,"???","???","???",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(trimFailed,"??????vVoltDBBB?????????",result.getString(1));
  assertEquals(trimFailed,"??????vVoltDBBB?????????",result.getString(2));
  assertEquals(trimFailed,"??????vVoltDBBB?????????",result.getString(3));
  cr=client.callProcedure(trimProc,"???","???","???",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(trimFailed,"vVoltDBBB?????????",result.getString(1));
  assertEquals(trimFailed,"??????vVoltDBBB",result.getString(2));
  assertEquals(trimFailed,"vVoltDBBB",result.getString(3));
  if (!isHSQL()) {
    cr=client.callProcedure(trimProc,"??????","??????","??????",4);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals(trimFailed,"??????vVoltDBBB?????????",result.getString(1));
    assertEquals(trimFailed,"??????vVoltDBBB?????????",result.getString(2));
    assertEquals(trimFailed,"??????vVoltDBBB?????????",result.getString(3));
    cr=client.callProcedure(trimProc,"??????vV","??????","B?????????",4);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals(trimFailed,"oltDBBB?????????",result.getString(1));
    assertEquals(trimFailed,"??????vVoltDBBB???",result.getString(2));
    assertEquals(trimFailed,"??????vVoltDBB",result.getString(3));
  }
}
