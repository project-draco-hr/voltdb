{
  System.out.println("STARTING test Trim");
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  cr=client.callProcedure("P1.insert",1,"  VoltDB   ",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=client.callProcedure("@AdHoc","select trim(LEADING null from desc) from P1").getResults()[0];
  assertTrue(result.advanceRow());
  assertEquals(null,result.getString(0));
  cr=client.callProcedure("TRIM_SPACE",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("VoltDB   ",result.getString(1));
  assertEquals("VoltDB   ",result.getString(2));
  assertEquals("  VoltDB",result.getString(3));
  assertEquals("  VoltDB",result.getString(4));
  assertEquals("VoltDB",result.getString(5));
  assertEquals("VoltDB",result.getString(6));
  cr=client.callProcedure("TRIM_ANY"," "," "," ",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("VoltDB   ",result.getString(1));
  assertEquals("  VoltDB",result.getString(2));
  assertEquals("VoltDB",result.getString(3));
  cr=client.callProcedure("P1.insert",2,"vVoltDBBB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("TRIM_ANY","v","B","B",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("VoltDBBB",result.getString(1));
  assertEquals("vVoltD",result.getString(2));
  assertEquals("vVoltD",result.getString(3));
  if (!isHSQL()) {
    cr=client.callProcedure("TRIM_ANY","vV","BB","Vv",2);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals("oltDBBB",result.getString(1));
    assertEquals("vVoltDB",result.getString(2));
    assertEquals("vVoltDBBB",result.getString(3));
  }
  cr=client.callProcedure("TRIM_ANY",null,null,null,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(null,result.getString(1));
  assertEquals(null,result.getString(2));
  assertEquals(null,result.getString(3));
  cr=client.callProcedure("P1.insert",3,"???vVoltDBBB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("TRIM_ANY","???","v","???",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("vVoltDBBB",result.getString(1));
  assertEquals("???vVoltDBBB",result.getString(2));
  assertEquals("vVoltDBBB",result.getString(3));
  if (!isHSQL()) {
    cr=client.callProcedure("TRIM_ANY","???vVoltDBBB","???vVoltDBBB","???vVoltDBBB",3);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals("",result.getString(1));
    assertEquals("",result.getString(2));
    assertEquals("",result.getString(3));
    cr=client.callProcedure("TRIM_ANY","???vVoltDBBB_TEST","???vVoltDBBB???vVoltDBBB","???vVoltDBBBT",3);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals("???vVoltDBBB",result.getString(1));
    assertEquals("???vVoltDBBB",result.getString(2));
    assertEquals("???vVoltDBBB",result.getString(3));
  }
  cr=client.callProcedure("P1.insert",4,"??????vVoltDBBB?????????",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("TRIM_ANY","???","???","???",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("??????vVoltDBBB?????????",result.getString(1));
  assertEquals("??????vVoltDBBB?????????",result.getString(2));
  assertEquals("??????vVoltDBBB?????????",result.getString(3));
  cr=client.callProcedure("TRIM_ANY","???","???","???",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("vVoltDBBB?????????",result.getString(1));
  assertEquals("??????vVoltDBBB",result.getString(2));
  assertEquals("vVoltDBBB",result.getString(3));
  if (!isHSQL()) {
    cr=client.callProcedure("TRIM_ANY","??????","??????","??????",4);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals("??????vVoltDBBB?????????",result.getString(1));
    assertEquals("??????vVoltDBBB?????????",result.getString(2));
    assertEquals("??????vVoltDBBB?????????",result.getString(3));
    cr=client.callProcedure("TRIM_ANY","??????vV","??????","B?????????",4);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    assertEquals("oltDBBB?????????",result.getString(1));
    assertEquals("??????vVoltDBBB???",result.getString(2));
    assertEquals("??????vVoltDBB",result.getString(3));
  }
  cr=client.callProcedure("P1.insert",5,"vVoltADBDB",1,1.0,new Timestamp(1000000000000L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
}
