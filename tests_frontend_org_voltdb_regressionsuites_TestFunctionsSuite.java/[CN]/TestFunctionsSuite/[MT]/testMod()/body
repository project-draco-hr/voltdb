{
  System.out.println("STARTING testMod");
  Client client=getClient();
  client.callProcedure("@AdHoc","INSERT INTO R1 VALUES (2, '', -10, 2.3, NULL)");
  validateTableOfScalarLongs(client,"select MOD(25,7) from R1",new long[]{4});
  validateTableOfScalarLongs(client,"select MOD(25,-7) from R1",new long[]{4});
  validateTableOfScalarLongs(client,"select MOD(-25,7) from R1",new long[]{-4});
  validateTableOfScalarLongs(client,"select MOD(-25,-7) from R1",new long[]{-4});
  validateTableOfScalarLongs(client,"select MOD(id,7) from R1",new long[]{2});
  validateTableOfScalarLongs(client,"select MOD(id * 4,id+2) from R1",new long[]{0});
  verifyStmtFails(client,"select MOD(-25,0) from R1","division by zero");
  validateTableOfScalarDecimals(client,"select MOD(CAST(3.0 as decimal), CAST(2.0 as decimal)) from R1",new BigDecimal[]{new BigDecimal("1.000000000000")});
  validateTableOfScalarDecimals(client,"select MOD(CAST(-25.32 as decimal), CAST(ratio as decimal)) from R1",new BigDecimal[]{new BigDecimal("-0.020000000000")});
  verifyStmtFails(client,"select MOD(25.32, 2) from R1","incompatible data type in operation");
  verifyStmtFails(client,"select MOD(2, 25.32) from R1","incompatible data type in operation");
  verifyStmtFails(client,"select MOD('-25.32', 2.5) from R1","incompatible data type in operation");
  verifyStmtFails(client,"select MOD(-25.32, ratio) from R1","incompatible data type in operation");
}
