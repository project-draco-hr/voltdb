{
  Client client=getClient();
  ClientResponse cr=null;
  VoltTable r=null;
  if (!isHSQL()) {
    System.out.println("STARTING test CAST between string and timestamp.");
    String strTime;
    cr=client.callProcedure("R2.insert",1,"2001-09-09 01:46:40.789000",10,1.1,new Timestamp(1000000000789L));
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2001-10-30 21:46:40.000789";
    cr=client.callProcedure("R2.insert",2,strTime,12,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="1601-01-01 00:00:00.000789";
    cr=client.callProcedure("R2.insert",3,strTime,13,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2013-12-31 23:59:59.999999";
    cr=client.callProcedure("R2.insert",4,strTime,14,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2014-07-02";
    cr=client.callProcedure("R2.insert",5,strTime + " 00:00:00.000000",15,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2014-07-03";
    cr=client.callProcedure("R2.insert",6,strTime,16,1.1,strTime + " 00:00:00.000000");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2014-07-04";
    cr=client.callProcedure("R2.insert",7,strTime,17,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    cr=client.callProcedure("@AdHoc","select cast('2014-07-04 00:00:00.000000' as timestamp) from R2 where id = 1;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    r.advanceRow();
    assertEquals(r.getTimestampAsTimestamp(0).toString(),"2014-07-04 00:00:00.000000");
    cr=client.callProcedure("@AdHoc","select cast('2014-07-05' as timestamp) from R2 where id = 1;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    r.advanceRow();
    assertEquals(r.getTimestampAsTimestamp(0).toString(),"2014-07-05 00:00:00.000000");
    cr=client.callProcedure("VERIFY_TIMESTAMP_STRING_EQ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    if (r.getRowCount() != 0) {
      System.out.println("VERIFY_TIMESTAMP_STRING_EQ failed on " + r.getRowCount() + " rows:");
      System.out.println(r.toString());
      fail("VERIFY_TIMESTAMP_STRING_EQ failed on " + r.getRowCount() + " rows");
    }
    cr=client.callProcedure("VERIFY_STRING_TIMESTAMP_EQ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    if (r.getRowCount() != 2) {
      System.out.println("VERIFY_STRING_TIMESTAMP_EQ failed on " + r.getRowCount() + " rows, where only 2 were expected:");
      System.out.println(r.toString());
      fail("VERIFY_TIMESTAMP_STRING_EQ failed on " + r.getRowCount() + " rows, where only 2 were expected:");
    }
    cr=client.callProcedure("DUMP_TIMESTAMP_STRING_PATHS");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    System.out.println(r);
  }
  System.out.println("STARTING test Extract");
  subtestExtract(client,"EXTRACT_TIMESTAMP");
  subtestExtract(client,"ALT_EXTRACT_TIMESTAMP");
}
