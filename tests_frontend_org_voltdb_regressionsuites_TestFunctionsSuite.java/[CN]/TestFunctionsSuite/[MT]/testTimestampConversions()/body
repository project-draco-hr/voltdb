{
  Client client=getClient();
  ClientResponse cr=null;
  VoltTable r=null;
  long result;
  int columnIndex=0;
  if (!isHSQL()) {
    System.out.println("STARTING test CAST between string and timestamp.");
    String strTime;
    cr=client.callProcedure("R2.insert",1,"2001-09-09 01:46:40.789000",10,1.1,new Timestamp(1000000000789L));
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2001-10-30 21:46:40.000789";
    cr=client.callProcedure("R2.insert",2,strTime,12,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="1601-01-01 00:00:00.000789";
    cr=client.callProcedure("R2.insert",3,strTime,13,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2013-12-31 23:59:59.999999";
    cr=client.callProcedure("R2.insert",4,strTime,14,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2014-07-02";
    cr=client.callProcedure("R2.insert",5,strTime + " 00:00:00.000000",15,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2014-07-03";
    cr=client.callProcedure("R2.insert",6,strTime,16,1.1,strTime + " 00:00:00.000000");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    strTime="2014-07-04";
    cr=client.callProcedure("R2.insert",7,strTime,17,1.1,strTime);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    cr=client.callProcedure("@AdHoc","select cast('2014-07-04 00:00:00.000000' as timestamp) from R2 where id = 1;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    r.advanceRow();
    assertEquals(r.getTimestampAsTimestamp(0).toString(),"2014-07-04 00:00:00.000000");
    cr=client.callProcedure("@AdHoc","select cast('2014-07-05' as timestamp) from R2 where id = 1;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    r.advanceRow();
    assertEquals(r.getTimestampAsTimestamp(0).toString(),"2014-07-05 00:00:00.000000");
    cr=client.callProcedure("VERIFY_TIMESTAMP_STRING_EQ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    if (r.getRowCount() != 0) {
      System.out.println("VERIFY_TIMESTAMP_STRING_EQ failed on " + r.getRowCount() + " rows:");
      System.out.println(r.toString());
      fail("VERIFY_TIMESTAMP_STRING_EQ failed on " + r.getRowCount() + " rows");
    }
    cr=client.callProcedure("VERIFY_STRING_TIMESTAMP_EQ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    if (r.getRowCount() != 2) {
      System.out.println("VERIFY_STRING_TIMESTAMP_EQ failed on " + r.getRowCount() + " rows, where only 2 were expected:");
      System.out.println(r.toString());
      fail("VERIFY_TIMESTAMP_STRING_EQ failed on " + r.getRowCount() + " rows, where only 2 were expected:");
    }
    cr=client.callProcedure("DUMP_TIMESTAMP_STRING_PATHS");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    r=cr.getResults()[0];
    System.out.println(r);
  }
  System.out.println("STARTING test Extract");
  cr=client.callProcedure("P1.insert",1,"X0",10,1.1,new Timestamp(1000000000789L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  int EXPECTED_YEAR=2001;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  int EXPECTED_MONTH=9;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  int EXPECTED_DAY=9;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  int EXPECTED_DOW=1;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  int EXPECTED_DOM=EXPECTED_DAY;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOM,result);
  int EXPECTED_DOY=252;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  int EXPECTED_QUARTER=3;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  int EXPECTED_HOUR=1;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  int EXPECTED_MINUTE=46;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  BigDecimal EXPECTED_SECONDS=new BigDecimal("40.789000000000");
  BigDecimal decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
  int EXPECTED_WEEK=36;
  if (isHSQL()) {
    EXPECTED_WEEK=37;
  }
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  int EXPECTED_WEEKDAY=6;
  if (isHSQL()) {
    EXPECTED_WEEKDAY=EXPECTED_DOW;
  }
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEKDAY,result);
  cr=client.callProcedure("P1.insert",2,"X0",10,1.1,new Timestamp(-666430077123L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  EXPECTED_YEAR=1948;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  EXPECTED_MONTH=11;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  EXPECTED_DAY=18;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  EXPECTED_DOW=5;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  EXPECTED_DOM=EXPECTED_DAY;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOM,result);
  EXPECTED_DOY=323;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  EXPECTED_QUARTER=4;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  EXPECTED_HOUR=16;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  EXPECTED_MINUTE=32;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  EXPECTED_SECONDS=new BigDecimal("2.877000000000");
  decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
  EXPECTED_WEEK=47;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  EXPECTED_WEEKDAY=3;
  if (isHSQL()) {
    EXPECTED_WEEKDAY=EXPECTED_DOW;
  }
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEKDAY,result);
  cr=client.callProcedure("P1.insert",3,"X0",10,1.1,new Timestamp(-9829676252456L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  EXPECTED_YEAR=1658;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  EXPECTED_MONTH=7;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  EXPECTED_DAY=5;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  EXPECTED_DOW=6;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  EXPECTED_DOM=EXPECTED_DAY;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOM,result);
  EXPECTED_DOY=186;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  EXPECTED_QUARTER=3;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  EXPECTED_HOUR=14;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  EXPECTED_MINUTE=22;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  EXPECTED_SECONDS=new BigDecimal("27.544000000000");
  decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
  EXPECTED_WEEK=27;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  EXPECTED_WEEKDAY=4;
  if (isHSQL()) {
    EXPECTED_WEEKDAY=EXPECTED_DOW;
  }
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEKDAY,result);
  cr=client.callProcedure("P1.insert",4,"X0",10,1.1,new Timestamp(-425991982877L));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("EXTRACT_TIMESTAMP",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  r.advanceRow();
  columnIndex=0;
  EXPECTED_YEAR=1956;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_YEAR,result);
  EXPECTED_MONTH=7;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MONTH,result);
  EXPECTED_DAY=2;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DAY,result);
  EXPECTED_DOW=2;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOW,result);
  EXPECTED_DOM=EXPECTED_DAY;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOM,result);
  EXPECTED_DOY=184;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_DOY,result);
  EXPECTED_QUARTER=3;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_QUARTER,result);
  EXPECTED_HOUR=12;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_HOUR,result);
  EXPECTED_MINUTE=53;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_MINUTE,result);
  EXPECTED_SECONDS=new BigDecimal("37.123000000000");
  decimalResult=r.getDecimalAsBigDecimal(columnIndex++);
  assertEquals(EXPECTED_SECONDS,decimalResult);
  EXPECTED_WEEK=27;
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEK,result);
  EXPECTED_WEEKDAY=0;
  if (isHSQL()) {
    EXPECTED_WEEKDAY=EXPECTED_DOW;
  }
  result=r.getLong(columnIndex++);
  assertEquals(EXPECTED_WEEKDAY,result);
}
