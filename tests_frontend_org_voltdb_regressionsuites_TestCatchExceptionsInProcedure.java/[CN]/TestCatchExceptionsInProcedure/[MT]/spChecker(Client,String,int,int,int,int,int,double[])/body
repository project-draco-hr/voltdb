{
  VoltTable vt;
  String sql;
  try {
    if (tryCatchContains1BatchSecond == -1) {
      vt=client.callProcedure(proc,0,hasPreviousBatch,tryCatchContains1BatchFirst,hasFollowingBatch,followingBatchHasException).getResults()[0];
    }
 else {
      vt=client.callProcedure(proc,0,hasPreviousBatch,tryCatchContains1BatchFirst,tryCatchContains1BatchSecond,hasFollowingBatch,followingBatchHasException).getResults()[0];
    }
    if (isTrue(followingBatchHasException)) {
      assertTrue(isTrue(hasFollowingBatch));
      fail("Expected failure but succeeded.");
    }
    validateRowOfLongs(vt,new long[]{-1});
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("CONSTRAINT VIOLATION"));
    assertTrue(e.getMessage().contains("3.2"));
    assertTrue(isTrue(hasFollowingBatch) && isTrue(followingBatchHasException));
  }
  sql="select ratio from P1 order by 1; ";
  validateTableColumnOfScalarFloat(client,sql,expected);
  client.callProcedure("@AdHoc","truncate table P1");
}
