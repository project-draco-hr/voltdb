def process_verb_arguments(self, verb, verb_args, verb_opts):
    '\n        Validate the verb arguments. Check that required arguments are present\n        and populate verb_opts attributes with scalar values or lists (for\n        trailing arguments with max_count > 1).\n        '
    args = (copy.copy(verb_args) + verb.command_arguments)
    missing = []
    iarg = 0
    nargs = verb.get_argument_count()
    for a in verb.iter_arguments():
        if ((iarg > len(args)) or ((iarg == len(args)) and (a.min_count > 0))):
            missing.append((a.name, a.help))
        else:
            if ((iarg == (nargs - 1)) and (a.max_count > 1)):
                value = list(args[iarg:])
                if (len(value) < a.min_count):
                    utility.abort(('A minimum of %d %s arguments are required.' % (a.min_count, a.name.upper())))
                if (len(value) > a.max_count):
                    utility.abort(('A maximum of %d %s arguments are allowed.' % (a.max_count, a.name.upper())))
                iarg += len(value)
            else:
                value = args[iarg]
                iarg += 1
            setattr(verb_opts, a.name, value)
    if (iarg < len(args)):
        utility.abort('Extra arguments were provided:', args[iarg:])
    check_missing_items('argument', missing)
