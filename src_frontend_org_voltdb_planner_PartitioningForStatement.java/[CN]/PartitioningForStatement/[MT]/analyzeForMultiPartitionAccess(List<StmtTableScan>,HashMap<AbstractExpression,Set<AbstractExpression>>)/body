{
  TupleValueExpression tokenPartitionKey=null;
  Set<Set<AbstractExpression>> eqSets=new HashSet<Set<AbstractExpression>>();
  int unfilteredPartitionKeyCount=0;
  for (  StmtTableScan tableCache : tableCacheList) {
    if (tableCache.getIsreplicated()) {
      continue;
    }
    String partitionedTableAlias=tableCache.getTableAlias();
    String columnNeedingCoverage=m_partitionColumnByTable.get(partitionedTableAlias);
    boolean unfiltered=true;
    for (    AbstractExpression candidateColumn : valueEquivalence.keySet()) {
      if (!(candidateColumn instanceof TupleValueExpression)) {
        continue;
      }
      TupleValueExpression candidatePartitionKey=(TupleValueExpression)candidateColumn;
      assert(candidatePartitionKey.getTableAlias() != null);
      if (!candidatePartitionKey.getTableAlias().equals(partitionedTableAlias)) {
        continue;
      }
      String candidateColumnName=candidatePartitionKey.getColumnName();
      if (tableCache.getScanType() == StmtTableScan.TABLE_SCAN_TYPE.TARGET_TABLE_SCAN) {
        if (!candidateColumnName.equals(columnNeedingCoverage)) {
          continue;
        }
      }
 else       if (tableCache.getScanType() == StmtTableScan.TABLE_SCAN_TYPE.TEMP_TABLE_SCAN) {
        if (!tableCache.isPartitioningColumn(candidateColumnName)) {
          continue;
        }
      }
 else {
        assert(false);
      }
      unfiltered=false;
      if (tokenPartitionKey == null) {
        tokenPartitionKey=candidatePartitionKey;
      }
      eqSets.add(valueEquivalence.get(candidatePartitionKey));
    }
    if (unfiltered) {
      ++unfilteredPartitionKeyCount;
    }
  }
  m_countOfIndependentlyPartitionedTables=eqSets.size() + unfilteredPartitionKeyCount;
  if ((unfilteredPartitionKeyCount == 0) && (eqSets.size() == 1)) {
    for (    Set<AbstractExpression> partitioningValues : eqSets) {
      for (      AbstractExpression constExpr : partitioningValues) {
        if (constExpr instanceof TupleValueExpression) {
          continue;
        }
        addPartitioningExpression(tokenPartitionKey.getTableName() + '.' + tokenPartitionKey.getColumnName(),constExpr);
        Object partitioningObject=ConstantValueExpression.extractPartitioningValue(tokenPartitionKey.getValueType(),constExpr);
        setInferredValue(partitioningObject);
        break;
      }
    }
  }
  return m_countOfIndependentlyPartitionedTables;
}
