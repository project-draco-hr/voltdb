{
  BigInteger absX=x.abs();
  int exponent=absX.bitLength() - 1;
  if (exponent < Long.SIZE - 1) {
    return x.longValue();
  }
 else   if (exponent > MAX_EXPONENT) {
    return x.signum() * POSITIVE_INFINITY;
  }
  int shift=exponent - SIGNIFICAND_BITS - 1;
  long twiceSignifFloor=absX.shiftRight(shift).longValue();
  long signifFloor=twiceSignifFloor >> 1;
  signifFloor&=SIGNIFICAND_MASK;
  boolean increment=(twiceSignifFloor & 1) != 0 && ((signifFloor & 1) != 0 || absX.getLowestSetBit() < shift);
  long signifRounded=increment ? signifFloor + 1 : signifFloor;
  long bits=(long)((exponent + EXPONENT_BIAS)) << SIGNIFICAND_BITS;
  bits+=signifRounded;
  bits|=x.signum() & SIGN_MASK;
  return longBitsToDouble(bits);
}
