{
  String simpleSchema="create table blah (" + "ival bigint default 0 not null, " + "b varbinary(256) default null, "+ "s varchar(256) default null,"+ "bs varbinary(2) default null,"+ "PRIMARY KEY(ival));\n"+ "create index idx on blah (ival,s);";
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(simpleSchema);
  builder.addPartitionInfo("blah","ival");
  builder.addStmtProcedure("Insert","insert into blah values (?, ?, ?, ?);",null);
  builder.addStmtProcedure("Select","select * from blah;",null);
  builder.addStmtProcedure("Update","update blah set b = ? where ival = ?",null);
  builder.addStmtProcedure("FindString","select * from blah where ival = ? and s = ?",null);
  builder.addStmtProcedure("LiteralUpdate","update blah set b = '0a1A' where ival = 5",null);
  builder.addStmtProcedure("LiteralInsert","insert into blah values (13, 'aabbcc', 'hi', 'aabb');",null);
  builder.addProcedures(VarbinaryStringLookup.class);
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("binarytest.jar"),1,1,0,"localhost");
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("binarytest.xml"));
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=Configuration.getPathToCatalogForTest("binarytest.jar");
  config.m_pathToDeployment=Configuration.getPathToCatalogForTest("binarytest.xml");
  config.m_backend=BackendTarget.NATIVE_EE_JNI;
  ServerThread localServer=new ServerThread(config);
  localServer.start();
  localServer.waitForInitialization();
  Client client=ClientFactory.createClient();
  client.createConnection("localhost");
  ClientResponse cr=client.callProcedure("Insert",5,new byte[]{'a'},"hi",new byte[]{'a'});
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("Insert",9,"aabbccdd","hi","aabb");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("FindString",5,"hi".getBytes("UTF-8"));
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  assertEquals(1,cr.getResults()[0].getRowCount());
  cr=client.callProcedure("VarbinaryStringLookup",5,"hi".getBytes("UTF-8"),"hi");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  assertEquals(1,cr.getResults()[0].getRowCount());
  assertEquals(1,cr.getResults()[1].getRowCount());
  cr=client.callProcedure("LiteralUpdate");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  assertEquals(1,cr.getResults()[0].getRowCount());
  assertEquals(1,cr.getResults()[0].asScalarLong());
  cr=client.callProcedure("Select");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  VoltTable t=cr.getResults()[0];
  assertEquals(2,t.getRowCount());
  t.resetRowPosition();
  t.advanceRow();
  byte[] vb=t.getVarbinary("b");
  assertEquals(2,vb.length);
  assertEquals((byte)10,vb[0]);
  assertEquals((byte)26,vb[1]);
  vb=(byte[])t.get("b",VoltType.VARBINARY);
  assertEquals(2,vb.length);
  assertEquals((byte)10,vb[0]);
  assertEquals((byte)26,vb[1]);
  cr=client.callProcedure("LiteralInsert");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  assertEquals(1,cr.getResults()[0].getRowCount());
  assertEquals(1,cr.getResults()[0].asScalarLong());
  cr=client.callProcedure("@AdHoc","update blah set b = 'Bb01' where ival = 5");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  assertEquals(1,cr.getResults()[0].getRowCount());
  assertEquals(1,cr.getResults()[0].asScalarLong());
  cr=client.callProcedure("@AdHoc","insert into blah values (12, 'aabbcc', 'hi', 'aabb');");
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  assertEquals(1,cr.getResults()[0].getRowCount());
  assertEquals(1,cr.getResults()[0].asScalarLong());
  try {
    cr=client.callProcedure("Insert",6,new byte[]{'a'},"hi",new byte[]{'a','b','c'});
    fail();
  }
 catch (  ProcCallException e) {
  }
  try {
    cr=client.callProcedure("@AdHoc","update blah set b = 'Bb01nt' where ival = 5");
    fail();
  }
 catch (  ProcCallException e) {
  }
  try {
    cr=client.callProcedure("@AdHoc","update blah set b = 'Bb0' where ival = 5");
    fail();
  }
 catch (  ProcCallException e) {
  }
  try {
    cr=client.callProcedure("@AdHoc","update blah set ival = 5 where b = 'Bb01'");
    fail();
  }
 catch (  ProcCallException e) {
  }
  byte[] overlong=new byte[VoltType.MAX_VALUE_LENGTH + 1];
  try {
    cr=client.callProcedure("Insert",6,new byte[]{'a'},"hi",overlong);
    fail();
  }
 catch (  ProcCallException e) {
  }
  VoltDB.instance().shutdown(localServer);
}
