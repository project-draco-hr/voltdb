{
  start=System.currentTimeMillis();
  long insertTimeStart=start;
  long insertTimeEnd;
  final CSVConfig cfg=new CSVConfig();
  cfg.parse(CSVLoaderMT.class.getName(),args);
  config=cfg;
  configuration();
  final Tokenizer tokenizer;
  ICsvListReader listReader=null;
  try {
    if (CSVLoaderMT.standin) {
      tokenizer=new Tokenizer(new BufferedReader(new InputStreamReader(System.in)),csvPreference,config.strictquotes,config.escape,config.columnsizelimit,config.skip);
      listReader=new CsvListReader(tokenizer,csvPreference);
    }
 else {
      tokenizer=new Tokenizer(new FileReader(config.file),csvPreference,config.strictquotes,config.escape,config.columnsizelimit,config.skip);
      listReader=new CsvListReader(tokenizer,csvPreference);
    }
  }
 catch (  FileNotFoundException e) {
    m_log.error("CSV file '" + config.file + "' could not be found.");
    System.exit(-1);
  }
  final String[] serverlist=config.servers.split(",");
  final ClientConfig c_config=new ClientConfig(config.user,config.password);
  c_config.setProcedureCallTimeout(0);
  Client csvClient=null;
  try {
    csvClient=CSVLoaderMT.getClient(c_config,serverlist,config.port);
  }
 catch (  Exception e) {
    m_log.error("Error to connect to the servers:" + config.servers);
    close_cleanup();
    System.exit(-1);
  }
  assert(csvClient != null);
  int partitionedColumnIndex=-1;
  VoltType partitionColumnType=VoltType.NULL;
  try {
    int columnCnt=0;
    VoltTable procInfo;
    boolean isProcExist=false;
    try {
      procInfo=csvClient.callProcedure("@SystemCatalog","PROCEDURECOLUMNS").getResults()[0];
      while (procInfo.advanceRow()) {
        if (insertProcedure.matches((String)procInfo.get("PROCEDURE_NAME",VoltType.STRING))) {
          columnCnt++;
          isProcExist=true;
          String typeStr=(String)procInfo.get("TYPE_NAME",VoltType.STRING);
          typeList.add(VoltType.typeFromString(typeStr));
        }
      }
    }
 catch (    Exception e) {
      m_log.error(e.getMessage(),e);
      close_cleanup();
      System.exit(-1);
    }
    if (isProcExist == false) {
      m_log.error("No matching insert procedure available");
      close_cleanup();
      System.exit(-1);
    }
    try {
      if (isProcedureMp(csvClient)) {
        m_log.warn("Using a multi-partitioned procedure to load data will be slow. " + "If loading a partitioned table, use a single-partitioned procedure " + "for best performance.");
      }
    }
 catch (    Exception e) {
      m_log.fatal(e.getMessage(),e);
      close_cleanup();
      System.exit(-1);
    }
    ArrayList<VoltType> columnTypes=new ArrayList<VoltType>();
    ArrayList<String> colNames=new ArrayList<String>();
    procInfo=csvClient.callProcedure("@SystemCatalog","COLUMNS").getResults()[0];
    while (procInfo.advanceRow()) {
      String table=procInfo.getString("TABLE_NAME");
      if (config.table.equalsIgnoreCase(table)) {
        VoltType vtype=VoltType.typeFromString(procInfo.getString("TYPE_NAME"));
        columnTypes.add(vtype);
        colNames.add(procInfo.getString("COLUMN_NAME"));
        String remarks=procInfo.getString("REMARKS");
        if (remarks != null && remarks.equalsIgnoreCase("PARTITION_COLUMN")) {
          partitionedColumnIndex=(int)procInfo.getLong("ORDINAL_POSITION");
          partitionColumnType=vtype;
          System.out.println("Partition Column Name is: " + procInfo.getString("COLUMN_NAME"));
          System.out.println("Partition Column Type is: " + vtype.toString());
        }
      }
    }
    VoltTable.ColumnInfo colInfo[]=new VoltTable.ColumnInfo[columnTypes.size()];
    for (int i=0; i < columnTypes.size(); i++) {
      VoltType type=columnTypes.get(i);
      String cname=colNames.get(i);
      VoltTable.ColumnInfo ci=new VoltTable.ColumnInfo(cname,type);
      colInfo[i]=ci;
    }
    int numPartitions=-1;
    int sitesPerHost=1;
    int kfactor=0;
    int hostcount=1;
    procInfo=csvClient.callProcedure("@SystemInformation","deployment").getResults()[0];
    while (procInfo.advanceRow()) {
      String prop=procInfo.getString("PROPERTY");
      if (prop != null && prop.equalsIgnoreCase("sitesperhost")) {
        sitesPerHost=Integer.parseInt(procInfo.getString("VALUE"));
      }
      if (prop != null && prop.equalsIgnoreCase("hostcount")) {
        hostcount=Integer.parseInt(procInfo.getString("VALUE"));
      }
      if (prop != null && prop.equalsIgnoreCase("kfactor")) {
        kfactor=Integer.parseInt(procInfo.getString("VALUE"));
      }
    }
    numPartitions=(hostcount * sitesPerHost) / (kfactor + 1);
    System.out.println("Number of Partitions: " + numPartitions);
    System.out.println("Batch Size is: " + config.batch);
    TheHashinator.initialize(LegacyHashinator.class,LegacyHashinator.getConfigureBytes(numPartitions));
    CSVPartitionProcessor.colInfo=colInfo;
    CSVPartitionProcessor.columnTypes=columnTypes;
    CSVPartitionProcessor.insertProcedure=insertProcedure;
    CSVPartitionProcessor.isMP=(partitionedColumnIndex == -1 ? true : false);
    CSVPartitionProcessor.isLoadTable=config.loadTable;
    CSVPartitionProcessor.config=config;
    List<Thread> spawned=new ArrayList<Thread>(numPartitions);
    CSVLineWithMetaData dummy=new CSVLineWithMetaData();
    Map<Integer,BlockingQueue<CSVLineWithMetaData>> lineq=new HashMap<Integer,BlockingQueue<CSVLineWithMetaData>>(numPartitions);
    CountDownLatch pcount=new CountDownLatch(numPartitions);
    List<CSVPartitionProcessor> processors=new ArrayList<CSVPartitionProcessor>(numPartitions);
    for (int i=0; i < numPartitions; i++) {
      ArrayBlockingQueue<CSVLineWithMetaData> q=new ArrayBlockingQueue<CSVLineWithMetaData>((int)config.batch * 2);
      lineq.put(i,q);
      CSVPartitionProcessor pp=new CSVPartitionProcessor();
      processors.add(pp);
      pp.csvClient=csvClient;
      pp.partitionId=i;
      pp.tableName=config.table;
      pp.columnCnt=columnCnt;
      pp.lineq=q;
      pp.dummy=dummy;
      Thread th=new Thread(pp);
      th.setName("PartitionProcessor-" + 0);
      spawned.add(th);
    }
    CSVPartitionProcessor.pcount=pcount;
    CSVFileReader.config=config;
    CSVFileReader.columnCnt=columnCnt;
    CSVFileReader.listReader=listReader;
    CSVFileReader.partitionedColumnIndex=partitionedColumnIndex;
    CSVFileReader.partitionColumnType=partitionColumnType;
    CSVFileReader.tableName=config.table;
    CSVFileReader.typeList=typeList;
    CSVFileReader.csvClient=csvClient;
    CSVFileReader.lineq=lineq;
    CSVFileReader.dummy=dummy;
    CSVFileReader.pcount=pcount;
    CSVFileReader rdr=new CSVFileReader();
    Thread th=new Thread(rdr);
    th.setName("CSVReader");
    th.setDaemon(true);
    th.start();
    for (    Thread th2 : spawned) {
      th2.start();
    }
    th.join();
    long readerTime=0;
    readerTime+=(rdr.parsingTimeEnd - rdr.parsingTimeSt);
    readerTime=readerTime / 1000000;
    for (    Thread th2 : spawned) {
      try {
        th2.join();
      }
 catch (      InterruptedException ex) {
      }
    }
    insertTimeEnd=System.currentTimeMillis();
    csvClient.drain();
    csvClient.close();
    long inCount=0, outCount=0;
    for (    CSVPartitionProcessor pp : processors) {
      inCount+=pp.partitionProcessedCount;
      outCount+=pp.partitionAcknowledgedCount.get();
    }
    m_log.info("Parsing CSV file took " + readerTime + " milliseconds.");
    m_log.info("Inserting Data took " + ((insertTimeEnd - insertTimeStart) - readerTime) + " milliseconds.");
    m_log.info("Inserted " + inCount + " and acknowledged "+ outCount+ " rows (final)");
    produceFiles(rdr,inCount,outCount);
    close_cleanup();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
