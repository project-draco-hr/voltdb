{
  if (!(mvTableScan instanceof StmtTargetTableScan)) {
    return false;
  }
  Table table=((StmtTargetTableScan)mvTableScan).getTargetTable();
  assert(table != null);
  String mvTableName=table.getTypeName();
  Table srcTable=table.getMaterializer();
  if (srcTable == null) {
    return false;
  }
  if (table.getIsreplicated()) {
    return false;
  }
  if (table.getPartitioncolumn() != null) {
    return false;
  }
  m_mvTableScan=mvTableScan;
  Set<String> mvDDLGroupbyColumnNames=new HashSet<String>();
  List<Column> mvColumnArray=CatalogUtil.getSortedCatalogItems(table.getColumns(),"index");
  Set<SchemaColumn> mvDDLGroupbyColumns=new HashSet<SchemaColumn>();
  NodeSchema inlineProjSchema=new NodeSchema();
  for (  SchemaColumn scol : scanColumns) {
    inlineProjSchema.addColumn(scol);
  }
  String mvTableAlias=getMVTableAlias();
  int numOfGroupByColumns;
  MaterializedViewInfo mvInfo=srcTable.getViews().get(mvTableName);
  if (mvInfo != null) {
    String complexGroupbyJson=mvInfo.getGroupbyexpressionsjson();
    if (complexGroupbyJson.length() > 0) {
      List<AbstractExpression> mvComplexGroupbyCols=null;
      try {
        mvComplexGroupbyCols=AbstractExpression.fromJSONArrayString(complexGroupbyJson,null);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      numOfGroupByColumns=mvComplexGroupbyCols.size();
    }
 else {
      numOfGroupByColumns=mvInfo.getGroupbycols().size();
    }
  }
 else {
    MaterializedViewHandlerInfo mvHandlerInfo=table.getMvhandlerinfo().get("mvHandlerInfo");
    numOfGroupByColumns=mvHandlerInfo.getGroupbycolumncount();
  }
  for (int i=0; i < numOfGroupByColumns; i++) {
    Column mvCol=mvColumnArray.get(i);
    String colName=mvCol.getName();
    TupleValueExpression tve=new TupleValueExpression(mvTableName,mvTableAlias,colName,colName,i);
    tve.setTypeSizeBytes(mvCol.getType(),mvCol.getSize(),mvCol.getInbytes());
    tve.setOrigStmtId(mvTableScan.getStatementId());
    mvDDLGroupbyColumnNames.add(colName);
    SchemaColumn scol=new SchemaColumn(mvTableName,mvTableAlias,colName,colName,tve);
    mvDDLGroupbyColumns.add(scol);
    if (!scanColumns.contains(scol)) {
      scanColumns.add(scol);
      inlineProjSchema.addColumn(scol);
    }
  }
  Map<String,ExpressionType> mvColumnReAggType=new HashMap<String,ExpressionType>();
  for (int i=numOfGroupByColumns; i < mvColumnArray.size(); i++) {
    Column mvCol=mvColumnArray.get(i);
    ExpressionType reAggType=ExpressionType.get(mvCol.getAggregatetype());
    if (reAggType == ExpressionType.AGGREGATE_COUNT_STAR || reAggType == ExpressionType.AGGREGATE_COUNT) {
      reAggType=ExpressionType.AGGREGATE_SUM;
    }
    mvColumnReAggType.put(mvCol.getName(),reAggType);
  }
  m_scanInlinedProjectionNode=new ProjectionPlanNode();
  m_scanInlinedProjectionNode.setOutputSchema(inlineProjSchema);
  m_reAggNode=new HashAggregatePlanNode();
  int outputColumnIndex=0;
  NodeSchema aggSchema=new NodeSchema();
  for (  SchemaColumn scol : scanColumns) {
    if (mvDDLGroupbyColumns.contains(scol)) {
      m_reAggNode.addGroupByExpression(scol.getExpression());
    }
 else {
      ExpressionType reAggType=mvColumnReAggType.get(scol.getColumnName());
      assert(reAggType != null);
      AbstractExpression agg_input_expr=scol.getExpression();
      assert(agg_input_expr instanceof TupleValueExpression);
      m_reAggNode.addAggregate(reAggType,false,outputColumnIndex,agg_input_expr);
    }
    aggSchema.addColumn(scol);
    outputColumnIndex++;
  }
  m_reAggNode.setOutputSchema(aggSchema);
  List<TupleValueExpression> needReAggTVEs=new ArrayList<TupleValueExpression>();
  List<AbstractExpression> aggPostExprs=new ArrayList<AbstractExpression>();
  for (int i=numOfGroupByColumns; i < mvColumnArray.size(); i++) {
    Column mvCol=mvColumnArray.get(i);
    String colName=mvCol.getName();
    TupleValueExpression tve=new TupleValueExpression(mvTableName,mvTableAlias,colName,colName);
    tve.setTypeSizeBytes(mvCol.getType(),mvCol.getSize(),mvCol.getInbytes());
    tve.setOrigStmtId(mvTableScan.getStatementId());
    needReAggTVEs.add(tve);
  }
  collectReAggNodePostExpressions(joinTree,needReAggTVEs,aggPostExprs);
  AbstractExpression aggPostExpr=ExpressionUtil.combinePredicates(aggPostExprs);
  m_reAggNode.setPostPredicate(aggPostExpr);
  if (m_edgeCaseQueryNoFixNeeded && edgeCaseQueryNoFixNeeded(mvDDLGroupbyColumnNames,mvColumnReAggType,displayColumns,groupByColumns)) {
    return false;
  }
  m_needed=true;
  return true;
}
