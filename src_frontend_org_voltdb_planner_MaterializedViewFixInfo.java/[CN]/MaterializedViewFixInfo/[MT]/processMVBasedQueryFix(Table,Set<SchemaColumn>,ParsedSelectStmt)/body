{
  String mvTableName=table.getTypeName();
  Table srcTable=table.getMaterializer();
  if (srcTable == null) {
    return false;
  }
  Column partitionCol=srcTable.getPartitioncolumn();
  if (partitionCol == null) {
    return false;
  }
  String partitionColName=partitionCol.getName();
  MaterializedViewInfo mvInfo=srcTable.getViews().get(mvTableName);
  String complexGroupbyJson=mvInfo.getGroupbyexpressionsjson();
  if (complexGroupbyJson.length() > 0) {
    List<AbstractExpression> mvComplexGroupbyCols=null;
    try {
      mvComplexGroupbyCols=AbstractExpression.fromJSONArrayString(complexGroupbyJson);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    m_numOfGroupByColumns=mvComplexGroupbyCols.size();
    for (    AbstractExpression expr : mvComplexGroupbyCols) {
      if (expr instanceof TupleValueExpression) {
        TupleValueExpression tve=(TupleValueExpression)expr;
        if (tve.getColumnName().equals(partitionColName)) {
          return false;
        }
      }
    }
  }
 else {
    CatalogMap<ColumnRef> mvSimpleGroupbyCols=mvInfo.getGroupbycols();
    m_numOfGroupByColumns=mvSimpleGroupbyCols.size();
    for (    ColumnRef colRef : mvSimpleGroupbyCols) {
      if (colRef.getColumn().getName().equals(partitionColName)) {
        return false;
      }
    }
  }
  assert(m_numOfGroupByColumns > 0);
  m_mvTable=table;
  Set<TupleValueExpression> mvDDLGroupbyTVEs=new HashSet<TupleValueExpression>();
  List<Column> mvColumnArray=CatalogUtil.getSortedCatalogItems(table.getColumns(),"index");
  Set<SchemaColumn> mvDDLGroupbyColumns=new HashSet<SchemaColumn>();
  NodeSchema inlineProjSchema=new NodeSchema();
  for (  SchemaColumn scol : scanColumns) {
    inlineProjSchema.addColumn(scol);
  }
  for (int i=0; i < m_numOfGroupByColumns; i++) {
    Column mvCol=mvColumnArray.get(i);
    String colName=mvCol.getName();
    TupleValueExpression tve=new TupleValueExpression();
    tve.setColumnIndex(i);
    tve.setColumnName(colName);
    tve.setTableName(mvTableName);
    tve.setColumnAlias(colName);
    tve.setValueType(VoltType.get((byte)mvCol.getType()));
    tve.setValueSize(mvCol.getSize());
    mvDDLGroupbyTVEs.add(tve);
    SchemaColumn scol=new SchemaColumn(mvTableName,colName,colName,tve);
    mvDDLGroupbyColumns.add(scol);
    if (!scanColumns.contains(scol)) {
      scanColumns.add(scol);
      inlineProjSchema.addColumn(scol);
    }
  }
  Map<String,ExpressionType> mvColumnAggType=new HashMap<String,ExpressionType>();
  Map<String,ExpressionType> mvColumnReAggType=new HashMap<String,ExpressionType>();
  for (int i=m_numOfGroupByColumns; i < mvColumnArray.size(); i++) {
    Column mvCol=mvColumnArray.get(i);
    ExpressionType reAggType=ExpressionType.get(mvCol.getAggregatetype());
    mvColumnAggType.put(mvCol.getName(),reAggType);
    if (reAggType == ExpressionType.AGGREGATE_COUNT_STAR || reAggType == ExpressionType.AGGREGATE_COUNT) {
      reAggType=ExpressionType.AGGREGATE_SUM;
    }
    mvColumnReAggType.put(mvCol.getName(),reAggType);
  }
  m_scanInlinedProjectionNode=new ProjectionPlanNode();
  m_scanInlinedProjectionNode.setOutputSchema(inlineProjSchema);
  m_reAggNode=new HashAggregatePlanNode();
  int outputColumnIndex=0;
  NodeSchema aggSchema=new NodeSchema();
  for (  SchemaColumn scol : scanColumns) {
    if (mvDDLGroupbyColumns.contains(scol)) {
      m_reAggNode.addGroupByExpression(scol.getExpression());
    }
 else {
      ExpressionType reAggType=mvColumnReAggType.get(scol.getColumnName());
      assert(reAggType != null);
      AbstractExpression agg_input_expr=scol.getExpression();
      assert(agg_input_expr instanceof TupleValueExpression);
      m_reAggNode.addAggregate(reAggType,false,outputColumnIndex,agg_input_expr);
    }
    aggSchema.addColumn(scol);
    outputColumnIndex++;
  }
  m_reAggNode.setOutputSchema(aggSchema);
  List<TupleValueExpression> needReAggTVEs=new ArrayList<TupleValueExpression>();
  List<AbstractExpression> aggPostExprs=new ArrayList<AbstractExpression>();
  for (int i=m_numOfGroupByColumns; i < mvColumnArray.size(); i++) {
    Column mvCol=mvColumnArray.get(i);
    TupleValueExpression tve=new TupleValueExpression();
    tve.setColumnIndex(i);
    tve.setColumnName(mvCol.getName());
    tve.setTableName(getMVTableName());
    tve.setColumnAlias(mvCol.getName());
    tve.setValueType(VoltType.get((byte)mvCol.getType()));
    tve.setValueSize(mvCol.getSize());
    needReAggTVEs.add(tve);
  }
  collectReAggNodePostExpressions(stmt.joinTree,needReAggTVEs,aggPostExprs);
  AbstractExpression aggPostExpr=ExpressionUtil.combine(aggPostExprs);
  m_reAggNode.setPostPredicate(aggPostExpr);
  if (aggPostExpr == null && edgeCaseQueryNoFixNeeded(stmt,mvDDLGroupbyTVEs,mvColumnAggType)) {
    return false;
  }
  m_needed=true;
  return true;
}
