{
  assert(needed);
  mvNewScanColumns=scanColumns;
  String mvTableName=mvTable.getTypeName();
  Set<SchemaColumn> mvDDLGroupbyColumns=new HashSet<SchemaColumn>();
  Map<String,ExpressionType> mvColumnAggType=new HashMap<String,ExpressionType>();
  NodeSchema inlineProjSchema=new NodeSchema();
  for (  SchemaColumn scol : mvNewScanColumns) {
    inlineProjSchema.addColumn(scol);
  }
  for (int i=0; i < numOfGroupByColumns; i++) {
    Column mvCol=mvColumnArray.get(i);
    String colName=mvCol.getName();
    TupleValueExpression tve=new TupleValueExpression();
    tve.setColumnIndex(i);
    tve.setColumnName(colName);
    tve.setTableName(mvTableName);
    tve.setColumnAlias(colName);
    tve.setValueType(VoltType.get((byte)mvCol.getType()));
    tve.setValueSize(mvCol.getSize());
    SchemaColumn scol=new SchemaColumn(mvTableName,colName,colName,tve);
    mvDDLGroupbyColumns.add(scol);
    if (!mvNewScanColumns.contains(scol)) {
      mvNewScanColumns.add(scol);
      inlineProjSchema.addColumn(scol);
    }
  }
  scanInlinedProjectionNode=new ProjectionPlanNode();
  scanInlinedProjectionNode.setOutputSchema(inlineProjSchema);
  for (  Column mvCol : mvColumnArray) {
    ExpressionType reAggType=ExpressionType.get(mvCol.getAggregatetype());
    if (reAggType == ExpressionType.AGGREGATE_COUNT_STAR || reAggType == ExpressionType.AGGREGATE_COUNT) {
      reAggType=ExpressionType.AGGREGATE_SUM;
    }
    mvColumnAggType.put(mvCol.getName(),reAggType);
  }
  reAggNode=new HashAggregatePlanNode();
  int outputColumnIndex=0;
  NodeSchema aggSchema=new NodeSchema();
  for (  SchemaColumn scol : mvNewScanColumns) {
    if (mvDDLGroupbyColumns.contains(scol)) {
      reAggNode.addGroupByExpression(scol.getExpression());
    }
 else {
      ExpressionType reAggType=mvColumnAggType.get(scol.getColumnName());
      assert(reAggType != null);
      AbstractExpression agg_input_expr=scol.getExpression();
      assert(agg_input_expr instanceof TupleValueExpression);
      reAggNode.addAggregate(reAggType,false,outputColumnIndex,agg_input_expr);
    }
    aggSchema.addColumn(scol);
    outputColumnIndex++;
  }
  reAggNode.setOutputSchema(aggSchema);
}
