{
  if (stmt.hasComplexGroupby()) {
    return false;
  }
  if (stmt.tableList.size() == 1) {
    for (    ParsedColInfo gcol : stmt.groupByColumns()) {
      assert(gcol.expression instanceof TupleValueExpression);
      TupleValueExpression tve=(TupleValueExpression)gcol.expression;
      if (!mvDDLGroupbyTVEs.contains(tve)) {
        return false;
      }
    }
    for (    ParsedColInfo dcol : stmt.displayColumns()) {
      if (stmt.groupByColumns().contains(dcol)) {
        continue;
      }
      if (dcol.expression instanceof AggregateExpression == false) {
        return false;
      }
      AggregateExpression aggExpr=(AggregateExpression)dcol.expression;
      if (aggExpr.getLeft() instanceof TupleValueExpression == false) {
        return false;
      }
      ExpressionType type=aggExpr.getExpressionType();
      TupleValueExpression tve=(TupleValueExpression)aggExpr.getLeft();
      String columnName=tve.getColumnName();
      if (type != ExpressionType.AGGREGATE_SUM && type != ExpressionType.AGGREGATE_MIN && type != ExpressionType.AGGREGATE_MAX) {
        return false;
      }
      if (mvColumnAggType.get(columnName) != type) {
        return false;
      }
    }
  }
 else {
    JoinNode joinTree=stmt.joinTree;
    return false;
  }
  return true;
}
