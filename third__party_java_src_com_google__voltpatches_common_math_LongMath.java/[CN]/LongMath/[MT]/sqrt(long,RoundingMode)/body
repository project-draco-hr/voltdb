{
  checkNonNegative("x",x);
  if (fitsInInt(x)) {
    return IntMath.sqrt((int)x,mode);
  }
  long guess=(long)Math.sqrt(x);
  long guessSquared=guess * guess;
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(guessSquared == x);
  return guess;
case FLOOR:
case DOWN:
if (x < guessSquared) {
  return guess - 1;
}
return guess;
case CEILING:
case UP:
if (x > guessSquared) {
return guess + 1;
}
return guess;
case HALF_DOWN:
case HALF_UP:
case HALF_EVEN:
long sqrtFloor=guess - ((x < guessSquared) ? 1 : 0);
long halfSquare=sqrtFloor * sqrtFloor + sqrtFloor;
return sqrtFloor + lessThanBranchFree(halfSquare,x);
default :
throw new AssertionError();
}
}
