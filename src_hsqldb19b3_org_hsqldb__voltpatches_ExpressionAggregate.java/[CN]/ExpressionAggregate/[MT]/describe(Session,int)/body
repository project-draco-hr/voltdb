{
  StringBuffer sb=new StringBuffer(64);
  sb.append('\n');
  for (int i=0; i < blanks; i++) {
    sb.append(' ');
  }
switch (opType) {
case OpTypes.COUNT:
    sb.append("COUNT ");
  break;
case OpTypes.APPROX_COUNT_DISTINCT:
sb.append("APPROX_COUNT_DISTINCT ");
break;
case OpTypes.SUM:
sb.append("SUM ");
break;
case OpTypes.MIN:
sb.append("MIN ");
break;
case OpTypes.MAX:
sb.append("MAX ");
break;
case OpTypes.AVG:
sb.append("AVG ");
break;
case OpTypes.EVERY:
sb.append(Tokens.T_EVERY).append(' ');
break;
case OpTypes.SOME:
sb.append(Tokens.T_SOME).append(' ');
break;
case OpTypes.STDDEV_POP:
sb.append(Tokens.T_STDDEV_POP).append(' ');
break;
case OpTypes.STDDEV_SAMP:
sb.append(Tokens.T_STDDEV_SAMP).append(' ');
break;
case OpTypes.VAR_POP:
sb.append(Tokens.T_VAR_POP).append(' ');
break;
case OpTypes.VAR_SAMP:
sb.append(Tokens.T_VAR_SAMP).append(' ');
break;
}
if (nodes.length > LEFT && nodes[LEFT] != null) {
sb.append(" arg1=[");
sb.append(nodes[LEFT].describe(session,blanks + 1));
sb.append(']');
}
return sb.toString();
}
