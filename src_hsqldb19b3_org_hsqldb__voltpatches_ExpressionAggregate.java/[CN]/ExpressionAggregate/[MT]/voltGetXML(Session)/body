{
  String element=null;
switch (opType) {
case OpTypes.SIMPLE_COLUMN:
    VoltXMLElement simplecolumn=new VoltXMLElement("simplecolumn");
  simplecolumn.attributes.put("id",getUniqueId(session));
if ((this.alias != null) && (getAlias().length() > 0)) {
  simplecolumn.attributes.put("alias",getAlias());
}
return simplecolumn;
case OpTypes.COUNT:
element="count";
break;
case OpTypes.SUM:
element="sum";
break;
case OpTypes.MIN:
element="min";
break;
case OpTypes.MAX:
element="max";
break;
case OpTypes.AVG:
element="avg";
break;
case OpTypes.EVERY:
case OpTypes.SOME:
case OpTypes.STDDEV_POP:
case OpTypes.STDDEV_SAMP:
case OpTypes.VAR_POP:
case OpTypes.VAR_SAMP:
default :
throw new HSQLParseException("Unsupported Aggregate Operation: " + String.valueOf(opType));
}
VoltXMLElement exp=new VoltXMLElement("aggregation");
exp.attributes.put("id",getUniqueId(session));
exp.attributes.put("optype",element);
if ((this.alias != null) && (getAlias().length() > 0)) {
exp.attributes.put("alias",getAlias());
}
if (this.isDistinctAggregate) {
exp.attributes.put("distinct","true");
}
assert(nodes.length <= 1);
for (Expression expr : nodes) {
VoltXMLElement vxmle=expr.voltGetXML(session);
exp.children.add(vxmle);
assert(vxmle != null);
}
return exp;
}
