{
  m_txnId=buf.getLong();
  m_initiatorHSId=buf.getLong();
  m_lastSafeTxnId=buf.getLong();
  long sessionId=buf.getLong();
  int cxid=buf.getInt();
  int type=buf.getInt();
  int requestBytesLength=buf.getInt();
  ByteBuffer requestBuffer=null;
  if (requestBytesLength > -1) {
    int oldlimit=buf.limit();
    int oldposition=buf.position();
    buf.limit(buf.position() + requestBytesLength);
    requestBuffer=buf.slice();
    buf.limit(oldlimit);
    buf.position(oldposition + requestBytesLength);
  }
  ArrayList<Id> ids=new ArrayList<Id>();
  ArrayList<String> schemes=new ArrayList<String>();
  ArrayList<String> names=new ArrayList<String>();
  int numIds=buf.getInt();
  if (numIds > -1) {
    try {
      for (int ii=0; ii < numIds; ii++) {
        byte bytes[]=new byte[buf.getInt()];
        buf.get(bytes);
        schemes.add(new String(bytes,"UTF-8"));
      }
      for (int ii=0; ii < numIds; ii++) {
        byte bytes[]=new byte[buf.getInt()];
        buf.get(bytes);
        names.add(new String(bytes,"UTF-8"));
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    for (int ii=0; ii < numIds; ii++) {
      ids.add(new Id(schemes.get(ii),names.get(ii)));
    }
  }
 else {
    ids=null;
  }
  m_request=new Request(null,sessionId,cxid,type,requestBuffer,ids);
  assert(buf.capacity() == buf.position());
}
