{
  assert(m_children.size() == 1);
  m_children.get(0).resolveColumnIndexes();
  NodeSchema input_schema=m_children.get(0).getOutputSchema();
  for (  SchemaColumn col : m_outputSchema.getColumns()) {
    assert(col.getExpression() instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.getExpression();
    int index=input_schema.getIndexOfTve(tve);
    tve.setColumnIndex(index);
  }
  m_outputSchema.sortByTveIndex();
  List<TupleValueExpression> sort_tves=new ArrayList<TupleValueExpression>();
  for (  AbstractExpression sort_exps : m_sortExpressions) {
    sort_tves.addAll(ExpressionUtil.getTupleValueExpressions(sort_exps));
  }
  for (  TupleValueExpression tve : sort_tves) {
    int index=input_schema.getIndexOfTve(tve);
    tve.setColumnIndex(index);
  }
}
