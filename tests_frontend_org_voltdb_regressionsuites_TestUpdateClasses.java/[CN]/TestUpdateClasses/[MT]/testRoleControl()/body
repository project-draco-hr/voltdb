{
  System.out.println("\n\n-----\n testRoleControl \n-----\n\n");
  String pathToCatalog=Configuration.getPathToCatalogForTest("updateclasses.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("updateclasses.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("-- Don't care");
  builder.setUseDDLSchema(true);
  GroupInfo groups[]=new GroupInfo[]{new GroupInfo("adhoc",true,false,false,false),new GroupInfo("sysproc",false,true,false,false)};
  UserInfo users[]=new UserInfo[]{new UserInfo("adhocuser","adhocuser",new String[]{"adhoc"}),new UserInfo("sysuser","sysuser",new String[]{"sysproc"})};
  builder.addGroups(groups);
  builder.addUsers(users);
  builder.setSecurityEnabled(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  InMemoryJarfile jarfile=new InMemoryJarfile();
  for (  Class<?> clazz : PROC_CLASSES) {
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,clazz);
  }
  for (  Class<?> clazz : EXTRA_CLASSES) {
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,clazz);
  }
  Client auth_client=null;
  try {
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=pathToCatalog;
    config.m_pathToDeployment=pathToDeployment;
    try {
      startSystem(config);
    }
 catch (    IOException ioe) {
      assertTrue(ioe.getMessage().contains("Authentication rejected"));
    }
    m_client.close();
    ClientConfig bad_config=new ClientConfig("adhocuser","adhocuser");
    m_client=ClientFactory.createClient(bad_config);
    m_client.createConnection("localhost");
    ClientConfig auth_config=new ClientConfig("sysuser","sysuser");
    auth_client=ClientFactory.createClient(auth_config);
    auth_client.createConnection("localhost");
    ClientResponse resp;
    resp=auth_client.callProcedure("@SystemCatalog","CLASSES");
    System.out.println(resp.getResults()[0]);
    assertEquals(0,resp.getResults()[0].getRowCount());
    assertFalse(VoltTableTestHelpers.moveToMatchingRow(resp.getResults()[0],"CLASS_NAME",PROC_CLASSES[0].getCanonicalName()));
    boolean threw=false;
    try {
      resp=auth_client.callProcedure(PROC_CLASSES[0].getSimpleName());
    }
 catch (    ProcCallException pce) {
      assertTrue(pce.getMessage().contains("was not found"));
      threw=true;
    }
    assertTrue(threw);
    threw=false;
    try {
      resp=m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    }
 catch (    ProcCallException pce) {
      assertTrue(pce.getMessage().contains("does not have sysproc permission"));
      threw=true;
    }
    assertTrue(threw);
    resp=auth_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=auth_client.callProcedure("@SystemCatalog","CLASSES");
    VoltTable results=resp.getResults()[0];
    System.out.println(results);
    assertEquals(3,results.getRowCount());
    assertTrue(VoltTableTestHelpers.moveToMatchingRow(results,"CLASS_NAME",PROC_CLASSES[0].getCanonicalName()));
    assertEquals(1L,results.getLong("VOLT_PROCEDURE"));
    assertEquals(0L,results.getLong("ACTIVE_PROC"));
    resp=auth_client.callProcedure("@AdHoc","create procedure allow adhoc from class " + PROC_CLASSES[0].getCanonicalName() + ";");
    System.out.println(((ClientResponseImpl)resp).toJSONString());
    resp=m_client.callProcedure(PROC_CLASSES[0].getSimpleName());
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    results=resp.getResults()[0];
    assertEquals(10L,results.asScalarLong());
  }
  finally {
    if (auth_client != null) {
      auth_client.close();
    }
    teardownSystem();
  }
}
