{
  System.out.println("\n\n-----\n testCollidingProc \n-----\n\n");
  String pathToCatalog=Configuration.getPathToCatalogForTest("updateclasses.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("updateclasses.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("-- Don't care");
  builder.setUseAdhocSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  InMemoryJarfile jarfile=new InMemoryJarfile();
  for (  Class<?> clazz : PROC_CLASSES) {
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,clazz);
  }
  for (  Class<?> clazz : EXTRA_CLASSES) {
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,clazz);
  }
  for (  Class<?> clazz : COLLIDING_CLASSES) {
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,clazz);
  }
  try {
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=pathToCatalog;
    config.m_pathToDeployment=pathToDeployment;
    startSystem(config);
    ClientResponse resp;
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(0,resp.getResults()[0].getRowCount());
    resp=m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(PROC_CLASSES.length + EXTRA_CLASSES.length + COLLIDING_CLASSES.length,resp.getResults()[0].getRowCount());
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    resp=m_client.callProcedure("@UpdateClasses",null,PROC_CLASSES[0].getCanonicalName());
    assertFalse(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
    resp=m_client.callProcedure("@UpdateClasses",null,"org.voltdb_testprocs.fullddlfeatures.*");
    assertFalse(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertFalse(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(EXTRA_CLASSES[0].getCanonicalName()));
    resp=m_client.callProcedure("@UpdateClasses",null,"org.voltdb**");
    assertFalse(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertFalse(findClassInSystemCatalog(EXTRA_CLASSES[0].getCanonicalName()));
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(0,resp.getResults()[0].getRowCount());
    resp=m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(PROC_CLASSES.length + EXTRA_CLASSES.length + COLLIDING_CLASSES.length,resp.getResults()[0].getRowCount());
    resp=m_client.callProcedure("@UpdateClasses",null,"**testImportProc   , **testCreateProcFromClassProc");
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(1,resp.getResults()[0].getRowCount());
    assertTrue(findClassInSystemCatalog(EXTRA_CLASSES[0].getCanonicalName()));
    InMemoryJarfile jarfile2=new InMemoryJarfile();
    for (    Class<?> clazz : PROC_CLASSES) {
      VoltCompiler comp=new VoltCompiler();
      comp.addClassToJar(jarfile2,clazz);
    }
    for (    Class<?> clazz : COLLIDING_CLASSES) {
      VoltCompiler comp=new VoltCompiler();
      comp.addClassToJar(jarfile2,clazz);
    }
    resp=m_client.callProcedure("@UpdateClasses",jarfile2.getFullJarBytes(),"**updateclasses.*");
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(PROC_CLASSES.length + COLLIDING_CLASSES.length,resp.getResults()[0].getRowCount());
    assertFalse(findClassInSystemCatalog(EXTRA_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
    InMemoryJarfile inner=new InMemoryJarfile();
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(inner,org.voltdb_testprocs.updateclasses.InnerClassesTestProc.class);
    resp=m_client.callProcedure("@UpdateClasses",inner.getFullJarBytes(),null);
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc"));
    assertTrue(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerNotPublic"));
    assertTrue(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerWithConstructorArgs"));
    assertTrue(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerWithEasyConstructor"));
    assertTrue(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerWithNoConstructor"));
    resp=m_client.callProcedure("@UpdateClasses",null,"org.voltdb_testprocs.updateclasses.InnerClassesTestProc");
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(PROC_CLASSES.length + COLLIDING_CLASSES.length,resp.getResults()[0].getRowCount());
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc"));
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerNotPublic"));
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerWithConstructorArgs"));
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerWithEasyConstructor"));
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.updateclasses.InnerClassesTestProc$InnerWithNoConstructor"));
    resp=m_client.callProcedure("@UpdateClasses",null,"");
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(PROC_CLASSES.length + COLLIDING_CLASSES.length,resp.getResults()[0].getRowCount());
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
    resp=m_client.callProcedure("@UpdateClasses",null,"com.voltdb.*");
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(PROC_CLASSES.length + COLLIDING_CLASSES.length,resp.getResults()[0].getRowCount());
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(PROC_CLASSES[1].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[0].getCanonicalName()));
    assertTrue(findClassInSystemCatalog(COLLIDING_CLASSES[1].getCanonicalName()));
  }
  finally {
    teardownSystem();
  }
}
