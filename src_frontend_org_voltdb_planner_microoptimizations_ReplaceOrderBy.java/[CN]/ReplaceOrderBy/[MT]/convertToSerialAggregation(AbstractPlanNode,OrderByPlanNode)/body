{
  assert(aggregateNode instanceof HashAggregatePlanNode);
  HashAggregatePlanNode hashAggr=(HashAggregatePlanNode)aggregateNode;
  Set<AbstractExpression> groupbys=new HashSet<AbstractExpression>(hashAggr.getGroupByExpressions());
  Set<AbstractExpression> orderbys=new HashSet<AbstractExpression>(orderbyNode.getSortExpressions());
  boolean result=groupbys.removeAll(orderbys);
  if (!result) {
    return aggregateNode;
  }
 else   if (groupbys.isEmpty()) {
    return AggregatePlanNode.convertToSerialAggregatePlanNode(hashAggr);
  }
 else {
    List<Integer> coveredGroupByColumns=new ArrayList<Integer>();
    int idx=0;
    for (    AbstractExpression groupByExpr : hashAggr.getGroupByExpressions()) {
      if (!groupbys.contains(groupByExpr)) {
        coveredGroupByColumns.add(idx);
      }
      ++idx;
    }
    return AggregatePlanNode.convertToPartialAggregatePlanNode(hashAggr,coveredGroupByColumns);
  }
}
