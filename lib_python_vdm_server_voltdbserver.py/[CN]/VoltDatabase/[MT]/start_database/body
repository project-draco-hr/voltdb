def start_database(self, recover=False):
    '\n        Starts voltdb servers on all nodes configured for this database.\n        Returns reponse with HTTP status code and error details json.\n        '
    HTTPListener.sync_configuration()
    members = []
    current_database = HTTPListener.Global.DATABASES.get(self.database_id)
    if (not current_database):
        return create_response(('No database found for id: %u' % self.database_id), 404)
    else:
        members = current_database['members']
    if (not members):
        return create_response(('No servers configured for the database: %u' % self.database_id), 404)
    for server_id in members:
        server = HTTPListener.Global.SERVERS.get(server_id)
        if (not server):
            return create_response(('Server details not found for id: %u' % server_id), 404)
    failed = False
    server_status = {}
    action = 'start'
    if recover:
        action = 'recover'
    for server_id in members:
        server = HTTPListener.Global.SERVERS.get(server_id)
        curr = server
        try:
            url = ('http://%s:%u/api/1.0/databases/%u/servers/%s?id=%u' % (curr['hostname'], HTTPListener.__PORT__, self.database_id, action, server_id))
            response = requests.put(url)
            if (response.status_code != requests.codes.ok):
                failed = True
            server_status[curr['hostname']] = json.loads(response.text)['statusstring']
        except Exception as err:
            failed = True
            print traceback.format_exc()
            server_status[curr['hostname']] = str(err)
    if failed:
        url = ('http://%s:%u/api/1.0/databases/%u/status/' % (curr['hostname'], HTTPListener.__PORT__, self.database_id))
        response = requests.get(url)
        return create_response(response.text, 200)
    else:
        return create_response(('Start request sent successfully to servers: ' + json.dumps(server_status)), 200)
