def start_server(self, server_id, recover=False, is_blocking=(-1)):
    '\n        Sends start request to the specified server\n        '
    members = []
    current_database = [database for database in HTTPListener.Global.DATABASES if (database['id'] == self.database_id)]
    if (not current_database):
        return create_response(('No database found for id: %u' % self.database_id), 404)
    else:
        members = current_database[0]['members']
    if ((not members) or (server_id not in members)):
        return create_response(('No server with id %u configured for the database: %u' % (server_id, self.database_id)), 404)
    server = [server for server in HTTPListener.Global.SERVERS if (server['id'] == server_id)]
    if (not server):
        return create_response(('Server details not found for id: %u' % server_id), 404)
    action = 'start'
    if recover:
        action = 'recover'
    url = ('http://%s:%u/api/1.0/databases/%u/status/' % (server[0]['hostname'], HTTPListener.__PORT__, self.database_id))
    response = requests.get(url)
    is_running = response.json()['status'][0]['status']
    server_ip = ''
    if (is_running == 'running'):
        for value in response.json()['serverDetails']:
            for key in value:
                status = value[key]['status']
                if ((status == 'running') and (key != server[0]['hostname'])):
                    server_ip = key
                    action = 'rejoin'
    try:
        url = ('http://%s:%u/api/1.0/databases/%u/servers/%s?id=%u' % (server[0]['hostname'], HTTPListener.__PORT__, self.database_id, action, server_id))
        if (action == 'rejoin'):
            url += ('&server_ip=%s&is_blocking=%u' % (server_ip, is_blocking))
        response = requests.put(url)
        return create_response(json.loads(response.text)['statusstring'], response.status_code)
    except Exception as err:
        print traceback.format_exc()
        return create_response(str(err), 500)
