def start_server(self, server_id, recover=False, is_blocking=(-1)):
    '\n        Sends start request to the specified server\n        '
    members = []
    current_database = HTTPListener.Global.DATABASES.get(self.database_id)
    if (not current_database):
        return create_response(('No database found for id: %u' % self.database_id), 404)
    else:
        members = current_database['members']
    if ((not members) or (server_id not in members)):
        return create_response(('No server with id %u configured for the database: %u' % (server_id, self.database_id)), 404)
    server = HTTPListener.Global.SERVERS.get(server_id)
    if (not server):
        return create_response(('Server details not found for id: %u' % server_id), 404)
    action = 'start'
    if recover:
        action = 'recover'
    try:
        url = ('http://%s:%u/api/1.0/databases/%u/servers/%s?id=%u&blocking=%u' % (server['hostname'], HTTPListener.__PORT__, self.database_id, action, server_id, is_blocking))
        response = requests.put(url)
        return create_response(json.loads(response.text)['statusstring'], response.status_code)
    except Exception as err:
        print traceback.format_exc()
        return create_response(str(err), 500)
