def stop_database(self):
    '\n        Stops voltdb cluster for this database\n        '
    members = []
    server_status = {}
    current_database = [database for database in HTTPListener.Global.DATABASES if (database['id'] == self.database_id)]
    if (not current_database):
        abort(404)
    else:
        members = current_database[0]['members']
    if (not members):
        return create_response('No servers configured for the database', 500)
    server_id = members[0]
    server = [server for server in HTTPListener.Global.SERVERS if (server['id'] == server_id)]
    if (not server):
        return create_response(('Server details not found for id ' + server_id), 404)
    for server_id in members:
        server = [server for server in HTTPListener.Global.SERVERS if (server['id'] == server_id)]
        curr = server[0]
        try:
            url = ('http://%s:%u/api/1.0/databases/%u/servers/%u/%s?force=false' % (curr['hostname'], HTTPListener.__PORT__, self.database_id, server_id, 'stop'))
            response = requests.put(url)
            server_status[curr['hostname']] = json.loads(response.text)
            if (response.status_code != requests.codes.ok):
                failed = True
        except Exception as err:
            failed = True
            print traceback.format_exc()
            server_status[curr['hostname']] = json.loads(response.text)
    if failed:
        return create_response(server_status, 200)
    else:
        return create_response(server_status, 200)
