{
  final String msgPrefix="Improperly formatted WKT for polygon: ";
  StreamTokenizer tokenizer=new StreamTokenizer(new StringReader(wkt));
  tokenizer.lowerCaseMode(true);
  tokenizer.eolIsSignificant(false);
  List<PointType> currentLoop=null;
  List<List<PointType>> loops=new ArrayList<List<PointType>>();
  try {
    int token=tokenizer.nextToken();
    if (token != StreamTokenizer.TT_WORD || !tokenizer.sval.equals("polygon")) {
      throw new IllegalArgumentException(msgPrefix + "expected WKT to start with POLYGON");
    }
    token=tokenizer.nextToken();
    if (token != '(') {
      throw new IllegalArgumentException(msgPrefix + "expected left parenthesis after POLYGON");
    }
    boolean polygonOpen=true;
    while (polygonOpen) {
      token=tokenizer.nextToken();
switch (token) {
case '(':
        if (currentLoop != null) {
          throw new IllegalArgumentException(msgPrefix + "missing closing parenthesis");
        }
      currentLoop=new ArrayList<PointType>();
    break;
case StreamTokenizer.TT_NUMBER:
  if (currentLoop == null) {
    throw new IllegalArgumentException(msgPrefix + "missing opening parenthesis");
  }
double lat=tokenizer.nval;
token=tokenizer.nextToken();
if (token != StreamTokenizer.TT_NUMBER) {
throw new IllegalArgumentException(msgPrefix + "missing longitude in lat long pair");
}
double lng=tokenizer.nval;
currentLoop.add(new PointType(lat,lng));
token=tokenizer.nextToken();
if (token != ',') {
if (token != ')') {
throw new IllegalArgumentException(msgPrefix + "missing comma between lat long pairs");
}
tokenizer.pushBack();
}
break;
case ')':
if (currentLoop == null) {
throw new IllegalArgumentException(msgPrefix + "missing opening parenthesis");
}
loops.add(currentLoop);
currentLoop=null;
token=tokenizer.nextToken();
if (token == ')') {
polygonOpen=false;
}
 else if (token != ',') {
throw new IllegalArgumentException(msgPrefix + "unrecognized token in WKT: " + Character.toString((char)token));
}
break;
case StreamTokenizer.TT_EOF:
throw new IllegalArgumentException(msgPrefix + "premature end of input");
default :
throw new IllegalArgumentException(msgPrefix + "unrecognized token in WKT: " + Character.toString((char)token));
}
}
token=tokenizer.nextToken();
if (token != StreamTokenizer.TT_EOF) {
throw new IllegalArgumentException(msgPrefix + "unrecognized input after WKT");
}
}
 catch (IOException e) {
throw new IllegalArgumentException(msgPrefix + "error tokenizing string");
}
return loops;
}
