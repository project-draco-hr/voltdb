{
switch (part) {
case DAY_NAME:
case MONTH_NAME:
case QUARTER:
case DAY_OF_MONTH:
case DAY_OF_YEAR:
case DAY_OF_WEEK:
case WEEK_OF_YEAR:
    if (!isDateTimeType() || startIntervalType != Types.SQL_INTERVAL_YEAR) {
      throw Error.error(ErrorCode.X_42561);
    }
  if (part == DAY_NAME || part == MONTH_NAME) {
    return Type.SQL_VARCHAR;
  }
 else {
    return Type.SQL_INTEGER;
  }
case Types.SQL_INTERVAL_SECOND:
if (part == startIntervalType) {
  if (scale != 0) {
    return new NumberType(Types.SQL_DECIMAL,precision + scale,scale);
  }
}
 else if (part == endIntervalType) {
  if (scale != 0) {
    return new NumberType(Types.SQL_DECIMAL,maxIntervalPrecision + scale,scale);
  }
}
case Types.SQL_INTERVAL_YEAR:
case Types.SQL_INTERVAL_MONTH:
case Types.SQL_INTERVAL_DAY:
case Types.SQL_INTERVAL_HOUR:
case Types.SQL_INTERVAL_MINUTE:
if (part < startIntervalType || part > endIntervalType) {
throw Error.error(ErrorCode.X_42561);
}
return Type.SQL_INTEGER;
case SECONDS_MIDNIGHT:
if (!isDateTimeType() || endIntervalType < Types.SQL_INTERVAL_SECOND) {
throw Error.error(ErrorCode.X_42561);
}
return Type.SQL_INTEGER;
case TIMEZONE_HOUR:
case TIMEZONE_MINUTE:
if (typeCode != Types.SQL_TIMESTAMP_WITH_TIME_ZONE && typeCode != Types.SQL_TIME_WITH_TIME_ZONE) {
throw Error.error(ErrorCode.X_42561);
}
return Type.SQL_INTEGER;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");
}
}
