{
  String pathToCatalog=Configuration.getPathToCatalogForTest("emptyDDL.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("emptyDDL.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.setUseDDLSchema(true);
  PortGenerator pg=new PortGenerator();
  int httpdPort=pg.next();
  builder.setHTTPDPort(httpdPort);
  boolean success=builder.compile(pathToCatalog);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  startSystem(config);
  String roundtripDDL;
  assert(firstCanonicalDDL != null);
  if (!triedSqlcmdDryRun) {
    assertEquals("sqlcmd dry run failed -- maybe sqlcmd needs to be rebuilt.",0,callSQLcmd("\n"));
    triedSqlcmdDryRun=true;
  }
  int exitValue=callSQLcmd(firstCanonicalDDL);
  assertFalse("sqlcmd timed out on input:\n" + firstCanonicalDDL,TIMEOUT_PSEUDO_EXIT_VALUE == exitValue);
  assertEquals("sqlcmd failed on input:\n" + firstCanonicalDDL,0,exitValue);
  roundtripDDL=getDDLFromHTTP(httpdPort);
  assertTrue(firstCanonicalDDL.equalsIgnoreCase(roundtripDDL));
  exitValue=callSQLcmd("CREATE TABLE NONSENSE (id INTEGER);\n");
  assertFalse("sqlcmd timed out on last call",TIMEOUT_PSEUDO_EXIT_VALUE == exitValue);
  assertEquals("sqlcmd failed on last call",0,exitValue);
  roundtripDDL=getDDLFromHTTP(httpdPort);
  assertFalse(firstCanonicalDDL.equals(roundtripDDL));
  teardownSystem();
}
