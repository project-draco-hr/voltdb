{
  mockClient.abortMessage=Constants.INVALID_ITEM_MESSAGE;
  client.m_tpccSim.doNewOrder();
  assertEquals("neworder",mockClient.calledName);
  assertEquals(7,mockClient.calledParameters.length);
  assertEquals(1L,mockClient.calledParameters[0]);
  assertEquals(1L,mockClient.calledParameters[1]);
  assertEquals(2L,mockClient.calledParameters[2]);
  assertEquals(Clock.Mock.NOW,mockClient.calledParameters[3]);
  long[] item_id=(long[])mockClient.calledParameters[4];
  assertEquals(Constants.MIN_OL_CNT,item_id.length);
  long[] supply_w_id=(long[])mockClient.calledParameters[5];
  assertEquals(Constants.MIN_OL_CNT,supply_w_id.length);
  long[] quantity=(long[])mockClient.calledParameters[6];
  assertEquals(Constants.MIN_OL_CNT,quantity.length);
  for (int i=0; i < item_id.length; ++i) {
    if (i + 1 == item_id.length) {
      assertEquals((long)Constants.NUM_ITEMS + 1,item_id[i]);
    }
 else {
      assertEquals(2L,item_id[i]);
    }
    assertEquals(1L,supply_w_id[i]);
    assertEquals(1L,quantity[i]);
  }
  generator.minimum=false;
  client.m_tpccSim.doNewOrder();
  assertEquals("neworder",mockClient.calledName);
  assertEquals(7,mockClient.calledParameters.length);
  assertEquals((long)Constants.DISTRICTS_PER_WAREHOUSE,mockClient.calledParameters[1]);
  assertEquals(72L,mockClient.calledParameters[2]);
  assertEquals(Clock.Mock.NOW,mockClient.calledParameters[3]);
  item_id=(long[])mockClient.calledParameters[4];
  assertEquals(Constants.MAX_OL_CNT,item_id.length);
  supply_w_id=(long[])mockClient.calledParameters[5];
  assertEquals(Constants.MAX_OL_CNT,supply_w_id.length);
  quantity=(long[])mockClient.calledParameters[6];
  assertEquals(Constants.MAX_OL_CNT,quantity.length);
  for (int i=0; i < item_id.length; ++i) {
    assertEquals(6496L,item_id[i]);
    assertEquals((long)Constants.MAX_OL_QUANTITY,quantity[i]);
  }
}
