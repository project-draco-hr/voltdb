{
  HSQLInterface hsql=setupTPCCDDL();
  VoltXMLElement stmt;
  stmt=hsql.getXMLCompiledStatement("select * from new_order");
  assertTrue(stmt.toString().contains("NO_W_ID"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id = 5");
  assertTrue(stmt.toString().contains("equal"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (5,7);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (?);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (?,5,3,?);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id not in (?,5,3,?);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from warehouse where w_name not in (?, 'foo');");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (no_d_id, no_o_id, ?, 7);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (abs(-1), ?, 17761776);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (abs(17761776), ?, 17761776) and no_d_id in (abs(-1), ?, 17761776);");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in ?;");
  assertTrue(stmt.toString().contains("vector"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where no_w_id in (select w_id from warehouse);");
  assertTrue(stmt.toString().contains("tablesubquery"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where exists (select w_id from warehouse);");
  assertTrue(stmt.toString().contains("tablesubquery"));
  stmt=hsql.getXMLCompiledStatement("select * from new_order where not exists (select w_id from warehouse);");
  assertTrue(stmt.toString().contains("tablesubquery"));
  expectFailStmt(hsql,"select * from new_order where no_w_id <> (5, 7, 8);","row column count mismatch");
  expectFailStmt(hsql,"select x.no_w_id from new_order x, new_order y group by x.no_w_id order by y.no_w_id;","expression not in aggregate or GROUP BY columns");
}
