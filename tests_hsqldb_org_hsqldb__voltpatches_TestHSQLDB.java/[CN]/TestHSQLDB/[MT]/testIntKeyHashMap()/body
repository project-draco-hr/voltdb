{
  Object x=null;
  IntKeyHashMap map=new IntKeyHashMap();
  int j=0;
  int top=0;
  boolean check=false;
  for (int i=0; i < 100000; ++i) {
    check=false;
    int r=(int)(Math.random() * 10000);
    ++counts[r % MOD];
switch (r % MOD) {
default :
case 0:
      int key=r / 500;
    x=map.get(key);
  if (x == null) {
    System.out.println("        map.put(" + key + ", new Integer("+ i+ ")); //0");
    map.put(key,new Integer(i));
    assertTrue(new Integer(i).equals(map.get(key)));
    if (key >= top) {
      top=key + 1;
    }
    ++j;
    check=true;
  }
break;
case 1:
System.out.println("        x = map.remove(" + j / 2 + "); //1");
x=map.remove(j / 2);
assertTrue(null == map.get(j / 2));
assertTrue(null == map.remove(j / 2));
if (x != null) {
--j;
}
check=true;
break;
case 2:
x=map.get(j / 2);
if (x == null) {
check=true;
}
break;
case 3:
x=map.get(j / 3);
System.out.println("        x = map.put(" + j / 3 + ", new Integer(" + i + ")); //2");
map.put(j / 3,new Integer(i));
assertTrue(new Integer(i).equals(map.get(j / 3)));
if (x == null) {
if (j / 3 >= top) {
++top;
}
++j;
}
check=true;
break;
}
if (check) {
checkMap(map,j,top,i,r);
}
if (r % (MOD * MOD) == MOD) {
System.out.println("        map = new IntKeyHashMap();");
map=new IntKeyHashMap();
j=0;
top=0;
}
}
}
