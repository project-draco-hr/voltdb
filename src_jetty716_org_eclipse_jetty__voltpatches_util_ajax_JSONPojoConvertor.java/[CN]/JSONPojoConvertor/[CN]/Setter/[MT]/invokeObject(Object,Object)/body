{
  if (_type.isEnum()) {
    if (value instanceof Enum)     _method.invoke(obj,new Object[]{value});
 else     _method.invoke(obj,new Object[]{Enum.valueOf((Class<? extends Enum>)_type,value.toString())});
  }
 else   if (_numberType != null && value instanceof Number) {
    _method.invoke(obj,new Object[]{_numberType.getActualValue((Number)value)});
  }
 else   if (_componentType != null && value.getClass().isArray()) {
    if (_numberType == null) {
      int len=Array.getLength(value);
      Object array=Array.newInstance(_componentType,len);
      try {
        System.arraycopy(value,0,array,0,len);
      }
 catch (      Exception e) {
        Log.ignore(e);
        _method.invoke(obj,new Object[]{value});
        return;
      }
      _method.invoke(obj,new Object[]{array});
    }
 else {
      Object[] old=(Object[])value;
      Object array=Array.newInstance(_componentType,old.length);
      try {
        for (int i=0; i < old.length; i++)         Array.set(array,i,_numberType.getActualValue((Number)old[i]));
      }
 catch (      Exception e) {
        Log.ignore(e);
        _method.invoke(obj,new Object[]{value});
        return;
      }
      _method.invoke(obj,new Object[]{array});
    }
  }
 else   _method.invoke(obj,new Object[]{value});
}
