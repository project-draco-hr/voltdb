{
  TupleValueExpression tokenPartitionKey=null;
  Set<Set<AbstractExpression>> eqSets=new HashSet<Set<AbstractExpression>>();
  int unfilteredPartitionKeyCount=0;
  m_joinValid=true;
  boolean subqueryHasReceiveNode=false;
  boolean hasPartitionedTableJoin=false;
  for (  StmtTableScan tableScan : collection) {
    if (tableScan.getIsReplicated()) {
      continue;
    }
    List<SchemaColumn> columnsNeedingCoverage=tableScan.getPartitioningColumns();
    if (tableScan instanceof StmtSubqueryScan) {
      StmtSubqueryScan subScan=(StmtSubqueryScan)tableScan;
      subScan.promoteSinglePartitionInfo(valueEquivalence,eqSets);
      if (subScan.hasReceiveNode()) {
        if (subqueryHasReceiveNode) {
          m_joinValid=false;
          break;
        }
        subqueryHasReceiveNode=true;
        if (subScan.isTableAggregate()) {
          continue;
        }
      }
 else {
        hasPartitionedTableJoin=true;
      }
    }
 else {
      hasPartitionedTableJoin=true;
    }
    boolean unfiltered=true;
    for (    AbstractExpression candidateColumn : valueEquivalence.keySet()) {
      if (!(candidateColumn instanceof TupleValueExpression)) {
        continue;
      }
      TupleValueExpression candidatePartitionKey=(TupleValueExpression)candidateColumn;
      if (!canCoverPartitioningColumn(candidatePartitionKey,columnsNeedingCoverage)) {
        continue;
      }
      unfiltered=false;
      if (tokenPartitionKey == null) {
        tokenPartitionKey=candidatePartitionKey;
      }
      eqSets.add(valueEquivalence.get(candidatePartitionKey));
    }
    if (unfiltered) {
      ++unfilteredPartitionKeyCount;
    }
  }
  m_countOfIndependentlyPartitionedTables=eqSets.size() + unfilteredPartitionKeyCount;
  if (m_countOfIndependentlyPartitionedTables > 1) {
    m_joinValid=false;
  }
  if (subqueryHasReceiveNode && hasPartitionedTableJoin) {
    m_joinValid=false;
  }
  if ((unfilteredPartitionKeyCount == 0) && (eqSets.size() == 1)) {
    for (    Set<AbstractExpression> partitioningValues : eqSets) {
      for (      AbstractExpression constExpr : partitioningValues) {
        if (constExpr instanceof TupleValueExpression) {
          continue;
        }
        VoltType valueType=tokenPartitionKey.getValueType();
        addPartitioningExpression(tokenPartitionKey.getTableName() + '.' + tokenPartitionKey.getColumnName(),constExpr,valueType);
        break;
      }
    }
  }
}
