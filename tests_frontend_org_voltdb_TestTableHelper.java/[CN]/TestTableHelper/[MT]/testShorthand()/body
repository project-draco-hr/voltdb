{
  VoltTable t=TableHelper.quickTable("FOO (BIGINT-N, BAR:TINYINT, A:VARCHAR12-U/'foo') P(2,BAR)");
  assertEquals("C0",t.getColumnName(0));
  assertEquals("BAR",t.getColumnName(1));
  assertEquals("A",t.getColumnName(2));
  assertEquals(VoltType.BIGINT,t.getColumnType(0));
  assertEquals(VoltType.TINYINT,t.getColumnType(1));
  assertEquals(VoltType.STRING,t.getColumnType(2));
  assertEquals(false,t.getColumnUniqueness(0));
  assertEquals(false,t.getColumnUniqueness(1));
  assertEquals(true,t.getColumnUniqueness(2));
  assertEquals(VoltTable.ColumnInfo.NO_DEFAULT_VALUE,t.getColumnDefaultValue(0));
  assertEquals(VoltTable.ColumnInfo.NO_DEFAULT_VALUE,t.getColumnDefaultValue(1));
  assertEquals("foo",t.getColumnDefaultValue(2));
  assertEquals(false,t.getColumnNullable(0));
  assertEquals(true,t.getColumnNullable(1));
  assertEquals(true,t.getColumnNullable(2));
  assertEquals(12,t.getColumnMaxSize(2));
  System.out.println(TableHelper.ddlForTable(t));
  t=TableHelper.quickTable("Ryan (likes:smallint, TINYINT/'8', A:VARBINARY/'ABCD')");
  assertEquals("likes",t.getColumnName(0));
  assertEquals("C1",t.getColumnName(1));
  assertEquals("A",t.getColumnName(2));
  assertEquals(VoltType.SMALLINT,t.getColumnType(0));
  assertEquals(VoltType.TINYINT,t.getColumnType(1));
  assertEquals(VoltType.VARBINARY,t.getColumnType(2));
  assertEquals(false,t.getColumnUniqueness(0));
  assertEquals(false,t.getColumnUniqueness(1));
  assertEquals(false,t.getColumnUniqueness(2));
  assertEquals(VoltTable.ColumnInfo.NO_DEFAULT_VALUE,t.getColumnDefaultValue(0));
  assertEquals("8",t.getColumnDefaultValue(1));
  assertEquals("ABCD",t.getColumnDefaultValue(2));
  assertEquals(true,t.getColumnNullable(0));
  assertEquals(true,t.getColumnNullable(1));
  assertEquals(true,t.getColumnNullable(2));
  assertEquals(255,t.getColumnMaxSize(2));
  System.out.println(TableHelper.ddlForTable(t));
}
