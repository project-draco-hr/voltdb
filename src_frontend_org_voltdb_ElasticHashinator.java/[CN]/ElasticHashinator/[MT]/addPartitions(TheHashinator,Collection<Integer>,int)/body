{
  Preconditions.checkArgument(oldHashinator instanceof ElasticHashinator);
  ElasticHashinator oldElasticHashinator=(ElasticHashinator)oldHashinator;
  SecureRandom sr;
  try {
    sr=SecureRandom.getInstance(SECURE_RANDOM_ALGORITHM);
    sr.setSeed(SECURE_RANDON_SEED);
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException("Unable to initialize secure random generator",ex);
  }
  Map<Long,Integer> newConfig=new HashMap<Long,Integer>(oldElasticHashinator.m_tokens);
  Set<Integer> existingPartitions=new HashSet<Integer>(oldElasticHashinator.m_tokens.values());
  Set<Long> checkSet=new HashSet<Long>(oldElasticHashinator.m_tokens.keySet());
  for (  int pid : newPartitions) {
    if (existingPartitions.contains(pid)) {
      throw new RuntimeException("Partition " + pid + " already exists in the "+ "hashinator");
    }
    for (int i=0; i < tokensPerPartition; i++) {
      while (true) {
        long candidateToken=TokenCompressor.prepare(sr.nextLong());
        if (!checkSet.add(candidateToken)) {
          continue;
        }
        newConfig.put(candidateToken,pid);
        break;
      }
    }
  }
  return new ElasticHashinator(newConfig).toBytes();
}
