{
  ByteArrayOutputStream bos=new ByteArrayOutputStream((int)(compressedData.length * 1.5));
  InflaterOutputStream dos=new InflaterOutputStream(bos);
  try {
    dos.write(compressedData);
    dos.close();
  }
 catch (  IOException e) {
    throw new RuntimeException("Unable to decompress elastic hashinator data.");
  }
  byte[] cookedBytes=bos.toByteArray();
  int numEntries=(cookedBytes.length >= 4 ? ByteBuffer.wrap(cookedBytes).getInt() : 0);
  int tokensSize=8 * numEntries;
  int partitionsSize=4 * numEntries;
  if (numEntries <= 0 || cookedBytes.length != 4 + tokensSize + partitionsSize) {
    throw new RuntimeException("Bad elastic hashinator cooked config size.");
  }
  ByteBuffer tokenBuf=ByteBuffer.wrap(cookedBytes,4,tokensSize);
  ByteBuffer partitionBuf=ByteBuffer.wrap(cookedBytes,4 + tokensSize,partitionsSize);
  TreeMap<Long,Integer> buildMap=new TreeMap<Long,Integer>();
  for (int ii=0; ii < numEntries; ii++) {
    final long token=tokenBuf.getLong();
    final int partitionId=partitionBuf.getInt();
    if (buildMap.containsKey(token)) {
      throw new RuntimeException(String.format("Duplicate token %d: partition %d and %d",token,partitionId,buildMap.get(token)));
    }
    buildMap.put(token,partitionId);
  }
  return buildMap;
}
