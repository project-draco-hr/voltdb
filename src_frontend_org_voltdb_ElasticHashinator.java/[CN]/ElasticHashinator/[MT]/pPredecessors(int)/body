{
  Set<Integer> predecessors=new HashSet<Integer>();
  UnmodifiableIterator<Map.Entry<Long,Integer>> iter=tokens.entrySet().iterator();
  Set<Long> pTokens=new HashSet<Long>();
  while (iter.hasNext()) {
    Map.Entry<Long,Integer> next=iter.next();
    if (next.getValue() == partition) {
      pTokens.add(next.getKey());
    }
  }
  for (  Long token : pTokens) {
    Map.Entry<Long,Integer> predecessor=null;
    if (token != null) {
      predecessor=tokens.headMap(token).lastEntry();
      if (predecessor == null) {
        predecessor=tokens.lastEntry();
      }
    }
    if (predecessor != null && predecessor.getValue() != partition) {
      predecessors.add(predecessor.getValue());
    }
  }
  return predecessors;
}
