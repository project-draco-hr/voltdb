{
  Pair<Long,Integer> p=(cooked ? updateCooked(configBytes) : updateRaw(configBytes));
  m_tokens=p.getFirst();
  m_tokenCount=p.getSecond();
  m_cleaner=Cleaner.create(this,new Deallocator(m_tokens,m_tokenCount * 8));
  m_configBytes=!cooked ? Suppliers.ofInstance(configBytes) : m_configBytesSupplier;
  m_cookedBytes=cooked ? Suppliers.ofInstance(configBytes) : m_cookedBytesSupplier;
  m_tokensMap=Suppliers.memoize(new Supplier<ImmutableSortedMap<Integer,Integer>>(){
    @Override public ImmutableSortedMap<Integer,Integer> get(){
      ImmutableSortedMap.Builder<Integer,Integer> builder=ImmutableSortedMap.naturalOrder();
      for (int ii=0; ii < m_tokenCount; ii++) {
        final long ptr=m_tokens + (ii * 8);
        final int token=unsafe.getInt(ptr);
        final int partition=unsafe.getInt(ptr + 4);
        builder.put(token,partition);
      }
      return builder.build();
    }
  }
);
}
