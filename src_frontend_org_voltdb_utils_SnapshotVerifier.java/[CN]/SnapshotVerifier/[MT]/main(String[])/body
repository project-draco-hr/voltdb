{
  if (args[0].equals("--help")) {
    printHelpAndQuit(0);
  }
  boolean specifiedSingle=false;
  boolean specifiedAll=false;
  for (int ii=0; ii < args.length; ii++) {
    if (args[ii].equals("--single")) {
      specifiedSingle=true;
    }
 else     if (args[ii].equals("--all")) {
      specifiedAll=true;
    }
  }
  if (specifiedSingle && specifiedAll) {
    System.err.println("Error: Can only specify one option of --single or --all");
    printHelpAndQuit(-1);
  }
  if (!specifiedSingle && !specifiedAll) {
    System.err.println("Error: Must specify one of --single or --all");
    printHelpAndQuit(-1);
  }
  List<String> directories=null;
  for (int ii=0; ii < args.length; ii++) {
    if (args[ii].equals("--dirs")) {
      if (ii + 1 >= args.length) {
        System.err.println("Error: No directories specified after --dirs");
        printHelpAndQuit(-1);
      }
      directories=Arrays.asList(args[ii + 1].split(","));
    }
  }
  if (directories == null) {
    System.err.println("Error: No directories specified using --dirs");
    printHelpAndQuit(-1);
  }
  FileFilter filter=new SnapshotFilter();
  if (specifiedSingle) {
    String snapshotName=null;
    for (int ii=0; ii < args.length; ii++) {
      if (args[ii].equals("--name")) {
        if (ii + 1 >= args.length) {
          System.err.println("Error: No name specified after --name");
          printHelpAndQuit(-1);
        }
        snapshotName=args[ii + 1];
        break;
      }
    }
    if (snapshotName == null) {
      System.err.println("Error: No snapshot name specified using --name even though --single was specified");
      printHelpAndQuit(-1);
    }
    filter=new SpecificSnapshotFilter(snapshotName);
  }
  TreeMap<Long,Snapshot> snapshots=new TreeMap<Long,Snapshot>();
  for (  String directory : directories) {
    SnapshotUtil.retrieveSnapshotFiles(new File(directory),snapshots,filter,0,true);
  }
  if (snapshots.isEmpty()) {
    System.out.println("Snapshot corrupted");
    System.out.println("No files found");
  }
  for (  Map.Entry<Long,Snapshot> s : snapshots.entrySet()) {
    System.out.println(SnapshotUtil.generateSnapshotReport(s.getKey(),s.getValue()).getSecond());
  }
}
