{
  try {
    internalProcessResults(rc,path,ctx,data,stat);
    if (Code.get(rc) != Code.OK) {
      return;
    }
    NavigableSet<ChannelSpec> nspecs;
    try {
      nspecs=asChannelSet(data);
    }
 catch (    IllegalArgumentException|JSONException e) {
      fault=Optional.of(loggedDistributerException(e,"failed to parse json in %s",path));
      return;
    }
    nodespecs=Optional.of(nspecs);
    final String hval=basename.apply(path);
    if (hval == null || hval.trim().isEmpty()) {
      IllegalArgumentException e=new IllegalArgumentException("path has undiscernable basename: \"" + path + "\"");
      fault=Optional.of(loggedDistributerException(e,"could not derive host from %s",path));
      return;
    }
    Predicate<Map.Entry<ChannelSpec,String>> inSpecs=ChannelSpec.specKeyIn(nspecs,String.class);
    Predicate<Map.Entry<ChannelSpec,String>> thisHost=hostValueIs(hval,ChannelSpec.class);
    int[] sstamp=new int[]{0};
    AtomicInteger dstamp=m_hosts.getReference().get(hval);
    if (dstamp == null) {
      LOG.warn("(" + m_hostId + ") has no data stamp for "+ hval+ ", host registry contains: "+ m_hosts.getReference());
      dstamp=new AtomicInteger(0);
    }
    NavigableMap<ChannelSpec,String> prev=null;
    NavigableSet<ChannelSpec> oldspecs=null;
    ImmutableSortedMap.Builder<ChannelSpec,String> mbldr=null;
    do {
      final int specversion=dstamp.get();
      if (specversion >= stat.getVersion()) {
        return;
      }
      if (!dstamp.compareAndSet(specversion,stat.getVersion())) {
        return;
      }
      prev=m_specs.get(sstamp);
      oldspecs=Maps.filterEntries(prev,thisHost).navigableKeySet();
      mbldr=ImmutableSortedMap.naturalOrder();
      mbldr.putAll(Maps.filterEntries(prev,not(or(thisHost,inSpecs))));
      for (      ChannelSpec spec : nspecs) {
        mbldr.put(spec,hval);
      }
    }
 while (!m_specs.compareAndSet(prev,mbldr.build(),sstamp[0],sstamp[0] + 1));
    if (hval.equals(m_hostId) && !m_done.get()) {
      ChannelAssignment assignment=new ChannelAssignment(oldspecs,nspecs,stat.getVersion());
      for (      ImporterChannelAssignment cassigns : assignment.getImporterChannelAssignments()) {
        if (m_done.get())         break;
        m_eb.post(cassigns);
      }
      if (!assignment.getRemoved().isEmpty()) {
        LOG.info("(" + m_hostId + ") removing the following channel assignments: "+ assignment.getRemoved());
      }
      if (!assignment.getAdded().isEmpty()) {
        LOG.info("(" + m_hostId + ") adding the following channel assignments: "+ assignment.getAdded());
      }
    }
  }
  finally {
    lock.release();
  }
}
