{
  try {
    internalProcessResults(rc,path,ctx,data,stat);
    if (Code.get(rc) != Code.OK) {
      return;
    }
    try {
      nodespecs=Optional.of(asChannelSet(data));
    }
 catch (    IllegalArgumentException|JSONException e) {
      fault=Optional.of(loggedDistributerException(e,"failed to parse json in %s",path));
      return;
    }
    int[] sstamp=new int[]{0};
    AtomicInteger dstamp=m_hosts.getReference().get(host);
    if (dstamp == null) {
      LOG.warn("(" + m_hostId + ") has no data stamp for "+ host+ ", host registry contains: "+ m_hosts.getReference());
      dstamp=new AtomicInteger(0);
    }
    NavigableMap<ChannelSpec,String> prev=null;
    NavigableSet<ChannelSpec> oldspecs=null;
    ImmutableSortedMap.Builder<ChannelSpec,String> mbldr=null;
    do {
      final int specversion=dstamp.get();
      if (specversion >= stat.getVersion()) {
        return;
      }
      if (!dstamp.compareAndSet(specversion,stat.getVersion())) {
        return;
      }
      prev=m_specs.get(sstamp);
      oldspecs=Maps.filterEntries(prev,thisHost).navigableKeySet();
      mbldr=ImmutableSortedMap.naturalOrder();
      mbldr.putAll(Maps.filterEntries(prev,not(thisHost)));
      for (      ChannelSpec spec : nodespecs.get()) {
        mbldr.put(spec,host);
      }
    }
 while (!m_specs.compareAndSet(prev,mbldr.build(),sstamp[0],sstamp[0] + 1));
    if (host.equals(m_hostId) && !m_done.get()) {
      ChannelAssignment assignment=new ChannelAssignment(oldspecs,nodespecs.get(),stat.getVersion());
      if (assignment.hasChanges() && !m_assignq.offer(assignment)) {
        fault=Optional.of(loggedDistributerException(null,"failed to offer channel assignments"));
      }
      if (!assignment.getRemoved().isEmpty()) {
        LOG.info("(" + m_hostId + ") removing the following channel assingments: "+ assignment.getRemoved());
      }
      if (!assignment.getAdded().isEmpty()) {
        LOG.info("(" + m_hostId + ") adding the following channel assingments: "+ assignment.getAdded());
      }
    }
  }
  finally {
    lock.release();
  }
}
