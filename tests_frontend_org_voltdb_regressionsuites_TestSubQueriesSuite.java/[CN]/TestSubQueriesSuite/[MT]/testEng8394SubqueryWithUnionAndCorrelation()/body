{
  Client client=getClient();
  Object[][] paramsArray={{8,"MkqCtZgvOHdpeG",-25010,6.94485579315452628002e-01},{9,"MkqCtZgvOHdpeG",-25010,5.09864294045922816778e-01},{10,"MkqCtZgvOHdpeG",-18299,7.41008138128985693882e-02},{11,"MkqCtZgvOHdpeG",-18299,1.60503696919861771342e-01},{12,"BQIdkCDzTcGaTW",-17683,3.32297930030505339616e-01},{13,"BQIdkCDzTcGaTW",-17683,7.72335099708186811895e-01},{14,"BQIdkCDzTcGaTW",null,2.89585585895251185207e-02},{15,"BQIdkCDzTcGaTW",null,6.75424182636293113369e-01}};
  for (  Object[] params : paramsArray) {
    client.callProcedure("R4.Insert",params);
  }
  String subqueryWithUnionAndCorrelation="SELECT ID, RATIO " + "FROM R4 Z " + "WHERE RATIO > ("+ "    SELECT RATIO "+ "    FROM R4 "+ "    WHERE RATIO = Z.RATIO "+ "  UNION "+ "    SELECT RATIO "+ "    FROM R4 "+ "    WHERE RATIO = Z.RATIO); ";
  VoltTable vt=client.callProcedure("@AdHoc",subqueryWithUnionAndCorrelation).getResults()[0];
  assertFalse(vt.advanceRow());
  vt=client.callProcedure("@AdHoc","SELECT RATIO " + "FROM R4 " + "WHERE RATIO = 0.6944855793154526 "+ "UNION "+ "  SELECT RATIO "+ "  FROM R4 "+ "  WHERE RATIO = 0.6944855793154526;").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(0.6944855793154526,vt.getDouble(0),0.000001);
  assertFalse(vt.advanceRow());
  vt=client.callProcedure("@AdHoc",subqueryWithUnionAndCorrelation).getResults()[0];
  assertFalse(vt.advanceRow());
  client.callProcedure("R4.Insert",new Object[]{16,"IYMzTgzZjBNgji",null,3.03873080947161366971e-01});
  vt=client.callProcedure("@AdHoc","SELECT ID, DESC " + "FROM R4 Z " + "WHERE DESC > ("+ "    SELECT DESC "+ "    FROM R4 WHERE "+ "    DESC <> Z.DESC "+ "  INTERSECT ALL "+ "    SELECT DESC "+ "    FROM R4 "+ "    WHERE DESC = Z.DESC)").getResults()[0];
  assertFalse(vt.advanceRow());
  client.callProcedure("R4.Insert",new Object[]{17,"MkqCtZgvOHdpeG",-25010,6.94485579315452628002e-01});
  vt=client.callProcedure("@AdHoc","SELECT ID, NUM " + "FROM R4 Z " + "WHERE NUM > ("+ "    SELECT NUM "+ "    FROM R4 "+ "    WHERE NUM = Z.NUM "+ "  UNION "+ "    SELECT NUM "+ "    FROM R4 "+ "    WHERE NUM = Z.NUM);").getResults()[0];
  assertFalse(vt.advanceRow());
  client.callProcedure("R4.Insert",new Object[]{18,"MkqCtZgvOHdpeG",-25010,6.94485579315452628002e-01});
  vt=client.callProcedure("@AdHoc","SELECT ID, NUM " + "FROM R4 Z " + "WHERE NUM > ("+ "    SELECT NUM "+ "    FROM R4 "+ "    WHERE NUM = Z.NUM "+ "  INTERSECT ALL "+ "    SELECT NUM "+ "    FROM R4 "+ "    WHERE NUM <> Z.NUM); ").getResults()[0];
  assertFalse(vt.advanceRow());
  paramsArray=new Object[][]{{19,"MkqCtZgvOHdpeG",-25010,6.94485579315452628002e-01},{20,"MkqCtZgvOHdpeG",-25010,5.09864294045922816778e-01},{21,"MkqCtZgvOHdpeG",-18299,7.41008138128985693882e-02},{22,"MkqCtZgvOHdpeG",-18299,1.60503696919861771342e-01},{23,"BQIdkCDzTcGaTW",-17683,3.32297930030505339616e-01},{24,"BQIdkCDzTcGaTW",-17683,7.72335099708186811895e-01},{25,"BQIdkCDzTcGaTW",null,2.89585585895251185207e-02},{26,"BQIdkCDzTcGaTW",null,6.75424182636293113369e-01}};
  for (  Object[] params : paramsArray) {
    client.callProcedure("R4.Insert",params);
  }
  String expectedError=isHSQL() ? "cardinality violation" : "More than one row returned by a scalar/row subquery";
  verifyStmtFails(client,"SELECT ID ID7, ID " + "FROM R4 Z " + "WHERE ID > ("+ "    SELECT ID "+ "    FROM R4 "+ "    WHERE ID = Z.ID "+ "  UNION ALL "+ "    SELECT ID "+ "    FROM R4 "+ "    WHERE ID = Z.ID);",expectedError);
}
