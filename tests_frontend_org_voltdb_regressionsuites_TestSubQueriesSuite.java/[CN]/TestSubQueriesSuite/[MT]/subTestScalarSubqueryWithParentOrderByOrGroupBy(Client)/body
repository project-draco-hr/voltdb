{
  String sql;
  int len=100;
  if (isValgrind()) {
    len=10;
  }
  long[][] expected=new long[len][1];
  for (int i=0; i < len; ++i) {
    client.callProcedure("@AdHoc","insert into R_ENG8145_1 values (?, ?);",i,i * 2);
    client.callProcedure("@AdHoc","insert into R_ENG8145_2 values (?, ?);",i,i * 2);
    long val=len - ((i * 2) + 1);
    if (val < 0)     val=0;
    expected[i][0]=val;
  }
  sql="select (select count(*) from R_ENG8145_1 where ID > parent.num) " + "from R_ENG8145_2 parent " + "order by id;";
  validateTableOfLongs(client,sql,expected);
  sql="select (select count(*) from R_ENG8145_1 where ID > parent.num) " + "from R_ENG8145_2 parent " + "group by id "+ "order by id;";
  validateTableOfLongs(client,sql,expected);
  client.callProcedure("@AdHoc","insert into R_ENG8173_1 values (0, 'foo', 50);");
  client.callProcedure("@AdHoc","insert into R_ENG8173_1 values (1, 'goo', 25);");
  VoltTable vt=client.callProcedure("@AdHoc","select *, (select SUM(NUM) from R_ENG8173_1) " + "from R_ENG8173_1 A1 " + "order by DESC;").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(0,vt.getLong(0));
  assertEquals("foo",vt.getString(1));
  assertEquals(50,vt.getLong(2));
  assertEquals(75,vt.getLong(3));
  assertTrue(vt.advanceRow());
  assertEquals(1,vt.getLong(0));
  assertEquals("goo",vt.getString(1));
  assertEquals(25,vt.getLong(2));
  assertEquals(75,vt.getLong(3));
  assertFalse(vt.advanceRow());
  sql="select (select SUM(NUM) + SUM(ID) from R_ENG8173_1) " + "from R_ENG8173_1 A1 order by DESC;";
  validateTableOfLongs(client,sql,new long[][]{{76},{76}});
  client.callProcedure("@AdHoc","truncate table R4");
  client.callProcedure("@AdHoc","insert into R4 values (0,null,null,null);");
  client.callProcedure("@AdHoc","insert into R4 values (1,'foo1',-1,1.1);");
  vt=client.callProcedure("@AdHoc","select NUM V, (select SUM(RATIO) from R4) " + "from R4 " + "order by V;").getResults()[0];
  assertTrue(vt.advanceRow());
  vt.getLong(0);
  assertTrue(vt.wasNull());
  assertEquals(1.1,vt.getDouble(1));
  assertTrue(vt.advanceRow());
  assertEquals(-1,vt.getLong(0));
  assertEquals(1.1,vt.getDouble(1));
  assertFalse(vt.advanceRow());
  vt=client.callProcedure("@AdHoc","select RATIO V, (select SUM(NUM) from R4) " + "from R4 " + "order by V;").getResults()[0];
  assertTrue(vt.advanceRow());
  vt.getDouble(0);
  assertTrue(vt.wasNull());
  assertEquals(-1,vt.getLong(1));
  assertTrue(vt.advanceRow());
  assertEquals(1.1,vt.getDouble(0));
  assertEquals(-1,vt.getLong(1));
  assertFalse(vt.advanceRow());
  vt=client.callProcedure("@AdHoc","select NUM V, (select MAX(DESC) from R4) " + "from R4 " + "order by V;").getResults()[0];
  assertTrue(vt.advanceRow());
  vt.getLong(0);
  assertTrue(vt.wasNull());
  assertEquals("foo1",vt.getString(1));
  assertTrue(vt.advanceRow());
  assertEquals(-1,vt.getLong(0));
  assertEquals("foo1",vt.getString(1));
  assertFalse(vt.advanceRow());
}
