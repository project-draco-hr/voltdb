{
  Client client=getClient();
  loadData(false);
  VoltTable vt;
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID = (SELECT ID FROM R2 where ID = ?);",2).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{2}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID > ALL (SELECT ID FROM R2 order by ID limit ? offset ?);",2,2).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID = (SELECT ID/2 FROM R2 where ID = R1.ID * 2) order by id;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{1},{2}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.DEPT = (SELECT DEPT FROM R2 where ID = ?) order by id;",1).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{1},{2},{3}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.DEPT = (SELECT DEPT FROM R2 where ID = R1.ID * 2);").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{1}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.DEPT > (SELECT DEPT FROM R2 where ID = 3) order by id;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{4},{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where (SELECT DEPT FROM R2 where ID = 3) != R1.DEPT order by id;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{4},{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.DEPT >= ALL (SELECT DEPT FROM R2) order by id;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{4},{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID > ALL (SELECT ID FROM R2 WHERE R2.ID < 4) order by id;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{4},{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID >= ALL (SELECT ID FROM R2 order by ID asc);").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID >= ALL (SELECT ID FROM R2 order by ID desc);").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{5}});
  vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID <= ALL (SELECT ID FROM R2 order by ID desc);").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{1}});
  vt=client.callProcedure("@AdHoc","select R1.ID, R2.ID FROM R1, R2 where R1.DEPT = R2.DEPT + (SELECT DEPT FROM R2 where ID = ?) order by R1.ID, R2.ID limit 2;",1).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{4,1},{4,2}});
  vt=client.callProcedure("@AdHoc","select R2.ID, R2.ID FROM R1, R2 where R2.ID = (SELECT id FROM R2 where ID = R1.ID) order by R1.ID;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{1,1},{2,2},{3,3},{4,4},{5,5}});
  vt=client.callProcedure("@AdHoc","select R1.ID, R2.ID FROM R1, R2 where R1.DEPT = R2.DEPT + (SELECT DEPT FROM R2 where ID = ?) order by R1.ID, R2.ID limit 1;",1).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{4,1}});
  vt=client.callProcedure("@AdHoc","select R1.ID, R2.ID FROM R1, R2 where R2.DEPT = (SELECT DEPT FROM R2 where ID = R1.ID + 4) order by R1.ID, R2.ID;").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{1,4},{1,5}});
  vt=client.callProcedure("@AdHoc","select max(R1.ID) FROM R1 group by R1.DEPT having count(*) = " + "(select R2.ID from R2 where R2.ID = ?);",2).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{5}});
  vt=client.callProcedure("@AdHoc","select max(R1.ID) FROM R1 group by R1.DEPT having count(*) = " + "(select R2.ID from R2 where R2.ID = R1.DEPT);").getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{5});
  vt=client.callProcedure("@AdHoc","select DEPT, max(R1.ID) FROM R1 group by R1.DEPT having count(*) = " + "(select R2.ID from R2 where R2.ID = R1.DEPT);").getResults()[0];
  validateTableOfLongs(vt,new long[][]{{2,5}});
  try {
    vt=client.callProcedure("@AdHoc","select R1.ID FROM R1 where R1.ID = (SELECT ID FROM R2);").getResults()[0];
    fail();
  }
 catch (  ProcCallException ex) {
    String errMsg=(isHSQL()) ? "cardinality violation" : "More than one row returned by a scalar/row subquery";
    assertTrue(ex.getMessage().contains(errMsg));
  }
}
