{
  Client client=getClient();
  loadData(true);
  VoltTable vt;
  String sql;
  sql="select R1.ID, R1.DEPT, (select ID from R2 where ID = 2) from R1 where R1.ID < 3 " + "order by R1.ID desc;";
  validateTableOfLongs(client,sql,new long[][]{{2,1,2},{1,1,2}});
  vt=client.callProcedure("@AdHoc","select R1.ID, R1.DEPT, (select ID from R2 where ID = ?) from R1 where R1.ID < 3 " + "order by R1.ID desc;",2).getResults()[0];
  validateTableOfLongs(vt,new long[][]{{2,1,2},{1,1,2}});
  sql="select R1.ID, R1.DEPT, (select ID from R2 where R2.ID = R1.ID and R2.WAGE = 50) from R1 where R1.ID > 3 " + "order by R1.ID desc;";
  validateTableOfLongs(client,sql,new long[][]{{7,2,Long.MIN_VALUE},{6,2,Long.MIN_VALUE},{5,2,5},{4,2,Long.MIN_VALUE}});
  sql="select R1.DEPT, (select ID from R2 where R2.ID = 1) from R1 where R1.DEPT = 2;";
  validateTableOfLongs(client,sql,new long[][]{{2,1},{2,1},{2,1},{2,1}});
  if (!isHSQL()) {
    sql="select R1.DEPT, count(*), (select max(dept) from R2 where R2.wage = R1.wage) from R1 " + "group by dept, wage " + "order by dept, wage;";
    validateTableOfLongs(client,sql,new long[][]{{1,1,2},{1,1,1},{1,1,1},{2,1,2},{2,2,2},{2,1,2}});
    sql="select R1.DEPT, count(*), (select sum(dept) from R2 where R2.wage > r1.dept * 10) from R1 " + "group by dept " + "order by dept;";
    validateTableOfLongs(client,sql,new long[][]{{1,3,8},{2,4,7}});
  }
  sql="select R1.DEPT, count(*) as tag from R1 " + "group by dept, (select count(dept) from R2 where R2.wage = R1.wage) " + "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,1},{1,2},{2,1},{2,3}});
  sql="select R1.DEPT, count(*) as tag from R1 " + "group by dept, (select count(dept) from R2 where R2.wage > 15) " + "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,3},{2,4}});
  sql="select R1.DEPT, abs((select count(dept) from R2 where R2.wage > R1.wage) / 2 - 3) as ct, count(*) as tag from R1 " + "group by dept, ct " + "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,2,1},{1,1,2},{2,1,1},{2,3,3}});
  sql="select R1.DEPT, count(*) as tag from R1 " + "group by dept, " + "         (select count(dept) from R2 where R2.wage > 15), "+ "         (select count(dept) from R2 where R2.wage > 15) "+ "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,3},{2,4}});
  sql="select R1.DEPT, count(*) as tag from R1 " + "group by dept, " + "         (select count(dept) from R2 where R2.wage > 15), "+ "         (select count(dept) from R2 where R2.wage > 14) "+ "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,3},{2,4}});
  sql="select R1.DEPT, count(*) as tag from R1 " + "group by dept, (select count(dept) from R2 where R2.wage > 15), " + "(1 + (select count(dept) from R2 where R2.wage > 14) ) "+ "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,3},{2,4}});
  sql="select R1.DEPT, " + "       abs((select count(dept) from R2 where R2.wage > R1.wage) / 2 - 3) as ct1, " + "       abs((select count(dept) from R2 where R2.wage > R1.wage) / 2 - 3) as ct2, "+ "       count(*) as tag "+ "from R1 "+ "group by dept, ct1 "+ "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,2,2,1},{1,1,1,2},{2,1,1,1},{2,3,3,3}});
  sql="select R1.DEPT, " + "abs((select count(dept) from R2 where R2.wage > R1.wage) / 2 - 3) as ct1, " + "(5 + abs((select count(dept) from R2 where R2.wage > R1.wage) / 2 - 3)) as ct2, "+ "count(*) as tag from R1 "+ "group by dept, ct1 "+ "order by dept, tag;";
  validateTableOfLongs(client,sql,new long[][]{{1,2,7,1},{1,1,6,2},{2,1,6,1},{2,3,8,3}});
  try {
    vt=client.callProcedure("@AdHoc","select R1.ID, R1.DEPT, (select ID from R2) from R1 where R1.ID > 3 " + "order by R1.ID desc;").getResults()[0];
  }
 catch (  ProcCallException ex) {
    String errMsg=(isHSQL()) ? "cardinality violation" : "More than one row returned by a scalar/row subquery";
    assertTrue(ex.getMessage().contains(errMsg));
  }
  subTestScalarSubqueryWithOrderByOrGroupBy();
  subTestScalarSubqueryWithNonIntegerType();
}
