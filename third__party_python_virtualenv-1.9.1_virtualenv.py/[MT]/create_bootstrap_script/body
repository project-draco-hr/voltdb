def create_bootstrap_script(extra_text, python_version=''):
    "\n    Creates a bootstrap script, which is like this script but with\n    extend_parser, adjust_options, and after_install hooks.\n\n    This returns a string that (written to disk of course) can be used\n    as a bootstrap script with your own customizations.  The script\n    will be the standard virtualenv.py script, with your extra text\n    added (your extra text should be Python code).\n\n    If you include these functions, they will be called:\n\n    ``extend_parser(optparse_parser)``:\n        You can add or remove options from the parser here.\n\n    ``adjust_options(options, args)``:\n        You can change options here, or change the args (if you accept\n        different kinds of arguments, be sure you modify ``args`` so it is\n        only ``[DEST_DIR]``).\n\n    ``after_install(options, home_dir)``:\n\n        After everything is installed, this function is called.  This\n        is probably the function you are most likely to use.  An\n        example would be::\n\n            def after_install(options, home_dir):\n                subprocess.call([join(home_dir, 'bin', 'easy_install'),\n                                 'MyPackage'])\n                subprocess.call([join(home_dir, 'bin', 'my-package-script'),\n                                 'setup', home_dir])\n\n        This example immediately installs a package, and runs a setup\n        script from that package.\n\n    If you provide something like ``python_version='2.5'`` then the\n    script will start with ``#!/usr/bin/env python2.5`` instead of\n    ``#!/usr/bin/env python``.  You can use this when the script must\n    be run with a particular Python version.\n    "
    filename = __file__
    if filename.endswith('.pyc'):
        filename = filename[:(-1)]
    f = codecs.open(filename, 'r', encoding='utf-8')
    content = f.read()
    f.close()
    py_exe = ('python%s' % python_version)
    content = ((('#!/usr/bin/env %s\n' % py_exe) + '## WARNING: This file is generated\n') + content)
    return content.replace('##EXTEND##', extra_text)
