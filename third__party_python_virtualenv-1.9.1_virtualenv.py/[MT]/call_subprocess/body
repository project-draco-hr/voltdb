def call_subprocess(cmd, show_stdout=True, filter_stdout=None, cwd=None, raise_on_returncode=True, extra_env=None, remove_from_env=None):
    cmd_parts = []
    for part in cmd:
        if (len(part) > 45):
            part = ((part[:20] + '...') + part[(-20):])
        if ((' ' in part) or ('\n' in part) or ('"' in part) or ("'" in part)):
            part = ('"%s"' % part.replace('"', '\\"'))
        if hasattr(part, 'decode'):
            try:
                part = part.decode(sys.getdefaultencoding())
            except UnicodeDecodeError:
                part = part.decode(sys.getfilesystemencoding())
        cmd_parts.append(part)
    cmd_desc = ' '.join(cmd_parts)
    if show_stdout:
        stdout = None
    else:
        stdout = subprocess.PIPE
    logger.debug(('Running command %s' % cmd_desc))
    if (extra_env or remove_from_env):
        env = os.environ.copy()
        if extra_env:
            env.update(extra_env)
        if remove_from_env:
            for varname in remove_from_env:
                env.pop(varname, None)
    else:
        env = None
    try:
        proc = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdin=None, stdout=stdout, cwd=cwd, env=env)
    except Exception:
        e = sys.exc_info()[1]
        logger.fatal(('Error %s while executing command %s' % (e, cmd_desc)))
        raise
    all_output = []
    if (stdout is not None):
        stdout = proc.stdout
        encoding = sys.getdefaultencoding()
        fs_encoding = sys.getfilesystemencoding()
        while 1:
            line = stdout.readline()
            try:
                line = line.decode(encoding)
            except UnicodeDecodeError:
                line = line.decode(fs_encoding)
            if (not line):
                break
            line = line.rstrip()
            all_output.append(line)
            if filter_stdout:
                level = filter_stdout(line)
                if isinstance(level, tuple):
                    (level, line) = level
                logger.log(level, line)
                if (not logger.stdout_level_matches(level)):
                    logger.show_progress()
            else:
                logger.info(line)
    else:
        proc.communicate()
    proc.wait()
    if proc.returncode:
        if raise_on_returncode:
            if all_output:
                logger.notify(('Complete output from command %s:' % cmd_desc))
                logger.notify(('\n'.join(all_output) + '\n----------------------------------------'))
            raise OSError(('Command %s failed with error code %s' % (cmd_desc, proc.returncode)))
        else:
            logger.warn(('Command %s had error code %s' % (cmd_desc, proc.returncode)))
