def processFile(f, fix, approvedLicensesJavaC, approvedLicensesPython):
    for suffix in ('.java', '.cpp', '.cc', '.h', '.hpp', '.py', '.groovy'):
        if f.endswith(suffix):
            break
    else:
        return (0, 0)
    extension = os.path.splitext(f)[1]
    content = readFile(f)
    if fix:
        rmBakFile(f)
    (fixed, found) = (0, 0)
    retval = verifyLicense(f, content, approvedLicensesJavaC, approvedLicensesPython)
    if (retval != 0):
        if (fix > FIX_LICENSES_LEVEL):
            fixed += retval
            if f.endswith('.py'):
                content = fixLicensePython(f, content, approvedLicensesPython)
            else:
                content = fixLicenseJavaC(f, content, approvedLicensesJavaC)
        found += retval
    retval = verifyTabs(f, content)
    if (retval != 0):
        if fix:
            fixed += retval
            content = fixTabs(f, content)
        found += retval
    retval = verifyTrailingWhitespace(f, content)
    if (retval != 0):
        if fix:
            fixed += retval
            content = fixTrailingWhitespace(f, content)
        found += retval
    if (extension in ('.cpp', '.cc', '.h', '.hpp')):
        retval = verifyTrailingNewline(f, content)
        if (retval != 0):
            if fix:
                fixed += retval
                content = fixTrailingNewline(f, content)
            found += retval
    retval = verifySprintf(f, content)
    found += retval
    retval = verifyGetStringChars(f, content)
    found += retval
    retval = verifyGetHostName(f, content)
    found += retval
    retval = verifyGetCanonicalHostName(f, content)
    found += retval
    retval = verifyGetLocalHost(f, content)
    found += retval
    retval = verifyJavaUtilExchanger(f, content)
    found += retval
    return (fixed, found)
