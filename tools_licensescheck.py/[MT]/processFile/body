def processFile(f, fix, approvedLicensesJavaC, approvedLicensesPython):
    for suffix in ('.java', '.cpp', '.cc', '.h', '.hpp', '.py'):
        if f.endswith(suffix):
            break
    else:
        return 0
    content = readFile(f)
    if fix:
        rmBakFile(f)
    result = 0
    retval = verifyLicense(f, content, approvedLicensesJavaC, approvedLicensesPython)
    if (retval != 0):
        if fix:
            if f.endswith('.py'):
                content = fixLicensePython(f, content, approvedLicensesPython)
            else:
                content = fixLicenseJavaC(f, content, approvedLicensesJavaC)
        result += retval
    retval = verifyTabs(f, content)
    if (retval != 0):
        if fix:
            content = fixTabs(f, content)
        result += retval
    retval = verifyTrailingWhitespace(f, content)
    if (retval != 0):
        if fix:
            content = fixTrailingWhitespace(f, content)
        result += retval
    retval = verifySprintf(f, content)
    result += retval
    retval = verifyGetStringChars(f, content)
    result += retval
    return result
