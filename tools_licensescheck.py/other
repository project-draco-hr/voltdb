import os, sys, re
basepath = (os.path.dirname(os.path.dirname(os.path.realpath(__file__))) + os.sep)
ascommithook = False
prunelist = ('hsqldb19b3', 'hsqldb', 'jetty716', 'proj_gen', 'jni_md.h', 'jni.h', 'org_voltdb_jni_ExecutionEngine.h', 'org_voltcore_utils_DBBPool.h', 'org_voltcore_utils_DBBPool_DBBContainer.h', 'simplejson', 'projectfile', 'deploymentfile', 'xml', 'helloworld', 'jaxb', 'pmsg', 'customer-workloads')
FIX_LICENSES_LEVEL = 2
fix = 0
parsing_options = True
for arg in sys.argv[1:]:
    if (parsing_options and (arg[0:2] == '--')):
        if (arg == '--'):
            parsing_options = False
        elif (arg == '--fixws'):
            fix = 1
        elif (arg == '--fixall'):
            fix = (FIX_LICENSES_LEVEL + 1)
        else:
            print ('IGNORING INVALID OPTION: "%s". It must be "--fixws" or "--fixall" or if "%s" is an additional code repo directory, it must follow a standalone "--" option.' % (arg, arg))
testLicenses = [(basepath + 'tools/approved_licenses/mit_x11_hstore_and_voltdb.txt'), (basepath + 'tools/approved_licenses/mit_x11_evanjones_and_voltdb.txt'), (basepath + 'tools/approved_licenses/mit_x11_michaelmccanna_and_voltdb.txt'), (basepath + 'tools/approved_licenses/mit_x11_voltdb.txt')]
srcLicenses = [(basepath + 'tools/approved_licenses/gpl3_hstore_and_voltdb.txt'), (basepath + 'tools/approved_licenses/gpl3_evanjones_and_voltdb.txt'), (basepath + 'tools/approved_licenses/gpl3_base64_and_voltdb.txt'), (basepath + 'tools/approved_licenses/gpl3_voltdb.txt')]
testLicensesPy = [(basepath + 'tools/approved_licenses/mit_x11_voltdb_python.txt')]
srcLicensesPy = [(basepath + 'tools/approved_licenses/gpl3_voltdb_python.txt')]
(fixcount, errcount) = (0, 0)
(fixinc, errinc) = processAllFiles((basepath + 'src'), fix, tuple([readFile(f) for f in srcLicenses]), tuple([readFile(f) for f in srcLicensesPy]))
fixcount += fixinc
errcount += errinc
(fixinc, errinc) = processAllFiles((basepath + 'tests'), fix, tuple([readFile(f) for f in testLicenses]), tuple([readFile(f) for f in testLicensesPy]))
fixcount += fixinc
errcount += errinc
(fixinc, errinc) = processAllFiles((basepath + 'examples'), fix, tuple([readFile(f) for f in testLicenses]), tuple([readFile(f) for f in testLicensesPy]))
fixcount += fixinc
errcount += errinc
if (errcount == 0):
    print 'SUCCESS. Found 0 license text errors, 0 files containing tabs or trailing whitespace.'
elif fix:
    print ('PROGRESS? Tried to fix %d of the %d found license text or whitespace errors. Re-run licensescheck to validate. Consult .lcbak files to recover if something went wrong.' % (fixcount, errcount))
else:
    print ('FAILURE. Found %d license text or whitespace errors.' % errcount)
if (not ascommithook):
    for arg in sys.argv[1:]:
        if (parsing_options and (arg[0:2] == '--')):
            if (arg == '--'):
                parsing_options = False
        elif (arg != '${voltpro}'):
            print ('Checking additional repository: ' + arg)
            if (arg.startswith('.') or arg.startswith('/')):
                pathprefix = arg
            else:
                pathprefix = os.path.join('..', arg)
            proLicenses = [(pathprefix + '/tools/approved_licenses/license.txt')]
            proLicensesPy = [(pathprefix + '/tools/approved_licenses/license_python.txt')]
            (fixcount, errcount) = (0, 0)
            (fixinc, errinc) = processAllFiles((pathprefix + '/src/'), fix, tuple([readFile(f) for f in proLicenses]), tuple([readFile(f) for f in proLicensesPy]))
            fixcount += fixinc
            errcount += errinc
            (fixinc, errinc) = processAllFiles((pathprefix + '/tests/'), fix, tuple([readFile(f) for f in proLicenses]), tuple([readFile(f) for f in proLicensesPy]))
            fixcount += fixinc
            errcount += errinc
            if (errcount == 0):
                print 'SUCCESS. Found 0 license text errors, 0 files containing tabs or trailing whitespace.'
            else:
                print ('FAILURE (%s). Found %d license text or whitespace errors.' % (arg, errcount))
sys.exit(errcount)
