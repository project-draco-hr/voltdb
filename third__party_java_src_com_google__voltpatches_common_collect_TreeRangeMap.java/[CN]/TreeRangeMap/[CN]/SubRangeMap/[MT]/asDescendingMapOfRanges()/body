{
  return new SubRangeMapAsMap(){
    @Override Iterator<Entry<Range<K>,V>> entryIterator(){
      if (subRange.isEmpty()) {
        return Iterators.emptyIterator();
      }
      final Iterator<RangeMapEntry<K,V>> backingItr=entriesByLowerBound.headMap(subRange.upperBound,false).descendingMap().values().iterator();
      return new AbstractIterator<Entry<Range<K>,V>>(){
        @Override protected Entry<Range<K>,V> computeNext(){
          while (backingItr.hasNext()) {
            RangeMapEntry<K,V> entry=backingItr.next();
            if (entry.getUpperBound().compareTo(subRange.lowerBound) <= 0) {
              return endOfData();
            }
            return Maps.immutableEntry(entry.getKey().intersection(subRange),entry.getValue());
          }
          return endOfData();
        }
      }
;
    }
  }
;
}
