{
  if (subRange.isEmpty()) {
    return Iterators.emptyIterator();
  }
  Cut<K> cutToStart=MoreObjects.firstNonNull(entriesByLowerBound.floorKey(subRange.lowerBound),subRange.lowerBound);
  final Iterator<RangeMapEntry<K,V>> backingItr=entriesByLowerBound.tailMap(cutToStart,true).values().iterator();
  return new AbstractIterator<Entry<Range<K>,V>>(){
    @Override protected Entry<Range<K>,V> computeNext(){
      while (backingItr.hasNext()) {
        RangeMapEntry<K,V> entry=backingItr.next();
        if (entry.getLowerBound().compareTo(subRange.upperBound) >= 0) {
          return endOfData();
        }
 else         if (entry.getUpperBound().compareTo(subRange.lowerBound) > 0) {
          return Maps.immutableEntry(entry.getKey().intersection(subRange),entry.getValue());
        }
      }
      return endOfData();
    }
  }
;
}
