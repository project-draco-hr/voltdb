def _MockObjectPointerDiagnoser(msg):
    'Diagnoses the MOP disease, given the error messages by the compiler.'
    gcc_regex = (_GCC_FILE_LINE_RE + "error: request for member \\'gmock_(?P<method>.+)\\' in \\'(?P<mock_object>.+)\\', which is of non-class type \\'(.*::)*(?P<class_name>.+)\\*\\'")
    clang_regex = (_CLANG_FILE_LINE_RE + "error: member reference type \\'(?P<class_name>.*?) *\\' is a pointer; (did you mean|maybe you meant) to use \\'->\\'\\?")
    diagnosis = "\nThe first argument to ON_CALL() and EXPECT_CALL() must be a mock *object*,\nnot a *pointer* to it.  Please write '*(%(mock_object)s)' instead of\n'%(mock_object)s' as your first argument.\n\nFor example, given the mock class:\n\n  class %(class_name)s : public ... {\n    ...\n    MOCK_METHOD0(%(method)s, ...);\n  };\n\nand the following mock instance:\n\n  %(class_name)s* mock_ptr = ...\n\nyou should use the EXPECT_CALL like this:\n\n  EXPECT_CALL(*mock_ptr, %(method)s(...));"
    return _GenericDiagnoser('MOP', 'Mock Object Pointer', [(gcc_regex, diagnosis), (clang_regex, (diagnosis % {'mock_object': 'mock_object', 'method': 'method', 'class_name': '%(class_name)s', }))], msg)
