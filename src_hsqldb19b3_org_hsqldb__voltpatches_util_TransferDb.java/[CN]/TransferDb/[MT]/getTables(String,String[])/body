{
  Vector tTable=new Vector();
  ResultSet result=null;
  tracer.trace("Reading source tables");
  int nbloops=1;
  if (sSchemas != null) {
    nbloops=sSchemas.length;
  }
  try {
    for (int SchemaIdx=0; SchemaIdx < nbloops; SchemaIdx++) {
      if (sSchemas != null && sSchemas[SchemaIdx] != null) {
        result=meta.getTables(sCatalog,sSchemas[SchemaIdx],null,null);
      }
 else {
        try {
          result=meta.getTables(sCatalog,"",null,null);
        }
 catch (        SQLException e) {
          result=meta.getTables(sCatalog,null,null,null);
        }
      }
      while (result.next()) {
        String name=result.getString(3);
        String type=result.getString(4);
        String schema="";
        if (sSchemas != null && sSchemas[SchemaIdx] != null) {
          schema=sSchemas[SchemaIdx];
        }
        if ((type.compareTo("TABLE") == 0) || (type.compareTo("VIEW") == 0)) {
          TransferTable t=new TransferTable(this,name,schema,type,tracer);
          tTable.addElement(t);
        }
 else {
          tracer.trace("Found table of type :" + type + " - this type is ignored");
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new DataAccessPointException(e.getMessage());
  }
 finally {
    if (result != null) {
      try {
        result.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  return (tTable);
}
