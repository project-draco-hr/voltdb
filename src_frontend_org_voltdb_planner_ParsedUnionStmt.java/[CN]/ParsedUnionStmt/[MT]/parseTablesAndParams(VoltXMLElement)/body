{
  assert(stmtNode.children.size() > 1);
  tableList.clear();
  for (  VoltXMLElement childSQL : stmtNode.children) {
    if (childSQL.name.equalsIgnoreCase(SELECT_NODE_NAME)) {
      AbstractParsedStmt childStmt=new ParsedSelectStmt(this.m_paramValues,this.m_db);
      childStmt.parseTablesAndParams(childSQL);
      m_children.add(childStmt);
      if (childStmt.scanColumns != null) {
        Set<String> tableNames=childStmt.scanColumns.keySet();
        Iterator<Table> it=childStmt.tableList.iterator();
        while (it.hasNext()) {
          String tableName=it.next().getTypeName();
          if (!tableNames.contains(tableName)) {
            it.remove();
          }
 else           if (m_uniqueTables.contains(tableName)) {
            throw new PlanningErrorException("Table " + tableName + " appears more than once in the union statement");
          }
 else {
            m_uniqueTables.add(tableName);
          }
        }
      }
 else {
        throw new PlanningErrorException("Scan columns are NULL the UNION statement");
      }
      tableList.addAll(childStmt.tableList);
    }
 else     if (childSQL.name.equalsIgnoreCase(UNION_NODE_NAME)) {
      ParsedUnionStmt childStmt=new ParsedUnionStmt(this.m_paramValues,this.m_db);
      childStmt.m_uniqueTables=m_uniqueTables;
      childStmt.parseTablesAndParams(childSQL);
      m_children.add(childStmt);
      tableList.addAll(childStmt.tableList);
      m_uniqueTables=childStmt.m_uniqueTables;
    }
 else {
      throw new PlanningErrorException("Unexpected Element in UNION statement: " + childSQL.name);
    }
  }
}
