{
  assert(m_memoryDeque.isEmpty());
  m_persistentDeque.parseAndTruncate(new BinaryDequeTruncator(){
    @Override public TruncatorResponse parse(    BBContainer bbc){
      ByteBuffer b=bbc.b();
      b.order(ByteOrder.LITTLE_ENDIAN);
      try {
        b.position(b.position() + 8);
        while (b.hasRemaining()) {
          int rowLength=b.getInt();
          b.position(b.position() + nullArrayLength);
          long rowTxnId=b.getLong();
          exportLog.trace("Evaluating row with txnId " + rowTxnId + " for truncation");
          if (rowTxnId > txnId) {
            exportLog.debug("Export stream " + m_nonce + " found export data to truncate at txn "+ rowTxnId);
            b.position(b.position() - (12 + nullArrayLength));
            if (b.position() == 8) {
              return PersistentBinaryDeque.fullTruncateResponse();
            }
 else {
              b.limit(b.position());
              b.position(0);
              return new ByteBufferTruncatorResponse(b);
            }
          }
 else {
            b.position(b.position() + (rowLength - (8 + nullArrayLength)));
          }
        }
      }
  finally {
        b.order(ByteOrder.BIG_ENDIAN);
      }
      return null;
    }
  }
);
}
