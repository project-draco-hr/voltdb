{
  if (m_memoryDeque.peek() != null && !m_memoryDeque.peek().isPersisted()) {
    ArrayDeque<BBContainer[]> buffersToPush=new ArrayDeque<BBContainer[]>();
    while (m_memoryDeque.peek() != null) {
      StreamBlock sb=m_memoryDeque.peek();
      if (sb.isPersisted()) {
        break;
      }
      m_memoryDeque.poll();
      buffersToPush.offer(sb.asBufferChain());
    }
    if (!buffersToPush.isEmpty()) {
      m_persistentDeque.push(buffersToPush.toArray(new BBContainer[0][0]));
    }
    ArrayList<StreamBlock> blocks=new ArrayList<StreamBlock>();
    for (int ii=0; ii < buffersToPush.size(); ii++) {
      blocks.add(pollPersistentDeque(true));
    }
    for (int ii=blocks.size() - 1; ii >= 0; ii--) {
      m_memoryDeque.offerFirst(blocks.get(ii));
    }
  }
  if (!nofsync) {
    m_persistentDeque.sync();
  }
}
