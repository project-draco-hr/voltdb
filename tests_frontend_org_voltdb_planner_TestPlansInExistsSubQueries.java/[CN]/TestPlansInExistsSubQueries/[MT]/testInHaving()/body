{
{
    String sql="select a from r1 group by a having max(c) in (select c from r2 )";
    failToCompile(sql,HavingErrorMsg);
  }
{
    String sql="select a from r1 " + " group by a having exists (select max(a) from r2) or max(c) > 0";
    AbstractPlanNode pn=compile(sql);
    pn=pn.getChild(0);
    assertTrue(pn instanceof ProjectionPlanNode);
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    assertEquals(true,aggNode.getPostPredicate() == null);
  }
{
    String sql="select a from r1 " + " group by a having exists (select max(a) from r2 limit 0) and max(c) > 0";
    AbstractPlanNode pn=compile(sql);
    pn=pn.getChild(0);
    assertTrue(pn instanceof ProjectionPlanNode);
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    AbstractExpression having=aggNode.getPostPredicate();
    assertEquals(true,ConstantValueExpression.isBooleanFalse(having));
  }
}
