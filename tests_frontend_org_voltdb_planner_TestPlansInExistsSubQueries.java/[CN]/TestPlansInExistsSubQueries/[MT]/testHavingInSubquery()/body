{
  String sql;
  AbstractPlanNode pn;
  AggregatePlanNode aggNode;
  List<AbstractExpression> args;
  AbstractExpression pred;
  AbstractSubqueryExpression sqe;
  AbstractExpression postExpr;
  AbstractExpression re;
  AbstractExpression le;
  sql="select a from r1 where exists " + "(select 1 from r2 where exists  " + " (select 1 from r3 group by c having min(a) > r1.d)) ";
  pn=compile(sql);
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  pred=((SeqScanPlanNode)pn).getPredicate();
  assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
  sqe=(AbstractSubqueryExpression)pred.getLeft();
  args=sqe.getArgs();
  assertEquals(1,args.size());
  assertEquals(1,sqe.getParameterIdxList().size());
  assertEquals("D",((TupleValueExpression)args.get(0)).getColumnName());
  pn=sqe.getSubqueryNode();
  assertTrue(pn instanceof SeqScanPlanNode);
  pred=((SeqScanPlanNode)pn).getPredicate();
  assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
  sqe=(AbstractSubqueryExpression)pred.getLeft();
  pn=sqe.getSubqueryNode();
  pn=pn.getChild(0).getChild(0);
  aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
  assertNotNull(aggNode);
  postExpr=aggNode.getPostPredicate();
  assertNotNull(postExpr);
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,postExpr.getExpressionType());
  re=postExpr.getRight();
  assertEquals(ExpressionType.VALUE_PARAMETER,re.getExpressionType());
  assertEquals(new Integer(0),((ParameterValueExpression)re).getParameterIndex());
  sql="select a from r1 where c in " + " (select max(c) from r2 group by e having min(a) > r1.d)";
  pn=compile(sql);
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  pred=((SeqScanPlanNode)pn).getPredicate();
  assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
  sqe=(AbstractSubqueryExpression)pred.getLeft();
  args=sqe.getArgs();
  assertEquals(2,args.size());
  assertEquals(2,sqe.getParameterIdxList().size());
  assertEquals("D",((TupleValueExpression)args.get(0)).getColumnName());
  assertEquals("C",((TupleValueExpression)args.get(1)).getColumnName());
  pn=sqe.getSubqueryNode();
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
  assertNotNull(aggNode);
  assertEquals(3,aggNode.getOutputSchema().size());
  postExpr=aggNode.getPostPredicate();
  assertEquals(ExpressionType.CONJUNCTION_AND,postExpr.getExpressionType());
  le=postExpr.getLeft();
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,le.getExpressionType());
  assertEquals(new Integer(0),((ParameterValueExpression)le.getRight()).getParameterIndex());
  re=postExpr.getRight();
  assertEquals(ExpressionType.COMPARE_EQUAL,re.getExpressionType());
  assertEquals(new Integer(1),((ParameterValueExpression)re.getLeft()).getParameterIndex());
  sql="select a from r1 where c in " + " (select max(c) from r2 group by e having min(a) > ?) ";
  pn=compile(sql);
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  pred=((SeqScanPlanNode)pn).getPredicate();
  assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
  sqe=(AbstractSubqueryExpression)pred.getLeft();
  assertEquals(1,sqe.getParameterIdxList().size());
  assertEquals(new Integer(1),sqe.getParameterIdxList().get(0));
  pn=sqe.getSubqueryNode();
  pn=pn.getChild(0).getChild(0);
  assertEquals(PlanNodeType.SEQSCAN,pn.getPlanNodeType());
  aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
  assertNotNull(aggNode);
  postExpr=aggNode.getPostPredicate();
  assertEquals(ExpressionType.CONJUNCTION_AND,postExpr.getExpressionType());
  le=postExpr.getLeft();
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,le.getExpressionType());
  assertEquals(ExpressionType.VALUE_PARAMETER,le.getRight().getExpressionType());
  assertEquals(new Integer(0),((ParameterValueExpression)le.getRight()).getParameterIndex());
  re=postExpr.getRight();
  assertEquals(ExpressionType.COMPARE_EQUAL,re.getExpressionType());
  assertEquals(ExpressionType.VALUE_PARAMETER,re.getLeft().getExpressionType());
  assertEquals(new Integer(1),((ParameterValueExpression)re.getLeft()).getParameterIndex());
  sql="select a from r1 where c in " + " (select max(c) from r2 group by e having min(a) > 0)";
  pn=compile(sql);
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
  assertEquals(ExpressionType.OPERATOR_EXISTS,p.getExpressionType());
  AbstractExpression subquery=p.getLeft();
  pn=((AbstractSubqueryExpression)subquery).getSubqueryNode();
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
  assertNotNull(aggNode);
  assertEquals(3,aggNode.getOutputSchema().size());
  postExpr=aggNode.getPostPredicate();
  assertEquals(ExpressionType.CONJUNCTION_AND,postExpr.getExpressionType());
  failToCompile("select max(c) from r1 group by a " + " having count(*) = (select c from r2 where r2.c = r1.a)",HavingErrorMsg);
}
