{
{
    AbstractPlanNode pn=compile("select a from r1 where exists " + "(select 1 from r2 where exists  " + " (select 1 from r3 group by c having min(a) > r1.d)) ");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,p.getExpressionType());
    AbstractSubqueryExpression se=(AbstractSubqueryExpression)p.getLeft();
    List<AbstractExpression> args=se.getArgs();
    assertEquals(1,args.size());
    assertEquals(1,se.getParameterIdxList().size());
    assertEquals("D",((TupleValueExpression)args.get(0)).getColumnName());
    pn=se.getSubqueryNode();
    assertTrue(pn instanceof SeqScanPlanNode);
    p=((SeqScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,p.getExpressionType());
    se=(AbstractSubqueryExpression)p.getLeft();
    pn=se.getSubqueryNode();
    pn=pn.getChild(0).getChild(0);
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    AbstractExpression postExpr=aggNode.getPostPredicate();
    assertNotNull(postExpr);
    assertEquals(ExpressionType.COMPARE_GREATERTHAN,postExpr.getExpressionType());
    AbstractExpression re=postExpr.getRight();
    assertEquals(ExpressionType.VALUE_PARAMETER,re.getExpressionType());
    assertEquals(new Integer(0),((ParameterValueExpression)re).getParameterIndex());
  }
{
    AbstractPlanNode pn=compile("select a from r1 where c in " + " (select max(c) from r2 group by e having min(a) > r1.d) ");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,p.getExpressionType());
    AbstractSubqueryExpression se=(AbstractSubqueryExpression)p.getLeft();
    List<AbstractExpression> args=se.getArgs();
    assertEquals(2,args.size());
    assertEquals(2,se.getParameterIdxList().size());
    assertEquals("D",((TupleValueExpression)args.get(0)).getColumnName());
    assertEquals("C",((TupleValueExpression)args.get(1)).getColumnName());
    pn=se.getSubqueryNode();
    pn=pn.getChild(0);
    assertTrue(pn instanceof LimitPlanNode);
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    assertEquals(3,aggNode.getOutputSchema().size());
    AbstractExpression postExpr=aggNode.getPostPredicate();
    assertEquals(ExpressionType.CONJUNCTION_AND,postExpr.getExpressionType());
    AbstractExpression le=postExpr.getLeft();
    assertEquals(ExpressionType.COMPARE_GREATERTHAN,le.getExpressionType());
    assertEquals(new Integer(0),((ParameterValueExpression)le.getRight()).getParameterIndex());
    AbstractExpression re=postExpr.getRight();
    assertEquals(ExpressionType.COMPARE_EQUAL,re.getExpressionType());
    assertEquals(new Integer(1),((ParameterValueExpression)re.getLeft()).getParameterIndex());
  }
{
    AbstractPlanNode pn=compile("select a from r1 where c in " + " (select max(c) from r2 group by e having min(a) > ?) ");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,p.getExpressionType());
    AbstractSubqueryExpression se=(AbstractSubqueryExpression)p.getLeft();
    assertEquals(1,se.getParameterIdxList().size());
    assertEquals(new Integer(1),se.getParameterIdxList().get(0));
    pn=((AbstractSubqueryExpression)p.getLeft()).getSubqueryNode();
    pn=pn.getChild(0).getChild(0);
    assertEquals(PlanNodeType.SEQSCAN,pn.getPlanNodeType());
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    AbstractExpression aggrExpr=aggNode.getPostPredicate();
    assertEquals(ExpressionType.CONJUNCTION_AND,aggrExpr.getExpressionType());
    AbstractExpression le=aggrExpr.getLeft();
    assertEquals(ExpressionType.COMPARE_GREATERTHAN,le.getExpressionType());
    assertEquals(ExpressionType.VALUE_PARAMETER,le.getRight().getExpressionType());
    assertEquals(new Integer(0),((ParameterValueExpression)le.getRight()).getParameterIndex());
    AbstractExpression re=aggrExpr.getRight();
    assertEquals(ExpressionType.COMPARE_EQUAL,re.getExpressionType());
    assertEquals(ExpressionType.VALUE_PARAMETER,re.getLeft().getExpressionType());
    assertEquals(new Integer(1),((ParameterValueExpression)re.getLeft()).getParameterIndex());
  }
{
    AbstractPlanNode pn=compile("select a from r1 where c in " + " (select max(c) from r2 group by e having min(a) > 0) ");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,p.getExpressionType());
    AbstractExpression subquery=p.getLeft();
    pn=((AbstractSubqueryExpression)subquery).getSubqueryNode();
    pn=pn.getChild(0);
    assertTrue(pn instanceof LimitPlanNode);
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    assertEquals(3,aggNode.getOutputSchema().size());
    AbstractExpression aggrExpr=aggNode.getPostPredicate();
    assertEquals(ExpressionType.CONJUNCTION_AND,aggrExpr.getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select max(c) from r1 group by a " + " having count(*) = (select c from r2 where r2.c = r1.a)");
    pn=pn.getChild(0);
    assertTrue(pn instanceof ProjectionPlanNode);
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AggregatePlanNode aggNode=AggregatePlanNode.getInlineAggregationNode(pn);
    assertNotNull(aggNode);
    assertNotNull(aggNode instanceof HashAggregatePlanNode);
    assertEquals(3,aggNode.getOutputSchema().size());
    AbstractExpression aggrExpr=aggNode.getPostPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,aggrExpr.getExpressionType());
    assertTrue(aggrExpr.getLeft() instanceof TupleValueExpression);
    assertTrue(aggrExpr.getRight() instanceof SelectSubqueryExpression);
  }
}
