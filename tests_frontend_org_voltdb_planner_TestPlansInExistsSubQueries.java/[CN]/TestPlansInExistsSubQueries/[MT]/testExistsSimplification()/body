{
  AbstractPlanNode pn;
  AbstractJoinPlanNode jpn;
  pn=compile("select a from r1 where exists " + " (select a, c  from r2 limit 0) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyCVEPredicate(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),false);
  pn=compile("select a from r1 where exists " + " (select count(*)  from r2 limit 0) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyCVEPredicate(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),false);
  pn=compile("select r1.a from r1 join r2 on (exists " + " (select max(a)  from r2) or r2.a > 0)");
  assertTrue(pn.getChild(0).getChild(0) instanceof AbstractJoinPlanNode);
  jpn=(AbstractJoinPlanNode)pn.getChild(0).getChild(0);
  assertTrue(jpn.getWherePredicate() == null);
  pn=compile("select r1.a from r1 join r2 on exists " + " (select max(a)  from r2 offset 1) ");
  assertTrue(pn.getChild(0).getChild(0) instanceof NestLoopPlanNode);
  jpn=(NestLoopPlanNode)pn.getChild(0).getChild(0);
  verifyCVEPredicate(jpn.getJoinPredicate(),false);
  pn=compile("select a from r1 where exists " + " (select count(*)  from r2 offset 1) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyCVEPredicate(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),false);
  pn=compile("select a from r1 where exists " + " (select max(a)  from r2) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)pn.getChild(0)).getPredicate() == null);
  pn=compile("select a from r1 where exists " + " (select max(a)  from r2 limit ?) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  AbstractExpression pred=((SeqScanPlanNode)pn.getChild(0)).getPredicate();
  assertNotNull(pred);
  assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
  pn=compile("select a from r1 where exists " + " (select a, c  from r2 order by a offset 2) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyTrivialSchemaLimitOffset(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),1,2);
  pn=compile("select a from r1 where exists " + " (select a, c  from r2 order by a limit ?) ");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyTrivialSchemaLimitOffset(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),-1,0);
  pn=compile("select a from r1 where exists " + " (select a, max(c) from r2 group by a order by max(c))");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyAggregateSubquery(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),1,0,false);
  pn=compile("select a from r1 where exists " + " (select a, max(c) from r2 group by a order by max(c) offset 2)");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyAggregateSubquery(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),2,1,false);
  pn=compile("select a from r1 where exists " + " (select a, max(c) from r2 group by a having max(c) > 2 order by max(c))");
  assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
  verifyAggregateSubquery(((SeqScanPlanNode)pn.getChild(0)).getPredicate(),2,1,true);
}
