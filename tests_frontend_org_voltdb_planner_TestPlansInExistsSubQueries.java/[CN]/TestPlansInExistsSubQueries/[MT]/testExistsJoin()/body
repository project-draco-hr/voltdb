{
{
    AbstractPlanNode pn=compile("select a from r1,r2 where exists (" + "select 1 from r3 where r1.d = r3.c and r2.a = r3.c)");
    pn=pn.getChild(0).getChild(0);
    assertEquals(PlanNodeType.NESTLOOP,pn.getPlanNodeType());
    AbstractExpression e=((NestLoopPlanNode)pn).getJoinPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,e.getExpressionType());
    AbstractSubqueryExpression se=(AbstractSubqueryExpression)e.getLeft();
    List<AbstractExpression> args=se.getArgs();
    assertEquals(2,args.size());
    TupleValueExpression tve=(TupleValueExpression)args.get(0);
    if (tve.getTableName().equals("R2")) {
      assertEquals("A",tve.getColumnName());
      tve=(TupleValueExpression)args.get(1);
      assertEquals("R1",tve.getTableName());
      assertEquals("D",tve.getColumnName());
    }
 else {
      assertEquals("R1",tve.getTableName());
      assertEquals("D",tve.getColumnName());
      tve=(TupleValueExpression)args.get(1);
      assertEquals("R2",tve.getTableName());
      assertEquals("A",tve.getColumnName());
    }
    assertEquals(2,se.getParameterIdxList().size());
    pn=se.getSubqueryNode();
    e=((AbstractScanPlanNode)pn).getPredicate();
    AbstractExpression le=e.getLeft();
    assertEquals(ExpressionType.VALUE_PARAMETER,le.getRight().getExpressionType());
    AbstractExpression re=e.getRight();
    assertEquals(ExpressionType.VALUE_PARAMETER,re.getRight().getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select a from r1,r2 where r1.a = r2.a and " + "exists ( select 1 from r3 where r1.a = r3.a)");
    pn=pn.getChild(0).getChild(0);
    assertTrue(pn instanceof NestLoopIndexPlanNode);
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression pred=((SeqScanPlanNode)pn).getPredicate();
    assertTrue(pred != null);
    assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select a from r1,r2 where " + "exists ( select 1 from r3 where r1.a = r3.a and r2.c = r3.c)");
    pn=pn.getChild(0).getChild(0);
    assertTrue(pn instanceof NestLoopPlanNode);
    AbstractExpression pred=((NestLoopPlanNode)pn).getJoinPredicate();
    assertTrue(pred != null);
    assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
    AbstractSubqueryExpression se=(AbstractSubqueryExpression)pred.getLeft();
    List<AbstractExpression> args=se.getArgs();
    assertEquals(2,args.size());
    TupleValueExpression tve=(TupleValueExpression)args.get(0);
    if (tve.getTableName().equals("R2")) {
      assertEquals("C",tve.getColumnName());
      tve=(TupleValueExpression)args.get(1);
      assertEquals("R1",tve.getTableName());
      assertEquals("A",tve.getColumnName());
    }
 else {
      assertEquals("R1",tve.getTableName());
      assertEquals("A",tve.getColumnName());
      tve=(TupleValueExpression)args.get(1);
      assertEquals("R2",tve.getTableName());
      assertEquals("C",tve.getColumnName());
    }
    assertEquals(2,se.getParameterIdxList().size());
    pn=se.getSubqueryNode();
    pred=((AbstractScanPlanNode)pn).getPredicate();
    AbstractExpression le=pred.getLeft();
    assertEquals(ExpressionType.VALUE_PARAMETER,le.getRight().getExpressionType());
    AbstractExpression re=pred.getRight();
    assertEquals(ExpressionType.VALUE_PARAMETER,re.getRight().getExpressionType());
  }
}
