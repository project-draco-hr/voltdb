{
  CatalogChangeResult retval=new CatalogChangeResult();
  retval.clientData=work.clientData;
  retval.clientHandle=work.clientHandle;
  retval.connectionId=work.connectionId;
  retval.adminConnection=work.adminConnection;
  retval.hostname=work.hostname;
  retval.invocationType=work.invocationType;
  retval.originalTxnId=work.originalTxnId;
  retval.originalUniqueId=work.originalUniqueId;
  CatalogContext context=VoltDB.instance().getCatalogContext();
  byte[] newCatalogBytes=work.catalogBytes;
  String deploymentString=work.deploymentString;
  if (work.invocationName.equals("@UpdateApplicationCatalog")) {
    if (newCatalogBytes == null) {
      try {
        newCatalogBytes=context.getCatalogJarBytes();
      }
 catch (      IOException ioe) {
        retval.errorMsg="Unexpected exception retrieving internal catalog bytes: " + ioe.getMessage();
        return retval;
      }
    }
  }
 else   if (work.invocationName.equals("@UpdateClasses")) {
    compilerLog.warn("DELETE STRING: " + work.deploymentString);
    try {
      newCatalogBytes=context.getCatalogJarBytes();
    }
 catch (    IOException ioe) {
      retval.errorMsg="Unexpected exception retrieving internal catalog bytes: " + ioe.getMessage();
      return retval;
    }
    if (work.deploymentString != null) {
      try {
        newCatalogBytes=removeClassesFromCatalog(newCatalogBytes,work.deploymentString);
      }
 catch (      IOException e) {
        retval.errorMsg="Unexpected exception @UpdateClasses deleting classes " + "from catalog: " + e.getMessage();
        return retval;
      }
    }
    if (work.catalogBytes != null) {
      try {
        InMemoryJarfile jarfile=new InMemoryJarfile(work.catalogBytes);
        newCatalogBytes=addJarClassesToCatalog(newCatalogBytes,jarfile);
      }
 catch (      IOException e) {
        retval.errorMsg="Unexpected exception @UpdateClasses adding classes " + "to catalog: " + e.getMessage();
        return retval;
      }
    }
    deploymentString=null;
  }
 else   if (work.invocationName.startsWith("@AdHoc")) {
    try {
      newCatalogBytes=addDDLToCatalog(context.getCatalogJarBytes(),work.adhocDDLStmts);
    }
 catch (    IOException ioe) {
      retval.errorMsg="Unexpected exception applying DDL statements to original catalog: " + ioe.getMessage();
      return retval;
    }
    if (newCatalogBytes == null) {
      retval.errorMsg="Unexpected failure in applying DDL statements to original catalog";
      return retval;
    }
    deploymentString=null;
  }
 else {
    retval.errorMsg="Unexpected work in the AsyncCompilerAgentHelper: " + work.invocationName;
    return retval;
  }
  retval.catalogBytes=newCatalogBytes;
  retval.catalogHash=CatalogUtil.makeCatalogOrDeploymentHash(newCatalogBytes);
  try {
    Pair<InMemoryJarfile,String> loadResults=CatalogUtil.loadAndUpgradeCatalogFromJar(newCatalogBytes);
    String newCatalogCommands=CatalogUtil.getSerializedCatalogStringFromJar(loadResults.getFirst());
    retval.upgradedFromVersion=loadResults.getSecond();
    if (newCatalogCommands == null) {
      retval.errorMsg="Unable to read from catalog bytes";
      return retval;
    }
    Catalog newCatalog=new Catalog();
    newCatalog.execute(newCatalogCommands);
    if (deploymentString == null) {
      CatalogAndIds catalogStuff=CatalogUtil.getCatalogFromZK(VoltDB.instance().getHostMessenger().getZK());
      byte[] deploymentBytes=catalogStuff.deploymentBytes;
      if (deploymentBytes != null) {
        deploymentString=new String(deploymentBytes,"UTF-8");
      }
      if (deploymentBytes == null || deploymentString == null) {
        retval.errorMsg="No deployment file provided and unable to recover previous " + "deployment settings.";
        return retval;
      }
    }
    long result=CatalogUtil.compileDeploymentString(newCatalog,deploymentString,false,false);
    if (result < 0) {
      retval.errorMsg="Unable to read from deployment file string";
      return retval;
    }
    retval.deploymentString=deploymentString;
    retval.deploymentHash=CatalogUtil.makeCatalogOrDeploymentHash(deploymentString.getBytes("UTF-8"));
    retval.expectedCatalogVersion=context.catalogVersion;
    CatalogDiffEngine diff=new CatalogDiffEngine(context.catalog,newCatalog);
    if (!diff.supported()) {
      retval.errorMsg="The requested catalog change(s) are not supported:\n" + diff.errors();
      return retval;
    }
    retval.encodedDiffCommands=Encoder.compressAndBase64Encode(diff.commands());
    retval.requiresSnapshotIsolation=diff.requiresSnapshotIsolation();
    retval.worksWithElastic=diff.worksWithElastic();
  }
 catch (  Exception e) {
    e.printStackTrace();
    retval.encodedDiffCommands=null;
    retval.errorMsg=e.getMessage();
  }
  return retval;
}
