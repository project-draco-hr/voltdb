{
  CatalogChangeResult retval=new CatalogChangeResult();
  retval.clientData=work.clientData;
  retval.clientHandle=work.clientHandle;
  retval.connectionId=work.connectionId;
  retval.adminConnection=work.adminConnection;
  retval.hostname=work.hostname;
  retval.invocationType=work.invocationType;
  retval.originalTxnId=work.originalTxnId;
  retval.originalUniqueId=work.originalUniqueId;
  retval.user=work.user;
  retval.tablesThatMustBeEmpty=new String[0];
  try {
    CatalogContext context=VoltDB.instance().getCatalogContext();
    byte[] newCatalogBytes=work.operationBytes;
    String deploymentString=work.operationString;
    if (work.invocationName.equals("@UpdateApplicationCatalog")) {
      if (newCatalogBytes == null) {
        try {
          newCatalogBytes=context.getCatalogJarBytes();
        }
 catch (        IOException ioe) {
          retval.errorMsg="Unexpected exception retrieving internal catalog bytes: " + ioe.getMessage();
          return retval;
        }
      }
    }
 else     if (work.invocationName.equals("@UpdateClasses")) {
      try {
        newCatalogBytes=context.getCatalogJarBytes();
      }
 catch (      IOException ioe) {
        retval.errorMsg="Unexpected exception retrieving internal catalog bytes: " + ioe.getMessage();
        return retval;
      }
      try {
        newCatalogBytes=modifyCatalogClasses(newCatalogBytes,work.operationString,work.operationBytes);
      }
 catch (      IOException e) {
        retval.errorMsg="Unexpected exception @UpdateClasses modifying classes " + "from catalog: " + e.getMessage();
        return retval;
      }
      deploymentString=null;
    }
 else     if (work.invocationName.startsWith("@AdHoc")) {
      try {
        newCatalogBytes=addDDLToCatalog(context.catalog,context.getCatalogJarBytes(),work.adhocDDLStmts);
      }
 catch (      VoltCompilerException vce) {
        retval.errorMsg=vce.getMessage();
        return retval;
      }
catch (      IOException ioe) {
        retval.errorMsg="Unexpected exception applying DDL statements to " + "original catalog: " + ioe.getMessage();
        return retval;
      }
      if (newCatalogBytes == null) {
        retval.errorMsg="Unexpected failure in applying DDL statements to original catalog";
        return retval;
      }
      deploymentString=null;
    }
 else {
      retval.errorMsg="Unexpected work in the AsyncCompilerAgentHelper: " + work.invocationName;
      return retval;
    }
    Pair<InMemoryJarfile,String> loadResults=null;
    try {
      loadResults=CatalogUtil.loadAndUpgradeCatalogFromJar(newCatalogBytes);
    }
 catch (    IOException ioe) {
      retval.errorMsg=ioe.getMessage();
      return retval;
    }
    newCatalogBytes=loadResults.getFirst().getFullJarBytes();
    retval.catalogBytes=newCatalogBytes;
    retval.catalogHash=loadResults.getFirst().getSha1Hash();
    String newCatalogCommands=CatalogUtil.getSerializedCatalogStringFromJar(loadResults.getFirst());
    retval.upgradedFromVersion=loadResults.getSecond();
    if (newCatalogCommands == null) {
      retval.errorMsg="Unable to read from catalog bytes";
      return retval;
    }
    Catalog newCatalog=new Catalog();
    newCatalog.execute(newCatalogCommands);
    if (deploymentString == null) {
      byte[] deploymentBytes=context.getDeploymentBytes();
      if (deploymentBytes != null) {
        deploymentString=new String(deploymentBytes,Constants.UTF8ENCODING);
      }
      if (deploymentBytes == null || deploymentString == null) {
        retval.errorMsg="No deployment file provided and unable to recover previous " + "deployment settings.";
        return retval;
      }
    }
    String result=CatalogUtil.compileDeploymentString(newCatalog,deploymentString,false);
    if (result != null) {
      retval.errorMsg="Unable to update deployment configuration: " + result;
      return retval;
    }
    retval.deploymentString=deploymentString;
    retval.deploymentHash=CatalogUtil.makeDeploymentHash(deploymentString.getBytes(Constants.UTF8ENCODING));
    retval.expectedCatalogVersion=context.catalogVersion;
    CatalogDiffEngine diff=new CatalogDiffEngine(context.catalog,newCatalog);
    if (!diff.supported()) {
      retval.errorMsg="The requested catalog change(s) are not supported:\n" + diff.errors();
      return retval;
    }
    retval.encodedDiffCommands=Encoder.compressAndBase64Encode(diff.commands());
    retval.tablesThatMustBeEmpty=diff.tablesThatMustBeEmpty();
    retval.reasonsForEmptyTables=diff.reasonsWhyTablesMustBeEmpty();
    retval.requiresSnapshotIsolation=diff.requiresSnapshotIsolation();
    retval.worksWithElastic=diff.worksWithElastic();
  }
 catch (  Exception e) {
    String msg="Unexpected error in adhoc or catalog update: " + e.getClass() + ", "+ e.getMessage();
    compilerLog.warn(msg,e);
    retval.encodedDiffCommands=null;
    retval.errorMsg=msg;
  }
  return retval;
}
