{
  CatalogChangeResult retval=new CatalogChangeResult();
  retval.clientData=work.clientData;
  retval.clientHandle=work.clientHandle;
  retval.connectionId=work.connectionId;
  retval.adminConnection=work.adminConnection;
  retval.hostname=work.hostname;
  retval.invocationType=work.invocationType;
  retval.originalTxnId=work.originalTxnId;
  retval.originalUniqueId=work.originalUniqueId;
  retval.tablesThatMustBeEmpty=new String[0];
  CatalogContext context=VoltDB.instance().getCatalogContext();
  byte[] newCatalogBytes=work.catalogBytes;
  if (work.catalogBytes == null) {
    try {
      newCatalogBytes=context.getCatalogJarBytes();
    }
 catch (    IOException ioe) {
      retval.errorMsg="Unexpected exception retrieving internal catalog bytes: " + ioe.getMessage();
      return retval;
    }
    if (work.adhocDDLStmts != null) {
      try {
        newCatalogBytes=addDDLToCatalog(newCatalogBytes,work.adhocDDLStmts);
      }
 catch (      IOException ioe) {
        retval.errorMsg=ioe.getMessage();
        return retval;
      }
      if (newCatalogBytes == null) {
        retval.errorMsg="Unexpected failure in applying DDL statements to original catalog";
        return retval;
      }
    }
  }
  retval.catalogBytes=newCatalogBytes;
  retval.catalogHash=CatalogUtil.makeCatalogOrDeploymentHash(newCatalogBytes);
  retval.deploymentString=work.deploymentString;
  try {
    Pair<String,String> loadResults=CatalogUtil.loadAndUpgradeCatalogFromJar(newCatalogBytes,null);
    String newCatalogCommands=loadResults.getFirst();
    retval.upgradedFromVersion=loadResults.getSecond();
    if (newCatalogCommands == null) {
      retval.errorMsg="Unable to read from catalog bytes";
      return retval;
    }
    Catalog newCatalog=new Catalog();
    newCatalog.execute(newCatalogCommands);
    String deploymentString=work.deploymentString;
    if (deploymentString == null) {
      byte[] deploymentBytes=VoltDB.instance().getHostMessenger().getZK().getData(VoltZK.deploymentBytes,false,null);
      if (deploymentBytes != null) {
        deploymentString=new String(deploymentBytes,"UTF-8");
      }
      if (deploymentBytes == null || deploymentString == null) {
        retval.errorMsg="No deployment file provided and unable to recover previous " + "deployment settings.";
        return retval;
      }
    }
    long result=CatalogUtil.compileDeploymentString(newCatalog,deploymentString,false,false);
    if (result < 0) {
      retval.errorMsg="Unable to read from deployment file string";
      return retval;
    }
    retval.deploymentHash=CatalogUtil.makeCatalogOrDeploymentHash(deploymentString.getBytes("UTF-8"));
    retval.expectedCatalogVersion=context.catalogVersion;
    CatalogDiffEngine diff=new CatalogDiffEngine(context.catalog,newCatalog);
    if (!diff.supported()) {
      retval.errorMsg="The requested catalog change(s) are not supported:\n" + diff.errors();
      return retval;
    }
    retval.encodedDiffCommands=Encoder.compressAndBase64Encode(diff.commands());
    retval.tablesThatMustBeEmpty=diff.tablesThatMustBeEmpty();
    retval.reasonsForEmptyTables=diff.reasonsWhyTablesMustBeEmpty();
    retval.requiresSnapshotIsolation=diff.requiresSnapshotIsolation();
    retval.worksWithElastic=diff.worksWithElastic();
  }
 catch (  Exception e) {
    e.printStackTrace();
    retval.encodedDiffCommands=null;
    retval.errorMsg=e.getMessage();
  }
  return retval;
}
