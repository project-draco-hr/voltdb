{
  StringBuffer sb=new StringBuffer();
  sb.append(Tokens.T_CREATE).append(' ');
  if (isTemp()) {
    sb.append(Tokens.T_GLOBAL).append(' ');
    sb.append(Tokens.T_TEMPORARY).append(' ');
  }
 else   if (isText()) {
    sb.append(Tokens.T_TEXT).append(' ');
  }
 else   if (isCached()) {
    sb.append(Tokens.T_CACHED).append(' ');
  }
 else {
    sb.append(Tokens.T_MEMORY).append(' ');
  }
  sb.append(Tokens.T_TABLE).append(' ');
  sb.append(getName().getSchemaQualifiedStatementName());
  sb.append('(');
  int columns=getColumnCount();
  int[] pk=getPrimaryKey();
  Constraint pkConst=getPrimaryConstraint();
  for (int j=0; j < columns; j++) {
    ColumnSchema column=getColumn(j);
    String colname=column.getName().statementName;
    Type type=column.getDataType();
    if (j > 0) {
      sb.append(',');
    }
    sb.append(colname);
    sb.append(' ');
    sb.append(type.getTypeDefinition());
    String defaultString=column.getDefaultSQL();
    if (defaultString != null) {
      sb.append(' ').append(Tokens.T_DEFAULT).append(' ');
      sb.append(defaultString);
    }
    if (column.isIdentity()) {
      sb.append(' ').append(column.getIdentitySequence().getSQL());
    }
    if (!column.isNullable()) {
      Constraint c=getNotNullConstraintForColumn(j);
      if (c != null && !c.getName().isReservedName()) {
        sb.append(' ').append(Tokens.T_CONSTRAINT).append(' ').append(c.getName().statementName);
      }
      sb.append(' ').append(Tokens.T_NOT).append(' ').append(Tokens.T_NULL);
    }
    if (pk.length == 1 && j == pk[0] && pkConst.getName().isReservedName()) {
      sb.append(' ').append(Tokens.T_PRIMARY).append(' ').append(Tokens.T_KEY);
    }
  }
  Constraint[] constraintList=getConstraints();
  for (int j=0, vSize=constraintList.length; j < vSize; j++) {
    Constraint c=constraintList[j];
    if (!c.isForward) {
      String d=c.getSQL();
      if (d.length() > 0) {
        sb.append(',');
        sb.append(d);
      }
    }
  }
  sb.append(')');
  if (onCommitPreserve()) {
    sb.append(' ').append(Tokens.T_ON).append(' ');
    sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
    sb.append(' ').append(Tokens.T_ROWS);
  }
  return sb.toString();
}
