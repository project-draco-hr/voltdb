{
  long limit;
switch (typeCode) {
case Types.SQL_INTERVAL_YEAR:
    limit=DTIType.precisionLimits[(int)precision] * 12;
  break;
case Types.SQL_INTERVAL_YEAR_TO_MONTH:
limit=DTIType.precisionLimits[(int)precision] * 12;
limit+=12;
break;
case Types.SQL_INTERVAL_MONTH:
limit=DTIType.precisionLimits[(int)precision];
break;
case Types.SQL_INTERVAL_DAY:
limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;
break;
case Types.SQL_INTERVAL_DAY_TO_HOUR:
limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;
break;
case Types.SQL_INTERVAL_DAY_TO_MINUTE:
limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;
break;
case Types.SQL_INTERVAL_DAY_TO_SECOND:
limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;
break;
case Types.SQL_INTERVAL_HOUR:
limit=DTIType.precisionLimits[(int)precision] * 60 * 60;
break;
case Types.SQL_INTERVAL_HOUR_TO_MINUTE:
limit=DTIType.precisionLimits[(int)precision] * 60 * 60;
break;
case Types.SQL_INTERVAL_HOUR_TO_SECOND:
limit=DTIType.precisionLimits[(int)precision] * 60 * 60;
break;
case Types.SQL_INTERVAL_MINUTE:
limit=DTIType.precisionLimits[(int)precision] * 60;
break;
case Types.SQL_INTERVAL_MINUTE_TO_SECOND:
limit=DTIType.precisionLimits[(int)precision] * 60;
break;
case Types.SQL_INTERVAL_SECOND:
limit=DTIType.precisionLimits[(int)precision];
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");
}
return limit;
}
