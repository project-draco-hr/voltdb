{
  int group=startType > Types.SQL_INTERVAL_MONTH ? Types.SQL_INTERVAL_SECOND : Types.SQL_INTERVAL_MONTH;
  if (defaultPrecision) {
    return new IntervalType(group,type,precision,fractionPrecision,startType,endType,defaultPrecision);
  }
switch (type) {
case Types.SQL_INTERVAL_YEAR:
    if (precision == DTIType.defaultIntervalPrecision) {
      return SQL_INTERVAL_YEAR;
    }
  break;
case Types.SQL_INTERVAL_YEAR_TO_MONTH:
if (precision == DTIType.defaultIntervalPrecision) {
  return SQL_INTERVAL_YEAR_TO_MONTH;
}
break;
case Types.SQL_INTERVAL_MONTH:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_MONTH;
}
break;
case Types.SQL_INTERVAL_DAY:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_DAY;
}
break;
case Types.SQL_INTERVAL_DAY_TO_HOUR:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_DAY_TO_HOUR;
}
break;
case Types.SQL_INTERVAL_DAY_TO_MINUTE:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_DAY_TO_MINUTE;
}
break;
case Types.SQL_INTERVAL_DAY_TO_SECOND:
if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {
return SQL_INTERVAL_DAY_TO_SECOND;
}
break;
case Types.SQL_INTERVAL_HOUR:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_HOUR;
}
break;
case Types.SQL_INTERVAL_HOUR_TO_MINUTE:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_HOUR_TO_MINUTE;
}
break;
case Types.SQL_INTERVAL_MINUTE:
if (precision == DTIType.defaultIntervalPrecision) {
return SQL_INTERVAL_MINUTE;
}
break;
case Types.SQL_INTERVAL_HOUR_TO_SECOND:
if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {
return SQL_INTERVAL_HOUR_TO_SECOND;
}
break;
case Types.SQL_INTERVAL_MINUTE_TO_SECOND:
if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {
return SQL_INTERVAL_MINUTE_TO_SECOND;
}
break;
case Types.SQL_INTERVAL_SECOND:
if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {
return SQL_INTERVAL_SECOND;
}
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");
}
return new IntervalType(group,type,precision,fractionPrecision,startType,endType,defaultPrecision);
}
