{
  final double DISTANCE_EPSILON=1.0e-8;
  Client client=getClient();
  populateTables(client);
  String sql;
  sql="create procedure DWithin_Proc as select borders.name, places.name, distance(borders.region, places.loc) as distance " + "from borders, places where DWithin(borders.region, places.loc, ?) and borders.pk = 1 " + "order by distance, borders.pk, places.pk;";
  client.callProcedure("@AdHoc",sql);
  client.callProcedure("places.Insert",50,"San Jose",GeographyPointValue.fromWKT("POINT(-121.903692 37.325464)"));
  client.callProcedure("places.Insert",51,"Boston",GeographyPointValue.fromWKT("POINT(-71.069862 42.338100)"));
  VoltTable vt1;
  VoltTable vt2;
  String prefix;
  vt1=client.callProcedure("DWithin_Proc",50000.1).getResults()[0];
  assertApproximateContentOfTable(new Object[][]{{"Wyoming","Cheyenne",0.0},{"Wyoming","Point on N Wyoming Border",0.0},{"Wyoming","Point on E Wyoming Border",0.0},{"Wyoming","Point On S Wyoming Border",0.0},{"Wyoming","Point On W Wyoming Border",0.0},{"Wyoming","East Point Not On Wyoming Border",1.9770308670798656E-10},{"Wyoming","West Point Not on Wyoming Border",495.81208205561956},{"Wyoming","Point near N Colorado border",2382.072566994318},{"Wyoming","North Point Not On Colorado Border",4045.11696044222},{"Wyoming","North Point Not On Wyoming Border",12768.354425089678},{"Wyoming","Fort Collins",48820.514427535185}},vt1,DISTANCE_EPSILON);
  vt1.resetRowPosition();
  prefix="Assertion failed comparing results from DWithin and Distance functions: ";
  sql="select borders.name, places.name, distance(borders.region, places.loc) as distance " + "from borders, places where (distance(borders.region, places.loc) <= 50000.1) and borders.pk = 1 " + "order by distance, borders.pk, places.pk;";
  vt2=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertTablesAreEqual(prefix,vt2,vt1);
  sql="select A.name, B.name, distance(A.loc, B.loc) as distance " + "from places A, places B where DWithin(A.loc, B.loc, 100000) and A.pk <> B.pk " + "order by distance, A.pk, B.pk;";
  vt1=client.callProcedure("@AdHoc",sql).getResults()[0];
  sql="select A.name, B.name, distance(A.loc, B.loc) as distance " + "from places A, places B where distance(A.loc, B.loc) <= 100000 and A.pk <> B.pk " + "order by distance, A.pk, B.pk;";
  vt2=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertTablesAreEqual(prefix,vt2,vt1);
  prefix="Assertion failed comparing results from DWithin and Contains functions: ";
  sql="select borders.name, places.name " + "from borders, places where DWithin(borders.region, places.loc, 0) " + "order by borders.pk, places.pk;";
  vt1=client.callProcedure("@AdHoc",sql).getResults()[0];
  sql="select borders.name, places.name " + "from borders, places where Contains(borders.region, places.loc) " + "order by borders.pk, places.pk;";
  vt2=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertTablesAreEqual(prefix,vt2,vt1);
  sql="select borders.name, places.name " + "from borders, places where NOT DWithin(borders.region, places.loc, 0) " + "order by borders.pk, places.pk;";
  vt1=client.callProcedure("@AdHoc",sql).getResults()[0];
  sql="select borders.name, places.name " + "from borders, places where NOT Contains(borders.region, places.loc) " + "order by borders.pk, places.pk;";
  vt2=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertTablesAreEqual(prefix,vt2,vt1);
}
