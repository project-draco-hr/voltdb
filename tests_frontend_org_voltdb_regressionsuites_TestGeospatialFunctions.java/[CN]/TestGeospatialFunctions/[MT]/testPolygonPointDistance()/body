{
  final double DISTANCE_EPSILON=1.0e-8;
  Client client=getClient();
  populateTables(client);
  VoltTable vt;
  String sql="select borders.name, places.name, distance(borders.region, places.loc) as distance " + "from borders, places where borders.pk = 1" + "order by distance, places.pk";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertApproximateContentOfTable(new Object[][]{{"Wyoming","Neverwhere",Double.MIN_VALUE},{"Wyoming","Cheyenne",0.0},{"Wyoming","Point on N Wyoming Border",0.0},{"Wyoming","Point on E Wyoming Border",0.0},{"Wyoming","Point On S Wyoming Border",0.0},{"Wyoming","Point On W Wyoming Border",0.0},{"Wyoming","East Point Not On Wyoming Border",1.9770281362922971E-10},{"Wyoming","West not On South Wyoming Border",495.8113972117496},{"Wyoming","Point near N Colorado border",2382.0692767400983},{"Wyoming","Point Not On N Colorado Border",4045.111373096421},{"Wyoming","North Point Not On Wyoming Border",12768.336788711755},{"Wyoming","Fort Collins",48820.44699386174},{"Wyoming","Denver",146450.36252816164},{"Wyoming","Point On S Colorado Border",453545.4800250064},{"Wyoming","Albuquerque",659769.4012428687}},vt,DISTANCE_EPSILON);
  sql="select borders.name, places.name, distance(borders.region, places.loc) as distance " + "from borders, places " + "order by borders.pk";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  sql="select borders.name, places.name, distance(places.loc, borders.region) as distance " + "from borders, places " + "order by borders.pk";
  VoltTable vt1=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertEquals(vt1,vt);
  sql="select borders.name as State, places.name as Location, " + "distance(centroid(borders.region), places.loc) as distance " + "from borders, places where contains(borders.region, places.loc) "+ "order by distance";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertApproximateContentOfTable(new Object[][]{{"Colorado","Denver",90126.31686125314},{"Colorado","Fort Collins",177132.44115469826},{"Colorado with a hole around Denver","Fort Collins",182956.3035588355},{"Colorado","Point near N Colorado border",223103.69736948845},{"Colorado with a hole around Denver","Point near N Colorado border",228833.50418470264},{"Wyoming","Point On W Wyoming Border",280063.8833833934},{"Wyoming","Point on E Wyoming Border",282621.71798313083},{"Wyoming","Point on N Wyoming Border",295383.69047235645},{"Wyoming","Cheyenne",308378.4910583776},{"Wyoming","Point On S Wyoming Border",355573.95574694296}},vt,DISTANCE_EPSILON);
  ProcCallException exception=null;
  try {
    sql="select places.name, distance(borders.region, borders.region) " + "from borders, places where borders.pk = places.pk " + "order by borders.pk";
    vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  }
 catch (  ProcCallException excp) {
    exception=excp;
    assertTrue(exception.getMessage().contains("incompatible data type in operation"));
    assertTrue(exception.getMessage().contains("Distance between two polygons not supported"));
  }
 finally {
    assertNotNull(exception);
  }
  exception=null;
  try {
    sql="select places.name, distance(borders.region, borders.pk) " + "from borders, places where borders.pk = places.pk " + "order by borders.pk";
    vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  }
 catch (  ProcCallException excp) {
    exception=excp;
    assertTrue(exception.getMessage().contains("Error compiling query"));
    assertTrue(exception.getMessage().contains("incompatible data type in operation"));
  }
 finally {
    assertNotNull(exception);
  }
}
