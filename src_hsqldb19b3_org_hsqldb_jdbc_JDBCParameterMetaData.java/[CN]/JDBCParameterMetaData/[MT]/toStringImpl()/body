{
  StringBuffer sb;
  Method[] methods;
  Method method;
  int count;
  sb=new StringBuffer();
  sb.append(super.toString());
  count=getParameterCount();
  if (count == 0) {
    sb.append("[parameterCount=0]");
    return sb.toString();
  }
  methods=getClass().getDeclaredMethods();
  sb.append('[');
  int len=methods.length;
  for (int i=0; i < count; i++) {
    sb.append('\n');
    sb.append("    parameter_");
    sb.append(i + 1);
    sb.append('=');
    sb.append('[');
    for (int j=0; j < len; j++) {
      method=methods[j];
      if (!Modifier.isPublic(method.getModifiers())) {
        continue;
      }
      if (method.getParameterTypes().length != 1) {
        continue;
      }
      sb.append(method.getName());
      sb.append('=');
      sb.append(method.invoke(this,new Object[]{new Integer(i + 1)}));
      if (j + 1 < len) {
        sb.append(',');
        sb.append(' ');
      }
    }
    sb.append(']');
    if (i + 1 < count) {
      sb.append(',');
      sb.append(' ');
    }
  }
  sb.append('\n');
  sb.append(']');
  return sb.toString();
}
