{
  String CONN_NAME="ryanlovestheyankees";
  ExportDataSink dut=new ExportDataSink(PARTITION_ID,TABLE_SIGNATURE,"coffeetable",new TestExportDecoder(new AdvertisedDataSource(PARTITION_ID,TABLE_SIGNATURE,"coffeetable",null,null)));
  dut.addExportConnection(CONN_NAME);
  assertNull(dut.getTxQueue(CONN_NAME).peek());
  dut.work();
  assertNotNull(dut.getTxQueue(CONN_NAME).peek());
  ExportProtoMessage m=dut.getTxQueue(CONN_NAME).poll();
  assertTrue(m.isPoll());
  assertFalse(m.isAck());
  m=new ExportProtoMessage(PARTITION_ID,TABLE_SIGNATURE);
  m.pollResponse(0,makeFakePollData(10));
  dut.getRxQueue(CONN_NAME).offer(m);
  dut.work();
  assertNotNull(dut.getTxQueue(CONN_NAME).peek());
  m=dut.getTxQueue(CONN_NAME).poll();
  assertTrue(m.isPoll());
  assertTrue(m.isAck());
  assertEquals(0,m.getAckOffset());
  m=new ExportProtoMessage(PARTITION_ID,TABLE_SIGNATURE);
  m.pollResponse(10,makeFakePollData(20));
  dut.getRxQueue(CONN_NAME).offer(m);
  dut.work();
  assertNotNull(dut.getTxQueue(CONN_NAME).peek());
  m=dut.getTxQueue(CONN_NAME).poll();
  assertTrue(m.isPoll());
  assertTrue(m.isAck());
  assertEquals(10,m.getAckOffset());
  m=new ExportProtoMessage(PARTITION_ID,TABLE_SIGNATURE);
  m.pollResponse(20,makeFakePollData(0));
  dut.getRxQueue(CONN_NAME).offer(m);
  dut.work();
  assertNotNull(dut.getTxQueue(CONN_NAME).peek());
  m=dut.getTxQueue(CONN_NAME).poll();
  assertTrue(m.isPoll());
  assertFalse(m.isAck());
}
