def ForeignKeySchemaBuilder(table):
    '\n    Returns a dictionary loaded with all of the foreign keys available in the table.\n    ``table`` must be an instance of TableSchema.\n\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases[name].tables[name].foreign_keys`` when you create an instance of SchemaObject\n    '
    conn = table.parent.parent.connection
    fkeys = OrderedDict()
    sql = "\n            SELECT K.CONSTRAINT_NAME,\n                   K.TABLE_SCHEMA, K.TABLE_NAME, K.COLUMN_NAME,\n                   K.REFERENCED_TABLE_SCHEMA, K.REFERENCED_TABLE_NAME, K.REFERENCED_COLUMN_NAME,\n                   K.POSITION_IN_UNIQUE_CONSTRAINT\n            FROM information_schema.KEY_COLUMN_USAGE K, information_schema.TABLE_CONSTRAINTS T\n            WHERE K.CONSTRAINT_NAME = T.CONSTRAINT_NAME\n            AND T.CONSTRAINT_TYPE = 'FOREIGN KEY'\n            AND K.CONSTRAINT_SCHEMA='%s'\n            AND K.TABLE_NAME='%s'\n            "
    constraints = conn.execute((sql % (table.parent.name, table.name)))
    if (not constraints):
        return fkeys
    table_def = conn.execute(('SHOW CREATE TABLE `%s`.`%s`' % (table.parent.name, table.name)))[0]['Create Table']
    for fk in constraints:
        n = fk['CONSTRAINT_NAME']
        if (n not in fkeys):
            FKItem = ForeignKeySchema(name=n, parent=table)
            FKItem.symbol = n
            FKItem.table_schema = fk['TABLE_SCHEMA']
            FKItem.table_name = fk['TABLE_NAME']
            FKItem.referenced_table_schema = fk['REFERENCED_TABLE_SCHEMA']
            FKItem.referenced_table_name = fk['REFERENCED_TABLE_NAME']
            reference_options = re.search((REGEX_FK_REFERENCE_OPTIONS % n), table_def, re.X)
            if reference_options:
                FKItem.update_rule = (reference_options.group('on_update') or 'RESTRICT')
                FKItem.delete_rule = (reference_options.group('on_delete') or 'RESTRICT')
            fkeys[n] = FKItem
        if (fk['COLUMN_NAME'] not in fkeys[n].columns):
            fkeys[n].columns.insert(fk['POSITION_IN_UNIQUE_CONSTRAINT'], fk['COLUMN_NAME'])
        if (fk['REFERENCED_COLUMN_NAME'] not in fkeys[n].referenced_columns):
            fkeys[n].referenced_columns.insert(fk['POSITION_IN_UNIQUE_CONSTRAINT'], fk['REFERENCED_COLUMN_NAME'])
    return fkeys
