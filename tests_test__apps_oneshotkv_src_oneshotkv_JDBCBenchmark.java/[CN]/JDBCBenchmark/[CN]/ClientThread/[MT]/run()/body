{
  Connection con=null;
  try {
    con=DriverManager.getConnection(url,"","");
    final CallableStatement getCS=con.prepareCall("{call Get(?)}");
    final CallableStatement putCS=con.prepareCall("{call Put(?,?)}");
    long endTime=System.currentTimeMillis() + (1000l * this.duration);
    Random rand=new Random();
    while (endTime > System.currentTimeMillis()) {
      if (rand.nextDouble() < getPutRatio) {
        try {
          getCS.setString(1,processor.generateRandomKeyForRetrieval());
          ResultSet result=getCS.executeQuery();
          if (result.next()) {
            final PayloadProcessor.Pair pair=processor.retrieveFromStore(result.getString(1),result.getBytes(2));
            GetStoreResults.incrementAndGet(0);
            GetCompressionResults.addAndGet(0,pair.getStoreValueLength());
            GetCompressionResults.addAndGet(1,pair.getRawValueLength());
          }
 else           GetStoreResults.incrementAndGet(1);
        }
 catch (        Exception x) {
          GetStoreResults.incrementAndGet(1);
        }
      }
 else {
        final PayloadProcessor.Pair pair=processor.generateForStore();
        try {
          putCS.setString(1,pair.Key);
          putCS.setBytes(2,pair.getStoreValue());
          putCS.executeUpdate();
          PutStoreResults.incrementAndGet(0);
        }
 catch (        Exception x) {
          PutStoreResults.incrementAndGet(1);
        }
 finally {
          PutCompressionResults.addAndGet(0,pair.getStoreValueLength());
          PutCompressionResults.addAndGet(1,pair.getRawValueLength());
        }
      }
    }
  }
 catch (  Exception x) {
    System.err.println("Exception: " + x);
    x.printStackTrace();
  }
 finally {
    try {
      con.close();
    }
 catch (    Exception x) {
    }
  }
}
