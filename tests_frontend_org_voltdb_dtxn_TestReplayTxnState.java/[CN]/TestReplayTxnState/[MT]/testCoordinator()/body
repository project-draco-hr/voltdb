{
  final ExecutionSite site=mock(ExecutionSite.class);
  when(site.getSiteId()).thenReturn(1L);
  doNothing().when(site).beginNewTxn(Mockito.any(TransactionState.class));
  when(site.getSiteTracker()).thenReturn(tracker);
  final FragmentResponseMessage frmColFake=new FragmentResponseMessage(ftmCol,1);
  frmColFake.setRecovering(true);
  frmColFake.addDependency(13,result);
  frmColFake.setStatus(FragmentResponseMessage.SUCCESS,null);
  final FragmentResponseMessage frmColReal=new FragmentResponseMessage(ftmCol,2);
  frmColReal.setRecovering(false);
  frmColReal.addDependency(13,result);
  frmColReal.setStatus(FragmentResponseMessage.SUCCESS,null);
  InitiateTaskMessage initiateNotice=new InitiateTaskMessage(0,1,2,false,false,invocation,2,tracker.getAllSitesExcluding(1));
  irm=new InitiateResponseMessage(initiateNotice);
  final ClientResponseImpl response=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[0],"");
  irm.setResults(response);
  final InitiateResponseMessage f_irm=irm;
  final MultiPartitionParticipantTxnState mpTxn=new MultiPartitionParticipantTxnState(mbox,site,initiateNotice);
  assertTrue(mpTxn.isCoordinator());
  when(site.processFragmentTask(Mockito.any(TransactionState.class),any(HashMap.class),any(VoltMessage.class))).then(new Answer<FragmentResponseMessage>(){
    @Override public FragmentResponseMessage answer(    InvocationOnMock invocation) throws Throwable {
      if (invocation.getArguments()[2] == ftmCol) {
        mpTxn.processRemoteWorkResponse(frmColReal);
        return frmColFake;
      }
 else       if (invocation.getArguments()[2] == ftmAgg) {
        return frmW;
      }
 else       fail();
      assert(false);
      return null;
    }
  }
);
  when(site.processInitiateTask(Mockito.any(TransactionState.class),any(VoltMessage.class))).then(new Answer<InitiateResponseMessage>(){
    @Override public InitiateResponseMessage answer(    InvocationOnMock invocation) throws Throwable {
      mpTxn.createFragmentWork(new long[]{2},ftmCol);
      mpTxn.createLocalFragmentWork(ftmCol,false);
      mpTxn.createLocalFragmentWork(ftmAgg,true);
      mpTxn.doWork(true);
      mpTxn.processRemoteWorkResponse(frmColReal);
      while (!mpTxn.m_missingDependencies.isEmpty()) {
        mpTxn.doWork(true);
      }
      while (!mpTxn.m_readyWorkUnits.isEmpty()) {
        mpTxn.doWork(true);
      }
      return f_irm;
    }
  }
);
  while (!mpTxn.m_readyWorkUnits.isEmpty()) {
    mpTxn.doWork(true);
  }
  CompleteTransactionMessage ctm=new CompleteTransactionMessage(0,1,2,false,false,true,false,false);
  CompleteTransactionResponseMessage ctrm=new CompleteTransactionResponseMessage(ctm,2);
  mpTxn.processCompleteTransactionResponse(ctrm);
  while (!mpTxn.doWork(true))   ;
  FragmentTaskLogMessage ftlm=(FragmentTaskLogMessage)mpTxn.getTransactionInfoBaseMessageForRejoinLog();
  assertNotNull(ftlm);
  assertEquals(1,ftlm.getFragmentTasks().size());
  ReplayedTxnState rTxn=new ReplayedTxnState(site,ftlm);
  while (!rTxn.doWork(true))   ;
  verify(site,times(2)).processFragmentTask(Mockito.any(TransactionState.class),any(HashMap.class),any(VoltMessage.class));
}
