{
  SocketChannel remoteConnection=null;
  try {
    remoteConnection=SocketChannel.open(address);
    remoteConnection.socket().setSoTimeout(1000);
    DataOutputStream out=new DataOutputStream(new BufferedOutputStream(remoteConnection.socket().getOutputStream()));
    DataInputStream in=new DataInputStream(new BufferedInputStream(remoteConnection.socket().getInputStream()));
    out.writeInt(localHostId);
    Object instanceId[]=VoltDB.instance().getInstanceId();
    out.writeLong((Long)instanceId[0]);
    out.writeInt((Integer)instanceId[1]);
    out.writeInt(liveHosts.size());
    for (    Integer site : liveHosts) {
      out.writeInt(site);
    }
    out.write(VoltDB.instance().getMode().ordinal());
    out.write(VoltDB.instance().getReplicationRole().ordinal());
    out.writeInt(catalogBytes.length);
    out.write(catalogBytes);
    out.flush();
    int command=in.readInt();
    if (command != COMMAND_SENDTIME_AND_CRC)     throw new Exception(String.format("Unexpected command (%d) from joining node.",command));
    out.writeInt(rejoiningHostId);
    out.writeLong(catalogCRC);
    out.writeLong(deploymentCRC);
    out.writeLong(System.currentTimeMillis());
    out.writeInt(catalogVersionNumber);
    out.writeByte(org.voltdb.sysprocs.SnapshotRestore.m_haveDoneRestore ? 1 : 0);
    out.writeLong(catalogTxnId);
    out.writeLong(faultSequenceNumber);
    out.flush();
    long maxDiffMS=in.readLong();
    recoveryLog.info("Re-joining node reports " + maxDiffMS + " ms skew.");
    command=in.readInt();
    if (command == COMMAND_COMPLETE)     return remoteConnection;
 else {
      int errors=in.readInt();
      System.out.println("Errors " + errors);
      String msg="";
      if ((errors & NTP_FAILURE) != 0) {
        msg+=String.format("Maximum clock/network is " + (maxDiffMS * 100) / MAX_ACCEPTABLE_TIME_DIFF_IN_MS + "% higher than allowable limit.\n");
      }
      if ((errors & CRC_FAILURE) != 0) {
        msg+=String.format("Catalog checksums do not match across cluster.\n");
      }
      if ((errors & HOSTID_FAILURE) != 0) {
        msg+=String.format("Cluster nodes didn't agree on a host id for the rejoining node.\n");
        msg+=String.format("This is likely a bug in VoltDB and you should contact the VoltDB team.\n");
      }
      if ((errors & CATVER_FAILURE) != 0) {
        msg+=String.format("Cluster nodes didn't agree on all catalog metadata.\n");
        msg+=String.format("This is likely a bug in VoltDB and you should contact the VoltDB team.\n");
      }
      if ((errors & CATTXNID_FAILURE) != 0) {
        msg+=String.format("Cluster nodes didn't agree on catalog txn id.\n");
        msg+=String.format("This is likely a bug in VoltDB and you should contact the VoltDB team.\n");
      }
      throw new Exception(msg);
    }
  }
 catch (  Exception e) {
    String emesg=e.getMessage();
    if (emesg == null) {
      emesg=e.getClass().getName();
    }
    String msg=String.format("Unable to re-join node. Socket failure with message: " + emesg);
    throw new Exception(msg);
  }
}
