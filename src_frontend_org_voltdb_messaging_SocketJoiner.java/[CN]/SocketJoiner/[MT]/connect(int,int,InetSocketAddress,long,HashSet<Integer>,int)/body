{
  SocketChannel remoteConnection=null;
  try {
    remoteConnection=SocketChannel.open(address);
    remoteConnection.socket().setSoTimeout(1000);
    DataOutputStream out=new DataOutputStream(new BufferedOutputStream(remoteConnection.socket().getOutputStream()));
    DataInputStream in=new DataInputStream(new BufferedInputStream(remoteConnection.socket().getInputStream()));
    out.writeInt(localHostId);
    Object instanceId[]=VoltDB.instance().getInstanceId();
    out.writeLong((Long)instanceId[0]);
    out.writeInt((Integer)instanceId[1]);
    out.writeInt(liveHosts.size());
    for (    Integer site : liveHosts) {
      out.writeInt(site);
    }
    out.flush();
    int command=in.readInt();
    if (command != COMMAND_SENDTIME_AND_CRC)     throw new Exception(String.format("Unexpected command (%d) from joining node.",command));
    out.writeInt(rejoiningHostId);
    out.writeLong(catalogCRC);
    out.writeLong(System.currentTimeMillis());
    out.writeInt(catalogVersionNumber);
    out.flush();
    long maxDiffMS=in.readLong();
    System.out.printf("Re-joining node reports %d ms skew.\n",maxDiffMS);
    command=in.readInt();
    if (command == COMMAND_COMPLETE)     return remoteConnection;
 else {
      String msg=String.format("Unable to re-join node. Error No. %d.",command);
      throw new Exception(msg);
    }
  }
 catch (  Exception e) {
    String emesg=e.getMessage();
    if (emesg == null) {
      emesg=e.getClass().getName();
    }
    String msg=String.format("Unable to re-join node. Socket failure with message: " + emesg);
    throw new Exception(msg);
  }
}
