{
  VoltTable items=new VoltTable(new VoltTable.ColumnInfo("I_ID",VoltType.INTEGER),new VoltTable.ColumnInfo("I_IM_ID",VoltType.INTEGER),new VoltTable.ColumnInfo("I_NAME",VoltType.STRING),new VoltTable.ColumnInfo("I_PRICE",VoltType.FLOAT),new VoltTable.ColumnInfo("I_DATA",VoltType.STRING));
  HashSet<Integer> originalRows=selectUniqueIds(m_parameters.items / 10,1,m_parameters.items);
  for (int i=1; i <= m_parameters.items; ++i) {
    boolean original=originalRows.contains(i);
    generateItem(items,i,original);
  }
  if (m_voltClient != null) {
    final int numPermits=24;
    final Semaphore maxOutstandingInvocations=new Semaphore(numPermits);
    final int totalInvocations=customerNamesTables.size() * m_parameters.warehouses;
    final ProcedureCallback callback=new ProcedureCallback(){
      private int invocationsCompleted=0;
      private double lastPercentCompleted=0.0;
      @Override protected void clientCallback(      ClientResponse clientResponse){
        if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
          System.err.println(clientResponse.getExtra());
          System.exit(-1);
        }
        invocationsCompleted++;
        final double percentCompleted=invocationsCompleted / (double)totalInvocations;
        if (percentCompleted > lastPercentCompleted + .1) {
          lastPercentCompleted=percentCompleted;
          System.err.println("Finished " + invocationsCompleted + "/"+ totalInvocations+ " replicated load work");
        }
        maxOutstandingInvocations.release();
      }
    }
;
    LinkedList<Pair<Integer,LinkedList<VoltTable>>> replicatedLoadWork=new LinkedList<Pair<Integer,LinkedList<VoltTable>>>();
    int totalLoadWorkGenerated=0;
    for (int w_id=1; w_id <= m_parameters.warehouses; ++w_id) {
      replicatedLoadWork.add(new Pair<Integer,LinkedList<VoltTable>>(w_id,new LinkedList<VoltTable>(customerNamesTables),false));
      totalLoadWorkGenerated+=customerNamesTables.size();
    }
    System.err.println("Total load work generated is " + totalLoadWorkGenerated);
    for (    Pair<Integer,LinkedList<VoltTable>> p : replicatedLoadWork) {
      try {
        VoltTable table=p.getSecond().pop();
        boolean queued=false;
        while (!queued) {
          queued=m_voltClient.callProcedure(callback,Constants.LOAD_WAREHOUSE_REPLICATED,(short)p.getFirst().intValue(),items,table);
          m_voltClient.backpressureBarrier();
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        System.exit(-1);
      }
    }
    while (!replicatedLoadWork.isEmpty()) {
      Iterator<Pair<Integer,LinkedList<VoltTable>>> iter=replicatedLoadWork.iterator();
      while (iter.hasNext()) {
        Pair<Integer,LinkedList<VoltTable>> p=iter.next();
        if (p.getSecond().peek() == null) {
          iter.remove();
          continue;
        }
        try {
          maxOutstandingInvocations.acquire();
          VoltTable table=p.getSecond().pop();
          boolean queued=false;
          while (!queued) {
            queued=m_voltClient.callProcedure(callback,Constants.LOAD_WAREHOUSE_REPLICATED,(short)p.getFirst().intValue(),null,table);
            m_voltClient.backpressureBarrier();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          System.exit(-1);
        }
      }
    }
    try {
      maxOutstandingInvocations.acquire(numPermits);
      System.err.println("Finished all replicated load work");
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
  items=null;
}
