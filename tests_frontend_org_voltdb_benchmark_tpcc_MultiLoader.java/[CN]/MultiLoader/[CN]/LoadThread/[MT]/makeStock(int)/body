{
  final int BATCH=5;
  final int BATCH_SIZE=(m_parameters.items / BATCH);
  data_tables[IDX_STOCKS]=new VoltTable(new VoltTable.ColumnInfo("S_I_ID",VoltType.INTEGER),new VoltTable.ColumnInfo("S_W_ID",VoltType.TINYINT),new VoltTable.ColumnInfo("S_QUANTITY",VoltType.INTEGER),new VoltTable.ColumnInfo("S_DIST_01",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_02",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_03",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_04",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_05",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_06",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_07",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_08",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_09",VoltType.STRING),new VoltTable.ColumnInfo("S_DIST_10",VoltType.STRING),new VoltTable.ColumnInfo("S_YTD",VoltType.INTEGER),new VoltTable.ColumnInfo("S_ORDER_CNT",VoltType.INTEGER),new VoltTable.ColumnInfo("S_REMOTE_CNT",VoltType.INTEGER),new VoltTable.ColumnInfo("S_DATA",VoltType.STRING));
  HashSet<Integer> selectedRows=selectUniqueIds(m_parameters.items / 10,1,m_parameters.items);
  for (int i_id=1; i_id <= m_parameters.items; ++i_id) {
    boolean original=selectedRows.contains(i_id);
    generateStock(w_id,i_id,original);
    if (i_id % BATCH_SIZE == 0) {
      commitDataTables(w_id);
    }
  }
  if (data_tables[IDX_STOCKS].getRowCount() != 0) {
    commitDataTables(w_id);
  }
  data_tables[IDX_STOCKS]=null;
}
