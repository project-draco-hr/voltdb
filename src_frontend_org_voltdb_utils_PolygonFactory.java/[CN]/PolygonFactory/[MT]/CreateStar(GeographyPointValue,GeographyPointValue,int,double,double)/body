{
  if (numPointsInStar < 3) {
    throw new IllegalArgumentException("Star polygons must have 3 or more points.");
  }
  if (sizeOfHole < 0 || 1.0 <= sizeOfHole) {
    throw new IllegalArgumentException("Star polygon hole size must be in the range [0.0, 1.0)");
  }
  if (ratioOfPointLength <= 0 || 1.0 < ratioOfPointLength) {
    throw new IllegalArgumentException("Star polygon external/internal radius ration must be in the range (0.0, 1.0]");
  }
  double phi=360.0 / (2 * numPointsInStar);
  GeographyPointValue innerFirstVertex=firstVertex.scale(center,ratioOfPointLength);
  GeographyPointValue holeFirstVertex=null;
  GeographyPointValue innerHoleFirstVertex=null;
  if (sizeOfHole > 0) {
    holeFirstVertex=firstVertex.scale(center,sizeOfHole);
    innerHoleFirstVertex=firstVertex.scale(center,sizeOfHole * ratioOfPointLength);
  }
  GeographyPointValue firstVertices[]={firstVertex,innerFirstVertex};
  GeographyPointValue holeFirstVertices[]={holeFirstVertex,innerHoleFirstVertex};
  List<GeographyPointValue> outerLoop=new ArrayList<GeographyPointValue>();
  List<GeographyPointValue> holeLoop=null;
  if (sizeOfHole > 0) {
    holeLoop=new ArrayList<GeographyPointValue>();
  }
  for (int idx=0; idx < 2 * numPointsInStar; idx+=1) {
    GeographyPointValue vert=null;
    GeographyPointValue holeVert=null;
    vert=firstVertices[idx % 2];
    holeVert=holeFirstVertices[idx % 2];
    outerLoop.add(vert.rotate(idx * phi,center));
    if (sizeOfHole > 0) {
      holeLoop.add(holeVert.rotate(-(idx * phi),center));
    }
  }
  outerLoop.add(outerLoop.get(0));
  if (sizeOfHole > 0) {
    holeLoop.add(holeLoop.get(0));
  }
  List<List<GeographyPointValue>> loops=new ArrayList<List<GeographyPointValue>>();
  loops.add(outerLoop);
  if (sizeOfHole > 0) {
    loops.add(holeLoop);
  }
  return new GeographyValue(loops);
}
