{
  assert(0 <= sizeOfHole && sizeOfHole < 1.0);
  double phi=360.0 / numVertices;
  GeographyPointValue holeFirstVertex=null;
  if (sizeOfHole > 0) {
    holeFirstVertex=firstVertex.scale(center,sizeOfHole);
  }
  List<GeographyPointValue> oneLoop=new ArrayList<GeographyPointValue>();
  List<GeographyPointValue> hole=(sizeOfHole < 0 ? null : new ArrayList<GeographyPointValue>());
  for (int idx=0; idx < numVertices; idx+=1) {
    oneLoop.add(firstVertex.rotate(idx * phi,center));
    if (sizeOfHole > 0) {
      hole.add(holeFirstVertex.rotate(-(idx * phi),center));
    }
  }
  oneLoop.add(firstVertex);
  if (sizeOfHole > 0) {
    hole.add(holeFirstVertex);
  }
  List<List<GeographyPointValue>> loops=new ArrayList<List<GeographyPointValue>>();
  loops.add(oneLoop);
  if (sizeOfHole > 0) {
    loops.add(hole);
  }
  return new GeographyValue(loops);
}
