{
  int blockOffset=(int)(offset / lobBlockSize);
  int byteBlockOffset=(int)(offset % lobBlockSize);
  int blockLimit=(int)((offset + length) / lobBlockSize);
  int byteLimitOffset=(int)((offset + length) % lobBlockSize);
  if (byteLimitOffset == 0) {
    byteLimitOffset=lobBlockSize;
  }
 else {
    blockLimit++;
  }
  int dataBytesPosition=0;
  byte[] dataBytes=new byte[length];
  int[][] blockAddresses=getBlockAddresses(session,lobID,blockOffset,blockLimit);
  if (blockAddresses.length == 0) {
    return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
  }
  int i=0;
  int blockCount=blockAddresses[i][1] - (blockAddresses[i][2] - blockOffset);
  if (blockAddresses[i][1] + blockAddresses[i][2] > blockLimit) {
    blockCount-=(blockAddresses[i][1] + blockAddresses[i][2] - blockLimit);
  }
  byte[] bytes;
  try {
    bytes=lobStore.getBlockBytes(blockAddresses[i][0] + blockOffset,blockCount);
  }
 catch (  HsqlException e) {
    return Result.newErrorResult(e);
  }
  int subLength=lobBlockSize * blockCount - byteBlockOffset;
  if (subLength > length) {
    subLength=length;
  }
  System.arraycopy(bytes,byteBlockOffset,dataBytes,dataBytesPosition,subLength);
  dataBytesPosition+=subLength;
  i++;
  for (; i < blockAddresses.length && dataBytesPosition < length; i++) {
    blockCount=blockAddresses[i][1];
    if (blockAddresses[i][1] + blockAddresses[i][2] > blockLimit) {
      blockCount-=(blockAddresses[i][1] + blockAddresses[i][2] - blockLimit);
    }
    try {
      bytes=lobStore.getBlockBytes(blockAddresses[i][0],blockCount);
    }
 catch (    HsqlException e) {
      return Result.newErrorResult(e);
    }
    subLength=lobBlockSize * blockCount;
    if (subLength > length - dataBytesPosition) {
      subLength=length - dataBytesPosition;
    }
    System.arraycopy(bytes,0,dataBytes,dataBytesPosition,subLength);
    dataBytesPosition+=subLength;
  }
  return ResultLob.newLobGetBytesResponse(lobID,offset,dataBytes);
}
