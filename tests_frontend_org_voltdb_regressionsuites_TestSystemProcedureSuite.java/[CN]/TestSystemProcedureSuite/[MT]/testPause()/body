{
  Client client=getClient();
  VoltTable[] results=client.callProcedure("@UpdateLogging",m_loggingConfig).getResults();
  for (  VoltTable result : results) {
    assertEquals(0,result.asScalarLong());
  }
  ClientResponse resp=client.callProcedure("pauseTestInsert");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  client.callProcedure("@AdHoc","INSERT INTO pause_test_tbl values (10);");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  Client admin=getAdminClient();
  resp=admin.callProcedure("@Pause");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  try {
    client.callProcedure("@AdHoc","INSERT INTO pause_test_tbl values (20);");
    fail("AdHoc insert did not fail in pause mode");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,e.getClientResponse().getStatus());
  }
  try {
    client.callProcedure("@AdHoc","CREATE TABLE ddl_test1 (fld1 integer NOT NULL);");
    fail("AdHoc create did not fail in pause mode");
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("Server is paused"));
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,e.getClientResponse().getStatus());
  }
  try {
    client.callProcedure("@AdHoc","DROP TABLE pause_test_tbl;");
    fail("AdHoc drop did not fail in pause mode");
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("Server is paused"));
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,e.getClientResponse().getStatus());
  }
  try {
    client.callProcedure("@AdHoc","CREATE PROCEDURE pause_test_proc AS SELECT * FROM pause_test_tbl;");
    fail("AdHoc create proc did not fail in pause mode");
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().contains("Server is paused"));
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,e.getClientResponse().getStatus());
  }
  admin.callProcedure("@AdHoc","INSERT INTO pause_test_tbl values (20);");
  admin.callProcedure("@AdHoc","CREATE TABLE ddl_test1 (fld1 integer NOT NULL);");
  admin.callProcedure("@AdHoc","CREATE PROCEDURE pause_test_proc AS SELECT * FROM pause_test_tbl;");
  admin.callProcedure("@AdHoc","DROP TABLE ddl_test1;");
  try {
    resp=client.callProcedure("@UpdateLogging",m_loggingConfig);
    fail();
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,e.getClientResponse().getStatus());
  }
  try {
    resp=client.callProcedure("pauseTestInsert");
    fail();
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,e.getClientResponse().getStatus());
  }
  resp=client.callProcedure("@Ping");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  resp=client.callProcedure("@AdHoc","SELECT COUNT(*) FROM pause_test_tbl");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  assertEquals(3,resp.getResults()[0].asScalarLong());
  resp=client.callProcedure("pauseTestCount");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  assertEquals(3,resp.getResults()[0].asScalarLong());
  resp=admin.callProcedure("@Resume");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  results=client.callProcedure("@UpdateLogging",m_loggingConfig).getResults();
  for (  VoltTable result : results) {
    assertEquals(0,result.asScalarLong());
  }
}
