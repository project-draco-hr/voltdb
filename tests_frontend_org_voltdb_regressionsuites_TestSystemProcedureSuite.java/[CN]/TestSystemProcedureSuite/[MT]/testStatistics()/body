{
  Client client=getClient();
  VoltTable results[]=null;
  results=client.callProcedure("@Statistics","INITIATOR",0).getResults();
  results=client.callProcedure("@Statistics","INITIATOR",0).getResults();
  assertEquals(1,results.length);
  System.out.println("Test initiators table: " + results[0].toString());
  assertEquals(1,results[0].getRowCount());
  VoltTableRow resultRow=results[0].fetchRow(0);
  assertNotNull(resultRow);
  assertEquals("@Statistics",resultRow.getString("PROCEDURE_NAME"));
  assertEquals(1,resultRow.getLong("INVOCATIONS"));
  try {
    client.callProcedure("@Statistics");
    fail();
  }
 catch (  ProcCallException ex) {
    assertEquals("VOLTDB ERROR: PROCEDURE Statistics EXPECTS 3 PARAMS, BUT RECEIVED 1",ex.getMessage());
  }
  try {
    client.callProcedure("@Statistics","garbage",0);
    fail();
  }
 catch (  ProcCallException ex) {
  }
  results=client.callProcedure("@Statistics",SysProcSelector.PARTITIONCOUNT.name(),0).getResults();
  assertEquals(1,results.length);
  assertTrue(results[0] != null);
  assertEquals(1,results[0].getRowCount());
  assertEquals(1,results[0].getColumnCount());
  assertEquals(VoltType.INTEGER,results[0].getColumnType(0));
  assertTrue(results[0].advanceRow());
  final int siteCount=(int)results[0].getLong(0);
  assertTrue(siteCount == TestSystemProcedureSuite.sites);
  results=client.callProcedure("@Statistics","table",0).getResults();
  assertTrue(results.length == 1);
  assertEquals(TestSystemProcedureSuite.hosts * TestSystemProcedureSuite.sites * 3,results[0].getRowCount());
  System.out.println("Test statistics table: " + results[0].toString());
  results=client.callProcedure("@Statistics","index",0).getResults();
  assertEquals(1,results.length);
  Thread.sleep(1000);
  results=client.callProcedure("@Statistics","memory",0).getResults();
  assertEquals(1,results.length);
  System.out.println("Node memory statistics table: " + results[0].toString());
  results=client.callProcedure("@Statistics","nodememory",0).getResults();
  assertEquals(1,results.length);
  System.out.println("Node memory statistics table: " + results[0].toString());
  results=client.callProcedure("GoSleep",3000,0,null).getResults();
  results=client.callProcedure("@Statistics","procedure",0).getResults();
  assertEquals(1,results.length);
  System.out.println("Test procedures table: " + results[0].toString());
  VoltTable stats=results[0];
  stats.advanceRow();
  long min_time=(Long)stats.get("MIN_EXECUTION_TIME",VoltType.BIGINT);
  long max_time=(Long)stats.get("MAX_EXECUTION_TIME",VoltType.BIGINT);
  long avg_time=(Long)stats.get("AVG_EXECUTION_TIME",VoltType.BIGINT);
  long min_result_size=(Long)stats.get("MIN_RESULT_SIZE",VoltType.BIGINT);
  long max_result_size=(Long)stats.get("MAX_RESULT_SIZE",VoltType.BIGINT);
  long avg_result_size=(Long)stats.get("AVG_RESULT_SIZE",VoltType.BIGINT);
  long min_parameter_set_size=(Long)stats.get("MIN_PARAMETER_SET_SIZE",VoltType.BIGINT);
  long max_parameter_set_size=(Long)stats.get("MAX_PARAMETER_SET_SIZE",VoltType.BIGINT);
  long avg_parameter_set_size=(Long)stats.get("AVG_PARAMETER_SET_SIZE",VoltType.BIGINT);
  assertTrue("Failed MIN_EXECUTION_TIME > 0, value was: " + min_time,min_time > 0);
  assertTrue("Failed MAX_EXECUTION_TIME > 0, value was: " + max_time,max_time > 0);
  assertTrue("Failed AVG_EXECUTION_TIME > 0, value was: " + avg_time,avg_time > 0);
  assertTrue("Failed MIN_RESULT_SIZE > 0, value was: " + min_result_size,min_result_size >= 0);
  assertTrue("Failed MAX_RESULT_SIZE > 0, value was: " + max_result_size,max_result_size >= 0);
  assertTrue("Failed AVG_RESULT_SIZE > 0, value was: " + avg_result_size,avg_result_size >= 0);
  assertTrue("Failed MIN_PARAMETER_SET_SIZE > 0, value was: " + min_parameter_set_size,min_parameter_set_size >= 0);
  assertTrue("Failed MAX_PARAMETER_SET_SIZE > 0, value was: " + max_parameter_set_size,max_parameter_set_size >= 0);
  assertTrue("Failed AVG_PARAMETER_SET_SIZE > 0, value was: " + avg_parameter_set_size,avg_parameter_set_size >= 0);
  assertTrue("Failed MIN_EXECUTION_TIME > 2,400,000,000ns, value was: " + min_time,min_time > 2400000000L);
  assertTrue("Failed MAX_EXECUTION_TIME > 2,400,000,000ns, value was: " + max_time,max_time > 2400000000L);
  assertTrue("Failed AVG_EXECUTION_TIME > 2,400,000,000ns, value was: " + avg_time,avg_time > 2400000000L);
  assertTrue("Failed MIN_RESULT_SIZE < 1,000,000, value was: " + min_result_size,min_result_size < 1000000L);
  assertTrue("Failed MAX_RESULT_SIZE < 1,000,000, value was: " + max_result_size,max_result_size < 1000000L);
  assertTrue("Failed AVG_RESULT_SIZE < 1,000,000, value was: " + avg_result_size,avg_result_size < 1000000L);
  assertTrue("Failed MIN_PARAMETER_SET_SIZE < 1,000,000, value was: " + min_parameter_set_size,min_parameter_set_size < 1000000L);
  assertTrue("Failed MAX_PARAMETER_SET_SIZE < 1,000,000, value was: " + max_parameter_set_size,max_parameter_set_size < 1000000L);
  assertTrue("Failed AVG_PARAMETER_SET_SIZE < 1,000,000, value was: " + avg_parameter_set_size,avg_parameter_set_size < 1000000L);
  results=client.callProcedure("@Statistics","iostats",0).getResults();
  assertEquals(1,results.length);
  System.out.println("Test iostats table: " + results[0].toString());
}
