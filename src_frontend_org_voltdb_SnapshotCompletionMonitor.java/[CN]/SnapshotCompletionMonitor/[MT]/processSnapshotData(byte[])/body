{
  if (data == null) {
    SNAP_LOG.info("TEMP MESSAGE SnapshotCompletionMonitor saw null data");
    return;
  }
  JSONObject jsonObj=new JSONObject(new String(data,"UTF-8"));
  SNAP_LOG.info("TEMP MESSAGE SnapshotCompletionMonitor saw " + jsonObj.toString(4));
  long txnId=jsonObj.getLong("txnId");
  int hostCount=jsonObj.getInt("hostCount");
  String path=jsonObj.getString("path");
  String nonce=jsonObj.getString("nonce");
  boolean truncation=jsonObj.getBoolean("isTruncation");
  String truncReqId=jsonObj.optString("truncReqId");
  if (hostCount == 0) {
    SNAP_LOG.info("TEMP MESSAGE SnapshotCompletionMonitor saw snapshot completion");
    Map<String,Map<Integer,Pair<Long,Long>>> exportSequenceNumbers=null;
    final JSONObject exportSequenceJSON=jsonObj.getJSONObject("exportSequenceNumbers");
    final ImmutableMap.Builder<String,Map<Integer,Pair<Long,Long>>> builder=ImmutableMap.builder();
    @SuppressWarnings("unchecked") final Iterator<String> tableKeys=exportSequenceJSON.keys();
    while (tableKeys.hasNext()) {
      final String tableName=tableKeys.next();
      final JSONObject tableSequenceNumbers=exportSequenceJSON.getJSONObject(tableName);
      ImmutableMap.Builder<Integer,Pair<Long,Long>> tableBuilder=ImmutableMap.builder();
      @SuppressWarnings("unchecked") final Iterator<String> partitionKeys=tableSequenceNumbers.keys();
      while (partitionKeys.hasNext()) {
        final String partitionString=partitionKeys.next();
        final Integer partitionId=Integer.valueOf(partitionString);
        JSONObject sequenceNumbers=tableSequenceNumbers.getJSONObject(partitionString);
        final Long ackOffset=sequenceNumbers.getLong("ackOffset");
        final Long sequenceNumber=sequenceNumbers.getLong("sequenceNumber");
        tableBuilder.put(partitionId,Pair.of(ackOffset,sequenceNumber));
      }
      builder.put(tableName,tableBuilder.build());
    }
    exportSequenceNumbers=builder.build();
    Map<Integer,Long> partitionTxnIdsMap=ImmutableMap.of();
synchronized (m_snapshotTxnIdsToPartitionTxnIds) {
      Map<Integer,Long> partitionTxnIdsList=m_snapshotTxnIdsToPartitionTxnIds.get(txnId);
      if (partitionTxnIdsList != null) {
        partitionTxnIdsMap=ImmutableMap.copyOf(partitionTxnIdsList);
      }
    }
    SNAP_LOG.info("TEMP MESSAGE SnapshotCompletionMonitor is invoking callbacks");
    Iterator<SnapshotCompletionInterest> iter=m_interests.iterator();
    while (iter.hasNext()) {
      SnapshotCompletionInterest interest=iter.next();
      try {
        interest.snapshotCompleted(new SnapshotCompletionEvent(path,nonce,txnId,partitionTxnIdsMap,truncation,truncReqId,exportSequenceNumbers));
      }
 catch (      Exception e) {
        SNAP_LOG.warn("Exception while executing snapshot completion interest",e);
      }
    }
  }
}
