{
  stmt=stmt.replaceAll("\n"," ");
  stmt=stmt.trim();
  compiler.addInfo("Compiling Statement: " + stmt);
  QueryType qtype=QueryType.getFromSQL(stmt);
  catalogStmt.setReadonly(qtype.isReadOnly());
  catalogStmt.setQuerytype(qtype.getValue());
  if (!stmt.endsWith(";")) {
    stmt+=";";
  }
  catalogStmt.setSqltext(stmt);
  catalogStmt.setSinglepartition(partitioning.wasSpecifiedAsSingle());
  catalogStmt.setBatched(false);
  catalogStmt.setParamnum(0);
  String name=catalogStmt.getParent().getTypeName() + "-" + catalogStmt.getTypeName();
  String sql=catalogStmt.getSqltext();
  String stmtName=catalogStmt.getTypeName();
  String procName=catalogStmt.getParent().getTypeName();
  TrivialCostModel costModel=new TrivialCostModel();
  CompiledPlan plan=null;
  QueryPlanner planner=new QueryPlanner(sql,stmtName,procName,catalog.getClusters().get("cluster"),db,partitioning,hsql,estimates,false,DEFAULT_MAX_JOIN_TABLES,costModel,null,joinOrder,detMode);
  try {
    if (xml != null) {
      planner.parseFromXml(xml);
    }
 else {
      planner.parse();
    }
    plan=planner.plan();
    assert(plan != null);
  }
 catch (  PlanningErrorException e) {
    String msg="Failed to plan for statement (" + catalogStmt.getTypeName() + ") "+ catalogStmt.getSqltext();
    if (e.getMessage() != null) {
      msg+=" Error: \"" + e.getMessage() + "\"";
    }
    throw compiler.new VoltCompilerException(msg);
  }
catch (  Exception e) {
    e.printStackTrace();
    throw compiler.new VoltCompilerException("Failed to plan for stmt: " + catalogStmt.getTypeName());
  }
  if (plan.parameters.length > CompiledPlan.MAX_PARAM_COUNT) {
    throw compiler.new VoltCompilerException("The statement's parameter count " + plan.parameters.length + " must not exceed the maximum "+ CompiledPlan.MAX_PARAM_COUNT);
  }
  boolean orderDeterministic=plan.isOrderDeterministic();
  catalogStmt.setIsorderdeterministic(orderDeterministic);
  boolean contentDeterministic=orderDeterministic || !plan.hasLimitOrOffset();
  catalogStmt.setIscontentdeterministic(contentDeterministic);
  String nondeterminismDetail=plan.nondeterminismDetail();
  catalogStmt.setNondeterminismdetail(nondeterminismDetail);
  catalogStmt.setSeqscancount(plan.countSeqScans());
  for (int i=0; i < plan.parameters.length; ++i) {
    StmtParameter catalogParam=catalogStmt.getParameters().add(String.valueOf(i));
    catalogParam.setJavatype(plan.parameters[i].getValueType().getValue());
    catalogParam.setIsarray(plan.parameters[i].getParamIsVector());
    catalogParam.setIndex(i);
  }
  catalogStmt.setReplicatedtabledml(plan.replicatedTableDML);
  StringBuilder planDescription=new StringBuilder(1000);
  planDescription.append("SQL: ").append(plan.sql);
  if (VoltCompiler.DEBUG_MODE) {
    planDescription.append("\nCOST: ").append(plan.cost);
  }
  planDescription.append("\nPLAN:\n");
  planDescription.append(plan.explainedPlan);
  String planString=planDescription.toString();
  if (compiler.standaloneCompiler) {
    BuildDirectoryUtils.writeFile(null,name + ".txt",planString,false);
  }
  compiler.captureDiagnosticContext(planString);
  StatementAnnotation annotation=new StatementAnnotation();
  annotation.explainPlan=plan.explainedPlan;
  catalogStmt.setAnnotation(annotation);
  CatalogUtil.updateUsageAnnotations(db,catalogStmt,plan.rootPlanGraph,plan.subPlanGraph);
  catalogStmt.setExplainplan(Encoder.hexEncode(plan.explainedPlan));
  MessageDigest md=null;
  try {
    md=MessageDigest.getInstance("SHA-1");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
    assert(false);
    System.exit(-1);
  }
  PlanFragment planFragment=catalogStmt.getFragments().add("0");
  planFragment.setHasdependencies(plan.subPlanGraph != null);
  planFragment.setNontransactional(!fragmentReferencesPersistentTable(plan.rootPlanGraph));
  planFragment.setMultipartition(plan.subPlanGraph != null);
  byte[] planBytes=writePlanBytes(compiler,planFragment,plan.rootPlanGraph);
  md.update(planBytes,0,planBytes.length);
  md.reset();
  md.update(planBytes);
  planFragment.setPlanhash(Encoder.hexEncode(md.digest()));
  if (plan.subPlanGraph != null) {
    planFragment=catalogStmt.getFragments().add("1");
    planFragment.setHasdependencies(false);
    planFragment.setNontransactional(false);
    planFragment.setMultipartition(true);
    byte[] subBytes=writePlanBytes(compiler,planFragment,plan.subPlanGraph);
    md.reset();
    md.update(subBytes);
    planFragment.setPlanhash(Encoder.hexEncode(md.digest()));
  }
  int validType=catalogStmt.getQuerytype();
  assert(validType != QueryType.INVALID.getValue());
}
