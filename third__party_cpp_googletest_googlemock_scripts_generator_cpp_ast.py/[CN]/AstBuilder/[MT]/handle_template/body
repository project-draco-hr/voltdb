def handle_template(self):
    token = self._GetNextToken()
    assert (token.token_type == tokenize.SYNTAX), token
    assert (token.name == '<'), token
    templated_types = self._GetTemplatedTypes()
    token = self._GetNextToken()
    if (token.token_type == tokenize.NAME):
        if (token.name == 'class'):
            return self._GetClass(Class, VISIBILITY_PRIVATE, templated_types)
        elif (token.name == 'struct'):
            return self._GetClass(Struct, VISIBILITY_PUBLIC, templated_types)
        elif (token.name == 'friend'):
            return self.handle_friend()
    self._AddBackToken(token)
    (tokens, last) = self._GetVarTokensUpTo(tokenize.SYNTAX, '(', ';')
    tokens.append(last)
    self._AddBackTokens(tokens)
    if (last.name == '('):
        return self.GetMethod(FUNCTION_NONE, templated_types)
    return None
