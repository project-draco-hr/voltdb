def _GetTemplatedTypes(self):
    result = {}
    tokens = list(self._GetMatchingChar('<', '>'))
    len_tokens = (len(tokens) - 1)
    i = 0
    while (i < len_tokens):
        key = tokens[i].name
        i += 1
        if (keywords.IsKeyword(key) or (key == ',')):
            continue
        type_name = default = None
        if (i < len_tokens):
            i += 1
            if (tokens[(i - 1)].name == '='):
                assert (i < len_tokens), ('%s %s' % (i, tokens))
                (default, unused_next_token) = self.GetName(tokens[i:])
                i += len(default)
            elif (tokens[(i - 1)].name != ','):
                key = tokens[(i - 1)].name
                type_name = tokens[(i - 2)]
        result[key] = (type_name, default)
    return result
