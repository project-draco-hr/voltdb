def _GetNestedType(self, ctor):
    name = None
    (name_tokens, token) = self.GetName()
    if name_tokens:
        name = ''.join([t.name for t in name_tokens])
    if ((token.token_type == tokenize.SYNTAX) and (token.name == ';')):
        return ctor(token.start, token.end, name, None, self.namespace_stack)
    if ((token.token_type == tokenize.NAME) and self._handling_typedef):
        self._AddBackToken(token)
        return ctor(token.start, token.end, name, None, self.namespace_stack)
    fields = list(self._GetMatchingChar('{', '}'))
    del fields[(-1)]
    if ((token.token_type == tokenize.SYNTAX) and (token.name == '{')):
        next = self._GetNextToken()
        new_type = ctor(token.start, token.end, name, fields, self.namespace_stack)
        if (next.token_type != tokenize.NAME):
            return new_type
        name = new_type
        token = next
    assert (token.token_type == tokenize.NAME), token
    return self._CreateVariable(token, token.name, name, [], '', None)
