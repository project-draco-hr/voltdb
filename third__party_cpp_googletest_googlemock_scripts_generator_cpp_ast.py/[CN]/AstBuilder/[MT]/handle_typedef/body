def handle_typedef(self):
    token = self._GetNextToken()
    if ((token.token_type == tokenize.NAME) and keywords.IsKeyword(token.name)):
        method = getattr(self, ('handle_' + token.name))
        self._handling_typedef = True
        tokens = [method()]
        self._handling_typedef = False
    else:
        tokens = [token]
    tokens.extend(self._GetTokensUpTo(tokenize.SYNTAX, ';'))
    assert tokens
    name = tokens.pop()
    indices = name
    if tokens:
        indices = tokens[0]
    if (not indices):
        indices = token
    if (name.name == ')'):
        if ((len(tokens) >= 4) and (tokens[1].name == '(') and (tokens[2].name == '*')):
            tokens.append(name)
            name = tokens[3]
    elif (name.name == ']'):
        if (len(tokens) >= 2):
            tokens.append(name)
            name = tokens[1]
    new_type = tokens
    if (tokens and isinstance(tokens[0], tokenize.Token)):
        new_type = self.converter.ToType(tokens)[0]
    return Typedef(indices.start, indices.end, name.name, new_type, self.namespace_stack)
