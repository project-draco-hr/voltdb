def CreateReturnType(self, return_type_seq):
    if (not return_type_seq):
        return None
    start = return_type_seq[0].start
    end = return_type_seq[(-1)].end
    (_, name, templated_types, modifiers, default, other_tokens) = self.DeclarationToParts(return_type_seq, False)
    names = [n.name for n in other_tokens]
    reference = ('&' in names)
    pointer = ('*' in names)
    array = ('[' in names)
    return Type(start, end, name, templated_types, modifiers, reference, pointer, array)
