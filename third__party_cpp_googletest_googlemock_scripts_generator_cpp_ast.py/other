'Generate an Abstract Syntax Tree (AST) for C++.'
__author__ = 'nnorwitz@google.com (Neal Norwitz)'
try:
    import builtins
except ImportError:
    import __builtin__ as builtins
import sys
import traceback
from cpp import keywords
from cpp import tokenize
from cpp import utils
if (not hasattr(builtins, 'reversed')):

    def reversed(seq):
        for i in range((len(seq) - 1), (-1), (-1)):
            yield seq[i]
if (not hasattr(builtins, 'next')):

    def next(obj):
        return obj.next()
(VISIBILITY_PUBLIC, VISIBILITY_PROTECTED, VISIBILITY_PRIVATE) = range(3)
FUNCTION_NONE = 0
FUNCTION_CONST = 1
FUNCTION_VIRTUAL = 2
FUNCTION_PURE_VIRTUAL = 4
FUNCTION_CTOR = 8
FUNCTION_DTOR = 16
FUNCTION_ATTRIBUTE = 32
FUNCTION_UNKNOWN_ANNOTATION = 64
FUNCTION_THROW = 128
FUNCTION_OVERRIDE = 256
"\nThese are currently unused.  Should really handle these properly at some point.\n\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000\n\nTYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,\n    'mutable': TYPE_MODIFIER_MUTABLE,\n    }\n"
_INTERNAL_TOKEN = 'internal'
_NAMESPACE_POP = 'ns-pop'
if (__name__ == '__main__'):
    main(sys.argv)
