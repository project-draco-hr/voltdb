{
  ArrayDeque<VoltFault> pendingFaults;
synchronized (this) {
    if (m_pendingFaults.isEmpty()) {
      return;
    }
    pendingFaults=m_pendingFaults;
    m_pendingFaults=new ArrayDeque<VoltFault>();
  }
  HashMap<FaultType,HashSet<VoltFault>> newFaults=organizeNewFaults(pendingFaults);
  HashMap<FaultType,HashSet<VoltFault>> policiesMap=makePolicyDecisions(m_knownFaults,newFaults);
  if (policiesMap.isEmpty()) {
    return;
  }
  for (  Map.Entry<FaultType,HashSet<VoltFault>> entry : newFaults.entrySet()) {
    TreeMap<Integer,List<FaultHandlerData>> handler_map=m_faultHandlers.get(entry.getKey());
    if (handler_map == null) {
      handler_map=m_faultHandlers.get(FaultType.UNKNOWN);
      if (handler_map == null) {
        registerDefaultHandler(new DefaultFaultHandler());
        handler_map=m_faultHandlers.get(FaultType.UNKNOWN);
      }
    }
    for (    List<FaultHandlerData> handler_list : handler_map.values()) {
      for (      FaultHandlerData handlerData : handler_list) {
        if (handlerData.m_pendingFaults.addAll(entry.getValue())) {
          handlerData.m_handler.faultOccured(handlerData.m_pendingFaults);
        }
      }
    }
  }
}
