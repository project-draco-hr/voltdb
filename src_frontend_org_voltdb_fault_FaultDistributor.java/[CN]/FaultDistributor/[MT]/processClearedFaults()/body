{
  HashMap<FaultType,HashSet<VoltFault>> pendingClearedFaults;
synchronized (this) {
    if (m_pendingClearedFaults.isEmpty()) {
      return;
    }
    pendingClearedFaults=m_pendingClearedFaults;
    m_pendingClearedFaults=new HashMap<FaultType,HashSet<VoltFault>>();
  }
  for (  Map.Entry<FaultType,HashSet<VoltFault>> entry : pendingClearedFaults.entrySet()) {
    HashSet<VoltFault> faults=entry.getValue();
    for (    VoltFault fault : faults) {
      m_knownFaults.get(fault.getFaultType()).remove(fault);
    }
    TreeMap<Integer,List<FaultHandlerData>> handler_map=m_faultHandlers.get(entry.getKey());
    if (handler_map == null) {
      handler_map=m_faultHandlers.get(FaultType.UNKNOWN);
      if (handler_map == null) {
        registerDefaultHandler(new DefaultFaultHandler());
        handler_map=m_faultHandlers.get(FaultType.UNKNOWN);
      }
    }
    for (    List<FaultHandlerData> handler_list : handler_map.values()) {
      for (      FaultHandlerData handlerData : handler_list) {
        handlerData.m_handler.faultCleared(entry.getValue());
      }
    }
  }
}
