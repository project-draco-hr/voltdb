{
  ClientStats stats=fullStatsContext.fetchAndResetBaseline().getStats();
  double execTimeInMicroSec=0.0;
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Results");
  System.out.println(HORIZONTAL_RULE);
  System.out.printf("Average throughput: %,9d txns/sec\n",stats.getTxnThroughput());
  VoltTable procStats=client.callProcedure("@Statistics","procedureprofile",0).getResults()[0];
  while (procStats.advanceRow()) {
    String procName=procStats.getString("PROCEDURE");
    if (procName.equals(procedure)) {
      execTimeInMicroSec=(procStats.getLong("AVG") / 1000.0);
      System.out.printf("Average execution time: %,9f usec\n",execTimeInMicroSec);
      break;
    }
  }
  fw.append(String.format("%s,%d,-1,%d,0,0,0,%.2f,0,0,0,0,0,0\n",suffix,stats.getStartTimestamp(),stats.getTxnThroughput(),execTimeInMicroSec));
  String[] procArray=procedure.split("_");
  if (procArray[procArray.length - 1].equals("insert")) {
    if (insertThroughput > 0) {
      insertThroughput=(((stats.getTxnThroughput() - insertThroughput) / stats.getTxnThroughput()) * 100);
      insertExecute=(((insertExecute - execTimeInMicroSec) / execTimeInMicroSec) * 100);
      fw.append(String.format("%s,%d,-1,%.2f,0,0,0,%.2f,0,0,0,0,0,0\n","Insert Diff",stats.getStartTimestamp(),insertThroughput,insertExecute));
    }
 else {
      insertThroughput=(double)stats.getTxnThroughput();
      insertExecute=execTimeInMicroSec;
    }
  }
 else   if (procArray[procArray.length - 1].equals("update") && procArray[1].equals("group")) {
    if (updateGroupThroughput > 0) {
      updateGroupThroughput=(((stats.getTxnThroughput() - updateGroupThroughput) / stats.getTxnThroughput()) * 100);
      updateGroupExecute=(((updateGroupExecute - execTimeInMicroSec) / execTimeInMicroSec) * 100);
      fw.append(String.format("%s,%d,-1,%.2f,0,0,0,%.2f,0,0,0,0,0,0\n","Update Group Diff",stats.getStartTimestamp(),updateGroupThroughput,updateGroupExecute));
    }
 else {
      updateGroupThroughput=(double)stats.getTxnThroughput();
      updateGroupExecute=execTimeInMicroSec;
    }
  }
 else   if (procArray[procArray.length - 1].equals("update") && procArray[1].equals("value")) {
    if (updateValueThroughput > 0) {
      updateValueThroughput=(((stats.getTxnThroughput() - updateValueThroughput) / stats.getTxnThroughput()) * 100);
      updateValueExecute=(((updateValueExecute - execTimeInMicroSec) / execTimeInMicroSec) * 100);
      fw.append(String.format("%s,%d,-1,%.2f,0,0,0,%.2f,0,0,0,0,0,0\n","Update Aggregate Diff",stats.getStartTimestamp(),updateValueThroughput,updateValueExecute));
    }
 else {
      updateValueThroughput=(double)stats.getTxnThroughput();
      updateValueExecute=execTimeInMicroSec;
    }
  }
 else {
    if (deleteThroughput > 0) {
      deleteThroughput=(((stats.getTxnThroughput() - deleteThroughput) / stats.getTxnThroughput()) * 100.0);
      deleteExecute=(((deleteExecute - execTimeInMicroSec) / execTimeInMicroSec) * 100);
      fw.append(String.format("%s,%d,-1,%.2f,0,0,0,%.2f,0,0,0,0,0,0\n","Delete Diff",stats.getStartTimestamp(),deleteThroughput,deleteExecute));
    }
 else {
      deleteThroughput=(double)stats.getTxnThroughput();
      deleteExecute=execTimeInMicroSec;
    }
  }
}
