{
  assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.isEmpty());
  if (TheHashinator.getConfiguredHashinatorType() == HashinatorType.ELASTIC && hashinatorData == null) {
    throw new RuntimeException("No hashinator data provided for elastic hashinator type.");
  }
  final SnapshotRequestConfig config=new SnapshotRequestConfig(jsData,context.getDatabase());
  m_snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,SnapshotFormat.NATIVE,config.tables);
  final ArrayList<SnapshotTableTask> partitionedSnapshotTasks=new ArrayList<SnapshotTableTask>();
  final ArrayList<SnapshotTableTask> replicatedSnapshotTasks=new ArrayList<SnapshotTableTask>();
  for (  final Table table : config.tables) {
    final SnapshotTableTask task=new SnapshotTableTask(table,new SnapshotDataFilter[0],null,false);
    SNAP_LOG.debug("ADDING TASK: " + task);
    if (table.getIsreplicated()) {
      replicatedSnapshotTasks.add(task);
    }
 else {
      partitionedSnapshotTasks.add(task);
    }
    result.addRow(context.getHostId(),CoreUtils.getHostnameOrAddress(),table.getTypeName(),"SUCCESS","");
  }
  if (config.tables.length > 0 && replicatedSnapshotTasks.isEmpty() && partitionedSnapshotTasks.isEmpty()) {
    SnapshotRegistry.discardSnapshot(m_snapshotRecord);
  }
  placePartitionedTasks(partitionedSnapshotTasks,tracker.getSitesForHost(context.getHostId()));
  placeReplicatedTasks(replicatedSnapshotTasks,tracker.getSitesForHost(context.getHostId()));
  boolean isTruncationSnapshot=true;
  if (jsData != null) {
    isTruncationSnapshot=jsData.has("truncReqId");
  }
  return createDeferredSetup(file_path,file_nonce,txnId,partitionTransactionIds,remoteDCLastIds,context,exportSequenceNumbers,drTupleStreamInfo,tracker,hashinatorData,timestamp,newPartitionCount,config.tables,m_snapshotRecord,partitionedSnapshotTasks,replicatedSnapshotTasks,isTruncationSnapshot);
}
