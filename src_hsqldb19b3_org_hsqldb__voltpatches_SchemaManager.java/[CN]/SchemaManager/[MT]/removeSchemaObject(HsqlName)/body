{
  Schema schema=(Schema)schemaMap.get(name.schema.name);
  SchemaObject object=null;
  SchemaObjectSet set=null;
switch (name.type) {
case SchemaObject.SEQUENCE:
    set=schema.sequenceLookup;
  object=set.getObject(name.name);
break;
case SchemaObject.TABLE:
case SchemaObject.VIEW:
{
set=schema.tableLookup;
object=set.getObject(name.name);
set.remove(name.name);
break;
}
case SchemaObject.CHARSET:
set=schema.charsetLookup;
object=set.getObject(name.name);
break;
case SchemaObject.COLLATION:
set=schema.collationLookup;
object=set.getObject(name.name);
break;
case SchemaObject.PROCEDURE:
set=schema.procedureLookup;
object=set.getObject(name.name);
break;
case SchemaObject.FUNCTION:
set=schema.functionLookup;
object=set.getObject(name.name);
break;
case SchemaObject.DOMAIN:
case SchemaObject.TYPE:
set=schema.typeLookup;
object=set.getObject(name.name);
break;
case SchemaObject.INDEX:
set=schema.indexLookup;
break;
case SchemaObject.CONSTRAINT:
{
set=schema.constraintLookup;
if (name.parent.type == SchemaObject.TABLE) {
Table table=(Table)schema.tableList.get(name.parent.name);
object=table.getConstraint(name.name);
table.removeConstraint(name.name);
}
 else if (name.parent.type == SchemaObject.DOMAIN) {
Type type=(Type)schema.typeLookup.getObject(name.parent.name);
object=type.userTypeModifier.getConstraint(name.name);
type.userTypeModifier.removeConstraint(name.name);
}
break;
}
case SchemaObject.TRIGGER:
{
set=schema.triggerLookup;
Table table=(Table)schema.tableList.get(name.parent.name);
object=table.getTrigger(name.name);
table.removeTrigger(name.name);
break;
}
}
if (object != null) {
database.getGranteeManager().removeDbObject(object.getName());
removeReferencingObject(object);
}
set.remove(name.name);
removeReferencedObject(name);
}
