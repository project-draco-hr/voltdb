{
  long benchmarkTime=pollIndex * m_pollIntervalInMillis;
  long offsetTime=time - benchmarkTime;
  if (errMsg != null) {
    Error err=new Error(clientName,errMsg,pollIndex);
    m_errors.add(err);
  }
 else {
    for (    String txnName : transactionCounts.keySet())     m_transactionNames.add(txnName);
    HashMap<String,ArrayList<Result>> txnResults=m_data.get(clientName);
    if (txnResults == null) {
      txnResults=new HashMap<String,ArrayList<Result>>();
      for (      String txnName : transactionCounts.keySet())       txnResults.put(txnName,new ArrayList<Result>());
      m_data.put(clientName,txnResults);
    }
    for (    Entry<String,Long> entry : transactionCounts.entrySet()) {
      Result r=new Result(offsetTime,entry.getValue());
      ArrayList<Result> results=m_data.get(clientName).get(entry.getKey());
      assert(results != null);
      assert(results.size() == pollIndex);
      results.add(r);
    }
  }
}
