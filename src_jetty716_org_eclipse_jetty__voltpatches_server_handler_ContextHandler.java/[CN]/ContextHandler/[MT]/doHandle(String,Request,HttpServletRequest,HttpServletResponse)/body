{
  final DispatcherType dispatch=baseRequest.getDispatcherType();
  final boolean new_context=baseRequest.takeNewContext();
  try {
    if (new_context) {
      if (_requestAttributeListeners != null) {
        final int s=LazyList.size(_requestAttributeListeners);
        for (int i=0; i < s; i++)         baseRequest.addEventListener(((EventListener)LazyList.get(_requestAttributeListeners,i)));
      }
      if (_requestListeners != null) {
        final int s=LazyList.size(_requestListeners);
        final ServletRequestEvent sre=new ServletRequestEvent(_scontext,request);
        for (int i=0; i < s; i++)         ((ServletRequestListener)LazyList.get(_requestListeners,i)).requestInitialized(sre);
      }
    }
    if (DispatcherType.REQUEST.equals(dispatch) && isProtectedTarget(target))     throw new HttpException(HttpServletResponse.SC_NOT_FOUND);
    if (never())     nextHandle(target,baseRequest,request,response);
 else     if (_nextScope != null && _nextScope == _handler)     _nextScope.doHandle(target,baseRequest,request,response);
 else     if (_handler != null)     _handler.handle(target,baseRequest,request,response);
  }
 catch (  HttpException e) {
    Log.debug(e);
    response.sendError(e.getStatus(),e.getReason());
  }
 finally {
    if (new_context) {
      if (_requestListeners != null) {
        final int s=LazyList.size(_requestListeners);
        final ServletRequestEvent sre=new ServletRequestEvent(_scontext,request);
        for (int i=0; i < s; i++)         ((ServletRequestListener)LazyList.get(_requestListeners,i)).requestDestroyed(sre);
      }
      if (_requestAttributeListeners != null) {
        for (int i=LazyList.size(_requestAttributeListeners); i-- > 0; )         baseRequest.removeEventListener(((EventListener)LazyList.get(_requestAttributeListeners,i)));
      }
    }
  }
}
