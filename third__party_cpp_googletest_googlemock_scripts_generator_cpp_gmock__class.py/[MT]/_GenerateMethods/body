def _GenerateMethods(output_lines, source, class_node):
    function_type = ((ast.FUNCTION_VIRTUAL | ast.FUNCTION_PURE_VIRTUAL) | ast.FUNCTION_OVERRIDE)
    ctor_or_dtor = (ast.FUNCTION_CTOR | ast.FUNCTION_DTOR)
    indent = (' ' * _INDENT)
    for node in class_node.body:
        if (isinstance(node, ast.Function) and (node.modifiers & function_type) and (not (node.modifiers & ctor_or_dtor))):
            const = ''
            if (node.modifiers & ast.FUNCTION_CONST):
                const = 'CONST_'
            return_type = 'void'
            if node.return_type:
                modifiers = ''
                if node.return_type.modifiers:
                    modifiers = (' '.join(node.return_type.modifiers) + ' ')
                return_type = (modifiers + node.return_type.name)
                template_args = [arg.name for arg in node.return_type.templated_types]
                if template_args:
                    return_type += (('<' + ', '.join(template_args)) + '>')
                    if (len(template_args) > 1):
                        for line in ["// The following line won't really compile, as the return", '// type has multiple template arguments.  To fix it, use a', '// typedef for the return type.']:
                            output_lines.append((indent + line))
                if node.return_type.pointer:
                    return_type += '*'
                if node.return_type.reference:
                    return_type += '&'
                num_parameters = len(node.parameters)
                if (len(node.parameters) == 1):
                    first_param = node.parameters[0]
                    if (source[first_param.start:first_param.end].strip() == 'void'):
                        num_parameters = 0
            tmpl = ''
            if class_node.templated_types:
                tmpl = '_T'
            mock_method_macro = ('MOCK_%sMETHOD%d%s' % (const, num_parameters, tmpl))
            args = ''
            if node.parameters:
                if (len([param for param in node.parameters if param.default]) > 0):
                    args = ', '.join((param.type.name for param in node.parameters))
                else:
                    start = node.parameters[0].start
                    end = node.parameters[(-1)].end
                    args_strings = re.sub('//.*', '', source[start:end])
                    args = re.sub('  +', ' ', args_strings.replace('\n', ' '))
            output_lines.extend([('%s%s(%s,' % (indent, mock_method_macro, node.name)), ('%s%s(%s));' % ((indent * 3), return_type, args))])
