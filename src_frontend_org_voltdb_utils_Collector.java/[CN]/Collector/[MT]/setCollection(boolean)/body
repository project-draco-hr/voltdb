{
  Set<String> collectionFilesList=new HashSet<String>();
  try {
    if (new File(m_deploymentPath).exists()) {
      collectionFilesList.add(m_deploymentPath);
    }
    if (new File(m_catalogJarPath).exists()) {
      collectionFilesList.add(m_catalogJarPath);
    }
    if (new File(m_systemCheckPath).exists()) {
      collectionFilesList.add(m_systemCheckPath);
    }
    if (new File(m_configInfoPath).exists()) {
      collectionFilesList.add(m_configInfoPath);
    }
    for (    String path : m_logPaths) {
      for (      File file : new File(path).getParentFile().listFiles()) {
        if (file.getName().startsWith(new File(path).getName()) && isFileModifiedInCollectionPeriod(file)) {
          collectionFilesList.add(file.getCanonicalPath());
        }
      }
    }
    for (    File file : new File(m_config.voltdbroot).listFiles()) {
      if (file.getName().startsWith("voltdb_crash") && file.getName().endsWith(".txt") && isFileModifiedInCollectionPeriod(file)) {
        collectionFilesList.add(file.getCanonicalPath());
      }
      if (file.getName().startsWith("hs_err_pid") && file.getName().endsWith(".log") && isFileModifiedInCollectionPeriod(file)) {
        collectionFilesList.add(file.getCanonicalPath());
      }
    }
    for (    File file : new File(m_workingDir).listFiles()) {
      if (file.getName().startsWith("voltdb_crash") && file.getName().endsWith(".txt") && isFileModifiedInCollectionPeriod(file)) {
        collectionFilesList.add(file.getCanonicalPath());
      }
      if (file.getName().startsWith("hs_err_pid") && file.getName().endsWith(".log") && isFileModifiedInCollectionPeriod(file)) {
        collectionFilesList.add(file.getCanonicalPath());
      }
    }
    String systemLogBase;
    final String systemLogBaseDirPath="/var/log/";
    if (System.getProperty("os.name").startsWith("Mac")) {
      systemLogBase="system.log";
    }
 else {
      String versionInfo=getLinuxOSInfo();
      if (versionInfo.contains("Ubuntu")) {
        systemLogBase="syslog";
      }
 else {
        systemLogBase="messages";
        if (versionInfo.isEmpty()) {
          System.err.println("Couldn't find distribution info for supported systems. Perform" + " lookup for system logs in files named: " + systemLogBase);
        }
      }
    }
    for (    File file : new File(systemLogBaseDirPath).listFiles()) {
      if (file.getName().startsWith(systemLogBase)) {
        collectionFilesList.add(file.getCanonicalPath());
      }
    }
    if (!skipHeapDump) {
      for (      File file : new File("/tmp").listFiles()) {
        if (file.getName().startsWith("java_pid") && file.getName().endsWith(".hprof") && isFileModifiedInCollectionPeriod(file)) {
          collectionFilesList.add(file.getCanonicalPath());
        }
      }
    }
    collectionFilesList.add("duvoltdbrootdata (result of executing \"du -h <voltdbroot>\")");
    collectionFilesList.add("dudroverflowdata (result of executing \"du -h <droverflow>\")");
    collectionFilesList.add("duexportoverflowdata (result of executing \"du -h <exportoverflow>\")");
    collectionFilesList.add("ducommandlog (result of executing \"du -h <command_log>\")");
    collectionFilesList.add("ducommandlogsnapshot (result of executing \"du -h <command_log_snapshot>\")");
    for (    String fileName : m_systemStats.stringPropertyNames()) {
      collectionFilesList.add(fileName + " (result of executing \"" + m_systemStats.getProperty(fileName)+ "\")");
    }
    File varlogDir=new File("/var/log");
    if (varlogDir.canRead()) {
      for (      File file : varlogDir.listFiles()) {
        if ((file.getName().startsWith("syslog") || file.getName().equals("dmesg")) && isFileModifiedInCollectionPeriod(file)) {
          if (file.canRead()) {
            collectionFilesList.add(file.getCanonicalPath());
          }
        }
      }
    }
  }
 catch (  IOException e) {
    System.err.println(e.getMessage());
  }
  return collectionFilesList;
}
