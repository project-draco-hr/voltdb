{
  Logger.getRootLogger().addAppender(new NullAppender());
  m_config=new CollectConfig();
  m_config.parse(Collector.class.getName(),args);
  File voltDbRoot=new File(m_config.voltdbroot);
  if (!voltDbRoot.exists()) {
    System.err.println("voltdbroot path '" + m_config.voltdbroot + "' does not exist.");
    System.exit(-1);
  }
  locatePaths(m_config.voltdbroot);
  JSONObject jsonObject=parseJSONFile(m_configInfoPath);
  parseJSONObject(jsonObject);
  List<String> collectionFilesList=listCollection(m_config.skipheapdump);
  if (m_config.dryrun) {
    System.out.println("List of the files to be collected:");
    for (    String path : collectionFilesList) {
      System.out.println("  " + path);
    }
    System.out.println("[dry-run] A tgz file containing above files would be generated in current dir");
    System.out.println("          Use --upload option to enable uploading via SFTP");
  }
 else   if (m_config.fileInfoOnly) {
    String collectionFilesListPath=m_config.voltdbroot + File.separator + m_config.prefix;
    byte jsonBytes[]=null;
    try {
      JSONStringer stringer=new JSONStringer();
      stringer.object();
      stringer.key("server").value(m_config.prefix);
      stringer.key("files").array();
      for (      String path : collectionFilesList) {
        stringer.object();
        stringer.key("filename").value(path);
        if (Arrays.asList(cmdFilenames).contains(path.split(" ")[0])) {
          stringer.key("size").value(0);
        }
 else {
          stringer.key("size").value(new File(path).length());
        }
        stringer.endObject();
      }
      stringer.endArray();
      stringer.endObject();
      JSONObject jsObj=new JSONObject(stringer.toString());
      jsonBytes=jsObj.toString(4).getBytes(Charsets.UTF_8);
    }
 catch (    JSONException e) {
      Throwables.propagate(e);
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(collectionFilesListPath);
      fos.write(jsonBytes);
      fos.getFD().sync();
    }
 catch (    IOException e) {
      Throwables.propagate(e);
    }
 finally {
      try {
        fos.close();
      }
 catch (      IOException e) {
        Throwables.propagate(e);
      }
    }
  }
 else {
    generateCollection(collectionFilesList,m_config.copyToVEM);
  }
}
