{
  for (int i=0, size=table.fkConstraints.length; i < size; i++) {
    Constraint c=table.fkConstraints[i];
    if (ref == null || c.getMain() != ref) {
      if (ArrayUtil.countCommonElements(cols,c.getRefColumns()) == 0) {
        continue;
      }
      c.checkHasMainRef(session,nrow);
    }
  }
  for (int i=0, size=table.fkMainConstraints.length; i < size; i++) {
    Constraint c=table.fkMainConstraints[i];
    int[] common=ArrayUtil.commonElements(cols,c.getMainColumns());
    if (common == null) {
      continue;
    }
    int[] m_columns=c.getMainColumns();
    int[] r_columns=c.getRefColumns();
    boolean nochange=true;
    for (int j=0; j < m_columns.length; j++) {
      if (orow.getData()[m_columns[j]] != nrow[m_columns[j]]) {
        nochange=false;
        break;
      }
    }
    if (nochange) {
      continue;
    }
    RowIterator refiterator=c.findFkRef(session,orow.getData(),false);
    if (refiterator.hasNext()) {
      if (c.core.updateAction == Constraint.NO_ACTION || c.core.updateAction == Constraint.RESTRICT) {
        int errorCode=c.core.deleteAction == Constraint.NO_ACTION ? ErrorCode.X_23501 : ErrorCode.X_23001;
        String[] info=new String[]{c.core.refName.name,c.core.refTable.getName().name};
        throw Error.error(errorCode,ErrorCode.CONSTRAINT,info);
      }
    }
 else {
      continue;
    }
    Table reftable=c.getRef();
    boolean hasref=reftable.getNextConstraintIndex(0,Constraint.MAIN) != -1;
    Index refindex=c.getRefIndex();
    HashMappedList rowSet=(HashMappedList)tableUpdateLists.get(reftable);
    if (rowSet == null) {
      rowSet=new HashMappedList();
      tableUpdateLists.add(reftable,rowSet);
    }
    for (Row refrow=refiterator.getNextRow(); ; refrow=refiterator.getNextRow()) {
      if (refrow == null || refindex.compareRowNonUnique(orow.getData(),m_columns,refrow.getData()) != 0) {
        break;
      }
      Object[] rnd=reftable.getEmptyRowData();
      System.arraycopy(refrow.getData(),0,rnd,0,rnd.length);
      if (c.getUpdateAction() == Constraint.SET_NULL) {
        for (int j=0; j < r_columns.length; j++) {
          rnd[r_columns[j]]=null;
        }
      }
 else       if (c.getUpdateAction() == Constraint.SET_DEFAULT) {
        for (int j=0; j < r_columns.length; j++) {
          ColumnSchema col=reftable.getColumn(r_columns[j]);
          rnd[r_columns[j]]=col.getDefaultValue(session);
        }
        if (path.add(c)) {
          checkCascadeUpdate(session,reftable,tableUpdateLists,refrow,rnd,r_columns,null,path);
          path.remove(c);
        }
      }
 else {
        for (int j=0; j < m_columns.length; j++) {
          rnd[r_columns[j]]=nrow[m_columns[j]];
        }
        if (path.add(c)) {
          checkCascadeUpdate(session,reftable,tableUpdateLists,refrow,rnd,common,table,path);
          path.remove(c);
        }
      }
      mergeUpdate(rowSet,refrow,rnd,r_columns);
    }
  }
}
