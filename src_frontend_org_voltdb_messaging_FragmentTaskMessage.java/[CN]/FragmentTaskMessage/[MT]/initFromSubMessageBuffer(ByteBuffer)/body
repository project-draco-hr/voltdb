{
  super.initFromBuffer(buf);
  short fragCount=buf.getShort();
  assert(fragCount > 0);
  short unplannedCount=buf.getShort();
  assert(unplannedCount >= 0 && unplannedCount <= fragCount);
  m_isFinal=buf.get() != 0;
  m_taskType=buf.get();
  m_emptyForRestart=buf.get() != 0;
  boolean haveOutputDependencies=buf.get() != 0;
  boolean haveInputDependencies=buf.get() != 0;
  m_items=new ArrayList<FragmentData>(fragCount);
  for (int i=0; i < fragCount; i++) {
    FragmentData item=new FragmentData();
    item.m_planHash=new byte[20];
    buf.get(item.m_planHash);
    m_items.add(item);
  }
  for (  FragmentData item : m_items) {
    int paramsbytecount=buf.getInt();
    item.m_parameterSet=ByteBuffer.allocate(paramsbytecount);
    int cachedLimit=buf.limit();
    buf.limit(buf.position() + item.m_parameterSet.remaining());
    item.m_parameterSet.put(buf);
    item.m_parameterSet.flip();
    buf.limit(cachedLimit);
  }
  if (haveOutputDependencies) {
    for (    FragmentData item : m_items) {
      item.m_outputDepId=buf.getInt();
    }
  }
  if (haveInputDependencies) {
    for (    FragmentData item : m_items) {
      short count=buf.getShort();
      if (count > 0) {
        item.m_inputDepIds=new ArrayList<Integer>(count);
        for (int j=0; j < count; j++) {
          item.m_inputDepIds.add(buf.getInt());
          m_inputDepCount++;
        }
      }
    }
  }
  short procNameLen=buf.getShort();
  if (procNameLen >= 0) {
    m_procedureName=new byte[procNameLen];
    buf.get(m_procedureName);
  }
 else {
    m_procedureName=null;
  }
  m_currentBatchIndex=buf.getInt();
  short involvedPartitionCount=buf.getShort();
  m_involvedPartitions=Sets.newHashSet();
  for (int i=0; i < involvedPartitionCount; i++) {
    m_involvedPartitions.add(buf.getInt());
  }
  int initiateTaskMessageLength=buf.getInt();
  if (initiateTaskMessageLength > 0) {
    int startPosition=buf.position();
    Iv2InitiateTaskMessage message=new Iv2InitiateTaskMessage();
    byte messageType=buf.get();
    assert(messageType == VoltDbMessageFactory.IV2_INITIATE_TASK_ID);
    message.initFromBuffer(buf);
    m_initiateTask=message;
    if (m_initiateTask != null && m_initiateTaskBuffer == null) {
      m_initiateTaskBuffer=ByteBuffer.allocate(m_initiateTask.getSerializedSize());
      try {
        m_initiateTask.flattenToBuffer(m_initiateTaskBuffer);
        m_initiateTaskBuffer.flip();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    buf.position(startPosition + initiateTaskMessageLength);
  }
  for (int iUnplanned=0; iUnplanned < unplannedCount; iUnplanned++) {
    short index=buf.getShort();
    assert(index >= 0 && index < m_items.size());
    FragmentData item=m_items.get(index);
    int fragmentPlanLength=buf.getInt();
    if (fragmentPlanLength > 0) {
      item.m_fragmentPlan=new byte[fragmentPlanLength];
      buf.get(item.m_fragmentPlan);
    }
  }
}
