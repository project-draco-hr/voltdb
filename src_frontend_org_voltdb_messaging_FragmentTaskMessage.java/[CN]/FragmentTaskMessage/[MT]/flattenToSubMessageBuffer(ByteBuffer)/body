{
  assert(m_items != null);
  assert(!m_items.isEmpty());
  buf.put(VoltDbMessageFactory.FRAGMENT_TASK_ID);
  super.flattenToBuffer(buf);
  short nInputDepIds=0;
  short nOutputDepIds=0;
  short nUnplanned=0;
  for (  FragmentData item : m_items) {
    if (item.m_inputDepIds != null) {
      nInputDepIds++;
    }
    if (item.m_outputDepId != null) {
      nOutputDepIds++;
    }
    if (item.m_fragmentPlan != null) {
      nUnplanned++;
    }
  }
  buf.putShort((short)m_items.size());
  buf.putShort(nUnplanned);
  buf.put(m_isFinal ? (byte)1 : (byte)0);
  buf.put(m_taskType);
  buf.put(m_emptyForRestart ? (byte)1 : (byte)0);
  buf.put(nOutputDepIds > 0 ? (byte)1 : (byte)0);
  buf.put(nInputDepIds > 0 ? (byte)1 : (byte)0);
  for (  FragmentData item : m_items) {
    buf.put(item.m_planHash);
  }
  for (  FragmentData item : m_items) {
    buf.putInt(item.m_parameterSet.remaining());
    buf.put(item.m_parameterSet.asReadOnlyBuffer());
  }
  if (nOutputDepIds > 0) {
    for (    FragmentData item : m_items) {
      buf.putInt(item.m_outputDepId);
    }
  }
  if (nInputDepIds > 0) {
    for (    FragmentData item : m_items) {
      if (item.m_inputDepIds == null || item.m_inputDepIds.size() == 0) {
        buf.putShort((short)0);
      }
 else {
        buf.putShort((short)item.m_inputDepIds.size());
        for (        Integer inputDepId : item.m_inputDepIds) {
          buf.putInt(inputDepId);
        }
      }
    }
  }
  if (m_initiateTaskBuffer != null) {
    ByteBuffer dup=m_initiateTaskBuffer.duplicate();
    buf.putInt(dup.remaining());
    buf.put(dup);
  }
 else {
    buf.putInt(0);
  }
  for (short index=0; index < m_items.size(); index++) {
    FragmentData item=m_items.get(index);
    if (item.m_fragmentPlan != null) {
      buf.putShort(index);
      buf.putInt(item.m_fragmentPlan.length);
      buf.put(item.m_fragmentPlan);
    }
  }
  buf.putInt(m_procNameInBytes.length);
  buf.put(m_procNameInBytes);
}
