{
  buf.put(VoltDbMessageFactory.FRAGMENT_TASK_ID);
  super.flattenToBuffer(buf);
  if (m_fragmentIds == null) {
    buf.putShort((short)0);
  }
 else {
    buf.putShort((short)m_fragmentIds.length);
    for (int i=0; i < m_fragmentIds.length; i++) {
      buf.putLong(m_fragmentIds[i]);
    }
    for (int i=0; i < m_fragmentIds.length; i++) {
      buf.putInt(m_parameterSets[i].remaining());
      buf.put(m_parameterSets[i].duplicate());
    }
  }
  if (m_outputDepIds == null) {
    buf.putShort((short)0);
  }
 else {
    buf.putShort((short)m_outputDepIds.length);
    for (int i=0; i < m_outputDepIds.length; i++) {
      buf.putInt(m_outputDepIds[i]);
    }
  }
  if (m_inputDepIds == null) {
    buf.putShort((short)0);
  }
 else {
    buf.putShort((short)m_inputDepIds.length);
    for (int i=0; i < m_inputDepIds.length; i++) {
      @SuppressWarnings("unchecked") ArrayList<Integer> l=(ArrayList<Integer>)m_inputDepIds[i];
      buf.putShort((short)l.size());
      for (      int depId : l)       buf.putInt(depId);
    }
  }
  buf.put(m_isFinal ? (byte)1 : (byte)0);
  buf.put(m_taskType);
  buf.put(m_shouldUndo ? (byte)1 : (byte)0);
  assert(buf.capacity() == buf.position());
  buf.limit(buf.position());
}
