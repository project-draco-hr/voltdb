{
  if (m.isError()) {
    protocolError(m,"Internal error message. May indicate that an invalid ack offset was requested.");
    return;
  }
 else   if (m.isOpenResponse()) {
    protocolError(m,"Server must not receive open response message.");
    return;
  }
 else   if (m.isOpen()) {
    if (m_state != RawProcessor.CLOSED) {
      protocolError(m,"Client must not open an already opened connection.");
      return;
    }
    if (m.isClose() || m.isPoll() || m.isAck()) {
      protocolError(m,"Invalid combination of open with close, poll or ack.");
      return;
    }
    m_state=RawProcessor.CONNECTED;
    FastSerializer fs=new FastSerializer();
    try {
      fs.writeInt(m_sourcesArray.size());
      for (      ELTDataSource src : m_sourcesArray) {
        fs.writeByte(src.getIsReplicated());
        fs.writeInt(src.getPartitionId());
        fs.writeInt(src.getTableId());
        fs.writeString(src.getTableName());
        fs.writeInt(src.m_columnNames.size());
        for (int ii=0; ii < src.m_columnNames.size(); ++ii) {
          fs.writeString(src.m_columnNames.get(ii));
          fs.writeInt(src.m_columnTypes.get(ii));
        }
      }
    }
 catch (    IOException e) {
      protocolError(m,"Error producing open response advertisement.");
      return;
    }
    final ELTProtoMessage r=new ELTProtoMessage(-1,-1);
    r.openResponse(fs.getBuffer());
    m_c.writeStream().enqueue(new DeferredSerialization(){
      @Override public BBContainer serialize(      DBBPool p) throws IOException {
        FastSerializer fs=new FastSerializer(p,r.serializableBytes() + 4);
        r.writeToFastSerializer(fs);
        return fs.getBBContainer();
      }
      @Override public void cancel(){
      }
    }
);
    return;
  }
 else   if (m.isPoll() || m.isAck()) {
    if (m_state != RawProcessor.CONNECTED) {
      protocolError(m,"Must not poll or ack a closed connection");
      return;
    }
    ELTDataSource source=RawProcessor.this.getDataSourceFor(m.getPartitionId(),m.getTableId());
    if (source == null) {
      protocolError(m,"No ELT data source exists for partition(" + m.getPartitionId() + ") and table("+ m.getTableId()+ ") pair.");
      return;
    }
    try {
      source.eltAction(new ELTInternalMessage(this,m));
      return;
    }
 catch (    MessagingException e) {
      protocolError(m,e.getMessage());
      return;
    }
  }
 else   if (m.isClose()) {
    closeConnection();
    return;
  }
 else   if (m.isPollResponse()) {
    m_c.writeStream().enqueue(new DeferredSerialization(){
      @Override public BBContainer serialize(      DBBPool p) throws IOException {
        FastSerializer fs=new FastSerializer(p,m.serializableBytes() + 4);
        m.writeToFastSerializer(fs);
        return fs.getBBContainer();
      }
      @Override public void cancel(){
      }
    }
);
    return;
  }
}
