{
  assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.isEmpty());
  List<Long> sitesToInclude=CSVSnapshotWritePlan.computeDedupedLocalSites(txnId,tracker);
  if (sitesToInclude.isEmpty() && !tracker.isFirstHost()) {
    return null;
  }
  final SnapshotRequestConfig config=new SnapshotRequestConfig(jsData,context.getDatabase());
  final AtomicInteger numTables=new AtomicInteger(config.tables.length);
  final SnapshotRegistry.Snapshot snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,SnapshotFormat.CSV,config.tables);
  boolean noTargetsCreated=true;
  final ArrayList<SnapshotTableTask> partitionedSnapshotTasks=new ArrayList<SnapshotTableTask>();
  final ArrayList<SnapshotTableTask> replicatedSnapshotTasks=new ArrayList<SnapshotTableTask>();
  for (  final Table table : config.tables) {
    if (table.getIsreplicated() && !tracker.isFirstHost()) {
      snapshotRecord.removeTable(table.getTypeName());
      numTables.decrementAndGet();
      continue;
    }
    List<SnapshotDataFilter> filters=new ArrayList<SnapshotDataFilter>();
    filters.add(new CSVSnapshotFilter(CatalogUtil.getVoltTable(table),',',null));
    final SnapshotTableTask task=new SnapshotTableTask(table,filters.toArray(new SnapshotDataFilter[filters.size()]),null,false);
    if (table.getIsreplicated()) {
      replicatedSnapshotTasks.add(task);
    }
 else {
      partitionedSnapshotTasks.add(task);
    }
    noTargetsCreated=false;
    result.addRow(context.getHostId(),CoreUtils.getHostnameOrAddress(),table.getTypeName(),"SUCCESS","");
  }
  if (noTargetsCreated) {
    SnapshotRegistry.discardSnapshot(snapshotRecord);
  }
  placePartitionedTasks(partitionedSnapshotTasks,sitesToInclude);
  placeReplicatedTasks(replicatedSnapshotTasks,tracker.getSitesForHost(context.getHostId()));
  return createDeferredSetup(file_path,pathType,file_nonce,config.tables,txnId,partitionTransactionIds,context,extraSnapshotData,timestamp,numTables,snapshotRecord,partitionedSnapshotTasks,replicatedSnapshotTasks);
}
