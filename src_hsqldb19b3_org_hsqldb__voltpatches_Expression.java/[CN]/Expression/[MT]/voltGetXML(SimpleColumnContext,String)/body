{
  int exprOp=getType();
  if (exprOp == OpTypes.SIMPLE_COLUMN) {
    VoltXMLElement asResolved=context.resolveSimpleColumn(this);
    if (asResolved != null) {
      return asResolved;
    }
    opType=OpTypes.COLUMN;
    exprOp=OpTypes.COLUMN;
  }
  VoltXMLElement exp=prototypes.get(exprOp);
  if (exp == null) {
    throwForUnsupportedExpression(exprOp);
  }
  exp=exp.duplicate();
  exp.attributes.put("id",getUniqueId(context.m_session));
  if (realAlias != null) {
    exp.attributes.put("alias",realAlias);
  }
 else   if ((alias != null) && (getAlias().length() > 0)) {
    exp.attributes.put("alias",getAlias());
  }
  if (exprSubType == OpTypes.ANY_QUANTIFIED) {
    exp.attributes.put("opsubtype","any");
  }
 else   if (exprSubType == OpTypes.ALL_QUANTIFIED) {
    exp.attributes.put("opsubtype","all");
  }
  for (  Expression expr : nodes) {
    if (expr != null) {
      VoltXMLElement vxmle=expr.voltGetXML(context,null);
      exp.children.add(vxmle);
      assert(vxmle != null);
    }
  }
switch (exprOp) {
case OpTypes.VALUE:
    if (valueData == null) {
      String valueType=(dataType == null) ? "NULL" : Types.getTypeName(dataType.typeCode);
      exp.attributes.put("valuetype",valueType);
      return exp;
    }
  exp.attributes.put("valuetype",Types.getTypeName(dataType.typeCode));
if (valueData instanceof TimestampData) {
  TimestampData time=(TimestampData)valueData;
  exp.attributes.put("value",Long.toString(Math.round((time.getSeconds() + time.getZone()) * 1e6) + time.getNanos() / 1000));
  return exp;
}
if (valueData instanceof BinaryData) {
BinaryData bd=(BinaryData)valueData;
exp.attributes.put("value",hexEncode(bd.getBytes()));
return exp;
}
if (dataType instanceof NumberType && !dataType.isIntegralType()) {
exp.attributes.put("value",new BigDecimal(valueData.toString()).toPlainString());
return exp;
}
exp.attributes.put("value",valueData.toString());
return exp;
case OpTypes.COLUMN:
ExpressionColumn ec=(ExpressionColumn)this;
return ec.voltAnnotateColumnXML(exp);
case OpTypes.COALESCE:
return convertUsingColumnrefToCoaleseExpression(context.m_session,exp,dataType);
case OpTypes.SQL_FUNCTION:
FunctionSQL fn=(FunctionSQL)this;
return fn.voltAnnotateFunctionXML(exp);
case OpTypes.COUNT:
case OpTypes.SUM:
case OpTypes.AVG:
if (((ExpressionAggregate)this).isDistinctAggregate) {
exp.attributes.put("distinct","true");
}
return exp;
case OpTypes.ORDER_BY:
if (((ExpressionOrderBy)this).isDescending()) {
exp.attributes.put("desc","true");
}
return exp;
case OpTypes.CAST:
if (dataType == null) {
throw new HSQLParseException("VoltDB could not determine the type in a CAST operation");
}
exp.attributes.put("valuetype",dataType.getNameString());
return exp;
case OpTypes.TABLE_SUBQUERY:
if (subQuery == null || subQuery.queryExpression == null) {
throw new HSQLParseException("VoltDB could not determine the subquery");
}
ExpressionColumn parameters[]=new ExpressionColumn[0];
exp.children.add(StatementQuery.voltGetXMLExpression(subQuery.queryExpression,parameters,context.m_session));
return exp;
case OpTypes.ALTERNATIVE:
assert(nodes.length == 2);
if (nodes[RIGHT] instanceof ExpressionValue) {
ExpressionValue val=(ExpressionValue)nodes[RIGHT];
if (val.valueData == null && val.dataType == Type.SQL_ALL_TYPES) {
exp.children.get(RIGHT).attributes.put("valuetype",dataType.getNameString());
}
}
case OpTypes.CASEWHEN:
assert(dataType != null);
exp.attributes.put("valuetype",dataType.getNameString());
return exp;
case OpTypes.WINDOWED_RANK:
case OpTypes.WINDOWED_DENSE_RANK:
assert(dataType != null);
assert(this instanceof ExpressionWindowed);
exp.attributes.put("valuetype",dataType.getNameString());
ExpressionWindowed erank=(ExpressionWindowed)this;
return erank.voltAnnotateWindowedAggregateXML(exp,context);
default :
return exp;
}
}
