{
  if (cached_id != null) {
    return cached_id;
  }
  cached_id=new String();
  int hashCode=0;
  if (getType() == OpTypes.VALUE || getType() == OpTypes.COLUMN) {
    hashCode=super.hashCode();
  }
 else {
    final List<String> id_list=new Vector<String>();
    new Object(){
      public void traverse(      Expression exp){
        for (        Expression expr : exp.nodes) {
          if (expr != null)           id_list.add(expr.getUniqueId(session));
        }
      }
    }
.traverse(this);
    if (id_list.size() > 0) {
      for (      String temp : id_list)       this.cached_id+=temp;
      hashCode=this.cached_id.intern().hashCode();
    }
 else     hashCode=super.hashCode();
  }
  long id=session.getNodeIdForExpression(hashCode);
  cached_id=Long.toString(id);
  return cached_id;
}
