{
  String opAsString;
switch (exprOp) {
case OpTypes.VARIABLE:
    opAsString="HSQL session variables";
  break;
case OpTypes.PARAMETER:
opAsString="HSQL session parameters";
break;
case OpTypes.SEQUENCE:
opAsString="sequence types";
break;
case OpTypes.SCALAR_SUBQUERY:
case OpTypes.ROW_SUBQUERY:
case OpTypes.TABLE_SUBQUERY:
case OpTypes.ROW:
case OpTypes.TABLE:
throw new org.hsqldb_voltpatches.HSQLInterface.HSQLParseException("VoltDB does not support subqueries, consider using views or multiple statements instead");
case OpTypes.FUNCTION:
opAsString="HSQL-style user-defined Java SQL functions";
break;
case OpTypes.ROUTINE_FUNCTION:
opAsString="HSQL routine functions";
break;
case OpTypes.ALL_QUANTIFIED:
case OpTypes.ANY_QUANTIFIED:
opAsString="sequences or subqueries";
break;
case OpTypes.IN:
opAsString="the IN operator. Consider using an OR expression";
break;
case OpTypes.EXISTS:
opAsString="subqueries";
break;
case OpTypes.OVERLAPS:
case OpTypes.UNIQUE:
case OpTypes.NOT_DISTINCT:
opAsString="sequences or subqueries";
break;
case OpTypes.MATCH_SIMPLE:
case OpTypes.MATCH_PARTIAL:
case OpTypes.MATCH_FULL:
case OpTypes.MATCH_UNIQUE_SIMPLE:
case OpTypes.MATCH_UNIQUE_PARTIAL:
case OpTypes.MATCH_UNIQUE_FULL:
opAsString="the MATCH operator";
break;
case OpTypes.ZONE_MODIFIER:
opAsString="ZONE modifier operations";
break;
case OpTypes.MULTICOLUMN:
opAsString="a MULTICOLUMN operation";
break;
default :
opAsString=" the unknown operator with numeric code (" + String.valueOf(exprOp) + ")";
}
throw new org.hsqldb_voltpatches.HSQLInterface.HSQLParseException("VoltDB does not support " + opAsString);
}
