{
  StringBuffer sb=new StringBuffer(64);
  sb.append('\n');
  for (int i=0; i < blanks; i++) {
    sb.append(' ');
  }
switch (opType) {
case OpTypes.VALUE:
    sb.append("VALUE = ").append(valueData);
  sb.append(", TYPE = ").append(dataType.getNameString());
break;
case OpTypes.ROW_SUBQUERY:
case OpTypes.TABLE_SUBQUERY:
sb.append("QUERY ");
sb.append(subQuery.queryExpression.describe(session));
break;
case OpTypes.ROW:
sb.append("ROW = (");
for (Expression node : nodes) {
sb.append(node.describe(session,blanks + 1));
}
sb.append("), TYPE = ").append(dataType == null ? "null" : dataType.getNameString());
break;
case OpTypes.TABLE:
sb.append("VALUELIST ");
for (Expression node : nodes) {
sb.append(node.describe(session,blanks + 1));
sb.append(' ');
}
break;
default :
if (nodes.length > LEFT && nodes[LEFT] != null) {
sb.append(" arg1=[");
sb.append(nodes[LEFT].describe(session,blanks + 1));
sb.append(']');
}
if (nodes.length > RIGHT && nodes[RIGHT] != null) {
sb.append(" arg2=[");
sb.append(nodes[RIGHT].describe(session,blanks + 1));
sb.append(']');
}
}
return sb.toString();
}
