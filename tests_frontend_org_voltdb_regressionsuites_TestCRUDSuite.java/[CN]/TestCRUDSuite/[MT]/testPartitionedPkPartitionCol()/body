{
  final Client client=this.getClient();
  for (int i=0; i < 10; i++) {
    ClientResponse resp=client.callProcedure("P1.insert",i,Integer.toHexString(i));
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    assertEquals(1,resp.getResults()[0].asScalarLong());
  }
  for (int i=0; i < 10; i++) {
    ClientResponse resp=client.callProcedure("P1.select",i);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    VoltTable vt=resp.getResults()[0];
    assertTrue(vt.advanceRow());
    assertEquals(i,vt.getLong(0));
  }
  for (int i=0; i < 10; i++) {
    ClientResponse resp=client.callProcedure("P1.update",i,"STR" + Integer.toHexString(i),i);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    assertEquals(1,resp.getResults()[0].asScalarLong());
  }
  for (int i=0; i < 10; i++) {
    ClientResponse resp=client.callProcedure("P1.select",i);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    VoltTable vt=resp.getResults()[0];
    assertTrue(vt.advanceRow());
    assertTrue(vt.getString(1).equals("STR" + Integer.toHexString(i)));
  }
  for (int i=0; i < 10; i++) {
    ClientResponse resp=client.callProcedure("P1.delete",i);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    assertEquals(1,resp.getResults()[0].asScalarLong());
  }
  ClientResponse resp=client.callProcedure("CountP1");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  assertEquals(0,resp.getResults()[0].asScalarLong());
}
