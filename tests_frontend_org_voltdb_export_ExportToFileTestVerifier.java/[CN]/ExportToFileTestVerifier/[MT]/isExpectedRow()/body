{
  return new TypeSafeDiagnosingMatcher<String[]>(){
    String[] expected=(m_data.peek() == null ? null : m_data.poll());
    Matcher<Integer> seqMatcher=equalTo(m_sequenceNumber);
    @Override public void describeTo(    Description d){
      d.appendText("row [ {sequence ").appendValue(m_sequenceNumber).appendText("}");
      if (expected != null) {
        d.appendValueList(", ",", ","",Arrays.<String>asList(expected));
      }
      d.appendText("]");
    }
    @Override protected boolean matchesSafely(    String[] gotten,    Description d){
      d.appendText(" row [");
      boolean match=expected != null;
      if (!match) {
        d.appendText("{ EOD exhausted expected rows }");
      }
      if (match) {
        int rowSeq=Integer.valueOf(gotten[2]);
        if (!(match=seqMatcher.matches(rowSeq))) {
          d.appendText("{ expected sequence ").appendDescriptionOf(seqMatcher);
          seqMatcher.describeMismatch(rowSeq,d);
          d.appendText(" }");
        }
 else {
          m_sequenceNumber++;
        }
      }
      if (match) {
        String[] toBeMatched=Arrays.copyOfRange(gotten,ExportToFileClient.INTERNAL_FIELD_COUNT - 1,gotten.length);
        Matcher<String[]> rowMatcher=arrayContaining(expected);
        if (!(match=rowMatcher.matches(toBeMatched))) {
          rowMatcher.describeMismatch(toBeMatched,d);
        }
      }
      d.appendText("]");
      System.out.println("Validated partition id " + partitionId + " sequence "+ m_sequenceNumber);
      return match;
    }
  }
;
}
