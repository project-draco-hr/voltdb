{
  TupleValueExpression tve=new TupleValueExpression();
  AbstractExpression comp=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve,tve);
  AbstractExpression notcomp=new OperatorExpression(ExpressionType.OPERATOR_NOT,comp,null);
  ConstantValueExpression trueCVE=ConstantValueExpression.getTrue();
  ConstantValueExpression falseCVE=ConstantValueExpression.getFalse();
  AbstractExpression expr;
{
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,trueCVE,comp);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(comp,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,comp,trueCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(comp,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,falseCVE,comp);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,comp,falseCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,trueCVE,trueCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,trueCVE,falseCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,falseCVE,trueCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,falseCVE,falseCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
  }
{
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,trueCVE,comp);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,comp,trueCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,falseCVE,comp);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(comp,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,comp,falseCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(comp,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,comp,comp);
    AbstractExpression origExpr=(AbstractExpression)expr.clone();
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(origExpr,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,trueCVE,trueCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,trueCVE,falseCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,falseCVE,trueCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,falseCVE,falseCVE);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
  }
{
    AbstractExpression expr1, expr2;
    expr1=new OperatorExpression(ExpressionType.CONJUNCTION_AND,trueCVE,comp);
    expr2=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr1,comp);
    expr=ExpressionUtil.evaluateExpression(expr2);
    AbstractExpression finalExpr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,comp,comp);
    assertEquals(finalExpr,expr);
    expr1=new OperatorExpression(ExpressionType.CONJUNCTION_AND,falseCVE,comp);
    expr2=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr1,comp);
    expr=ExpressionUtil.evaluateExpression(expr2);
    assertEquals(falseCVE,expr);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,trueCVE,null);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(falseCVE,expr);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,falseCVE,null);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr1=new OperatorExpression(ExpressionType.OPERATOR_NOT,comp,null);
    expr2=new OperatorExpression(ExpressionType.CONJUNCTION_OR,falseCVE,expr1);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr2,null);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(comp,expr);
    expr1=new OperatorExpression(ExpressionType.CONJUNCTION_OR,comp,comp);
    expr2=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr1,comp);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr2,null);
    expr=ExpressionUtil.evaluateExpression(expr);
    AbstractExpression expectedExpr1=new OperatorExpression(ExpressionType.CONJUNCTION_AND,notcomp,notcomp);
    AbstractExpression expectedExpr2=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expectedExpr1,notcomp);
    assertEquals(expectedExpr2,expr);
    expr1=new OperatorExpression(ExpressionType.CONJUNCTION_AND,falseCVE,comp);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr1,null);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr1=new OperatorExpression(ExpressionType.CONJUNCTION_AND,falseCVE,comp);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr1,null);
    expr=ExpressionUtil.evaluateExpression(expr);
    assertEquals(trueCVE,expr);
    expr1=new OperatorExpression(ExpressionType.CONJUNCTION_AND,comp,comp);
    expr2=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr1,comp);
    expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr2,null);
    assertEquals(expr,ExpressionUtil.evaluateExpression(expr));
  }
}
