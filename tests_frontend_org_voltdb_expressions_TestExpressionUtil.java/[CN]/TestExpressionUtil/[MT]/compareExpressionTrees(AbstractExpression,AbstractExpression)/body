{
  final Vector<AbstractExpression> orig_list=new Vector<AbstractExpression>();
  new TestExpressionTreeWalker(){
    @Override public void callback(    AbstractExpression exp){
      orig_list.add(exp);
    }
  }
.traverse(out_exp);
  assertFalse(orig_list.isEmpty());
  new TestExpressionTreeWalker(){
    @Override public void callback(    AbstractExpression exp){
      assertFalse(orig_list.isEmpty());
      AbstractExpression pop_exp=orig_list.remove(0);
      TestExpressionUtil.compareExpressions(pop_exp,exp);
    }
  }
.traverse(in_exp);
}
