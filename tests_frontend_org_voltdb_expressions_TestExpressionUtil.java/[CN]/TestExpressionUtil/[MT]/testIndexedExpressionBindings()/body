{
  List<AbstractExpression> arguments;
  TupleValueExpression extraColumn=new TupleValueExpression();
  extraColumn.setTableName("T1");
  extraColumn.setColumnName("extra");
  ConstantValueExpression constant=new ConstantValueExpression();
  constant.setValue("42");
  ConstantValueExpression otherConstant=new ConstantValueExpression();
  otherConstant.setValue("44");
  TupleValueExpression exprA=new TupleValueExpression();
  exprA.setTableName("T1");
  exprA.setColumnName("A");
  OperatorExpression exprB=new OperatorExpression(ExpressionType.OPERATOR_MULTIPLY,extraColumn,exprA);
  FunctionExpression exprC=new FunctionExpression();
  exprC.setAttributes("functionName","yesFunctionName",42);
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  exprC.setArgs(arguments);
  OperatorExpression exprD=new OperatorExpression(ExpressionType.OPERATOR_MULTIPLY,constant,exprA);
  FunctionExpression exprE=new FunctionExpression();
  exprE.setAttributes("anotherFunctionName","yesAnotherWhyNot",44);
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(constant);
  arguments.add(otherConstant);
  exprE.setArgs(arguments);
  List<AbstractExpression> result;
  AbstractExpression likeA=exprA.clone();
  result=likeA.bindingToIndexedExpression(exprA);
  assertNotNull(result);
  assertTrue(result.isEmpty());
  AbstractExpression likeB=exprB.clone();
  result=likeB.bindingToIndexedExpression(exprB);
  assertNotNull(result);
  assertTrue(result.isEmpty());
  AbstractExpression likeC=exprC.clone();
  result=likeC.bindingToIndexedExpression(exprC);
  assertNotNull(result);
  assertTrue(result.isEmpty());
  AbstractExpression likeD=exprD.clone();
  result=likeD.bindingToIndexedExpression(exprD);
  assertNotNull(result);
  assertTrue(result.isEmpty());
  AbstractExpression likeE=exprE.clone();
  result=likeE.bindingToIndexedExpression(exprE);
  assertNotNull(result);
  assertTrue(result.isEmpty());
  ParameterValueExpression paramifiedConstant=new ParameterValueExpression();
  paramifiedConstant.setOriginalValue(constant);
  ParameterValueExpression otherParamifiedConstant=new ParameterValueExpression();
  otherParamifiedConstant.setOriginalValue(otherConstant);
  AbstractExpression paramifiedD=exprD.clone();
  paramifiedD.setLeft(paramifiedConstant);
  result=paramifiedD.bindingToIndexedExpression(exprD);
  assertNotNull(result);
  assertFalse(result.isEmpty());
  assertEquals(result.get(0),paramifiedConstant);
  FunctionExpression paramifiedE=(FunctionExpression)exprE.clone();
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(paramifiedConstant);
  arguments.add(otherConstant);
  paramifiedE.setArgs(arguments);
  result=paramifiedE.bindingToIndexedExpression(exprE);
  assertNotNull(result);
  assertFalse(result.isEmpty());
  assertEquals(result.get(0),paramifiedConstant);
  FunctionExpression reparamifiedE=(FunctionExpression)exprE.clone();
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(constant);
  arguments.add(otherParamifiedConstant);
  reparamifiedE.setArgs(arguments);
  result=reparamifiedE.bindingToIndexedExpression(exprE);
  assertNotNull(result);
  assertFalse(result.isEmpty());
  assertEquals(result.get(0),otherParamifiedConstant);
  FunctionExpression everSoParamifiedE=(FunctionExpression)exprE.clone();
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(paramifiedConstant);
  arguments.add(otherParamifiedConstant);
  everSoParamifiedE.setArgs(arguments);
  result=everSoParamifiedE.bindingToIndexedExpression(exprE);
  assertNotNull(result);
  assertFalse(result.isEmpty());
  assertEquals(result.size(),2);
  assertEquals(result.get(0),paramifiedConstant);
  assertEquals(result.get(1),otherParamifiedConstant);
  ConstantValueExpression neitherConstant=new ConstantValueExpression();
  neitherConstant.setValue("86");
  ParameterValueExpression paramifiedNeitherConstant=new ParameterValueExpression();
  paramifiedNeitherConstant.setOriginalValue(neitherConstant);
  ParameterValueExpression actualUserProvidedParameter=new ParameterValueExpression();
  ParameterValueExpression otherUserProvidedParameter=new ParameterValueExpression();
  result=likeA.bindingToIndexedExpression(exprB);
  assertNull(result);
  result=likeA.bindingToIndexedExpression(exprC);
  assertNull(result);
  result=likeA.bindingToIndexedExpression(exprD);
  assertNull(result);
  result=likeA.bindingToIndexedExpression(exprE);
  assertNull(result);
  result=likeB.bindingToIndexedExpression(exprA);
  assertNull(result);
  result=likeB.bindingToIndexedExpression(exprC);
  assertNull(result);
  result=likeB.bindingToIndexedExpression(exprD);
  assertNull(result);
  result=likeB.bindingToIndexedExpression(exprE);
  assertNull(result);
  result=likeC.bindingToIndexedExpression(exprA);
  assertNull(result);
  result=likeC.bindingToIndexedExpression(exprB);
  assertNull(result);
  result=likeC.bindingToIndexedExpression(exprD);
  assertNull(result);
  result=likeC.bindingToIndexedExpression(exprE);
  assertNull(result);
  result=likeD.bindingToIndexedExpression(exprA);
  assertNull(result);
  result=likeD.bindingToIndexedExpression(exprB);
  assertNull(result);
  result=likeD.bindingToIndexedExpression(exprC);
  assertNull(result);
  result=likeD.bindingToIndexedExpression(exprE);
  assertNull(result);
  result=likeE.bindingToIndexedExpression(exprA);
  assertNull(result);
  result=likeE.bindingToIndexedExpression(exprB);
  assertNull(result);
  result=likeE.bindingToIndexedExpression(exprC);
  assertNull(result);
  result=likeE.bindingToIndexedExpression(exprD);
  assertNull(result);
  AbstractExpression crossParamifiedD=exprD.clone();
  crossParamifiedD.setLeft(paramifiedNeitherConstant);
  result=crossParamifiedD.bindingToIndexedExpression(exprD);
  assertNull(result);
  AbstractExpression userParamifiedD=exprD.clone();
  userParamifiedD.setLeft(actualUserProvidedParameter);
  result=userParamifiedD.bindingToIndexedExpression(exprD);
  assertNull(result);
  FunctionExpression crossParamifiedE=(FunctionExpression)exprE.clone();
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(paramifiedConstant);
  arguments.add(paramifiedNeitherConstant);
  crossParamifiedE.setArgs(arguments);
  result=crossParamifiedE.bindingToIndexedExpression(exprE);
  assertNull(result);
  FunctionExpression userParamifiedE=(FunctionExpression)exprE.clone();
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(actualUserProvidedParameter);
  arguments.add(otherUserProvidedParameter);
  userParamifiedE.setArgs(arguments);
  result=userParamifiedE.bindingToIndexedExpression(exprE);
  assertNull(result);
  TupleValueExpression notTheColumn=new TupleValueExpression();
  notTheColumn.setTableName("T1");
  notTheColumn.setColumnName("notA");
  result=notTheColumn.bindingToIndexedExpression(exprA);
  assertNull(result);
  OperatorExpression notTheOperator=new OperatorExpression(ExpressionType.OPERATOR_DIVIDE,extraColumn,exprA);
  result=notTheOperator.bindingToIndexedExpression(exprB);
  assertNull(result);
  FunctionExpression neitherFunction=new FunctionExpression();
  neitherFunction.setAttributes("notTheFunctionName","noNotTheFunctionName",86);
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  neitherFunction.setArgs(arguments);
  result=neitherFunction.bindingToIndexedExpression(exprC);
  assertNull(result);
  notTheOperator=new OperatorExpression(ExpressionType.OPERATOR_MULTIPLY,constant,extraColumn);
  result=notTheOperator.bindingToIndexedExpression(exprD);
  assertNull(result);
  FunctionExpression notTheArgs=(FunctionExpression)exprE.clone();
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(constant);
  notTheArgs.setArgs(arguments);
  result=notTheArgs.bindingToIndexedExpression(exprE);
  assertNull(result);
  arguments=new ArrayList<AbstractExpression>();
  arguments.add(exprA);
  arguments.add(constant);
  arguments.add(exprA);
  arguments.add(constant);
  notTheArgs.setArgs(arguments);
  result=notTheArgs.bindingToIndexedExpression(exprE);
  assertNull(result);
}
