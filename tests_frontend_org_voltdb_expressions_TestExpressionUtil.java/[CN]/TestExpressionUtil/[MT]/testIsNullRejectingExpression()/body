{
{
    TupleValueExpression tve=new TupleValueExpression();
    tve.setTableName("T");
    tve.setColumnName("C");
    OperatorExpression expr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve,null);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve=new TupleValueExpression();
    tve.setTableName("T");
    tve.setColumnName("C");
    OperatorExpression subexpr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve,null);
    OperatorExpression expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,subexpr,null);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"TT"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    VectorValueExpression vve=new VectorValueExpression();
    InComparisonExpression ine=new InComparisonExpression();
    ine.m_left=tve1;
    ine.m_right=vve;
    assertTrue(ExpressionUtil.isNullRejectingExpression(ine,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(ine,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr1=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    TupleValueExpression tve3=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("B");
    OperatorExpression expr2=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve3,null);
    OperatorExpression expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr1,expr2);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
    OperatorExpression expr3=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve1,null);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr3,expr2);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr1=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    TupleValueExpression tve3=new TupleValueExpression();
    tve3.setTableName("T2");
    tve3.setColumnName("B");
    OperatorExpression expr2=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve3,null);
    OperatorExpression expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr1,expr2);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
    OperatorExpression expr3=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve3,tve1);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr1,expr3);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve=new TupleValueExpression();
    tve.setTableName("T1");
    tve.setColumnName("C");
    ArrayList<AbstractExpression> args=new ArrayList<AbstractExpression>();
    args.add(tve);
    FunctionExpression abs=new FunctionExpression();
    abs.setArgs(args);
    ConstantValueExpression cve=new ConstantValueExpression();
    cve.setValue("5");
    OperatorExpression expr=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,abs,cve);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr1=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    OperatorExpression expr2=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr1,null);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr2,"T1"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr2,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr2,"T"));
    OperatorExpression expr3=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve1,null);
    OperatorExpression expr4=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve2,null);
    OperatorExpression expr5=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr3,expr4);
    OperatorExpression expr6=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr5,null);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr6,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr6,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr6,"T"));
    OperatorExpression expr7=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    OperatorExpression expr8=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr7,expr4);
    OperatorExpression expr9=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr8,null);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr9,"T1"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr9,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr9,"T"));
    OperatorExpression expr10=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr3,expr4);
    OperatorExpression expr11=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr10,null);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr11,"T1"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr11,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr11,"T"));
    OperatorExpression expr12=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr7,expr4);
    OperatorExpression expr13=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr12,null);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr13,"T1"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr13,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr13,"T"));
  }
{
    TupleValueExpression tve=new TupleValueExpression();
    tve.setTableName("T");
    tve.setColumnName("C");
    OperatorExpression expr1=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve,null);
    OperatorExpression expr2=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr1,null);
    OperatorExpression expr3=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr2,null);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr3,"T"));
    TupleValueExpression tve1=new TupleValueExpression();
    tve.setTableName("T");
    tve.setColumnName("A");
    OperatorExpression expr4=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve,tve1);
    OperatorExpression expr5=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr1,expr4);
    OperatorExpression expr6=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr5,null);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr6,"T"));
    OperatorExpression expr7=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr2,expr4);
    OperatorExpression expr8=new OperatorExpression(ExpressionType.OPERATOR_NOT,expr7,null);
    assertFalse(ExpressionUtil.isNullRejectingExpression(expr8,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression("T1","T1","C","C",1);
    TupleValueExpression tve2=new TupleValueExpression("T2","T2","C","C",1);
    OperatorExpression isnull=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve1,null);
    OperatorExpression alternative=new OperatorExpression(ExpressionType.OPERATOR_ALTERNATIVE,tve2,tve1);
    OperatorExpression colalesce=new OperatorExpression(ExpressionType.OPERATOR_CASE_WHEN,isnull,alternative);
    assertFalse(ExpressionUtil.isNullRejectingExpression(colalesce,"T1"));
    assertFalse(ExpressionUtil.isNullRejectingExpression(colalesce,"T2"));
    assertFalse(ExpressionUtil.isNullRejectingExpression(colalesce,"T"));
    TupleValueExpression tve3=new TupleValueExpression("T3","T3","C","C",1);
    OperatorExpression compExpr=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve3,colalesce);
    assertFalse(ExpressionUtil.isNullRejectingExpression(compExpr,"T1"));
    assertFalse(ExpressionUtil.isNullRejectingExpression(compExpr,"T2"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(compExpr,"T3"));
  }
}
