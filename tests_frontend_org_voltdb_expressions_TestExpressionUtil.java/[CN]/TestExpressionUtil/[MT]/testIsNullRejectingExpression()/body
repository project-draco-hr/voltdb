{
{
    TupleValueExpression tve=new TupleValueExpression();
    tve.setTableName("T");
    tve.setColumnName("C");
    OperatorExpression expr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve,null);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve=new TupleValueExpression();
    tve.setTableName("T");
    tve.setColumnName("C");
    OperatorExpression subexpr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve,null);
    OperatorExpression expr=new OperatorExpression(ExpressionType.OPERATOR_NOT,subexpr,null);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"TT"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    VectorValueExpression vve=new VectorValueExpression();
    InComparisonExpression ine=new InComparisonExpression();
    ine.m_left=tve1;
    ine.m_right=vve;
    assertTrue(ExpressionUtil.isNullRejectingExpression(ine,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(ine,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr1=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    TupleValueExpression tve3=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("B");
    OperatorExpression expr2=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve3,null);
    OperatorExpression expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr1,expr2);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
    OperatorExpression expr3=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve1,null);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_AND,expr3,expr2);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
{
    TupleValueExpression tve1=new TupleValueExpression();
    tve1.setTableName("T1");
    tve1.setColumnName("C");
    TupleValueExpression tve2=new TupleValueExpression();
    tve2.setTableName("T2");
    tve2.setColumnName("C");
    OperatorExpression expr1=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve1,tve2);
    TupleValueExpression tve3=new TupleValueExpression();
    tve3.setTableName("T2");
    tve3.setColumnName("B");
    OperatorExpression expr2=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve3,null);
    OperatorExpression expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr1,expr2);
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
    OperatorExpression expr3=new OperatorExpression(ExpressionType.COMPARE_GREATERTHAN,tve3,tve1);
    expr=new OperatorExpression(ExpressionType.CONJUNCTION_OR,expr1,expr3);
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T2"));
    assertTrue(ExpressionUtil.isNullRejectingExpression(expr,"T1"));
    assertTrue(!ExpressionUtil.isNullRejectingExpression(expr,"T"));
  }
}
