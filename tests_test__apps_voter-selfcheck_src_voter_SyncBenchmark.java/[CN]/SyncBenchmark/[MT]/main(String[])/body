{
  try {
    AppHelper apph=new AppHelper(SyncBenchmark.class.getCanonicalName()).add("threads","thread_count","Number of concurrent threads attacking the database.",1).add("displayinterval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("contestants","contestant_count","Number of contestants in the voting contest (from 1 to 10).",6).add("voter","voter_count","Max number of voters (from 305 to 3050000000)",3050000000l).add("max-votes","max_votes_per_phone_number","Maximum number of votes accepted for a given voter (phone number).",2).setArguments(args);
    int threadCount=apph.intValue("threads");
    long displayInterval=apph.longValue("displayinterval");
    long duration=apph.longValue("duration");
    String servers=apph.stringValue("servers");
    int port=apph.intValue("port");
    int contestantCount=apph.intValue("contestants");
    long voterCount=apph.longValue("voter");
    int maxVoteCount=apph.intValue("max-votes");
    final String csv=apph.stringValue("stats");
    apph.validate("duration",(duration > 0)).validate("displayinterval",(displayInterval > 0)).validate("threads",(threadCount > 0)).validate("contestants",(contestantCount > 0)).validate("max-votes",(maxVoteCount > 0));
    apph.printActualUsage();
    Con=ClientConnectionPool.getWithRetry(servers,port);
    final int maxContestants=(int)Con.execute("Initialize",contestantCount,ContestantNamesCSV).getResults()[0].fetchRow(0).getLong(0);
    PhoneCallGenerator switchboard=new PhoneCallGenerator(maxContestants,voterCount);
    Timer timer=new Timer();
    timer.scheduleAtFixedRate(new TimerTask(){
      @Override public void run(){
        System.out.print(Con.getStatistics("Vote"));
      }
    }
,displayInterval * 1000l,displayInterval * 1000l);
    ArrayList<Thread> threads=new ArrayList<Thread>();
    for (int i=0; i < threadCount; i++)     threads.add(new Thread(new ClientThread(servers,port,switchboard,duration,maxVoteCount)));
    for (    Thread thread : threads)     thread.start();
    for (    Thread thread : threads)     thread.join();
    timer.cancel();
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Voting Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d votes was received...\n"+ " - %,9d Accepted\n"+ " - %,9d Rejected (Invalid Contestant)\n"+ " - %,9d Rejected (Maximum Vote Count Reached)\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n"+ "Contestant Name\t\tVotes Received\n",Con.getStatistics("Vote").getExecutionCount(),VotingBoardResults.get(0),VotingBoardResults.get(1),VotingBoardResults.get(2),VotingBoardResults.get(3));
    VoltTable result=Con.execute("Results").getResults()[0];
    String winner="";
    long winnerVoteCount=0;
    while (result.advanceRow()) {
      if (result.getLong(2) > winnerVoteCount) {
        winnerVoteCount=result.getLong(2);
        winner=result.getString(0);
      }
      System.out.printf("%s\t\t%,14d\n",result.getString(0),result.getLong(2));
    }
    System.out.printf("\n\nThe Winner is: %s\n-------------------------------------------------------------------------------------\n",winner);
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    System.out.print(Con.getStatistics("Vote").toString(false));
    Con.saveStatistics(csv);
    Con.close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
