{
switch (opType) {
case OpTypes.VALUE:
    return valueData;
case OpTypes.SIMPLE_COLUMN:
{
    Object[] data=(Object[])session.sessionContext.rangeIterators[rangePosition].getCurrent();
    return data[columnIndex];
  }
case OpTypes.NEGATE:
return ((NumberType)dataType).negate(nodes[LEFT].getValue(session,nodes[LEFT].dataType));
}
Object a=nodes[LEFT].getValue(session);
Object b=nodes[RIGHT].getValue(session);
switch (opType) {
case OpTypes.ADD:
return dataType.add(a,b,nodes[RIGHT].dataType);
case OpTypes.SUBTRACT:
return dataType.subtract(a,b,nodes[RIGHT].dataType);
case OpTypes.MULTIPLY:
return dataType.multiply(a,b);
case OpTypes.DIVIDE:
return dataType.divide(a,b);
case OpTypes.CONCAT:
return dataType.concat(session,a,b);
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
}
