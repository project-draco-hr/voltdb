{
  for (int i=0; i < nodes.length; i++) {
    if (nodes[i] != null) {
      nodes[i].resolveTypes(session,this);
    }
  }
switch (opType) {
case OpTypes.VALUE:
    break;
case OpTypes.NEGATE:
  if (nodes[LEFT].isParam() || nodes[LEFT].dataType == null) {
    throw Error.error(ErrorCode.X_42567);
  }
dataType=nodes[LEFT].dataType;
if (!dataType.isNumberType()) {
throw Error.error(ErrorCode.X_42565);
}
if (nodes[LEFT].opType == OpTypes.VALUE) {
setAsConstantValue(session);
}
break;
case OpTypes.ADD:
if ((nodes[LEFT].dataType != null && nodes[LEFT].dataType.isCharacterType()) || (nodes[RIGHT].dataType != null && nodes[RIGHT].dataType.isCharacterType())) {
opType=OpTypes.CONCAT;
resolveTypesForConcat(session);
break;
}
case OpTypes.SUBTRACT:
case OpTypes.MULTIPLY:
case OpTypes.DIVIDE:
resolveTypesForArithmetic(session);
break;
case OpTypes.CONCAT:
resolveTypesForConcat(session);
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression.resolveTypes()");
}
}
