{
  VoltXMLElement exp=new VoltXMLElement("unset");
  exp.attributes.put("id",getUniqueId(session));
  if (getType() == OpTypes.VALUE) {
    exp.name="value";
    exp.attributes.put("valuetype",Types.getTypeName(dataType.typeCode));
    if (isParam) {
      exp.attributes.put("isparam","true");
    }
 else {
      String value="NULL";
      if (valueData != null)       value=valueData.toString();
      exp.attributes.put("value",value);
    }
    return exp;
  }
  String element=null;
switch (opType) {
case OpTypes.LIMIT:
    element="limit";
  break;
case OpTypes.ADD:
element="add";
break;
case OpTypes.SUBTRACT:
element="subtract";
break;
case OpTypes.MULTIPLY:
element="multiply";
break;
case OpTypes.DIVIDE:
element="divide";
break;
case OpTypes.EQUAL:
element="equal";
break;
case OpTypes.NOT_EQUAL:
element="notequal";
break;
case OpTypes.GREATER:
element="greaterthan";
break;
case OpTypes.GREATER_EQUAL:
element="greaterthanorequalto";
break;
case OpTypes.SMALLER:
element="lessthan";
break;
case OpTypes.SMALLER_EQUAL:
element="lessthanorequalto";
break;
case OpTypes.AND:
element="and";
break;
case OpTypes.OR:
element="or";
break;
case OpTypes.IN:
element="in";
break;
case OpTypes.COUNT:
element="count";
break;
case OpTypes.SUM:
element="sum";
break;
case OpTypes.MIN:
element="min";
break;
case OpTypes.MAX:
element="max";
break;
case OpTypes.AVG:
element="avg";
break;
case OpTypes.SQL_FUNCTION:
element="function";
break;
case OpTypes.IS_NULL:
element="is_null";
break;
case OpTypes.NOT:
element="not";
break;
case OpTypes.CONCAT:
VoltXMLElement expConcat=new VoltXMLElement("function");
expConcat.attributes.put("id",String.valueOf(FunctionCustom.FUNC_CONCAT));
expConcat.attributes.put("name",Tokens.T_CONCAT_WORD);
expConcat.attributes.put("valuetype",Type.SQL_VARCHAR.getNameString());
for (Expression expr : nodes) {
if (expr != null) {
VoltXMLElement vxmle=expr.voltGetXML(session);
expConcat.children.add(vxmle);
assert(vxmle != null);
}
}
return expConcat;
default :
throw new HSQLParseException("Unsupported Expression Arithmetic Operation: " + String.valueOf(opType));
}
exp.name="operation";
exp.attributes.put("optype",element);
if ((this.alias != null) && (getAlias().length() > 0)) {
exp.attributes.put("alias",getAlias());
}
for (Expression expr : nodes) {
VoltXMLElement vxmle=expr.voltGetXML(session);
exp.children.add(vxmle);
assert(vxmle != null);
}
return exp;
}
