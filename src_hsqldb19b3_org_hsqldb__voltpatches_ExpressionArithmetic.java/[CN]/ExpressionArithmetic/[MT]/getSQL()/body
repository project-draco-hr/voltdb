{
  StringBuffer sb=new StringBuffer(64);
switch (opType) {
case OpTypes.VALUE:
    if (valueData == null) {
      return Tokens.T_NULL;
    }
  if (dataType == null) {
    throw Error.runtimeError(ErrorCode.U_S0500,"Expression.getSQL()");
  }
return dataType.convertToSQLString(valueData);
}
String left=getContextSQL(nodes.length > 0 ? nodes[LEFT] : null);
String right=getContextSQL(nodes.length > 1 ? nodes[RIGHT] : null);
switch (opType) {
case OpTypes.CAST:
sb.append(' ').append(Tokens.T_CAST).append('(');
sb.append(left).append(' ').append(Tokens.T_AS).append(' ');
sb.append(dataType.getTypeDefinition());
sb.append(')');
break;
case OpTypes.NEGATE:
sb.append('-').append(left);
break;
case OpTypes.ADD:
sb.append(left).append('+').append(right);
break;
case OpTypes.SUBTRACT:
sb.append(left).append('-').append(right);
break;
case OpTypes.MULTIPLY:
sb.append(left).append('*').append(right);
break;
case OpTypes.DIVIDE:
sb.append(left).append('/').append(right);
break;
case OpTypes.CONCAT:
sb.append(left).append("||").append(right);
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
return sb.toString();
}
