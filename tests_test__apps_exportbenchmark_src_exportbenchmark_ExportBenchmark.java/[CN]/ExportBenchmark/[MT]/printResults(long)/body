{
  ClientStats stats=fullStatsContext.fetch().getStats();
  ArrayList<StatClass> indexStats=new ArrayList<StatClass>();
  for (  StatClass index : serverStats) {
    if (index.m_partition.equals(0)) {
      Double transactions=new Double(index.m_transactions);
      Double decode=new Double(index.m_decode);
      for (      StatClass indexPrime : serverStats) {
        if (!indexPrime.m_partition.equals(0)) {
          if (indexPrime.m_startTime >= index.m_startTime && indexPrime.m_startTime < index.m_endTime) {
            Double ratio=new Double(index.m_endTime - indexPrime.m_startTime) / (indexPrime.m_endTime - indexPrime.m_startTime);
            transactions+=ratio * indexPrime.m_transactions;
            decode+=ratio * indexPrime.m_transactions;
          }
 else           if (indexPrime.m_endTime <= index.m_endTime && indexPrime.m_endTime > index.m_startTime) {
            Double ratio=new Double(indexPrime.m_endTime - index.m_startTime) / (indexPrime.m_endTime - indexPrime.m_startTime);
            transactions+=ratio * indexPrime.m_transactions;
            decode+=ratio * indexPrime.m_transactions;
          }
 else           if (indexPrime.m_endTime >= index.m_endTime && indexPrime.m_startTime <= index.m_startTime) {
            Double ratio=new Double(index.m_endTime - index.m_startTime) / (indexPrime.m_endTime - indexPrime.m_startTime);
            transactions+=ratio * indexPrime.m_transactions;
            decode+=ratio * indexPrime.m_transactions;
          }
 else           if (indexPrime.m_endTime < index.m_endTime && indexPrime.m_startTime > index.m_startTime) {
            transactions+=indexPrime.m_transactions;
            decode+=indexPrime.m_transactions;
          }
        }
      }
      indexStats.add(new StatClass(index.m_partition,transactions.longValue(),decode.longValue(),index.m_startTime,index.m_endTime));
    }
  }
  Double tpsSum=new Double(0);
  Double decodeSum=new Double(0);
  for (  StatClass index : indexStats) {
    tpsSum+=(new Double(index.m_transactions * 1000) / (index.m_endTime - index.m_startTime));
    decodeSum+=(new Double(index.m_decode) / index.m_transactions);
  }
  tpsSum=(tpsSum / indexStats.size());
  decodeSum=(decodeSum / indexStats.size());
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Client Workload Statistics");
  System.out.println(HORIZONTAL_RULE);
  System.out.printf("Average throughput:            %,9d txns/sec\n",stats.getTxnThroughput());
  System.out.printf("Average latency:               %,9.2f ms\n",stats.getAverageLatency());
  System.out.printf("10th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.1));
  System.out.printf("25th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.25));
  System.out.printf("50th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.5));
  System.out.printf("75th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.75));
  System.out.printf("90th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.9));
  System.out.printf("95th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.95));
  System.out.printf("99th percentile latency:       %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.99));
  System.out.printf("99.5th percentile latency:     %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.995));
  System.out.printf("99.9th percentile latency:     %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.999));
  System.out.printf("99.999th percentile latency:   %,9.2f ms\n",stats.kPercentileLatencyAsDouble(.99999));
  System.out.print("\n" + HORIZONTAL_RULE);
  System.out.println(" System Server Statistics");
  System.out.printf("Average throughput:            %,9d txns/sec\n",tpsSum.longValue());
  System.out.printf("Average decode time:           %,9.2f txns/sec\n",decodeSum);
  System.out.println(HORIZONTAL_RULE);
  System.out.printf("Reported Internal Avg Latency: %,9.2f ms\n",stats.getAverageInternalLatency());
  System.out.print("\n" + HORIZONTAL_RULE);
  System.out.println(" Latency Histogram");
  System.out.println(HORIZONTAL_RULE);
  System.out.println(stats.latencyHistoReport());
  try {
    if ((config.statsfile != null) && (config.statsfile.length() != 0)) {
      FileWriter fw=new FileWriter(config.statsfile);
      fw.append(String.format("%d,%d,%d,0,0,%f,%d,0,0,0,0,0,0\n",stats.getStartTimestamp(),duration,successfulInserts.get(),decodeSum,tpsSum.longValue()));
      fw.close();
    }
  }
 catch (  IOException e) {
    System.err.println("Error writing stats file");
    e.printStackTrace();
  }
}
