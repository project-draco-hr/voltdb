{
  String message=null;
  try {
    buffer.clear();
    channel.receive(buffer);
    buffer.flip();
    int messageLength=buffer.get();
    if (messageLength > buffer.capacity()) {
      System.out.println("WARN: packet exceeds allocate size; message truncated");
    }
    byte[] localBuf=new byte[messageLength];
    buffer.get(localBuf,0,messageLength);
    message=new String(localBuf);
  }
 catch (  IOException e) {
    exitWithException("Couldn't read from socket",e);
  }
catch (  BufferUnderflowException e) {
    System.out.println("WARN: Incomplete UDP packet; some data might be lost");
    byte[] localBuf=new byte[buffer.remaining()];
    buffer.get(localBuf,0,buffer.remaining());
    message=new String(localBuf);
  }
  message=message.trim();
  String[] stats=message.split(",");
  if (stats.length < 2) {
    System.err.println("WARN: invalid stats message. Ignoring");
  }
  Integer partitionId=new Integer(Integer.parseInt(stats[2].split(":")[1]));
  Double tps=new Double(Double.parseDouble(stats[0].split(":")[1]));
  try {
    allStats.get(partitionId).add(tps);
  }
 catch (  NullPointerException e) {
    ArrayList<Double> newList=new ArrayList<Double>();
    newList.add(tps);
    allStats.put(partitionId,newList);
  }
}
