{
  String message=null;
  try {
    buffer.clear();
    channel.receive(buffer);
    buffer.flip();
    int messageLength=buffer.get();
    if (messageLength > buffer.capacity()) {
      System.out.println("WARN: packet exceeds allocate size; message truncated");
    }
    byte[] localBuf=new byte[messageLength];
    buffer.get(localBuf,0,messageLength);
    message=new String(localBuf);
  }
 catch (  IOException e) {
    exitWithException("Couldn't read from socket",e);
  }
  JSONObject json;
  try {
    json=new JSONObject(message);
  }
 catch (  JSONException e) {
    System.err.println("Received invalid JSON: " + e.getLocalizedMessage());
    return;
  }
  Integer partitionId=null;
  Long transactions=null;
  Long decode=null;
  Long startTime=null;
  Long endTime=null;
  try {
    partitionId=new Integer(json.getInt("partitionId"));
    transactions=new Long(json.getLong("transactions"));
    decode=new Long(json.getLong("decodeTime"));
    startTime=new Long(json.getLong("startTime"));
    endTime=new Long(json.getLong("endTime"));
  }
 catch (  JSONException e) {
    System.err.println("Unable to parse JSON " + e.getLocalizedMessage());
    return;
  }
  if (transactions > 0 && decode > 0 && startTime > 0 && endTime > startTime)   serverStats.add(new StatClass(partitionId,transactions,decode,startTime,endTime));
}
