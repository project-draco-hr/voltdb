{
  String message=null;
  try {
    buffer.clear();
    channel.receive(buffer);
    buffer.flip();
    int messageLength=buffer.get();
    if (messageLength > buffer.capacity()) {
      System.out.println("WARN: packet exceeds allocate size; message truncated");
    }
    byte[] localBuf=new byte[messageLength];
    buffer.get(localBuf,0,messageLength);
    message=new String(localBuf);
  }
 catch (  IOException e) {
    exitWithException("Couldn't read from socket",e);
  }
catch (  BufferUnderflowException e) {
    System.out.println("WARN: Incomplete UDP packet; some data might be lost");
    byte[] localBuf=new byte[buffer.remaining()];
    buffer.get(localBuf,0,buffer.remaining());
    message=new String(localBuf);
  }
  JSONObject json;
  try {
    json=new JSONObject(message);
  }
 catch (  JSONException e) {
    System.err.println("Received invalid JSON: " + e.getLocalizedMessage());
    return;
  }
  Integer partitionId=null;
  Double tps=null;
  Double decode=null;
  try {
    partitionId=new Integer(json.getInt("partitionId"));
    tps=new Double(json.getDouble("tps"));
    decode=new Double(json.getDouble("decodeTime"));
  }
 catch (  JSONException e) {
    System.err.println("Unable to parse JSON " + e.getLocalizedMessage());
    return;
  }
  if (tpsStats.get(partitionId) == null) {
    ArrayList<Double> newTps=new ArrayList<Double>();
    newTps.add(tps);
    tpsStats.put(partitionId,newTps);
  }
 else {
    tpsStats.get(partitionId).add(tps);
  }
  if (decodeStats.get(partitionId) == null) {
    ArrayList<Double> newDecode=new ArrayList<Double>();
    newDecode.add(decode);
    decodeStats.put(partitionId,newDecode);
  }
 else {
    decodeStats.get(partitionId).add(decode);
  }
}
