{
  String ddl="create table geogs ( geog geography not null );\n" + "partition table geogs on column geog;\n";
  badDDLAgainstSimpleSchema(".*Partition columns must be an integer, varchar or varbinary type.*",ddl);
  ddl="create table geogs ( geog geography(0) not null );";
  badDDLAgainstSimpleSchema(".*precision or scale out of range.*",ddl);
  ddl="create table geogs ( geog geography(154) not null );";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY column GEOG in table GEOGS " + "has length of 154 which is shorter than " + "155, the minimum allowed length for the type.*",ddl);
  ddl="create table geogs ( geog geography(1048577) not null );";
  badDDLAgainstSimpleSchema(".*is > 1048576 char maximum.*",ddl);
  ddl="create table geogs ( geog GEOGRAPHY primary key );\n";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY values are not currently supported as unique index keys.*",ddl);
  ddl="create table geogs ( geog geography, " + " primary key (geog) );\n";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY values are not currently supported as unique index keys.*",ddl);
  ddl="create table geogs ( geog geography, " + " constraint uniq_geog unique (geog) );\n";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY values are not currently supported as unique index keys.*",ddl);
  ddl="create table geogs (geog GEOGRAPHY unique);";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY values are not currently supported as unique index keys.*",ddl);
  ddl="create table geogs (geog GEOGRAPHY); create unique index geogsgeog on geogs(geog);";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY values are not currently supported as unique index keys.*",ddl);
  ddl="create table pgeogs (geog GEOGRAPHY, partkey int ); " + "partition table pgeogs on column partkey; " + "create assumeunique index pgeogsgeog on pgeogs(geog);";
  badDDLAgainstSimpleSchema(".*GEOGRAPHY values are not currently supported as unique index keys.*",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create index geoindex_contains ON geogs (contains(region1, point1) );\n";
  badDDLAgainstSimpleSchema(".*Cannot create index \"GEOINDEX_CONTAINS\" because it contains a BOOLEAN valued function 'CONTAINS', " + "which is not supported.*",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create index geoindex_within100000 ON geogs (DWITHIN(region1, point1, 100000) );\n";
  badDDLAgainstSimpleSchema(".*Cannot create index \"GEOINDEX_WITHIN100000\" because it contains a BOOLEAN valued function 'DWITHIN', " + "which is not supported.*",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL);\n "+ "create index geoindex_nonzero_distance ON geogs ( distance(region1, point1) = 0 );\n";
  badDDLAgainstSimpleSchema(".*Cannot create index \"GEOINDEX_NONZERO_DISTANCE\" because it contains " + "comparison expression '=', which is not supported.*",ddl);
  ddl="create table geogs ( geog geography default 'polygon((3.0 9.0, 3.0 0.0, 0.0 9.0, 3.0 9.0)');\n";
  badDDLAgainstSimpleSchema(".*incompatible data type in conversion.*",ddl);
  ddl="create table geogs ( geog geography default polygonfromtext('polygon((3.0 9.0, 3.0 0.0, 0.0 9.0, 3.0 9.0)') );\n";
  badDDLAgainstSimpleSchema(".*unexpected token.*",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create view geo_view as select count(*), sum(id), sum(distance(region1, point1)) from geogs;\n";
  checkDDLAgainstSimpleSchema(null,ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create view geo_view as select region1, count(*) from geogs group by region1;\n";
  badDDLAgainstSimpleSchema("Materialized view \"GEO_VIEW\" with expression of type GEOGRAPHY in GROUP BY clause not supported.",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create view geo_view as select point1, count(*) from geogs group by point1;\n";
  badDDLAgainstSimpleSchema("Materialized view \"GEO_VIEW\" with expression of type GEOGRAPHY_POINT in GROUP BY clause not supported.",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create view geo_view as select isValid(Region1), count(*) from geogs group by isValid(Region1);\n";
  badDDLAgainstSimpleSchema("A SELECT clause does not allow a BOOLEAN expression. consider using CASE WHEN to decode the BOOLEAN expression into a value of some other type.",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create view geo_view as select Contains(Region1, POINT1), count(*) from geogs group by Contains(Region1, POINT1);\n";
  badDDLAgainstSimpleSchema("A SELECT clause does not allow a BOOLEAN expression. consider using CASE WHEN to decode the BOOLEAN expression into a value of some other type.",ddl);
  ddl="create table geogs ( id integer primary key, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create view geo_view as select Centroid(Region1), count(*) from geogs group by Centroid(Region1);\n";
  badDDLAgainstSimpleSchema("Materialized view \"GEO_VIEW\" with a GEOGRAPHY_POINT valued function 'CENTROID' in GROUP BY clause not supported.",ddl);
  ddl="create table geogs ( id integer, " + " region1 geography NOT NULL, " + " point1 geography_point NOT NULL );\n"+ "create index COMPOUND_GEO_NOT_SUPPORTED on geogs(id, region1);\n";
  badDDLAgainstSimpleSchema("Cannot create index \"COMPOUND_GEO_NOT_SUPPORTED\" " + "because GEOGRAPHY values must be the only component of an index key: \"REGION1\"",ddl);
}
