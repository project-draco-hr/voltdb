{
  List<Pair<String,IndexType>> passing=Arrays.asList(Pair.of("create table t ( goodhashname varchar(256) not null, primary key ( goodhashname ) );",IndexType.BALANCED_TREE),Pair.of("create table t ( goodhashname integer not null, primary key ( goodhashname ) );",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreename varchar(256) not null, primary key ( goodtreename ) );",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreename integer not null, primary key ( goodtreename ) );",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname varchar(256) not null, primary key (goodtreehashname));",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname integer not null, primary key (goodtreehashname));",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname varchar(256) not null, constraint good_tree primary key (goodtreehashname));",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname integer not null, constraint good_tree primary key (goodtreehashname));",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname varchar(256) not null, constraint good_tree primary key (goodtreehashname));",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname integer not null, constraint good_tree primary key (goodtreehashname));",IndexType.BALANCED_TREE),Pair.of("create table t ( goodtreehashname integer not null, constraint good_hash primary key (goodtreehashname));",IndexType.HASH_TABLE),Pair.of("create table t ( goodvanilla integer not null, constraint good_hash_constraint primary key ( goodvanilla ) );",IndexType.HASH_TABLE),Pair.of("create table t ( goodvanilla integer not null ); create unique index myhash on t ( goodvanilla );",IndexType.HASH_TABLE),Pair.of("create table t ( goodhash integer not null primary key );",IndexType.BALANCED_TREE));
  String[] failing={"create table t ( badhashname varchar(256) not null, constraint badhashconstraint primary key ( badhashname ) );","create table t ( badzotzname varchar(256) not null, constraint badhashconstraint primary key ( badzotzname ) );","create table t ( fld1 integer, fld2 varchar(256), constraint badhashconstraint primary key ( fld1, fld2 ) );"};
  for (  Pair<String,IndexType> cmdPair : passing) {
    VoltCompiler c=compileSchemaForDDLTest(cmdPair.getLeft(),true);
    Table tbl=assertTableT(c);
    assertEquals(1,tbl.getIndexes().size());
    Index idx=tbl.getIndexes().iterator().next();
    String msg=String.format("CMD: %s\nExpected %s, got %s",cmdPair.getLeft(),cmdPair.getRight(),IndexType.get(idx.getType()));
    assertEquals(msg,cmdPair.getRight().getValue(),idx.getType());
  }
  for (  String cmd : failing) {
    compileSchemaForDDLTest(cmd,false);
  }
}
