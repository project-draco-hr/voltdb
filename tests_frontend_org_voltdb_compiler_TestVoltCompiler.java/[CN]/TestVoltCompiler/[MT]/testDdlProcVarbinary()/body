{
  final String simpleSchema="create table books (cash integer default 23 NOT NULL, title varbinary(10) default NULL, PRIMARY KEY(cash));" + "partition table books on column cash;" + "create procedure get as select * from books;"+ "create procedure i1 as insert into books values(5, 'AA');"+ "create procedure i2 as insert into books values(5, ?);"+ "create procedure s1 as update books set title = 'bb';"+ "create procedure i3 as insert into books values( ?, ?);"+ "partition procedure i3 on table books column cash;"+ "create procedure d1 as delete from books where title = ? and cash = ?;"+ "partition procedure d1 on table books column cash parameter 1;";
  final File schemaFile=VoltProjectBuilder.writeStringToTempFile(simpleSchema);
  final String schemaPath=schemaFile.getPath();
  final String simpleProject="<?xml version=\"1.0\"?>\n" + "<project>" + "<database name='database'>"+ "<schemas><schema path='" + schemaPath + "' /></schemas>"+ "<procedures/>"+ "</database>"+ "</project>";
  final File projectFile=VoltProjectBuilder.writeStringToTempFile(simpleProject);
  final String projectPath=projectFile.getPath();
  final VoltCompiler compiler=new VoltCompiler();
  final boolean success=compiler.compileWithProjectXML(projectPath,testout_jar);
  assertTrue(success);
  final Catalog c1=compiler.getCatalog();
  final String catalogContents=VoltCompilerUtils.readFileFromJarfile(testout_jar,"catalog.txt");
  final Catalog c2=new Catalog();
  c2.execute(catalogContents);
  assertTrue(c2.serialize().equals(c1.serialize()));
}
