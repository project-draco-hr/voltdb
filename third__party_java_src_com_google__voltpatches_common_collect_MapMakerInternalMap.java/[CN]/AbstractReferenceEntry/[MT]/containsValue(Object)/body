{
  if (value == null) {
    return false;
  }
  final Segment<K,V>[] segments=this.segments;
  long last=-1L;
  for (int i=0; i < CONTAINS_VALUE_RETRIES; i++) {
    long sum=0L;
    for (    Segment<K,V> segment : segments) {
      int unused=segment.count;
      AtomicReferenceArray<ReferenceEntry<K,V>> table=segment.table;
      for (int j=0; j < table.length(); j++) {
        for (ReferenceEntry<K,V> e=table.get(j); e != null; e=e.getNext()) {
          V v=segment.getLiveValue(e);
          if (v != null && valueEquivalence.equivalent(value,v)) {
            return true;
          }
        }
      }
      sum+=segment.modCount;
    }
    if (sum == last) {
      break;
    }
    last=sum;
  }
  return false;
}
