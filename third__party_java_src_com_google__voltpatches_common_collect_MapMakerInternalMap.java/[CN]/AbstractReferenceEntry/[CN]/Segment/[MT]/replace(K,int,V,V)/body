{
  lock();
  try {
    preWriteCleanup();
    AtomicReferenceArray<ReferenceEntry<K,V>> table=this.table;
    int index=hash & (table.length() - 1);
    ReferenceEntry<K,V> first=table.get(index);
    for (ReferenceEntry<K,V> e=first; e != null; e=e.getNext()) {
      K entryKey=e.getKey();
      if (e.getHash() == hash && entryKey != null && map.keyEquivalence.equivalent(key,entryKey)) {
        ValueReference<K,V> valueReference=e.getValueReference();
        V entryValue=valueReference.get();
        if (entryValue == null) {
          if (isCollected(valueReference)) {
            int newCount=this.count - 1;
            ++modCount;
            enqueueNotification(entryKey,hash,entryValue,RemovalCause.COLLECTED);
            ReferenceEntry<K,V> newFirst=removeFromChain(first,e);
            newCount=this.count - 1;
            table.set(index,newFirst);
            this.count=newCount;
          }
          return false;
        }
        if (map.valueEquivalence.equivalent(oldValue,entryValue)) {
          ++modCount;
          enqueueNotification(key,hash,entryValue,RemovalCause.REPLACED);
          setValue(e,newValue);
          return true;
        }
 else {
          recordLockedRead(e);
          return false;
        }
      }
    }
    return false;
  }
  finally {
    unlock();
    postWriteCleanup();
  }
}
