{
  assert(type != null);
  assert(maxSize >= 0);
  assert(nullFraction >= 0.0);
  assert(nullFraction <= 1.0);
  assert(r != null);
  if (r.nextDouble() < nullFraction) {
    return null;
  }
  Object ret=null;
switch (type) {
case TINYINT:
    ret=Byte.valueOf((byte)Math.abs(r.nextInt() % 128));
  break;
case SMALLINT:
ret=Short.valueOf((short)Math.abs(r.nextInt() % 32768));
break;
case INTEGER:
ret=Integer.valueOf(Math.abs(r.nextInt() % 100000));
break;
case BIGINT:
ret=Long.valueOf(Math.abs(r.nextInt() % 100000));
break;
case FLOAT:
ret=Double.valueOf(Math.abs(r.nextDouble()));
break;
case STRING:
{
assert(maxSize > 0);
int size=r.nextInt(maxSize) + 1;
char[] str=new char[size];
for (int ctr=0; ctr < size; ctr++) {
char data=(char)(r.nextInt(128));
if (Character.isLetter(data) == false) {
ctr--;
}
 else {
str[ctr]=data;
}
}
ret=new String(str);
break;
}
case VARBINARY:
{
assert(maxSize > 0);
int size=r.nextInt(maxSize) + 1;
byte[] bytestr=new byte[size];
r.nextBytes(bytestr);
ret=bytestr;
break;
}
case TIMESTAMP:
{
long timestamp=r.nextInt((int)(VoltTypeUtil.DATE_STOP - VoltTypeUtil.DATE_START)) + VoltTypeUtil.DATE_START;
ret=new TimestampType(Long.valueOf(timestamp * 1000));
break;
}
case DECIMAL:
{
BigDecimal bd=new BigDecimal(r.nextDouble());
ret=bd.setScale(12,BigDecimal.ROUND_HALF_EVEN);
break;
}
default :
LOG.severe("ERROR: Unable to generate random value for invalid ValueType '" + type + "'");
}
return (ret);
}
