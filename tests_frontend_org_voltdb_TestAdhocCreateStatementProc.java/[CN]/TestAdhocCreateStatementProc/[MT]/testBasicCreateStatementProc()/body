{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table FOO (" + "ID integer not null," + "VAL bigint, "+ "constraint PK_TREE primary key (ID)"+ ");\n"+ "create table FOO_R ("+ "ID integer not null,"+ "VAL bigint, "+ "constraint PK_TREE_R primary key (ID)"+ ");\n");
  builder.addPartitionInfo("FOO","ID");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    boolean threw=false;
    assertFalse(findProcedureInSystemCatalog("FOOCOUNT"));
    try {
      m_client.callProcedure("FOOCOUNT",1000L);
    }
 catch (    ProcCallException pce) {
      assertTrue(pce.getMessage().contains("Procedure FOOCOUNT was not found"));
      threw=true;
    }
    assertTrue("FOOCOUNT procedure shouldn't exist",threw);
    try {
      m_client.callProcedure("@AdHoc","create procedure FOOCOUNT as select * from FOO where ID=?;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to create statement procedure");
    }
    assertTrue(findProcedureInSystemCatalog("FOOCOUNT"));
    assertFalse(verifySinglePartitionProcedure("FOOCOUNT"));
    try {
      m_client.callProcedure("FOOCOUNT",1000L);
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to call procedure FOOCOUNT");
    }
    try {
      m_client.callProcedure("@AdHoc","partition procedure FOOCOUNT on table FOO column ID parameter 0;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to partition the procedure FOOCOUNT");
    }
    assertTrue(verifySinglePartitionProcedure("FOOCOUNT"));
    try {
      m_client.callProcedure("FOOCOUNT",1000L);
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to call procedure FOOCOUNT");
    }
  }
  finally {
    teardownSystem();
  }
}
