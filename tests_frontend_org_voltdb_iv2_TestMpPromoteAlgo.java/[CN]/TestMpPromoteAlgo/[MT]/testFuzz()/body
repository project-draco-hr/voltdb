{
  InitiatorMailbox mbox=mock(InitiatorMailbox.class);
  Random rand=new Random(System.currentTimeMillis());
  TxnEgo sphandle=TxnEgo.makeZero(0);
  sphandle=sphandle.makeNext();
  RandomMsgGenerator msgGen=new RandomMsgGenerator();
  boolean[] stops=new boolean[3];
  RepairLog[] logs=new RepairLog[3];
  for (int i=0; i < 3; i++) {
    logs[i]=new RepairLog();
    stops[i]=false;
  }
  for (int i=0; i < 4000; i++) {
    TransactionInfoBaseMessage msg=msgGen.generateRandomMessageInStream();
    msg.setSpHandle(sphandle.getTxnId());
    sphandle=sphandle.makeNext();
    if (!msg.isReadOnly() || msg instanceof CompleteTransactionMessage) {
      if (!stops[0]) {
        logs[0].deliver(msg);
      }
      if (!stops[1]) {
        logs[1].deliver(msg);
      }
      logs[2].deliver(msg);
      for (int j=0; j < 2; j++) {
        if (rand.nextDouble() < (.01 / ((j + 1) * 5))) {
          stops[j]=true;
        }
      }
    }
  }
  List<Long> survivors=new ArrayList<Long>();
  survivors.add(0l);
  survivors.add(1l);
  survivors.add(2l);
  MpPromoteAlgo dut=new MpPromoteAlgo(survivors,mbox,"bleh ");
  Future<Pair<Boolean,Long>> result=dut.start();
  for (int i=0; i < 3; i++) {
    List<Iv2RepairLogResponseMessage> stuff=logs[i].contents(dut.getRequestId(),true);
    System.out.println("Repair log size from: " + i + ": "+ stuff.size());
    for (    Iv2RepairLogResponseMessage msg : stuff) {
      msg.m_sourceHSId=(long)i;
      dut.deliver(msg);
    }
  }
  assertFalse(result.isCancelled());
  assertTrue(result.isDone());
  List<TransactionInfoBaseMessage> finalStream=new ArrayList<TransactionInfoBaseMessage>();
  for (  Iv2RepairLogResponseMessage li : dut.m_repairLogUnion) {
    VoltMessage msg=dut.createRepairMessage(li);
    finalStream.add((TransactionInfoBaseMessage)msg);
  }
  long lastTxnId=Long.MIN_VALUE;
  boolean seenFrag=false;
  for (  TransactionInfoBaseMessage msg : finalStream) {
    if (lastTxnId == Long.MIN_VALUE) {
      lastTxnId=msg.getTxnId();
    }
 else {
      assertTrue(msg.getTxnId() > lastTxnId);
      lastTxnId=msg.getTxnId();
    }
    if (msg instanceof FragmentTaskMessage) {
      assertFalse(seenFrag);
      seenFrag=true;
    }
  }
}
