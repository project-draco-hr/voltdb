{
  InitiatorMailbox mailbox=mock(MpInitiatorMailbox.class);
  doReturn(4L).when(mailbox).getHSId();
  ArrayList<Long> masters=new ArrayList<Long>();
  masters.add(1L);
  masters.add(2L);
  masters.add(3L);
  MpPromoteAlgo algo=new MpPromoteAlgo(masters,mailbox,"Test");
  long requestId=algo.getRequestId();
  Future<Pair<Boolean,Long>> result=algo.start();
  verify(mailbox,times(1)).send(any(long[].class),any(Iv2RepairLogRequestMessage.class));
  algo.deliver(makeRealAckResponse(requestId,1L,0,2,txnEgo(1000L),m_hashinatorConfigCooked));
  algo.deliver(makeRealFragResponse(requestId,1L,1,2,txnEgo(1000L)));
  algo.deliver(makeRealAckResponse(requestId,2L,0,1,Long.MAX_VALUE,m_hashinatorConfigCooked));
  Pair<Long,byte[]> torv3=Pair.of(m_hashinatorConfigCooked.getFirst() + 1,m_hashinatorConfigCooked.getSecond());
  algo.deliver(makeRealAckResponse(requestId,3L,0,3,txnEgo(1000L),torv3));
  algo.deliver(makeRealFragResponse(requestId,3L,1,3,txnEgo(1000L)));
  algo.deliver(makeRealCompleteResponse(requestId,3L,2,3,txnEgo(1000L)));
  algo.deliver(makeRealAckResponse(requestId,4L,0,2,txnEgo(1000L),m_hashinatorConfigCooked));
  algo.deliver(makeRealCompleteResponse(requestId,4L,1,2,txnEgo(1000L)));
  List<Long> needsRepair=new ArrayList<Long>();
  needsRepair.add(1L);
  needsRepair.add(2L);
  needsRepair.add(3L);
  verify(mailbox,times(1)).repairReplicasWith(eq(needsRepair),any(Iv2RepairLogResponseMessage.class));
  Pair<Boolean,Long> real_result=result.get();
  assertEquals(txnEgo(1000L),(long)real_result.getSecond());
  assertEquals(torv3.getFirst(),TheHashinator.getCurrentVersionedConfig().getFirst());
}
