{
  InitiatorMailbox mailbox=mock(InitiatorMailbox.class);
  InOrder inOrder=inOrder(mailbox);
  ArrayList<Long> masters=new ArrayList<Long>();
  masters.add(1L);
  masters.add(2L);
  masters.add(3L);
  MpPromoteAlgo algo=new MpPromoteAlgo(masters,mailbox,"Test");
  long requestId=algo.getRequestId();
  Future<Pair<Boolean,Long>> result=algo.start();
  algo.deliver(makeRealAckResponse(requestId,1L,0,8,txnEgo(1000L)));
  algo.deliver(makeRealFragResponse(requestId,1L,1,8,txnEgo(1000L)));
  algo.deliver(makeRealCompleteResponse(requestId,1L,2,8,txnEgo(1000L)));
  algo.deliver(makeRealFragResponse(requestId,1L,3,8,txnEgo(1001L)));
  algo.deliver(makeRealCompleteResponse(requestId,1L,4,8,txnEgo(1001L)));
  algo.deliver(makeRealFragResponse(requestId,1L,5,8,txnEgo(1002L)));
  algo.deliver(makeRealCompleteResponse(requestId,1L,6,8,txnEgo(1002L)));
  algo.deliver(makeRealFragResponse(requestId,1L,7,8,txnEgo(1003L)));
  algo.deliver(makeRealAckResponse(requestId,2L,0,6,txnEgo(1000L)));
  algo.deliver(makeRealFragResponse(requestId,2L,1,6,txnEgo(1000L)));
  algo.deliver(makeRealCompleteResponse(requestId,2L,2,6,txnEgo(1000L)));
  algo.deliver(makeRealFragResponse(requestId,2L,3,6,txnEgo(1001L)));
  algo.deliver(makeRealCompleteResponse(requestId,2L,4,6,txnEgo(1001L)));
  algo.deliver(makeRealFragResponse(requestId,2L,5,6,txnEgo(1002L)));
  algo.deliver(makeRealAckResponse(requestId,3L,0,4,txnEgo(1000L)));
  algo.deliver(makeRealFragResponse(requestId,3L,1,4,txnEgo(1000L)));
  algo.deliver(makeRealCompleteResponse(requestId,3L,2,4,txnEgo(1000L)));
  algo.deliver(makeRealFragResponse(requestId,3L,3,4,txnEgo(1001L)));
  List<Long> needsRepair=new ArrayList<Long>();
  needsRepair.add(1L);
  needsRepair.add(2L);
  needsRepair.add(3L);
  inOrder.verify(mailbox,times(4)).repairReplicasWith(eq(needsRepair),any(Iv2RepairLogResponseMessage.class));
  Pair<Boolean,Long> real_result=result.get();
  assertEquals(txnEgo(1003L),(long)real_result.getSecond());
}
