{
  m_ee.loadCatalog(0,m_catalog.serialize());
  int tableSize=20000;
  int longOpthreshold=10000;
  m_warehousedata.clearRowData();
  for (int i=0; i < tableSize; ++i) {
    m_warehousedata.addRow(i,"name" + i,"st1","st2","city","ST","zip",0,0);
  }
  m_ee.loadTable(WAREHOUSE_TABLEID,m_warehousedata,0,0,0,false,false,WRITE_TOKEN);
  assertEquals(tableSize,m_ee.serializeTable(WAREHOUSE_TABLEID).getRowCount());
  System.out.println("Rows loaded to table " + m_ee.serializeTable(WAREHOUSE_TABLEID).getRowCount());
  Statement selectStmt=m_testProc.getStatements().getIgnoreCase("warehouse_join");
  PlanFragment selectBottomFrag=null;
  int i=0;
  for (  PlanFragment f : selectStmt.getFragments()) {
    if (i != 0)     selectBottomFrag=f;
    i++;
  }
  ActivePlanRepository.clear();
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(selectBottomFrag),Encoder.decodeBase64AndDecompressToBytes(selectBottomFrag.getPlannodetree()),selectStmt.getSqltext());
  ParameterSet params=ParameterSet.emptyParameterSet();
  m_ee.executePlanFragments(1,new long[]{CatalogUtil.getUniqueIdForFragment(selectBottomFrag)},null,new ParameterSet[]{params},new String[]{selectStmt.getSqltext()},3,3,2,42,READ_ONLY_TOKEN);
  assertEquals(longOpthreshold * m_ee.m_callsFromEE,m_ee.m_lastTuplesAccessed);
  assertTrue(m_ee.m_peakMemoryInBytes > m_ee.m_currMemoryInBytes);
}
