{
  m_ee.loadCatalog(0,m_catalog.serialize());
  m_itemData.clearRowData();
  for (int i=0; i < numRowsToInsert; ++i) {
    m_itemData.addRow(i,i + 50,"item" + i,(double)i / 2,"data" + i);
  }
  m_ee.loadTable(ITEM_TABLEID,m_itemData,0,0,0,0,false,false,WRITE_TOKEN);
  assertEquals(numRowsToInsert,m_ee.serializeTable(ITEM_TABLEID).getRowCount());
  System.out.println("Rows loaded to table " + m_ee.serializeTable(ITEM_TABLEID).getRowCount());
  long[] fragIds=new long[numFragsToExecute];
  ParameterSet[] paramSets=new ParameterSet[numFragsToExecute];
  String[] sqlTexts=new String[numFragsToExecute];
  createExecutionEngineInputs(stmtName,fragIds,paramSets,sqlTexts);
  VoltLogger mockedLogger=Mockito.mock(VoltLogger.class);
  ExecutionEngine.setVoltLoggerForTest(mockedLogger);
  try (AutoEngineSettings aes=new AutoEngineSettings()){
    aes.setInitialLogDuration(1);
    aes.setTimeoutLatency(timeout);
switch (sqlTextExpectation) {
case SQL_STATEMENT:
      break;
case NO_STATEMENT:
    sqlTexts=null;
  break;
case STATEMENT_LIST:
sqlTexts=Arrays.copyOfRange(sqlTexts,0,numFragsToExecute - 1);
break;
default :
fail("Invalid value for sqlTextExpectation");
}
m_ee.executePlanFragments(numFragsToExecute,fragIds,null,paramSets,sqlTexts,3,3,2,42,readOnly ? READ_ONLY_TOKEN : WRITE_TOKEN);
if (readOnly && timeout > 0) {
fail();
}
}
 catch (Exception ex) {
String msg=String.format("A SQL query was terminated after %.03f seconds " + "because it exceeded",timeout / 1000.0);
assertTrue(ex.getMessage().contains(msg));
}
String expectedSqlTextMsg=null;
switch (sqlTextExpectation) {
case SQL_STATEMENT:
String sqlText=sqlTexts[numFragsToExecute - 1];
expectedSqlTextMsg=String.format("Executing SQL statement is \"%s\".",sqlText);
break;
case NO_STATEMENT:
expectedSqlTextMsg="SQL statement text is not available.";
break;
case STATEMENT_LIST:
expectedSqlTextMsg="Unable to report specific SQL statement text " + "for fragment task message index " + (numFragsToExecute - 1) + ".  "+ "It MAY be one of these "+ (numFragsToExecute - 1)+ " items: "+ "\"SELECT W_ID FROM WAREHOUSE LIMIT 1;\", ";
break;
default :
fail("Invalid value for sqlTextExpectation");
}
verify(mockedLogger,atLeastOnce()).info(contains(expectedSqlTextMsg));
}
