{
  TPCCProjectBuilder builder=new TPCCProjectBuilder();
  Catalog catalog=builder.createTPCCSchemaCatalog();
  int WAREHOUSE_TABLEID=catalog.getClusters().get("cluster").getDatabases().get("database").getTables().get("WAREHOUSE").getRelativeIndex();
  m_ee.loadCatalog(0,catalog.serialize());
  int tableSize=10000;
  int longOpThreshold=10000;
  VoltTable warehousedata=new VoltTable(new VoltTable.ColumnInfo("W_ID",VoltType.SMALLINT),new VoltTable.ColumnInfo("W_NAME",VoltType.STRING),new VoltTable.ColumnInfo("W_STREET_1",VoltType.STRING),new VoltTable.ColumnInfo("W_STREET_2",VoltType.STRING),new VoltTable.ColumnInfo("W_CITY",VoltType.STRING),new VoltTable.ColumnInfo("W_STATE",VoltType.STRING),new VoltTable.ColumnInfo("W_ZIP",VoltType.STRING),new VoltTable.ColumnInfo("W_TAX",VoltType.FLOAT),new VoltTable.ColumnInfo("W_YTD",VoltType.FLOAT));
  for (int i=0; i < tableSize; ++i) {
    warehousedata.addRow(i,"name" + i,"st1","st2","city","ST","zip",0,0);
  }
  m_ee.loadTable(WAREHOUSE_TABLEID,warehousedata,0,0,false,Long.MAX_VALUE);
  assertEquals(tableSize,m_ee.serializeTable(WAREHOUSE_TABLEID).getRowCount());
  System.out.println("Rows loaded to table " + m_ee.serializeTable(WAREHOUSE_TABLEID).getRowCount());
  Cluster cluster=catalog.getClusters().get("cluster");
  CatalogMap<Procedure> procedures=cluster.getDatabases().get("database").getProcedures();
  Procedure selectProc=procedures.getIgnoreCase("SelectAll");
  Statement selectStmt=selectProc.getStatements().getIgnoreCase("warehouse");
  PlanFragment selectBottomFrag=null;
  int i=0;
  for (  PlanFragment f : selectStmt.getFragments()) {
    if (i != 0)     selectBottomFrag=f;
    i++;
  }
  ActivePlanRepository.clear();
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(selectBottomFrag),Encoder.decodeBase64AndDecompressToBytes(selectBottomFrag.getPlannodetree()));
  ParameterSet params=ParameterSet.emptyParameterSet();
  m_ee.executePlanFragments(1,new long[]{CatalogUtil.getUniqueIdForFragment(selectBottomFrag)},null,new ParameterSet[]{params},3,2,42,Long.MAX_VALUE);
  assertEquals(2,m_ee.m_callsFromEE);
  assertEquals(longOpThreshold * m_ee.m_callsFromEE,m_ee.m_lastTuplesAccessed);
  assertTrue(900000 < m_ee.m_currMemoryInBytes);
  assertTrue(1100000 > m_ee.m_currMemoryInBytes);
  assertTrue(900000 < m_ee.m_peakMemoryInBytes);
  assertTrue(1100000 > m_ee.m_peakMemoryInBytes);
  assertTrue(m_ee.m_peakMemoryInBytes >= m_ee.m_currMemoryInBytes);
  long previousMemoryInBytes=m_ee.m_currMemoryInBytes;
  long previousPeakMemory=m_ee.m_peakMemoryInBytes;
  selectProc=procedures.getIgnoreCase("DeleteRows");
  assertNotNull(selectProc);
  selectStmt=selectProc.getStatements().getIgnoreCase("warehouse_half");
  selectBottomFrag=null;
  i=0;
  for (  PlanFragment f : selectStmt.getFragments()) {
    if (i != 0)     selectBottomFrag=f;
    i++;
  }
  ActivePlanRepository.clear();
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(selectBottomFrag),Encoder.decodeBase64AndDecompressToBytes(selectBottomFrag.getPlannodetree()));
  params=ParameterSet.emptyParameterSet();
  m_ee.executePlanFragments(1,new long[]{CatalogUtil.getUniqueIdForFragment(selectBottomFrag)},null,new ParameterSet[]{params},3,2,42,Long.MAX_VALUE);
  selectProc=procedures.getIgnoreCase("SelectAll");
  selectStmt=selectProc.getStatements().getIgnoreCase("warehouse");
  selectBottomFrag=null;
  i=0;
  for (  PlanFragment f : selectStmt.getFragments()) {
    if (i != 0)     selectBottomFrag=f;
    i++;
  }
  ActivePlanRepository.clear();
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(selectBottomFrag),Encoder.decodeBase64AndDecompressToBytes(selectBottomFrag.getPlannodetree()));
  params=ParameterSet.emptyParameterSet();
  m_ee.executePlanFragments(1,new long[]{CatalogUtil.getUniqueIdForFragment(selectBottomFrag)},null,new ParameterSet[]{params},3,2,42,Long.MAX_VALUE);
  assertTrue(m_ee.m_callsFromEE > 2);
  assertEquals(longOpThreshold,m_ee.m_lastTuplesAccessed);
  assertTrue(450000 < m_ee.m_currMemoryInBytes);
  assertTrue(550000 > m_ee.m_currMemoryInBytes);
  assertTrue(450000 < m_ee.m_peakMemoryInBytes);
  assertTrue(550000 > m_ee.m_peakMemoryInBytes);
  assertTrue(m_ee.m_peakMemoryInBytes >= m_ee.m_currMemoryInBytes);
  assertTrue(m_ee.m_peakMemoryInBytes < previousPeakMemory);
}
