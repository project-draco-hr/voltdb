{
  List<List<List<GeographyValue>>> answer=new ArrayList<List<List<GeographyValue>>>();
  for (int numSides=minNumPoints; numSides <= maxNumPoints; numSides+=1) {
    int idx=numSides - minNumPoints;
    GeographyPointValue column=x.mul(xmul * idx);
    List<List<GeographyValue>> oneSize=new ArrayList<List<GeographyValue>>();
    for (int ratioLevel=0; ratioLevel < numIRLevels; ratioLevel+=1) {
      GeographyPointValue irCenter=column.add(y.mul(numHoleSizeLevels * ymul * ratioLevel));
      List<GeographyValue> oneRadius=new ArrayList<GeographyValue>();
      for (int holeNumber=0; holeNumber < numHoleSizeLevels; holeNumber+=1) {
        GeographyPointValue offset=irCenter.add(y.mul(ymul * holeNumber));
        GeographyPointValue center=firstCenter.add(offset);
        GeographyPointValue firstVertex=firstFirstVertex.add(offset);
        oneRadius.add(PolygonFactory.CreateStar(center,firstVertex,numSides,(ratioLevel + 1.0) / numIRLevels,(holeNumber + 0.0) / numHoleSizeLevels));
      }
      oneSize.add(oneRadius);
    }
    answer.add(oneSize);
  }
  return answer;
}
