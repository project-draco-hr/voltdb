{
  boolean doStars=false;
  boolean doRegs=false;
  int minVerts=3;
  int maxVerts=12;
  int numIRs=5;
  int numHoles=5;
  double xmul=3.0;
  double ymul=3.0;
  for (int arg=0; arg < args.length; arg+=1) {
    if (args[arg].equals("--stars")) {
      doStars=true;
    }
 else     if (args[arg].equals("--reg")) {
      doRegs=true;
    }
 else     if (args[arg].equals("--minVerts")) {
      minVerts=getIntArg(args,++arg,"--minVerts expects one integer parameters");
    }
 else     if (args[arg].equals("--maxVerts")) {
      maxVerts=getIntArg(args,++arg,"--maxVerts expects one integer parameters");
    }
 else     if (args[arg].equals("--numHoles")) {
      numHoles=getIntArg(args,++arg,"--numHoles expects one integer parameter");
    }
 else     if (args[arg].equals("--numIRs")) {
      numIRs=getIntArg(args,++arg,"--numIRs expects one integer parameter");
    }
 else     if (args[arg].equals("--xmul")) {
      xmul=getDoubleArg(args,++arg,"--xmul expects one double parameter");
    }
 else     if (args[arg].equals("--ymul")) {
      ymul=getDoubleArg(args,++arg,"--ymul expects one double parameter");
    }
 else {
      System.err.printf("Unknown command line parameter \"%s\"\n",args[arg]);
      System.exit(100);
    }
  }
  GeographyPointValue center=origin.add(x.mul(10).add(y.mul(10)));
  GeographyPointValue firstVertex=center.add(x.mul(CENTER_SHRINK * xmul).add(y.mul(CENTER_SHRINK * ymul)));
  if (doRegs) {
    List<List<GeographyValue>> polys=makeRegularConvexPolygons(center,firstVertex,minVerts,maxVerts,numHoles,xmul,ymul);
    for (int nsides=0; nsides < polys.size(); nsides+=1) {
      for (int holeSize=0; holeSize < 5; holeSize+=1) {
        System.out.printf("%s\n",formatWKT(polys.get(nsides).get(holeSize).toString()));
      }
    }
  }
  if (doStars) {
    GeographyPointValue scenter=center;
    GeographyPointValue sfirstVertex=firstVertex;
    List<List<List<GeographyValue>>> stars=makeStarPolygons(scenter,sfirstVertex,minVerts,maxVerts,numIRs,numHoles,xmul,ymul);
    for (int nsides=0; nsides < stars.size(); nsides+=1) {
      List<List<GeographyValue>> oneSize=stars.get(nsides);
      for (int innerRadiusIdx=0; innerRadiusIdx < oneSize.size(); innerRadiusIdx+=1) {
        List<GeographyValue> oneInnerRadius=oneSize.get(innerRadiusIdx);
        for (int holeSizeIdx=0; holeSizeIdx < oneInnerRadius.size(); holeSizeIdx+=1) {
          GeographyValue oneStar=oneInnerRadius.get(holeSizeIdx);
          System.out.printf("%s\n",formatWKT(oneStar.toString()));
        }
      }
    }
  }
}
