{
  final AtomicBoolean failed=new AtomicBoolean(false);
class TimeoutMonitorCSL extends ClientStatusListenerExt {
    @Override public void connectionLost(    String hostname,    int port,    int connectionsLeft,    ClientStatusListenerExt.DisconnectCause cause){
      if (cause.equals(DisconnectCause.TIMEOUT)) {
        failed.set(true);
      }
    }
  }
  MockVolt volt=new MockVolt(20000);
  volt.start();
  Distributer dist=new Distributer(false,ClientConfig.DEFAULT_PROCEDURE_TIMOUT_NANOS,2000,false,false,null);
  dist.addClientStatusListener(new TimeoutMonitorCSL());
  dist.createConnection("localhost","","",20000,ClientAuthScheme.HASH_SHA1);
  assertTrue(volt.handler != null);
  long start=System.currentTimeMillis();
  while ((System.currentTimeMillis() - start) < 3000) {
    Thread.yield();
  }
  start=System.currentTimeMillis();
  volt.handler.sendResponses.set(false);
  while (!failed.get()) {
    if ((System.currentTimeMillis() - start) > 2000) {
      break;
    }
 else {
      Thread.yield();
    }
  }
  if ((System.currentTimeMillis() - start) < 1900 && (System.currentTimeMillis() - start) > 2100) {
    fail("Premature timeout occurred " + (System.currentTimeMillis() - start));
  }
  dist.shutdown();
  volt.shutdown();
}
