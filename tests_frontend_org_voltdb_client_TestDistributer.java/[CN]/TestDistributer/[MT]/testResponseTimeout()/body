{
  final CountDownLatch latch=new CountDownLatch(2);
class TimeoutMonitorPCB implements ProcedureCallback {
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      assert(clientResponse.getStatus() == ClientResponse.CONNECTION_LOST);
      latch.countDown();
    }
  }
class TimeoutMonitorCSL extends ClientStatusListenerExt {
    @Override public void connectionLost(    String hostname,    int port,    int connectionsLeft,    ClientStatusListenerExt.DisconnectCause cause){
      latch.countDown();
    }
  }
  MockVolt volt=new MockVolt(20000);
  volt.start();
  Distributer dist=new Distributer(false,ClientConfig.DEFAULT_PROCEDURE_TIMOUT_NANOS,1000,false,null);
  dist.addClientStatusListener(new TimeoutMonitorCSL());
  dist.createConnection("localhost","","",20000,ClientAuthHashScheme.HASH_SHA1);
  assertTrue(volt.handler != null);
  Thread.sleep(3000);
  assertTrue(volt.handler.gotPing);
  SyncCallback sc=new SyncCallback();
  dist.queue(new ProcedureInvocation(88,"@Ping"),sc,true,System.nanoTime(),0);
  sc.waitForResponse();
  assertEquals(ClientResponse.SUCCESS,sc.getResponse().getStatus());
  volt.handler.sendResponses.set(false);
  try {
    ProcedureInvocation invocation=new ProcedureInvocation(44,"@Ping");
    dist.queue(invocation,new TimeoutMonitorPCB(),true,System.nanoTime(),0);
  }
 catch (  NoConnectionsException e) {
    latch.countDown();
  }
  latch.await();
  dist.shutdown();
  volt.shutdown();
}
