{
  try {
    while (shutdown.get() == false) {
      SocketChannel client=socket.accept();
      if (client != null) {
        client.configureBlocking(true);
        final ByteBuffer lengthBuffer=ByteBuffer.allocate(5);
        client.read(lengthBuffer);
        final ByteBuffer serviceLengthBuffer=ByteBuffer.allocate(4);
        while (serviceLengthBuffer.remaining() > 0)         client.read(serviceLengthBuffer);
        serviceLengthBuffer.flip();
        ByteBuffer serviceBuffer=ByteBuffer.allocate(serviceLengthBuffer.getInt());
        while (serviceBuffer.remaining() > 0)         client.read(serviceBuffer);
        serviceBuffer.flip();
        final ByteBuffer usernameLengthBuffer=ByteBuffer.allocate(4);
        while (usernameLengthBuffer.remaining() > 0)         client.read(usernameLengthBuffer);
        usernameLengthBuffer.flip();
        final int usernameLength=usernameLengthBuffer.getInt();
        final ByteBuffer usernameBuffer=ByteBuffer.allocate(usernameLength);
        while (usernameBuffer.remaining() > 0)         client.read(usernameBuffer);
        usernameBuffer.flip();
        final ByteBuffer passwordBuffer=ByteBuffer.allocate(20);
        while (passwordBuffer.remaining() > 0)         client.read(passwordBuffer);
        passwordBuffer.flip();
        final byte usernameBytes[]=new byte[usernameLength];
        final byte passwordBytes[]=new byte[20];
        usernameBuffer.get(usernameBytes);
        passwordBuffer.get(passwordBytes);
        @SuppressWarnings("unused") final String username=new String(usernameBytes);
        final ByteBuffer responseBuffer=ByteBuffer.allocate(34);
        responseBuffer.putInt(30);
        responseBuffer.put((byte)0);
        responseBuffer.put((byte)0);
        responseBuffer.putInt(0);
        responseBuffer.putLong(0);
        responseBuffer.putLong(0);
        responseBuffer.putInt(0);
        responseBuffer.putInt(0);
        responseBuffer.flip();
        handler=new MockInputHandler();
        client.write(responseBuffer);
        client.configureBlocking(false);
        network.registerChannel(client,handler);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    network.shutdown();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  try {
    socket.close();
  }
 catch (  IOException ignored) {
  }
}
