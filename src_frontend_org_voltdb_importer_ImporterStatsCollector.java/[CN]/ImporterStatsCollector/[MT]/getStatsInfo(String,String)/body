{
  ImmutableMap<String,AtomicReference<ImmutableMap<String,StatsInfo>>> existingMap;
  ImmutableMap<String,AtomicReference<ImmutableMap<String,StatsInfo>>> newMap;
  do {
    existingMap=m_importerStats.get();
    if (existingMap != null && existingMap.containsKey(importerName)) {
      break;
    }
    if (existingMap == null) {
      newMap=ImmutableMap.of(importerName,new AtomicReference<ImmutableMap<String,StatsInfo>>());
    }
 else {
      newMap=ImmutableMap.<String,AtomicReference<ImmutableMap<String,StatsInfo>>>builder().putAll(existingMap).put(importerName,new AtomicReference<ImmutableMap<String,StatsInfo>>()).build();
    }
  }
 while (!m_importerStats.compareAndSet(existingMap,newMap));
  AtomicReference<ImmutableMap<String,StatsInfo>> existingProcMapRef=m_importerStats.get().get(importerName);
  ImmutableMap<String,StatsInfo> existingProcMap;
  ImmutableMap<String,StatsInfo> newProcMap;
  do {
    existingProcMap=existingProcMapRef.get();
    if (existingProcMap != null && existingProcMap.containsKey(procName)) {
      break;
    }
    StatsInfo newStatValue=new StatsInfo(importerName,procName);
    if (existingProcMap == null) {
      newProcMap=ImmutableMap.of(procName,newStatValue);
    }
 else {
      newProcMap=ImmutableMap.<String,StatsInfo>builder().putAll(existingProcMap).put(procName,newStatValue).build();
    }
  }
 while (!existingProcMapRef.compareAndSet(existingProcMap,newProcMap));
  return existingProcMapRef.get().get(procName);
}
