{
  if (mb == null)   return false;
  try {
    List<Microbenchmark.Workload> wlList=mb.getWorkload();
    ListIterator<Microbenchmark.Workload> wlLI=wlList.listIterator();
    while (wlLI.hasNext()) {
      Microbenchmark.Workload wl=wlLI.next();
      Workload myWL=new Workload(wl.getWlName());
      System.err.println("Building workload " + myWL.name);
      List<Microbenchmark.Workload.Procedure> procList=wl.getProcedure();
      myWL.procs=new String[procList.size()];
      myWL.percs=new double[procList.size()];
      myWL.paramTypes=new String[procList.size()][];
      myWL.generatorTypes=new GeneratorType[procList.size()][];
      myWL.params=new Object[procList.size()][];
      ListIterator<Microbenchmark.Workload.Procedure> procLI=procList.listIterator();
      int procIndex=0;
      while (procLI.hasNext()) {
        Microbenchmark.Workload.Procedure proc=procLI.next();
        myWL.procs[procIndex]=proc.getProcName();
        myWL.percs[procIndex]=proc.getPercOfWL().doubleValue();
        List<Microbenchmark.Workload.Procedure.Param> paramList=proc.getParam();
        myWL.paramTypes[procIndex]=new String[paramList.size()];
        myWL.generatorTypes[procIndex]=new GeneratorType[paramList.size()];
        myWL.params[procIndex]=new Object[paramList.size()];
        ListIterator<Microbenchmark.Workload.Procedure.Param> paramLI=paramList.listIterator();
        int paramIndex=0;
        while (paramLI.hasNext()) {
          Microbenchmark.Workload.Procedure.Param param=paramLI.next();
          myWL.paramTypes[procIndex][paramIndex]=param.getType();
          myWL.generatorTypes[procIndex][paramIndex]=param.getValue().getGenerator();
          paramIndex++;
        }
        procIndex++;
      }
      workloads.add(myWL);
    }
    System.err.println("All workloads successfully built.");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.err.println("Building failed due to syntax errors in XML file.");
    return false;
  }
}
