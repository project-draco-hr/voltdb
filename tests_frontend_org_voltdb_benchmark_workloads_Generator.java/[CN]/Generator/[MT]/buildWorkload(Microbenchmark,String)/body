{
  if (mb == null)   return false;
  try {
    List<WorkloadType> wlList=mb.getWorkload();
    WorkloadType toBuild=wlList.get(0);
    boolean foundWL=false;
    if (workloadToBuild != null) {
      ListIterator<WorkloadType> wlLI=wlList.listIterator();
      while (wlLI.hasNext()) {
        WorkloadType wl=wlLI.next();
        if (wl.getWlName().equals(workloadToBuild)) {
          toBuild=wl;
          foundWL=true;
          break;
        }
      }
    }
    if (!foundWL) {
      System.err.println("***************************************************************************************************");
      System.err.println("|                                                                                                 |");
      System.err.println("|    Specified workload not found in config file. Defaulting to first workload of config file.    |");
      System.err.println("|                                                                                                 |");
      System.err.println("***************************************************************************************************");
    }
    Workload myWL=new Workload(toBuild.getWlName());
    System.err.println("Building workload " + myWL.name);
    List<ProcedureType> procList=toBuild.getProcedure();
    myWL.procs=new String[procList.size()];
    myWL.percs=new double[procList.size()];
    myWL.paramGenerators=new ParamGenerator[procList.size()][];
    myWL.params=new Object[procList.size()][];
    ListIterator<ProcedureType> procLI=procList.listIterator();
    int procIndex=0;
    while (procLI.hasNext()) {
      ProcedureType proc=procLI.next();
      myWL.procs[procIndex]=proc.getProcName();
      myWL.percs[procIndex]=proc.getPercOfWL().doubleValue();
      Class<?> proc_class=null;
      for (      Class<?> clazz : m_projectBuilder.getProcedures()) {
        if (clazz.getSimpleName().equals(proc.getProcName())) {
          proc_class=clazz;
          break;
        }
      }
      if (proc_class == null) {
        System.err.println("Stored Procedure not found: " + proc.getProcName());
        System.exit(-1);
      }
      Method run_meth=null;
      for (      Method meth : proc_class.getDeclaredMethods()) {
        if (meth.getName().equals("run")) {
          run_meth=meth;
          break;
        }
      }
      if (run_meth == null) {
        System.err.println("No run method in 'Stored Procedure': " + proc.getProcName());
        System.exit(-1);
      }
      ParamType[] paramList=new ParamType[run_meth.getParameterTypes().length];
      for (      ParamType customParam : proc.getParam()) {
        if (customParam.getOffset() != null) {
          paramList[customParam.getOffset()]=customParam;
        }
 else {
          System.err.println("Customizing param specified with no offset: " + customParam);
          throw new RuntimeException("Customizing param specified with no offset: " + customParam);
        }
      }
      myWL.paramGenerators[procIndex]=new ParamGenerator[paramList.length];
      myWL.params[procIndex]=new Object[paramList.length];
      for (int i=0; i < run_meth.getParameterTypes().length; i++) {
        myWL.paramGenerators[procIndex][i]=GeneratorFactory.getParamGenerator(run_meth.getParameterTypes()[i],paramList[i]);
      }
      procIndex++;
    }
    workloads.add(myWL);
    System.err.println("Workload " + myWL.name + " successfully built.");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.err.println("Building failed due to syntax errors in XML file.");
    return false;
  }
}
