{
  List<Item> items=new LinkedList<Item>();
  items.addAll(m_logMP);
  DRLogSegmentId logInfo;
  long maxSeenLocalDrUniqueId;
  if (forMPI) {
    logInfo=new DRLogSegmentId(m_maxSeenMpBinaryLogDRId,Long.MIN_VALUE,m_maxSeenMpBinaryLogMpUniqueId);
    maxSeenLocalDrUniqueId=m_maxSeenLocalMpUniqueId;
  }
 else {
    logInfo=new DRLogSegmentId(m_maxSeenSpBinaryLogDRId,m_maxSeenSpBinaryLogSpUniqueId,m_maxSeenSpBinaryLogMpUniqueId);
    maxSeenLocalDrUniqueId=m_maxSeenLocalSpUniqueId;
    items.addAll(m_logSP);
  }
  Collections.sort(items,m_handleComparator);
  int ofTotal=items.size() + 1;
  tmLog.debug("Responding with " + ofTotal + " repair log parts.");
  List<Iv2RepairLogResponseMessage> responses=new LinkedList<Iv2RepairLogResponseMessage>();
  Iv2RepairLogResponseMessage hheader=new Iv2RepairLogResponseMessage(requestId,ofTotal,m_lastSpHandle,m_lastMpHandle,TheHashinator.getCurrentVersionedConfigCooked(),maxSeenLocalDrUniqueId,logInfo);
  responses.add(hheader);
  int seq=responses.size();
  Iterator<Item> itemator=items.iterator();
  while (itemator.hasNext()) {
    Item item=itemator.next();
    Iv2RepairLogResponseMessage response=new Iv2RepairLogResponseMessage(requestId,seq++,ofTotal,item.getHandle(),item.getTxnId(),item.getMessage());
    responses.add(response);
  }
  return responses;
}
