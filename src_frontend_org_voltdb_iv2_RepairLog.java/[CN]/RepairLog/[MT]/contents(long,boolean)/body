{
  List<Item> items=new LinkedList<Item>();
  items.addAll(m_logMP);
  long maxSeenUniqueId=m_maxSeenMpUniqueId;
  long maxSeenBinaryLogUniqueId=m_maxSeenMpBinaryLogUniqueId;
  long maxSeenBinaryLogDRId=m_maxSeenMpBinaryLogDRId;
  if (!forMPI) {
    maxSeenUniqueId=m_maxSeenSpUniqueId;
    maxSeenBinaryLogUniqueId=m_maxSeenSpBinaryLogUniqueId;
    maxSeenBinaryLogDRId=m_maxSeenSpBinaryLogDRId;
    items.addAll(m_logSP);
  }
  Collections.sort(items,m_handleComparator);
  int ofTotal=items.size() + 1;
  tmLog.debug("Responding with " + ofTotal + " repair log parts.");
  List<Iv2RepairLogResponseMessage> responses=new LinkedList<Iv2RepairLogResponseMessage>();
  Iv2RepairLogResponseMessage hheader=new Iv2RepairLogResponseMessage(requestId,ofTotal,m_lastSpHandle,m_lastMpHandle,TheHashinator.getCurrentVersionedConfigCooked(),maxSeenUniqueId,maxSeenBinaryLogDRId,maxSeenBinaryLogUniqueId);
  responses.add(hheader);
  int seq=responses.size();
  Iterator<Item> itemator=items.iterator();
  while (itemator.hasNext()) {
    Item item=itemator.next();
    Iv2RepairLogResponseMessage response=new Iv2RepairLogResponseMessage(requestId,seq++,ofTotal,item.getHandle(),item.getTxnId(),item.getMessage());
    responses.add(response);
  }
  return responses;
}
