{
  for (  Class<?> cls : procs) {
    HashMap<String,String> procStmts=new HashMap<String,String>();
    stmts.put(cls.getName(),procStmts);
    VoltProcedure procInstance=null;
    try {
      procInstance=(VoltProcedure)cls.newInstance();
    }
 catch (    InstantiationException e1) {
      e1.printStackTrace();
    }
catch (    IllegalAccessException e1) {
      e1.printStackTrace();
    }
    Field[] fields=cls.getFields();
    for (    Field f : fields) {
      if (f.getType() == SQLStmt.class) {
        SQLStmt stmt=null;
        try {
          stmt=(SQLStmt)f.get(procInstance);
        }
 catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
        String sql=stmt.getText();
        sql=sql.trim();
        assert(sql != null);
        String name=cls.getSimpleName() + "-" + f.getName();
        procStmts.put(name,sql);
        String prefix=sql.substring(0,6);
        if (prefix.equalsIgnoreCase("select"))         selects.put(name,sql);
 else         if (prefix.equalsIgnoreCase("update"))         updates.put(name,sql);
 else         if (prefix.equalsIgnoreCase("insert"))         inserts.put(name,sql);
 else         if (prefix.equalsIgnoreCase("delete"))         deletes.put(name,sql);
 else         throw new RuntimeException("SQL Statement unrecognizable");
      }
    }
  }
}
