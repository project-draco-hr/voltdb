{
  if (!message.isSinglePartition()) {
    throw new RuntimeException("SpScheduler.handleIv2InitiateTaskMessage " + "should never receive multi-partition initiations.");
  }
  final String procedureName=message.getStoredProcedureName();
  long newSpHandle;
  long uniqueId=Long.MIN_VALUE;
  Iv2InitiateTaskMessage msg=message;
  if (m_isLeader || message.isReadOnly()) {
    if (!m_isLeader && CoreUtils.getHostIdFromHSId(msg.getInitiatorHSId()) != CoreUtils.getHostIdFromHSId(m_mailbox.getHSId())) {
      VoltDB.crashLocalVoltDB("Only allowed to do short circuit reads locally",true,null);
    }
    if (message.isForReplay()) {
      uniqueId=message.getUniqueId();
      try {
        m_uniqueIdGenerator.updateMostRecentlyGeneratedUniqueId(uniqueId);
      }
 catch (      Exception e) {
        hostLog.fatal(e.getMessage());
        hostLog.fatal("Invocation: " + message);
        VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
      }
    }
    if (message.isForReplay()) {
      TxnEgo ego=advanceTxnEgo();
      newSpHandle=ego.getTxnId();
    }
 else     if (m_isLeader && !message.isReadOnly()) {
      TxnEgo ego=advanceTxnEgo();
      newSpHandle=ego.getTxnId();
      uniqueId=m_uniqueIdGenerator.getNextUniqueId();
    }
 else {
      uniqueId=UniqueIdGenerator.makeIdFromComponents(Math.max(System.currentTimeMillis(),m_uniqueIdGenerator.lastUsedTime),0,m_uniqueIdGenerator.partitionId);
      newSpHandle=getMaxTaskedSpHandle();
    }
    msg=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),getRepairLogTruncationHandleForReplicas(),message.getTxnId(),message.getUniqueId(),message.isReadOnly(),message.isSinglePartition(),message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId(),message.isForReplay());
    msg.setSpHandle(newSpHandle);
    if (SystemProcedureCatalog.listing.get(procedureName) == null || !SystemProcedureCatalog.listing.get(procedureName).getEverysite()) {
      msg.setTxnId(newSpHandle);
      msg.setUniqueId(uniqueId);
    }
    if (m_isLeader && (!msg.isReadOnly()) && (m_sendToHSIds.length > 0)) {
      Iv2InitiateTaskMessage replmsg=new Iv2InitiateTaskMessage(m_mailbox.getHSId(),m_mailbox.getHSId(),getRepairLogTruncationHandleForReplicas(),msg.getTxnId(),msg.getUniqueId(),msg.isReadOnly(),msg.isSinglePartition(),msg.getStoredProcedureInvocation(),msg.getClientInterfaceHandle(),msg.getConnectionId(),msg.isForReplay());
      replmsg.setSpHandle(newSpHandle);
      m_mailbox.send(m_sendToHSIds,replmsg);
      DuplicateCounter counter=new DuplicateCounter(msg.getInitiatorHSId(),msg.getTxnId(),m_replicaHSIds,msg);
      safeAddToDuplicateCounterMap(new DuplicateCounterKey(msg.getTxnId(),newSpHandle),counter);
    }
  }
 else {
    setMaxSeenTxnId(msg.getSpHandle());
    newSpHandle=msg.getSpHandle();
    if (UniqueIdGenerator.getPartitionIdFromUniqueId(msg.getUniqueId()) == m_partitionId) {
      m_uniqueIdGenerator.updateMostRecentlyGeneratedUniqueId(msg.getUniqueId());
    }
  }
  Iv2Trace.logIv2InitiateTaskMessage(message,m_mailbox.getHSId(),msg.getTxnId(),newSpHandle);
  doLocalInitiateOffer(msg);
  return;
}
