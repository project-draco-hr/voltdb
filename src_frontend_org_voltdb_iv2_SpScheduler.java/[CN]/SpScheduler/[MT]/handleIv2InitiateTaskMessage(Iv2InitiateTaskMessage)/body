{
  final String procedureName=message.getStoredProcedureName();
  if (message.isSinglePartition()) {
    long newSpHandle;
    long uniqueId;
    Iv2InitiateTaskMessage msg=message;
    if (m_isLeader || message.isReadOnly()) {
      if (!m_isLeader && CoreUtils.getHostIdFromHSId(msg.getInitiatorHSId()) != CoreUtils.getHostIdFromHSId(m_mailbox.getHSId())) {
        VoltDB.crashLocalVoltDB("Only allowed to do short circuit reads locally",true,null);
      }
      if (message.isForReplay()) {
        newSpHandle=message.getTxnId();
        uniqueId=message.getUniqueId();
        setMaxSeenTxnId(newSpHandle);
        m_uniqueIdGenerator.updateMostRecentlyGeneratedUniqueId(uniqueId);
      }
 else       if (m_isLeader) {
        TxnEgo ego=advanceTxnEgo();
        newSpHandle=ego.getTxnId();
        uniqueId=m_uniqueIdGenerator.getNextUniqueId();
      }
 else {
        uniqueId=UniqueIdGenerator.makeIdFromComponents(Math.max(System.currentTimeMillis(),m_uniqueIdGenerator.lastUsedTime),0,m_uniqueIdGenerator.partitionId);
        newSpHandle=getCurrentTxnId();
      }
      msg=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),m_repairLogTruncationHandle,message.getTxnId(),message.getUniqueId(),message.isReadOnly(),message.isSinglePartition(),message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId(),message.isForReplay());
      msg.setSpHandle(newSpHandle);
      if (SystemProcedureCatalog.listing.get(procedureName) == null || !SystemProcedureCatalog.listing.get(procedureName).getEverysite()) {
        msg.setTxnId(newSpHandle);
        msg.setUniqueId(uniqueId);
      }
      if (m_isLeader && !msg.isReadOnly() && m_sendToHSIds.length > 0) {
        Iv2InitiateTaskMessage replmsg=new Iv2InitiateTaskMessage(m_mailbox.getHSId(),m_mailbox.getHSId(),m_repairLogTruncationHandle,msg.getTxnId(),msg.getUniqueId(),msg.isReadOnly(),msg.isSinglePartition(),msg.getStoredProcedureInvocation(),msg.getClientInterfaceHandle(),msg.getConnectionId(),msg.isForReplay());
        replmsg.setSpHandle(newSpHandle);
        for (        long hsId : m_sendToHSIds) {
          m_mailbox.send(hsId,replmsg);
        }
        DuplicateCounter counter=new DuplicateCounter(msg.getInitiatorHSId(),msg.getTxnId(),m_replicaHSIds);
        m_duplicateCounters.put(new DuplicateCounterKey(msg.getTxnId(),newSpHandle),counter);
      }
    }
 else {
      setMaxSeenTxnId(msg.getSpHandle());
      newSpHandle=msg.getSpHandle();
      uniqueId=msg.getUniqueId();
    }
    Iv2Trace.logIv2InitiateTaskMessage(message,m_mailbox.getHSId(),msg.getTxnId(),newSpHandle);
    final SpProcedureTask task=new SpProcedureTask(m_mailbox,procedureName,m_pendingTasks,msg,m_drGateway);
    if (!msg.isReadOnly()) {
      if (!m_cl.log(msg,newSpHandle,m_durabilityListener,task)) {
        m_pendingTasks.offer(task);
      }
    }
 else {
      m_pendingTasks.offer(task);
    }
    return;
  }
 else {
    throw new RuntimeException("SpScheduler.handleIv2InitiateTaskMessage " + "should never receive multi-partition initiations.");
  }
}
