{
  final String procedureName=message.getStoredProcedureName();
  final ProcedureRunner runner=m_loadedProcs.getProcByName(procedureName);
  if (message.isSinglePartition()) {
    long newSpHandle;
    Iv2InitiateTaskMessage msg=message;
    if (m_isLeader) {
      msg=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),m_repairLogTruncationHandle,message.getTxnId(),message.isReadOnly(),message.isSinglePartition(),message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId());
      advanceTxnEgo();
      newSpHandle=currentTxnEgoSequence();
      msg.setSpHandle(newSpHandle);
      if (!runner.isEverySite()) {
        msg.setTxnId(newSpHandle);
      }
      if (m_sendToHSIds.size() > 0) {
        Iv2InitiateTaskMessage replmsg=new Iv2InitiateTaskMessage(m_mailbox.getHSId(),m_mailbox.getHSId(),m_repairLogTruncationHandle,msg.getTxnId(),msg.isReadOnly(),msg.isSinglePartition(),msg.getStoredProcedureInvocation(),msg.getClientInterfaceHandle(),msg.getConnectionId());
        replmsg.setSpHandle(newSpHandle);
        m_mailbox.send(com.google.common.primitives.Longs.toArray(m_sendToHSIds),replmsg);
        DuplicateCounter counter=new DuplicateCounter(msg.getInitiatorHSId(),msg.getTxnId(),m_replicaHSIds);
        m_duplicateCounters.put(newSpHandle,counter);
      }
    }
 else {
      setMaxSeenTxnId(msg.getSpHandle());
      newSpHandle=currentTxnEgoSequence();
    }
    Iv2Trace.logIv2InitiateTaskMessage(message,m_mailbox.getHSId(),msg.getTxnId(),newSpHandle);
    final SpProcedureTask task=new SpProcedureTask(m_mailbox,runner,newSpHandle,m_pendingTasks,msg);
    m_pendingTasks.offer(task);
    return;
  }
 else {
    throw new RuntimeException("SpScheduler.handleIv2InitiateTaskMessage " + "should never receive multi-partition initiations.");
  }
}
