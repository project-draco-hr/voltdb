{
  m_replicaHSIds=replicas;
  List<Long> sendToHSIds=new ArrayList<Long>(m_replicaHSIds);
  sendToHSIds.remove(m_mailbox.getHSId());
  m_sendToHSIds=Longs.toArray(sendToHSIds);
  List<DuplicateCounterKey> doneCounters=new LinkedList<DuplicateCounterKey>();
  for (  Entry<DuplicateCounterKey,DuplicateCounter> entry : m_duplicateCounters.entrySet()) {
    DuplicateCounter counter=entry.getValue();
    int result=counter.updateReplicas(m_replicaHSIds);
    if (result == DuplicateCounter.DONE) {
      doneCounters.add(entry.getKey());
    }
  }
  Collections.sort(doneCounters);
  for (  DuplicateCounterKey key : doneCounters) {
    DuplicateCounter counter=m_duplicateCounters.remove(key);
    final TransactionState txn=m_outstandingTxns.get(key.m_txnId);
    if (txn == null || txn.isDone()) {
      m_outstandingTxns.remove(key.m_txnId);
      setRepairLogTruncationHandle(key.m_spHandle);
    }
    VoltMessage resp=counter.getLastResponse();
    if (resp != null) {
      if (resp instanceof FragmentResponseMessage) {
        FragmentResponseMessage fresp=(FragmentResponseMessage)resp;
        fresp.setExecutorSiteId(m_mailbox.getHSId());
      }
      m_mailbox.send(counter.m_destinationId,resp);
    }
 else {
      hostLog.warn("TXN " + counter.getTxnId() + " lost all replicas and "+ "had no responses.  This should be impossible?");
    }
  }
  SettableFuture<Boolean> written=writeIv2ViableReplayEntry();
  blockFaultLogWriteStatus(written);
}
