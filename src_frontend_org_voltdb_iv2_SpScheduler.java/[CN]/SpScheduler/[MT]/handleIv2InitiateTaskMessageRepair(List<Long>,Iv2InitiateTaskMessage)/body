{
  final String procedureName=message.getStoredProcedureName();
  if (!message.isSinglePartition()) {
    throw new RuntimeException("SpScheduler.handleIv2InitiateTaskMessageRepair " + "should never receive multi-partition initiations.");
  }
  List<Long> expectedHSIds=new ArrayList<Long>(needsRepair);
  DuplicateCounter counter=new DuplicateCounter(HostMessenger.VALHALLA,message.getTxnId(),expectedHSIds);
  m_duplicateCounters.put(message.getSpHandle(),counter);
  if (needsRepair.contains(m_mailbox.getHSId())) {
    needsRepair.remove(m_mailbox.getHSId());
    Iv2InitiateTaskMessage localWork=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),message);
    final SpProcedureTask task=new SpProcedureTask(m_mailbox,procedureName,m_pendingTasks,localWork);
    m_pendingTasks.offer(task);
  }
  if (!needsRepair.isEmpty()) {
    Iv2InitiateTaskMessage replmsg=new Iv2InitiateTaskMessage(m_mailbox.getHSId(),m_mailbox.getHSId(),message);
    m_mailbox.send(com.google.common.primitives.Longs.toArray(needsRepair),replmsg);
  }
}
