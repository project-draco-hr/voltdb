{
  List<Long> expectedHSIds=new ArrayList<Long>(needsRepair);
  DuplicateCounter counter=new DuplicateCounter(message.getCoordinatorHSId(),message.getTxnId(),expectedHSIds);
  m_duplicateCounters.put(new DuplicateCounterKey(message.getTxnId(),message.getSpHandle()),counter);
  if (needsRepair.contains(m_mailbox.getHSId())) {
    if (m_outstandingTxns.get(message.getTxnId()) != null) {
      hostLog.warn("SPI repair attempted to repair a fragment which it has already seen. " + "This shouldn't be possible.");
      throw new RuntimeException("Attempted to repair with a fragment we've already seen.");
    }
    needsRepair.remove(m_mailbox.getHSId());
    FragmentTaskMessage localWork=new FragmentTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),message);
    ParticipantTransactionState txn=new ParticipantTransactionState(message.getSpHandle(),localWork);
    m_outstandingTxns.put(message.getTxnId(),txn);
    TransactionTask task;
    if (message.isSysProcTask()) {
      task=new SysprocFragmentTask(m_mailbox,txn,m_pendingTasks,localWork,null);
    }
 else {
      task=new FragmentTask(m_mailbox,txn,m_pendingTasks,localWork,null);
    }
    m_pendingTasks.offer(task);
  }
  if (!needsRepair.isEmpty()) {
    FragmentTaskMessage replmsg=new FragmentTaskMessage(m_mailbox.getHSId(),m_mailbox.getHSId(),message);
    m_mailbox.send(com.google.common.primitives.Longs.toArray(needsRepair),replmsg);
  }
}
