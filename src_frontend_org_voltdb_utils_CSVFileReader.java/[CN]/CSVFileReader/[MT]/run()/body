{
  while ((config.limitrows-- > 0)) {
    if (errored) {
      break;
    }
    try {
      if (listReader.getLineNumber() == 0) {
        totalLineCount.set(config.skip);
      }
 else {
        totalLineCount.set(listReader.getLineNumber());
      }
      long st=System.nanoTime();
      List<String> lineList=listReader.read();
      long end=System.nanoTime();
      m_parsingTimeEnd+=(end - st);
      if (lineList == null) {
        if (totalLineCount.get() > listReader.getLineNumber()) {
          totalLineCount.set(listReader.getLineNumber());
        }
        break;
      }
      totalRowCount.incrementAndGet();
      String lineCheckResult;
      String[] correctedLine=lineList.toArray(new String[0]);
      if ((lineCheckResult=checkparams_trimspace(correctedLine,columnCnt)) != null) {
        String[] info={lineList.toString(),lineCheckResult};
        if (synchronizeErrorInfo(totalLineCount.get() + 1,info)) {
          errored=true;
        }
        continue;
      }
      CSVLineWithMetaData lineData=new CSVLineWithMetaData(correctedLine,lineList,listReader.getLineNumber());
      int partitionId=0;
      if (!CSVPartitionProcessor.isMP) {
        partitionId=TheHashinator.getPartitionForParameter(partitionColumnType.getValue(),(Object)lineData.correctedLine[partitionedColumnIndex]);
      }
      BlockingQueue<CSVLineWithMetaData> q=processorQueues.get(partitionId);
      q.put(lineData);
    }
 catch (    SuperCsvException e) {
      e.printStackTrace();
      String[] info={e.getMessage(),""};
      if (synchronizeErrorInfo(totalLineCount.get() + 1,info)) {
        break;
      }
    }
catch (    IOException ioex) {
      ioex.printStackTrace();
      break;
    }
catch (    InterruptedException ex) {
      m_log.error("Failed to add lines for partition processor queues: " + ex);
    }
  }
  if (errorInfo.size() >= config.maxerrors) {
    m_log.info("The number of Failure row data exceeds " + config.maxerrors);
  }
  try {
    listReader.close();
  }
 catch (  IOException ex) {
    m_log.error("Error cloging Reader: " + ex);
  }
 finally {
    for (    BlockingQueue<CSVLineWithMetaData> q : processorQueues.values()) {
      if (errored) {
        q.clear();
      }
      try {
        q.put(endOfData);
      }
 catch (      InterruptedException ex) {
        m_log.error("Failed to add endOfData for Partition Processor. " + ex);
      }
    }
    m_log.info("Rows Queued by Reader: " + totalRowCount.get());
  }
  try {
    m_log.info("Waiting for partition processors to finish.");
    processor_cdl.await();
    m_log.info("Partition Processors Done.");
  }
 catch (  InterruptedException ex) {
    ;
  }
}
