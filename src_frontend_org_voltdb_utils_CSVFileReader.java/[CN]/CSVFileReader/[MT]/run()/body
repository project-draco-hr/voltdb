{
  List<String> lineList;
  if (m_config.header) {
    if (!checkHeader()) {
      m_log.error("In the CSV file " + m_config.file + ", the header "+ m_listReader.getUntokenizedRow()+ " does not match "+ "an existing column in the table "+ m_config.table+ ".");
      System.exit(-1);
    }
  }
  while ((m_config.limitrows-- > 0)) {
    if (m_errHandler.hasReachedErrorLimit()) {
      break;
    }
    try {
      if (m_listReader.getLineNumber() == 0) {
        m_totalLineCount.set(m_config.skip);
      }
 else {
        m_totalLineCount.set(m_listReader.getLineNumber());
      }
      long st=System.nanoTime();
      lineList=m_listReader.read();
      long end=System.nanoTime();
      m_parsingTime+=(end - st);
      if (lineList == null) {
        if (m_totalLineCount.get() > m_listReader.getLineNumber()) {
          m_totalLineCount.set(m_listReader.getLineNumber());
        }
        break;
      }
      m_totalRowCount.incrementAndGet();
      if (lineList.isEmpty()) {
        continue;
      }
      String[] lineValues=lineList.toArray(new String[0]);
      String lineCheckResult;
      String[] reorderValues=new String[m_columnCount];
      if ((lineCheckResult=checkparams_trimspace_reorder(lineValues,reorderValues)) != null) {
        final RowWithMetaData metaData=new RowWithMetaData(m_listReader.getUntokenizedRow(),m_totalLineCount.get() + 1);
        if (m_errHandler.handleError(metaData,null,lineCheckResult)) {
          break;
        }
        continue;
      }
      RowWithMetaData lineData=new RowWithMetaData(m_listReader.getUntokenizedRow(),m_listReader.getLineNumber());
      m_loader.insertRow(lineData,reorderValues);
    }
 catch (    SuperCsvException e) {
      final RowWithMetaData metaData=new RowWithMetaData(m_listReader.getUntokenizedRow(),m_totalLineCount.get() + 1);
      if (m_errHandler.handleError(metaData,null,e.getMessage())) {
        break;
      }
    }
catch (    IOException ex) {
      m_log.error("Failed to read CSV line from file: " + ex);
      break;
    }
catch (    InterruptedException e) {
      m_log.error("CSVLoader interrupted: " + e);
      break;
    }
  }
  try {
    m_log.debug("Waiting for CSVDataLoader to finish.");
    m_loader.close();
    m_log.debug("CSVDataLoader Done.");
  }
 catch (  Exception ex) {
    m_log.warn("Stopped processing because of connection error. " + "A report will be generated with what we processed so far. Error: " + ex);
  }
}
