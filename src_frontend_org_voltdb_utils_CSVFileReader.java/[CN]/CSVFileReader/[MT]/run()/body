{
  List<String> lineList;
  ClientImpl clientImpl=(ClientImpl)m_csvClient;
  int sleptTimes=0;
  while (!clientImpl.isHashinatorInitialized() && sleptTimes < 120) {
    try {
      Thread.sleep(500);
      sleptTimes++;
    }
 catch (    InterruptedException ex) {
      ;
    }
  }
  m_log.debug("Client Initialization Done.");
  while ((m_config.limitrows-- > 0)) {
    if (m_errored) {
      break;
    }
    try {
      if (m_listReader.getLineNumber() == 0) {
        m_totalLineCount.set(m_config.skip);
      }
 else {
        m_totalLineCount.set(m_listReader.getLineNumber());
      }
      long st=System.nanoTime();
      lineList=m_listReader.read();
      long end=System.nanoTime();
      m_parsingTime+=(end - st);
      if (lineList == null) {
        if (m_totalLineCount.get() > m_listReader.getLineNumber()) {
          m_totalLineCount.set(m_listReader.getLineNumber());
        }
        break;
      }
      m_totalRowCount.incrementAndGet();
      int currLineNumber=m_listReader.getLineNumber();
      String[] correctedLine=lineList.toArray(new String[lineList.size()]);
      String lineCheckResult;
      if ((lineCheckResult=checkparams_trimspace(correctedLine,m_columnCnt)) != null) {
        String[] info={lineList.toString(),lineCheckResult};
        if (synchronizeErrorInfo(m_totalLineCount.get() + 1,info)) {
          m_errored=true;
          break;
        }
        continue;
      }
      CSVLineWithMetaData lineData=new CSVLineWithMetaData(correctedLine,lineList,currLineNumber);
      try {
        PartitionSingleExecuteProcedureCallback cbmt=new PartitionSingleExecuteProcedureCallback(lineData);
        if (m_csvClient.callProcedure(cbmt,m_insertProcedure,(Object[])correctedLine)) {
          m_processedCount.incrementAndGet();
        }
 else {
          m_log.fatal("Failed to send CSV insert to VoltDB cluster.");
          System.exit(1);
        }
      }
 catch (      IOException ex) {
        String[] info={lineList.toString(),ex.toString()};
        m_errored=synchronizeErrorInfo(currLineNumber,info);
        return;
      }
    }
 catch (    SuperCsvException e) {
      m_log.error("Failed to process CSV line: " + e);
      String[] info={e.getMessage(),""};
      if (synchronizeErrorInfo(m_totalLineCount.get() + 1,info)) {
        break;
      }
    }
catch (    IOException ex) {
      m_log.error("Failed to read CSV line from file: " + ex);
      break;
    }
  }
  if (m_errorInfo.size() >= m_config.maxerrors) {
    m_log.warn("The number of failed rows exceeds the configured maximum failed rows: " + m_config.maxerrors);
  }
}
