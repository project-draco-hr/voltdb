{
  final Semaphore rateLimit=new Semaphore(10);
  final Client client=ClientFactory.createClient();
  try {
    File dir=new File(TMPDIR);
    File[] files=dir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File arg0,      String arg1){
        if (arg1.startsWith(TESTNONCE))         return true;
        return false;
      }
    }
);
    for (    File file : files) {
      file.delete();
    }
  }
 catch (  Exception ignored) {
    ignored.printStackTrace();
  }
  try {
    VoltProjectBuilder builder=getBuilderForTest();
    LocalCluster cluster=new LocalCluster("partition-detection1.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
    cluster.overrideAnyRequestForValgrind();
    cluster.setHasLocalServer(false);
    builder.setPartitionDetectionSettings(TMPDIR,TESTNONCE);
    boolean success=cluster.compile(builder);
    assertTrue(success);
    cluster.startUp();
    client.createConnection("localhost",cluster.port(0));
    for (int i=0; i < 100; i++) {
      rateLimit.acquire();
      client.callProcedure(new CallbackGood(rateLimit),"InsertA",i,1000 + i);
    }
    client.drain();
    client.close();
    assertTrue(CallbackGood.allOk.get());
    int blessed=cluster.getBlessedPartitionDetectionProcId();
    cluster.shutDownSingleHost(blessed);
    while (!cluster.areAllNonLocalProcessesDead()) {
      System.err.println("Waiting for cluster to stop execution");
      Thread.sleep(5000);
    }
    validateSnapshot(true);
  }
  finally {
    client.close();
  }
}
