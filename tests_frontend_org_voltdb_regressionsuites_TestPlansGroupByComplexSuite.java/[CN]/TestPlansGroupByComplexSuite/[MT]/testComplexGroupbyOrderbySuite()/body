{
  loadData();
  Client client=this.getClient();
  ClientResponse cr=null;
  VoltTable vt;
  long[][] expected;
  String[] procs={"R1.insert","P1.insert"};
  for (  String tb : procs) {
    cr=client.callProcedure(tb,6,10,2,"2013-07-18 02:00:00.123457");
    cr=client.callProcedure(tb,7,40,2,"2013-09-18 02:00:00.123457");
  }
  String[] tbs={"R1","P1"};
  for (  String tb : tbs) {
    cr=client.callProcedure("@AdHoc","SELECT abs(dept) as tag, count(wage), sum(id), avg(wage)  from " + tb + " GROUP BY abs(dept) ORDER BY tag ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{1,3,6,20},{2,4,22,35}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT abs(dept) as tag, count(wage), sum(id), avg(wage) from " + tb + " GROUP BY abs(dept) ORDER BY abs(dept) ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{1,3,6,20},{2,4,22,35}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT count(wage), sum(id), avg(wage)  from " + tb + " GROUP BY abs(dept) ORDER BY abs(dept) ");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{3,6,20},{4,22,35}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT abs(dept-2) as tag, count(wage)+1, avg(wage)/2 from " + tb + " GROUP BY abs(dept-2) ORDER BY tag;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{0,5,17},{1,4,10}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT abs(dept-2) as tag, count(wage)+1, avg(wage)/2 from " + tb + " GROUP BY abs(dept-2) ORDER BY abs(dept-2);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{0,5,17},{1,4,10}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT count(wage)+1, avg(wage)/2 from " + tb + " GROUP BY abs(dept-2) ORDER BY abs(dept-2);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{5,17},{4,10}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT abs(dept-2) as tag, wage, wage/2, count(*)*2, " + "sum(id)/count(id)+1 from " + tb + " GROUP BY abs(dept-2), wage ORDER BY tag, wage;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{0,10,5,2,7},{0,40,20,4,6},{0,50,25,2,6},{1,10,5,2,2},{1,20,10,2,3},{1,30,15,2,4}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT abs(dept-2) as tag, wage, wage/2, count(*)*2, " + "sum(id)/count(id)+1 from " + tb + " GROUP BY abs(dept-2), wage ORDER BY abs(dept-2), wage;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{0,10,5,2,7},{0,40,20,4,6},{0,50,25,2,6},{1,10,5,2,2},{1,20,10,2,3},{1,30,15,2,4}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT wage, wage/2, count(*)*2, sum(id)/count(id)+1 from " + tb + " GROUP BY abs(dept-2), wage ORDER BY abs(dept-2), wage;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{10,5,2,7},{40,20,4,6},{50,25,2,6},{10,5,2,2},{20,10,2,3},{30,15,2,4}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT id+dept, avg(wage) from " + tb + " GROUP BY id+dept ORDER BY ABS(id+dept)");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{2,10},{3,20},{4,30},{6,40},{7,50},{8,10},{9,40}};
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT id+dept, sum(wage)+1 from " + tb + " GROUP BY id+dept ORDER BY ABS(id+dept)");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{2,11},{3,21},{4,31},{6,41},{7,51},{8,11},{9,41}};
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT id+dept from " + tb + " GROUP BY id+dept ORDER BY ABS(id+dept)");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{2},{3},{4},{6},{7},{8},{9}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
    cr=client.callProcedure("@AdHoc","SELECT id+dept, wage from " + tb + " GROUP BY id+dept, wage ORDER BY ABS(id+dept), abs(wage)");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    vt=cr.getResults()[0];
    expected=new long[][]{{2,10},{3,20},{4,30},{6,40},{7,50},{8,10},{9,40}};
    System.out.println(vt.toString());
    compareTable(vt,expected);
  }
}
