{
  loadData();
  Client client=this.getClient();
  ClientResponse cr=null;
  VoltTable vt;
  long[][] expected;
  String[] procs={"R1.insert","P1.insert"};
  for (  String tb : procs) {
    cr=client.callProcedure(tb,6,10,2,"2013-07-18 02:00:00.123457");
    cr=client.callProcedure(tb,7,40,2,"2013-09-18 02:00:00.123457");
  }
  Exception ex=null;
  String[] tbs={"R1","P1"};
  for (  String tb : tbs) {
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT dept, COUNT(*) as tag, sum(wage) from " + tb + " GROUP BY dept ORDER BY COUNT(*) DESC");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{1,3,60},{2,2,90}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT dept, avg(wage), sum(wage) from " + tb + " GROUP BY dept ORDER BY COUNT(*) DESC");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{1,20,60},{2,45,90}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT avg(wage), sum(wage) from " + tb + " GROUP BY dept ORDER BY COUNT(*) DESC");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{20,60},{45,90}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT dept, COUNT(*) as tag, sum(wage) - 1 from " + tb + " GROUP BY dept ORDER BY COUNT(*) DESC");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{1,3,59},{2,2,89}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT dept, avg(wage), sum(wage) - 1 from " + tb + " GROUP BY dept ORDER BY COUNT(*) DESC");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{1,20,59},{2,45,89}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT avg(wage), sum(wage) - 1 from " + tb + " GROUP BY dept ORDER BY COUNT(*) DESC");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{20,59},{45,89}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
    ex=null;
    try {
      cr=client.callProcedure("@AdHoc","SELECT count(wage), sum(id), avg(wage)  from " + tb + " GROUP BY abs(dept) ORDER BY count(*) ");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=cr.getResults()[0];
      expected=new long[][]{{3,6,20},{4,22,35}};
      compareTable(vt,expected);
    }
 catch (    ProcCallException e) {
      ex=e;
    }
 finally {
      assertTrue(ex.getMessage().contains("invalid ORDER BY expression"));
    }
  }
}
