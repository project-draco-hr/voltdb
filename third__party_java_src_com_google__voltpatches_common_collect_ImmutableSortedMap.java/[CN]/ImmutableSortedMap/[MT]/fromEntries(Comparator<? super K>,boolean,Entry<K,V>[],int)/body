{
switch (size) {
case 0:
    return emptyMap(comparator);
case 1:
  return ImmutableSortedMap.<K,V>of(comparator,entryArray[0].getKey(),entryArray[0].getValue());
default :
Object[] keys=new Object[size];
Object[] values=new Object[size];
if (sameComparator) {
for (int i=0; i < size; i++) {
Object key=entryArray[i].getKey();
Object value=entryArray[i].getValue();
checkEntryNotNull(key,value);
keys[i]=key;
values[i]=value;
}
}
 else {
Arrays.sort(entryArray,0,size,Ordering.from(comparator).<K>onKeys());
K prevKey=entryArray[0].getKey();
keys[0]=prevKey;
values[0]=entryArray[0].getValue();
for (int i=1; i < size; i++) {
K key=entryArray[i].getKey();
V value=entryArray[i].getValue();
checkEntryNotNull(key,value);
keys[i]=key;
values[i]=value;
checkNoConflict(comparator.compare(prevKey,key) != 0,"key",entryArray[i - 1],entryArray[i]);
prevKey=key;
}
}
return new ImmutableSortedMap<K,V>(new RegularImmutableSortedSet<K>(new RegularImmutableList<K>(keys),comparator),new RegularImmutableList<V>(values));
}
}
