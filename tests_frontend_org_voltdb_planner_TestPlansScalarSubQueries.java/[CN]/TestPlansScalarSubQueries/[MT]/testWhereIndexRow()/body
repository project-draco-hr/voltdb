{
{
    AbstractPlanNode pn=compile("select * from r5 where (a,c) = (select a, c from r1);");
    pn=pn.getChild(0);
    assertTrue(pn instanceof IndexScanPlanNode);
    AbstractExpression pred=((IndexScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,pred.getExpressionType());
    assertEquals(ExpressionType.ROW_SUBQUERY,pred.getLeft().getExpressionType());
    assertEquals(ExpressionType.SELECT_SUBQUERY,pred.getRight().getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select * from r5 where (select a, c from r1) >= (a,c);");
    pn=pn.getChild(0);
    assertTrue(pn instanceof IndexScanPlanNode);
    AbstractExpression pred=((IndexScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.COMPARE_GREATERTHANOREQUALTO,pred.getExpressionType());
    assertEquals(ExpressionType.SELECT_SUBQUERY,pred.getLeft().getExpressionType());
    assertEquals(ExpressionType.ROW_SUBQUERY,pred.getRight().getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select * from r5 where (a,c) IN (select a, c from r1);");
    pn=pn.getChild(0);
    assertTrue(pn instanceof IndexScanPlanNode);
    AbstractExpression pred=((IndexScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.OPERATOR_EXISTS,pred.getExpressionType());
    assertEquals(ExpressionType.SELECT_SUBQUERY,pred.getLeft().getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select * from r5 where (a,c) IN (select a, c from r1 limit 1 offset 4);");
    pn=pn.getChild(0);
    assertTrue(pn instanceof IndexScanPlanNode);
    AbstractExpression pred=((IndexScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,pred.getExpressionType());
    assertEquals(QuantifierType.ANY,((ComparisonExpression)pred).getQuantifier());
    assertEquals(ExpressionType.ROW_SUBQUERY,pred.getLeft().getExpressionType());
  }
{
    AbstractPlanNode pn=compile("select * from r5 where (a,c) > ALL (select a, c from r1);");
    pn=pn.getChild(0);
    assertTrue(pn instanceof IndexScanPlanNode);
    AbstractExpression pred=((IndexScanPlanNode)pn).getPredicate();
    assertEquals(ExpressionType.COMPARE_GREATERTHAN,pred.getExpressionType());
    assertEquals(QuantifierType.ALL,((ComparisonExpression)pred).getQuantifier());
    assertEquals(ExpressionType.ROW_SUBQUERY,pred.getLeft().getExpressionType());
  }
}
