{
  FastDeserializer fds;
  final ByteBuffer lengthBuffer=ByteBuffer.allocate(4);
  int bytes_read=0;
  do {
    bytes_read=m_socket.read(lengthBuffer);
  }
 while (lengthBuffer.hasRemaining() && bytes_read > 0);
  if (bytes_read < 0) {
    m_logger.trace("Length prefix bytes read (" + bytes_read + ") socket "+ m_socket.socket().getLocalSocketAddress()+ "<->"+ m_socket.socket().getRemoteSocketAddress());
    m_state=CLOSING;
    return null;
  }
  if (bytes_read == 0) {
    if (lengthBuffer.position() != 0 && m_socket.isConnected()) {
      do {
        bytes_read=m_socket.read(lengthBuffer);
      }
 while (lengthBuffer.hasRemaining() && bytes_read >= 0);
      if (bytes_read < 0) {
        m_logger.trace("Length prefix2 bytes read (" + bytes_read + ") socket "+ m_socket.socket().getLocalSocketAddress()+ "<->"+ m_socket.socket().getRemoteSocketAddress());
        m_state=CLOSING;
        return null;
      }
    }
 else {
      m_logger.trace("Bailing in non-blocking bytes read (" + bytes_read + ") socket "+ m_socket.socket().getLocalSocketAddress()+ "<->"+ m_socket.socket().getRemoteSocketAddress());
      return null;
    }
  }
  lengthBuffer.flip();
  int length=lengthBuffer.getInt();
  ByteBuffer messageBuf=ByteBuffer.allocate(length);
  do {
    bytes_read=m_socket.read(messageBuf);
  }
 while (messageBuf.remaining() > 0 && bytes_read >= 0);
  if (bytes_read < 0) {
    m_logger.trace("Payload bytes read (" + bytes_read + ") socket "+ m_socket.socket().getLocalSocketAddress()+ "<->"+ m_socket.socket().getRemoteSocketAddress());
    m_state=CLOSING;
    return null;
  }
  messageBuf.flip();
  fds=new FastDeserializer(messageBuf);
  ExportProtoMessage m=ExportProtoMessage.readExternal(fds);
  if (m_bandwidthMonitor != null)   m_bandwidthMonitor.logBytesTransfered(m_ipString,length + 4,0);
  return m;
}
