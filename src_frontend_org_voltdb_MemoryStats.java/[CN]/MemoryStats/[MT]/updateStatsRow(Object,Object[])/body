{
  PartitionMemRow totals=new PartitionMemRow();
  for (  PartitionMemRow pmr : m_memoryStats.values()) {
    totals.tupleCount+=pmr.tupleCount;
    totals.tupleDataMem+=pmr.tupleDataMem;
    totals.tupleAllocatedMem+=pmr.tupleAllocatedMem;
    totals.indexMem+=pmr.indexMem;
    totals.stringMem+=pmr.stringMem;
    totals.pooledMem+=pmr.pooledMem;
  }
  int rss=0;
  int javaused=0;
  int javaunused=0;
  SystemStatsCollector.Datum d=SystemStatsCollector.getRecentSample();
  if (d != null) {
    rss=(int)(d.rss / 1024);
    double javausedFloat=d.javausedheapmem + d.javausedsysmem;
    javaused=(int)(javausedFloat / 1024);
    javaunused=(int)((d.javatotalheapmem + d.javatotalsysmem - javausedFloat) / 1024);
  }
  rowValues[columnNameToIndex.get("RSS")]=rss;
  rowValues[columnNameToIndex.get("JAVAUSED")]=javaused;
  rowValues[columnNameToIndex.get("JAVAUNUSED")]=javaunused;
  rowValues[columnNameToIndex.get("TUPLEDATA")]=totals.tupleDataMem;
  rowValues[columnNameToIndex.get("TUPLEALLOCATED")]=totals.tupleAllocatedMem;
  rowValues[columnNameToIndex.get("INDEXMEMORY")]=totals.indexMem;
  rowValues[columnNameToIndex.get("STRINGMEMORY")]=totals.stringMem;
  rowValues[columnNameToIndex.get("TUPLECOUNT")]=totals.tupleCount;
  rowValues[columnNameToIndex.get("POOLEDMEMORY")]=totals.pooledMem / 1024;
  rowValues[columnNameToIndex.get("PHYSICALMEMORY")]=PlatformProperties.getPlatformProperties().ramInMegabytes * 1024;
  super.updateStatsRow(rowKey,rowValues);
}
