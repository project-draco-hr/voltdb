{
  m_pollInterval=pollInterval;
  m_client=ClientFactory.createClient();
  int successfulConnections=0;
  for (  String host : voltHosts) {
    try {
      m_client.createConnection(host,voltUsername,voltPassword);
      successfulConnections++;
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (successfulConnections == 0) {
    throw new RuntimeException("Unable to open any connections to the cluster");
  }
  String versionString=m_client.getBuildString();
  if (versionString.equals("?revision=")) {
    versionString=null;
  }
  m_conn=DriverManager.getConnection(databaseURL);
  m_conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
  m_conn.setAutoCommit(false);
  int instanceId=-1;
  CallableStatement retrieveStmt=m_conn.prepareCall(retrieveInstanceId);
  retrieveStmt.setLong(1,(Long)m_client.getInstanceId()[0]);
  retrieveStmt.setInt(2,(Integer)m_client.getInstanceId()[1]);
  retrieveStmt.execute();
  ResultSet instanceIdSet=retrieveStmt.getResultSet();
  while (instanceIdSet.next()) {
    instanceId=instanceIdSet.getInt(1);
  }
  instanceIdSet.close();
  retrieveStmt.close();
  insertInitiator=m_conn.prepareStatement(insertInitiatorStatement);
  insertIOStats=m_conn.prepareStatement(insertIOStatsStatement);
  insertProcedures=m_conn.prepareStatement(insertProceduresStatement);
  insertTableStats=m_conn.prepareStatement(insertTableStatsStatement);
  if (instanceId < 0) {
    boolean success=false;
    final PreparedStatement statement=m_conn.prepareStatement(createInstanceStatement,Statement.RETURN_GENERATED_KEYS);
    try {
      int index=1;
      statement.setLong(index++,(Long)m_client.getInstanceId()[0]);
      statement.setInt(index++,(Integer)m_client.getInstanceId()[1]);
      statement.setString(index++,application);
      if (subApplication != null) {
        statement.setString(index++,subApplication);
      }
 else {
        statement.setNull(index++,Types.VARCHAR);
      }
      if (versionString != null) {
        statement.setString(index++,versionString);
      }
 else {
        statement.setNull(index++,Types.VARCHAR);
      }
      if (tag != null) {
        statement.setString(index++,tag);
      }
 else {
        statement.setNull(index++,Types.VARCHAR);
      }
      if (hosts > 0) {
        statement.setInt(index++,hosts);
      }
 else {
        statement.setNull(index++,Types.INTEGER);
      }
      if (partitionsPerHost > 0) {
        statement.setInt(index++,partitionsPerHost);
      }
 else {
        statement.setNull(index++,Types.INTEGER);
      }
      if (totalPartitions > 0) {
        statement.setInt(index++,totalPartitions);
      }
 else {
        statement.setNull(index++,Types.INTEGER);
      }
      if (kFactor >= 0) {
        statement.setInt(index++,kFactor);
      }
 else {
        statement.setNull(index++,Types.INTEGER);
      }
      statement.execute();
      final ResultSet generatedKeys=statement.getGeneratedKeys();
      if (generatedKeys.first()) {
        instanceId=generatedKeys.getInt(1);
        success=true;
      }
 else {
        generatedKeys.close();
        throw new SQLException("Create instance statement didn't return an instance key");
      }
      generatedKeys.close();
    }
  finally {
      statement.close();
      if (success) {
        m_conn.commit();
      }
 else {
        m_conn.close();
      }
    }
  }
  m_instanceId=instanceId;
}
