{
  int msgsize=4 + 4 + 8+ 1+ 1+ 4;
  assert(m_exception == null || m_status != SUCCESS);
  if (m_exception != null) {
    msgsize+=m_exception.getSerializedSize();
  }
 else {
    msgsize+=2;
  }
  ByteBuffer tableBytes=null;
  if (m_dependencyCount > 0) {
    FastSerializer fs=new FastSerializer();
    try {
      for (int i=0; i < m_dependencyCount; i++)       fs.writeObject(m_dependencies[i]);
    }
 catch (    IOException e) {
      e.printStackTrace();
      assert(false);
    }
    tableBytes=fs.getBuffer();
    msgsize+=tableBytes.remaining();
    msgsize+=4 * m_dependencyCount;
  }
  if (m_buffer == null) {
    m_container=pool.acquire(msgsize + 1 + HEADER_SIZE);
    m_buffer=m_container.b;
  }
  setBufferSize(msgsize + 1,pool);
  m_buffer.position(HEADER_SIZE);
  m_buffer.put(FRAGMENT_RESPONSE_ID);
  m_buffer.putInt(m_executorSiteId);
  m_buffer.putInt(m_destinationSiteId);
  m_buffer.putLong(m_txnId);
  m_buffer.put(m_status);
  m_buffer.put((byte)(m_dirty ? 1 : 0));
  m_buffer.putShort(m_dependencyCount);
  for (int i=0; i < m_dependencyCount; i++)   m_buffer.putInt(m_dependencyIds[i]);
  if (tableBytes != null)   m_buffer.put(tableBytes);
  if (m_exception != null) {
    m_exception.serializeToBuffer(m_buffer);
  }
 else {
    m_buffer.putInt(0);
  }
  m_buffer.limit(m_buffer.position());
}
