{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table FOO (" + "ID integer not null," + "VAL varchar(50), "+ "constraint PK_TREE primary key (ID)"+ ");\n"+ "create table EMPTYFOO ("+ "ID integer not null,"+ "VAL varchar(50), "+ "constraint PK_TREE2 primary key (ID)"+ ");\n");
  builder.addPartitionInfo("FOO","ID");
  builder.addPartitionInfo("EMPTYFOO","ID");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    m_client.callProcedure("FOO.insert",0,"ryanloves");
    m_client.callProcedure("FOO.insert",1,"theyankees");
    assertEquals(2,m_client.callProcedure("@AdHoc","select count(*) from foo;").getResults()[0].asScalarLong());
    boolean threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table FOO rename to BAR;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      threw=true;
    }
    assertTrue("Shouldn't be able to rename a non-empty table",threw);
    assertEquals(2,m_client.callProcedure("@AdHoc","select count(*) from foo;").getResults()[0].asScalarLong());
    VoltTable results=m_client.callProcedure("@AdHoc","select VAL from FOO where ID = 0;").getResults()[0];
    results.advanceRow();
    assertEquals("ryanloves",results.getString("VAL"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table FOO alter column VAL rename to LAV;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      threw=true;
    }
    assertTrue("Shouldn't be able to rename columns in a non-empty table",threw);
    results=m_client.callProcedure("@AdHoc","select VAL from FOO where ID = 0;").getResults()[0];
    results.advanceRow();
    assertEquals("ryanloves",results.getString("VAL"));
  }
  finally {
    teardownSystem();
  }
}
