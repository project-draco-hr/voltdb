{
  super.handle(target,baseRequest,request,response);
  String jsonp=request.getParameter("jsonp");
  try {
    response.setStatus(HttpServletResponse.SC_OK);
    if (baseRequest.getRequestURI().contains("/schema")) {
      String msg=m_schema;
      if (jsonp != null) {
        msg=String.format("%s( %s )",jsonp,m_schema);
      }
      response.getWriter().print(msg);
      baseRequest.setHandled(true);
      return;
    }
    AuthenticationResult authResult=authenticate(baseRequest);
    if (!authResult.isAuthenticated()) {
      response.getWriter().print(buildClientResponse(jsonp,ClientResponse.UNEXPECTED_FAILURE,authResult.m_message));
      baseRequest.setHandled(true);
      return;
    }
    if (!authResult.m_authUser.hasPermission(Permission.ADMIN)) {
      response.getWriter().print(buildClientResponse(jsonp,ClientResponse.UNEXPECTED_FAILURE,"Permission denied"));
      baseRequest.setHandled(true);
      return;
    }
    String msg=null;
    if (baseRequest.getRequestURI().contains("/download")) {
      msg=new String(getDeploymentBytes());
      response.setHeader("Content-Type","text/xml");
    }
 else {
      msg=m_mapper.writeValueAsString(getDeployment());
    }
    if (jsonp != null) {
      msg=String.format("%s( %s )",jsonp,msg);
    }
    response.getWriter().print(msg);
    baseRequest.setHandled(true);
  }
 catch (  Exception ex) {
    logger.info("Not servicing url: " + baseRequest.getRequestURI() + " Details: "+ ex.getMessage(),ex);
  }
}
