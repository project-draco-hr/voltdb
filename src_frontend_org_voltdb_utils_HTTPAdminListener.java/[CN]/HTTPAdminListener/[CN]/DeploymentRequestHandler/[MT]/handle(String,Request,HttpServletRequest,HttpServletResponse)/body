{
  super.handle(target,baseRequest,request,response);
  String jsonp=request.getParameter("jsonp");
  AuthenticationResult authResult=null;
  try {
    response.setContentType("application/json;charset=utf-8");
    response.setStatus(HttpServletResponse.SC_OK);
    authResult=authenticate(baseRequest);
    if (!authResult.isAuthenticated()) {
      response.getWriter().print(buildClientResponse(jsonp,ClientResponse.UNEXPECTED_FAILURE,authResult.m_message));
      baseRequest.setHandled(true);
      return;
    }
    if (!authResult.m_authUser.hasPermission(Permission.ADMIN)) {
      response.getWriter().print(buildClientResponse(jsonp,ClientResponse.UNEXPECTED_FAILURE,"Permission denied"));
      baseRequest.setHandled(true);
      return;
    }
    if (baseRequest.getRequestURI().contains("/download")) {
      response.setContentType("text/xml;charset=utf-8");
      response.getWriter().write(new String(getDeploymentBytes()));
    }
 else {
      if (request.getMethod().equalsIgnoreCase("POST")) {
        handleUpdateDeployment(jsonp,target,baseRequest,request,response,authResult.m_client);
      }
 else {
        if (jsonp != null) {
          response.getWriter().write(jsonp + "(");
        }
        m_mapper.writeValue(response.getWriter(),getDeployment());
        if (jsonp != null) {
          response.getWriter().write(")");
        }
      }
    }
    baseRequest.setHandled(true);
  }
 catch (  Exception ex) {
    logger.info("Not servicing url: " + baseRequest.getRequestURI() + " Details: "+ ex.getMessage(),ex);
  }
 finally {
    httpClientInterface.releaseClient(authResult);
  }
}
