{
  AsyncContinuation cont=baseRequest.getAsyncContinuation();
  if (!cont.isInitial()) {
    cont.suspend();
    return;
  }
  if (baseRequest.getRequestURI().contains("/api/1.0/")) {
    response.setContentType("application/json;charset=utf-8");
    if (m_jsonEnabled) {
      httpClientInterface.process(baseRequest,response);
    }
 else {
      response.setStatus(HttpServletResponse.SC_FORBIDDEN);
      baseRequest.setHandled(true);
      response.getWriter().println("JSON API IS CURRENTLY DISABLED");
    }
    return;
  }
  if (baseRequest.getRequestURI().contains("/memorycsv/")) {
    String msg=SystemStatsCollector.getCSV();
    response.setContentType("text/plain;charset=utf-8");
    response.setStatus(HttpServletResponse.SC_OK);
    baseRequest.setHandled(true);
    response.getWriter().print(msg);
    return;
  }
  try {
    CatalogContext context=VoltDB.instance().getCatalogContext();
    String clusterinfo=context.numberOfNodes + " hosts ";
    clusterinfo+=" with " + context.numberOfExecSites + " sites ";
    clusterinfo+=" (" + context.numberOfExecSites / context.numberOfNodes;
    clusterinfo+=" per host)";
    long t=SystemStatsCollector.getStartTime();
    Date date=new Date(t);
    long duration=System.currentTimeMillis() - t;
    long minutes=duration / 60000;
    long hours=minutes / 60;
    minutes-=hours * 60;
    long days=hours / 24;
    hours-=days * 24;
    String starttime=String.format("%s (%dd %dh %dm)",date.toString(),days,hours,minutes);
    String hostname="&lt;unknownhost&gt;";
    try {
      InetAddress addr=InetAddress.getLocalHost();
      hostname=addr.getHostName();
    }
 catch (    Exception e) {
      try {
        InetAddress addr=InetAddress.getLocalHost();
        hostname=addr.getHostAddress();
      }
 catch (      Exception e2) {
      }
    }
    SystemStatsCollector.Datum d=SystemStatsCollector.getRecentSample();
    double used=d.rss / (double)SystemStatsCollector.memorysize;
    double javaused=d.javausedheapmem + d.javausedsysmem;
    double javaunused=d.javatotalheapmem + d.javatotalsysmem - javaused;
    double risk=(d.rss + javaunused) / SystemStatsCollector.memorysize;
    String csvFilename=String.format("memstats-%s-%s.csv",hostname,new Date(System.currentTimeMillis()).toString());
    Map<String,String> params=new HashMap<String,String>();
    params.put("hostname",hostname);
    params.put("version",VoltDB.instance().getVersionString());
    params.put("buildstring",VoltDB.instance().getBuildString());
    params.put("cluster",clusterinfo);
    params.put("starttime",starttime);
    params.put("csvfilename",csvFilename);
    params.put("2mincharturl",SystemStatsCollector.getGoogleChartURL(2,320,240,"-2min"));
    params.put("30mincharturl",SystemStatsCollector.getGoogleChartURL(30,640,240,"-30min"));
    params.put("24hrcharturl",SystemStatsCollector.getGoogleChartURL(1440,640,240,"-24hrs"));
    params.put("used",String.format("%.1f",used * 100.0));
    params.put("risk",String.format("%.1f",risk * 100.0));
    params.put("rss",String.format("%.1f",d.rss / 1024.0 / 1024.0));
    params.put("java",String.format("%.1f",javaused / 1024.0 / 1024.0));
    params.put("unusedjava",String.format("%.1f",javaunused / 1024.0 / 1024.0));
    String msg=getHTMLForAdminPage(params);
    response.setContentType("text/html;charset=utf-8");
    response.setStatus(HttpServletResponse.SC_OK);
    baseRequest.setHandled(true);
    response.getWriter().print(msg);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
}
