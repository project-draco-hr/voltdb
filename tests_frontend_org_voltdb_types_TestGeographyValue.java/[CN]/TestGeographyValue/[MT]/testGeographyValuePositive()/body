{
  GeographyValue geog;
  List<GeographyPointValue> outerLoop=Arrays.asList(new GeographyPointValue(32.305,-64.751),new GeographyPointValue(25.244,-80.437),new GeographyPointValue(18.476,-66.371),new GeographyPointValue(32.305,-64.751));
  List<GeographyPointValue> innerLoop=Arrays.asList(new GeographyPointValue(28.066,-68.874),new GeographyPointValue(25.361,-68.855),new GeographyPointValue(28.376,-73.381),new GeographyPointValue(28.066,-68.874));
  geog=new GeographyValue(Arrays.asList(outerLoop,innerLoop));
  assertEquals("POLYGON((32.305 -64.751, 25.244 -80.437, 18.476 -66.371, 32.305 -64.751), " + "(28.066 -68.874, 25.361 -68.855, 28.376 -73.381, 28.066 -68.874))",geog.toString());
  geog=new GeographyValue("POLYGON((32.305 -64.751, 25.244 -80.437, 18.476 -66.371, 32.305 -64.751), " + "(28.066 -68.874, 25.361 -68.855, 28.376 -73.381, 28.066 -68.874))");
  assertEquals("POLYGON((32.305 -64.751, 25.244 -80.437, 18.476 -66.371, 32.305 -64.751), " + "(28.066 -68.874, 25.361 -68.855, 28.376 -73.381, 28.066 -68.874))",geog.toString());
  ByteBuffer buf=ByteBuffer.allocate(geog.getLengthInBytes());
  geog.flattenToBuffer(buf);
  assertEquals(270,buf.position());
  buf.position(0);
  GeographyValue newGeog=GeographyValue.unflattenFromBuffer(buf);
  assertEquals("POLYGON((32.305 -64.751, 25.244 -80.437, 18.476 -66.371, 32.305 -64.751), " + "(28.066 -68.874, 25.361 -68.855, 28.376 -73.381, 28.066 -68.874))",newGeog.toString());
  assertEquals(270,buf.position());
  buf.position(77);
  newGeog=GeographyValue.unflattenFromBuffer(buf,0);
  assertEquals("POLYGON((32.305 -64.751, 25.244 -80.437, 18.476 -66.371, 32.305 -64.751), " + "(28.066 -68.874, 25.361 -68.855, 28.376 -73.381, 28.066 -68.874))",newGeog.toString());
  assertEquals(77,buf.position());
}
