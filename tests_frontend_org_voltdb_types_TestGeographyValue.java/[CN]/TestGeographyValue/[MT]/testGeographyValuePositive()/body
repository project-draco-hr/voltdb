{
  GeographyValue geog;
  GeographyValue rtGeog;
  List<GeographyPointValue> outerLoop=Arrays.asList(new GeographyPointValue(-64.751,32.305),new GeographyPointValue(-80.437,25.244),new GeographyPointValue(-66.371,18.476),new GeographyPointValue(-64.751,32.305));
  List<GeographyPointValue> innerLoop=Arrays.asList(new GeographyPointValue(-68.874,28.066),new GeographyPointValue(-68.855,25.361),new GeographyPointValue(-73.381,28.376),new GeographyPointValue(-68.874,28.066));
  List<List<GeographyPointValue>> expectedLol=Arrays.asList(outerLoop,innerLoop);
  geog=new GeographyValue(expectedLol);
  assertEquals("POLYGON ((-64.751 32.305, -80.437 25.244, -66.371 18.476, -64.751 32.305), " + "(-68.874 28.066, -68.855 25.361, -73.381 28.376, -68.874 28.066))",geog.toString());
  geog=new GeographyValue("POLYGON ((-64.751 32.305, -80.437 25.244, -66.371 18.476, -64.751 32.305), " + "(-68.874 28.066,-68.855 25.361, -73.381 28.376, -68.874 28.066))");
  assertEquals("POLYGON ((-64.751 32.305, -80.437 25.244, -66.371 18.476, -64.751 32.305), " + "(-68.874 28.066, -68.855 25.361, -73.381 28.376, -68.874 28.066))",geog.toString());
  String rtStr="POLYGON ((0.0 20.0, -17.320508076 -10.0, 17.320508076 -10.0, 0.0 20.0))";
  rtGeog=new GeographyValue(rtStr);
  assertEquals(rtStr,rtGeog.toString());
  ByteBuffer buf=ByteBuffer.allocate(geog.getLengthInBytes());
  geog.flattenToBuffer(buf);
  assertEquals(270,buf.position());
  buf.position(0);
  GeographyValue newGeog=GeographyValue.unflattenFromBuffer(buf);
  assertEquals("POLYGON ((-64.751 32.305, -80.437 25.244, -66.371 18.476, -64.751 32.305), " + "(-68.874 28.066, -68.855 25.361, -73.381 28.376, -68.874 28.066))",newGeog.toString());
  assertEquals(270,buf.position());
  buf.position(77);
  newGeog=GeographyValue.unflattenFromBuffer(buf,0);
  assertEquals("POLYGON ((-64.751 32.305, -80.437 25.244, -66.371 18.476, -64.751 32.305), " + "(-68.874 28.066, -68.855 25.361, -73.381 28.376, -68.874 28.066))",newGeog.toString());
  assertEquals(77,buf.position());
  geog=new GeographyValue(expectedLol);
  final double EPSILON=1.0e-13;
  List<List<GeographyPointValue>> lol=geog.getLoops();
  assertEquals(expectedLol.size(),lol.size());
  for (int oidx=0; oidx < lol.size(); oidx+=1) {
    List<GeographyPointValue> loop=lol.get(oidx);
    List<GeographyPointValue> expectedLoop=expectedLol.get(oidx);
    assertEquals(expectedLoop.size(),loop.size());
    for (int iidx=0; iidx < loop.size(); iidx+=1) {
      GeographyPointValue expected=expectedLoop.get(iidx);
      GeographyPointValue actual=loop.get(iidx);
      assertEquals(expected,actual,EPSILON);
    }
  }
}
