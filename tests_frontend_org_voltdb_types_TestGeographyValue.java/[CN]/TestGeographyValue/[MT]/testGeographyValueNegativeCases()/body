{
  List<PointType> outerLoop=new ArrayList<PointType>();
  outerLoop.add(new PointType(32.305,-64.751));
  outerLoop.add(new PointType(25.244,-80.437));
  outerLoop.add(new PointType(18.476,-66.371));
  outerLoop.add(new PointType(20.305,-76.751));
  outerLoop.add(new PointType(32.305,-64.751));
  GeographyValue geoValue;
  geoValue=new GeographyValue(Arrays.asList(outerLoop));
  assertEquals("POLYGON((32.305 -64.751, 25.244 -80.437, 18.476 -66.371, 20.305 -76.751, 32.305 -64.751))",geoValue.toString());
  Exception exception=null;
  outerLoop.remove(outerLoop.size() - 1);
  try {
    geoValue=new GeographyValue(Arrays.asList(outerLoop));
  }
 catch (  IllegalArgumentException illegalArgs) {
    exception=illegalArgs;
    assertTrue(exception.getMessage().contains("closing points of ring are not equal"));
  }
 finally {
    assertNotNull(exception);
  }
  exception=null;
  outerLoop.remove(outerLoop.size() - 1);
  try {
    geoValue=new GeographyValue(Arrays.asList(outerLoop));
  }
 catch (  IllegalArgumentException illegalArgs) {
    exception=illegalArgs;
    assertTrue(exception.getMessage().contains("a polygon ring must contain at least 4 points " + "(including repeated closing vertex"));
  }
 finally {
    assertNotNull(exception);
  }
  outerLoop.clear();
  try {
    geoValue=new GeographyValue(Arrays.asList(outerLoop));
  }
 catch (  IllegalArgumentException illegalArgs) {
    exception=illegalArgs;
    assertTrue(exception.getMessage().contains("a polygon ring must contain at least 4 points " + "(including repeated closing vertex"));
  }
 finally {
    assertNotNull(exception);
  }
}
