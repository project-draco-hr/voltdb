{
  List<GeographyPointValue> outerLoop=new ArrayList<GeographyPointValue>();
  outerLoop.add(new GeographyPointValue(-64.751,32.305));
  outerLoop.add(new GeographyPointValue(-80.437,25.244));
  outerLoop.add(new GeographyPointValue(-66.371,18.476));
  outerLoop.add(new GeographyPointValue(-76.751,20.305));
  outerLoop.add(new GeographyPointValue(-64.751,32.305));
  GeographyValue geoValue;
  geoValue=new GeographyValue(Arrays.asList(outerLoop));
  assertEquals("POLYGON ((-64.751 32.305, -80.437 25.244, -66.371 18.476, -76.751 20.305, -64.751 32.305))",geoValue.toString());
  Exception exception=null;
  outerLoop.remove(outerLoop.size() - 1);
  try {
    geoValue=new GeographyValue(Arrays.asList(outerLoop));
  }
 catch (  IllegalArgumentException illegalArgs) {
    exception=illegalArgs;
    assertTrue(exception.getMessage().contains("closing points of ring are not equal"));
  }
 finally {
    assertNotNull(exception);
  }
  exception=null;
  outerLoop.remove(outerLoop.size() - 1);
  try {
    geoValue=new GeographyValue(Arrays.asList(outerLoop));
  }
 catch (  IllegalArgumentException illegalArgs) {
    exception=illegalArgs;
    assertTrue(exception.getMessage().contains("a polygon ring must contain at least 4 points " + "(including repeated closing vertex"));
  }
 finally {
    assertNotNull(exception);
  }
  outerLoop.clear();
  try {
    geoValue=new GeographyValue(Arrays.asList(outerLoop));
  }
 catch (  IllegalArgumentException illegalArgs) {
    exception=illegalArgs;
    assertTrue(exception.getMessage().contains("a polygon ring must contain at least 4 points " + "(including repeated closing vertex"));
  }
 finally {
    assertNotNull(exception);
  }
}
