{
  String z=config.servers;
  String servers[]=z.split(",");
  String[] tblSuffix_=new String[]{"Ptn","Rep"};
  String sPtnOrRep=tblSuffix_[ptnOrRep];
  int nTables=0;
  System.out.printf("Checking data across nodes, case: %s, servers: %s ...\n",sPtnOrRep,z);
  ClientConfig clientConfig=new ClientConfig(config.user,config.password);
  long[] counters=null;
  long[] crcs=null;
  int crcCount=-1;
  for (int iServer=0; iServer < servers.length; iServer++) {
    String server=servers[iServer];
    Client client=ClientFactory.createClient(clientConfig);
    try {
      client.createConnection(server);
    }
 catch (    Exception e) {
      System.err.printf("Error connecting to node %d %s\n",iServer,server);
      e.printStackTrace();
      throw new RuntimeException();
    }
    ClientResponse resp=null;
    if (iServer == 0) {
      resp=client.callProcedure("@Statistics","PARTITIONCOUNT",0);
      VoltTable[] tpc=resp.getResults();
      nPartitions=0;
      while (tpc[0].advanceRow()) {
        nPartitions=(int)tpc[0].getLong(0);
      }
      System.out.printf("partition count: %d\n",nPartitions);
      if (nPartitions < 2) {
        System.err.printf("Less than 2 partitions\n",nPartitions);
        throw new RuntimeException();
      }
      counters=new long[nPartitions];
      crcs=new long[nPartitions];
    }
    if (nPartitions == 0) {
      System.err.println("Zero partitions should not happen");
      throw new RuntimeException();
    }
    resp=client.callProcedure("@Statistics","TABLE",0);
    int nt=resp.getResults()[0].getRowCount();
    System.out.printf("table count: %d\n",nt);
    if (iServer == 0)     nTables=nt;
 else {
      if (nTables != nt) {
        System.err.printf("TEST FAILED Catalog Table count mismatch %d != %d %s %s\n",nTables,nt,server,servers[0]);
        System.exit(1);
      }
 else {
        System.out.printf("Catalog test passed\n");
      }
    }
    for (int pid=0; pid < nPartitions; pid++) {
      try {
        long counter=checkAndReturnCounter(server,client,pid,sPtnOrRep);
        if (iServer == 0)         counters[pid]=counter;
 else         if (counters[pid] != counter) {
          System.err.printf("TEST FAILED Node counter datacompare mismatch %d != %d %s %s\n",counter,counters[pid],server,servers[0]);
          System.exit(1);
        }
      }
 catch (      Exception e) {
        System.err.printf("Exception received calling checkAndReturnCounter: server: %s pid: %d\n%s\n",server,pid,e.getMessage());
        e.printStackTrace();
        throw new RuntimeException();
      }
      try {
        long crc=returnCRC(server,client,pid,sPtnOrRep);
        if (iServer == 0)         crcs[pid]=crc;
 else         if (crcs[pid] != crc) {
          System.err.printf("TEST FAILED Node crc datacompare mismatch %d != %d %s %s\n",crc,crcs[pid],server,servers[0]);
          System.exit(1);
        }
      }
 catch (      Exception e) {
        System.err.printf("Exception received calling returnCRC: server: %s pid: %d\n%s\n",server,pid,e.getMessage());
        e.printStackTrace();
        throw new RuntimeException();
      }
    }
    client.drain();
    client.close();
  }
  System.out.printf("case: %s All nodes of counter identical\n",sPtnOrRep);
}
