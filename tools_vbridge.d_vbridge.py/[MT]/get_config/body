def get_config(runner, reset=False):
    '\n    Utility function to look for and validate a set of configuration properties.\n    '


    class O(object):
        pass
    o = O()
    missing = []
    defaults = []
    msgblocks = []
    for name in sorted(G.config_properties.keys()):
        config_property = G.config_properties[name]
        key = config_key(name)
        value = runner.config.get(key)
        if ((not value) or reset):
            if (config_property.default is None):
                missing.append(name)
                runner.config.set_permanent(key, '')
            else:
                defaults.append(name)
                value = G.config_properties[name].default
                runner.config.set_permanent(key, value)
                setattr(o, name, value)
        else:
            setattr(o, name, value)
    samples = []
    if ((not reset) and missing):
        if (len(missing) > 1):
            plural = 's'
        else:
            plural = ''
        table = [(name, G.config_properties[name].description) for name in missing]
        msgblocks.append([('The following setting%s must be configured before proceeding:' % plural), '', utility.format_table(table, headings=['PROPERTY', 'DESCRIPTION'], indent=3, separator='  ')])
        samples.extend(missing)
        o = None
    if defaults:
        if (len(defaults) > 1):
            plural = 's were'
        else:
            plural = ' was'
        msgblocks.append([('The following setting default%s applied and saved permanently:' % plural), '', utility.format_table([(name, G.config_properties[name].default) for name in defaults], indent=3, separator='  ', headings=['PROPERTY', 'VALUE'])])
    if reset:
        o = None
    elif (o is None):
        msgblocks.append([config_help(samples=samples)])
    if msgblocks:
        for msgblock in msgblocks:
            print ''
            for msg in msgblock:
                print msg
        print ''
    return o
