{
  final DicedBB dbb=m_availableDBBs.peek();
  if (dbb != null) {
    final DicedBB.DBBContainer c=dbb.nextSlice();
    if (!dbb.hasRemaining()) {
      m_availableDBBs.poll();
    }
    return c;
  }
  if (m_arenaSize > m_maxArenaSize) {
    return DBBPool.wrapBB(ByteBuffer.allocate(minSize));
  }
  int allocationSize=MAX_ALLOCATION_SIZE;
  if ((MAX_ALLOCATION_SIZE / m_allocationSize) < 16) {
    allocationSize=m_allocationSize * 16;
  }
  m_arenaSize+=allocationSize;
  if (m_arenaSize > m_maxArenaSize) {
    m_logger.error("Arena " + m_allocationSize + " grew to "+ m_arenaSize+ " which is greater then the max of "+ m_maxArenaSize+ ". This could signal a potential leak of ByteBuffers, an inadequately sized arena, or"+ " some other shortcoming in the network subsystem");
    System.err.println("Arena " + m_allocationSize + " grew to "+ m_arenaSize+ " which is greater then the max of "+ m_maxArenaSize+ ". This could signal a potential leak of ByteBuffers, an inadequately sized arena, or"+ " some other shortcoming in the network subsystem");
  }
  final DicedBB newDBB=new DicedBB(allocationSize,m_allocationSize,this,m_foundNativeSupport);
  m_allDBBs.add(newDBB);
  final DicedBB.DBBContainer c=newDBB.nextSlice();
  assert(c != null);
  if (newDBB.hasRemaining()) {
    m_availableDBBs.push(newDBB);
  }
  return c;
}
