def clean_output(parent, path):
    outbackin = open(os.path.join(parent, path), 'r')
    cleanedpath = os.path.join(parent, (path + 'clean'))
    cleanedout = open(cleanedpath, 'w+')
    memory_check_matcher = re.compile('\n            ^(WARN:\\s)?Strict\\sjava\\smemory\\schecking.*$  # Match the start.\n            ', re.VERBOSE)
    latency_matcher = re.compile('\n            ([0-9]\\srows\\sin\\s)  # required to match a latency report line,\n                                 # survives as \\g<1>\n            [0-9]+\\.[0-9]+s      # also required, replaced with #.##s\n            ', re.VERBOSE)
    query_timeout_matcher = re.compile('\n            (terminated\\safter\\s[0-9]+\\.[0-9][0-9])  # required to match a query timeout\n                                                     # line, survives as \\g<1>\n            [0-9]                                    # final digit, replaced with #\n            (\\sseconds)                              # survives as \\g<2>\n            ', re.VERBOSE)
    stack_frame_matcher = re.compile('\n            (at\\s.+\\.java\\:)                         # required to match a stack trace line\n                                                     # line, survives as \\g<1>\n            [0-9]+                                   # line number digits, replaced with #\n            (\\))                                     # survives as \\g<2>\n            ', re.VERBOSE)
    for line in outbackin:
        if (len(line) == 1):
            cleanedout.write(line)
            continue
        cleanedline = memory_check_matcher.sub('', line)
        cleanedline = latency_matcher.sub('\\g<1>#.##s', cleanedline)
        cleanedline = query_timeout_matcher.sub('\\g<1>#\\g<2>', cleanedline)
        cleanedline = stack_frame_matcher.sub('\\g<1>#\\g<2>', cleanedline)
        if (len(cleanedline) > 1):
            cleanedout.write(cleanedline)
    cleanedout.flush()
