def AssertEquivalentNodes(self, expected_node, actual_node):
    '\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:\n\n    *  It has the same tag name as expected_node.\n    *  It has the same set of attributes as expected_node, each with\n       the same value as the corresponding attribute of expected_node.\n       Exceptions are any attribute named "time", which needs only be\n       convertible to a floating-point number and any attribute named\n       "type_param" which only has to be non-empty.\n    *  It has an equivalent set of child nodes (including elements and\n       CDATA sections) as expected_node.  Note that we ignore the\n       order of the children as they are not guaranteed to be in any\n       particular order.\n    '
    if (expected_node.nodeType == Node.CDATA_SECTION_NODE):
        self.assertEquals(Node.CDATA_SECTION_NODE, actual_node.nodeType)
        self.assertEquals(expected_node.nodeValue, actual_node.nodeValue)
        return
    self.assertEquals(Node.ELEMENT_NODE, actual_node.nodeType)
    self.assertEquals(Node.ELEMENT_NODE, expected_node.nodeType)
    self.assertEquals(expected_node.tagName, actual_node.tagName)
    expected_attributes = expected_node.attributes
    actual_attributes = actual_node.attributes
    self.assertEquals(expected_attributes.length, actual_attributes.length, ('attribute numbers differ in element %s:\nExpected: %r\nActual: %r' % (actual_node.tagName, expected_attributes.keys(), actual_attributes.keys())))
    for i in range(expected_attributes.length):
        expected_attr = expected_attributes.item(i)
        actual_attr = actual_attributes.get(expected_attr.name)
        self.assert_((actual_attr is not None), ('expected attribute %s not found in element %s' % (expected_attr.name, actual_node.tagName)))
        self.assertEquals(expected_attr.value, actual_attr.value, (' values of attribute %s in element %s differ: %s vs %s' % (expected_attr.name, actual_node.tagName, expected_attr.value, actual_attr.value)))
    expected_children = self._GetChildren(expected_node)
    actual_children = self._GetChildren(actual_node)
    self.assertEquals(len(expected_children), len(actual_children), ('number of child elements differ in element ' + actual_node.tagName))
    for (child_id, child) in expected_children.iteritems():
        self.assert_((child_id in actual_children), ('<%s> is not in <%s> (in element %s)' % (child_id, actual_children, actual_node.tagName)))
        self.AssertEquivalentNodes(child, actual_children[child_id])
