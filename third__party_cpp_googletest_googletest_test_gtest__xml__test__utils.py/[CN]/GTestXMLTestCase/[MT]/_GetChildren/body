def _GetChildren(self, element):
    '\n    Fetches all of the child nodes of element, a DOM Element object.\n    Returns them as the values of a dictionary keyed by the IDs of the\n    children.  For <testsuites>, <testsuite> and <testcase> elements, the ID\n    is the value of their "name" attribute; for <failure> elements, it is\n    the value of the "message" attribute; CDATA sections and non-whitespace\n    text nodes are concatenated into a single CDATA section with ID\n    "detail".  An exception is raised if any element other than the above\n    four is encountered, if two child elements with the same identifying\n    attributes are encountered, or if any other type of node is encountered.\n    '
    children = {}
    for child in element.childNodes:
        if (child.nodeType == Node.ELEMENT_NODE):
            self.assert_((child.tagName in self.identifying_attribute), ('Encountered unknown element <%s>' % child.tagName))
            childID = child.getAttribute(self.identifying_attribute[child.tagName])
            self.assert_((childID not in children))
            children[childID] = child
        elif (child.nodeType in [Node.TEXT_NODE, Node.CDATA_SECTION_NODE]):
            if ('detail' not in children):
                if ((child.nodeType == Node.CDATA_SECTION_NODE) or (not child.nodeValue.isspace())):
                    children['detail'] = child.ownerDocument.createCDATASection(child.nodeValue)
            else:
                children['detail'].nodeValue += child.nodeValue
        else:
            self.fail(('Encountered unexpected node type %d' % child.nodeType))
    return children
