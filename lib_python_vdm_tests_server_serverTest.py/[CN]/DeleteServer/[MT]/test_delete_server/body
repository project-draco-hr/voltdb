def test_delete_server(self):
    '\n        server delete test\n        '
    headers = {'Content-Type': 'application/json; charset=utf-8', }
    db_data = {'name': 'testDB', }
    response = requests.post(__db_url__, json=db_data, headers=headers)
    if (response.status_code == 201):
        self.assertEqual(response.status_code, 201)
    else:
        self.assertEqual(response.status_code, 404)
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
        data = {'description': 'test', 'hostname': __host_or_ip__, 'name': 'test', }
        response = requests.post(url, json=data, headers=headers)
        if (response.status_code == 201):
            self.assertEqual(response.status_code, 201)
        else:
            self.assertEqual(response.status_code, 404)
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
        response = requests.get(url)
        value = response.json()
        if value:
            server_length = len(value['members'])
            last_server_id = value['members'][(server_length - 1)]['id']
            print ('ServerId to be deleted is ' + str(last_server_id))
            url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
            url += str(last_server_id)
            response = requests.delete(url)
            self.assertEqual(response.status_code, 200)
            db_url = (__db_url__ + str(last_db_id))
            response = requests.delete(db_url)
            self.assertEqual(response.status_code, 200)
        else:
            print 'The Server list is empty'
