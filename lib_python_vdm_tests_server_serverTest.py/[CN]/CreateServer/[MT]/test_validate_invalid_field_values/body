def test_validate_invalid_field_values(self):
    '\n        ensure server name is not empty\n        '
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
        data = {'description': 'test', 'hostname': __host_or_ip__, 'admin-listener': True, }
        check_invalid_value(self, 'admin-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'admin-listener': 111, }
        check_invalid_value(self, 'admin-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'zookeeper-listener': True, }
        check_invalid_value(self, 'zookeeper-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'zookeeper-listener': 111, }
        check_invalid_value(self, 'zookeeper-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'replication-listener': True, }
        check_invalid_value(self, 'replication-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'replication-listener': 111, }
        check_invalid_value(self, 'replication-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'client-listener': True, }
        check_invalid_value(self, 'client-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'client-listener': 111, }
        check_invalid_value(self, 'client-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'internal-interface': True, }
        check_invalid_value(self, 'internal-interface', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'internal-interface': 111, }
        check_invalid_value(self, 'internal-interface', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'external-interface': True, }
        check_invalid_value(self, 'external-interface', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'external-interface': 111, }
        check_invalid_value(self, 'external-interface', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'public-interface': True, }
        check_invalid_value(self, 'public-interface', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'public-interface': 111, }
        check_invalid_value(self, 'public-interface', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'internal-listener': True, }
        check_invalid_value(self, 'internal-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'internal-listener': 111, }
        check_invalid_value(self, 'internal-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'http-listener': True, }
        check_invalid_value(self, 'http-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'http-listener': 111, }
        check_invalid_value(self, 'http-listener', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'name': True, }
        check_invalid_value(self, 'name', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'name': 111, }
        check_invalid_value(self, 'name', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'description': True, }
        check_invalid_value(self, 'description', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'description': 111, }
        check_invalid_value(self, 'description', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'placement-group': True, }
        check_invalid_value(self, 'placement-group', data, url, 'POST')
        data = {'description': 'test', 'hostname': __host_or_ip__, 'placement-group': 111, }
        check_invalid_value(self, 'placement-group', data, url, 'POST')
    else:
        print 'Database is empty.'
