def test_validate_invalid_field_values(self):
    '\n        ensure server fields are of correct data type\n        '
    '\n        ensure host name is not empty\n        '
    headers = {'Content-Type': 'application/json; charset=utf-8', }
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
        response = requests.get(url)
        value = response.json()
        if value:
            server_length = len(value['members'])
            last_server_id = value['members'][(server_length - 1)]['id']
            url = ('http://%s:8000/api/1.0/databases/%u/servers/%u/' % (__host_or_ip__, last_db_id, last_server_id))
            data = {'description': 'test', 'hostname': 11, 'name': 'test', }
            check_invalid_value(self, 'hostname', data, url, 'PUT')
            data = {'description': 'test', 'hostname': True, 'name': 'test', }
            check_invalid_value(self, 'hostname', data, url, 'PUT')
            data = {'description': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'description', data, url, 'PUT')
            data = {'description': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'description', data, url, 'PUT')
            data = {'enabled': 'test', 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'enabled', data, url, 'PUT')
            data = {'enabled': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'enabled', data, url, 'PUT')
            data = {'hostname': __host_or_ip__, 'admin-listener': True, }
            check_invalid_value(self, 'admin-listener', data, url, 'PUT')
            data = {'hostname': __host_or_ip__, 'admin-listener': 11, }
            check_invalid_value(self, 'admin-listener', data, url, 'PUT')
            data = {'internal-listener': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'internal-listener', data, url, 'PUT')
            data = {'internal-listener': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'internal-listener', data, url, 'PUT')
            data = {'http-listener': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'http-listener', data, url, 'PUT')
            data = {'http-listener': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'http-listener', data, url, 'PUT')
            data = {'zookeeper-listener': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'zookeeper-listener', data, url, 'PUT')
            data = {'zookeeper-listener': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'zookeeper-listener', data, url, 'PUT')
            data = {'replication-listener': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'replication-listener', data, url, 'PUT')
            data = {'replication-listener': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'replication-listener', data, url, 'PUT')
            data = {'client-listener': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'client-listener', data, url, 'PUT')
            data = {'client-listener': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'client-listener', data, url, 'PUT')
            data = {'internal-interface': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'internal-interface', data, url, 'PUT')
            data = {'internal-interface': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'internal-interface', data, url, 'PUT')
            data = {'external-interface': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'external-interface', data, url, 'PUT')
            data = {'external-interface': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'external-interface', data, url, 'PUT')
            data = {'public-interface': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'public-interface', data, url, 'PUT')
            data = {'public-interface': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'public-interface', data, url, 'PUT')
            data = {'placement-group': True, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'placement-group', data, url, 'PUT')
            data = {'placement-group': 11, 'hostname': __host_or_ip__, 'name': 'test', }
            check_invalid_value(self, 'placement-group', data, url, 'PUT')
        else:
            print 'The Server list is empty'
