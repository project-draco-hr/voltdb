def test_validate_duplicate_http_port_update(self):
    '\n        Validate duplicate the port\n        '
    headers = {'Content-Type': 'application/json; charset=utf-8', }
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
    url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
    data = {'description': 'test', 'hostname': __host_or_ip__, 'name': 'test12345', 'admin-listener': '11', 'client-listener': '22', 'http-listener': '33', 'internal-listener': '44', 'replication-listener': '55', 'zookeeper-listener': '66', }
    response = requests.post(url, json=data, headers=headers)
    if (response.status_code == 201):
        self.assertEqual(response.status_code, 201)
    else:
        self.assertEqual(response.status_code, 200)
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        url = ('http://%s:8000/api/1.0/databases/%u/servers/' % (__host_or_ip__, last_db_id))
        response = requests.get(url)
        value = response.json()
        if value:
            server_length = len(value['members'])
            last_server_id = value['members'][(server_length - 1)]['id']
            url = ('http://%s:8000/api/1.0/databases/%u/servers/%u/' % (__host_or_ip__, last_db_id, last_server_id))
            data = {'description': 'test', 'hostname': __host_or_ip__, 'name': 'test12345', 'http-listener': '8080', }
            response = requests.put(url, json=data, headers=headers)
            value = response.json()
            if (response.status_code == 201):
                self.assertEqual(response.status_code, 201)
            else:
                self.assertEqual(response.status_code, 200)
                self.assertEqual(value['statusString'], ('Port 8080 for the same host is already used by server %s for http-listener.' % __host_or_ip__))
        else:
            print 'The Server list is empty'
    else:
        print 'The database list is empty'
