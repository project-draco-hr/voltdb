{
  org.voltdb.compiler.deploymentfile.ObjectFactory factory=new org.voltdb.compiler.deploymentfile.ObjectFactory();
  DeploymentType deployment=factory.createDeploymentType();
  JAXBElement<DeploymentType> doc=factory.createDeployment(deployment);
  ClusterType cluster=factory.createClusterType();
  deployment.setCluster(cluster);
  cluster.setHostcount(dinfo.hostCount);
  cluster.setSitesperhost(dinfo.sitesPerHost);
  cluster.setKfactor(dinfo.replication);
  cluster.setId(dinfo.clusterId);
  cluster.setSchema(m_useDDLSchema ? SchemaType.DDL : SchemaType.CATALOG);
  PathsType paths=factory.createPathsType();
  deployment.setPaths(paths);
  Voltdbroot voltdbroot=factory.createPathsTypeVoltdbroot();
  paths.setVoltdbroot(voltdbroot);
  voltdbroot.setPath(voltRoot);
  if (m_snapshotPath != null) {
    PathsType.Snapshots snapshotPathElement=factory.createPathsTypeSnapshots();
    snapshotPathElement.setPath(m_snapshotPath);
    paths.setSnapshots(snapshotPathElement);
  }
  if (m_deadHostTimeout != null) {
    HeartbeatType heartbeat=factory.createHeartbeatType();
    heartbeat.setTimeout(m_deadHostTimeout);
    deployment.setHeartbeat(heartbeat);
  }
  if (m_commandLogPath != null) {
    PathsType.Commandlog commandLogPathElement=factory.createPathsTypeCommandlog();
    commandLogPathElement.setPath(m_commandLogPath);
    paths.setCommandlog(commandLogPathElement);
  }
  if (m_internalSnapshotPath != null) {
    PathsType.Commandlogsnapshot commandLogSnapshotPathElement=factory.createPathsTypeCommandlogsnapshot();
    commandLogSnapshotPathElement.setPath(m_internalSnapshotPath);
    paths.setCommandlogsnapshot(commandLogSnapshotPathElement);
  }
  if (m_snapshotPrefix != null) {
    SnapshotType snapshot=factory.createSnapshotType();
    deployment.setSnapshot(snapshot);
    snapshot.setFrequency(m_snapshotFrequency);
    snapshot.setPrefix(m_snapshotPrefix);
    snapshot.setRetain(m_snapshotRetain);
  }
  SecurityType security=factory.createSecurityType();
  deployment.setSecurity(security);
  security.setEnabled(m_securityEnabled);
  SecurityProviderString provider=SecurityProviderString.HASH;
  if (m_securityEnabled)   try {
    provider=SecurityProviderString.fromValue(m_securityProvider);
  }
 catch (  IllegalArgumentException shouldNotHappenSeeSetter) {
  }
  security.setProvider(provider);
  CommandLogType commandLogType=factory.createCommandLogType();
  commandLogType.setEnabled(m_commandLogEnabled);
  if (m_commandLogSync != null) {
    commandLogType.setSynchronous(m_commandLogSync.booleanValue());
  }
  if (m_commandLogSize != null) {
    commandLogType.setLogsize(m_commandLogSize);
  }
  if (m_commandLogFsyncInterval != null || m_commandLogMaxTxnsBeforeFsync != null) {
    CommandLogType.Frequency frequency=factory.createCommandLogTypeFrequency();
    if (m_commandLogFsyncInterval != null) {
      frequency.setTime(m_commandLogFsyncInterval);
    }
    if (m_commandLogMaxTxnsBeforeFsync != null) {
      frequency.setTransactions(m_commandLogMaxTxnsBeforeFsync);
    }
    commandLogType.setFrequency(frequency);
  }
  deployment.setCommandlog(commandLogType);
  PartitionDetectionType ppd=factory.createPartitionDetectionType();
  deployment.setPartitionDetection(ppd);
  ppd.setEnabled(m_ppdEnabled);
  if (m_heartbeatTimeout != null) {
    HeartbeatType hb=factory.createHeartbeatType();
    deployment.setHeartbeat(hb);
    hb.setTimeout((int)m_heartbeatTimeout);
  }
  if (m_consistencyReadLevel != null) {
    ConsistencyType ct=factory.createConsistencyType();
    deployment.setConsistency(ct);
    ct.setReadlevel(m_consistencyReadLevel.toReadLevelType());
  }
  if (dinfo.useCustomAdmin) {
    AdminModeType admin=factory.createAdminModeType();
    deployment.setAdminMode(admin);
    admin.setPort(dinfo.adminPort);
    admin.setAdminstartup(dinfo.adminOnStartup);
  }
  deployment.setSystemsettings(createSystemSettingsType(factory));
  if (m_users.size() > 0) {
    UsersType users=factory.createUsersType();
    deployment.setUsers(users);
    for (    final UserInfo info : m_users) {
      User user=factory.createUsersTypeUser();
      users.getUser().add(user);
      user.setName(info.name);
      user.setPassword(info.password);
      user.setPlaintext(info.plaintext);
      if (info.roles.length > 0) {
        final StringBuilder roles=new StringBuilder();
        for (        final String role : info.roles) {
          if (roles.length() > 0)           roles.append(",");
          roles.append(role);
        }
        user.setRoles(roles.toString());
      }
    }
  }
  HttpdType httpd=factory.createHttpdType();
  deployment.setHttpd(httpd);
  httpd.setEnabled(m_httpdPortNo != -1);
  httpd.setPort(m_httpdPortNo);
  Jsonapi json=factory.createHttpdTypeJsonapi();
  httpd.setJsonapi(json);
  json.setEnabled(m_jsonApiEnabled);
  if (m_httpsEnabled) {
    HttpsType httpsType=factory.createHttpsType();
    httpsType.setEnabled(m_httpsEnabled);
    if (m_keystore != null) {
      KeyOrTrustStoreType store=factory.createKeyOrTrustStoreType();
      store.setPath(m_keystore);
      store.setPassword(m_keystorePassword);
      httpsType.setKeystore(store);
    }
    if (m_certstore != null) {
      KeyOrTrustStoreType store=factory.createKeyOrTrustStoreType();
      store.setPath(m_certstore);
      store.setPassword(m_certstorePassword);
      httpsType.setTruststore(store);
    }
    httpd.setHttps(httpsType);
  }
  ExportType export=factory.createExportType();
  deployment.setExport(export);
  for (  HashMap<String,Object> exportConnector : m_elExportConnectors) {
    ExportConfigurationType exportConfig=factory.createExportConfigurationType();
    exportConfig.setEnabled((boolean)exportConnector.get("elEnabled") && exportConnector.get("elLoader") != null && !((String)exportConnector.get("elLoader")).trim().isEmpty());
    ServerExportEnum exportTarget=ServerExportEnum.fromValue(((String)exportConnector.get("elExportTarget")).toLowerCase());
    exportConfig.setType(exportTarget);
    if (exportTarget.equals(ServerExportEnum.CUSTOM)) {
      exportConfig.setExportconnectorclass(System.getProperty(ExportDataProcessor.EXPORT_TO_TYPE));
    }
    exportConfig.setTarget((String)exportConnector.get("elGroup"));
    Properties config=(Properties)exportConnector.get("elConfig");
    if ((config != null) && (config.size() > 0)) {
      List<PropertyType> configProperties=exportConfig.getProperty();
      for (      Object nameObj : config.keySet()) {
        String name=String.class.cast(nameObj);
        PropertyType prop=factory.createPropertyType();
        prop.setName(name);
        prop.setValue(config.getProperty(name));
        configProperties.add(prop);
      }
    }
    export.getConfiguration().add(exportConfig);
  }
  ImportType importt=factory.createImportType();
  deployment.setImport(importt);
  for (  HashMap<String,Object> importConnector : m_ilImportConnectors) {
    ImportConfigurationType importConfig=factory.createImportConfigurationType();
    importConfig.setEnabled((boolean)importConnector.get("ilEnabled"));
    ServerImportEnum importType=ServerImportEnum.fromValue(((String)importConnector.get("ilImportType")).toLowerCase());
    importConfig.setType(importType);
    importConfig.setModule((String)importConnector.get("ilModule"));
    String formatter=(String)importConnector.get("ilFormatter");
    if (formatter != null) {
      importConfig.setFormat(formatter);
    }
    Properties config=(Properties)importConnector.get("ilConfig");
    if ((config != null) && (config.size() > 0)) {
      List<PropertyType> configProperties=importConfig.getProperty();
      for (      Object nameObj : config.keySet()) {
        String name=String.class.cast(nameObj);
        PropertyType prop=factory.createPropertyType();
        prop.setName(name);
        prop.setValue(config.getProperty(name));
        configProperties.add(prop);
      }
    }
    Properties formatConfig=(Properties)importConnector.get("ilFormatterConfig");
    if ((formatConfig != null) && (formatConfig.size() > 0)) {
      List<PropertyType> configProperties=importConfig.getFormatProperty();
      for (      Object nameObj : formatConfig.keySet()) {
        String name=String.class.cast(nameObj);
        PropertyType prop=factory.createPropertyType();
        prop.setName(name);
        prop.setValue(formatConfig.getProperty(name));
        configProperties.add(prop);
      }
    }
    importt.getConfiguration().add(importConfig);
  }
  DrType dr=factory.createDrType();
  deployment.setDr(dr);
  dr.setListen(m_drProducerEnabled);
  if (m_drMasterHost != null && !m_drMasterHost.isEmpty()) {
    ConnectionType conn=factory.createConnectionType();
    dr.setConnection(conn);
    conn.setSource(m_drMasterHost);
  }
  File file=File.createTempFile("myAppDeployment",".tmp");
  JAXBContext context=JAXBContext.newInstance(DeploymentType.class);
  Marshaller marshaller=context.createMarshaller();
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  marshaller.marshal(doc,file);
  final String deploymentPath=file.getPath();
  return deploymentPath;
}
