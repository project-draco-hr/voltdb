{
  final HashSet<ProcedureInfo> newProcs=new HashSet<ProcedureInfo>();
  for (  final ProcedureInfo procedure : procedures) {
    assert(newProcs.contains(procedure) == false);
    newProcs.add(procedure);
  }
  for (  final ProcedureInfo procedure : procedures) {
    StringBuffer roleInfo=new StringBuffer();
    if (procedure.roles.length != 0) {
      roleInfo.append(" ALLOW ");
      for (int i=0; i < procedure.roles.length; i++) {
        roleInfo.append(procedure.roles[i] + ",");
      }
      int length=roleInfo.length();
      roleInfo.replace(length - 1,length," ");
    }
    if (procedure.cls != null) {
      transformer.append("CREATE PROCEDURE " + roleInfo.toString() + " FROM CLASS "+ procedure.cls.getName()+ ";");
    }
 else     if (procedure.sql != null) {
      transformer.append("CREATE PROCEDURE " + procedure.name + roleInfo.toString()+ " AS "+ procedure.sql);
    }
    if (procedure.partitionInfo != null) {
      String[] parameter=procedure.partitionInfo.split(":");
      String[] token=parameter[0].split("\\.");
      String position="";
      if (parameter.length > 1 && Integer.parseInt(parameter[1].trim()) > 0) {
        position=" PARAMETER " + parameter[1];
      }
      transformer.append("PARTITION PROCEDURE " + procedure.name + " ON TABLE "+ token[0]+ " COLUMN "+ token[1]+ position+ ";");
    }
  }
}
