{
  assert(jarPath != null);
  assert(deployment == null || deployment.sitesPerHost >= 1);
  assert(deployment == null || deployment.hostCount >= 1);
  String deploymentVoltRoot=voltRoot;
  if (deployment != null) {
    if (voltRoot == null) {
      String voltRootPath="/tmp/" + System.getProperty("user.name");
      java.io.File voltRootFile=new java.io.File(voltRootPath);
      if (!voltRootFile.exists()) {
        if (!voltRootFile.mkdir()) {
          throw new RuntimeException("Unable to create voltdbroot \"" + voltRootPath + "\" for test");
        }
      }
      if (!voltRootFile.isDirectory()) {
        throw new RuntimeException("voltdbroot \"" + voltRootPath + "\" for test exists but is not a directory");
      }
      if (!voltRootFile.canRead()) {
        throw new RuntimeException("voltdbroot \"" + voltRootPath + "\" for test exists but is not readable");
      }
      if (!voltRootFile.canWrite()) {
        throw new RuntimeException("voltdbroot \"" + voltRootPath + "\" for test exists but is not writable");
      }
      if (!voltRootFile.canExecute()) {
        throw new RuntimeException("voltdbroot \"" + voltRootPath + "\" for test exists but is not writable");
      }
      deploymentVoltRoot=voltRootPath;
    }
  }
  m_voltRootPath=deploymentVoltRoot;
  DocumentBuilderFactory docFactory;
  DocumentBuilder docBuilder;
  Document doc;
  try {
    docFactory=DocumentBuilderFactory.newInstance();
    docBuilder=docFactory.newDocumentBuilder();
    doc=docBuilder.newDocument();
  }
 catch (  final ParserConfigurationException e) {
    e.printStackTrace();
    return false;
  }
  final Element project=doc.createElement("project");
  doc.appendChild(project);
  final Element security=doc.createElement("security");
  security.setAttribute("enabled",Boolean.valueOf(m_securityEnabled).toString());
  project.appendChild(security);
  final Element database=doc.createElement("database");
  database.setAttribute("name","database");
  project.appendChild(database);
  buildDatabaseElement(doc,database);
  StreamResult result;
  try {
    final Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    result=new StreamResult(new StringWriter());
    final DOMSource domSource=new DOMSource(doc);
    transformer.transform(domSource,result);
  }
 catch (  final TransformerConfigurationException e) {
    e.printStackTrace();
    return false;
  }
catch (  final TransformerFactoryConfigurationError e) {
    e.printStackTrace();
    return false;
  }
catch (  final TransformerException e) {
    e.printStackTrace();
    return false;
  }
  final File projectFile=writeStringToTempFile(result.getWriter().toString());
  final String projectPath=projectFile.getPath();
  compiler.setProcInfoOverrides(m_procInfoOverrides);
  boolean success=compiler.compile(projectPath,jarPath);
  if (success && m_compilerDebugPrintStream != null) {
    compiler.summarizeSuccess(m_compilerDebugPrintStream);
  }
  if (deployment != null) {
    try {
      m_pathToDeployment=writeDeploymentFile(deployment.hostCount,deployment.sitesPerHost,deployment.replication,deploymentVoltRoot,deployment.useCustomAdmin,deployment.adminPort,deployment.adminOnStartup);
    }
 catch (    Exception e) {
      System.out.println("Failed to create deployment file in testcase.");
      e.printStackTrace();
      System.out.println("hostcount: " + deployment.hostCount);
      System.out.println("sitesPerHost: " + deployment.sitesPerHost);
      System.out.println("replication: " + deployment.replication);
      System.out.println("voltRoot: " + deploymentVoltRoot);
      System.out.println("ppdEnabled: " + ppdEnabled);
      System.out.println("snapshotPath: " + snapshotPath);
      System.out.println("ppdPrefix: " + ppdPrefix);
      System.out.println("adminEnabled: " + deployment.useCustomAdmin);
      System.out.println("adminPort: " + deployment.adminPort);
      System.out.println("adminOnStartup: " + deployment.adminOnStartup);
      throw new RuntimeException(e);
    }
  }
  return success;
}
