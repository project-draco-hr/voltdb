{
  assert(jarPath != null);
  assert(sitesPerHost >= 1);
  assert(hostCount >= 1);
  assert(leaderAddress != null);
  DocumentBuilderFactory docFactory;
  DocumentBuilder docBuilder;
  Document doc;
  try {
    docFactory=DocumentBuilderFactory.newInstance();
    docBuilder=docFactory.newDocumentBuilder();
    doc=docBuilder.newDocument();
  }
 catch (  final ParserConfigurationException e) {
    e.printStackTrace();
    return false;
  }
  final Element project=doc.createElement("project");
  doc.appendChild(project);
  final Element security=doc.createElement("security");
  security.setAttribute("enabled",new Boolean(m_securityEnabled).toString());
  project.appendChild(security);
  final Element database=doc.createElement("database");
  database.setAttribute("name","database");
  project.appendChild(database);
  buildDatabaseElement(doc,database);
  StreamResult result;
  try {
    final Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    result=new StreamResult(new StringWriter());
    final DOMSource domSource=new DOMSource(doc);
    transformer.transform(domSource,result);
  }
 catch (  final TransformerConfigurationException e) {
    e.printStackTrace();
    return false;
  }
catch (  final TransformerFactoryConfigurationError e) {
    e.printStackTrace();
    return false;
  }
catch (  final TransformerException e) {
    e.printStackTrace();
    return false;
  }
  String xml=result.getWriter().toString();
  System.out.println(xml);
  final File projectFile=writeStringToTempFile(result.getWriter().toString());
  final String projectPath=projectFile.getPath();
  String pathToDeployment=writeDeploymentFile(hostCount,sitesPerHost,leaderAddress,replication);
  boolean success=false;
  if (compileDeployment) {
    success=compiler.compile(projectPath,jarPath,m_compilerDebugPrintStream,m_procInfoOverrides,pathToDeployment);
  }
 else {
    success=compiler.compile(projectPath,jarPath,m_compilerDebugPrintStream,m_procInfoOverrides);
    m_pathToDeployment=pathToDeployment;
  }
  return success;
}
