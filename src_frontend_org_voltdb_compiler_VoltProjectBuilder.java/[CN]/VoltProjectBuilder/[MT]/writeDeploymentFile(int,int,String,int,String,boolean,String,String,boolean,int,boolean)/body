{
  DocumentBuilderFactory docFactory;
  DocumentBuilder docBuilder;
  Document doc;
  try {
    docFactory=DocumentBuilderFactory.newInstance();
    docBuilder=docFactory.newDocumentBuilder();
    doc=docBuilder.newDocument();
  }
 catch (  final ParserConfigurationException e) {
    e.printStackTrace();
    return null;
  }
  final Element deployment=doc.createElement("deployment");
  doc.appendChild(deployment);
  final Element cluster=doc.createElement("cluster");
  cluster.setAttribute("hostcount",new Integer(hostCount).toString());
  cluster.setAttribute("sitesperhost",new Integer(sitesPerHost).toString());
  cluster.setAttribute("leader",leader);
  cluster.setAttribute("kfactor",new Integer(kFactor).toString());
  deployment.appendChild(cluster);
  final Element paths=doc.createElement("paths");
  final Element voltroot=doc.createElement("voltroot");
  voltroot.setAttribute("path",voltRoot);
  paths.appendChild(voltroot);
  if (ppdPath != null) {
    final Element ppdPathElement=doc.createElement("partitiondetectionsnapshot");
    ppdPathElement.setAttribute("path",ppdPath);
    paths.appendChild(ppdPathElement);
  }
  if (m_snapshotPath != null) {
    final Element snapshotPathElement=doc.createElement("snapshots");
    snapshotPathElement.setAttribute("path",m_snapshotPath);
    paths.appendChild(snapshotPathElement);
  }
  deployment.appendChild(paths);
  if (m_snapshotPrefix != null) {
    final Element snapshot=doc.createElement("snapshot");
    snapshot.setAttribute("frequency",m_snapshotFrequency);
    snapshot.setAttribute("prefix",m_snapshotPrefix);
    snapshot.setAttribute("retain",Integer.toString(m_snapshotRetain));
    deployment.appendChild(snapshot);
  }
  if (ppdEnabled) {
    final Element ppd=doc.createElement("partition-detection");
    cluster.appendChild(ppd);
    ppd.setAttribute("enabled","true");
    final Element ss=doc.createElement("snapshot");
    ss.setAttribute("prefix",ppdPrefix);
    ppd.appendChild(ss);
  }
  if (adminEnabled) {
    final Element admin=doc.createElement("admin-mode");
    cluster.appendChild(admin);
    admin.setAttribute("port",new Integer(adminPort).toString());
    if (adminOnStartup) {
      admin.setAttribute("adminstartup","true");
    }
  }
  Element users=null;
  if (m_users.size() > 0) {
    users=doc.createElement("users");
    deployment.appendChild(users);
  }
  for (  final UserInfo info : m_users) {
    final Element user=doc.createElement("user");
    user.setAttribute("name",info.name);
    user.setAttribute("password",info.password);
    if (info.groups.length > 0) {
      final StringBuilder groups=new StringBuilder();
      for (      final String group : info.groups) {
        if (groups.length() > 0)         groups.append(",");
        groups.append(group);
      }
      user.setAttribute("groups",groups.toString());
    }
    users.appendChild(user);
  }
  final Element httpd=doc.createElement("httpd");
  httpd.setAttribute("port",Integer.valueOf(m_httpdPortNo).toString());
  final Element jsonapi=doc.createElement("jsonapi");
  jsonapi.setAttribute("enabled",new Boolean(m_jsonApiEnabled).toString());
  httpd.appendChild(jsonapi);
  deployment.appendChild(httpd);
  StreamResult result;
  try {
    final Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    result=new StreamResult(new StringWriter());
    final DOMSource domSource=new DOMSource(doc);
    transformer.transform(domSource,result);
  }
 catch (  final TransformerConfigurationException e) {
    e.printStackTrace();
    return null;
  }
catch (  final TransformerFactoryConfigurationError e) {
    e.printStackTrace();
    return null;
  }
catch (  final TransformerException e) {
    e.printStackTrace();
    return null;
  }
  String xml=result.getWriter().toString();
  System.out.println(xml);
  final File deploymentFile=writeStringToTempFile(result.getWriter().toString());
  final String deploymentPath=deploymentFile.getPath();
  return deploymentPath;
}
