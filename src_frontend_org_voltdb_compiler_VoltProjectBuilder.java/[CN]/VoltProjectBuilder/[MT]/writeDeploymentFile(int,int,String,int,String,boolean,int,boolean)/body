{
  org.voltdb.compiler.deploymentfile.ObjectFactory factory=new org.voltdb.compiler.deploymentfile.ObjectFactory();
  DeploymentType deployment=factory.createDeploymentType();
  JAXBElement<DeploymentType> doc=factory.createDeployment(deployment);
  ClusterType cluster=factory.createClusterType();
  deployment.setCluster(cluster);
  cluster.setHostcount(hostCount);
  cluster.setSitesperhost(sitesPerHost);
  cluster.setLeader(leader);
  cluster.setKfactor(kFactor);
  PathsType paths=factory.createPathsType();
  deployment.setPaths(paths);
  Voltdbroot voltdbroot=factory.createPathsTypeVoltdbroot();
  paths.setVoltdbroot(voltdbroot);
  voltdbroot.setPath(voltRoot);
  if (m_snapshotPath != null) {
    PathEntry snapshotPathElement=factory.createPathEntry();
    snapshotPathElement.setPath(m_snapshotPath);
    paths.setSnapshots(snapshotPathElement);
  }
  if (m_commandLogPath != null) {
    PathEntry commandLogPathElement=factory.createPathEntry();
    commandLogPathElement.setPath(m_commandLogPath);
    paths.setCommandlog(commandLogPathElement);
  }
  if (m_internalSnapshotPath != null) {
    PathEntry commandLogSnapshotPathElement=factory.createPathEntry();
    commandLogSnapshotPathElement.setPath(m_internalSnapshotPath);
    paths.setCommandlogsnapshot(commandLogSnapshotPathElement);
  }
  if (m_snapshotPrefix != null) {
    SnapshotType snapshot=factory.createSnapshotType();
    deployment.setSnapshot(snapshot);
    snapshot.setFrequency(m_snapshotFrequency);
    snapshot.setPrefix(m_snapshotPrefix);
    snapshot.setRetain(m_snapshotRetain);
  }
  if (m_commandLogSync != null || m_commandLogEnabled != null || m_commandLogFsyncInterval != null || m_commandLogMaxTxnsBeforeFsync != null) {
    CommandLogType commandLogType=factory.createCommandLogType();
    if (m_commandLogSync != null) {
      commandLogType.setSynchronous(m_commandLogSync.booleanValue());
    }
    if (m_commandLogEnabled != null) {
      commandLogType.setEnabled(m_commandLogEnabled);
    }
    if (m_commandLogFsyncInterval != null || m_commandLogMaxTxnsBeforeFsync != null) {
      CommandLogType.Frequency frequency=factory.createCommandLogTypeFrequency();
      if (m_commandLogFsyncInterval != null) {
        frequency.setTime(new BigInteger(Integer.toString(m_commandLogFsyncInterval)));
      }
      if (m_commandLogMaxTxnsBeforeFsync != null) {
        frequency.setTransactions(new BigInteger(Integer.toString(m_commandLogMaxTxnsBeforeFsync)));
      }
      commandLogType.setFrequency(frequency);
    }
    deployment.setCommandlog(commandLogType);
  }
  PartitionDetectionType ppd=factory.createPartitionDetectionType();
  deployment.setPartitionDetection(ppd);
  ppd.setEnabled(m_ppdEnabled);
  Snapshot ppdsnapshot=factory.createPartitionDetectionTypeSnapshot();
  ppd.setSnapshot(ppdsnapshot);
  ppdsnapshot.setPrefix(m_ppdPrefix);
  if (useCustomAdmin) {
    AdminModeType admin=factory.createAdminModeType();
    deployment.setAdminMode(admin);
    admin.setPort(adminPort);
    admin.setAdminstartup(adminOnStartup);
  }
  if (m_users.size() > 0) {
    UsersType users=factory.createUsersType();
    deployment.setUsers(users);
    for (    final UserInfo info : m_users) {
      User user=factory.createUsersTypeUser();
      users.getUser().add(user);
      user.setName(info.name);
      user.setPassword(info.password);
      if (info.groups.length > 0) {
        final StringBuilder groups=new StringBuilder();
        for (        final String group : info.groups) {
          if (groups.length() > 0)           groups.append(",");
          groups.append(group);
        }
        user.setGroups(groups.toString());
      }
    }
  }
  HttpdType httpd=factory.createHttpdType();
  deployment.setHttpd(httpd);
  httpd.setEnabled(m_httpdPortNo != -1);
  httpd.setPort(m_httpdPortNo);
  Jsonapi json=factory.createHttpdTypeJsonapi();
  httpd.setJsonapi(json);
  json.setEnabled(m_jsonApiEnabled);
  ExportType export=factory.createExportType();
  deployment.setExport(export);
  export.setEnabled(m_elenabled);
  if (m_elloader != null) {
    export.setClazz(m_elloader);
  }
  File file=File.createTempFile("myAppDeployment",".tmp");
  JAXBContext context=JAXBContext.newInstance(DeploymentType.class);
  Marshaller marshaller=context.createMarshaller();
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  marshaller.marshal(doc,file);
  final String deploymentPath=file.getPath();
  return deploymentPath;
}
