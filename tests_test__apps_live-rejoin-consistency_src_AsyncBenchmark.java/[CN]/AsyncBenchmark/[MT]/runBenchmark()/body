{
  benchmarkThread=Thread.currentThread();
  log.info(HORIZONTAL_RULE);
  log.info(" Setup & Initialization");
  log.info(HORIZONTAL_RULE);
  connect(config.servers.split(",")[0]);
  ClientResponse resp=client.callProcedure("@Statistics","PARTITIONCOUNT",0);
  if (resp.getStatus() != ClientResponse.SUCCESS) {
    log.error(_F("Get partition count failed %s\n",resp.getStatusString()));
    throw new RuntimeException();
  }
  VoltTable[] tpc=resp.getResults();
  nPartitions=0;
  while (tpc[0].advanceRow()) {
    nPartitions=(int)tpc[0].getLong(0);
  }
  log.info(_F("partition count: %d\n",nPartitions));
  if (nPartitions < 2) {
    log.error(_F("Less than 2 partitions\n",nPartitions));
    System.exit(1);
  }
  client.callProcedure("Initialize",nPartitions);
  log.info(HORIZONTAL_RULE);
  log.info("Starting Benchmark");
  log.info(HORIZONTAL_RULE);
  benchmarkStartTS=System.currentTimeMillis();
  schedulePeriodicStats();
  log.info("\nRunning benchmark...");
  final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
  String qOps[]={"+","+"};
  int lastCatalog=0;
  while (runBenchmark && (benchmarkEndTime > System.currentTimeMillis())) {
    int r=rand.nextInt(2);
    int p=rand.nextInt(nPartitions);
    int c=rand.nextInt(1) + 2;
    Tests tc;
    if (testCase == null) {
      tc=Tests.values()[rand.nextInt(Tests.values().length)];
    }
 else     tc=testCase;
    totalAsync.getAndIncrement();
    try {
switch (tc) {
case ADHOCSINGLEPARTPTN:
        client.callProcedure(new SequenceCallback(),"@AdHoc","UPDATE COUNTERS_PTN set COUNTER=COUNTER" + qOps[r] + Integer.toString(c)+ " WHERE id="+ Integer.toString(p)+ ";");
      totalAdHoc.getAndIncrement();
    break;
case ADHOCMULTIPARTPTN:
  client.callProcedure(new SequenceCallback(),"@AdHoc","UPDATE COUNTERS_PTN set COUNTER=COUNTER" + qOps[r] + Integer.toString(c)+ ";");
totalAdHoc.getAndIncrement();
break;
case ADHOCSINGLEPARTREP:
client.callProcedure(new SequenceCallback(),"@AdHoc","UPDATE COUNTERS_REP set COUNTER=COUNTER" + qOps[r] + Integer.toString(c)+ " WHERE id="+ Integer.toString(p)+ ";");
totalAdHoc.getAndIncrement();
break;
case ADHOCMULTIPARTREP:
client.callProcedure(new SequenceCallback(),"@AdHoc","UPDATE COUNTERS_REP set COUNTER=COUNTER" + qOps[r] + Integer.toString(c)+ ";");
totalAdHoc.getAndIncrement();
break;
case UPDATEAPPLICATIONCATALOG:
ClientResponse response=null;
try {
response=client.callProcedure("@AdHoc","Select count(*) from replicated;");
if (response.getStatus() == ClientResponse.SUCCESS) {
lastCatalog=1;
}
 else {
lastCatalog=0;
}
}
 catch (ProcCallException e) {
lastCatalog=0;
}
catch (Exception e) {
logStackTrace(e);
throw new RuntimeException();
}
if (testCase != null) {
Thread.sleep(rand.nextInt(20000) + 1);
}
log.info(_F("updateapplicationcatalog %d...\n",lastCatalog));
String catPath="/home/prosegay/branches/ENG-3884/voltdb/tests/test_apps/live-rejoin-consistency";
File catalog_files[]={new File(catPath + "/LiveRejoinConsistency.jar"),new File(catPath + "/LiveRejoinConsistency2.jar")};
File file2=new File(catPath + "/deployment.xml");
lastCatalog=(lastCatalog + 1) % 2;
response=client.updateApplicationCatalog(catalog_files[lastCatalog],file2);
if (response.getStatus() != ClientResponse.SUCCESS) {
log.error(_F("UAC operation failed with %s\n",response.getStatusString()));
throw new RuntimeException();
}
 else {
successfulAsync.getAndIncrement();
try {
response=client.callProcedure("@AdHoc","Select count(*) from replicated;");
switch (lastCatalog) {
case 0:
if (response.getStatus() == ClientResponse.SUCCESS) {
log.error("unexpected result for catalog 0\n");
throw new RuntimeException();
}
break;
case 1:
if (response.getStatus() != ClientResponse.SUCCESS) {
log.error("unexpected result for catalog 1\n");
throw new RuntimeException();
}
break;
default :
throw new RuntimeException("Invalid catalog switch value");
}
}
 catch (ProcCallException e) {
if (lastCatalog != 0) {
logStackTrace(e);
log.error(_F("unexpected result for catalog 1 in proccallexception %d\n%s\n",lastCatalog,e.getMessage()));
throw new RuntimeException();
}
}
}
break;
case WRSINGLEPARTSTOREDPROCPTN:
client.callProcedure(new SequenceCallback(),"getNextFromPtn",p,nPartitions);
break;
case WRMULTIPARTSTOREDPROCPTN:
client.callProcedure(new SequenceCallback(),"MPUpdatePtn");
case WRMULTIPARTSTOREDPROCREP:
client.callProcedure(new SequenceCallback(),"MPUpdateRep");
break;
case LOADSINGLEPARTITIONTABLEPTN:
case LOADMULTIPARTITIONTABLEREP:
response=null;
try {
response=client.callProcedure("getRowFromPtn",p);
if (response.getStatus() != ClientResponse.SUCCESS) {
log.error(_F("FATAL Unexpectd result getting source row %s\n",response.getStatusString()));
throw new RuntimeException();
}
}
 catch (ProcCallException e) {
log.error(_F("unexpected exception getting source row\n %s\n",e.getMessage()));
}
VoltTable vt[]=response.getResults();
if (vt.length == 0) {
log.error(_F("FATAL VoltTable[] object has no elememts\n"));
throw new RuntimeException();
}
if (vt[0].getRowCount() != 1) {
log.error(_F("FATAL VoltTable object has wrong number of rows %d\n",vt[0].getRowCount()));
throw new RuntimeException();
}
VoltTable vt0=vt[0];
try {
switch (tc) {
case LOADSINGLEPARTITIONTABLEPTN:
client.callProcedure(new SequenceCallback(),"@LoadSinglepartitionTable","LIKE_COUNTERS_PTN",vt0);
break;
case LOADMULTIPARTITIONTABLEREP:
client.callProcedure(new SequenceCallback(),"@LoadMultipartitionTable","LIKE_COUNTERS_REP",vt0);
break;
}
}
 catch (VoltAbortException e) {
log.error(_F("FATAL Load single/multi table failed with an exception\n%s\n",e.getMessage()));
throw new RuntimeException();
}
break;
default :
throw new RuntimeException("Invalid query selector switch value: '" + tc + "'");
}
}
 catch (NoConnectionsException e) {
logStackTrace(e);
throw new RuntimeException(e);
}
catch (InterruptedException e) {
logStackTrace(e);
log.error(_F("Caught InterrruptedException: %s\ntoString: %s\n",e.getMessage(),e.toString()));
}
catch (IOException e) {
logStackTrace(e);
log.error(_F("Caught IOException: %s\ntoString: %s\n",e.getMessage(),e.toString()));
}
catch (Exception e) {
logStackTrace(e);
log.error(_F("Caught Exception: %s\ntoString: %s\n",e.getMessage(),e.toString()));
throw new RuntimeException(e);
}
Thread.yield();
}
timer.cancel();
try {
log.info("draining connection...");
client.drain();
}
 catch (Exception e) {
}
try {
printResults();
}
 catch (Exception e) {
}
try {
client.close();
}
 catch (Exception e) {
}
}
