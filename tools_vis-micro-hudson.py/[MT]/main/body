def main():
    if (len(sys.argv) < 4):
        usage()
        exit((-1))
    if (not os.path.exists(sys.argv[2])):
        print sys.argv[2], 'does not exist'
        exit((-1))
    credentials = parse_credentials(sys.argv[1])
    path = os.path.join(sys.argv[2], sys.argv[3])
    numDays = 30
    width = None
    height = None
    if (len(sys.argv) >= 5):
        numDays = int(sys.argv[4])
    if (len(sys.argv) >= 6):
        width = int(sys.argv[5])
    if (len(sys.argv) >= 7):
        height = int(sys.argv[6])
    workload_names = WorkloadNames(credentials['hostname'], credentials['latency']['user'], credentials['latency']['password'], credentials['latency']['database'])
    latency_stat = LatencyStat(credentials['hostname'], credentials['latency']['user'], credentials['latency']['password'], credentials['latency']['database'])
    volt_stat = ThroughputStat(credentials['hostname'], credentials['throughput']['user'], credentials['throughput']['password'], credentials['throughput']['database'])
    timedelta = datetime.timedelta(days=numDays)
    starttime = (datetime.datetime.now() - timedelta)
    timestamp = (time.mktime(starttime.timetuple()) * 1000.0)
    names = workload_names.get_names()
    for n in names:
        name = n['names']
        latencies = latency_stat.get_latencies(name, timestamp, 900)
        throughput = volt_stat.get_throughputs(name, starttime, 900)
        latency_map = {}
        latencies.sort(key=(lambda x: x['time']))
        for v in latencies:
            if ((v['time'] == None) or (v['latency'] == None)):
                continue
            if (v['hosts'] not in latency_map):
                latency_map[v['hosts']] = {'time': [], 'latency': [], }
            datenum = matplotlib.dates.date2num(v['time'])
            latency_map[v['hosts']]['time'].append(datenum)
            latency_map[v['hosts']]['latency'].append(v['latency'])
        if (1 in latency_map):
            pl = Plot(('Average Latency on Single Node for Workload: ' + name), 'Time', 'Latency (ms)', (((path + '-latency-single-') + name) + '.png'), width, height)
            v = latency_map.pop(1)
            pl.plot(v['time'], v['latency'], COLORS(1), 1)
            pl.close()
        if (len(latency_map) > 0):
            pl = Plot(('Average Latency for Workload: ' + name), 'Time', 'Latency (ms)', (((path + '-latency-') + name) + '.png'), width, height)
            for k in latency_map.iterkeys():
                v = latency_map[k]
                pl.plot(v['time'], v['latency'], COLORS(k), k)
            pl.close()
        throughput_map = {}
        throughput.sort(key=(lambda x: x['id']))
        for v in throughput:
            if (v['hosts'] not in throughput_map):
                throughput_map[v['hosts']] = {'time': [], 'tps': [], }
            datenum = matplotlib.dates.date2num(v['time'])
            throughput_map[v['hosts']]['time'].append(datenum)
            throughput_map[v['hosts']]['tps'].append(v['tps'])
        if (1 in throughput_map):
            pl = Plot(('Performance on Single Node for Workload: ' + name), 'Time', 'Throughput (txns/sec)', (((path + '-throughput-single-') + name) + '.png'), width, height)
            v = throughput_map.pop(1)
            pl.plot(v['time'], v['tps'], COLORS(1), 1)
            pl.close()
        if (len(throughput_map) > 0):
            pl = Plot(('Performance for Workload: ' + name), 'Time', 'Throughput (txns/sec)', (((path + '-throughput-') + name) + '.png'), width, height)
            for k in throughput_map.iterkeys():
                v = throughput_map[k]
                pl.plot(v['time'], v['tps'], COLORS(k), k)
            pl.close()
    latency_stat.close()
    volt_stat.close()
