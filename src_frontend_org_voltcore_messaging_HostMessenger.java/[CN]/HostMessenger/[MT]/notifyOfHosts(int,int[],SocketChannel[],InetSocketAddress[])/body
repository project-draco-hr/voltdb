{
  m_localHostId=yourHostId;
  long agreementHSId=getHSIdForLocalSite(AGREEMENT_SITE_ID);
  HashSet<Long> agreementSites=new HashSet<Long>();
  agreementSites.add(agreementHSId);
  m_network.start();
  for (int ii=0; ii < hosts.length; ii++) {
    System.out.println(yourHostId + " Notified of host " + hosts[ii]);
    agreementSites.add(CoreUtils.getHSIdFromHostAndSite(hosts[ii],AGREEMENT_SITE_ID));
    prepSocketChannel(sockets[ii]);
    ForeignHost fhost=null;
    try {
      fhost=new ForeignHost(this,hosts[ii],sockets[ii],m_config.deadHostTimeout,listeningAddresses[ii]);
      fhost.register(this);
      putForeignHost(hosts[ii],fhost);
    }
 catch (    java.io.IOException e) {
      org.voltdb.VoltDB.crashLocalVoltDB("",true,e);
    }
  }
  SiteMailbox sm=new SiteMailbox(this,agreementHSId);
  createMailbox(agreementHSId,sm);
  m_agreementSite=new AgreementSite(agreementHSId,agreementSites,yourHostId,sm,new InetSocketAddress(m_config.zkInterface.split(":")[0],Integer.parseInt(m_config.zkInterface.split(":")[1])),m_config.backwardsTimeForgivenessWindow,m_failedHostsCallback);
  for (  ForeignHost fh : m_foreignHosts.values()) {
    fh.enableRead();
  }
  m_agreementSite.start();
  ImmutableSet.Builder<Long> verbotenThreadBuilder=ImmutableSet.<Long>builder();
  verbotenThreadBuilder.addAll(m_network.getThreadIds());
  verbotenThreadBuilder.addAll(m_agreementSite.getThreadIds());
  m_agreementSite.waitForRecovery();
  m_zk=org.voltcore.zk.ZKUtil.getClient(m_config.zkInterface,60 * 1000,verbotenThreadBuilder.build());
  if (m_zk == null) {
    throw new Exception("Timed out trying to connect local ZooKeeper instance");
  }
  byte hostInfoBytes[];
  if (m_config.internalInterface.isEmpty()) {
    InetSocketAddress addr=new InetSocketAddress(m_joiner.m_reportedInternalInterface,m_config.internalPort);
    hostInfoBytes=addr.toString().getBytes("UTF-8");
  }
 else {
    InetSocketAddress addr=new InetSocketAddress(m_config.internalInterface,m_config.internalPort);
    hostInfoBytes=addr.toString().getBytes("UTF-8");
  }
  m_zk.create(CoreZK.hosts_host + getHostId(),hostInfoBytes,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
}
