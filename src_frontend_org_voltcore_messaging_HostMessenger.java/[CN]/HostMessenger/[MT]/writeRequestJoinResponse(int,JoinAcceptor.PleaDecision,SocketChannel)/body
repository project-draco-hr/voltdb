{
  JSONObject jsObj=new JSONObject();
  jsObj.put("accepted",decision.accepted);
  if (decision.accepted) {
    jsObj.put("newHostId",hostId);
    jsObj.put("reportedAddress",((InetSocketAddress)socket.socket().getRemoteSocketAddress()).getAddress().getHostAddress());
    JSONArray jsArray=new JSONArray();
    JSONObject hostObj=new JSONObject();
    hostObj.put("hostId",getHostId());
    hostObj.put("address",m_config.internalInterface.isEmpty() ? socket.socket().getLocalAddress().getHostAddress() : m_config.internalInterface);
    hostObj.put("port",m_config.internalPort);
    jsArray.put(hostObj);
    for (    Map.Entry<Integer,ForeignHost> entry : m_foreignHosts.entrySet()) {
      if (entry.getValue() == null)       continue;
      int hsId=entry.getKey();
      ForeignHost fh=entry.getValue();
      hostObj=new JSONObject();
      hostObj.put("hostId",hsId);
      hostObj.put("address",fh.m_listeningAddress.getAddress().getHostAddress());
      hostObj.put("port",fh.m_listeningAddress.getPort());
      jsArray.put(hostObj);
    }
    jsObj.put("hosts",jsArray);
  }
 else {
    jsObj.put("reason",decision.errMsg);
    jsObj.put("mayRetry",decision.mayRetry);
  }
  byte messageBytes[]=jsObj.toString(4).getBytes("UTF-8");
  ByteBuffer message=ByteBuffer.allocate(4 + messageBytes.length);
  message.putInt(messageBytes.length);
  message.put(messageBytes).flip();
  while (message.hasRemaining()) {
    socket.write(message);
  }
}
