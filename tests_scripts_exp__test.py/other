import sys
import os.path
import shutil
import fnmatch
import subprocess
import time
import filecmp
import socket
from optparse import OptionParser
from subprocess import call
from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement
sys.path.append('../../src/py_client')
try:
    from voltdbclient import *
except ImportError:
    sys.path.append('./src/py_client')
    from voltdbclient import *
from Query import VoltQueryClient
from XMLUtils import prettify
hostname = socket.gethostname()
pkgName = {'comm': 'LINUX-voltdb', 'voltkv': 'LINUX-voltdb-voltkv', 'voltcache': 'LINUX-voltdb-voltcache', 'pro': 'LINUX-voltdb-ent', }
tail = 'tar.gz'
sepLineD = '========================================================'
sepLineS = '--------------------------------------------'
root = 'http://volt0/kits/candidate/'
destDir = '/tmp/'
elem2Test = {'helloworld': 'run.sh', 'voltcache': 'run.sh', 'voltkv': 'run.sh', 'voter': 'run.sh', }
defaultHost = 'localhost'
defaultPort = 21212
'\n Voting Results\n --------------------------------------------------------------------------------\n\n A total of 8166781 votes were received...\n  - 7,816,923 Accepted\n   -    79,031 Rejected (Invalid Contestant)\n     -        12 Rejected (Maximum Vote Count Reached)\n     -         0 Failed (Transaction Error)\n\n    Contestant Name     Votes Received\n    Edwina Burnam            2,156,993\n    Jessie Eichman           1,652,654\n    Alana Bregman            1,189,909\n    Kelly Clauss             1,084,995\n    Jessie Alloway           1,060,892\n    Tabatha Gehling            939,604\n\n    The Winner is: Edwina Burnam\n'
if (__name__ == '__main__'):
    usage = 'Usage: %prog [options]'
    parser = OptionParser(usage='%prog [-r <release #>] [-p <comm|pro|voltkv|voltcache> <-s helloworld|voter|voltkv|voltcache>]', version='%prog 1.0')
    parser.add_option('-r', '--release', dest='release', help='VoltDB release no. If ommitted, it will find it from version.txt.')
    parser.add_option('-p', '--pkg', dest='pkg', help='VoltDB package type: Community, Pro, Voltkv or Voltcache. Defalut is Community.')
    parser.add_option('-s', '--suite', dest='suite', help='Test suite name, if not set, then take all suites')
    parser.set_defaults(pkg='comm')
    parser.set_defaults(suite='all')
    (options, args) = parser.parse_args()
    testname = os.path.basename(os.path.abspath(__file__)).replace('.py', '')
    workDir = (destDir + testname)
    suite = options.suite
    if ((suite not in elem2Test.keys()) and (suite != 'all')):
        print ("Warning: unknown suite name - '%s'" % suite)
        print "Info: So we're going to cover all test suites in this run"
    origDir = os.getcwd()
    releaseNum = options.release
    if (releaseNum == None):
        releaseNum = getReleaseNum()
    print '############################################'
    print ('Tested Version in this RUN: %s' % releaseNum)
    print '############################################'
    ret = installVoltDB(options.pkg, releaseNum)
    if (not ret['ok']):
        print ('Error!! %s' % ret['err'])
        exit(1)
    for k1 in ret:
        print ("key: '%s', Val: '%s'" % (k1, ret[k1]))
    print ("suite = '%s'" % suite)
    testSuiteList = setTestSuite(ret['workDir'], suite)
    for i in testSuiteList:
        print ("i = '%s', exec = '%s'" % (i, testSuiteList[i]))
    (tf, msg, keys) = startTest(testSuiteList)
    status = True
    reportXML = create_rpt(ret, tf, msg, keys)
    print ("===--->>>reportXML = '%s'" % reportXML)
    if (status == False):
        print '\nAt lease one test suite is Failed!!\n'
        exit(1)
    exit(0)
