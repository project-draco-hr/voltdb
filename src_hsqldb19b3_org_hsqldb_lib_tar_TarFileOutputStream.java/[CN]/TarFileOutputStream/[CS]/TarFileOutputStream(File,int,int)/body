{
  this.blocksPerRecord=blocksPerRecord;
  this.targetFile=targetFile;
  writeFile=new File(targetFile.getParentFile(),targetFile.getName() + "-partial");
  if (this.writeFile.exists()) {
    throw new IOException(RB.singleton.getString(RB.MOVE_WORK_FILE,writeFile.getAbsolutePath()));
  }
  if (targetFile.exists() && !targetFile.canWrite()) {
    throw new IOException(RB.singleton.getString(RB.CANT_OVERWRITE,targetFile.getAbsolutePath()));
  }
  File parentDir=targetFile.getAbsoluteFile().getParentFile();
  if (parentDir.exists() && parentDir.isDirectory()) {
    if (!parentDir.canWrite()) {
      throw new IOException(RB.singleton.getString(RB.CANT_WRITE_DIR,parentDir.getAbsolutePath()));
    }
  }
 else {
    throw new IOException(RB.singleton.getString(RB.NO_PARENT_DIR,parentDir.getAbsolutePath()));
  }
  writeBuffer=new byte[blocksPerRecord * 512];
switch (compressionType) {
case TarFileOutputStream.Compression.NO_COMPRESSION:
    writeStream=new FileOutputStream(writeFile);
  break;
case TarFileOutputStream.Compression.GZIP_COMPRESSION:
writeStream=new GZIPOutputStream(new FileOutputStream(writeFile),writeBuffer.length);
break;
default :
throw new IllegalArgumentException(RB.singleton.getString(RB.COMPRESSION_UNKNOWN,compressionType));
}
writeFile.setExecutable(false,true);
writeFile.setExecutable(false,false);
writeFile.setReadable(false,false);
writeFile.setReadable(true,true);
writeFile.setWritable(false,false);
writeFile.setWritable(true,true);
}
