{
  Map<Integer,Long> averagesForWindows=new TreeMap<Integer,Long>();
  for (  int seconds : new int[]{1,5,10,30}) {
    try {
      ClientResponse cr=app.client.callProcedure("Average",seconds);
      long average=cr.getResults()[0].asScalarLong();
      averagesForWindows.put(seconds,average);
    }
 catch (    IOException|ProcCallException e) {
      e.printStackTrace();
    }
  }
synchronized (app) {
    long now=System.currentTimeMillis();
    long time=Math.round((now - app.benchmarkStartTS) / 1000.0);
    System.out.printf("%02d:%02d:%02d Report:\n",time / 3600,(time / 60) % 60,time % 60);
    System.out.println("  Average values over time windows:");
    for (    Entry<Integer,Long> e : averagesForWindows.entrySet()) {
      System.out.printf("    Average for past %2ds: %d\n",e.getKey(),e.getValue());
    }
    app.inserter.printReport();
    System.out.println();
    System.out.flush();
  }
}
