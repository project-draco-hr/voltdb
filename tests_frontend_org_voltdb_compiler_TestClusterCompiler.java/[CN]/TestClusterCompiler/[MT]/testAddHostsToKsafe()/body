{
  final int hostCount=2;
  final int Kfactor=1;
  final int sitesperhost=6;
  final int partitionNum=(hostCount * sitesperhost) / (Kfactor + 1);
  Map<Integer,Integer> sphMap=generateSameSphMap(hostCount,sitesperhost);
  ClusterConfig config=new ClusterConfig(hostCount,sphMap,Kfactor);
  Map<Integer,String> topology=Maps.newHashMap();
  topology.put(0,"0");
  topology.put(1,"0");
  JSONObject topo=config.getTopology(topology);
  assertEquals(hostCount,topo.getInt("hostcount"));
  int size=topo.getJSONArray("host_id_to_sph").length();
  assertEquals(sphMap.size(),size);
  for (int ii=0; ii < size; ii++) {
    JSONObject sphObj=topo.getJSONArray("host_id_to_sph").getJSONObject(ii);
    int hostId=sphObj.getInt("host_id");
    int sph=sphObj.getInt("sites_per_host");
    assertTrue(sphMap.containsKey(hostId));
    assertTrue(sphMap.get(hostId) == sph);
  }
  assertEquals(Kfactor,topo.getInt("kfactor"));
  assertEquals(partitionNum,topo.getJSONArray("partitions").length());
  ClusterConfig.addHosts(2,topo);
  assertEquals(hostCount + 2,topo.getInt("hostcount"));
  assertEquals(Kfactor,topo.getInt("kfactor"));
}
