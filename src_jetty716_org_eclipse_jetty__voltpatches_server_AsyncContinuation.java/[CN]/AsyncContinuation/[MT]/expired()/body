{
  final List<ContinuationListener> listeners;
synchronized (this) {
switch (_state) {
case __ASYNCSTARTED:
case __ASYNCWAIT:
      listeners=_continuationListeners;
    break;
default :
  listeners=null;
return;
}
_expired=true;
}
if (listeners != null) {
for (int i=0; i < listeners.size(); i++) {
ContinuationListener listener=listeners.get(i);
try {
listener.onTimeout(this);
}
 catch (Exception e) {
Log.warn(e);
}
}
}
synchronized (this) {
switch (_state) {
case __ASYNCSTARTED:
case __ASYNCWAIT:
dispatch();
}
}
scheduleDispatch();
}
