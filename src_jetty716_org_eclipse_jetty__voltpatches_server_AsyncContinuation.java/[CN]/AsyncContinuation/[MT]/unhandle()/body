{
synchronized (this) {
    List<ContinuationListener> listeners=_continuationListeners;
switch (_state) {
case __REDISPATCHED:
case __DISPATCHED:
      _state=__UNCOMPLETED;
    return true;
case __IDLE:
  throw new IllegalStateException(this.getStatusString());
case __ASYNCSTARTED:
_initial=false;
_state=__ASYNCWAIT;
scheduleTimeout();
if (_state == __ASYNCWAIT) return true;
 else if (_state == __COMPLETING) {
_state=__UNCOMPLETED;
return true;
}
_initial=false;
_state=__REDISPATCHED;
return false;
case __REDISPATCHING:
_initial=false;
_state=__REDISPATCHED;
return false;
case __COMPLETING:
_initial=false;
_state=__UNCOMPLETED;
return true;
default :
throw new IllegalStateException(this.getStatusString());
}
}
}
