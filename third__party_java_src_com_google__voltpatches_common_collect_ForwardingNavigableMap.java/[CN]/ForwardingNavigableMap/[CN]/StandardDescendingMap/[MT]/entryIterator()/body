{
  return new Iterator<Entry<K,V>>(){
    private Entry<K,V> toRemove=null;
    private Entry<K,V> nextOrNull=forward().lastEntry();
    @Override public boolean hasNext(){
      return nextOrNull != null;
    }
    @Override public java.util.Map.Entry<K,V> next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      try {
        return nextOrNull;
      }
  finally {
        toRemove=nextOrNull;
        nextOrNull=forward().lowerEntry(nextOrNull.getKey());
      }
    }
    @Override public void remove(){
      checkRemove(toRemove != null);
      forward().remove(toRemove.getKey());
      toRemove=null;
    }
  }
;
}
