{
  String s=ev.getActionCommand();
  if (s == null) {
    if (ev.getSource() instanceof MenuItem) {
      MenuItem i;
      s=((MenuItem)ev.getSource()).getLabel();
    }
  }
  if (s == null) {
  }
 else   if (s.equals("Execute")) {
    execute();
  }
 else   if (s.equals("Clear")) {
    clear();
  }
 else   if (s.equals("Exit")) {
    windowClosing(null);
  }
 else   if (s.equals("Transfer")) {
    Transfer.work(null);
  }
 else   if (s.equals("Dump")) {
    Transfer.work(new String[]{"-d"});
  }
 else   if (s.equals("Restore")) {
    Transfer.work(new String[]{"-r"});
    refreshTree();
  }
 else   if (s.equals("Logging on")) {
    JavaSystem.setLogToSystem(true);
  }
 else   if (s.equals("Logging off")) {
    JavaSystem.setLogToSystem(false);
  }
 else   if (s.equals("Help")) {
    showHelp(new String[]{"",HELP_TEXT});
  }
 else   if (s.equals("About")) {
    showHelp(new String[]{"",ABOUT_TEXT});
  }
 else   if (s.equals("Refresh Tree")) {
    refreshTree();
  }
 else   if (s.startsWith("#")) {
    int i=Integer.parseInt(s.substring(1));
    txtCommand.setText(sRecent[i]);
  }
 else   if (s.equals("Connect...")) {
    connect(ConnectionDialog.createConnection(fMain,"Connect"));
    refreshTree();
  }
 else   if (s.equals("Results in Grid")) {
    iResult=0;
    pResult.removeAll();
    pResult.add("Center",gResult);
    pResult.doLayout();
  }
 else   if (s.equals("Open Script...")) {
    FileDialog f=new FileDialog(fMain,"Open Script",FileDialog.LOAD);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String file=f.getFile();
    if (file != null) {
      StringBuffer buf=new StringBuffer();
      ifHuge=DatabaseManagerCommon.readFile(f.getDirectory() + file);
      if (4096 <= ifHuge.length()) {
        buf.append("This huge file cannot be edited.\n Please execute or clear\n");
        txtCommand.setText(buf.toString());
      }
 else {
        txtCommand.setText(ifHuge);
      }
    }
  }
 else   if (s.equals("Save Script...")) {
    FileDialog f=new FileDialog(fMain,"Save Script",FileDialog.SAVE);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String file=f.getFile();
    if (file != null) {
      DatabaseManagerCommon.writeFile(f.getDirectory() + file,txtCommand.getText());
    }
  }
 else   if (s.equals("Save Result csv...")) {
    FileDialog f=new FileDialog(fMain,"Save Result CSV",FileDialog.SAVE);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String dir=f.getDirectory();
    String file=f.getFile();
    if (dir != null) {
      file=dir + "/" + file;
    }
    if (file != null) {
      showResultInText();
      saveAsCsv(file);
    }
  }
 else   if (s.equals("Save Result...")) {
    FileDialog f=new FileDialog(fMain,"Save Result",FileDialog.SAVE);
    if (defDirectory != null) {
      f.setDirectory(defDirectory);
    }
    f.show();
    String file=f.getFile();
    if (file != null) {
      showResultInText();
      DatabaseManagerCommon.writeFile(f.getDirectory() + file,txtResult.getText());
    }
  }
 else   if (s.equals("Results in Text")) {
    iResult=1;
    pResult.removeAll();
    pResult.add("Center",txtResult);
    pResult.doLayout();
    showResultInText();
  }
 else   if (s.equals("AutoCommit on")) {
    try {
      cConn.setAutoCommit(true);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("AutoCommit off")) {
    try {
      cConn.setAutoCommit(false);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Enlarge Tree")) {
    Dimension d=tTree.getMinimumSize();
    d.width+=20;
    tTree.setMinimumSize(d);
    fMain.pack();
  }
 else   if (s.equals("Shrink Tree")) {
    Dimension d=tTree.getMinimumSize();
    d.width-=20;
    if (d.width >= 0) {
      tTree.setMinimumSize(d);
    }
    fMain.pack();
  }
 else   if (s.equals("Enlarge Command")) {
    txtCommand.setRows(txtCommand.getRows() + 1);
    fMain.pack();
  }
 else   if (s.equals("Shrink Command")) {
    int i=txtCommand.getRows() - 1;
    txtCommand.setRows(i < 1 ? 1 : i);
    fMain.pack();
  }
 else   if (s.equals("Commit")) {
    try {
      cConn.commit();
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Insert test data")) {
    insertTestData();
  }
 else   if (s.equals("Rollback")) {
    try {
      cConn.rollback();
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Disable MaxRows")) {
    try {
      sStatement.setMaxRows(0);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("Set MaxRows to 100")) {
    try {
      sStatement.setMaxRows(100);
    }
 catch (    SQLException e) {
    }
  }
 else   if (s.equals("SELECT")) {
    showHelp(DatabaseManagerCommon.selectHelp);
  }
 else   if (s.equals("INSERT")) {
    showHelp(DatabaseManagerCommon.insertHelp);
  }
 else   if (s.equals("UPDATE")) {
    showHelp(DatabaseManagerCommon.updateHelp);
  }
 else   if (s.equals("DELETE")) {
    showHelp(DatabaseManagerCommon.deleteHelp);
  }
 else   if (s.equals("CREATE TABLE")) {
    showHelp(DatabaseManagerCommon.createTableHelp);
  }
 else   if (s.equals("DROP TABLE")) {
    showHelp(DatabaseManagerCommon.dropTableHelp);
  }
 else   if (s.equals("CREATE INDEX")) {
    showHelp(DatabaseManagerCommon.createIndexHelp);
  }
 else   if (s.equals("DROP INDEX")) {
    showHelp(DatabaseManagerCommon.dropIndexHelp);
  }
 else   if (s.equals("CHECKPOINT")) {
    showHelp(DatabaseManagerCommon.checkpointHelp);
  }
 else   if (s.equals("SCRIPT")) {
    showHelp(DatabaseManagerCommon.scriptHelp);
  }
 else   if (s.equals("SHUTDOWN")) {
    showHelp(DatabaseManagerCommon.shutdownHelp);
  }
 else   if (s.equals("SET")) {
    showHelp(DatabaseManagerCommon.setHelp);
  }
 else   if (s.equals("Test Script")) {
    showHelp(DatabaseManagerCommon.testHelp);
  }
}
