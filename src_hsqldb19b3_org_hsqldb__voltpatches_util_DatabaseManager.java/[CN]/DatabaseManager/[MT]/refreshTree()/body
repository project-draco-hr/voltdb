{
  boolean wasAutoCommit=false;
  tTree.removeAll();
  try {
    wasAutoCommit=cConn.getAutoCommit();
    cConn.setAutoCommit(false);
    int color_table=Color.yellow.getRGB();
    int color_column=Color.orange.getRGB();
    int color_index=Color.red.getRGB();
    tTree.addRow("",dMeta.getURL(),"-",0);
    String[] usertables={"TABLE","GLOBAL TEMPORARY","VIEW"};
    Vector schemas=new Vector();
    Vector tables=new Vector();
    Vector remarks=new Vector();
    ResultSet result=dMeta.getTables(null,null,null,usertables);
    try {
      while (result.next()) {
        schemas.addElement(result.getString(2));
        tables.addElement(result.getString(3));
        remarks.addElement(result.getString(5));
      }
    }
  finally {
      result.close();
    }
    for (int i=0; i < tables.size(); i++) {
      String name=(String)tables.elementAt(i);
      String schema=(String)schemas.elementAt(i);
      String key="tab-" + name + "-";
      tTree.addRow(key,name,"+",color_table);
      String remark=(String)remarks.elementAt(i);
      if ((schema != null) && !schema.trim().equals("")) {
        tTree.addRow(key + "s","schema: " + schema);
      }
      if ((remark != null) && !remark.trim().equals("")) {
        tTree.addRow(key + "r"," " + remark);
      }
      ResultSet col=dMeta.getColumns(null,schema,name,null);
      try {
        while (col.next()) {
          String c=col.getString(4);
          String k1=key + "col-" + c+ "-";
          tTree.addRow(k1,c,"+",color_column);
          String type=col.getString(6);
          tTree.addRow(k1 + "t","Type: " + type);
          boolean nullable=col.getInt(11) != DatabaseMetaData.columnNoNulls;
          tTree.addRow(k1 + "n","Nullable: " + nullable);
        }
      }
  finally {
        col.close();
      }
      tTree.addRow(key + "ind","Indices","+",0);
      ResultSet ind=dMeta.getIndexInfo(null,schema,name,false,false);
      String oldiname=null;
      try {
        while (ind.next()) {
          boolean nonunique=ind.getBoolean(4);
          String iname=ind.getString(6);
          String k2=key + "ind-" + iname+ "-";
          if ((oldiname == null || !oldiname.equals(iname))) {
            tTree.addRow(k2,iname,"+",color_index);
            tTree.addRow(k2 + "u","Unique: " + !nonunique);
            oldiname=iname;
          }
          String c=ind.getString(9);
          tTree.addRow(k2 + "c-" + c+ "-",c);
        }
      }
  finally {
        ind.close();
      }
    }
    tTree.addRow("p","Properties","+",0);
    tTree.addRow("pu","User: " + dMeta.getUserName());
    tTree.addRow("pr","ReadOnly: " + cConn.isReadOnly());
    tTree.addRow("pa","AutoCommit: " + cConn.getAutoCommit());
    tTree.addRow("pd","Driver: " + dMeta.getDriverName());
    tTree.addRow("pp","Product: " + dMeta.getDatabaseProductName());
    tTree.addRow("pv","Version: " + dMeta.getDatabaseProductVersion());
  }
 catch (  SQLException e) {
    tTree.addRow("","Error getting metadata:","-",0);
    tTree.addRow("-",e.getMessage());
    tTree.addRow("-",e.getSQLState());
  }
 finally {
    try {
      cConn.setAutoCommit(wasAutoCommit);
    }
 catch (    SQLException e) {
    }
  }
  tTree.update();
}
