{
  try {
    pathToCatalog=Configuration.getPathToCatalogForTest("vbl.jar");
    pathToDeployment=Configuration.getPathToCatalogForTest("vbl.xml");
    builder=new VoltProjectBuilder();
    builder.addLiteralSchema(my_schema);
    builder.addPartitionInfo("BLAH","clm_integer");
    boolean success=builder.compile(pathToCatalog,2,1,0);
    assertTrue(success);
    MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
    config=new VoltDB.Configuration();
    config.m_pathToCatalog=pathToCatalog;
    config.m_pathToDeployment=pathToDeployment;
    localServer=new ServerThread(config);
    client1=null;
    localServer.start();
    localServer.waitForInitialization();
    client1=ClientFactory.createClient();
    client1.createConnection("localhost");
    prepare();
    TestFailureCallback testCallback=new TestFailureCallback();
    VoltBulkLoader bulkLoader=client1.getNewBulkLoader("BLAH",my_batchSize,testCallback);
    VoltTable modCount;
    modCount=client1.callProcedure("@AdHoc","SELECT * FROM BLAH;").getResults()[0];
    System.out.println("data inserted to table BLAH:\n" + modCount);
    VoltTable valTable;
    valTable=client1.callProcedure("@ValidatePartitioning",null,null).getResults()[0];
    System.out.println("Validate for BLAH:\n" + valTable);
    while (valTable.advanceRow()) {
      long miscnt=valTable.getLong("MISPARTITIONED_ROWS");
      assertEquals(miscnt,0);
    }
    int rowCnt=1;
    try {
      for (      Object[] nextRow : my_data) {
        Integer rowId=new Integer(rowCnt);
        bulkLoader.insertRow(rowId,nextRow);
        rowCnt++;
        if (rnd.nextInt() % 30 == 0)         bulkLoader.flush();
      }
    }
 catch (    Exception e) {
      System.err.print(e.getMessage());
    }
    System.out.println(String.format("Attempted inserting %d rows",--rowCnt));
    if (rnd.nextBoolean()) {
      bulkLoader.drain();
      assert(bulkLoader.getOutstandingRowCount() == 0);
      assert(bulkLoader.getCompletedRowCount() == rowCnt);
    }
    bulkLoader.close();
    assert(bulkLoader.getCompletedRowCount() == rowCnt);
    assert(testCallback.failureRowListMatches(expectedFailList));
  }
  finally {
    if (client1 != null)     client1.close();
    client1=null;
    if (localServer != null) {
      localServer.shutdown();
      localServer.join();
    }
    localServer=null;
    System.gc();
  }
}
