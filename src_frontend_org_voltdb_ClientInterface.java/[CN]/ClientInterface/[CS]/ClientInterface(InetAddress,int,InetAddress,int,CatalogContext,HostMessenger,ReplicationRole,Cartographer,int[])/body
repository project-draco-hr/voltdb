{
  m_catalogContext.set(context);
  m_cartographer=cartographer;
  m_allPartitions=allPartitions;
  m_acceptor=new ClientAcceptor(clientIntf,clientPort,messenger.getNetwork(),false);
  m_adminAcceptor=null;
  m_adminAcceptor=new ClientAcceptor(adminIntf,adminPort,messenger.getNetwork(),true);
  m_replicationpolicy=new ReplicaInvocationAcceptancePolicy(replicationRole == ReplicationRole.REPLICA);
  m_mailbox=new LocalMailbox(messenger,messenger.getHSIdForLocalSite(HostMessenger.CLIENT_INTERFACE_SITE_ID)){
    LinkedBlockingQueue<VoltMessage> m_d=new LinkedBlockingQueue<VoltMessage>();
    @Override public void deliver(    final VoltMessage message){
      if (message instanceof InitiateResponseMessage) {
        final CatalogContext catalogContext=m_catalogContext.get();
        InitiateResponseMessage response=(InitiateResponseMessage)message;
        StoredProcedureInvocation invocation=response.getInvocation();
        Iv2Trace.logFinishTransaction(response,m_mailbox.getHSId());
        ClientInterfaceHandleManager cihm=m_cihm.get(response.getClientConnectionId());
        Procedure procedure=null;
        if (invocation != null) {
          procedure=catalogContext.procedures.get(invocation.getProcName());
          if (procedure == null) {
            procedure=SystemProcedureCatalog.listing.get(invocation.getProcName()).asCatalogProcedure();
          }
        }
        if (cihm != null) {
          cihm.connection.writeStream().fastEnqueue(new ClientResponseWork(response,cihm,procedure));
        }
      }
 else       if (message instanceof BinaryPayloadMessage) {
        handlePartitionFailOver((BinaryPayloadMessage)message);
      }
 else {
        m_d.offer(message);
      }
    }
    @Override public VoltMessage recv(){
      return m_d.poll();
    }
  }
;
  messenger.createMailbox(m_mailbox.getHSId(),m_mailbox);
  m_plannerSiteId=messenger.getHSIdForLocalSite(HostMessenger.ASYNC_COMPILER_SITE_ID);
  m_zk=messenger.getZK();
  m_siteId=m_mailbox.getHSId();
  m_isConfiguredForHSQL=(VoltDB.instance().getBackendTargetType() == BackendTarget.HSQLDB_BACKEND);
}
