{
  m_catalogContext.set(context);
  m_initiator=initiator;
  m_allPartitions=allPartitions;
  m_acceptor=new ClientAcceptor(port,messenger.getNetwork(),false);
  m_adminAcceptor=null;
  m_adminAcceptor=new ClientAcceptor(adminPort,messenger.getNetwork(),true);
  registerPolicies(replicationRole);
  m_mailbox=new LocalMailbox(VoltDB.instance().getHostMessenger()){
    LinkedBlockingDeque<VoltMessage> m_d=new LinkedBlockingDeque<VoltMessage>();
    @Override public void deliver(    final VoltMessage message){
      if (VoltDB.instance().isIV2Enabled()) {
        if (message instanceof InitiateResponseMessage) {
          InitiateResponseMessage response=(InitiateResponseMessage)message;
          Pair<Long,Connection> clientData=m_sequenceToConnection.remove(response.getClientInterfaceHandle());
          response.getClientResponseData().setClientHandle(clientData.getFirst());
          ByteBuffer results=ByteBuffer.allocate(response.getClientResponseData().getSerializedSize() + 4);
          results.putInt(results.capacity() - 4);
          response.getClientResponseData().flattenToBuffer(results);
          results.flip();
          clientData.getSecond().writeStream().enqueue(results);
        }
 else {
          m_d.offer(message);
        }
      }
 else {
        m_d.offer(message);
      }
    }
    @Override public VoltMessage recv(){
      return m_d.poll();
    }
  }
;
  messenger.createMailbox(null,m_mailbox);
  m_plannerSiteId=messenger.getHSIdForLocalSite(HostMessenger.ASYNC_COMPILER_SITE_ID);
  registerMailbox(messenger.getZK());
  m_siteId=m_mailbox.getHSId();
}
