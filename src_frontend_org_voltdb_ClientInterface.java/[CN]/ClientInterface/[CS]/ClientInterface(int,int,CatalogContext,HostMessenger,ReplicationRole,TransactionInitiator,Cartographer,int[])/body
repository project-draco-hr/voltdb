{
  m_catalogContext.set(context);
  m_initiator=initiator;
  m_cartographer=cartographer;
  m_allPartitions=allPartitions;
  m_acceptor=new ClientAcceptor(port,messenger.getNetwork(),false);
  m_adminAcceptor=null;
  m_adminAcceptor=new ClientAcceptor(adminPort,messenger.getNetwork(),true);
  registerPolicies(replicationRole);
  m_mailbox=new LocalMailbox(VoltDB.instance().getHostMessenger()){
    LinkedBlockingQueue<VoltMessage> m_d=new LinkedBlockingQueue<VoltMessage>();
    @Override public void deliver(    final VoltMessage message){
      if (VoltDB.instance().isIV2Enabled()) {
        if (message instanceof InitiateResponseMessage) {
          final InitiateResponseMessage response=(InitiateResponseMessage)message;
          Iv2Trace.logFinishTransaction(response,m_mailbox.getHSId());
          final ClientInterfaceHandleManager cihm=m_cihm.get(response.getClientConnectionId());
          if (cihm != null) {
            cihm.connection.writeStream().enqueue(new DeferredSerialization(){
              @Override public ByteBuffer[] serialize() throws IOException {
                ClientInterfaceHandleManager.Iv2InFlight clientData=cihm.findHandle(response.getClientInterfaceHandle());
                response.getClientResponseData().setClientHandle(clientData.m_clientHandle);
                final long now=System.currentTimeMillis();
                final int delta=(int)(now - clientData.m_creationTime);
                response.getClientResponseData().setClusterRoundtrip(delta);
                ByteBuffer results=ByteBuffer.allocate(response.getClientResponseData().getSerializedSize() + 4);
                results.putInt(results.capacity() - 4);
                response.getClientResponseData().flattenToBuffer(results);
                return new ByteBuffer[]{results};
              }
              @Override public void cancel(){
              }
            }
);
          }
        }
 else {
          m_d.offer(message);
        }
      }
 else {
        m_d.offer(message);
      }
    }
    @Override public VoltMessage recv(){
      return m_d.poll();
    }
  }
;
  messenger.createMailbox(null,m_mailbox);
  m_plannerSiteId=messenger.getHSIdForLocalSite(HostMessenger.ASYNC_COMPILER_SITE_ID);
  registerMailbox(messenger.getZK());
  m_siteId=m_mailbox.getHSId();
  m_iv2Masters=new MapCache(messenger.getZK(),VoltZK.iv2masters);
  m_iv2Masters.start(true);
  m_isConfiguredForHSQL=(VoltDB.instance().getBackendTargetType() == BackendTarget.HSQLDB_BACKEND);
}
