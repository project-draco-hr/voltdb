{
  try {
    do {
      final SocketChannel socket;
      try {
        socket=m_serverSocket.accept();
      }
 catch (      IOException ioe) {
        if (ioe.getMessage() != null && ioe.getMessage().contains("Too many open files")) {
          networkLog.warn("Rejected accepting new connection due to too many open files");
          continue;
        }
 else {
          throw ioe;
        }
      }
      if (m_numConnections.get() == MAX_CONNECTIONS.get()) {
        networkLog.warn("Rejected connection from " + socket.socket().getRemoteSocketAddress() + " because the connection limit of "+ MAX_CONNECTIONS+ " has been reached");
        try {
          final ByteBuffer b=ByteBuffer.allocate(1);
          b.put(MAX_CONNECTIONS_LIMIT_ERROR);
          b.flip();
          socket.configureBlocking(true);
          for (int ii=0; ii < 4 && b.hasRemaining(); ii++) {
            socket.write(b);
          }
          socket.close();
        }
 catch (        IOException e) {
        }
        continue;
      }
      m_numConnections.incrementAndGet();
      final AuthRunnable authRunnable=new AuthRunnable(socket);
      while (true) {
        try {
          m_executor.execute(authRunnable);
          break;
        }
 catch (        RejectedExecutionException e) {
          Thread.sleep(1);
        }
      }
    }
 while (m_running);
  }
 catch (  Exception e) {
    hostLog.error("Exception in ClientAcceptor. The acceptor has died",e);
  }
 finally {
    try {
      m_serverSocket.close();
    }
 catch (    IOException e) {
      hostLog.fatal(null,e);
    }
synchronized (this) {
      Thread.interrupted();
      m_executor.shutdownNow();
      try {
        m_executor.awaitTermination(5,TimeUnit.MINUTES);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
}
