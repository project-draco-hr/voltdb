{
  ByteBuffer responseBuffer=ByteBuffer.allocate(6);
  byte version=(byte)0;
  responseBuffer.putInt(2);
  responseBuffer.put(version);
  socket.configureBlocking(false);
  socket.socket().setTcpNoDelay(true);
  final ByteBuffer lengthBuffer=ByteBuffer.allocate(4);
  for (int ii=0; ii < 4; ii++) {
    socket.read(lengthBuffer);
    if (!lengthBuffer.hasRemaining()) {
      break;
    }
    try {
      Thread.sleep(400);
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
  }
  if (lengthBuffer.hasRemaining()) {
    responseBuffer.put((byte)2).flip();
    socket.write(responseBuffer);
    socket.close();
    authLog.warn("Failure to authenticate connection(" + socket.socket().getRemoteSocketAddress() + "): wire protocol violation (timeout reading message length).");
    return null;
  }
  lengthBuffer.flip();
  final int messageLength=lengthBuffer.getInt();
  if (messageLength < 0) {
    responseBuffer.put((byte)3).flip();
    socket.write(responseBuffer);
    socket.close();
    authLog.warn("Failure to authenticate connection(" + socket.socket().getRemoteSocketAddress() + "): wire protocol violation (message length "+ messageLength+ " is negative).");
    return null;
  }
  if (messageLength > ((1024 * 1024) * 2)) {
    responseBuffer.put((byte)3).flip();
    socket.write(responseBuffer);
    socket.close();
    authLog.warn("Failure to authenticate connection(" + socket.socket().getRemoteSocketAddress() + "): wire protocol violation (message length "+ messageLength+ " is too large).");
    return null;
  }
  final ByteBuffer message=ByteBuffer.allocate(messageLength);
  for (int ii=0; ii < 4; ii++) {
    socket.read(message);
    if (!message.hasRemaining()) {
      break;
    }
    try {
      Thread.sleep(20);
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
  }
  if (lengthBuffer.hasRemaining()) {
    responseBuffer.put((byte)2).flip();
    socket.write(responseBuffer);
    socket.close();
    authLog.warn("Failure to authenticate connection(" + socket.socket().getRemoteSocketAddress() + "): wire protocol violation (timeout reading authentication strings).");
    return null;
  }
  message.flip().position(1);
  FastDeserializer fds=new FastDeserializer(message);
  final String service=fds.readString();
  final String username=fds.readString();
  final byte password[]=new byte[20];
  message.get(password);
  final AuthSystem.AuthUser user=m_catalogContext.get().authSystem.authenticate(username,password);
  if (user == null) {
    responseBuffer.put((byte)-1).flip();
    socket.write(responseBuffer);
    socket.close();
    authLog.warn("Failure to authenticate connection(" + socket.socket().getRemoteSocketAddress() + "): user "+ username+ " failed authentication.");
    return null;
  }
  InputHandler handler=null;
  if (service.equalsIgnoreCase("database")) {
    handler=new ClientInputHandler(user,socket.socket().getInetAddress().getHostName());
  }
 else {
    String connectorClassName=ELTManager.instance().getConnectorForService(service);
    if (!user.authorizeConnector(connectorClassName)) {
      responseBuffer.put((byte)-1).flip();
      socket.write(responseBuffer);
      socket.close();
      authLog.warn("Failure to authroize user " + username + " for service "+ service+ ".");
      return null;
    }
    handler=ELTManager.instance().createInputHandler(service);
  }
  if (handler != null) {
    byte buildString[]=VoltDB.instance().getBuildString().getBytes("UTF-8");
    responseBuffer=ByteBuffer.allocate(34 + buildString.length);
    responseBuffer.putInt(30 + buildString.length);
    responseBuffer.put((byte)0);
    responseBuffer.put((byte)0);
    responseBuffer.putInt(VoltDB.instance().getHostMessenger().getHostId());
    responseBuffer.putLong(handler.connectionId());
    responseBuffer.putLong((Long)VoltDB.instance().getInstanceId()[0]);
    responseBuffer.putInt((Integer)VoltDB.instance().getInstanceId()[1]);
    responseBuffer.putInt(buildString.length);
    responseBuffer.put(buildString).flip();
    socket.write(responseBuffer);
  }
 else {
    responseBuffer.put((byte)-1).flip();
    socket.write(responseBuffer);
    socket.close();
    authLog.warn("Failure to authenticate connection(" + socket.socket().getRemoteSocketAddress() + "): user "+ username+ " failed authentication.");
    return null;
  }
  return handler;
}
