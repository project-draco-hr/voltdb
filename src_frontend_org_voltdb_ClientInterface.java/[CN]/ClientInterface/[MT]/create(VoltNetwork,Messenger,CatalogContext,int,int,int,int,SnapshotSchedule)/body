{
  int myHostId=-1;
  for (  Site site : context.sites) {
    int aSiteId=Integer.parseInt(site.getTypeName());
    int hostId=Integer.parseInt(site.getHost().getTypeName());
    if (aSiteId == siteId)     myHostId=hostId;
  }
  int[] allPartitions=new int[context.numberOfPartitions];
  int index=0;
  for (  Partition partition : context.cluster.getPartitions())   allPartitions[index++]=Integer.parseInt(partition.getTypeName());
  assert(index == context.numberOfPartitions);
  SimpleDtxnInitiator.DummyQueue queue=new SimpleDtxnInitiator.DummyQueue();
  Mailbox mqueue=messenger.createMailbox(siteId,VoltDB.DTXN_MAILBOX_ID,queue);
  final OnDTXNBackPressure onBackPressure=new OnDTXNBackPressure();
  final OffDTXNBackPressure offBackPressure=new OffDTXNBackPressure();
  SimpleDtxnInitiator initiator=new SimpleDtxnInitiator(mqueue,myHostId,siteId,initiatorId,onBackPressure,offBackPressure);
  queue.setInitiator(initiator);
  AsyncCompilerWorkThread plannerThread=new AsyncCompilerWorkThread(context,siteId);
  plannerThread.start();
  final ClientInterface ci=new ClientInterface(port,context,network,siteId,initiator,plannerThread,allPartitions,schedule);
  onBackPressure.m_ci=ci;
  offBackPressure.m_ci=ci;
  return ci;
}
