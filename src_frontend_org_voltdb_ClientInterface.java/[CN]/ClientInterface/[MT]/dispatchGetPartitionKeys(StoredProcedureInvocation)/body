{
  Object params[]=task.getParams().toArray();
  String typeString="the type of partition key to return and can be one of " + "INTEGER(5), STRING(9), or VARBINARY(25)";
  if (params.length != 1) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"GetPartitionKeys must have one integer parameter specifying " + typeString,task.clientHandle);
  }
  if (!(params[0] instanceof Number)) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"GetPartitionKeys must have one integer parameter specifying " + typeString + " provided type was "+ params[0].getClass().getName(),task.clientHandle);
  }
  VoltType voltType=null;
  byte typeValue=((Number)params[0]).byteValue();
  try {
    voltType=VoltType.get(typeValue);
  }
 catch (  AssertionError e) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"Type " + typeValue + " is not a supported type of partition key, "+ typeString,task.clientHandle);
  }
  VoltTable partitionKeys=TheHashinator.getPartitionKeys(voltType);
  if (partitionKeys == null) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"Type " + typeValue + " is not a supported type of partition key, "+ typeString,task.clientHandle);
  }
  return new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{partitionKeys},null,task.clientHandle);
}
