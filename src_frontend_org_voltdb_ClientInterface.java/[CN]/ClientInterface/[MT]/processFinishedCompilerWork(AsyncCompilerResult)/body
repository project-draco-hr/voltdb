{
  final Connection c=(Connection)result.clientData;
  final ListenableFutureTask<?> ft=ListenableFutureTask.create(new Runnable(){
    @Override public void run(){
      if (result.errorMsg == null) {
        if (result instanceof AdHocPlannedStmtBatch) {
          final AdHocPlannedStmtBatch plannedStmtBatch=(AdHocPlannedStmtBatch)result;
          if ((plannedStmtBatch.getPlannedStatementCount() > 0) && (plannedStmtBatch.getPlannedStatement(0).core.catalogVersion != m_catalogContext.get().catalogVersion)) {
            LocalObjectMessage work=new LocalObjectMessage(new AdHocPlannerWork(m_siteId,false,plannedStmtBatch.clientHandle,plannedStmtBatch.connectionId,plannedStmtBatch.hostname,plannedStmtBatch.adminConnection,plannedStmtBatch.clientData,plannedStmtBatch.sqlBatchText,plannedStmtBatch.getSQLStatements(),plannedStmtBatch.partitionParam,null,false,true,plannedStmtBatch.type,plannedStmtBatch.originalTxnId,plannedStmtBatch.originalUniqueId,m_adhocCompletionHandler));
            m_mailbox.send(m_plannerSiteId,work);
          }
 else           if (plannedStmtBatch.isExplainWork()) {
            processExplainPlannedStmtBatch(plannedStmtBatch);
          }
 else {
            createAdHocTransaction(plannedStmtBatch);
          }
        }
 else         if (result instanceof CatalogChangeResult) {
          final CatalogChangeResult changeResult=(CatalogChangeResult)result;
          if (changeResult.encodedDiffCommands.trim().length() == 0) {
            ClientResponseImpl shortcutResponse=new ClientResponseImpl(ClientResponseImpl.SUCCESS,new VoltTable[0],"Catalog update with no changes was skipped.",result.clientHandle);
            ByteBuffer buf=ByteBuffer.allocate(shortcutResponse.getSerializedSize() + 4);
            buf.putInt(buf.capacity() - 4);
            shortcutResponse.flattenToBuffer(buf);
            buf.flip();
            c.writeStream().enqueue(buf);
          }
 else {
            StoredProcedureInvocation task=new StoredProcedureInvocation();
            task.procName="@UpdateApplicationCatalog";
            task.setParams(changeResult.encodedDiffCommands,changeResult.catalogBytes,changeResult.expectedCatalogVersion,changeResult.deploymentString,changeResult.deploymentCRC,changeResult.requiresSnapshotIsolation ? 1 : 0);
            task.clientHandle=changeResult.clientHandle;
            task.type=changeResult.invocationType;
            task.originalTxnId=changeResult.originalTxnId;
            task.originalUniqueId=changeResult.originalUniqueId;
            FastSerializer fs=new FastSerializer();
            try {
              fs.writeObject(task);
              ByteBuffer source=fs.getBuffer();
              ByteBuffer copy=ByteBuffer.allocate(source.remaining());
              copy.put(source);
              copy.flip();
              FastDeserializer fds=new FastDeserializer(copy);
              task=new StoredProcedureInvocation();
              task.readExternal(fds);
            }
 catch (            Exception e) {
              hostLog.fatal(e);
              VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
            }
            createTransaction(changeResult.connectionId,changeResult.hostname,changeResult.adminConnection,task,false,false,false,m_allPartitions,m_allPartitions.length,changeResult.clientData,task.getSerializedSize(),EstTime.currentTimeMillis(),false);
          }
        }
 else {
          throw new RuntimeException("Should not be able to get here (ClientInterface.checkForFinishedCompilerWork())");
        }
      }
 else {
        ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],result.errorMsg,result.clientHandle);
        ByteBuffer buf=ByteBuffer.allocate(errorResponse.getSerializedSize() + 4);
        buf.putInt(buf.capacity() - 4);
        errorResponse.flattenToBuffer(buf);
        buf.flip();
        c.writeStream().enqueue(buf);
      }
    }
  }
,null);
  if (c != null) {
    c.queueTask(ft);
  }
  ft.addListener(new Runnable(){
    @Override public void run(){
      try {
        ft.get();
      }
 catch (      Exception e) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        e.printStackTrace(pw);
        pw.flush();
        ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],result.errorMsg,result.clientHandle);
        ByteBuffer buf=ByteBuffer.allocate(errorResponse.getSerializedSize() + 4);
        buf.putInt(buf.capacity() - 4);
        errorResponse.flattenToBuffer(buf);
        buf.flip();
        c.writeStream().enqueue(buf);
      }
    }
  }
,MoreExecutors.sameThreadExecutor());
  return ft;
}
