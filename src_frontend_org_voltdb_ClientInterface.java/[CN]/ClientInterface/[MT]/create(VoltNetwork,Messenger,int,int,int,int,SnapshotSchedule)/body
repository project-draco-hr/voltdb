{
  int myHostId=-1;
  for (  Site site : VoltDB.instance().getSites()) {
    int aSiteId=Integer.parseInt(site.getTypeName());
    int hostId=Integer.parseInt(site.getHost().getTypeName());
    if (aSiteId == siteId)     myHostId=hostId;
  }
  int partitionCount=VoltDB.instance().getCluster().getPartitions().size();
  int[] allPartitions=new int[partitionCount];
  int index=0;
  for (  Partition partition : VoltDB.instance().getCluster().getPartitions())   allPartitions[index++]=Integer.parseInt(partition.getTypeName());
  assert(index == partitionCount);
  SimpleDtxnInitiator.DummyBlockingQueue queue=new SimpleDtxnInitiator.DummyBlockingQueue();
  Mailbox mqueue=messenger.createMailbox(siteId,VoltDB.DTXN_MAILBOX_ID,queue);
  final OnDTXNBackPressure onBackPressure=new OnDTXNBackPressure();
  final OffDTXNBackPressure offBackPressure=new OffDTXNBackPressure();
  SimpleDtxnInitiator initiator=new SimpleDtxnInitiator(mqueue,myHostId,siteId,initiatorId,onBackPressure,offBackPressure);
  queue.setInitiator(initiator);
  AsyncCompilerWorkThread plannerThread=new AsyncCompilerWorkThread(VoltDB.instance().getCatalog(),siteId);
  plannerThread.start();
  final ClientInterface ci=new ClientInterface(port,network,siteId,initiator,plannerThread,allPartitions,schedule);
  onBackPressure.m_ci=ci;
  offBackPressure.m_ci=ci;
  return ci;
}
