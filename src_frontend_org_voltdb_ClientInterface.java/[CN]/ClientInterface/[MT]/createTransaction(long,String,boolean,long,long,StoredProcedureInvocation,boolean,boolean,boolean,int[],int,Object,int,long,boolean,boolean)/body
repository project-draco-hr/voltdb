{
  if (m_isIV2Enabled) {
    final ClientInterfaceHandleManager cihm=m_cihm.get(connectionId);
    Long initiatorHSId=null;
    boolean isShortCircuitRead=false;
    if (invocation.getType() == ProcedureInvocationType.REPLICATED) {
      int partitionId;
      if (isSinglePartition) {
        partitionId=partitions[0];
      }
 else {
        partitionId=MpInitiator.MP_INIT_PID;
      }
      Long lastTxnId=m_partitionTxnIds.get(partitionId);
      if (lastTxnId != null) {
        if (!(invocation.getProcName().equalsIgnoreCase("@LoadSinglepartitionTable") || invocation.getProcName().equalsIgnoreCase("@LoadMultipartitionTable")) && invocation.getOriginalTxnId() <= lastTxnId) {
          hostLog.debug("Dropping duplicate replicated transaction, txnid: " + invocation.getOriginalTxnId() + ", last seen: "+ lastTxnId);
          return false;
        }
      }
      m_partitionTxnIds.put(partitionId,invocation.getOriginalTxnId());
    }
    if (isSinglePartition && !isEveryPartition) {
      if (isReadOnly) {
        initiatorHSId=m_localReplicas.get(partitions[0]);
      }
      if (initiatorHSId != null) {
        isShortCircuitRead=true;
      }
 else {
        initiatorHSId=m_iv2Masters.get(partitions[0]);
      }
    }
 else {
      initiatorHSId=m_cartographer.getHSIdForMultiPartitionInitiator();
    }
    if (initiatorHSId == null) {
      hostLog.error("Failed to find master initiator for partition: " + Integer.toString(partitions[0]) + ". Transaction not initiated.");
      return false;
    }
    long handle=cihm.getHandle(isSinglePartition,partitions[0],invocation.getClientHandle(),messageSize,now,invocation.getProcName(),initiatorHSId,isReadOnly,isShortCircuitRead);
    Iv2InitiateTaskMessage workRequest=new Iv2InitiateTaskMessage(m_siteId,initiatorHSId,Iv2InitiateTaskMessage.UNUSED_TRUNC_HANDLE,txnId,timestamp,isReadOnly,isSinglePartition,invocation,handle,connectionId,isForReplay);
    Iv2Trace.logCreateTransaction(workRequest);
    m_mailbox.send(initiatorHSId,workRequest);
    return true;
  }
 else {
    return m_initiator.createTransaction(connectionId,connectionHostname,adminConnection,invocation,isReadOnly,isSinglePartition,isEveryPartition,partitions,numPartitions,clientData,messageSize,now,allowMismatchedResults);
  }
}
