{
  StoredProcedureInvocation task=new StoredProcedureInvocation();
  boolean isSinglePartition=(plannedStmtBatch.partitionParam != null) && !m_isConfiguredForHSQL;
  int partitions[]=null;
  if (isSinglePartition) {
    if (plannedStmtBatch.isReadOnly()) {
      task.procName="@AdHoc_RO_SP";
    }
 else {
      task.procName="@AdHoc_RW_SP";
    }
    assert(plannedStmtBatch.isSinglePartitionCompatible());
    partitions=new int[]{TheHashinator.hashToPartition(plannedStmtBatch.partitionParam)};
  }
 else {
    if (plannedStmtBatch.isReadOnly()) {
      task.procName="@AdHoc_RO_MP";
    }
 else {
      task.procName="@AdHoc_RW_MP";
    }
    partitions=m_allPartitions;
  }
  List<String> aggregatorFragmentList=plannedStmtBatch.getAggregatorFragments();
  String[] aggregatorFragments=aggregatorFragmentList.toArray(new String[aggregatorFragmentList.size()]);
  List<String> collectorFragmentList=plannedStmtBatch.getCollectorFragments();
  String[] collectorFragments=collectorFragmentList.toArray(new String[collectorFragmentList.size()]);
  List<String> sqlStatementList=plannedStmtBatch.getSQLStatements();
  String[] sqlStatements=sqlStatementList.toArray(new String[sqlStatementList.size()]);
  List<Integer> replicatedTableDMLFlagList=plannedStmtBatch.getReplicatedTableDMLFlags();
  int[] replicatedTableDMLFlags=ArrayUtils.toPrimitive(replicatedTableDMLFlagList.toArray(new Integer[replicatedTableDMLFlagList.size()]));
  task.setParams(aggregatorFragments,collectorFragments,sqlStatements,replicatedTableDMLFlags);
  task.clientHandle=plannedStmtBatch.clientHandle;
  FastSerializer fs=new FastSerializer();
  try {
    fs.writeObject(task);
    ByteBuffer source=fs.getBuffer();
    ByteBuffer copy=ByteBuffer.allocate(source.remaining());
    copy.put(source);
    copy.flip();
    FastDeserializer fds=new FastDeserializer(copy);
    task=new StoredProcedureInvocation();
    task.readExternal(fds);
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  boolean isNonDeterministic=false;
  for (  AdHocPlannedStatement stmt : plannedStmtBatch.plannedStatements) {
    if (stmt.isNonDeterministic) {
      isNonDeterministic=true;
      break;
    }
  }
  createTransaction(plannedStmtBatch.connectionId,plannedStmtBatch.hostname,plannedStmtBatch.adminConnection,task,plannedStmtBatch.isReadOnly(),isSinglePartition,false,isNonDeterministic,partitions,partitions.length,plannedStmtBatch.clientData,0,EstTime.currentTimeMillis());
  plannedStmtBatch.clientData=null;
  for (int index=0; index < plannedStmtBatch.getPlannedStatementCount(); index++) {
    m_adhocCache.put(plannedStmtBatch.getPlannedStatement(index));
  }
}
