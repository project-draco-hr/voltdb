{
  ByteBuffer buf=null;
  try {
    buf=plannedStmtBatch.flattenPlanArrayToBuffer();
  }
 catch (  IOException e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  assert(buf.hasArray());
  StoredProcedureInvocation task=new StoredProcedureInvocation();
  task.type=plannedStmtBatch.work.type;
  task.originalTxnId=plannedStmtBatch.work.originalTxnId;
  task.originalUniqueId=plannedStmtBatch.work.originalUniqueId;
  boolean isSinglePartition=plannedStmtBatch.isSinglePartitionCompatible() || m_isConfiguredForHSQL;
  int partition=-1;
  if (isSinglePartition) {
    if (plannedStmtBatch.isReadOnly()) {
      task.procName="@AdHoc_RO_SP";
    }
 else {
      task.procName="@AdHoc_RW_SP";
    }
    int type=VoltType.NULL.getValue();
    Object partitionParam=plannedStmtBatch.partitionParam();
    byte[] param=null;
    if (partitionParam != null) {
      type=VoltType.typeFromClass(partitionParam.getClass()).getValue();
      param=TheHashinator.valueToBytes(partitionParam);
    }
    partition=TheHashinator.getPartitionForParameter(type,partitionParam);
    task.setParams(param,(byte)type,buf.array());
  }
 else {
    if (plannedStmtBatch.isReadOnly()) {
      task.procName="@AdHoc_RO_MP";
    }
 else {
      task.procName="@AdHoc_RW_MP";
    }
    task.setParams(buf.array());
  }
  task.clientHandle=plannedStmtBatch.clientHandle;
  try {
    task=MiscUtils.roundTripForCL(task);
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  createTransaction(plannedStmtBatch.connectionId,task,plannedStmtBatch.isReadOnly(),isSinglePartition,false,partition,task.getSerializedSize(),EstTime.currentTimeMillis());
}
