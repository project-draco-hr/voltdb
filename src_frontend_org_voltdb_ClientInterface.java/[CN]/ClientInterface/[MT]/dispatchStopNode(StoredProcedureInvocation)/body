{
  VoltTable table=new VoltTable(new ColumnInfo("RESULT",VoltType.STRING));
  Object params[]=task.getParams().toArray();
  if (params.length != 1 || params[0] == null) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"@StopNode must provide hostId",task.clientHandle);
  }
  if (!(params[0] instanceof Integer)) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"@StopNode must have one Integer parameter specified. Provided type was " + params[0].getClass().getName(),task.clientHandle);
  }
  int ihid=(Integer)params[0];
  List<Integer> liveHids=VoltDB.instance().getHostMessenger().getLiveHostIds();
  if (!liveHids.contains(ihid)) {
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"Invalid Host Id: " + ihid,task.clientHandle);
  }
  if (!m_cartographer.isClusterSafeIfIDie(ihid)) {
    hostLog.info("Its unsafe to shutdown node with hostId: " + ihid + " @StopNode will not proceed because doing so would cause the cluster to crash.");
    return new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"@StopNode will not proceed because doing so would cause the cluster to crash.",task.clientHandle);
  }
  int hid=VoltDB.instance().getHostMessenger().getHostId();
  if (hid == ihid) {
    VoltDB.instance().halt();
  }
 else {
    VoltDB.instance().getHostMessenger().sendPoisonPill("@StopNode",ihid);
  }
  return new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[0],"SUCCESS",task.clientHandle);
}
