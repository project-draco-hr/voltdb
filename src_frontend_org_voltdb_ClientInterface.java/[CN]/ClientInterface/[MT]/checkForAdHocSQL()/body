{
  if (m_plannerThread == null)   return;
  AsyncCompilerResult result=null;
  while ((result=m_plannerThread.getPlannedStmt()) != null) {
    if (result.errorMsg == null) {
      if (result instanceof AdHocPlannedStmt) {
        AdHocPlannedStmt plannedStmt=(AdHocPlannedStmt)result;
        StoredProcedureInvocation task=new StoredProcedureInvocation();
        task.procName="@AdHoc";
        task.params=new ParameterSet();
        task.params.m_params=new Object[]{plannedStmt.aggregatorFragment,plannedStmt.collectorFragment,plannedStmt.sql,plannedStmt.isReplicatedTableDML ? 1 : 0};
        task.clientHandle=plannedStmt.clientHandle;
        m_initiator.createTransaction(plannedStmt.connectionId,task,false,false,m_allPartitions,m_allPartitions.length,plannedStmt.clientData);
      }
 else {
        throw new RuntimeException("Should not be able to get here until catalog changes are supported.");
      }
    }
 else {
      ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],result.errorMsg,result.clientHandle);
      final Connection c=(Connection)result.clientData;
      c.writeStream().enqueue(errorResponse);
    }
  }
}
