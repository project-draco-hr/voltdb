{
  final long now=System.currentTimeMillis();
  final FastDeserializer fds=new FastDeserializer(buf);
  final StoredProcedureInvocation task=fds.readObject(StoredProcedureInvocation.class);
  ClientResponseImpl error=null;
  VoltDBInterface instance=VoltDB.instance();
  if (instance.getMode() == OperationMode.PAUSED && !handler.isAdmin()) {
    return new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,new VoltTable[0],"Server is currently unavailable; try again later",task.clientHandle);
  }
  if (task.procName.equals("@Ping")) {
    return new ClientResponseImpl(ClientResponseImpl.SUCCESS,new VoltTable[0],"",task.clientHandle);
  }
  final CatalogContext catalogContext=m_catalogContext.get();
  AuthSystem.AuthUser user=catalogContext.authSystem.getUser(handler.m_username);
  Procedure catProc=catalogContext.procedures.get(task.procName);
  if (catProc == null) {
    Config sysProc=SystemProcedureCatalog.listing.get(task.procName);
    if (sysProc != null) {
      catProc=sysProc.asCatalogProcedure();
    }
  }
  if (catProc == null) {
    if (task.procName.equals("@AdHoc")) {
      catProc=SystemProcedureCatalog.listing.get("@AdHoc_RW_MP").asCatalogProcedure();
      assert(catProc != null);
    }
 else     if (task.procName.equals("@Explain")) {
      return dispatchAdHoc(task,handler,ccxn,true);
    }
 else     if (task.procName.equals("@ExplainProc")) {
      return dispatchExplainProcedure(task,handler,ccxn);
    }
 else     if (task.procName.equals("@SendSentinel")) {
      dispatchSendSentinel(handler.connectionId(),now,buf.capacity(),task);
      return null;
    }
  }
  if (user == null) {
    authLog.info("User " + handler.m_username + " has been removed from the system via a catalog update");
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"User " + handler.m_username + " has been removed from the system via a catalog update",task.clientHandle);
  }
  if (catProc == null) {
    String errorMessage="Procedure " + task.procName + " was not found";
    authLog.l7dlog(Level.WARN,LogKeys.auth_ClientInterface_ProcedureNotFound.name(),new Object[]{task.procName},null);
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],errorMessage,task.clientHandle);
  }
  error=checkPolicies(null,user,task,catProc);
  if (error != null) {
    return error;
  }
  error=checkPolicies(task.procName,user,task,catProc);
  if (error != null) {
    return error;
  }
  if (catProc.getSystemproc()) {
    if (task.procName.equals("@AdHoc")) {
      return dispatchAdHoc(task,handler,ccxn,false);
    }
 else     if (task.procName.equals("@UpdateApplicationCatalog")) {
      return dispatchUpdateApplicationCatalog(task,handler,ccxn);
    }
 else     if (task.procName.equals("@LoadMultipartitionTable")) {
      if (VoltDB.instance().isIV2Enabled() && task.getType() == ProcedureInvocationType.REPLICATED) {
        sendSentinelsToAllPartitions(task.getOriginalTxnId());
      }
    }
 else     if (task.procName.equals("@LoadSinglepartitionTable")) {
      return dispatchLoadSinglepartitionTable(buf,catProc,task,handler,ccxn);
    }
 else     if (task.procName.equals("@SnapshotSave")) {
      m_snapshotDaemon.requestUserSnapshot(task,ccxn);
      return null;
    }
 else     if (task.procName.equals("@Statistics")) {
      return dispatchStatistics(catProc,buf,task,handler,ccxn);
    }
 else     if (task.procName.equals("@Promote")) {
      return dispatchPromote(catProc,buf,task,handler,ccxn);
    }
 else     if (task.procName.equals("@SnapshotStatus")) {
      Object[] params=new Object[1];
      params[0]="SNAPSHOTSTATUS";
      task.setParams(params);
      return dispatchStatistics(SystemProcedureCatalog.listing.get("@Statistics").asCatalogProcedure(),buf,task,handler,ccxn);
    }
    if (task.procName.equals("@Pause") || task.procName.equals("@Resume")) {
      if (!handler.isAdmin()) {
        return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"" + task.procName + " is not available to this client",task.clientHandle);
      }
    }
 else     if (task.procName.equals("@SystemInformation")) {
      ParameterSet params=task.getParams();
      if (params.toArray().length == 0) {
        task.setParams("OVERVIEW");
      }
    }
  }
  int[] involvedPartitions;
  if (catProc.getSinglepartition() == false) {
    involvedPartitions=m_allPartitions;
  }
 else {
    try {
      involvedPartitions=new int[]{getPartitionForProcedure(catProc.getPartitionparameter(),catProc.getPartitioncolumn().getType(),task)};
    }
 catch (    RuntimeException e) {
      String errorMessage="Error sending procedure " + task.procName + " to the correct partition. Make sure parameter values are correct.";
      authLog.l7dlog(Level.WARN,LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),new Object[]{task.procName},null);
      return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],errorMessage,task.clientHandle);
    }
catch (    Exception e) {
      authLog.l7dlog(Level.WARN,LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),new Object[]{task.procName},null);
      return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],e.getMessage(),task.clientHandle);
    }
  }
  boolean success=createTransaction(handler.connectionId(),handler.m_hostname,handler.isAdmin(),task,catProc.getReadonly(),catProc.getSinglepartition(),catProc.getEverysite(),involvedPartitions,ccxn,buf.capacity(),now);
  if (!success) {
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],ClientResponseImpl.IGNORED_TRANSACTION,task.clientHandle);
  }
  return null;
}
