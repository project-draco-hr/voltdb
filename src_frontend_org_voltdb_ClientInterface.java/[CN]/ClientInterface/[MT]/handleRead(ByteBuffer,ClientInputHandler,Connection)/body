{
  final long now=System.currentTimeMillis();
  final FastDeserializer fds=new FastDeserializer(buf);
  final StoredProcedureInvocation task=fds.readObject(StoredProcedureInvocation.class);
  VoltDBInterface instance=VoltDB.instance();
  if (instance.getMode() != OperationMode.RUNNING && !handler.isAdmin()) {
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,new VoltTable[0],"Server is currently unavailable; try again later",task.clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
  final CatalogContext catalogContext=m_catalogContext.get();
  AuthSystem.AuthUser user=catalogContext.authSystem.getUser(handler.m_username);
  final Procedure catProc=catalogContext.procedures.get(task.procName);
  Config sysProc=SystemProcedureCatalog.listing.get(task.procName);
  if (user == null) {
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"User " + handler.m_username + " has been removed from the system via a catalog update",task.clientHandle);
    authLog.info("User " + handler.m_username + " has been removed from the system via a catalog update");
    c.writeStream().enqueue(errorResponse);
    return;
  }
  if (catProc == null && sysProc == null) {
    String errorMessage="Procedure " + task.procName + " was not found";
    authLog.l7dlog(Level.WARN,LogKeys.auth_ClientInterface_ProcedureNotFound.name(),new Object[]{task.procName},null);
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],errorMessage,task.clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
  if (sysProc == null) {
    if (!user.hasPermission(catProc)) {
      authLog.l7dlog(Level.INFO,LogKeys.auth_ClientInterface_LackingPermissionForProcedure.name(),new String[]{user.m_name,task.procName},null);
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"User does not have permission to invoke " + task.procName,task.clientHandle);
      c.writeStream().enqueue(errorResponse);
      return;
    }
  }
 else {
    if (task.procName.startsWith("@AdHoc")) {
      if (!user.hasAdhocPermission()) {
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"User does not have @AdHoc permission",task.clientHandle);
        authLog.l7dlog(Level.INFO,LogKeys.auth_ClientInterface_LackingPermissionForAdhoc.name(),new String[]{user.m_name},null);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      ParameterSet params=null;
      try {
        params=task.getParams();
      }
 catch (      RuntimeException e) {
        Writer result=new StringWriter();
        PrintWriter pw=new PrintWriter(result);
        e.printStackTrace(pw);
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Exception while deserializing procedure params\n" + result.toString(),task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      if (params.m_params.length > 2) {
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Adhoc system procedure requires exactly one or two parameters, " + "the SQL statement to execute with an optional partitioning value.",task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      if ((params.m_params[0] instanceof String) == false) {
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Adhoc system procedure requires sql in the String type only.",task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      String sql=(String)params.m_params[0];
      Object partitionParam=null;
      if (params.m_params.length > 1) {
        if (params.m_params[1] == null) {
          partitionParam=new Long(0);
        }
 else {
          partitionParam=params.m_params[1];
        }
      }
      m_asyncCompilerWorkThread.planSQL(sql,partitionParam,task.clientHandle,handler.connectionId(),handler.m_hostname,handler.isAdmin(),c);
      return;
    }
 else     if (!user.hasSystemProcPermission()) {
      authLog.l7dlog(Level.INFO,LogKeys.auth_ClientInterface_LackingPermissionForSysproc.name(),new String[]{user.m_name,task.procName},null);
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"User " + user.m_name + " does not have sysproc permission",task.clientHandle);
      c.writeStream().enqueue(errorResponse);
      return;
    }
    if (task.procName.equals("@UpdateApplicationCatalog")) {
      ParameterSet params=null;
      try {
        params=task.getParams();
      }
 catch (      RuntimeException e) {
        Writer result=new StringWriter();
        PrintWriter pw=new PrintWriter(result);
        e.printStackTrace(pw);
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Exception while deserializing procedure params\n" + result.toString(),task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      if (params.m_params.length != 2 || params.m_params[0] == null || params.m_params[1] == null) {
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"UpdateApplicationCatalog system procedure requires exactly " + "two parameters, the catalog bytes and the deployment file " + "string.",task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      byte[] catalogBytes=null;
      boolean isHex=false;
      if (params.m_params[0] instanceof String) {
        isHex=Encoder.isHexEncodedString((String)params.m_params[0]);
      }
      if (isHex) {
        catalogBytes=Encoder.hexDecode((String)params.m_params[0]);
      }
 else       if (params.m_params[0] instanceof byte[]) {
        catalogBytes=(byte[])params.m_params[0];
      }
 else {
        final ClientResponseImpl errorResp=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"UpdateApplicationCatalog system procedure takes the " + "catalog bytes as a byte array. The received parameter " + "is of type " + params.m_params[0].getClass() + ".",task.clientHandle);
        c.writeStream().enqueue(errorResp);
        return;
      }
      String deploymentString=(String)params.m_params[1];
      m_asyncCompilerWorkThread.prepareCatalogUpdate(catalogBytes,deploymentString,task.clientHandle,handler.connectionId(),handler.m_hostname,handler.isAdmin(),handler.sequenceId(),c);
      return;
    }
 else     if (task.procName.equals("@Pause") || task.procName.equals("@Resume")) {
      if (!handler.isAdmin()) {
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"" + task.procName + " is not available to this client",task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
    }
 else     if (task.procName.equals("@SystemInformation")) {
      ParameterSet params=null;
      try {
        params=task.getParams();
      }
 catch (      RuntimeException e) {
        Writer result=new StringWriter();
        PrintWriter pw=new PrintWriter(result);
        e.printStackTrace(pw);
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Exception while deserializing procedure params\n" + result.toString(),task.clientHandle);
        c.writeStream().enqueue(errorResponse);
        return;
      }
      if (params.m_params.length == 0) {
        params.m_params=new Object[1];
        params.m_params[0]=new String("OVERVIEW");
      }
      task.unserializedParams=null;
    }
  }
  if (catProc != null) {
    int[] involvedPartitions=null;
    if (catProc.getSinglepartition() == false) {
      involvedPartitions=m_allPartitions;
    }
 else {
      try {
        involvedPartitions=new int[]{getPartitionForProcedure(catProc.getPartitionparameter(),task)};
      }
 catch (      RuntimeException e) {
        String errorMessage="Error sending procedure " + task.procName + " to the correct partition. Make sure parameter values are correct.";
        authLog.l7dlog(Level.WARN,LogKeys.host_ClientInterface_unableToRouteSinglePartitionInvocation.name(),new Object[]{task.procName},null);
        final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],errorMessage,task.clientHandle);
        c.writeStream().enqueue(errorResponse);
      }
    }
    if (involvedPartitions != null) {
      m_initiator.createTransaction(handler.connectionId(),handler.m_hostname,handler.isAdmin(),task,catProc.getReadonly(),catProc.getSinglepartition(),catProc.getEverysite(),involvedPartitions,involvedPartitions.length,c,buf.capacity(),now);
    }
  }
 else   if (sysProc != null) {
    int[] involvedPartitions=m_allPartitions;
    m_initiator.createTransaction(handler.connectionId(),handler.m_hostname,handler.isAdmin(),task,sysProc.getReadonly(),sysProc.getSinglepartition(),sysProc.getEverysite(),involvedPartitions,involvedPartitions.length,c,buf.capacity(),now);
  }
}
