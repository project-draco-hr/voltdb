{
  final long nowNanos=System.nanoTime();
  StoredProcedureInvocation task=new StoredProcedureInvocation();
  try {
    task.initFromBuffer(buf);
  }
 catch (  Exception ex) {
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],ex.getMessage(),ccxn.connectionId());
  }
  ClientResponseImpl error=null;
  VoltDBInterface instance=VoltDB.instance();
  if (instance.getMode() == OperationMode.PAUSED && !handler.isAdmin()) {
    return new ClientResponseImpl(ClientResponseImpl.SERVER_UNAVAILABLE,new VoltTable[0],"Server is currently unavailable; try again later",task.clientHandle);
  }
  final CatalogContext catalogContext=m_catalogContext.get();
  final AuthSystem.AuthUser user=catalogContext.authSystem.getUser(handler.m_username);
  Procedure catProc=catalogContext.procedures.get(task.procName);
  if (catProc == null) {
    String proc=task.procName;
    if (task.procName.equals("@AdHoc") || task.procName.equals("@AdHocSpForTest")) {
      proc="@AdHoc_RW_MP";
    }
 else     if (task.procName.equals("@UpdateClasses")) {
      proc="@UpdateApplicationCatalog";
    }
    Config sysProc=SystemProcedureCatalog.listing.get(proc);
    if (sysProc != null) {
      catProc=sysProc.asCatalogProcedure();
    }
  }
  if (user == null) {
    authLog.info("User " + handler.m_username + " has been removed from the system via a catalog update");
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"User " + handler.m_username + " has been removed from the system via a catalog update",task.clientHandle);
  }
  if (catProc == null) {
    String errorMessage="Procedure " + task.procName + " was not found";
    RateLimitedLogger.tryLogForMessage(System.currentTimeMillis(),60,TimeUnit.SECONDS,authLog,Level.WARN,errorMessage + ". This message is rate limited to once every 60 seconds.");
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],errorMessage,task.clientHandle);
  }
  final ProcedurePartitionInfo ppi=(ProcedurePartitionInfo)catProc.getAttachment();
  if ((error=m_permissionValidator.shouldAccept(task.procName,user,task,catProc)) != null) {
    return error;
  }
  if ((error=m_invocationValidator.shouldAccept(task.procName,user,task,catProc)) != null) {
    return error;
  }
  if (catProc.getSystemproc()) {
    if (task.procName.equals("@Ping")) {
      return new ClientResponseImpl(ClientResponseImpl.SUCCESS,new VoltTable[0],"",task.clientHandle);
    }
 else     if (task.procName.equals("@GetPartitionKeys")) {
      return dispatchGetPartitionKeys(task);
    }
 else     if (task.procName.equals("@Subscribe")) {
      return dispatchSubscribe(handler,task);
    }
 else     if (task.procName.equals("@Statistics")) {
      return dispatchStatistics(OpsSelector.STATISTICS,task,ccxn);
    }
 else     if (task.procName.equals("@SystemCatalog")) {
      return dispatchStatistics(OpsSelector.SYSTEMCATALOG,task,ccxn);
    }
 else     if (task.procName.equals("@SystemInformation")) {
      return dispatchStatistics(OpsSelector.SYSTEMINFORMATION,task,ccxn);
    }
 else     if (task.procName.equals("@GC")) {
      return dispatchSystemGC(handler,task,user);
    }
 else     if (task.procName.equals("@StopNode")) {
      return dispatchStopNode(task);
    }
 else     if (task.procName.equals("@Explain")) {
      return dispatchAdHoc(task,handler,ccxn,true,user);
    }
 else     if (task.procName.equals("@ExplainProc")) {
      return dispatchExplainProcedure(task,handler,ccxn);
    }
 else     if (task.procName.equals("@SendSentinel")) {
      dispatchSendSentinel(handler.connectionId(),nowNanos,buf.capacity(),task);
      return null;
    }
 else     if (task.procName.equals("@AdHoc")) {
      return dispatchAdHoc(task,handler,ccxn,false,user);
    }
 else     if (task.procName.equals("@AdHocSpForTest")) {
      return dispatchAdHocSpForTest(task,handler,ccxn,false,user);
    }
 else     if (task.procName.equals("@LoadMultipartitionTable")) {
      if (task.getType() == ProcedureInvocationType.REPLICATED) {
        sendSentinelsToAllPartitions(task.getOriginalTxnId());
      }
    }
 else     if (task.procName.equals("@LoadSinglepartitionTable")) {
      return dispatchLoadSinglepartitionTable(buf,catProc,task,handler,ccxn);
    }
    if (!MiscUtils.isPro()) {
      SystemProcedureCatalog.Config sysProcConfig=SystemProcedureCatalog.listing.get(task.procName);
      if ((sysProcConfig != null) && (sysProcConfig.commercial)) {
        return new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],task.procName + " is available in the Enterprise Edition of VoltDB only.",task.clientHandle);
      }
    }
    if (task.procName.equals("@UpdateApplicationCatalog")) {
      return dispatchUpdateApplicationCatalog(task,handler,ccxn,user);
    }
 else     if (task.procName.equals("@UpdateClasses")) {
      return dispatchUpdateApplicationCatalog(task,handler,ccxn,user);
    }
 else     if (task.procName.equals("@SnapshotSave")) {
      m_snapshotDaemon.requestUserSnapshot(task,ccxn);
      return null;
    }
 else     if (task.procName.equals("@Promote")) {
      return dispatchPromote(catProc,buf,task,handler,ccxn);
    }
 else     if (task.procName.equals("@SnapshotStatus")) {
      Object[] params=new Object[1];
      params[0]="SNAPSHOTSTATUS";
      task.setParams(params);
      return dispatchStatistics(OpsSelector.STATISTICS,task,ccxn);
    }
 else     if (task.procName.equals("@SnapshotScan")) {
      return dispatchStatistics(OpsSelector.SNAPSHOTSCAN,task,ccxn);
    }
 else     if (task.procName.equals("@SnapshotDelete")) {
      return dispatchStatistics(OpsSelector.SNAPSHOTDELETE,task,ccxn);
    }
 else     if (task.procName.equals("@SnapshotRestore")) {
      ClientResponseImpl retval=SnapshotUtil.transformRestoreParamsToJSON(task);
      if (retval != null)       return retval;
    }
    if (task.procName.equals("@Pause") || task.procName.equals("@Resume")) {
      if (!handler.isAdmin()) {
        return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],"" + task.procName + " is not available to this client",task.clientHandle);
      }
    }
  }
  int partition=-1;
  if (catProc.getSinglepartition()) {
    try {
      partition=getPartitionForProcedure(ppi.index,ppi.type,task);
    }
 catch (    Exception e) {
      return getMispartitionedErrorResponse(task,catProc,e);
    }
  }
  boolean success=createTransaction(handler.connectionId(),task,catProc.getReadonly(),catProc.getSinglepartition(),catProc.getEverysite(),partition,buf.capacity(),nowNanos);
  if (!success) {
    return new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],ClientResponseImpl.IGNORED_TRANSACTION,task.clientHandle);
  }
  return null;
}
