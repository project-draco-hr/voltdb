{
  StoredProcedureInvocation task=new StoredProcedureInvocation();
  boolean isSinglePartition=(plannedStmt.partitionParam != null) && !m_isConfiguredForHSQL;
  int partitions[]=null;
  if (isSinglePartition) {
    task.procName="@AdHocSP";
    assert(plannedStmt.isReplicatedTableDML == false);
    assert(plannedStmt.collectorFragment == null);
    partitions=new int[]{TheHashinator.hashToPartition(plannedStmt.partitionParam)};
    task.setParams(plannedStmt.aggregatorFragment,null,plannedStmt.sql,0);
  }
 else {
    task.procName="@AdHoc";
    partitions=m_allPartitions;
    task.setParams(plannedStmt.aggregatorFragment,plannedStmt.collectorFragment,plannedStmt.sql,plannedStmt.isReplicatedTableDML ? 1 : 0);
  }
  task.clientHandle=plannedStmt.clientHandle;
  FastSerializer fs=new FastSerializer();
  try {
    fs.writeObject(task);
    ByteBuffer source=fs.getBuffer();
    ByteBuffer copy=ByteBuffer.allocate(source.remaining());
    copy.put(source);
    copy.flip();
    FastDeserializer fds=new FastDeserializer(copy);
    task=new StoredProcedureInvocation();
    task.readExternal(fds);
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  createTransaction(plannedStmt.connectionId,plannedStmt.hostname,plannedStmt.adminConnection,task,false,isSinglePartition,false,partitions,partitions.length,plannedStmt.clientData,0,EstTime.currentTimeMillis());
  plannedStmt.clientData=null;
  m_adhocCache.put(plannedStmt);
}
