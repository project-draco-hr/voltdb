{
  VoltMessage message;
  while ((message=m_mailbox.recv()) != null) {
    if (!(message instanceof LocalObjectMessage)) {
      continue;
    }
    final LocalObjectMessage lom=(LocalObjectMessage)message;
    if (!(lom.payload instanceof AsyncCompilerResult)) {
      continue;
    }
    final AsyncCompilerResult result=(AsyncCompilerResult)lom.payload;
    if (result.errorMsg == null) {
      if (result instanceof AdHocPlannedStmt) {
        final AdHocPlannedStmt plannedStmt=(AdHocPlannedStmt)result;
        if (plannedStmt.catalogVersion != m_catalogContext.get().catalogVersion) {
          LocalObjectMessage work=new LocalObjectMessage(new AdHocPlannerWork(m_siteId,VoltDB.CLIENT_INTERFACE_MAILBOX_ID,false,plannedStmt.clientHandle,plannedStmt.connectionId,plannedStmt.hostname,plannedStmt.adminConnection,plannedStmt.clientData,plannedStmt.sql,plannedStmt.partitionParam));
          try {
            m_mailbox.send(VoltDB.instance().getAgreementSite().siteId(),VoltDB.ASYNC_COMPILER_MAILBOX_ID,work);
          }
 catch (          MessagingException ex) {
            final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Failed to process Ad Hoc request. No data was read or written.",plannedStmt.clientHandle);
            ((Connection)(plannedStmt.clientData)).writeStream().enqueue(errorResponse);
          }
        }
 else {
          StoredProcedureInvocation task=new StoredProcedureInvocation();
          boolean isSinglePartition=(plannedStmt.partitionParam != null);
          int partitions[]=null;
          if (isSinglePartition) {
            task.procName="@AdHocSP";
            partitions=new int[]{TheHashinator.hashToPartition(plannedStmt.partitionParam)};
          }
 else {
            task.procName="@AdHoc";
            partitions=m_allPartitions;
          }
          task.params=new FutureTask<ParameterSet>(new Callable<ParameterSet>(){
            @Override public ParameterSet call(){
              ParameterSet params=new ParameterSet();
              params.m_params=new Object[]{plannedStmt.aggregatorFragment,plannedStmt.collectorFragment,plannedStmt.sql,plannedStmt.isReplicatedTableDML ? 1 : 0};
              return params;
            }
          }
);
          task.clientHandle=plannedStmt.clientHandle;
          FastSerializer fs=new FastSerializer();
          try {
            fs.writeObject(task);
            ByteBuffer source=fs.getBuffer();
            ByteBuffer copy=ByteBuffer.allocate(source.remaining());
            copy.put(source);
            copy.flip();
            FastDeserializer fds=new FastDeserializer(copy);
            task=new StoredProcedureInvocation();
            task.readExternal(fds);
          }
 catch (          Exception e) {
            VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
          }
          createTransaction(plannedStmt.connectionId,plannedStmt.hostname,plannedStmt.adminConnection,task,false,isSinglePartition,false,partitions,partitions.length,plannedStmt.clientData,0,EstTime.currentTimeMillis());
        }
      }
 else       if (result instanceof CatalogChangeResult) {
        final CatalogChangeResult changeResult=(CatalogChangeResult)result;
        StoredProcedureInvocation task=new StoredProcedureInvocation();
        task.procName="@UpdateApplicationCatalog";
        task.params=new FutureTask<ParameterSet>(new Callable<ParameterSet>(){
          @Override public ParameterSet call(){
            ParameterSet params=new ParameterSet();
            params.m_params=new Object[]{changeResult.encodedDiffCommands,changeResult.catalogBytes,changeResult.expectedCatalogVersion,changeResult.deploymentString,changeResult.deploymentCRC};
            return params;
          }
        }
);
        task.clientHandle=changeResult.clientHandle;
        FastSerializer fs=new FastSerializer();
        try {
          fs.writeObject(task);
          ByteBuffer source=fs.getBuffer();
          ByteBuffer copy=ByteBuffer.allocate(source.remaining());
          copy.put(source);
          copy.flip();
          FastDeserializer fds=new FastDeserializer(copy);
          task=new StoredProcedureInvocation();
          task.readExternal(fds);
        }
 catch (        Exception e) {
          hostLog.fatal(e);
          VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
        }
        createTransaction(changeResult.connectionId,changeResult.hostname,changeResult.adminConnection,task,false,true,true,m_allPartitions,m_allPartitions.length,changeResult.clientData,0,EstTime.currentTimeMillis());
      }
 else {
        throw new RuntimeException("Should not be able to get here (ClientInterface.checkForFinishedCompilerWork())");
      }
    }
 else {
      ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],result.errorMsg,result.clientHandle);
      final Connection c=(Connection)result.clientData;
      c.writeStream().enqueue(errorResponse);
    }
  }
}
