{
  VoltMessage message;
  while ((message=m_mailbox.recv()) != null) {
    if (!(message instanceof LocalObjectMessage)) {
      continue;
    }
    final LocalObjectMessage lom=(LocalObjectMessage)message;
    if (!(lom.payload instanceof AsyncCompilerResult)) {
      continue;
    }
    final AsyncCompilerResult result=(AsyncCompilerResult)lom.payload;
    if (result.errorMsg == null) {
      if (result instanceof AdHocPlannedStmtBatch) {
        final AdHocPlannedStmtBatch plannedStmtBatch=(AdHocPlannedStmtBatch)result;
        if (plannedStmtBatch.catalogVersion != m_catalogContext.get().catalogVersion) {
          LocalObjectMessage work=new LocalObjectMessage(new AdHocPlannerWork(m_siteId,false,plannedStmtBatch.clientHandle,plannedStmtBatch.connectionId,plannedStmtBatch.hostname,plannedStmtBatch.adminConnection,plannedStmtBatch.clientData,plannedStmtBatch.sqlBatchText,plannedStmtBatch.getSQLStatements(),plannedStmtBatch.partitionParam,null,false,true));
          m_mailbox.send(Long.MIN_VALUE,work);
        }
 else {
          createAdHocTransaction(plannedStmtBatch);
        }
      }
 else       if (result instanceof CatalogChangeResult) {
        final CatalogChangeResult changeResult=(CatalogChangeResult)result;
        StoredProcedureInvocation task=new StoredProcedureInvocation();
        task.procName="@UpdateApplicationCatalog";
        task.setParams(changeResult.encodedDiffCommands,changeResult.catalogBytes,changeResult.expectedCatalogVersion,changeResult.deploymentString,changeResult.deploymentCRC);
        task.clientHandle=changeResult.clientHandle;
        FastSerializer fs=new FastSerializer();
        try {
          fs.writeObject(task);
          ByteBuffer source=fs.getBuffer();
          ByteBuffer copy=ByteBuffer.allocate(source.remaining());
          copy.put(source);
          copy.flip();
          FastDeserializer fds=new FastDeserializer(copy);
          task=new StoredProcedureInvocation();
          task.readExternal(fds);
        }
 catch (        Exception e) {
          hostLog.fatal(e);
          VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
        }
        createTransaction(changeResult.connectionId,changeResult.hostname,changeResult.adminConnection,task,false,true,true,false,m_allPartitions,m_allPartitions.length,changeResult.clientData,0,EstTime.currentTimeMillis());
      }
 else {
        throw new RuntimeException("Should not be able to get here (ClientInterface.checkForFinishedCompilerWork())");
      }
    }
 else {
      ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.UNEXPECTED_FAILURE,new VoltTable[0],result.errorMsg,result.clientHandle);
      final Connection c=(Connection)result.clientData;
      ByteBuffer buf=ByteBuffer.allocate(errorResponse.getSerializedSize() + 4);
      buf.putInt(buf.capacity() - 4);
      errorResponse.flattenToBuffer(buf);
      buf.flip();
      c.writeStream().enqueue(buf);
    }
  }
}
