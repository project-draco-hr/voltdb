{
  ParameterSet params=task.getParams();
  String sql=(String)params.toArray()[0];
  Object partitionParam=null;
  if (params.toArray().length > 1) {
    if (params.toArray()[1] == null) {
      partitionParam=new Long(0);
    }
 else {
      partitionParam=params.toArray()[1];
    }
  }
  List<AdHocPlannedStatement> statements=new ArrayList<AdHocPlannedStatement>();
  List<String> sqlStatements=MiscUtils.splitSQLStatements(sql);
  AdHocPlannedStmtBatch planBatch=new AdHocPlannedStmtBatch(sql,partitionParam,m_catalogContext.get().catalogVersion,task.clientHandle,handler.connectionId(),handler.m_hostname,handler.isAdmin(),ccxn);
  for (  String sqlStatement : sqlStatements) {
    AdHocPlannedStatement plannedStatement=m_adhocCache.get(sql,partitionParam != null);
    if (plannedStatement == null || plannedStatement.catalogVersion != m_catalogContext.get().catalogVersion) {
      break;
    }
    planBatch.addStatement(sqlStatement,plannedStatement.aggregatorFragment,plannedStatement.collectorFragment,plannedStatement.isReplicatedTableDML);
  }
  if (planBatch.plannedStatements.size() == sqlStatements.size()) {
    createAdHocTransaction(planBatch);
    return null;
  }
  LocalObjectMessage work=new LocalObjectMessage(new AdHocPlannerWork(m_siteId,false,task.clientHandle,handler.connectionId(),handler.m_hostname,handler.isAdmin(),ccxn,sql,sqlStatements,partitionParam));
  try {
    m_mailbox.send(m_plannerSiteId,work);
  }
 catch (  MessagingException ex) {
    return new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"Failed to process Ad Hoc request. No data was read or written.",task.clientHandle);
  }
  return null;
}
