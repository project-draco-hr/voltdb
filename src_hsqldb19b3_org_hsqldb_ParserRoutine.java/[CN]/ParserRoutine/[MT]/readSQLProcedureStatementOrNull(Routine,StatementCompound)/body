{
  Statement cs=null;
  HsqlName label=null;
  RangeVariable[] rangeVariables=context == null ? routine.getParameterRangeVariables() : context.getRangeVariables();
  if (isSimpleName() && !isReservedKey()) {
    label=readNewSchemaObjectNameNoCheck(SchemaObject.LABEL);
    readThis(Tokens.COLON);
  }
switch (token.tokenType) {
case Tokens.SELECT:
{
      cs=readSelectSingleRowStatement(rangeVariables);
      break;
    }
case Tokens.INSERT:
  cs=compileInsertStatement(rangeVariables);
break;
case Tokens.UPDATE:
cs=compileUpdateStatement(rangeVariables);
break;
case Tokens.DELETE:
case Tokens.TRUNCATE:
cs=compileDeleteStatement(rangeVariables);
break;
case Tokens.MERGE:
cs=compileMergeStatement(rangeVariables);
break;
case Tokens.SET:
cs=compileSetStatement(rangeVariables);
break;
case Tokens.CALL:
{
if (label != null) {
throw unexpectedToken();
}
cs=compileCallStatement(rangeVariables,true);
break;
}
case Tokens.RETURN:
{
if (label != null) {
throw unexpectedToken();
}
read();
cs=readReturnValue(routine,context);
break;
}
case Tokens.BEGIN:
{
cs=readCompoundStatement(routine,context,label);
break;
}
case Tokens.WHILE:
{
cs=readWhile(routine,context,label);
break;
}
case Tokens.REPEAT:
{
cs=readRepeat(routine,context,label);
break;
}
case Tokens.LOOP:
{
cs=readLoop(routine,context,label);
break;
}
case Tokens.FOR:
{
cs=readFor(routine,context,label);
break;
}
case Tokens.ITERATE:
{
if (label != null) {
throw unexpectedToken();
}
cs=readIterate();
break;
}
case Tokens.LEAVE:
{
if (label != null) {
throw unexpectedToken();
}
cs=readLeave(routine,context);
break;
}
case Tokens.IF:
{
if (label != null) {
throw unexpectedToken();
}
cs=readIf(routine,context);
break;
}
case Tokens.CASE:
{
if (label != null) {
throw unexpectedToken();
}
cs=readCase(routine,context);
break;
}
case Tokens.SIGNAL:
{
cs=readSignal(routine,context,label);
break;
}
case Tokens.RESIGNAL:
{
cs=readResignal(routine,context,label);
break;
}
default :
return null;
}
cs.setRoot(routine);
cs.setParent(context);
return cs;
}
