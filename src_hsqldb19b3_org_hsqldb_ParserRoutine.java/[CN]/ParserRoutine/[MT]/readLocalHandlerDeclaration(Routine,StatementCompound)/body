{
  int handlerType;
  readThis(Tokens.DECLARE);
switch (token.tokenType) {
case Tokens.CONTINUE:
    read();
  handlerType=StatementHandler.CONTINUE;
break;
case Tokens.EXIT:
read();
handlerType=StatementHandler.EXIT;
break;
case Tokens.UNDO:
read();
handlerType=StatementHandler.UNDO;
break;
default :
throw unexpectedToken();
}
readThis(Tokens.HANDLER);
readThis(Tokens.FOR);
StatementHandler handler=new StatementHandler(handlerType);
boolean end=false;
boolean start=true;
while (!end) {
int conditionType=StatementHandler.NONE;
switch (token.tokenType) {
case Tokens.COMMA:
if (start) {
throw unexpectedToken();
}
read();
start=true;
break;
case Tokens.SQLSTATE:
conditionType=StatementHandler.SQL_STATE;
case Tokens.SQLEXCEPTION:
if (conditionType == StatementHandler.NONE) {
conditionType=StatementHandler.SQL_EXCEPTION;
}
case Tokens.SQLWARNING:
if (conditionType == StatementHandler.NONE) {
conditionType=StatementHandler.SQL_WARNING;
}
case Tokens.NOT:
if (conditionType == StatementHandler.NONE) {
conditionType=StatementHandler.SQL_NOT_FOUND;
}
if (!start) {
throw unexpectedToken();
}
start=false;
read();
if (conditionType == StatementHandler.SQL_NOT_FOUND) {
readThis(Tokens.FOUND);
}
 else if (conditionType == StatementHandler.SQL_STATE) {
String sqlState=parseSQLStateValue();
handler.addConditionState(sqlState);
break;
}
handler.addConditionType(conditionType);
break;
default :
if (start) {
throw unexpectedToken();
}
end=true;
break;
}
}
if (token.tokenType == Tokens.SEMICOLON) {
read();
}
 else {
Statement e=readSQLProcedureStatementOrNull(routine,context);
if (e == null) {
throw unexpectedToken();
}
readThis(Tokens.SEMICOLON);
handler.addStatement(e);
}
return handler;
}
