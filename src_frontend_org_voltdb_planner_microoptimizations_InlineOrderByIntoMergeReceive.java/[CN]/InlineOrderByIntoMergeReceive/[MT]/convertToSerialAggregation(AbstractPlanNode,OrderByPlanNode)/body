{
  assert(aggregateNode instanceof HashAggregatePlanNode);
  HashAggregatePlanNode hashAggr=(HashAggregatePlanNode)aggregateNode;
  List<AbstractExpression> groupbys=new ArrayList<AbstractExpression>(hashAggr.getGroupByExpressions());
  List<AbstractExpression> orderbys=new ArrayList<AbstractExpression>(orderbyNode.getSortExpressions());
  Set<Integer> coveredGroupByColumns=new HashSet<Integer>();
  Iterator<AbstractExpression> orderbyIt=orderbys.iterator();
  while (orderbyIt.hasNext()) {
    AbstractExpression orderby=orderbyIt.next();
    int idx=0;
    for (    AbstractExpression groupby : groupbys) {
      if (!coveredGroupByColumns.contains(idx)) {
        if (orderby.equals(groupby)) {
          orderbyIt.remove();
          coveredGroupByColumns.add(idx);
          break;
        }
      }
      ++idx;
    }
  }
  if (orderbys.isEmpty() && groupbys.size() == coveredGroupByColumns.size()) {
    return AggregatePlanNode.convertToSerialAggregatePlanNode(hashAggr);
  }
  if (orderbys.isEmpty() && !coveredGroupByColumns.isEmpty()) {
    List<Integer> coveredGroupByColumnList=new ArrayList<Integer>();
    coveredGroupByColumnList.addAll(coveredGroupByColumns);
    return AggregatePlanNode.convertToPartialAggregatePlanNode(hashAggr,coveredGroupByColumnList);
  }
  return aggregateNode;
}
