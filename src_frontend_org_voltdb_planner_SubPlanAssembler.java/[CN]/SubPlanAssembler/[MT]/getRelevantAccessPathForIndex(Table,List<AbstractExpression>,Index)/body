{
  List<AbstractExpression> filtersToCover=new ArrayList<AbstractExpression>();
  filtersToCover.addAll(exprs);
  String exprsjson=index.getExpressionsjson();
  List<AbstractExpression> indexedExprs=null;
  List<ColumnRef> indexedColRefs=null;
  int[] indexedColIds=null;
  int keyComponentCount;
  if (exprsjson.isEmpty()) {
    indexedColRefs=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
    keyComponentCount=indexedColRefs.size();
    indexedColIds=new int[keyComponentCount];
    int ii=0;
    for (    ColumnRef cr : indexedColRefs) {
      indexedColIds[ii++]=cr.getColumn().getIndex();
    }
  }
 else {
    try {
      indexedExprs=AbstractExpression.fromJSONArrayString(exprsjson,null);
      keyComponentCount=indexedExprs.size();
    }
 catch (    JSONException e) {
      e.printStackTrace();
      assert(false);
      return null;
    }
  }
  AccessPath retval=new AccessPath();
  retval.use=IndexUseType.COVERING_UNIQUE_EQUALITY;
  retval.index=index;
  List<AbstractExpression> bindingsForOrder=new ArrayList<AbstractExpression>();
  determineIndexOrdering(table,keyComponentCount,indexedExprs,indexedColRefs,retval,bindingsForOrder);
  int coveredCount=0;
  AbstractExpression coveringExpr=null;
  int coveringColId=-1;
  for (; coveredCount < keyComponentCount; ++coveredCount) {
    if (indexedExprs == null) {
      coveringColId=indexedColIds[coveredCount];
    }
 else {
      coveringExpr=indexedExprs.get(coveredCount);
    }
    IndexableExpression eqExpr=getIndexableExpressionFromFilters(ExpressionType.COMPARE_EQUAL,ExpressionType.COMPARE_EQUAL,coveringExpr,coveringColId,table,filtersToCover);
    if (eqExpr == null) {
      break;
    }
    AbstractExpression comparator=eqExpr.getFilter();
    retval.indexExprs.add(comparator);
    retval.bindings.addAll(eqExpr.getBindings());
    retval.endExprs.add(comparator);
  }
  if (coveredCount == keyComponentCount) {
    retval.otherExprs.addAll(filtersToCover);
    if (retval.sortDirection != SortDirectionType.INVALID) {
      retval.bindings.addAll(bindingsForOrder);
    }
    return retval;
  }
  if (!IndexType.isScannable(index.getType())) {
    return null;
  }
  IndexableExpression startingBoundExpr=null;
  IndexableExpression endingBoundExpr=null;
  if (!filtersToCover.isEmpty()) {
    IndexableExpression doubleBoundExpr=getIndexableExpressionFromFilters(ExpressionType.COMPARE_LIKE,ExpressionType.COMPARE_LIKE,coveringExpr,coveringColId,table,filtersToCover);
    if (doubleBoundExpr != null) {
      startingBoundExpr=doubleBoundExpr.extractStartFromPrefixLike();
      endingBoundExpr=doubleBoundExpr.extractEndFromPrefixLike();
    }
 else {
      startingBoundExpr=getIndexableExpressionFromFilters(ExpressionType.COMPARE_GREATERTHAN,ExpressionType.COMPARE_GREATERTHANOREQUALTO,coveringExpr,coveringColId,table,filtersToCover);
      endingBoundExpr=getIndexableExpressionFromFilters(ExpressionType.COMPARE_LESSTHAN,ExpressionType.COMPARE_LESSTHANOREQUALTO,coveringExpr,coveringColId,table,filtersToCover);
    }
  }
  if (retval.sortDirection == SortDirectionType.DESC) {
    if ((endingBoundExpr != null) || (!retval.endExprs.isEmpty())) {
      retval.sortDirection=SortDirectionType.INVALID;
    }
 else {
      endingBoundExpr=startingBoundExpr;
      startingBoundExpr=null;
    }
  }
  if (startingBoundExpr != null) {
    AbstractExpression comparator=startingBoundExpr.getFilter();
    retval.indexExprs.add(comparator);
    retval.bindings.addAll(startingBoundExpr.getBindings());
    if (comparator.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN) {
      retval.lookupType=IndexLookupType.GT;
    }
 else {
      assert(comparator.getExpressionType() == ExpressionType.COMPARE_GREATERTHANOREQUALTO);
      retval.lookupType=IndexLookupType.GTE;
    }
    retval.use=IndexUseType.INDEX_SCAN;
  }
  if (endingBoundExpr != null) {
    AbstractExpression comparator=endingBoundExpr.getFilter();
    retval.endExprs.add(comparator);
    retval.bindings.addAll(endingBoundExpr.getBindings());
    retval.use=IndexUseType.INDEX_SCAN;
    if (retval.lookupType == IndexLookupType.EQ) {
      retval.lookupType=IndexLookupType.GTE;
    }
  }
  if (retval.indexExprs.size() == 0 && retval.endExprs.size() == 0 && retval.sortDirection == SortDirectionType.INVALID) {
    return null;
  }
  if (retval.indexExprs.size() < keyComponentCount) {
    if (retval.use == IndexUseType.COVERING_UNIQUE_EQUALITY) {
      retval.use=IndexUseType.INDEX_SCAN;
      retval.lookupType=IndexLookupType.GTE;
    }
 else     if (retval.lookupType == IndexLookupType.GT) {
      AbstractExpression comparator=startingBoundExpr.getFilter();
      retval.otherExprs.add(comparator);
    }
  }
  retval.otherExprs.addAll(filtersToCover);
  if (retval.sortDirection != SortDirectionType.INVALID) {
    retval.bindings.addAll(bindingsForOrder);
  }
  return retval;
}
