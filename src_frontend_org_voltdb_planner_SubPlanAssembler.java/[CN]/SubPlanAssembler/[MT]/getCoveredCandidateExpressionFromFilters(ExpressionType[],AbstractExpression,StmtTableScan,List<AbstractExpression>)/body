{
  List<List<AbstractExpression>> retval=new ArrayList<List<AbstractExpression>>();
  retval.add(new ArrayList<AbstractExpression>());
  retval.add(new ArrayList<AbstractExpression>());
  if (targetComparators == null) {
    return retval;
  }
  List<AbstractExpression> coveredExprs=retval.get(0);
  List<AbstractExpression> reversedCoveredExprs=retval.get(1);
  AbstractExpression coveredFilterExpr=null;
  AbstractExpression otherFilterExpr=null;
  for (  AbstractExpression filter : filtersToCover) {
    ExpressionType filterExprType=filter.getExpressionType();
    boolean exprTypeMatch=false;
    for (    ExpressionType targetComparator : targetComparators) {
      exprTypeMatch=(targetComparator == filterExprType);
      if (exprTypeMatch) {
        break;
      }
    }
    if (exprTypeMatch) {
      coveredFilterExpr=filter.getLeft();
      otherFilterExpr=filter.getRight();
      if (bindingIfValidIndexedFilterOperand(tableScan,coveredFilterExpr,otherFilterExpr,coveringExpr,-1) != null) {
        coveredExprs.add(filter);
      }
    }
    boolean reverseExprTypeMatch=false;
    ExpressionType reversedFilerExprType=ComparisonExpression.reverses.get(filter.getExpressionType());
    for (    ExpressionType targetComparator : targetComparators) {
      reverseExprTypeMatch=(targetComparator == reversedFilerExprType);
      if (reverseExprTypeMatch) {
        break;
      }
    }
    if (reverseExprTypeMatch) {
      coveredFilterExpr=filter.getRight();
      otherFilterExpr=filter.getLeft();
      if (bindingIfValidIndexedFilterOperand(tableScan,coveredFilterExpr,otherFilterExpr,coveringExpr,-1) != null) {
        reversedCoveredExprs.add(filter);
      }
    }
  }
  return retval;
}
