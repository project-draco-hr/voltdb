{
  List<AbstractExpression> indexedExprs;
  try {
    indexedExprs=AbstractExpression.fromJSONArrayString(index.getExpressionsjson(),null);
  }
 catch (  JSONException e) {
    e.printStackTrace();
    assert(false);
    return null;
  }
  AccessPath retval=new AccessPath();
  retval.use=IndexUseType.COVERING_UNIQUE_EQUALITY;
  retval.index=index;
  final boolean indexScannable=(index.getType() == IndexType.BALANCED_TREE.getValue()) || (index.getType() == IndexType.BTREE.getValue());
  List<ColumnRef> sortedColumns=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
  int[] colIds=new int[sortedColumns.size()];
  int ii=0;
  for (  ColumnRef cr : sortedColumns) {
    colIds[ii++]=cr.getColumn().getIndex();
  }
  HashMap<AbstractExpression,ArrayList<AbstractExpression>> eqExprs=null;
  HashMap<AbstractExpression,ArrayList<AbstractExpression>> gtExprs=null;
  HashMap<AbstractExpression,ArrayList<AbstractExpression>> ltExprs=null;
  eqExprs=new HashMap<AbstractExpression,ArrayList<AbstractExpression>>();
  gtExprs=new HashMap<AbstractExpression,ArrayList<AbstractExpression>>();
  ltExprs=new HashMap<AbstractExpression,ArrayList<AbstractExpression>>();
  for (  AbstractExpression ae : exprs) {
    AbstractExpression expr=getIndexableExpressionForFilter(table,ae,colIds,indexedExprs);
    if (expr != null) {
      AbstractExpression indexable=expr.getLeft();
      if (expr.getExpressionType() == ExpressionType.COMPARE_EQUAL) {
        if (eqExprs.containsKey(indexable) == false) {
          eqExprs.put(indexable,new ArrayList<AbstractExpression>());
        }
        eqExprs.get(indexable).add(expr);
        continue;
      }
      if ((expr.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN) || (expr.getExpressionType() == ExpressionType.COMPARE_GREATERTHANOREQUALTO)) {
        if (gtExprs.containsKey(indexable) == false) {
          gtExprs.put(indexable,new ArrayList<AbstractExpression>());
        }
        gtExprs.get(indexable).add(expr);
        continue;
      }
      if ((expr.getExpressionType() == ExpressionType.COMPARE_LESSTHAN) || (expr.getExpressionType() == ExpressionType.COMPARE_LESSTHANOREQUALTO)) {
        if (ltExprs.containsKey(indexable) == false) {
          ltExprs.put(indexable,new ArrayList<AbstractExpression>());
        }
        ltExprs.get(indexable).add(expr);
        continue;
      }
    }
    retval.otherExprs.add(ae);
  }
  if (indexScannable && m_parsedStmt instanceof ParsedSelectStmt) {
    ParsedSelectStmt parsedSelectStmt=(ParsedSelectStmt)m_parsedStmt;
    if (!parsedSelectStmt.orderColumns.isEmpty()) {
      boolean ascending=parsedSelectStmt.orderColumns.get(0).ascending;
      int jj=0;
      for (      ParsedColInfo colInfo : parsedSelectStmt.orderColumns) {
        if (jj >= indexedExprs.size()) {
          retval.sortDirection=SortDirectionType.INVALID;
          break;
        }
        AbstractExpression nextExpr=indexedExprs.get(jj++);
        if (colInfo.expression.equals(nextExpr) && colInfo.ascending == ascending) {
          retval.sortDirection=ascending ? SortDirectionType.ASC : SortDirectionType.DESC;
          retval.use=IndexUseType.INDEX_SCAN;
        }
 else {
          retval.sortDirection=SortDirectionType.INVALID;
          break;
        }
      }
    }
  }
  for (  AbstractExpression coveredExpr : indexedExprs) {
    if (eqExprs.containsKey(coveredExpr) && (eqExprs.get(coveredExpr).size() >= 0)) {
      AbstractExpression comparator=eqExprs.get(coveredExpr).remove(0);
      retval.indexExprs.add(comparator);
      retval.endExprs.add(comparator);
      if (retval.sortDirection == SortDirectionType.DESC) {
        retval.sortDirection=SortDirectionType.INVALID;
      }
    }
 else {
      if (gtExprs.containsKey(coveredExpr) && (gtExprs.get(coveredExpr).size() >= 0)) {
        AbstractExpression comparator=gtExprs.get(coveredExpr).remove(0);
        if (retval.sortDirection != SortDirectionType.DESC)         retval.indexExprs.add(comparator);
        if (retval.sortDirection == SortDirectionType.DESC)         retval.endExprs.add(comparator);
        if (comparator.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN)         retval.lookupType=IndexLookupType.GT;
 else         if (comparator.getExpressionType() == ExpressionType.COMPARE_GREATERTHANOREQUALTO) {
          retval.lookupType=IndexLookupType.GTE;
        }
 else         assert(false);
        retval.use=IndexUseType.INDEX_SCAN;
      }
      if (ltExprs.containsKey(coveredExpr) && (ltExprs.get(coveredExpr).size() >= 0)) {
        AbstractExpression comparator=ltExprs.get(coveredExpr).remove(0);
        retval.endExprs.add(comparator);
        if (retval.indexExprs.size() == 0) {
          retval.lookupType=IndexLookupType.GTE;
        }
      }
      break;
    }
  }
  if (retval.indexExprs.size() == 0 && retval.endExprs.size() == 0 && retval.sortDirection == SortDirectionType.INVALID) {
    return null;
  }
  if (retval.use == IndexUseType.COVERING_UNIQUE_EQUALITY && retval.indexExprs.size() < indexedExprs.size()) {
    retval.use=IndexUseType.INDEX_SCAN;
    retval.lookupType=IndexLookupType.GTE;
  }
  if ((indexScannable == false)) {
    if (retval.indexExprs.size() < indexedExprs.size())     return null;
    if ((retval.use == IndexUseType.INDEX_SCAN))     return null;
  }
  for (  ArrayList<AbstractExpression> list : eqExprs.values()) {
    assert(list != null);
    for (    AbstractExpression expr : list) {
      assert(expr != null);
      retval.otherExprs.add(expr);
    }
  }
  for (  ArrayList<AbstractExpression> list : gtExprs.values()) {
    assert(list != null);
    for (    AbstractExpression expr : list) {
      assert(expr != null);
      retval.otherExprs.add(expr);
    }
  }
  for (  ArrayList<AbstractExpression> list : ltExprs.values()) {
    assert(list != null);
    for (    AbstractExpression expr : list) {
      assert(expr != null);
      retval.otherExprs.add(expr);
    }
  }
  return retval;
}
