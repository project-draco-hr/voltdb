{
  if (header.getDataSize() < 1) {
    throw new TarMalformatException(RB.singleton.getString(RB.DATA_SIZE_UNKNOWN));
  }
  int readNow;
  int readBlocks=(int)(header.getDataSize() / 512L);
  int modulus=(int)(header.getDataSize() % 512L);
  File newFile=header.generateFile();
  if (!newFile.isAbsolute()) {
    newFile=(extractBaseDir == null) ? newFile.getAbsoluteFile() : new File(extractBaseDir,newFile.getPath());
  }
  File parentDir=newFile.getParentFile();
  if (newFile.exists()) {
    if (mode != TarReader.OVERWRITE_MODE) {
      throw new IOException(RB.singleton.getString(RB.EXTRACTION_EXISTS,newFile.getAbsolutePath()));
    }
    if (!newFile.isFile()) {
      throw new IOException(RB.singleton.getString(RB.EXTRACTION_EXISTS_NOTFILE,newFile.getAbsolutePath()));
    }
  }
  if (parentDir.exists()) {
    if (!parentDir.isDirectory()) {
      throw new IOException(RB.singleton.getString(RB.EXTRACTION_PARENT_NOT_DIR,parentDir.getAbsolutePath()));
    }
    if (!parentDir.canWrite()) {
      throw new IOException(RB.singleton.getString(RB.EXTRACTION_PARENT_NOT_WRITABLE,parentDir.getAbsolutePath()));
    }
  }
 else {
    if (!parentDir.mkdirs()) {
      throw new IOException(RB.singleton.getString(RB.EXTRACTION_PARENT_MKFAIL,parentDir.getAbsolutePath()));
    }
  }
  int fileMode=header.getFileMode();
  FileOutputStream outStream=new FileOutputStream(newFile);
  try {
    newFile.setExecutable(false,false);
    newFile.setReadable(false,false);
    newFile.setWritable(false,false);
    newFile.setExecutable(((fileMode & 0100) != 0),true);
    newFile.setReadable((fileMode & 0400) != 0,true);
    newFile.setWritable((fileMode & 0200) != 0,true);
    while (readBlocks > 0) {
      readNow=(readBlocks > archive.getReadBufferBlocks()) ? archive.getReadBufferBlocks() : readBlocks;
      archive.readBlocks(readNow);
      readBlocks-=readNow;
      outStream.write(archive.readBuffer,0,readNow * 512);
    }
    if (modulus != 0) {
      archive.readBlock();
      outStream.write(archive.readBuffer,0,modulus);
    }
    outStream.flush();
  }
  finally {
    outStream.close();
  }
  newFile.setLastModified(header.getModTime() * 1000);
  if (newFile.length() != header.getDataSize()) {
    throw new IOException(RB.singleton.getString(RB.WRITE_COUNT_MISMATCH,Long.toString(header.getDataSize()),newFile.getAbsolutePath(),Long.toString(newFile.length())));
  }
}
