{
  TarEntryHeader header;
  boolean anyUnsupporteds=false;
  boolean matched;
  Long paxSize=null;
  String paxString=null;
  try {
    EACH_HEADER:     while (archive.readNextHeaderBlock()) {
      header=new TarEntryHeader(archive.readBuffer);
      char entryType=header.getEntryType();
      if (entryType == 'x') {
        paxSize=getPifData(header).getSize();
        paxString=header.toString();
        continue;
      }
      if (paxSize != null) {
        header.setDataSize(paxSize.longValue());
        paxSize=null;
      }
      if (patterns != null) {
        matched=false;
        for (int i=0; i < patterns.length; i++) {
          if (patterns[i].matcher(header.getPath()).matches()) {
            matched=true;
            break;
          }
        }
        if (!matched) {
          paxString=null;
          skipFileData(header);
          continue EACH_HEADER;
        }
      }
      if (entryType != '\0' && entryType != '0' && entryType != 'x') {
        anyUnsupporteds=true;
      }
switch (mode) {
case LIST_MODE:
        if (paxString != null) {
          System.out.println(paxString);
        }
      System.out.println(header.toString());
    skipFileData(header);
  break;
case EXTRACT_MODE:
case OVERWRITE_MODE:
if (paxString != null) {
  System.out.println(paxString);
}
System.out.println(header.toString());
if (entryType == '\0' || entryType == '0' || entryType == 'x') {
extractFile(header);
}
 else {
skipFileData(header);
}
break;
default :
throw new IllegalArgumentException(RB.singleton.getString(RB.UNSUPPORTED_MODE,mode));
}
paxString=null;
}
if (anyUnsupporteds) {
System.out.println(RB.singleton.getString(RB.UNSUPPORTED_ENTRY_PRESENT));
}
}
 catch (IOException ioe) {
archive.close();
throw ioe;
}
}
