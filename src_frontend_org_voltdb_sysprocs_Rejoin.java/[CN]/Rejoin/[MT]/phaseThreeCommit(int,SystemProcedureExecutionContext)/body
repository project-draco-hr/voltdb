{
  VoltTable retval=new VoltTable(new ColumnInfo("HostId",VoltType.INTEGER),new ColumnInfo("Error",VoltType.STRING));
  ArrayList<Integer> rejoiningSiteIds=new ArrayList<Integer>();
  ArrayList<Integer> rejoiningExecSiteIds=new ArrayList<Integer>();
  Cluster cluster=context.getCluster();
  for (  Site site : cluster.getSites()) {
    int siteId=Integer.parseInt(site.getTypeName());
    int hostId=Integer.parseInt(site.getHost().getTypeName());
    if (hostId == rejoinHostId) {
      assert(site.getIsup() == false);
      rejoiningSiteIds.add(siteId);
      if (site.getIsexec() == true) {
        rejoiningExecSiteIds.add(siteId);
      }
    }
  }
  assert(rejoiningSiteIds.size() > 0);
  StringBuilder sb=new StringBuilder();
  for (  int siteId : rejoiningSiteIds) {
    sb.append("set ");
    String site_path=VoltDB.instance().getCatalogContext().catalog.getClusters().get("cluster").getSites().get(Integer.toString(siteId)).getPath();
    sb.append(site_path).append(" ").append("isUp true");
    sb.append("\n");
  }
  String catalogDiffCommands=sb.toString();
  String error=VoltDB.instance().doRejoinCommitOrRollback(getTransactionId(),true);
  context.getExecutionSite().updateClusterState(catalogDiffCommands);
  retval.addRow(Integer.parseInt(context.getSite().getTypeName()),error);
  return retval;
}
