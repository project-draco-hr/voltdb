{
  Handler[] handlers=getHandlers();
  if (handlers == null || handlers.length == 0)   return;
  AsyncContinuation async=baseRequest.getAsyncContinuation();
  if (async.isAsync()) {
    ContextHandler context=async.getContextHandler();
    if (context != null) {
      context.handle(target,baseRequest,request,response);
      return;
    }
  }
  PathMap map=_contextMap;
  if (map != null && target != null && target.startsWith("/")) {
    Object contexts=map.getLazyMatches(target);
    for (int i=0; i < LazyList.size(contexts); i++) {
      Map.Entry entry=(Map.Entry)LazyList.get(contexts,i);
      Object list=entry.getValue();
      if (list instanceof Map) {
        Map hosts=(Map)list;
        String host=normalizeHostname(request.getServerName());
        list=hosts.get(host);
        for (int j=0; j < LazyList.size(list); j++) {
          Handler handler=(Handler)LazyList.get(list,j);
          handler.handle(target,baseRequest,request,response);
          if (baseRequest.isHandled())           return;
        }
        list=hosts.get("*." + host.substring(host.indexOf(".") + 1));
        for (int j=0; j < LazyList.size(list); j++) {
          Handler handler=(Handler)LazyList.get(list,j);
          handler.handle(target,baseRequest,request,response);
          if (baseRequest.isHandled())           return;
        }
        list=hosts.get("*");
        for (int j=0; j < LazyList.size(list); j++) {
          Handler handler=(Handler)LazyList.get(list,j);
          handler.handle(target,baseRequest,request,response);
          if (baseRequest.isHandled())           return;
        }
      }
 else {
        for (int j=0; j < LazyList.size(list); j++) {
          Handler handler=(Handler)LazyList.get(list,j);
          handler.handle(target,baseRequest,request,response);
          if (baseRequest.isHandled())           return;
        }
      }
    }
  }
 else {
    for (int i=0; i < handlers.length; i++) {
      handlers[i].handle(target,baseRequest,request,response);
      if (baseRequest.isHandled())       return;
    }
  }
}
