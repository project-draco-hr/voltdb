{
  int numBuffers=100;
  for (int i=0; i < numBuffers; i++) {
    m_pbd.offer(DBBPool.wrapBB(TestPersistentBinaryDeque.getFilledBuffer(i)));
  }
  int numSegments=TestPersistentBinaryDeque.getSortedDirectoryListing().size();
  int numReaders=3;
  PBDReader[] readers=new PBDReader[numReaders];
  for (int i=0; i < numReaders; i++) {
    readers[i]=new PBDReader("reader" + i);
  }
  m_pbd.close();
  m_pbd=new PersistentBinaryDeque(TestPersistentBinaryDeque.TEST_NONCE,TestPersistentBinaryDeque.TEST_DIR,logger);
  readers[0]=new PBDReader("reader0");
  readers[0].readToEndOfSegment();
  assertEquals(numSegments + 1,TestPersistentBinaryDeque.getSortedDirectoryListing().size());
  for (int i=1; i < numReaders; i++) {
    readers[i]=new PBDReader("reader" + i);
    readers[i].readToEndOfSegment();
  }
  assertEquals(numSegments,TestPersistentBinaryDeque.getSortedDirectoryListing().size());
  for (int i=1; i < numSegments; i++) {
    for (int j=0; j < numReaders; j++) {
      readers[j].readToEndOfSegment();
    }
  }
  assertEquals(1,TestPersistentBinaryDeque.getSortedDirectoryListing().size());
}
