{
  assertEquals(1,m_pbd.numOpenSegments());
  int numSegments=3;
  for (int i=0; i < numSegments; i++) {
    for (int j=0; j < s_segmentFillCount; j++) {
      m_pbd.offer(DBBPool.wrapBB(TestPersistentBinaryDeque.getFilledBuffer(j)));
    }
    assertEquals(1,m_pbd.numOpenSegments());
  }
  BinaryDequeReader reader=m_pbd.openForRead("reader0");
  for (int i=0; i < numSegments; i++) {
    for (int j=0; j < 46; j++) {
      BBContainer bbC=reader.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
      bbC.discard();
    }
    int expected=(i == numSegments - 1) ? 1 : 2;
    assertEquals(expected,m_pbd.numOpenSegments());
    BBContainer bbC=reader.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    bbC.discard();
    assertEquals(1,m_pbd.numOpenSegments());
  }
}
