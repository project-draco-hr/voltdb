{
  assertEquals(1,m_pbd.numOpenSegments());
  int numSegments=5;
  for (int i=0; i < numSegments; i++) {
    for (int j=0; j < s_segmentFillCount; j++) {
      m_pbd.offer(DBBPool.wrapBB(TestPersistentBinaryDeque.getFilledBuffer(j)));
    }
    assertEquals(1,m_pbd.numOpenSegments());
  }
  BinaryDequeReader reader0=m_pbd.openForRead("reader0");
  BinaryDequeReader reader1=m_pbd.openForRead("reader1");
  for (int i=0; i < numSegments - 1; i++) {
    for (int j=0; j < 46; j++) {
      BBContainer bbC=reader0.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
      bbC.discard();
      if (i == 0) {
        bbC=reader1.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
        bbC.discard();
      }
    }
    BBContainer bbC=reader0.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    bbC.discard();
    if (i == 0) {
      assertEquals(2,m_pbd.numOpenSegments());
    }
 else {
      assertEquals(3,m_pbd.numOpenSegments());
    }
  }
  BBContainer bbC=reader1.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
  bbC.discard();
  assertEquals(2,m_pbd.numOpenSegments());
  for (int i=1; i < numSegments - 1; i++) {
    for (int j=0; j < 46; j++) {
      bbC=reader1.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
      bbC.discard();
    }
    int expected=(i == numSegments - 2) ? 2 : 3;
    assertEquals(expected,m_pbd.numOpenSegments());
    bbC=reader1.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    bbC.discard();
    expected=(i == numSegments - 2) ? 1 : 2;
    assertEquals(expected,m_pbd.numOpenSegments());
  }
  for (int j=0; j < s_segmentFillCount; j++) {
    bbC=reader0.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    bbC.discard();
    bbC=reader1.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    bbC.discard();
  }
  assertEquals(1,m_pbd.numOpenSegments());
}
