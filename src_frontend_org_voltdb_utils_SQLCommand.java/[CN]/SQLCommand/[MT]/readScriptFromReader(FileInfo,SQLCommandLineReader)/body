{
  List<QueryInfo> queryBatchList=new ArrayList<SQLCommand.QueryInfo>();
  StringBuilder query=new StringBuilder();
  String line=null;
  String delimiter=(fileInfo.getOption() == FileOption.INLINEBATCH) ? fileInfo.getDelimiter() : null;
  String prompt=m_interactive ? "batch> " : "";
  while ((line=script.readLine(prompt)) != null) {
    if (delimiter != null && line.equals(delimiter)) {
      break;
    }
    if (SQLParser.parseRecallStatement(line,RecallableSessionLines.size() - 1) != null || SQLParser.isExitCommand(line) || SQLParser.isGoCommand(line)) {
      continue;
    }
    line=handleTranslatedCommands(line);
    if (line == null) {
      continue;
    }
    FileInfo nestedFileInfo=SQLParser.parseFileStatement(line);
    if (nestedFileInfo != null) {
      if (fileInfo.isBatch()) {
        stopOrContinue(new RuntimeException("Not supported nested FILE command in a batch"));
        return null;
      }
      List<QueryInfo> contentInfo=readScriptFile(nestedFileInfo,script);
      if (contentInfo == null || contentInfo.isEmpty()) {
        if (m_returningToPromptAfterError) {
          return null;
        }
        continue;
      }
      updateQueryBatch(queryBatchList,query,contentInfo);
      query=new StringBuilder();
    }
 else {
      query.append(line + "\n");
    }
  }
  if (delimiter != null && line == null) {
    throw new Exception("ERROR: Failed to find delimiter \"" + delimiter + "\" indicating end of inline batch.  No batched statements were executed.");
  }
  if (query.length() > 0) {
    if (fileInfo.isBatch()) {
      assert(queryBatchList.isEmpty());
      queryBatchList.add(new QueryInfo(query,fileInfo));
    }
 else {
      queryBatchList.add(new QueryInfo(query));
    }
  }
  return queryBatchList;
}
