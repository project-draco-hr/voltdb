{
  m_startTime=System.nanoTime();
  if (ExecuteCall.matcher(query).find()) {
    query=ExecuteCall.matcher(query).replaceFirst("");
    List<String> params=parseQueryProcedureCallParameters(query);
    String procedure=params.remove(0);
    if (!Procedures.containsKey(procedure)) {
      throw new Exception("Undefined procedure: " + procedure);
    }
    List<String> paramTypes=Procedures.get(procedure).get(params.size());
    if (paramTypes == null || params.size() != paramTypes.size()) {
      String expectedSizes="";
      for (      Integer expectedSize : Procedures.get(procedure).keySet()) {
        expectedSizes+=expectedSize + ", ";
      }
      throw new Exception("Invalid parameter count for procedure: " + procedure + "(expected: "+ expectedSizes+ " received: "+ params.size()+ ")");
    }
    Object[] objectParams=new Object[params.size()];
    if (procedure.equals("@SnapshotDelete")) {
      objectParams[0]=new String[]{Unquote.matcher(params.get(0)).replaceAll("").replace("''","'")};
      objectParams[1]=new String[]{Unquote.matcher(params.get(1)).replaceAll("").replace("''","'")};
    }
 else {
      for (int i=0; i < params.size(); i++) {
        String paramType=paramTypes.get(i);
        String param=params.get(i);
        if (paramType.equals("bit")) {
          if (param.equals("yes") || param.equals("true") || param.equals("1")) {
            objectParams[i]=(byte)1;
          }
 else {
            objectParams[i]=(byte)0;
          }
        }
 else         if (paramType.equals("tinyint")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            try {
              objectParams[i]=Byte.parseByte(param);
            }
 catch (            NumberFormatException nfe) {
              throw new Exception("Invalid parameter:  Expected a byte numeric value, got '" + param + "' (param "+ (i + 1)+ ").");
            }
          }
        }
 else         if (paramType.equals("smallint")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            try {
              objectParams[i]=Short.parseShort(param);
            }
 catch (            NumberFormatException nfe) {
              throw new Exception("Invalid parameter:  Expected a short numeric value, got '" + param + "' (param "+ (i + 1)+ ").");
            }
          }
        }
 else         if (paramType.equals("int") || paramType.equals("integer")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            try {
              objectParams[i]=Integer.parseInt(param);
            }
 catch (            NumberFormatException nfe) {
              throw new Exception("Invalid parameter:  Expected a numeric value, got '" + param + "' (param "+ (i + 1)+ ").");
            }
          }
        }
 else         if (paramType.equals("bigint")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            try {
              objectParams[i]=Long.parseLong(param);
            }
 catch (            NumberFormatException nfe) {
              throw new Exception("Invalid parameter:  Expected a numeric value, got '" + param + "' (param "+ (i + 1)+ ").");
            }
          }
        }
 else         if (paramType.equals("float")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            try {
              objectParams[i]=Double.parseDouble(param);
            }
 catch (            NumberFormatException nfe) {
              throw new Exception("Invalid parameter:  Expected a float value, got '" + param + "' (param "+ (i + 1)+ ").");
            }
          }
        }
 else         if (paramType.equals("varchar")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            objectParams[i]=Unquote.matcher(param).replaceAll("").replace("''","'");
          }
        }
 else         if (paramType.equals("decimal")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            objectParams[i]=new BigDecimal(param);
          }
        }
 else         if (paramType.equals("timestamp")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            objectParams[i]=DateParser.parse(param.replaceAll("^\"|\"$","").replaceAll("^'|'$",""));
          }
        }
 else         if (paramType.equals("statisticscomponent")) {
          String p=preprocessParam(param);
          objectParams[i]=p;
        }
 else         if (paramType.equals("sysinfoselector")) {
          String p=preprocessParam(param);
          objectParams[i]=p;
        }
 else         if (paramType.equals("metadataselector")) {
          String p=preprocessParam(param);
          objectParams[i]=p;
        }
 else         if (paramType.equals("varbinary") || paramType.equals("tinyint_array")) {
          if (IsNull.matcher(param).matches()) {
            objectParams[i]=null;
          }
 else {
            if (param.length() % 2 == 1) {
              throw new Exception("Invalid varbinary value: input must have an even amount of characters to be a valid hex string.");
            }
            String val=Unquote.matcher(param).replaceAll("").replace("''","'");
            objectParams[i]=Encoder.hexDecode(val);
          }
        }
 else {
          throw new Exception("Unsupported Data Type: " + paramType);
        }
      }
    }
    if (procedure.equals("@UpdateApplicationCatalog")) {
      File catfile=null;
      if (objectParams[0] != null) {
        catfile=new File((String)objectParams[0]);
      }
      File depfile=null;
      if (objectParams[1] != null) {
        depfile=new File((String)objectParams[1]);
      }
      printResponse(VoltDB.updateApplicationCatalog(catfile,depfile));
      Procedures.clear();
      loadSystemProcedures();
      loadStoredProcedures(Procedures,Classlist);
    }
 else     if (procedure.equals("@UpdateClasses")) {
      File jarfile=null;
      if (objectParams[0] != null) {
        jarfile=new File((String)objectParams[0]);
      }
      printResponse(VoltDB.updateClasses(jarfile,(String)objectParams[1]));
      Procedures.clear();
      loadSystemProcedures();
      loadStoredProcedures(Procedures,Classlist);
    }
 else {
      printResponse(VoltDB.callProcedure(procedure,objectParams));
    }
  }
 else   if (ExplainCall.matcher(query).find()) {
    query=query.substring("explain ".length());
    query=StripCRLF.matcher(query).replaceAll(" ");
    printResponse(VoltDB.callProcedure("@Explain",query));
  }
 else   if (ExplainProcCall.matcher(query).find()) {
    query=query.substring("explainProc ".length());
    query=StripCRLF.matcher(query).replaceAll(" ");
    printResponse(VoltDB.callProcedure("@ExplainProc",query));
  }
 else {
    query=StripCRLF.matcher(query).replaceAll(" ");
    printResponse(VoltDB.callProcedure("@AdHoc",query));
    if (SQLLexer.extractDDLToken(query) != null) {
      Procedures.clear();
      loadSystemProcedures();
      loadStoredProcedures(Procedures,Classlist);
    }
  }
  return;
}
