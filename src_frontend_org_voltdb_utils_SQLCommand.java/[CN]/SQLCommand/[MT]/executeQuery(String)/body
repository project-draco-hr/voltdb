{
  try {
    m_startTime=System.nanoTime();
    Matcher matcher=ExecuteCall.matcher(query);
    if (matcher.find()) {
      query=matcher.replaceFirst("");
      List<String> params=parseProcedureCallParameters(query);
      String procedure=params.remove(0);
      Map<Integer,List<String>> signature=Procedures.get(procedure);
      if (signature == null) {
        throw new Exception("Undefined procedure: " + procedure);
      }
      List<String> paramTypes=signature.get(params.size());
      if (paramTypes == null || params.size() != paramTypes.size()) {
        String expectedSizes="";
        for (        Integer expectedSize : signature.keySet()) {
          expectedSizes+=expectedSize + ", ";
        }
        throw new Exception("Invalid parameter count for procedure: " + procedure + "(expected: "+ expectedSizes+ " received: "+ params.size()+ ")");
      }
      Object[] objectParams=new Object[params.size()];
      if (procedure.equals("@SnapshotDelete")) {
        objectParams[0]=new String[]{Unquote.matcher(params.get(0)).replaceAll("").replace("''","'")};
        objectParams[1]=new String[]{Unquote.matcher(params.get(1)).replaceAll("").replace("''","'")};
      }
 else {
        int i=0;
        try {
          for (; i < params.size(); i++) {
            String paramType=paramTypes.get(i);
            String param=params.get(i);
            Object objParam=null;
            if (paramType.equals("bit")) {
              if (param.equals("yes") || param.equals("true") || param.equals("1")) {
                objParam=(byte)1;
              }
 else {
                objParam=(byte)0;
              }
            }
 else             if (paramType.equals("statisticscomponent") || paramType.equals("sysinfoselector") || paramType.equals("metadataselector")) {
              objParam=preprocessParam(param);
            }
 else             if (!"null".equalsIgnoreCase(param)) {
              if (paramType.equals("tinyint")) {
                objParam=Byte.parseByte(param);
              }
 else               if (paramType.equals("smallint")) {
                objParam=Short.parseShort(param);
              }
 else               if (paramType.equals("int") || paramType.equals("integer")) {
                objParam=Integer.parseInt(param);
              }
 else               if (paramType.equals("bigint")) {
                objParam=Long.parseLong(param);
              }
 else               if (paramType.equals("float")) {
                objParam=Double.parseDouble(param);
              }
 else               if (paramType.equals("varchar")) {
                objParam=Unquote.matcher(param).replaceAll("").replace("''","'");
              }
 else               if (paramType.equals("decimal")) {
                objParam=new BigDecimal(param);
              }
 else               if (paramType.equals("timestamp")) {
                objParam=DateParser.parse(param.replaceAll("^\"|\"$","").replaceAll("^'|'$",""));
              }
 else               if (paramType.equals("varbinary") || paramType.equals("tinyint_array")) {
                String val=Unquote.matcher(param).replaceAll("");
                objParam=Encoder.hexDecode(val);
                if (param.length() % 2 == 1) {
                  throw new RuntimeException("Invalid varbinary value (" + param + ") (param "+ (i + 1)+ ") :  must have an even number of hex characters to be valid.");
                }
              }
 else {
                throw new Exception("Unsupported Data Type: " + paramType);
              }
            }
            objectParams[i]=objParam;
          }
        }
 catch (        NumberFormatException nfe) {
          throw new RuntimeException("Invalid parameter:  Expected a " + friendlyTypeDescription(paramTypes.get(i)) + " value, got '"+ params.get(i)+ "' (param "+ (i + 1)+ ").",nfe);
        }
      }
      if (procedure.equals("@UpdateApplicationCatalog")) {
        File catfile=null;
        if (objectParams[0] != null) {
          catfile=new File((String)objectParams[0]);
        }
        File depfile=null;
        if (objectParams[1] != null) {
          depfile=new File((String)objectParams[1]);
        }
        printDdlResponse(VoltDB.updateApplicationCatalog(catfile,depfile));
        loadStoredProcedures(Procedures,Classlist);
      }
 else       if (procedure.equals("@UpdateClasses")) {
        File jarfile=null;
        if (objectParams[0] != null) {
          jarfile=new File((String)objectParams[0]);
        }
        printDdlResponse(VoltDB.updateClasses(jarfile,(String)objectParams[1]));
        loadStoredProcedures(Procedures,Classlist);
      }
 else {
        printResponse(VoltDB.callProcedure(procedure,objectParams));
      }
    }
 else     if (ExplainCall.matcher(query).find()) {
      query=query.substring("explain ".length());
      printResponse(VoltDB.callProcedure("@Explain",query));
    }
 else     if (ExplainProcCall.matcher(query).find()) {
      query=query.substring("explainProc ".length());
      query=query.trim();
      printResponse(VoltDB.callProcedure("@ExplainProc",query));
    }
 else {
      if (SQLLexer.extractDDLToken(query) != null) {
        printDdlResponse(VoltDB.callProcedure("@AdHoc",query));
        loadStoredProcedures(Procedures,Classlist);
      }
 else {
        printResponse(VoltDB.callProcedure("@AdHoc",query));
      }
    }
  }
 catch (  Exception exc) {
    stopOrContinue(exc);
  }
}
