{
  if (ExecuteCall.matcher(query).find()) {
    query=ExecuteCall.matcher(query).replaceFirst("");
    List<String> params=parseQueryProcedureCallParameters(query);
    String procedure=params.remove(0);
    if (!Procedures.containsKey(procedure))     throw new Exception("Undefined procedure: " + procedure);
    List<String> paramTypes=Procedures.get(procedure);
    if (params.size() != paramTypes.size())     throw new Exception("Invalid parameter count for procedure: " + procedure + "(expected: "+ paramTypes.size()+ ", received: "+ params.size()+ ")");
    Object[] objectParams=new Object[params.size()];
    if (procedure.equals("@SnapshotDelete")) {
      objectParams[0]=new String[]{Unquote.matcher(params.get(0)).replaceAll("").replace("''","'")};
      objectParams[1]=new String[]{Unquote.matcher(params.get(1)).replaceAll("").replace("''","'")};
    }
 else {
      for (int i=0; i < params.size(); i++) {
        String paramType=paramTypes.get(i);
        String param=params.get(i);
        if (paramType.equals("bit")) {
          if (param.equals("yes") || param.equals("true") || param.equals("1"))           objectParams[i]=(byte)1;
 else           objectParams[i]=(byte)0;
        }
 else         if (paramType.equals("tinyint")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_TINYINT;
 else           objectParams[i]=Byte.parseByte(param);
        }
 else         if (paramType.equals("smallint")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_SMALLINT;
 else           objectParams[i]=Short.parseShort(param);
        }
 else         if (paramType.equals("int") || paramType.equals("integer")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_INTEGER;
 else           objectParams[i]=Integer.parseInt(param);
        }
 else         if (paramType.equals("bigint")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_BIGINT;
 else           objectParams[i]=Long.parseLong(param);
        }
 else         if (paramType.equals("float")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_FLOAT;
 else           objectParams[i]=Double.parseDouble(param);
        }
 else         if (paramType.equals("varchar")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_STRING_OR_VARBINARY;
 else           objectParams[i]=Unquote.matcher(param).replaceAll("").replace("''","'");
        }
 else         if (paramType.equals("decimal")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_DECIMAL;
 else           objectParams[i]=new BigDecimal(param);
        }
 else         if (paramType.equals("timestamp")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_TIMESTAMP;
 else           objectParams[i]=DateParser.parse(param);
        }
 else         if (paramType.equals("statisticscomponent")) {
          if (!StatisticsComponents.contains(param.toUpperCase()))           throw new Exception("Invalid Statistics Component: " + param);
          objectParams[i]=param.toUpperCase();
        }
 else         if (paramType.equals("sysinfoselector")) {
          if (!SysInfoSelectors.contains(param.toUpperCase()))           throw new Exception("Invalid SysInfo Selector: " + param);
          objectParams[i]=param.toUpperCase();
        }
 else         if (paramType.equals("metadataselector")) {
          if (!MetaDataSelectors.contains(param.toUpperCase()))           throw new Exception("Invalid Meta-Data Selector: " + param);
          objectParams[i]=param.toUpperCase();
        }
 else         if (paramType.equals("varbinary")) {
          if (IsNull.matcher(param).matches())           objectParams[i]=VoltType.NULL_STRING_OR_VARBINARY;
 else           objectParams[i]=hexStringToByteArray(Unquote.matcher(param).replaceAll("").replace("''","'"));
        }
 else         throw new Exception("Unsupported Data Type: " + paramType);
      }
    }
    printResponse(VoltDB.callProcedure(procedure,objectParams));
  }
 else   if (DeclareCall.matcher(query).find()) {
    query=DeclareCall.matcher(query).replaceFirst("");
    List<String> params=parseQueryProcedureCallParameters(query);
    String procedure=params.remove(0);
    if (procedure.startsWith("@"))     return;
    for (int i=0; i < params.size(); i++) {
      params.set(i,params.get(i).trim().toLowerCase());
      if (!Types.contains(params.get(i)))       throw new Exception("Invalid Parameter Type: " + params.get(i));
    }
    Procedures.put(procedure,params);
  }
 else   if (UndeclareCall.matcher(query).find()) {
    query=UndeclareCall.matcher(query).replaceFirst("");
    String procedure=parseQueryProcedureCallParameters(query).remove(0);
    if (procedure.startsWith("@"))     return;
    Procedures.remove(procedure);
  }
 else {
    query=StripCRLF.matcher(query).replaceAll(" ");
    printResponse(VoltDB.callProcedure("@AdHoc",query));
  }
  return;
}
