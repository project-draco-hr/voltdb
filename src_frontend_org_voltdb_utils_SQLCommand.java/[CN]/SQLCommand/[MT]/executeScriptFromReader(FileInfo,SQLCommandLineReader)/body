{
  StringBuilder query=new StringBuilder();
  boolean statementStarted=false;
  StringBuilder batch=fileInfo.isBatch() ? new StringBuilder() : null;
  String delimiter=(fileInfo.getOption() == FileOption.INLINEBATCH) ? fileInfo.getDelimiter() : null;
  while (true) {
    String line=reader.readBatchLine();
    if (delimiter != null) {
      if (line == null) {
        throw new Exception("ERROR: Failed to find delimiter \"" + delimiter + "\" indicating end of inline batch.  No batched statements were executed.");
      }
      if (delimiter.equals(line)) {
        line=null;
      }
    }
    if (line == null) {
      if (query.length() > 0) {
        if (batch == null) {
          executeQuery(query.toString());
        }
 else {
          batch.append(query);
          executeDDLBatch(fileInfo.getFile().getPath(),batch.toString());
        }
      }
      return;
    }
    if (!statementStarted) {
      FileInfo nestedFileInfo=SQLParser.parseFileStatement(line);
      if (nestedFileInfo != null) {
        if (batch != null) {
          stopOrContinue(new RuntimeException("A FILE command is invalid in a batch."));
          continue;
        }
        executeScriptFile(nestedFileInfo,reader);
        if (m_returningToPromptAfterError) {
          return;
        }
        continue;
      }
      if (executesAsSimpleDirective(line)) {
        continue;
      }
      line=SQLParser.translateStatement(line);
    }
    query.append(line).append("\n");
    if (SQLParser.isSemiColonTerminated(line)) {
      if (batch == null) {
        executeQuery(query.toString());
        query.setLength(0);
      }
      statementStarted=false;
    }
 else     if (!statementStarted) {
      statementStarted=(!line.trim().equals("")) && !SQLParser.parseWholeLineComment(line);
    }
  }
}
