{
  TimeZone.setDefault(TimeZone.getTimeZone("GMT+0"));
  String serverList="localhost";
  int port=21212;
  String user="";
  String password="";
  String kerberos="";
  List<String> queries=null;
  String ddlFile="";
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.startsWith("--servers=")) {
      serverList=extractArgInput(arg);
    }
 else     if (arg.startsWith("--port=")) {
      port=Integer.valueOf(extractArgInput(arg));
    }
 else     if (arg.startsWith("--user=")) {
      user=extractArgInput(arg);
    }
 else     if (arg.startsWith("--password=")) {
      password=extractArgInput(arg);
    }
 else     if (arg.startsWith("--kerberos=")) {
      kerberos=extractArgInput(arg);
    }
 else     if (arg.startsWith("--kerberos")) {
      kerberos="VoltDBClient";
    }
 else     if (arg.startsWith("--query=")) {
      List<String> argQueries=SQLParser.parseQuery(arg.substring(8));
      if (!argQueries.isEmpty()) {
        if (queries == null) {
          queries=argQueries;
        }
 else {
          queries.addAll(argQueries);
        }
      }
    }
 else     if (arg.startsWith("--output-format=")) {
      String formatName=extractArgInput(arg).toLowerCase();
      if (formatName.equals("fixed")) {
        m_outputFormatter=new SQLCommandOutputFormatterDefault();
      }
 else       if (formatName.equals("csv")) {
        m_outputFormatter=new SQLCommandOutputFormatterCSV();
      }
 else       if (formatName.equals("tab")) {
        m_outputFormatter=new SQLCommandOutputFormatterTabDelimited();
      }
 else {
        printUsage("Invalid value for --output-format");
      }
    }
 else     if (arg.startsWith("--stop-on-error=")) {
      String optionName=extractArgInput(arg).toLowerCase();
      if (optionName.equals("true")) {
        m_stopOnError=true;
      }
 else       if (optionName.equals("false")) {
        m_stopOnError=false;
      }
 else {
        printUsage("Invalid value for --stop-on-error");
      }
    }
 else     if (arg.startsWith("--ddl-file=")) {
      String ddlFilePath=extractArgInput(arg);
      try {
        ddlFile=new Scanner(new File(ddlFilePath)).useDelimiter("\\Z").next();
      }
 catch (      FileNotFoundException e) {
        printUsage("DDL file not found at path:" + ddlFilePath);
      }
    }
 else     if (arg.startsWith("--query-timeout=")) {
      m_hasBatchTimeout=true;
      m_batchTimeout=Integer.valueOf(extractArgInput(arg));
    }
 else     if (arg.equals("--output-skip-metadata")) {
      m_outputShowMetadata=false;
    }
 else     if (arg.equals("--debug")) {
      m_debug=true;
    }
 else     if (arg.equals("--help")) {
      printHelp(System.out);
      System.out.println("\n\n");
      printUsage(0);
    }
 else     if (arg.equals("--no-version-check")) {
      m_version_check=false;
    }
 else     if ((arg.equals("--usage")) || (arg.equals("-?"))) {
      printUsage(0);
    }
 else {
      printUsage("Invalid Parameter: " + arg);
    }
  }
  String[] servers=serverList.split(",");
  if (m_version_check) {
    openURLAsync();
  }
  try {
    password=CLIConfig.readPasswordIfNeeded(user,password,"Enter password: ");
  }
 catch (  IOException ex) {
    printUsage("Unable to read password: " + ex);
  }
  ClientConfig config=new ClientConfig(user,password);
  config.setProcedureCallTimeout(0);
  try {
    if (!kerberos.isEmpty()) {
      config.enableKerberosAuthentication(kerberos);
    }
    m_client=getClient(config,servers,port);
  }
 catch (  Exception exc) {
    System.err.println(exc.getMessage());
    System.exit(-1);
  }
  try {
    if (!ddlFile.equals("")) {
      m_client.callProcedure("@AdHoc",ddlFile);
      System.exit(m_exitCode);
    }
    loadSystemProcedures();
    loadStoredProcedures(Procedures,Classlist);
    m_interactive=true;
    if (queries != null && !queries.isEmpty()) {
      m_interactive=false;
      for (      String query : queries) {
        executeStatement(query);
      }
    }
    if (System.console() == null && m_interactive) {
      m_interactive=false;
      executeNoninteractive();
    }
    if (m_interactive) {
      System.out.printf("SQL Command :: %s%s:%d\n",(user == "" ? "" : user + "@"),serverList,port);
      interactWithTheUser();
    }
  }
 catch (  Exception x) {
    stopOrContinue(x);
  }
 finally {
    try {
      m_client.close();
    }
 catch (    Exception x) {
    }
  }
  System.exit(m_exitCode);
}
