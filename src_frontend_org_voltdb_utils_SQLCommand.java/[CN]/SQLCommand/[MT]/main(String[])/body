{
  TimeZone.setDefault(TimeZone.getTimeZone("GMT+0"));
  boolean debug=false;
  try {
    String serverList="localhost";
    int port=21212;
    String user="";
    String password="";
    List<String> queries=null;
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (arg.startsWith("--servers="))       serverList=arg.split("=")[1];
 else       if (arg.startsWith("--port="))       port=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--user="))       user=arg.split("=")[1];
 else       if (arg.startsWith("--password="))       password=arg.split("=")[1];
 else       if (arg.startsWith("--query=")) {
        List<String> argQueries=parseQuery(arg.substring(8));
        if (!argQueries.isEmpty()) {
          if (queries == null) {
            queries=argQueries;
          }
 else {
            queries.addAll(argQueries);
          }
        }
      }
 else       if (arg.startsWith("--output-format=")) {
        if (Pattern.compile("(fixed|csv|tab)",Pattern.CASE_INSENSITIVE).matcher(arg.split("=")[1].toLowerCase()).matches())         OutputFormat=arg.split("=")[1].toLowerCase();
 else         printUsage("Invalid value for --output-format");
      }
 else       if (arg.equals("--output-skip-metadata"))       OutputShowMetadata=false;
 else       if (arg.equals("--debug"))       debug=true;
 else       if (arg.equals("--help")) {
        printHelp(System.out);
        System.out.println("\n\n");
        printUsage(0);
      }
 else       if ((arg.equals("--usage")) || (arg.equals("-?")))       printUsage(0);
 else       printUsage("Invalid Parameter: " + arg);
    }
    String[] servers=serverList.split(",");
    loadSystemProcedures();
    DateParser.setLenient(true);
    ClientConfig config=new ClientConfig(user,password);
    config.setProcedureCallTimeout(0);
    VoltDB=getClient(config,servers,port);
    loadStoredProcedures(Procedures);
    in=new FileInputStream(FileDescriptor.in);
    out=new PrintWriter(new OutputStreamWriter(System.out,System.getProperty("jline.WindowsTerminal.output.encoding",System.getProperty("file.encoding"))));
    Input=new ConsoleReader(in,out);
    Input.setBellEnabled(false);
    Input.addCompletor(new SimpleCompletor(new String[]{"select","update","insert","delete","exec","file","recall","SELECT","UPDATE","INSERT","DELETE","EXEC","FILE","RECALL"}));
    boolean interactive=true;
    if (queries != null && !queries.isEmpty()) {
      interactive=false;
      for (int i=0; i < queries.size(); i++)       executeQuery(queries.get(i));
    }
    if (System.in.available() > 0) {
      interactive=false;
      queries=getQuery(false);
      if (queries == null)       System.exit(0);
 else       for (int i=0; i < queries.size(); i++)       executeQuery(queries.get(i));
    }
    if (interactive) {
      System.out.printf("SQL Command :: %s%s:%d\n",(user == "" ? "" : user + "@"),serverList,port);
      while ((queries=getQuery(true)) != null) {
        try {
          for (int i=0; i < queries.size(); i++)           executeQuery(queries.get(i));
        }
 catch (        Exception x) {
          System.err.println(x.getMessage());
          if (debug)           x.printStackTrace(System.err);
        }
      }
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    if (debug)     e.printStackTrace(System.err);
    System.exit(-1);
  }
 finally {
    try {
      VoltDB.close();
    }
 catch (    Exception _) {
    }
  }
}
