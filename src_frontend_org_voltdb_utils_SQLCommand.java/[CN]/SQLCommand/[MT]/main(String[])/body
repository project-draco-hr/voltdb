{
  TimeZone.setDefault(TimeZone.getTimeZone("GMT+0"));
  boolean debug=false;
  try {
    String serverList="localhost";
    int port=21212;
    String user="";
    String password="";
    String kerberos="";
    List<String> queries=null;
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (arg.startsWith("--servers="))       serverList=arg.split("=")[1];
 else       if (arg.startsWith("--port="))       port=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--user="))       user=arg.split("=")[1];
 else       if (arg.startsWith("--password="))       password=arg.split("=")[1];
 else       if (arg.startsWith("--kerberos="))       kerberos=arg.split("=")[1];
 else       if (arg.startsWith("--kerberos"))       kerberos="VoltDBClient";
 else       if (arg.startsWith("--query=")) {
        List<String> argQueries=parseQuery(arg.substring(8));
        if (!argQueries.isEmpty()) {
          if (queries == null) {
            queries=argQueries;
          }
 else {
            queries.addAll(argQueries);
          }
        }
      }
 else       if (arg.startsWith("--output-format=")) {
        if (Pattern.compile("(fixed|csv|tab)",Pattern.CASE_INSENSITIVE).matcher(arg.split("=")[1].toLowerCase()).matches()) {
          String formatName=arg.split("=")[1].toLowerCase();
          if (formatName.equals("fixed")) {
            m_outputFormatter=new SQLCommandOutputFormatterDefault();
          }
 else           if (formatName.equals("csv")) {
            m_outputFormatter=new SQLCommandOutputFormatterCSV();
          }
 else {
            m_outputFormatter=new SQLCommandOutputFormatterTabDelimited();
          }
        }
 else {
          printUsage("Invalid value for --output-format");
        }
      }
 else       if (arg.equals("--output-skip-metadata")) {
        m_outputShowMetadata=false;
      }
 else       if (arg.equals("--debug")) {
        debug=true;
      }
 else       if (arg.equals("--help")) {
        printHelp(System.out);
        System.out.println("\n\n");
        printUsage(0);
      }
 else       if ((arg.equals("--usage")) || (arg.equals("-?"))) {
        printUsage(0);
      }
 else {
        printUsage("Invalid Parameter: " + arg);
      }
    }
    String[] servers=serverList.split(",");
    openURLAsync();
    loadSystemProcedures();
    DateParser.setLenient(true);
    ClientConfig config=new ClientConfig(user,password);
    config.setProcedureCallTimeout(0);
    if (!kerberos.isEmpty()) {
      config.enableKerberosAuthentication(kerberos);
    }
    VoltDB=getClient(config,servers,port);
    loadStoredProcedures(Procedures,Classlist);
    in=new FileInputStream(FileDescriptor.in);
    out=System.out;
    lineInputReader=new SQLConsoleReader(in,out);
    lineInputReader.setBellEnabled(false);
    Completer completer=new SQLCompleter(m_commandPrefixes);
    lineInputReader.addCompleter(completer);
    historyFile=new FileHistory(new File(System.getProperty("user.home"),".sqlcmd_history"));
    lineInputReader.setHistory(historyFile);
    KeyMap keyMap=lineInputReader.getKeys();
    keyMap.bind(new Character(KeyMap.CTRL_D).toString(),new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        CursorBuffer cursorBuffer=lineInputReader.getCursorBuffer();
        if (cursorBuffer.length() == 0) {
          System.exit(0);
        }
 else {
          try {
            lineInputReader.delete();
          }
 catch (          IOException e1) {
          }
        }
      }
    }
);
    boolean interactive=true;
    if (queries != null && !queries.isEmpty()) {
      interactive=false;
      for (int i=0; i < queries.size(); i++)       executeQuery(queries.get(i));
    }
    if (System.in.available() > 0) {
      interactive=false;
      queries=getQuery(false);
      if (queries == null)       System.exit(0);
 else       for (int i=0; i < queries.size(); i++)       executeQuery(queries.get(i));
    }
    if (interactive) {
      System.out.printf("SQL Command :: %s%s:%d\n",(user == "" ? "" : user + "@"),serverList,port);
      while ((queries=getQuery(true)) != null) {
        try {
          for (int i=0; i < queries.size(); i++)           executeQuery(queries.get(i));
        }
 catch (        Exception x) {
          System.err.println(x.getMessage());
          if (debug)           x.printStackTrace(System.err);
        }
      }
    }
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    if (debug)     e.printStackTrace(System.err);
    System.exit(-1);
  }
 finally {
    try {
      VoltDB.close();
    }
 catch (    Exception _) {
    }
    if (historyFile != null) {
      try {
        historyFile.flush();
      }
 catch (      IOException e) {
        System.err.printf("* Unable to write history to \"%s\" *\n",historyFile.getFile().getPath());
        e.printStackTrace();
      }
    }
    if (lineInputReader != null) {
      lineInputReader.shutdown();
    }
  }
}
