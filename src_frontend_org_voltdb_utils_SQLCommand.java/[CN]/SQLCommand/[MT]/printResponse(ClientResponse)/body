{
  if (response.getStatus() != ClientResponse.SUCCESS)   throw new Exception("Execution Error: " + response.getStatusString());
  if (OutputFormat.equals("fixed")) {
    for (    VoltTable t : response.getResults()) {
      if (isUpdateResult(t)) {
        if (OutputShowMetadata)         System.out.printf("\n\n(%d row(s) affected)\n",t.fetchRow(0).getLong(0));
        continue;
      }
      int columnCount=t.getColumnCount();
      int[] padding=new int[columnCount];
      String[] fmt=new String[columnCount];
      for (int i=0; i < columnCount; i++)       padding[i]=OutputShowMetadata ? t.getColumnName(i).length() : 0;
      t.resetRowPosition();
      while (t.advanceRow()) {
        for (int i=0; i < columnCount; i++) {
          Object v=t.get(i,t.getColumnType(i));
          if (t.wasNull())           v="NULL";
          int l=t.getColumnType(i) == VoltType.VARBINARY ? ((byte[])v).length * 2 : v.toString().length();
          if (padding[i] < l)           padding[i]=l;
        }
      }
      for (int i=0; i < columnCount; i++) {
        padding[i]+=1;
        fmt[i]="%1$" + ((t.getColumnType(i) == VoltType.STRING || t.getColumnType(i) == VoltType.TIMESTAMP || t.getColumnType(i) == VoltType.VARBINARY) ? "-" : "") + padding[i]+ "s";
      }
      if (OutputShowMetadata) {
        for (int i=0; i < columnCount; i++) {
          System.out.printf("%1$-" + padding[i] + "s",t.getColumnName(i));
          if (i < columnCount - 1)           System.out.print(" ");
        }
        System.out.print("\n");
        for (int i=0; i < columnCount; i++) {
          System.out.print(paddingString("",padding[i],'-',false));
          if (i < columnCount - 1)           System.out.print(" ");
        }
        System.out.print("\n");
      }
      t.resetRowPosition();
      while (t.advanceRow()) {
        for (int i=0; i < columnCount; i++) {
          Object v=t.get(i,t.getColumnType(i));
          if (t.wasNull())           v="NULL";
 else           if (t.getColumnType(i) == VoltType.VARBINARY)           v=byteArrayToHexString((byte[])v);
 else           v=v.toString();
          System.out.printf(fmt[i],v);
          if (i < columnCount - 1)           System.out.print(" ");
        }
        System.out.print("\n");
      }
      if (OutputShowMetadata)       System.out.printf("\n\n(%d row(s) affected)\n",t.getRowCount());
    }
  }
 else {
    String separator=OutputFormat.equals("csv") ? "," : "\t";
    for (    VoltTable t : response.getResults()) {
      if (isUpdateResult(t)) {
        if (OutputShowMetadata)         System.out.printf("\n\n(%d row(s) affected)\n",t.fetchRow(0).getLong(0));
        continue;
      }
      int columnCount=t.getColumnCount();
      if (OutputShowMetadata) {
        for (int i=0; i < columnCount; i++) {
          if (i > 0)           System.out.print(separator);
          System.out.print(t.getColumnName(i));
        }
        System.out.print("\n");
      }
      t.resetRowPosition();
      while (t.advanceRow()) {
        for (int i=0; i < columnCount; i++) {
          if (i > 0)           System.out.print(separator);
          Object v=t.get(i,t.getColumnType(i));
          if (t.wasNull())           v="NULL";
 else           if (t.getColumnType(i) == VoltType.VARBINARY)           v=byteArrayToHexString((byte[])v);
 else           v=v.toString();
          System.out.print(v);
        }
        System.out.print("\n");
      }
      if (OutputShowMetadata)       System.out.printf("\n\n(%d row(s) affected)\n",t.getRowCount());
    }
  }
}
