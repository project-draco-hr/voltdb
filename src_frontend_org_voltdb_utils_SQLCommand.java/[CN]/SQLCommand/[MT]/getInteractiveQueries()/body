{
  m_returningToPromptAfterError=false;
  List<String> multiLineStatementBuffer=new ArrayList<>();
  List<QueryInfo> queryBatchList=new ArrayList<QueryInfo>();
  StringBuilder query=new StringBuilder();
  boolean isRecall=false;
  boolean executeImmediate=false;
  while (!executeImmediate) {
    String prompt=isRecall ? "" : ((RecallableSessionLines.size() + 1) + "> ");
    isRecall=false;
    String line=m_lineInputReader.readLine(prompt);
    assert(line != null);
    executeImmediate=SQLParser.isSemiColonTerminated(line);
    if (multiLineStatementBuffer.isEmpty()) {
      if (SQLParser.isExitCommand(line)) {
        return null;
      }
      ParseRecallResults recallParseResults=SQLParser.parseRecallStatement(line,RecallableSessionLines.size() - 1);
      if (recallParseResults != null) {
        if (recallParseResults.error == null) {
          line=RecallableSessionLines.get(recallParseResults.line);
          m_lineInputReader.putString(line);
          m_lineInputReader.flush();
          isRecall=true;
        }
 else {
          System.out.printf("%d> %s\n%d",RecallableSessionLines.size(),recallParseResults.error);
        }
        executeImmediate=false;
        continue;
      }
      RecallableSessionLines.add(line);
      if (executesAsSimpleDirective(line)) {
        executeImmediate=false;
        continue;
      }
      if (SQLParser.isGoCommand(line)) {
        executeImmediate=true;
        line=";";
      }
      line=handleTranslatedCommands(line);
      if (line == null) {
        executeImmediate=false;
        continue;
      }
      FileInfo fileInfo=SQLParser.parseFileStatement(line);
      if (fileInfo != null) {
        List<QueryInfo> contentInfo=readScriptFile(fileInfo,m_lineInputReader);
        if (m_returningToPromptAfterError) {
          query=new StringBuilder();
          m_returningToPromptAfterError=false;
          continue;
        }
        if (contentInfo == null || contentInfo.isEmpty()) {
          executeImmediate=true;
          continue;
        }
        updateQueryBatch(queryBatchList,query,contentInfo);
        query=new StringBuilder();
        executeImmediate=true;
        continue;
      }
    }
 else {
      RecallableSessionLines.add(line);
    }
    query.append(line + "\n");
  }
  if (query.length() > 0) {
    queryBatchList.add(new QueryInfo(query));
  }
  return queryBatchList;
}
