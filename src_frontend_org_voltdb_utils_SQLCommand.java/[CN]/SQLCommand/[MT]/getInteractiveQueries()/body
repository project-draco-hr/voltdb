{
  m_returningToPromptAfterError=false;
  List<String> multiLineStatementBuffer=new ArrayList<>();
  List<String> parsedQueries=new ArrayList<>();
  StringBuilder query=new StringBuilder();
  boolean isRecall=false;
  while (true) {
    String prompt=isRecall ? "" : ((Lines.size() + 1) + "> ");
    isRecall=false;
    String line=lineInputReader.readLine(prompt);
    if (line == null) {
      parsedQueries=parseQuery(query.toString());
      return parsedQueries;
    }
    boolean executeImmediate=SemicolonToken.matcher(line).matches();
    if (multiLineStatementBuffer.isEmpty()) {
      if (ExitToken.matcher(line).matches()) {
        return null;
      }
      Matcher recallMatcher=RecallToken.matcher(line);
      if (recallMatcher.matches()) {
        int recall=-1;
        try {
          recall=Integer.parseInt(recallMatcher.group(1)) - 1;
        }
 catch (        Exception x) {
        }
        if (recall > -1 && recall < Lines.size()) {
          line=Lines.get(recall);
          lineInputReader.putString(line);
          lineInputReader.flush();
          isRecall=true;
        }
 else {
          System.out.printf("%s> Invalid RECALL reference: '" + recallMatcher.group(1) + "'.\n",Lines.size());
        }
        continue;
      }
      Lines.add(line);
      if (executesAsSimpleDirective(line)) {
        continue;
      }
      if (GoToken.matcher(line).matches()) {
        line=";";
      }
      Matcher fileMatcher=FileToken.matcher(line);
      if (fileMatcher.matches()) {
        line=readScriptFile(fileMatcher.group(1));
        if (m_returningToPromptAfterError) {
          query=new StringBuilder();
          line=null;
          m_returningToPromptAfterError=false;
          continue;
        }
      }
    }
 else {
      Lines.add(line);
    }
    query.append(line);
    query.append("\n");
    if (executeImmediate) {
      parsedQueries=parseQuery(query.toString());
      return parsedQueries;
    }
 else {
    }
  }
}
