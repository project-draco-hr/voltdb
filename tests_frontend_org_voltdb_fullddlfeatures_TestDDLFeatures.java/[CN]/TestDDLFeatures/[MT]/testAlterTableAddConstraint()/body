{
  ClientResponse resp;
  boolean threw;
  VoltTable vt;
  assertTrue(findTableInSystemCatalogResults("T40"));
  resp=m_client.callProcedure("T40.insert",1,2);
  assertEquals(resp.getResults()[0].getRowCount(),1);
  threw=false;
  try {
    m_client.callProcedure("T40.insert",1,2);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate UNIQUE constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T42"));
  resp=m_client.callProcedure("T42.insert",1,2);
  assertEquals(resp.getResults()[0].getRowCount(),1);
  threw=false;
  try {
    m_client.callProcedure("T42.insert",1,2);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate ASSUMEUNIQUE constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T42A"));
  resp=m_client.callProcedure("T42AA.insert",1,2,3);
  assertEquals(resp.getResults()[0].getRowCount(),1);
  threw=false;
  try {
    m_client.callProcedure("T42A.insert",1,2,3);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate ASSUMEUNIQUE constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T43"));
  resp=m_client.callProcedure("T43.insert",1);
  assertEquals(resp.getResults()[0].getRowCount(),1);
  threw=false;
  try {
    m_client.callProcedure("T43.insert",2);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate LIMIT PARTITION ROW constraint",threw);
  assertEquals(indexedColumnCount("T43"),0);
}
