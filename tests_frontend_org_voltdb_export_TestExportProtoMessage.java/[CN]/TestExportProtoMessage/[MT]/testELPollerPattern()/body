{
  final ExportProtoMessage r=new ExportProtoMessage(-1,1,"bar");
  ByteBuffer data=ByteBuffer.allocate(8);
  data.putInt(100);
  data.putInt(200);
  data.flip();
  r.pollResponse(1000,data);
  ByteBuffer b=new DeferredSerialization(){
    @Override public ByteBuffer[] serialize() throws IOException {
      ByteBuffer buf=ByteBuffer.allocate(r.serializableBytes() + 4);
      r.flattenToBuffer(buf);
      return new ByteBuffer[]{buf};
    }
    @Override public void cancel(){
    }
  }
.serialize()[0];
  b.flip();
  assertEquals(39,b.getInt());
  FastDeserializer fds=new FastDeserializer(b);
  ExportProtoMessage m=ExportProtoMessage.readExternal(fds);
  assertEquals(1,m.m_partitionId);
  assertEquals("bar",m.getSignature());
  assertTrue(m.isPollResponse());
  assertTrue(m.getData().remaining() == 8);
  assertMsgType(m,ExportProtoMessage.kPollResponse);
}
