{
  Statement cs=null;
  sessionProxy.resetVoltNodeIds();
  try {
    cs=sessionProxy.compileStatement(sql);
  }
 catch (  HsqlException caught) {
switch (caught.getErrorCode()) {
case -ErrorCode.X_42581:
      throw new HSQLParseException("SQL Syntax error in \"" + sql + "\" "+ caught.getMessage(),caught);
default :
    throw new HSQLParseException("Error in \"" + sql + "\" "+ caught.getMessage(),caught);
}
}
catch (Throwable caught) {
m_logger.error("Unexpected error in the SQL parser for statement \"" + sql + "\" ",caught);
throw new HSQLParseException("An unexpected system error was logged by the SQL parser for statement \"" + sql + "\" ",caught);
}
Result result=Result.newPrepareResponse(cs);
if (result.hasError()) {
throw new HSQLParseException(result.getMainString());
}
VoltXMLElement xml=null;
xml=cs.voltGetStatementXML(sessionProxy);
if (m_logger.isDebugEnabled()) {
try {
  m_logger.debug(String.format("SQL: %s\n",sql));
  ;
  m_logger.debug(String.format("HSQLDB:\n%s",(cs == null) ? "<NULL>" : cs.describe(sessionProxy)));
  m_logger.debug(String.format("VOLTDB:\n%s",(xml == null) ? "<NULL>" : xml));
}
 catch (Exception caught) {
  m_logger.warn("Unexpected error in the SQL parser",caught);
  caught.printStackTrace(System.out);
}
}
sessionProxy.sessionData.persistentStoreCollection.clearAllTables();
fixupInStatementExpressions(xml);
assert(xml != null);
return xml;
}
