{
  lock();
  try {
    long now=map.ticker.read();
    preWriteCleanup(now);
    int newCount=this.count - 1;
    AtomicReferenceArray<ReferenceEntry<K,V>> table=this.table;
    int index=hash & (table.length() - 1);
    ReferenceEntry<K,V> first=table.get(index);
    for (ReferenceEntry<K,V> e=first; e != null; e=e.getNext()) {
      K entryKey=e.getKey();
      if (e.getHash() == hash && entryKey != null && map.keyEquivalence.equivalent(key,entryKey)) {
        ValueReference<K,V> valueReference=e.getValueReference();
        V entryValue=valueReference.get();
        RemovalCause cause;
        if (entryValue != null) {
          cause=RemovalCause.EXPLICIT;
        }
 else         if (valueReference.isActive()) {
          cause=RemovalCause.COLLECTED;
        }
 else {
          return null;
        }
        ++modCount;
        ReferenceEntry<K,V> newFirst=removeValueFromChain(first,e,entryKey,hash,valueReference,cause);
        newCount=this.count - 1;
        table.set(index,newFirst);
        this.count=newCount;
        return entryValue;
      }
    }
    return null;
  }
  finally {
    unlock();
    postWriteCleanup();
  }
}
