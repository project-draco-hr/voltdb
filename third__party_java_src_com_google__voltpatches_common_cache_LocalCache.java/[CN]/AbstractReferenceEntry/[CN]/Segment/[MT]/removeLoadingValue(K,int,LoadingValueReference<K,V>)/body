{
  lock();
  try {
    AtomicReferenceArray<ReferenceEntry<K,V>> table=this.table;
    int index=hash & (table.length() - 1);
    ReferenceEntry<K,V> first=table.get(index);
    for (ReferenceEntry<K,V> e=first; e != null; e=e.getNext()) {
      K entryKey=e.getKey();
      if (e.getHash() == hash && entryKey != null && map.keyEquivalence.equivalent(key,entryKey)) {
        ValueReference<K,V> v=e.getValueReference();
        if (v == valueReference) {
          if (valueReference.isActive()) {
            e.setValueReference(valueReference.getOldValue());
          }
 else {
            ReferenceEntry<K,V> newFirst=removeEntryFromChain(first,e);
            table.set(index,newFirst);
          }
          return true;
        }
        return false;
      }
    }
    return false;
  }
  finally {
    unlock();
    postWriteCleanup();
  }
}
