{
  lock();
  try {
    long now=map.ticker.read();
    preWriteCleanup(now);
    AtomicReferenceArray<ReferenceEntry<K,V>> table=this.table;
    int index=hash & (table.length() - 1);
    ReferenceEntry<K,V> first=table.get(index);
    for (ReferenceEntry<K,V> e=first; e != null; e=e.getNext()) {
      K entryKey=e.getKey();
      if (e.getHash() == hash && entryKey != null && map.keyEquivalence.equivalent(key,entryKey)) {
        ValueReference<K,V> valueReference=e.getValueReference();
        V entryValue=valueReference.get();
        if (entryValue == null) {
          if (valueReference.isActive()) {
            int newCount=this.count - 1;
            ++modCount;
            ReferenceEntry<K,V> newFirst=removeValueFromChain(first,e,entryKey,hash,valueReference,RemovalCause.COLLECTED);
            newCount=this.count - 1;
            table.set(index,newFirst);
            this.count=newCount;
          }
          return null;
        }
        ++modCount;
        enqueueNotification(key,hash,valueReference,RemovalCause.REPLACED);
        setValue(e,key,newValue,now);
        evictEntries(e);
        return entryValue;
      }
    }
    return null;
  }
  finally {
    unlock();
    postWriteCleanup();
  }
}
