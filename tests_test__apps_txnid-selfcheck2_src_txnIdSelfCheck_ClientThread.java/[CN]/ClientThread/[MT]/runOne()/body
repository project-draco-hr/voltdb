{
  byte shouldRollback=(byte)(m_random.nextInt(10) == 0 ? 1 : 0);
  try {
    String procName=null;
    int expectedTables=5;
switch (m_type) {
case PARTITIONED_SP:
      procName="UpdatePartitionedSP";
    break;
case PARTITIONED_MP:
  procName="UpdatePartitionedMP";
expectedTables=6;
break;
case REPLICATED:
procName="UpdateReplicatedMP";
expectedTables=6;
break;
case HYBRID:
procName="UpdateBothMP";
expectedTables=6;
break;
case ADHOC_MP:
procName="UpdateReplicatedMPInProcAdHoc";
expectedTables=6;
break;
}
byte[] payload=m_processor.generateForStore().getStoreValue();
ClientResponse response;
try {
response=m_client.callProcedure(procName,m_cid,m_nextRid,payload,shouldRollback);
}
 catch (Exception e) {
if (shouldRollback == 0) {
log.warn("ClientThread threw after " + m_txnsRun.get() + " calls while calling procedure: "+ procName+ " with args: cid: "+ m_cid+ ", nextRid: "+ m_nextRid+ ", payload: "+ payload+ ", shouldRollback: "+ shouldRollback);
}
throw e;
}
if (response.getStatus() != ClientResponse.SUCCESS) {
throw new UserProcCallException(response);
}
VoltTable[] results=response.getResults();
m_txnsRun.incrementAndGet();
if (results.length != expectedTables) {
hardStop(String.format("Client cid %d procedure %s returned %d results instead of %d",m_cid,procName,results.length,expectedTables),response);
}
VoltTable data=results[3];
VoltTable view=results[4];
try {
UpdateBaseProc.validateCIDData(data,view,"ClientThread:" + m_cid);
}
 catch (VoltAbortException vae) {
log.error("validateCIDData failed on: " + procName + ", shouldRollback: "+ shouldRollback+ " data: "+ data);
throw vae;
}
}
  finally {
if (shouldRollback == 0) {
m_nextRid++;
}
}
}
