{
  setName("ClientThread(CID=" + String.valueOf(cid) + ")");
  m_type=Type.typeFromId(mpRatio,allowInProcAdhoc);
  m_cid=cid;
  m_client=client;
  m_processor=processor;
  m_txnsRun=txnsRun;
  m_permits=permits;
  log.info("ClientThread(CID=" + String.valueOf(cid) + ") "+ m_type.toString());
  String sql1=String.format("select * from partitioned where cid = %d order by rid desc limit 1",cid);
  String sql2=String.format("select * from replicated  where cid = %d order by rid desc limit 1",cid);
  VoltTable t1;
  VoltTable t2;
  while (true) {
    try {
      t1=client.callProcedure("@AdHoc",sql1).getResults()[0];
      t2=client.callProcedure("@AdHoc",sql2).getResults()[0];
      client.callProcedure("PopulateDimension",cid);
      break;
    }
 catch (    Exception e) {
      log.warn("ClientThread threw exception in initialization, will retry",e);
      try {
        Thread.sleep(3000);
      }
 catch (      Exception e2) {
      }
    }
  }
  long pNextRid=(t1.getRowCount() == 0) ? 1 : t1.fetchRow(0).getLong("rid") + 1;
  long rNextRid=(t2.getRowCount() == 0) ? 1 : t2.fetchRow(0).getLong("rid") + 1;
  m_nextRid=pNextRid > rNextRid ? pNextRid : rNextRid;
}
