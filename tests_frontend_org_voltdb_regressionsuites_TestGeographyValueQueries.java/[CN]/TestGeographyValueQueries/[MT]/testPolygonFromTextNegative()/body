{
  Client client=getClient();
  validateTableOfScalarLongs(client,"insert into t (pk) values (0)",new long[]{1});
  assertGeographyValueWktParseError(client,"does not start with POLYGON keyword","NOT_A_POLYGON(...)");
  assertGeographyValueWktParseError(client,"missing left parenthesis after POLYGON","POLYGON []");
  assertGeographyValueWktParseError(client,"expected left parenthesis to start a ring","POLYGON ()");
  assertGeographyValueWktParseError(client,"A polygon ring must contain at least 4 points","POLYGON (())");
  assertGeographyValueWktParseError(client,"expected left parenthesis to start a ring","POLYGON(3 3, 4 4, 5 5, 3 3)");
  assertGeographyValueWktParseError(client,"expected a number but found ','","POLYGON ((80 80, 60, 70 70, 90 90))");
  assertGeographyValueWktParseError(client,"unexpected token: '60'","POLYGON ((80 80 60 60, 70 70, 90 90))");
  assertGeographyValueWktParseError(client,"unexpected end of input","POLYGON ((80 80, 60 60, 70 70,");
  assertGeographyValueWktParseError(client,"expected a number but found '\\('","POLYGON ((80 80, 60 60, 70 70, (30 15, 15 30, 15 45)))");
  assertGeographyValueWktParseError(client,"unexpected token: 'z'","POLYGON ((80 80, 60 60, 70 70, 80 80)z)");
  assertGeographyValueWktParseError(client,"unrecognized input after WKT: 'blahblah'","POLYGON ((80 80, 60 60, 70 70, 80 80))blahblah");
  assertGeographyValueWktParseError(client,"A polygon ring must contain at least 4 points","POLYGON ((80 80, 60 60, 80 80))");
  assertGeographyValueWktParseError(client,"A polygon ring must contain at least 4 points","POLYGON ((80 80, 60 60, 50 80, 80 80), ())");
  assertGeographyValueWktParseError(client,"A polygon ring's first vertex must be equal to its last vertex","POLYGON ((80 80, 60 60, 70 70, 81 81))");
  assertGeographyValueWktParseError(client,"expected a number but found '32.305-64.751'","POLYGON((32.305-64.751,25.244-80.437,18.476-66.371,32.305-64.751))");
  assertGeographyValueWktParseError(client,"Invalid input to POLYGONFROMTEXT: '200'.  Longitude must be in the range \\[-180,180\\]","POLYGON((0 0,  200 0,  200   45, 0   45, 0 0))");
  assertGeographyValueWktParseError(client,"Invalid input to POLYGONFROMTEXT: '100'.  Latitude must be in the range \\[-90,90\\]","POLYGON((0 0,   45 0,   45  100, 0  100, 0 0))");
  assertGeographyValueWktParseError(client,"Invalid input to POLYGONFROMTEXT: '-200'.  Longitude must be in the range \\[-180,180\\]","POLYGON((0 0, -200 0, -200   45, 0   45, 0 0))");
  assertGeographyValueWktParseError(client,"Invalid input to POLYGONFROMTEXT: '-100'.  Latitude must be in the range \\[-90,90\\]","POLYGON((0 0,   45 0,   45 -100, 0 -100, 0 0))");
}
