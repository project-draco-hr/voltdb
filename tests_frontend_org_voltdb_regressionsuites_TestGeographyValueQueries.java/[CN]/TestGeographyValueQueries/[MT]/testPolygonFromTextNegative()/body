{
  Client client=getClient();
  validateTableOfScalarLongs(client,"insert into t (pk) values (0)",new long[]{1});
  assertWktParseError(client,"does not start with POLYGON keyword","NOT_A_POLYGON(...)");
  assertWktParseError(client,"missing left parenthesis after POLYGON","POLYGON []");
  assertWktParseError(client,"expected left parenthesis to start a loop","POLYGON ()");
  assertWktParseError(client,"A polygon ring must contain at least 4 points","POLYGON (())");
  assertWktParseError(client,"expected left parenthesis to start a loop","POLYGON(3 3, 4 4, 5 5, 3 3)");
  assertWktParseError(client,"expected a number but found ','","POLYGON ((80 80, 60, 70 70, 90 90))");
  assertWktParseError(client,"unexpected token: '60'","POLYGON ((80 80 60 60, 70 70, 90 90))");
  assertWktParseError(client,"unexpected end of input","POLYGON ((80 80, 60 60, 70 70,");
  assertWktParseError(client,"expected a number but found '\\('","POLYGON ((80 80, 60 60, 70 70, (30 15, 15 30, 15 45)))");
  assertWktParseError(client,"unexpected token: 'z'","POLYGON ((80 80, 60 60, 70 70, 80 80)z)");
  assertWktParseError(client,"unrecognized input after WKT: 'blahblah'","POLYGON ((80 80, 60 60, 70 70, 80 80))blahblah");
  assertWktParseError(client,"A polygon ring must contain at least 4 points","POLYGON ((80 80, 60 60, 80 80))");
  assertWktParseError(client,"A polygon ring must contain at least 4 points","POLYGON ((80 80, 60 60, 50 80, 80 80), ())");
  assertWktParseError(client,"A polygon ring's first vertex must be equal to its last vertex","POLYGON ((80 80, 60 60, 70 70, 81 81))");
  assertWktParseError(client,"expected a number but found '32.305-64.751'","POLYGON((32.305-64.751,25.244-80.437,18.476-66.371,32.305-64.751))");
}
