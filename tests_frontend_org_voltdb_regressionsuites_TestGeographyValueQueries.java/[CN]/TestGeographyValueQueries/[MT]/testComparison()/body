{
  Client client=getClient();
  for (  String tbl : TABLES) {
    fillTable(client,tbl,0);
  }
  for (  String tbl : TABLES) {
    VoltTable vt=client.callProcedure("@AdHoc","select t1.pk, t1.name, t1.poly " + "from " + tbl + " as t1, t as t2 "+ "where t1.poly = t2.poly "+ "order by t1.pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle",BERMUDA_TRIANGLE_POLY},{1,"Bermuda Triangle with a hole",BERMUDA_TRIANGLE_HOLE_POLY},{2,"Billerica Triangle",BILLERICA_TRIANGLE_POLY},{3,"Lowell Square",LOWELL_SQUARE_POLY}},vt);
    vt=client.callProcedure("@AdHoc","select t1.pk, t1.name, t2.pk, t2.name " + "from " + tbl + " as t1, t as t2 "+ "where t1.poly != t2.poly "+ "order by t1.pk, t2.pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle",1,"Bermuda Triangle with a hole"},{0,"Bermuda Triangle",2,"Billerica Triangle"},{0,"Bermuda Triangle",3,"Lowell Square"},{1,"Bermuda Triangle with a hole",0,"Bermuda Triangle"},{1,"Bermuda Triangle with a hole",2,"Billerica Triangle"},{1,"Bermuda Triangle with a hole",3,"Lowell Square"},{2,"Billerica Triangle",0,"Bermuda Triangle"},{2,"Billerica Triangle",1,"Bermuda Triangle with a hole"},{2,"Billerica Triangle",3,"Lowell Square"},{3,"Lowell Square",0,"Bermuda Triangle"},{3,"Lowell Square",1,"Bermuda Triangle with a hole"},{3,"Lowell Square",2,"Billerica Triangle"}},vt);
    vt=client.callProcedure("@AdHoc","select t1.pk, t1.name, t2.pk, t2.name " + "from " + tbl + " as t1, t as t2 "+ "where t1.poly < t2.poly "+ "order by t1.pk, t2.pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle",1,"Bermuda Triangle with a hole"},{0,"Bermuda Triangle",3,"Lowell Square"},{2,"Billerica Triangle",0,"Bermuda Triangle"},{2,"Billerica Triangle",1,"Bermuda Triangle with a hole"},{2,"Billerica Triangle",3,"Lowell Square"},{3,"Lowell Square",1,"Bermuda Triangle with a hole"}},vt);
    vt=client.callProcedure("@AdHoc","select t1.pk, t1.name, t2.pk, t2.name " + "from " + tbl + " as t1, t as t2 "+ "where t1.poly <= t2.poly "+ "order by t1.pk, t2.pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle",0,"Bermuda Triangle"},{0,"Bermuda Triangle",1,"Bermuda Triangle with a hole"},{0,"Bermuda Triangle",3,"Lowell Square"},{1,"Bermuda Triangle with a hole",1,"Bermuda Triangle with a hole"},{2,"Billerica Triangle",0,"Bermuda Triangle"},{2,"Billerica Triangle",1,"Bermuda Triangle with a hole"},{2,"Billerica Triangle",2,"Billerica Triangle"},{2,"Billerica Triangle",3,"Lowell Square"},{3,"Lowell Square",1,"Bermuda Triangle with a hole"},{3,"Lowell Square",3,"Lowell Square"}},vt);
    vt=client.callProcedure("@AdHoc","select t1.pk, t1.name, t2.pk, t2.name " + "from " + tbl + " as t1, t as t2 "+ "where t1.poly > t2.poly "+ "order by t1.pk, t2.pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle",2,"Billerica Triangle"},{1,"Bermuda Triangle with a hole",0,"Bermuda Triangle"},{1,"Bermuda Triangle with a hole",2,"Billerica Triangle"},{1,"Bermuda Triangle with a hole",3,"Lowell Square"},{3,"Lowell Square",0,"Bermuda Triangle"},{3,"Lowell Square",2,"Billerica Triangle"}},vt);
    vt=client.callProcedure("@AdHoc","select t1.pk, t1.name, t2.pk, t2.name " + "from " + tbl + " as t1, t as t2 "+ "where t1.poly >= t2.poly "+ "order by t1.pk, t2.pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle",0,"Bermuda Triangle"},{0,"Bermuda Triangle",2,"Billerica Triangle"},{1,"Bermuda Triangle with a hole",0,"Bermuda Triangle"},{1,"Bermuda Triangle with a hole",1,"Bermuda Triangle with a hole"},{1,"Bermuda Triangle with a hole",2,"Billerica Triangle"},{1,"Bermuda Triangle with a hole",3,"Lowell Square"},{2,"Billerica Triangle",2,"Billerica Triangle"},{3,"Lowell Square",0,"Bermuda Triangle"},{3,"Lowell Square",2,"Billerica Triangle"},{3,"Lowell Square",3,"Lowell Square"}},vt);
    vt=client.callProcedure("@AdHoc","select pk, name " + "from " + tbl + " "+ "where poly is null "+ "order by pk").getResults()[0];
    assertContentOfTable(new Object[][]{{4,"null poly"}},vt);
    vt=client.callProcedure("@AdHoc","select pk, name " + "from " + tbl + " "+ "where poly is not null "+ "order by pk").getResults()[0];
    assertContentOfTable(new Object[][]{{0,"Bermuda Triangle"},{1,"Bermuda Triangle with a hole"},{2,"Billerica Triangle"},{3,"Lowell Square"}},vt);
  }
}
