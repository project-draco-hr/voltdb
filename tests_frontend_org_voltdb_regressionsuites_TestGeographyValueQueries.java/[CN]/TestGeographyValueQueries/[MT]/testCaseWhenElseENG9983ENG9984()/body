{
  final double EPSILON=1.0e-13;
  Client client=getClient();
  fillCheesyTable(client);
  VoltTable vt=client.callProcedure("@AdHoc","select CASE WHEN area(t.poly) < area(alt_t.poly) THEN t.poly ELSE alt_t.poly END" + " from t, t alt_t where t.pk + 1 = alt_t.pk and t.pk >= 100 order by t.pk;").getResults()[0];
  assertEquals("Expected (N-1) rows.",3,vt.getRowCount());
  assertTrue(vt.advanceRow());
  GeographyValue cheesyRoundTripper1=vt.getGeographyValue(0);
  vt=client.callProcedure("@AdHoc","select CASE WHEN area(t.poly) < area(alt_t.poly) THEN t.poly ELSE alt_t.poly END" + " from t, t alt_t where t.pk >= 100 and alt_t.pk >= 100 order by t.pk;").getResults()[0];
  assertEquals("Expected (N^2) rows.",16,vt.getRowCount());
  assertTrue(vt.advanceRow());
  GeographyValue cheesyRoundTripper2=vt.getGeographyValue(0);
  assertApproximatelyEquals("Expected Equivalent Round Trip Polygons",cheesyRoundTripper1,cheesyRoundTripper2,EPSILON);
  vt=client.callProcedure("@AdHoc","select CASE WHEN longitude(l.loc_point) <= longitude(alt_l.loc_point) THEN l.loc_point ELSE alt_l.loc_point END" + " from location l, location alt_l where l.pk + 1 = alt_l.pk and l.pk >= 300 order by l.pk;").getResults()[0];
  assertEquals("Expected (N-1) rows.",3,vt.getRowCount());
  assertTrue(vt.advanceRow());
  GeographyPointValue cheesyRoundTripper3=vt.getGeographyPointValue(0);
  vt=client.callProcedure("@AdHoc","select CASE WHEN longitude(l.loc_point) <= longitude(alt_l.loc_point) THEN l.loc_point ELSE alt_l.loc_point END" + " from location l, location alt_l where l.pk >= 300 and alt_l.pk >= 300 order by l.pk;").getResults()[0];
  assertEquals("Expected (N^2) rows.",16,vt.getRowCount());
  assertTrue(vt.advanceRow());
  GeographyPointValue cheesyRoundTripper4=vt.getGeographyPointValue(0);
  assertApproximatelyEquals("Expected Equivalent Round Trip Points",cheesyRoundTripper3,cheesyRoundTripper4,EPSILON);
  vt=client.callProcedure("@AdHoc","select CASE WHEN area(t.poly) <= area(alt_t.poly) THEN t.poly END" + " from t, t alt_t where t.pk >= 100 and alt_t.pk >= 100 order by t.pk;").getResults()[0];
  assertEquals("Expected (N^2) rows.",16,vt.getRowCount());
  assertTrue(vt.advanceRow());
  GeographyValue cheesyRoundTripper5=vt.getGeographyValue(0);
  assertFalse(vt.wasNull());
  assertApproximatelyEquals("Expected Equivalent Round Trip Polygons",cheesyRoundTripper1,cheesyRoundTripper5,EPSILON);
}
