{
  final long destinationSiteId=rm.sourceSite();
  if (!tracker.getAllSites().contains(destinationSiteId)) {
    return null;
  }
  ArrayList<Pair<String,Integer>> tables=new ArrayList<Pair<String,Integer>>();
  Iterator<Table> ti=db.getTables().iterator();
  while (ti.hasNext()) {
    Table t=ti.next();
    if (!CatalogUtil.isTableExportOnly(db,t) && t.getMaterializer() == null) {
      tables.add(Pair.of(t.getTypeName(),t.getRelativeIndex()));
    }
  }
  recoveryLog.info("Found " + tables.size() + " tables to recover");
  HashMap<Pair<String,Integer>,HashSet<Long>> tableToDestinationSite=new HashMap<Pair<String,Integer>,HashSet<Long>>();
  for (  Pair<String,Integer> table : tables) {
    recoveryLog.info("Initiating recovery for table " + table.getFirst());
    HashSet<Long> destinations=tableToDestinationSite.get(table);
    if (destinations == null) {
      destinations=new HashSet<Long>();
      tableToDestinationSite.put(table,destinations);
    }
    destinations.add(destinationSiteId);
  }
  RecoverySiteProcessorSource source=null;
  final long destinationTxnId=rm.txnId();
  source=new RecoverySiteProcessorSource(site,destinationTxnId,destinationSiteId,rm.getHSId(),tableToDestinationSite,engine,mailbox,VoltDB.instance().getHostMessenger().createMailbox(),siteId,onCompletion,messageHandler);
  return source;
}
