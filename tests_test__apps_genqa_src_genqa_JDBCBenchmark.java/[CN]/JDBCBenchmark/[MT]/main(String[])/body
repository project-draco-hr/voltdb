{
  try {
    AppHelper apph=new AppHelper(JDBCBenchmark.class.getCanonicalName()).add("threads","thread_count","Number of concurrent threads attacking the database.",1).add("displayinterval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("poolsize","pool_size","Size of the record pool to operate on - larger sizes will cause a higher insert/update-delete rate.",100000).add("procedure","procedure_name","Procedure to call.","JiggleSinglePartition").add("wait","wait_duration","Wait duration (only when calling one of the Wait procedures), in milliseconds.",0).setArguments(args);
    final int threadCount=apph.intValue("threads");
    final long displayInterval=apph.longValue("displayinterval");
    final long duration=apph.longValue("duration");
    final String servers=apph.stringValue("servers");
    final int port=apph.intValue("port");
    final int poolSize=apph.intValue("poolsize");
    final String procedure=apph.stringValue("procedure");
    final long wait=apph.intValue("wait");
    final String csv=apph.stringValue("statsfile");
    apph.validate("duration",(duration > 0)).validate("threads",(threadCount > 0)).validate("poolsize",(poolSize > 0)).validate("wait",(wait >= 0));
    apph.printActualUsage();
    Class.forName("org.voltdb.jdbc.Driver");
    String url="jdbc:voltdb://" + servers + ":"+ port;
    System.out.printf("Connecting to: %s\n",url);
    int sleep=1000;
    while (true) {
      try {
        Con=DriverManager.getConnection(url,"","");
        break;
      }
 catch (      Exception e) {
        System.err.printf("Connection failed - retrying in %d second(s).\n",sleep / 1000);
        try {
          Thread.sleep(sleep);
        }
 catch (        Exception tie) {
        }
        if (sleep < 8000)         sleep+=sleep;
      }
    }
    System.out.println("Connected.  Starting benchmark.");
    final ClientStatsContext fullStatsContext=((IVoltDBConnection)Con).createStatsContext();
    periodicStatsContext=((IVoltDBConnection)Con).createStatsContext();
    benchmarkStartTS=System.currentTimeMillis();
    Timer timer=new Timer();
    TimerTask statsPrinting=new TimerTask(){
      @Override public void run(){
        printStatistics();
      }
    }
;
    timer.scheduleAtFixedRate(statsPrinting,displayInterval * 1000l,displayInterval * 1000l);
    ArrayList<Thread> threads=new ArrayList<Thread>();
    for (int i=0; i < threadCount; i++)     threads.add(new Thread(new ClientThread(url,procedure,poolSize,wait,duration)));
    for (    Thread thread : threads)     thread.start();
    for (    Thread thread : threads)     thread.join();
    timer.cancel();
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Benchmark Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d calls was received...\n"+ " - %,9d Succeeded\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n",TrackingResults.get(0) + TrackingResults.get(1),TrackingResults.get(0),TrackingResults.get(1));
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    try {
      System.out.print(fullStatsContext.getStatsForProcedure(procedure).toString());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    Con.unwrap(IVoltDBConnection.class).saveStatistics(fullStatsContext.getStats(),csv);
    Con.close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
