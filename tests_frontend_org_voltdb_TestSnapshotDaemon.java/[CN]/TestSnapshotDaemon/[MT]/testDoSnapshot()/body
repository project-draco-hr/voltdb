{
  SnapshotDaemon daemon=getBasicDaemon();
  Thread.sleep(60);
  long handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(getSuccessfulScanOneResult(),handle).get();
  assertNull(m_initiator.procedureName);
  Thread.sleep(500);
  assertNull(m_initiator.procedureName);
  Thread.sleep(800);
  assertNotNull(m_initiator.procedureName);
  assertTrue("@SnapshotSave".equals(m_initiator.procedureName));
  JSONObject jsObj=new JSONObject((String)m_initiator.params[0]);
  assertTrue(jsObj.getString("path").equals("/tmp"));
  assertTrue(jsObj.getString("nonce").startsWith("woobie_"));
  assertTrue(jsObj.length() == 2);
  handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(getFailureResponse(),handle).get();
  assertNull(m_initiator.procedureName);
  assertEquals(SnapshotDaemon.State.FAILURE,daemon.getState());
  daemon=getBasicDaemon();
  Thread.sleep(60);
  assertNotNull(m_initiator.procedureName);
  handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(getSuccessfulScanOneResult(),handle);
  Thread.sleep(1200);
  assertNotNull(m_initiator.procedureName);
  handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(getErrMsgResponse(),handle).get();
  assertEquals(daemon.getState(),SnapshotDaemon.State.WAITING);
  daemon=getBasicDaemon();
  Thread.sleep(60);
  assertNotNull(m_initiator.procedureName);
  handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(getSuccessfulScanThreeResults(),handle).get();
  assertNotNull(m_initiator.procedureName);
  handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(getErrMsgResponse(),handle).get();
  assertNull(m_initiator.procedureName);
  Thread.sleep(1200);
  assertNotNull(m_initiator.procedureName);
  handle=m_initiator.clientData;
  m_initiator.clear();
  Thread.sleep(1200);
  assertNull(m_initiator.procedureName);
  daemon.processClientResponse(new ClientResponse(){
    @Override public Exception getException(){
      return null;
    }
    @Override public String getStatusString(){
      return null;
    }
    @Override public VoltTable[] getResults(){
      VoltTable result=new VoltTable(SnapshotSave.nodeResultsColumns);
      result.addRow(0,"desktop","0","FAILURE","epic fail");
      return new VoltTable[]{result};
    }
    @Override public byte getStatus(){
      return ClientResponse.SUCCESS;
    }
    @Override public int getClusterRoundtrip(){
      return 0;
    }
    @Override public int getClientRoundtrip(){
      return 0;
    }
    @Override public byte getAppStatus(){
      return 0;
    }
    @Override public String getAppStatusString(){
      return null;
    }
  }
,handle).get();
  assertEquals(SnapshotDaemon.State.WAITING,daemon.getState());
  assertNull(m_initiator.procedureName);
  Thread.sleep(1200);
  assertNotNull(m_initiator.procedureName);
  assertTrue("@SnapshotSave".equals(m_initiator.procedureName));
  handle=m_initiator.clientData;
  m_initiator.clear();
  daemon.processClientResponse(new ClientResponse(){
    @Override public Exception getException(){
      return null;
    }
    @Override public String getStatusString(){
      return null;
    }
    @Override public VoltTable[] getResults(){
      VoltTable result=new VoltTable(SnapshotSave.nodeResultsColumns);
      result.addRow(0,"desktop","0","SUCCESS","epic success");
      return new VoltTable[]{result};
    }
    @Override public byte getStatus(){
      return ClientResponse.SUCCESS;
    }
    @Override public int getClusterRoundtrip(){
      return 0;
    }
    @Override public int getClientRoundtrip(){
      return 0;
    }
    @Override public byte getAppStatus(){
      return 0;
    }
    @Override public String getAppStatusString(){
      return null;
    }
  }
,handle);
  Thread.sleep(1200);
  assertNotNull(m_initiator.procedureName);
  assertTrue("@SnapshotDelete".equals(m_initiator.procedureName));
}
