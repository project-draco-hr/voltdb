{
  SnapshotDaemon daemon=getBasicDaemon();
  daemon.makeActive();
  long startTime=System.currentTimeMillis();
  Pair<String,Object[]> work=daemon.processPeriodicWork(startTime);
  work=daemon.processClientResponse(getSuccessfulScanOneResult());
  assertNull(work);
  assertNull(daemon.processPeriodicWork(startTime + 2000));
  work=daemon.processPeriodicWork(startTime + 5000);
  assertNotNull(work);
  assertTrue("@SnapshotSave".equals(work.getFirst()));
  assertTrue("/tmp".equals(work.getSecond()[0]));
  assertTrue(((String)work.getSecond()[1]).startsWith("woobie_"));
  assertEquals(0,work.getSecond()[2]);
  assertNull(daemon.processClientResponse(getFailureResponse()));
  assertEquals(SnapshotDaemon.State.FAILURE,daemon.getState());
  daemon=getBasicDaemon();
  daemon.makeActive();
  startTime=System.currentTimeMillis();
  assertNotNull(daemon.processPeriodicWork(startTime));
  assertNull(daemon.processClientResponse(getSuccessfulScanOneResult()));
  daemon.processPeriodicWork(startTime + 5000);
  daemon.processClientResponse(getErrMsgResponse());
  assertEquals(daemon.getState(),SnapshotDaemon.State.WAITING);
  daemon=getBasicDaemon();
  daemon.makeActive();
  startTime=System.currentTimeMillis();
  assertNotNull(daemon.processPeriodicWork(startTime));
  assertNotNull(daemon.processClientResponse(getSuccessfulScanThreeResults()));
  assertNull(daemon.processClientResponse(getErrMsgResponse()));
  daemon.processPeriodicWork(startTime + 5000);
  assertNull(daemon.processPeriodicWork(startTime + 10000));
  daemon.processClientResponse(new ClientResponse(){
    @Override public Exception getException(){
      return null;
    }
    @Override public String getStatusString(){
      return null;
    }
    @Override public VoltTable[] getResults(){
      VoltTable result=new VoltTable(SnapshotSave.nodeResultsColumns);
      result.addRow("0","desktop","0","FAILURE","epic fail");
      return new VoltTable[]{result};
    }
    @Override public byte getStatus(){
      return ClientResponse.SUCCESS;
    }
    @Override public int getClusterRoundtrip(){
      return 0;
    }
    @Override public int getClientRoundtrip(){
      return 0;
    }
    @Override public byte getAppStatus(){
      return 0;
    }
    @Override public String getAppStatusString(){
      return null;
    }
  }
);
  assertEquals(SnapshotDaemon.State.WAITING,daemon.getState());
  work=daemon.processPeriodicWork(startTime + 15000);
  assertNotNull(work);
  assertTrue("@SnapshotDelete".equals(work.getFirst()));
}
