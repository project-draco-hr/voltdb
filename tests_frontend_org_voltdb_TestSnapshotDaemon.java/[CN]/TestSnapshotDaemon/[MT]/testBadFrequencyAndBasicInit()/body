{
  SnapshotDaemon noSnapshots=getSnapshotDaemon();
  Thread.sleep(60);
  assertNull(m_initiator.procedureName);
  boolean threwException=false;
  try {
    Future<Void> future=noSnapshots.processClientResponse(null);
    future.get();
  }
 catch (  Throwable t) {
    threwException=true;
  }
  assertFalse(threwException);
  final SnapshotSchedule schedule=new SnapshotSchedule();
  schedule.setEnabled(true);
  schedule.setFrequencyunit("q");
  threwException=false;
  SnapshotDaemon d=getSnapshotDaemon();
  try {
    Future<Void> future=d.mayGoActiveOrInactive(schedule);
    future.get();
  }
 catch (  Throwable t) {
    threwException=true;
  }
  assertTrue(threwException);
  schedule.setFrequencyunit("s");
  d.mayGoActiveOrInactive(schedule);
  schedule.setFrequencyunit("m");
  d.mayGoActiveOrInactive(schedule);
  schedule.setFrequencyunit("h");
  d.mayGoActiveOrInactive(schedule);
  threwException=false;
  try {
    Future<Void> future=d.processClientResponse(null);
    future.get();
  }
 catch (  Throwable t) {
    threwException=true;
  }
  assertFalse(threwException);
}
