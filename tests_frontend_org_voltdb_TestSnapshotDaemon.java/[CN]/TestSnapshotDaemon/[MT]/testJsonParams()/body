{
  System.out.println("--------------\n  testJsonParams\n---------------");
  SnapshotDaemon dut=getSnapshotDaemon();
  Connection c=mock(Connection.class);
  WriteStream ws=mock(WriteStream.class);
  when(c.writeStream()).thenReturn(ws);
  StoredProcedureInvocation spi=new StoredProcedureInvocation();
  Object[] params=new Object[1];
  params[0]=null;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  ClientResponseImpl resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("@SnapshotSave JSON blob is null"));
  params[0]=0l;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("@SnapshotSave JSON blob is a"));
  JSONStringer stringer=new JSONStringer();
  stringer.object();
  stringer.endObject();
  params[0]=stringer.toString();
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("JSONException"));
  stringer=new JSONStringer();
  stringer.object();
  stringer.key("uripath").value("");
  stringer.endObject();
  params[0]=stringer.toString();
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("uripath cannot be empty"));
  stringer=new JSONStringer();
  stringer.object();
  stringer.key("uripath").value("good.luck.chuck");
  stringer.endObject();
  params[0]=stringer.toString();
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("URI scheme cannot be null"));
  stringer=new JSONStringer();
  stringer.object();
  stringer.key("uripath").value("http://good.luck.chuck");
  stringer.endObject();
  params[0]=stringer.toString();
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("Unsupported URI scheme"));
  stringer=new JSONStringer();
  stringer.object();
  stringer.key("uripath").value("file://good.luck.chuck");
  stringer.endObject();
  params[0]=stringer.toString();
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("JSONException"));
  stringer=new JSONStringer();
  stringer.object();
  stringer.key("uripath").value("file://good.luck.chuck");
  stringer.key("nonce").value("");
  stringer.endObject();
  params[0]=stringer.toString();
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString(),resp.getStatusString().contains("nonce cannot be empty"));
}
