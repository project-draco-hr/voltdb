{
  System.out.println("--------------\n  testLegacyParams\n---------------");
  SnapshotDaemon dut=getSnapshotDaemon();
  Connection c=mock(Connection.class);
  WriteStream ws=mock(WriteStream.class);
  when(c.writeStream()).thenReturn(ws);
  StoredProcedureInvocation spi=new StoredProcedureInvocation();
  Object[] params=new Object[3];
  params[0]=null;
  params[1]=null;
  params[2]=null;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  ClientResponseImpl resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("@SnapshotSave path is null"));
  params[0]="haha";
  params[1]=null;
  params[2]=null;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("@SnapshotSave nonce is null"));
  params[0]="haha";
  params[1]="hoho";
  params[2]=null;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("@SnapshotSave blocking is null"));
  params[0]=0l;
  params[1]="hoho";
  params[2]=0;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("@SnapshotSave path param is a"));
  params[0]="haha";
  params[1]=0l;
  params[2]=0;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("@SnapshotSave nonce param is a"));
  params[0]="haha";
  params[1]="hoho";
  params[2]="0";
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("@SnapshotSave blocking param is a"));
  params[0]="haha";
  params[1]="ho-ho";
  params[2]=0;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("contains a prohibited character"));
  params[0]="haha";
  params[1]="ho,ho";
  params[2]=0;
  spi.setParams(params);
  dut.requestUserSnapshot(spi,c);
  resp=getResponseFromConnectionMock(c);
  assertEquals(ClientResponseImpl.GRACEFUL_FAILURE,resp.getStatus());
  assertTrue(resp.getStatusString().contains("contains a prohibited character"));
}
