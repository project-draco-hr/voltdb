{
  String[] mytype=new String[]{"integer","varbinary","decimal","float"};
  String simpleSchema="create table intkv (" + "  key integer, " + "  myinteger integer default 0, "+ "  myvarbinary varbinary default 'ff', "+ "  mydecimal decimal default 10.10, "+ "  myfloat float default 9.9, "+ "  PRIMARY KEY(key) );"+ "\n"+ "";
  for (  String type : mytype) {
    simpleSchema+="create procedure myfussy_" + type + "_proc as"+ " insert into intkv (key, my"+ type+ ") values (?, ?);"+ "\n";
  }
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(simpleSchema);
  String catalogPath=Configuration.getPathToCatalogForTest("sqlcmderror.jar");
  assertTrue(builder.compile(catalogPath,1,1,0));
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=catalogPath;
  config.m_pathToDeployment=builder.getPathToDeployment();
  m_server=new ServerThread(config);
  m_server.start();
  m_server.waitForInitialization();
  m_client=ClientFactory.createClient();
  m_client.createConnection("localhost");
  assertEquals("sqlcmd dry run failed -- maybe some sqlcmd component (the voltdb jar file?) needs to be rebuilt.",0,callSQLcmd(true,";\n"));
  assertEquals("sqlcmd --stop-on-error=false dry run failed.",0,callSQLcmd(false,";\n"));
  ClientResponse response=m_client.callProcedure("@AdHoc",badWriteCommand());
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  VoltTable[] results=response.getResults();
  assertEquals(1,results.length);
  VoltTable result=results[0];
  assertEquals(1,result.asScalarLong());
  int goodValue=1000;
  for (  String type : mytype) {
    response=m_client.callProcedure("myfussy_" + type + "_proc",goodValue,"" + goodValue);
    ++goodValue;
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    results=response.getResults();
    assertEquals(1,results.length);
    result=results[0];
    assertEquals(1,result.asScalarLong());
  }
}
