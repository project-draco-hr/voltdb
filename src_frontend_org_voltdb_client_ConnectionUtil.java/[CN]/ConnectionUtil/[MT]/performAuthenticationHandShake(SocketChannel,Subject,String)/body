{
  try {
    Subject.doAs(subject,new PrivilegedAction<GSSContext>(){
      @Override public GSSContext run(){
        GSSContext context=null;
        try {
          final Oid krb5Oid=new Oid("1.2.840.113554.1.2.2");
          final Oid krb5PrincipalNameType=new Oid("1.2.840.113554.1.2.2.1");
          final GSSName serverName=m_gssManager.createName(serviceName,krb5PrincipalNameType);
          ByteBuffer bb=ByteBuffer.allocate(4096);
          context=m_gssManager.createContext(serverName,krb5Oid,null,GSSContext.DEFAULT_LIFETIME);
          context.requestMutualAuth(true);
          context.requestConf(true);
          context.requestInteg(true);
          byte[] token;
          int msgSize=0;
          bb.limit(msgSize);
          while (!context.isEstablished()) {
            token=context.initSecContext(bb.array(),bb.arrayOffset() + bb.position(),bb.remaining());
            if (token != null) {
              msgSize=4 + 1 + 1+ token.length;
              bb.clear().limit(msgSize);
              bb.putInt(msgSize - 4).put(Constants.AUTH_HANDSHAKE_VERSION).put(Constants.AUTH_HANDSHAKE);
              bb.put(token).flip();
              while (bb.hasRemaining()) {
                channel.write(bb);
              }
            }
            if (!context.isEstablished()) {
              bb.clear().limit(4);
              while (bb.hasRemaining()) {
                if (channel.read(bb) == -1)                 throw new EOFException();
              }
              bb.flip();
              msgSize=bb.getInt();
              if (msgSize > bb.capacity()) {
                throw new IOException("Authentication packet exceeded alloted size");
              }
              if (msgSize <= 0) {
                throw new IOException("Wire Protocol Format error 0 or negative message length prefix");
              }
              bb.clear().limit(msgSize);
              while (bb.hasRemaining()) {
                if (channel.read(bb) == -1)                 throw new EOFException();
              }
              bb.flip();
              byte version=bb.get();
              if (version != Constants.AUTH_HANDSHAKE_VERSION) {
                throw new IOException("Encountered unexpected authentication protocol version " + version);
              }
              byte tag=bb.get();
              if (tag != Constants.AUTH_HANDSHAKE) {
                throw new IOException("Encountered unexpected authentication protocol tag " + tag);
              }
            }
          }
          if (!context.getMutualAuthState()) {
            throw new IOException("Authentication Handshake Failed");
          }
          context.dispose();
          context=null;
        }
 catch (        GSSException ex) {
          Throwables.propagate(ex);
        }
catch (        IOException ex) {
          Throwables.propagate(ex);
        }
 finally {
          if (context != null)           try {
            context.dispose();
          }
 catch (          Exception ignoreIt) {
          }
        }
        return null;
      }
    }
);
  }
 catch (  SecurityException ex) {
    try {
      channel.close();
    }
 catch (    Exception ignoreIt) {
    }
    Throwable cause=ex.getCause();
    if (cause != null && (cause instanceof RuntimeException) && cause.getCause() != null) {
      cause=cause.getCause();
    }
 else     if (cause == null) {
      cause=ex;
    }
    if (cause instanceof IOException) {
      throw IOException.class.cast(cause);
    }
 else {
      throw new IOException("Authentication Handshake Failed",cause);
    }
  }
  ByteBuffer lengthBuffer=ByteBuffer.allocate(4);
  while (lengthBuffer.hasRemaining()) {
    if (channel.read(lengthBuffer) == -1) {
      channel.close();
      throw new EOFException();
    }
  }
  lengthBuffer.flip();
  int responseSize=lengthBuffer.getInt();
  ByteBuffer loginResponse=ByteBuffer.allocate(responseSize);
  while (loginResponse.hasRemaining()) {
    if (channel.read(loginResponse) == -1) {
      channel.close();
      throw new EOFException();
    }
  }
  loginResponse.flip();
  byte version=loginResponse.get();
  if (version != (byte)0) {
    channel.close();
    throw new IOException("Ecountered unexpected version for the login response message: " + version);
  }
  return loginResponse;
}
