{
  try {
    String subjectPrincipal=subject.getPrincipals().iterator().next().getName();
    final Optional<DelegatePrincipal> delegate=getDelegate(subject);
    if (delegate.isPresent() && !subjectPrincipal.equals(serviceName)) {
      throw new IOException("Delegate authentication is not allowed for user " + delegate.get().getName());
    }
    Subject.doAs(subject,new PrivilegedAction<GSSContext>(){
      @Override public GSSContext run(){
        GSSContext context=null;
        try {
          final Oid krb5Oid=new Oid("1.2.840.113554.1.2.2");
          final Oid krb5PrincipalNameType=new Oid("1.2.840.113554.1.2.2.1");
          final GSSName serverName=m_gssManager.createName(serviceName,krb5PrincipalNameType);
          context=m_gssManager.createContext(serverName,krb5Oid,null,GSSContext.INDEFINITE_LIFETIME);
          context.requestMutualAuth(true);
          context.requestConf(true);
          context.requestInteg(true);
          establishSecurityContext(channel,context,delegate);
          context.dispose();
          context=null;
        }
 catch (        GSSException ex) {
          Throwables.propagate(ex);
        }
catch (        IOException ex) {
          Throwables.propagate(ex);
        }
 finally {
          if (context != null)           try {
            context.dispose();
          }
 catch (          Exception ignoreIt) {
          }
        }
        return null;
      }
    }
);
  }
 catch (  SecurityException ex) {
    try {
      channel.close();
    }
 catch (    Exception ignoreIt) {
    }
    Throwable cause=ex.getCause();
    if (cause != null && (cause instanceof RuntimeException) && cause.getCause() != null) {
      cause=cause.getCause();
    }
 else     if (cause == null) {
      cause=ex;
    }
    if (cause instanceof IOException) {
      throw IOException.class.cast(cause);
    }
 else {
      throw new IOException("Authentication Handshake Failed",cause);
    }
  }
  ByteBuffer lengthBuffer=ByteBuffer.allocate(4);
  while (lengthBuffer.hasRemaining()) {
    if (channel.read(lengthBuffer) == -1) {
      channel.close();
      throw new EOFException();
    }
  }
  lengthBuffer.flip();
  int responseSize=lengthBuffer.getInt();
  ByteBuffer loginResponse=ByteBuffer.allocate(responseSize);
  while (loginResponse.hasRemaining()) {
    if (channel.read(loginResponse) == -1) {
      channel.close();
      throw new EOFException();
    }
  }
  loginResponse.flip();
  byte version=loginResponse.get();
  if (version != (byte)0) {
    channel.close();
    throw new IOException("Encountered unexpected version for the login response message: " + version);
  }
  return loginResponse;
}
