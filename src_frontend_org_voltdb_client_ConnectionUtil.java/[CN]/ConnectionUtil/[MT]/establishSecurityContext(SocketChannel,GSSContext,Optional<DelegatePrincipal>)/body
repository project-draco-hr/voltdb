{
  ByteBuffer bb=ByteBuffer.allocate(4096);
  byte[] token;
  int msgSize=0;
  bb.limit(msgSize);
  while (!context.isEstablished()) {
    token=context.initSecContext(bb.array(),bb.arrayOffset() + bb.position(),bb.remaining());
    if (token != null) {
      msgSize=4 + 1 + 1+ token.length;
      bb.clear().limit(msgSize);
      bb.putInt(msgSize - 4).put(Constants.AUTH_HANDSHAKE_VERSION).put(Constants.AUTH_HANDSHAKE);
      bb.put(token).flip();
      while (bb.hasRemaining()) {
        channel.write(bb);
      }
    }
    if (!context.isEstablished()) {
      bb.clear().limit(4);
      while (bb.hasRemaining()) {
        if (channel.read(bb) == -1)         throw new EOFException();
      }
      bb.flip();
      msgSize=bb.getInt();
      if (msgSize > bb.capacity()) {
        throw new IOException("Authentication packet exceeded alloted size");
      }
      if (msgSize <= 0) {
        throw new IOException("Wire Protocol Format error 0 or negative message length prefix");
      }
      bb.clear().limit(msgSize);
      while (bb.hasRemaining()) {
        if (channel.read(bb) == -1)         throw new EOFException();
      }
      bb.flip();
      byte version=bb.get();
      if (version != Constants.AUTH_HANDSHAKE_VERSION) {
        throw new IOException("Encountered unexpected authentication protocol version " + version);
      }
      byte tag=bb.get();
      if (tag != Constants.AUTH_HANDSHAKE) {
        throw new IOException("Encountered unexpected authentication protocol tag " + tag);
      }
    }
  }
  if (!context.getMutualAuthState()) {
    throw new IOException("Authentication Handshake Failed");
  }
  if (delegate.isPresent() && !context.getConfState()) {
    throw new IOException("Cannot transmit delegate user name securely");
  }
  if (delegate.isPresent()) {
    MessageProp mprop=new MessageProp(0,true);
    bb.clear().limit(delegate.get().wrappedSize());
    delegate.get().wrap(bb);
    bb.flip();
    token=context.wrap(bb.array(),bb.arrayOffset() + bb.position(),bb.remaining(),mprop);
    msgSize=4 + 1 + 1+ token.length;
    bb.clear().limit(msgSize);
    bb.putInt(msgSize - 4).put(Constants.AUTH_HANDSHAKE_VERSION).put(Constants.AUTH_HANDSHAKE);
    bb.put(token).flip();
    while (bb.hasRemaining()) {
      channel.write(bb);
    }
  }
}
