{
  try {
    ZooKeeper zk=m_hostMessenger.getZK();
    boolean initCompleted=zk.exists(VoltZK.init_completed,false) != null;
    List<String> children=zk.getChildren(VoltZK.start_action,new StartActionWatcher(),null);
    if (!children.isEmpty()) {
      for (      String child : children) {
        byte[] data=zk.getData(VoltZK.start_action + "/" + child,false,null);
        if (data == null) {
          VoltDB.crashLocalVoltDB("Couldn't find " + VoltZK.start_action + "/"+ child);
        }
        String startAction=new String(data);
        if ((startAction.equals(StartAction.JOIN.toString()) || startAction.equals(StartAction.REJOIN.toString()) || startAction.equals(StartAction.LIVE_REJOIN.toString())) && !initCompleted) {
          int nodeId=VoltZK.getHostIDFromChildName(child);
          if (nodeId == m_hostMessenger.getHostId()) {
            VoltDB.crashLocalVoltDB("This node was started with start action " + startAction + " during cluster creation. All nodes should be started with matching "+ "create or recover actions when bring up a cluster. Join and Rejoin "+ "are for adding nodes to an already running cluster.");
          }
 else {
            logger.warn("Node " + nodeId + " tried to "+ startAction+ " cluster but it is not allowed during cluster creation. "+ "All nodes should be started with matching create or recover actions when bring up a cluster. "+ "Join and rejoin are for adding nodes to an already running cluster.");
          }
        }
      }
    }
  }
 catch (  KeeperException e) {
    logger.error("Failed to validate the start actions:" + e.getMessage());
  }
catch (  InterruptedException e) {
    VoltDB.crashLocalVoltDB("Interrupted during start action validation:" + e.getMessage(),true,e);
  }
}
