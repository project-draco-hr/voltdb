{
  if (a == null) {
    return null;
  }
switch (this.typeCode) {
case Types.TINYINT:
case Types.SQL_SMALLINT:
case Types.SQL_INTEGER:
case Types.SQL_BIGINT:
    return a.toString();
case Types.SQL_REAL:
case Types.SQL_DOUBLE:
  double value=((Double)a).doubleValue();
if (value == Double.NEGATIVE_INFINITY) {
  return "-1E0/0";
}
if (value == Double.POSITIVE_INFINITY) {
return "1E0/0";
}
if (Double.isNaN(value)) {
return "0E0/0E0";
}
if (value == 0.0) {
return "0E0";
}
String s=Double.toString(value);
if (s.indexOf('E') < 0) {
int decimalOffset=s.indexOf('.');
String optionalSign=(value < 0.0 ? "-" : "");
int leadingNonZeroOffset;
String decimalPart;
int exponent;
if (value > -10.0 && value < 10.0) {
if (value <= -1.0 || value >= 1.0) {
s=s.concat("E0");
return s;
}
for (leadingNonZeroOffset=decimalOffset + 1; leadingNonZeroOffset < s.length(); ++leadingNonZeroOffset) {
if (s.charAt(leadingNonZeroOffset) != '0') {
break;
}
}
exponent=decimalOffset - leadingNonZeroOffset;
if (leadingNonZeroOffset + 1 == s.length()) {
decimalPart="0";
}
 else {
decimalPart=s.substring(leadingNonZeroOffset + 1);
}
}
 else {
leadingNonZeroOffset=optionalSign.length();
exponent=decimalOffset - (leadingNonZeroOffset + 1);
decimalPart=s.substring(leadingNonZeroOffset + 1,exponent) + s.substring(decimalOffset + 1);
int lastIndex;
for (lastIndex=decimalPart.length() - 1; lastIndex > 0; --lastIndex) {
if (decimalPart.charAt(lastIndex) != '0') {
break;
}
}
if (lastIndex > 0 && decimalPart.charAt(lastIndex) == '0') {
decimalPart=decimalPart.substring(lastIndex);
}
}
s=optionalSign + s.charAt(leadingNonZeroOffset) + "."+ decimalPart+ "E"+ exponent;
}
return s;
case Types.SQL_NUMERIC:
case Types.SQL_DECIMAL:
return JavaSystem.toString((BigDecimal)a);
default :
throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");
}
}
