{
  String str="";
  AdHocPlannedStatement plannedStatement=plannedStatements.get(i);
  String aggplan=new String(plannedStatement.core.aggregatorFragment,Constants.UTF8ENCODING);
  PlanNodeTree pnt=new PlanNodeTree();
  try {
    JSONObject jobj=new JSONObject(aggplan);
    pnt.loadFromJSONPlan(jobj,db);
    if (plannedStatement.core.collectorFragment != null) {
      String collplan=new String(plannedStatement.core.collectorFragment,Constants.UTF8ENCODING);
      PlanNodeTree collpnt=new PlanNodeTree();
      JSONObject jobMP=new JSONObject(collplan);
      collpnt.loadFromJSONPlan(jobMP,db);
      assert(collpnt.getRootPlanNode() instanceof SendPlanNode);
      pnt.getRootPlanNode().reattachFragment((SendPlanNode)collpnt.getRootPlanNode());
    }
    str=pnt.getRootPlanNode().toExplainPlanString();
  }
 catch (  JSONException e) {
    System.out.println(e.getMessage());
  }
  return str;
}
