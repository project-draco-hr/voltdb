{
  return new ImmutableMapEntrySet<K,ImmutableSet<V>>(){
    @Override ImmutableMap<K,ImmutableSet<V>> map(){
      return MapViewOfValuesAsSingletonSets.this;
    }
    @Override public UnmodifiableIterator<Entry<K,ImmutableSet<V>>> iterator(){
      final Iterator<Entry<K,V>> backingIterator=delegate.entrySet().iterator();
      return new UnmodifiableIterator<Entry<K,ImmutableSet<V>>>(){
        @Override public boolean hasNext(){
          return backingIterator.hasNext();
        }
        @Override public Entry<K,ImmutableSet<V>> next(){
          final Entry<K,V> backingEntry=backingIterator.next();
          return new AbstractMapEntry<K,ImmutableSet<V>>(){
            @Override public K getKey(){
              return backingEntry.getKey();
            }
            @Override public ImmutableSet<V> getValue(){
              return ImmutableSet.of(backingEntry.getValue());
            }
          }
;
        }
      }
;
    }
  }
;
}
