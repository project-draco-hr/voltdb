{
  if (m_tableStats != null) {
    CatalogMap<Table> tables=m_context.database.getTables();
    int[] tableIds=new int[tables.size()];
    int i=0;
    for (    Table table : tables) {
      tableIds[i++]=table.getRelativeIndex();
    }
    long tupleCount=0;
    long tupleDataMem=0;
    long tupleAllocatedMem=0;
    long indexMem=0;
    long stringMem=0;
    final VoltTable[] s1=m_ee.getStats(StatsSelector.TABLE,tableIds,false,time);
    if ((s1 != null) && (s1.length > 0)) {
      VoltTable stats=s1[0];
      assert(stats != null);
      while (stats.advanceRow()) {
        assert(stats.getColumnName(7).equals("TUPLE_COUNT"));
        tupleCount+=stats.getLong(7);
        assert(stats.getColumnName(8).equals("TUPLE_ALLOCATED_MEMORY"));
        tupleAllocatedMem+=stats.getLong(8);
        assert(stats.getColumnName(9).equals("TUPLE_DATA_MEMORY"));
        tupleDataMem+=stats.getLong(9);
        assert(stats.getColumnName(10).equals("STRING_DATA_MEMORY"));
        stringMem+=stats.getLong(10);
      }
      stats.resetRowPosition();
      m_tableStats.setStatsTable(stats);
    }
 else {
      m_tableStats.resetStatsTable();
    }
    final VoltTable[] s2=m_ee.getStats(StatsSelector.INDEX,tableIds,false,time);
    if ((s2 != null) && (s2.length > 0)) {
      VoltTable stats=s2[0];
      assert(stats != null);
      while (stats.advanceRow()) {
        assert(stats.getColumnName(11).equals("MEMORY_ESTIMATE"));
        indexMem+=stats.getLong(11);
      }
      stats.resetRowPosition();
      m_indexStats.setStatsTable(stats);
    }
 else {
      m_indexStats.resetStatsTable();
    }
    if (m_memStats != null) {
      m_memStats.eeUpdateMemStats(m_siteId,tupleCount,tupleDataMem,tupleAllocatedMem,indexMem,stringMem,m_ee.getThreadLocalPoolAllocations());
    }
  }
}
