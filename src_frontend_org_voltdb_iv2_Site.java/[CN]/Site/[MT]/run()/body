{
  if (m_partitionId == MpInitiator.MP_INIT_PID) {
    Thread.currentThread().setName("MP Site - " + CoreUtils.hsIdToString(m_siteId));
  }
 else {
    Thread.currentThread().setName("SP " + m_partitionId + " Site - "+ CoreUtils.hsIdToString(m_siteId));
  }
  if (m_coreBindIds != null) {
    PosixJNAAffinity.INSTANCE.setAffinity(m_coreBindIds);
  }
  initialize();
  m_startupConfig=null;
  final MinimumRatioMaintainer mrm=new MinimumRatioMaintainer(m_taskLogReplayRatio);
  try {
    while (m_shouldContinue) {
      if (m_rejoinState == kStateRunning) {
        SiteTasker task=m_scheduler.take();
        if (task instanceof TransactionTask) {
          m_currentTxnId=((TransactionTask)task).getTxnId();
          m_lastTxnTime=EstTime.currentTimeMillis();
        }
        task.run(getSiteProcedureConnection());
      }
 else       if (m_rejoinState == kStateReplayingRejoin) {
        SiteTasker task=m_scheduler.poll();
        boolean didWork=false;
        if (task != null) {
          didWork=true;
          while (!m_rejoinTaskLog.isEmpty() && !mrm.canDoRestricted()) {
            replayFromTaskLog(mrm);
          }
          mrm.didRestricted();
          if (m_rejoinState == kStateRunning) {
            task.run(getSiteProcedureConnection());
          }
 else {
            task.runForRejoin(getSiteProcedureConnection(),m_rejoinTaskLog);
          }
        }
 else {
          didWork|=replayFromTaskLog(mrm);
        }
        if (!didWork)         Thread.yield();
      }
 else {
        SiteTasker task=m_scheduler.take();
        task.runForRejoin(getSiteProcedureConnection(),m_rejoinTaskLog);
      }
    }
  }
 catch (  OutOfMemoryError e) {
    String errmsg="Site: " + org.voltcore.utils.CoreUtils.hsIdToString(m_siteId) + " ran out of Java memory. "+ "This node will shut down.";
    VoltDB.crashLocalVoltDB(errmsg,true,e);
  }
catch (  Throwable t) {
    String errmsg="Site: " + org.voltcore.utils.CoreUtils.hsIdToString(m_siteId) + " encountered an "+ "unexpected error and will die, taking this VoltDB node down.";
    VoltDB.crashLocalVoltDB(errmsg,true,t);
  }
  try {
    shutdown();
  }
  finally {
    CompressionService.releaseThreadLocal();
  }
}
