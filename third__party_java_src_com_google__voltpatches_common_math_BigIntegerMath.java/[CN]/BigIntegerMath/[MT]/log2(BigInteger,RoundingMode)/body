{
  checkPositive("x",checkNotNull(x));
  int logFloor=x.bitLength() - 1;
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(isPowerOfTwo(x));
case DOWN:
case FLOOR:
  return logFloor;
case UP:
case CEILING:
return isPowerOfTwo(x) ? logFloor : logFloor + 1;
case HALF_DOWN:
case HALF_UP:
case HALF_EVEN:
if (logFloor < SQRT2_PRECOMPUTE_THRESHOLD) {
BigInteger halfPower=SQRT2_PRECOMPUTED_BITS.shiftRight(SQRT2_PRECOMPUTE_THRESHOLD - logFloor);
if (x.compareTo(halfPower) <= 0) {
  return logFloor;
}
 else {
  return logFloor + 1;
}
}
BigInteger x2=x.pow(2);
int logX2Floor=x2.bitLength() - 1;
return (logX2Floor < 2 * logFloor + 1) ? logFloor : logFloor + 1;
default :
throw new AssertionError();
}
}
