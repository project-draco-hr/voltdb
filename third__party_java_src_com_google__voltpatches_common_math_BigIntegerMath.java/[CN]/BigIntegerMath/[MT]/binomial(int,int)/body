{
  checkNonNegative("n",n);
  checkNonNegative("k",k);
  checkArgument(k <= n,"k (%s) > n (%s)",k,n);
  if (k > (n >> 1)) {
    k=n - k;
  }
  if (k < LongMath.biggestBinomials.length && n <= LongMath.biggestBinomials[k]) {
    return BigInteger.valueOf(LongMath.binomial(n,k));
  }
  BigInteger accum=BigInteger.ONE;
  long numeratorAccum=n;
  long denominatorAccum=1;
  int bits=LongMath.log2(n,RoundingMode.CEILING);
  int numeratorBits=bits;
  for (int i=1; i < k; i++) {
    int p=n - i;
    int q=i + 1;
    if (numeratorBits + bits >= Long.SIZE - 1) {
      accum=accum.multiply(BigInteger.valueOf(numeratorAccum)).divide(BigInteger.valueOf(denominatorAccum));
      numeratorAccum=p;
      denominatorAccum=q;
      numeratorBits=bits;
    }
 else {
      numeratorAccum*=p;
      denominatorAccum*=q;
      numeratorBits+=bits;
    }
  }
  return accum.multiply(BigInteger.valueOf(numeratorAccum)).divide(BigInteger.valueOf(denominatorAccum));
}
