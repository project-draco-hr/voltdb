{
  checkNonNegative("x",x);
  if (fitsInLong(x)) {
    return BigInteger.valueOf(LongMath.sqrt(x.longValue(),mode));
  }
  BigInteger sqrtFloor=sqrtFloor(x);
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(sqrtFloor.pow(2).equals(x));
case FLOOR:
case DOWN:
  return sqrtFloor;
case CEILING:
case UP:
int sqrtFloorInt=sqrtFloor.intValue();
boolean sqrtFloorIsExact=(sqrtFloorInt * sqrtFloorInt == x.intValue()) && sqrtFloor.pow(2).equals(x);
return sqrtFloorIsExact ? sqrtFloor : sqrtFloor.add(BigInteger.ONE);
case HALF_DOWN:
case HALF_UP:
case HALF_EVEN:
BigInteger halfSquare=sqrtFloor.pow(2).add(sqrtFloor);
return (halfSquare.compareTo(x) >= 0) ? sqrtFloor : sqrtFloor.add(BigInteger.ONE);
default :
throw new AssertionError();
}
}
