{
  Map<K,Collection<V>> result=asMap;
  if (result == null) {
    final Map<K,Collection<V>> asMapDelegate=delegate.asMap();
@WeakOuter class AsMap extends ForwardingMap<K,Collection<V>> {
      Set<Entry<K,Collection<V>>> entrySet;
      Collection<Collection<V>> values;
      @Override protected Map<K,Collection<V>> delegate(){
        return asMapDelegate;
      }
      @Override public Set<Entry<K,Collection<V>>> entrySet(){
        Set<Entry<K,Collection<V>>> result=entrySet;
        if (result == null) {
          entrySet=result=constrainedAsMapEntries(asMapDelegate.entrySet(),constraint);
        }
        return result;
      }
      @SuppressWarnings("unchecked") @Override public Collection<V> get(      Object key){
        try {
          Collection<V> collection=ConstrainedMultimap.this.get((K)key);
          return collection.isEmpty() ? null : collection;
        }
 catch (        ClassCastException e) {
          return null;
        }
      }
      @Override public Collection<Collection<V>> values(){
        Collection<Collection<V>> result=values;
        if (result == null) {
          values=result=new ConstrainedAsMapValues<K,V>(delegate().values(),entrySet());
        }
        return result;
      }
      @Override public boolean containsValue(      Object o){
        return values().contains(o);
      }
    }
    asMap=result=new AsMap();
  }
  return result;
}
