{
  m_initiators=new long[2];
  m_initiators[0]=0;
  m_initiators[1]=1;
  m_queue=new RestrictedPriorityQueue(m_initiators,0,null,true);
  m_idManager=new TransactionIdManager(0,0);
  m_txnIds=new Vector<Long>();
  m_proc=new StoredProcedureInvocation();
  long txnId=m_idManager.getNextUniqueTransactionId();
  m_task=new InitiateTaskMessage(0,0,txnId,true,true,m_proc,txnId);
  m_txnIds.add(m_task.getTxnId());
  m_state1=new SinglePartitionTxnState(null,null,m_task);
  m_states[0]=m_state1;
  txnId=m_idManager.getNextUniqueTransactionId();
  m_task=new InitiateTaskMessage(1,1,txnId,true,true,m_proc,txnId);
  assertTrue(m_txnIds.lastElement() < m_task.getTxnId());
  m_txnIds.add(m_task.getTxnId());
  m_state2=new SinglePartitionTxnState(null,null,m_task);
  m_states[1]=m_state2;
  txnId=m_idManager.getNextUniqueTransactionId();
  m_task=new InitiateTaskMessage(0,0,txnId,true,true,m_proc,txnId);
  assertTrue(m_txnIds.lastElement() < m_task.getTxnId());
  m_txnIds.add(m_task.getTxnId());
  m_state3=new SinglePartitionTxnState(null,null,m_task);
  m_states[2]=m_state3;
  txnId=m_idManager.getNextUniqueTransactionId();
  m_task=new InitiateTaskMessage(1,1,txnId,true,true,m_proc,txnId);
  assertTrue(m_txnIds.lastElement() < m_task.getTxnId());
  m_txnIds.add(m_task.getTxnId());
  m_state4=new SinglePartitionTxnState(null,null,m_task);
  m_states[3]=m_state4;
  txnId=m_idManager.getNextUniqueTransactionId();
  m_task=new InitiateTaskMessage(0,0,txnId,true,true,m_proc,txnId);
  assertTrue(m_txnIds.lastElement() < m_task.getTxnId());
  m_txnIds.add(m_task.getTxnId());
  m_state5=new SinglePartitionTxnState(null,null,m_task);
  m_states[4]=m_state5;
  txnId=m_idManager.getNextUniqueTransactionId();
  m_task=new InitiateTaskMessage(1,1,txnId,true,true,m_proc,txnId);
  assertTrue(m_txnIds.lastElement() < m_task.getTxnId());
  m_state6=new SinglePartitionTxnState(null,null,m_task);
  m_states[5]=m_state6;
  m_queue.shutdown();
}
