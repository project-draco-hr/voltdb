{
  String hostname="";
  try {
    java.net.InetAddress localMachine=java.net.InetAddress.getLocalHost();
    hostname=localMachine.getHostName();
  }
 catch (  java.net.UnknownHostException uhe) {
  }
  Map<Integer,Integer> sites_to_partitions=new HashMap<Integer,Integer>();
  for (  Site site : VoltDB.instance().getCatalogContext().siteTracker.getUpSites()) {
    if (site.getPartition() != null) {
      sites_to_partitions.put(Integer.parseInt(site.getTypeName()),Integer.parseInt(site.getPartition().getTypeName()));
    }
  }
  try {
    initializeTableSaveFiles(m_filePath,m_fileNonce,tableName,originalHostIds,relevantPartitionIds);
  }
 catch (  IOException e) {
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,hostname,m_siteId,tableName,relevantPartitionIds[0],"FAILURE","Unable to load table: " + tableName + " error: "+ e.getMessage());
    return result;
  }
  VoltTable[] results=new VoltTable[]{constructResultsTable()};
  results[0].addRow(m_hostId,hostname,m_siteId,tableName,0,"NO DATA TO DISTRIBUTE","");
  final Table new_catalog_table=getCatalogTable(tableName);
  Boolean needsConversion=null;
  org.voltdb.utils.DBBPool.BBContainer c=null;
  while (hasMoreChunks()) {
    VoltTable table=null;
    try {
      c=null;
      c=getNextChunk();
      if (c == null) {
        continue;
      }
      if (needsConversion == null) {
        VoltTable old_table=PrivateVoltTableFactory.createVoltTableFromBuffer(c.b.duplicate(),true);
        needsConversion=SavedTableConverter.needsConversion(old_table,new_catalog_table);
      }
      final VoltTable old_table=PrivateVoltTableFactory.createVoltTableFromBuffer(c.b,true);
      if (needsConversion) {
        table=SavedTableConverter.convertTable(old_table,new_catalog_table);
      }
 else {
        table=old_table;
      }
    }
 catch (    IOException e) {
      VoltTable result=PrivateVoltTableFactory.createUnititializedVoltTable();
      result=constructResultsTable();
      result.addRow(m_hostId,hostname,m_siteId,tableName,relevantPartitionIds[0],"FAILURE","Unable to load table: " + tableName + " error: "+ e.getMessage());
      return result;
    }
catch (    VoltTypeException e) {
      VoltTable result=PrivateVoltTableFactory.createUnititializedVoltTable();
      result=constructResultsTable();
      result.addRow(m_hostId,hostname,m_siteId,tableName,relevantPartitionIds[0],"FAILURE","Unable to load table: " + tableName + " error: "+ e.getMessage());
      return result;
    }
    VoltTable[] partitioned_tables=createPartitionedTables(tableName,table);
    if (c != null) {
      c.discard();
    }
    int[] dependencyIds=new int[sites_to_partitions.size()];
    SynthesizedPlanFragment[] pfs=new SynthesizedPlanFragment[sites_to_partitions.size() + 1];
    int pfs_index=0;
    for (    int site_id : sites_to_partitions.keySet()) {
      int partition_id=sites_to_partitions.get(site_id);
      dependencyIds[pfs_index]=TableSaveFileState.getNextDependencyId();
      pfs[pfs_index]=new SynthesizedPlanFragment();
      pfs[pfs_index].fragmentId=SysProcFragmentId.PF_restoreSendPartitionedTable;
      pfs[pfs_index].siteId=site_id;
      pfs[pfs_index].multipartition=false;
      pfs[pfs_index].outputDepId=dependencyIds[pfs_index];
      pfs[pfs_index].inputDepIds=new int[]{};
      ParameterSet params=new ParameterSet();
      params.setParameters(tableName,partition_id,dependencyIds[pfs_index],partitioned_tables[partition_id],allowELT);
      pfs[pfs_index].parameters=params;
      ++pfs_index;
    }
    int result_dependency_id=TableSaveFileState.getNextDependencyId();
    pfs[sites_to_partitions.size()]=new SynthesizedPlanFragment();
    pfs[sites_to_partitions.size()].fragmentId=SysProcFragmentId.PF_restoreSendPartitionedTableResults;
    pfs[sites_to_partitions.size()].multipartition=false;
    pfs[sites_to_partitions.size()].outputDepId=result_dependency_id;
    pfs[sites_to_partitions.size()].inputDepIds=dependencyIds;
    ParameterSet params=new ParameterSet();
    params.setParameters(result_dependency_id);
    pfs[sites_to_partitions.size()].parameters=params;
    results=executeSysProcPlanFragments(pfs,result_dependency_id);
  }
  return results[0];
}
