{
  String hostname=ConnectionUtil.getHostnameOrAddress();
  TableSaveFile savefile=null;
  try {
    savefile=getTableSaveFile(getSaveFileForReplicatedTable(tableName),3,null);
    assert(savefile.getCompleted());
  }
 catch (  IOException e) {
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,hostname,m_siteId,tableName,-1,"FAILURE","Unable to load table: " + tableName + " error: "+ e.getMessage());
    return result;
  }
  VoltTable[] results=null;
  final Table new_catalog_table=getCatalogTable(tableName);
  Boolean needsConversion=null;
  while (savefile.hasMoreChunks()) {
    VoltTable table=null;
    try {
      final org.voltdb.utils.DBBPool.BBContainer c=savefile.getNextChunk();
      if (c == null) {
        continue;
      }
      if (needsConversion == null) {
        VoltTable old_table=PrivateVoltTableFactory.createVoltTableFromBuffer(c.b.duplicate(),true);
        needsConversion=SavedTableConverter.needsConversion(old_table,new_catalog_table);
      }
      if (needsConversion.booleanValue()) {
        VoltTable old_table=PrivateVoltTableFactory.createVoltTableFromBuffer(c.b,true);
        table=SavedTableConverter.convertTable(old_table,new_catalog_table);
      }
 else {
        ByteBuffer copy=ByteBuffer.allocate(c.b.remaining());
        copy.put(c.b);
        copy.flip();
        table=PrivateVoltTableFactory.createVoltTableFromBuffer(copy,true);
      }
      c.discard();
    }
 catch (    IOException e) {
      VoltTable result=PrivateVoltTableFactory.createUninitializedVoltTable();
      result=constructResultsTable();
      result.addRow(m_hostId,hostname,m_siteId,tableName,-1,"FAILURE","Unable to load table: " + tableName + " error: "+ e.getMessage());
      return result;
    }
catch (    VoltTypeException e) {
      VoltTable result=PrivateVoltTableFactory.createUninitializedVoltTable();
      result=constructResultsTable();
      result.addRow(m_hostId,hostname,m_siteId,tableName,-1,"FAILURE","Unable to load table: " + tableName + " error: "+ e.getMessage());
      return result;
    }
    SynthesizedPlanFragment[] pfs=new SynthesizedPlanFragment[2];
    int result_dependency_id=TableSaveFileState.getNextDependencyId();
    pfs[0]=new SynthesizedPlanFragment();
    pfs[0].fragmentId=SysProcFragmentId.PF_restoreSendReplicatedTable;
    pfs[0].siteId=siteId;
    pfs[0].outputDepId=result_dependency_id;
    pfs[0].inputDepIds=new int[]{};
    pfs[0].multipartition=false;
    ParameterSet params=new ParameterSet();
    params.setParameters(tableName,result_dependency_id,table,allowELT);
    pfs[0].parameters=params;
    int final_dependency_id=TableSaveFileState.getNextDependencyId();
    pfs[1]=new SynthesizedPlanFragment();
    pfs[1].fragmentId=SysProcFragmentId.PF_restoreSendReplicatedTableResults;
    pfs[1].outputDepId=final_dependency_id;
    pfs[1].inputDepIds=new int[]{result_dependency_id};
    pfs[1].multipartition=false;
    ParameterSet result_params=new ParameterSet();
    result_params.setParameters(final_dependency_id);
    pfs[1].parameters=result_params;
    TRACE_LOG.trace("Sending replicated table: " + tableName + " to site id:"+ siteId);
    results=executeSysProcPlanFragments(pfs,final_dependency_id);
  }
  return results[0];
}
