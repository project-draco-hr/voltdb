{
  String hostname=ConnectionUtil.getHostnameOrAddress();
  if (fragmentId == SysProcFragmentId.PF_restoreDistributeExportSequenceNumbers) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[0] instanceof byte[]);
    VoltTable result=new VoltTable(new VoltTable.ColumnInfo("RESULT",VoltType.STRING));
    try {
      ByteArrayInputStream bais=new ByteArrayInputStream((byte[])params.toArray()[0]);
      ObjectInputStream ois=new ObjectInputStream(bais);
      Map<String,Map<Integer,Long>> exportSequenceNumbers=(Map<String,Map<Integer,Long>>)ois.readObject();
      Database db=context.getDatabase();
      Integer myPartitionId=context.getExecutionSite().getCorrespondingPartitionId();
      for (      Table t : db.getTables()) {
        if (!CatalogUtil.isTableExportOnly(db,t))         continue;
        String signature=t.getSignature();
        String name=t.getTypeName();
        Map<Integer,Long> sequenceNumberPerPartition=exportSequenceNumbers.get(name);
        if (sequenceNumberPerPartition == null) {
          HOST_LOG.warn("Could not find export sequence number for table " + name + ". This warning is safe to ignore if you are loading a pre 1.3 snapshot"+ " which would not contain these sequence numbers (added in 1.3)."+ " If this is a post 1.3 snapshot then the restore has failed and export sequence "+ " are reset to 0");
          continue;
        }
        Long sequenceNumber=sequenceNumberPerPartition.get(myPartitionId);
        if (sequenceNumber == null) {
          HOST_LOG.warn("Could not find an export sequence number for table " + name + " partition "+ myPartitionId+ ". This warning is safe to ignore if you are loading a pre 1.3 snapshot "+ " which would not contain these sequence numbers (added in 1.3)."+ " If this is a post 1.3 snapshot then the restore has failed and export sequence "+ " are reset to 0");
          continue;
        }
        context.getExecutionEngine().exportAction(false,0,sequenceNumber,myPartitionId,signature);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      HOST_LOG.error(e);
      result.addRow("FAILURE");
    }
    return new DependencyPair(DEP_restoreDistributeExportSequenceNumbers,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributeExportSequenceNumbersResults) {
    TRACE_LOG.trace("Aggregating digest scan state");
    assert(dependencies.size() > 0);
    List<VoltTable> dep=dependencies.get(DEP_restoreDistributeExportSequenceNumbers);
    VoltTable result=new VoltTable(new VoltTable.ColumnInfo("RESULT",VoltType.STRING));
    for (    VoltTable table : dep) {
      while (table.advanceRow()) {
        result.add(table);
      }
    }
    return new DependencyPair(DEP_restoreDistributeExportSequenceNumbersResults,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDigestScan) {
    VoltTable result=new VoltTable(new VoltTable.ColumnInfo("DIGEST",VoltType.STRING),new VoltTable.ColumnInfo("RESULT",VoltType.STRING),new VoltTable.ColumnInfo("ERR_MSG",VoltType.STRING));
    int host_id=context.getExecutionSite().getCorrespondingHostId();
    Integer lowest_site_id=VoltDB.instance().getCatalogContext().siteTracker.getLowestLiveExecSiteIdForHost(host_id);
    if (context.getExecutionSite().getSiteId() == lowest_site_id) {
      try {
        TRACE_LOG.trace("Checking saved table digest state for restore of: " + m_filePath + ", "+ m_fileNonce);
        List<JSONObject> digests=SnapshotUtil.retrieveDigests(m_filePath,m_fileNonce);
        for (        JSONObject obj : digests) {
          result.addRow(obj.toString(),"SUCCESS",null);
        }
      }
 catch (      Exception e) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        e.printStackTrace(pw);
        pw.flush();
        e.printStackTrace();
        HOST_LOG.error(e);
        result.addRow(null,"FAILURE",sw.toString());
        return new DependencyPair(DEP_restoreDigestScan,result);
      }
    }
    return new DependencyPair(DEP_restoreDigestScan,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDigestScanResults) {
    TRACE_LOG.trace("Aggregating digest scan state");
    assert(dependencies.size() > 0);
    List<VoltTable> dep=dependencies.get(DEP_restoreDigestScan);
    VoltTable result=new VoltTable(new VoltTable.ColumnInfo("DIGEST",VoltType.STRING),new VoltTable.ColumnInfo("RESULT",VoltType.STRING),new VoltTable.ColumnInfo("ERR_MSG",VoltType.STRING));
    for (    VoltTable table : dep) {
      while (table.advanceRow()) {
        result.add(table);
      }
    }
    return new DependencyPair(DEP_restoreDigestScanResults,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreScan) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    VoltTable result=ClusterSaveFileState.constructEmptySaveFileStateVoltTable();
    int host_id=context.getExecutionSite().getCorrespondingHostId();
    Integer lowest_site_id=VoltDB.instance().getCatalogContext().siteTracker.getLowestLiveExecSiteIdForHost(host_id);
    if (context.getExecutionSite().getSiteId() == lowest_site_id) {
      m_initializedTableSaveFileNames.clear();
      m_filePath=(String)params.toArray()[0];
      m_fileNonce=(String)params.toArray()[1];
      TRACE_LOG.trace("Checking saved table state for restore of: " + m_filePath + ", "+ m_fileNonce);
      File[] savefiles=retrieveRelevantFiles(m_filePath,m_fileNonce);
      for (      File file : savefiles) {
        TableSaveFile savefile=null;
        try {
          savefile=getTableSaveFile(file,1,null);
          try {
            if (!savefile.getCompleted()) {
              continue;
            }
            String is_replicated="FALSE";
            if (savefile.isReplicated()) {
              is_replicated="TRUE";
            }
            int partitionIds[]=savefile.getPartitionIds();
            for (            int pid : partitionIds) {
              result.addRow(m_hostId,hostname,savefile.getHostId(),savefile.getHostname(),savefile.getClusterName(),savefile.getDatabaseName(),savefile.getTableName(),is_replicated,pid,savefile.getTotalPartitions());
            }
          }
  finally {
            savefile.close();
          }
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    return new DependencyPair(DEP_restoreScan,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreScanResults) {
    TRACE_LOG.trace("Aggregating saved table state");
    assert(dependencies.size() > 0);
    List<VoltTable> dep=dependencies.get(DEP_restoreScan);
    VoltTable result=ClusterSaveFileState.constructEmptySaveFileStateVoltTable();
    for (    VoltTable table : dep) {
      while (table.advanceRow()) {
        result.add(table);
      }
    }
    return new DependencyPair(DEP_restoreScanResults,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreLoadReplicatedTable) {
    m_haveDoneRestore=true;
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    String table_name=(String)params.toArray()[0];
    int dependency_id=(Integer)params.toArray()[1];
    TRACE_LOG.trace("Loading replicated table: " + table_name);
    String result_str="SUCCESS";
    String error_msg="";
    TableSaveFile savefile=null;
    try {
      savefile=getTableSaveFile(getSaveFileForReplicatedTable(table_name),3,null);
      assert(savefile.getCompleted());
    }
 catch (    IOException e) {
      VoltTable result=constructResultsTable();
      result.addRow(m_hostId,hostname,m_siteId,table_name,-1,"FAILURE","Unable to load table: " + table_name + " error: "+ e.getMessage());
      return new DependencyPair(dependency_id,result);
    }
    while (savefile.hasMoreChunks()) {
      VoltTable table=null;
      try {
        final org.voltdb.utils.DBBPool.BBContainer c=savefile.getNextChunk();
        if (c == null) {
          continue;
        }
        VoltTable old_table=PrivateVoltTableFactory.createVoltTableFromBuffer(c.b,true);
        Table new_catalog_table=getCatalogTable(table_name);
        table=SavedTableConverter.convertTable(old_table,new_catalog_table);
        c.discard();
      }
 catch (      IOException e) {
        VoltTable result=constructResultsTable();
        result.addRow(m_hostId,hostname,m_siteId,table_name,-1,"FAILURE","Unable to load table: " + table_name + " error: "+ e.getMessage());
        return new DependencyPair(dependency_id,result);
      }
catch (      VoltTypeException e) {
        VoltTable result=constructResultsTable();
        result.addRow(m_hostId,hostname,m_siteId,table_name,-1,"FAILURE","Unable to load table: " + table_name + " error: "+ e.getMessage());
        return new DependencyPair(dependency_id,result);
      }
      try {
        super.voltLoadTable(context.getCluster().getTypeName(),context.getDatabase().getTypeName(),table_name,table);
      }
 catch (      VoltAbortException e) {
        result_str="FAILURE";
        error_msg=e.getMessage();
        break;
      }
    }
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,hostname,m_siteId,table_name,-1,result_str,error_msg);
    try {
      savefile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributeReplicatedTable) {
    m_haveDoneRestore=true;
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    assert(params.toArray()[3] != null);
    String table_name=(String)params.toArray()[0];
    int site_id=(Integer)params.toArray()[1];
    int dependency_id=(Integer)params.toArray()[2];
    TRACE_LOG.trace("Distributing replicated table: " + table_name + " to: "+ site_id);
    VoltTable result=performDistributeReplicatedTable(table_name,site_id);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendReplicatedTable) {
    m_haveDoneRestore=true;
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    assert(params.toArray()[3] != null);
    String table_name=(String)params.toArray()[0];
    int dependency_id=(Integer)params.toArray()[1];
    VoltTable table=(VoltTable)params.toArray()[2];
    TRACE_LOG.trace("Received replicated table: " + table_name);
    String result_str="SUCCESS";
    String error_msg="";
    try {
      super.voltLoadTable(context.getCluster().getTypeName(),context.getDatabase().getTypeName(),table_name,table);
    }
 catch (    VoltAbortException e) {
      result_str="FAILURE";
      error_msg=e.getMessage();
    }
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,hostname,m_siteId,table_name,-1,result_str,error_msg);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendReplicatedTableResults) {
    m_haveDoneRestore=true;
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    TRACE_LOG.trace("Received confirmmation of successful replicated table load");
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreLoadReplicatedTableResults) {
    m_haveDoneRestore=true;
    TRACE_LOG.trace("Aggregating replicated table restore results");
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    assert(dependencies.size() > 0);
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributePartitionedTable) {
    m_haveDoneRestore=true;
    Object paramsA[]=params.toArray();
    assert(paramsA[0] != null);
    assert(paramsA[1] != null);
    assert(paramsA[2] != null);
    assert(paramsA[3] != null);
    String table_name=(String)paramsA[0];
    int originalHosts[]=(int[])paramsA[1];
    int relevantPartitions[]=(int[])paramsA[2];
    int dependency_id=(Integer)paramsA[3];
    for (    int partition_id : relevantPartitions) {
      TRACE_LOG.trace("Distributing partitioned table: " + table_name + " partition id: "+ partition_id);
    }
    VoltTable result=performDistributePartitionedTable(table_name,originalHosts,relevantPartitions);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributePartitionedTableResults) {
    m_haveDoneRestore=true;
    TRACE_LOG.trace("Aggregating partitioned table restore results");
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendPartitionedTable) {
    m_haveDoneRestore=true;
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    assert(params.toArray()[3] != null);
    String table_name=(String)params.toArray()[0];
    int partition_id=(Integer)params.toArray()[1];
    int dependency_id=(Integer)params.toArray()[2];
    VoltTable table=(VoltTable)params.toArray()[3];
    TRACE_LOG.trace("Received partitioned table: " + table_name);
    String result_str="SUCCESS";
    String error_msg="";
    try {
      super.voltLoadTable(context.getCluster().getTypeName(),context.getDatabase().getTypeName(),table_name,table);
    }
 catch (    VoltAbortException e) {
      result_str="FAILURE";
      error_msg=e.getMessage();
    }
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,hostname,m_siteId,table_name,partition_id,result_str,error_msg);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendPartitionedTableResults) {
    m_haveDoneRestore=true;
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    TRACE_LOG.trace("Received confirmation of successful partitioned table load");
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
  assert(false);
  return null;
}
