{
  if (fragmentId == SysProcFragmentId.PF_restoreScan) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    m_initializedTableSaveFiles.clear();
    m_filePath=(String)params.toArray()[0];
    m_fileNonce=(String)params.toArray()[1];
    TRACE_LOG.trace("Checking saved table state for restore of: " + m_filePath + ", "+ m_fileNonce);
    VoltTable result=ClusterSaveFileState.constructEmptySaveFileStateVoltTable();
    File[] savefiles=retrieveRelevantFiles(m_filePath,m_fileNonce);
    for (    File file : savefiles) {
      TableSaveFile savefile=null;
      try {
        savefile=getTableSaveFile(file,1,null);
        try {
          if (!savefile.getCompleted()) {
            continue;
          }
          String is_replicated="FALSE";
          if (savefile.isReplicated()) {
            is_replicated="TRUE";
          }
          int partitionIds[]=savefile.getPartitionIds();
          for (          int pid : partitionIds) {
            result.addRow(m_hostId,savefile.getHostId(),savefile.getClusterName(),savefile.getDatabaseName(),savefile.getTableName(),is_replicated,pid,savefile.getTotalPartitions());
          }
        }
  finally {
          savefile.close();
        }
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
    return new DependencyPair(DEP_restoreScan,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreScanResults) {
    TRACE_LOG.trace("Aggregating saved table state");
    assert(dependencies.size() > 0);
    List<VoltTable> dep=dependencies.get(DEP_restoreScan);
    VoltTable result=ClusterSaveFileState.constructEmptySaveFileStateVoltTable();
    for (    VoltTable table : dep) {
      while (table.advanceRow()) {
        result.add(table);
      }
    }
    return new DependencyPair(DEP_restoreScanResults,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreLoadReplicatedTable) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    String table_name=(String)params.toArray()[0];
    int dependency_id=(Integer)params.toArray()[1];
    int allowELT=(Integer)params.toArray()[2];
    TRACE_LOG.trace("Loading replicated table: " + table_name);
    String result_str="SUCCESS";
    String error_msg="";
    TableSaveFile savefile=null;
    try {
      savefile=getTableSaveFile(getSaveFileForReplicatedTable(table_name),3,null);
      assert(savefile.getCompleted());
    }
 catch (    IOException e) {
      VoltTable result=constructResultsTable();
      result.addRow(m_hostId,m_siteId,table_name,-1,"FAILURE","Unable to load table: " + table_name + " error: "+ e.getMessage());
      return new DependencyPair(dependency_id,result);
    }
    while (savefile.hasMoreChunks()) {
      VoltTable table=null;
      try {
        org.voltdb.utils.DBBPool.BBContainer c=savefile.getNextChunk();
        if (c == null) {
          continue;
        }
        VoltTable old_table=new VoltTable(c.b,true);
        Table new_catalog_table=getCatalogTable(table_name);
        table=SavedTableConverter.convertTable(old_table,new_catalog_table);
        c.discard();
      }
 catch (      IOException e) {
        VoltTable result=constructResultsTable();
        result.addRow(m_hostId,m_siteId,table_name,-1,"FAILURE","Unable to load table: " + table_name + " error: "+ e.getMessage());
        return new DependencyPair(dependency_id,result);
      }
catch (      VoltTypeException e) {
        VoltTable result=constructResultsTable();
        result.addRow(m_hostId,m_siteId,table_name,-1,"FAILURE","Unable to load table: " + table_name + " error: "+ e.getMessage());
        return new DependencyPair(dependency_id,result);
      }
      try {
        super.voltLoadTable(context.getCluster().getTypeName(),context.getDatabase().getTypeName(),table_name,table,allowELT);
      }
 catch (      VoltAbortException e) {
        result_str="FAILURE";
        error_msg=e.getMessage();
        break;
      }
    }
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,m_siteId,table_name,-1,result_str,error_msg);
    try {
      savefile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributeReplicatedTable) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    assert(params.toArray()[3] != null);
    String table_name=(String)params.toArray()[0];
    int site_id=(Integer)params.toArray()[1];
    int dependency_id=(Integer)params.toArray()[2];
    int allowELT=(Integer)params.toArray()[3];
    TRACE_LOG.trace("Distributing replicated table: " + table_name + " to: "+ site_id);
    VoltTable result=performDistributeReplicatedTable(table_name,site_id,allowELT);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendReplicatedTable) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    assert(params.toArray()[3] != null);
    String table_name=(String)params.toArray()[0];
    int dependency_id=(Integer)params.toArray()[1];
    VoltTable table=(VoltTable)params.toArray()[2];
    int allowELT=(Integer)params.toArray()[3];
    TRACE_LOG.trace("Received replicated table: " + table_name);
    String result_str="SUCCESS";
    String error_msg="";
    try {
      super.voltLoadTable(context.getCluster().getTypeName(),context.getDatabase().getTypeName(),table_name,table,allowELT);
    }
 catch (    VoltAbortException e) {
      result_str="FAILURE";
      error_msg=e.getMessage();
    }
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,m_siteId,table_name,-1,result_str,error_msg);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendReplicatedTableResults) {
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    TRACE_LOG.trace("Received confirmmation of successful replicated table load");
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreLoadReplicatedTableResults) {
    TRACE_LOG.trace("Aggregating replicated table restore results");
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    assert(dependencies.size() > 0);
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributePartitionedTable) {
    Object paramsA[]=params.toArray();
    assert(paramsA[0] != null);
    assert(paramsA[1] != null);
    assert(paramsA[2] != null);
    assert(paramsA[3] != null);
    String table_name=(String)paramsA[0];
    int originalHosts[]=(int[])paramsA[1];
    int relevantPartitions[]=(int[])paramsA[2];
    int dependency_id=(Integer)paramsA[3];
    int allowELT=(Integer)paramsA[4];
    for (    int partition_id : relevantPartitions) {
      TRACE_LOG.trace("Distributing partitioned table: " + table_name + " partition id: "+ partition_id);
    }
    VoltTable result=performDistributePartitionedTable(table_name,originalHosts,relevantPartitions,allowELT);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreDistributePartitionedTableResults) {
    TRACE_LOG.trace("Aggregating partitioned table restore results");
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendPartitionedTable) {
    assert(params.toArray()[0] != null);
    assert(params.toArray()[1] != null);
    assert(params.toArray()[2] != null);
    assert(params.toArray()[3] != null);
    assert(params.toArray()[4] != null);
    String table_name=(String)params.toArray()[0];
    int partition_id=(Integer)params.toArray()[1];
    int dependency_id=(Integer)params.toArray()[2];
    VoltTable table=(VoltTable)params.toArray()[3];
    int allowELT=(Integer)params.toArray()[4];
    TRACE_LOG.trace("Received partitioned table: " + table_name);
    String result_str="SUCCESS";
    String error_msg="";
    try {
      super.voltLoadTable(context.getCluster().getTypeName(),context.getDatabase().getTypeName(),table_name,table,allowELT);
    }
 catch (    VoltAbortException e) {
      result_str="FAILURE";
      error_msg=e.getMessage();
    }
    VoltTable result=constructResultsTable();
    result.addRow(m_hostId,m_siteId,table_name,partition_id,result_str,error_msg);
    return new DependencyPair(dependency_id,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_restoreSendPartitionedTableResults) {
    assert(params.toArray()[0] != null);
    int dependency_id=(Integer)params.toArray()[0];
    TRACE_LOG.trace("Received confirmation of successful partitioned table load");
    VoltTable result=constructResultsTable();
    for (    int dep_id : dependencies.keySet()) {
      List<VoltTable> table_list=dependencies.get(dep_id);
      assert(table_list.size() == 1);
      VoltTable t=table_list.get(0);
      while (t.advanceRow()) {
        result.add(t);
      }
    }
    return new DependencyPair(dependency_id,result);
  }
  assert(false);
  return null;
}
