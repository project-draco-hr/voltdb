def TestsForArity(n):
    'Returns the tests for n-ary predicate assertions.'
    DEFS = {'n': n, 'es': Iter(n, 'e%s', sep=', '), 'vs': Iter(n, 'v%s', sep=', '), 'vts': Iter(n, '#v%s', sep=', '), 'tvs': Iter(n, 'T%s v%s', sep=', '), 'int_vs': Iter(n, 'int v%s', sep=', '), 'Bool_vs': Iter(n, 'Bool v%s', sep=', '), 'types': Iter(n, 'typename T%s', sep=', '), 'v_sum': Iter(n, 'v%s', sep=' + '), 'arity': Arity(n), 'Arity': Title(Arity(n)), }
    tests = ('// Sample functions/functors for testing %(arity)s predicate assertions.\n\n// A %(arity)s predicate function.\ntemplate <%(types)s>\nbool PredFunction%(n)s(%(tvs)s) {\n  return %(v_sum)s > 0;\n}\n\n// The following two functions are needed to circumvent a bug in\n// gcc 2.95.3, which sometimes has problem with the above template\n// function.\nbool PredFunction%(n)sInt(%(int_vs)s) {\n  return %(v_sum)s > 0;\n}\nbool PredFunction%(n)sBool(%(Bool_vs)s) {\n  return %(v_sum)s > 0;\n}\n' % DEFS)
    tests += ('\n// A %(arity)s predicate functor.\nstruct PredFunctor%(n)s {\n  template <%(types)s>\n  bool operator()(' % DEFS)
    tests += Iter(n, 'const T%s& v%s', sep=',\n                  ')
    tests += (') {\n    return %(v_sum)s > 0;\n  }\n};\n' % DEFS)
    tests += ('\n// A %(arity)s predicate-formatter function.\ntemplate <%(types)s>\ntesting::AssertionResult PredFormatFunction%(n)s(' % DEFS)
    tests += Iter(n, 'const char* e%s', sep=',\n                                             ')
    tests += Iter(n, ',\n                                             const T%s& v%s')
    tests += (') {\n  if (PredFunction%(n)s(%(vs)s))\n    return testing::AssertionSuccess();\n\n  return testing::AssertionFailure()\n      << ' % DEFS)
    tests += Iter(n, 'e%s', sep=' << " + " << ')
    tests += ('\n      << " is expected to be positive, but evaluates to "\n      << %(v_sum)s << ".";\n}\n' % DEFS)
    tests += ('\n// A %(arity)s predicate-formatter functor.\nstruct PredFormatFunctor%(n)s {\n  template <%(types)s>\n  testing::AssertionResult operator()(' % DEFS)
    tests += Iter(n, 'const char* e%s', sep=',\n                                      ')
    tests += Iter(n, ',\n                                      const T%s& v%s')
    tests += (') const {\n    return PredFormatFunction%(n)s(%(es)s, %(vs)s);\n  }\n};\n' % DEFS)
    tests += ('\n// Tests for {EXPECT|ASSERT}_PRED_FORMAT%(n)s.\n\nclass Predicate%(n)sTest : public testing::Test {\n protected:\n  virtual void SetUp() {\n    expected_to_finish_ = true;\n    finished_ = false;' % DEFS)
    tests += (('\n    ' + Iter(n, 'n%s_ = ')) + '0;\n  }\n')
    tests += "\n  virtual void TearDown() {\n    // Verifies that each of the predicate's arguments was evaluated\n    // exactly once."
    tests += ''.join([('\n    EXPECT_EQ(1, n%s_) <<\n        "The predicate assertion didn\'t evaluate argument %s "\n        "exactly once.";' % (i, (i + 1))) for i in OneTo(n)])
    tests += ('\n\n    // Verifies that the control flow in the test function is expected.\n    if (expected_to_finish_ && !finished_) {\n      FAIL() << "The predicate assertion unexpactedly aborted the test.";\n    } else if (!expected_to_finish_ && finished_) {\n      FAIL() << "The failed predicate assertion didn\'t abort the test "\n                "as expected.";\n    }\n  }\n\n  // true iff the test function is expected to run to finish.\n  static bool expected_to_finish_;\n\n  // true iff the test function did run to finish.\n  static bool finished_;\n' % DEFS)
    tests += Iter(n, '\n  static int n%s_;')
    tests += ('\n};\n\nbool Predicate%(n)sTest::expected_to_finish_;\nbool Predicate%(n)sTest::finished_;\n' % DEFS)
    tests += (Iter(n, 'int Predicate%%(n)sTest::n%s_;\n') % DEFS)
    tests += ('\ntypedef Predicate%(n)sTest EXPECT_PRED_FORMAT%(n)sTest;\ntypedef Predicate%(n)sTest ASSERT_PRED_FORMAT%(n)sTest;\ntypedef Predicate%(n)sTest EXPECT_PRED%(n)sTest;\ntypedef Predicate%(n)sTest ASSERT_PRED%(n)sTest;\n' % DEFS)

    def GenTest(use_format, use_assert, expect_failure, use_functor, use_user_type):
        'Returns the test for a predicate assertion macro.\n\n    Args:\n      use_format:     true iff the assertion is a *_PRED_FORMAT*.\n      use_assert:     true iff the assertion is a ASSERT_*.\n      expect_failure: true iff the assertion is expected to fail.\n      use_functor:    true iff the first argument of the assertion is\n                      a functor (as opposed to a function)\n      use_user_type:  true iff the predicate functor/function takes\n                      argument(s) of a user-defined type.\n\n    Example:\n\n      GenTest(1, 0, 0, 1, 0) returns a test that tests the behavior\n      of a successful EXPECT_PRED_FORMATn() that takes a functor\n      whose arguments have built-in types.'
        if use_assert:
            assrt = 'ASSERT'
        else:
            assrt = 'EXPECT'
        assertion = (assrt + '_PRED')
        if use_format:
            pred_format = 'PredFormat'
            assertion += '_FORMAT'
        else:
            pred_format = 'Pred'
        assertion += ('%(n)s' % DEFS)
        if use_functor:
            pred_format_type = 'functor'
            pred_format += 'Functor%(n)s()'
        else:
            pred_format_type = 'function'
            pred_format += 'Function%(n)s'
            if (not use_format):
                if use_user_type:
                    pred_format += 'Bool'
                else:
                    pred_format += 'Int'
        test_name = pred_format_type.title()
        if use_user_type:
            arg_type = 'user-defined type (Bool)'
            test_name += 'OnUserType'
            if expect_failure:
                arg = 'Bool(n%s_++)'
            else:
                arg = 'Bool(++n%s_)'
        else:
            arg_type = 'built-in type (int)'
            test_name += 'OnBuiltInType'
            if expect_failure:
                arg = 'n%s_++'
            else:
                arg = '++n%s_'
        if expect_failure:
            successful_or_failed = 'failed'
            expected_or_not = 'expected.'
            test_name += 'Failure'
        else:
            successful_or_failed = 'successful'
            expected_or_not = 'UNEXPECTED!'
            test_name += 'Success'
        defs = DEFS.copy()
        defs.update({'assert': assrt, 'assertion': assertion, 'test_name': test_name, 'pf_type': pred_format_type, 'pf': pred_format, 'arg_type': arg_type, 'arg': arg, 'successful': successful_or_failed, 'expected': expected_or_not, })
        test = ('\n// Tests a %(successful)s %(assertion)s where the\n// predicate-formatter is a %(pf_type)s on a %(arg_type)s.\nTEST_F(%(assertion)sTest, %(test_name)s) {' % defs)
        indent = ((len(assertion) + 3) * ' ')
        extra_indent = ''
        if expect_failure:
            extra_indent = '  '
            if use_assert:
                test += '\n  expected_to_finish_ = false;\n  EXPECT_FATAL_FAILURE({  // NOLINT'
            else:
                test += '\n  EXPECT_NONFATAL_FAILURE({  // NOLINT'
        test += (('\n' + extra_indent) + ('  %(assertion)s(%(pf)s' % defs))
        test = (test % defs)
        test += Iter(n, (((',\n' + indent) + extra_indent) + ('%(arg)s' % defs)))
        test += ((');\n' + extra_indent) + '  finished_ = true;\n')
        if expect_failure:
            test += '  }, "");\n'
        test += '}\n'
        return test
    tests += ''.join([GenTest(use_format, use_assert, expect_failure, use_functor, use_user_type) for use_format in [0, 1] for use_assert in [0, 1] for expect_failure in [0, 1] for use_functor in [0, 1] for use_user_type in [0, 1]])
    return tests
