def ImplementationForArity(n):
    'Returns the implementation of n-ary predicate assertions.'
    DEFS = {'n': str(n), 'vs': Iter(n, 'v%s', sep=', '), 'vts': Iter(n, '#v%s', sep=', '), 'arity': Arity(n), 'Arity': Title(Arity(n)), }
    impl = ("\n\n// Helper function for implementing {EXPECT|ASSERT}_PRED%(n)s.  Don't use\n// this in your code.\ntemplate <typename Pred" % DEFS)
    impl += Iter(n, ',\n          typename T%s')
    impl += ('>\nAssertionResult AssertPred%(n)sHelper(const char* pred_text' % DEFS)
    impl += Iter(n, ',\n                                  const char* e%s')
    impl += ',\n                                  Pred pred'
    impl += Iter(n, ',\n                                  const T%s& v%s')
    impl += (') {\n  if (pred(%(vs)s)) return AssertionSuccess();\n\n' % DEFS)
    impl += '  return AssertionFailure() << pred_text << "("'
    impl += Iter(n, '\n                            << e%s', sep=' << ", "')
    impl += ' << ") evaluates to false, where"'
    impl += Iter(n, '\n                            << "\\n" << e%s << " evaluates to " << v%s')
    impl += (";\n}\n\n// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT%(n)s.\n// Don't use this in your code.\n#define GTEST_PRED_FORMAT%(n)s_(pred_format, %(vs)s, on_failure)\\\n  GTEST_ASSERT_(pred_format(%(vts)s, %(vs)s), \\\n                on_failure)\n\n// Internal macro for implementing {EXPECT|ASSERT}_PRED%(n)s.  Don't use\n// this in your code.\n#define GTEST_PRED%(n)s_(pred, %(vs)s, on_failure)\\\n  GTEST_ASSERT_(::testing::AssertPred%(n)sHelper(#pred" % DEFS)
    impl += Iter(n, ', \\\n                                             #v%s')
    impl += ', \\\n                                             pred'
    impl += Iter(n, ', \\\n                                             v%s')
    impl += ('), on_failure)\n\n// %(Arity)s predicate assertion macros.\n#define EXPECT_PRED_FORMAT%(n)s(pred_format, %(vs)s) \\\n  GTEST_PRED_FORMAT%(n)s_(pred_format, %(vs)s, GTEST_NONFATAL_FAILURE_)\n#define EXPECT_PRED%(n)s(pred, %(vs)s) \\\n  GTEST_PRED%(n)s_(pred, %(vs)s, GTEST_NONFATAL_FAILURE_)\n#define ASSERT_PRED_FORMAT%(n)s(pred_format, %(vs)s) \\\n  GTEST_PRED_FORMAT%(n)s_(pred_format, %(vs)s, GTEST_FATAL_FAILURE_)\n#define ASSERT_PRED%(n)s(pred, %(vs)s) \\\n  GTEST_PRED%(n)s_(pred, %(vs)s, GTEST_FATAL_FAILURE_)\n\n' % DEFS)
    return impl
