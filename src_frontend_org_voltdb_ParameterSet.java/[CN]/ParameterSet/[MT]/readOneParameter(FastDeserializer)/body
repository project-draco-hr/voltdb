{
  Object value;
  byte[] encodedString=null;
  byte[][] encodedStringArray=null;
  byte nextTypeByte=in.readByte();
  if (nextTypeByte == ARRAY) {
    VoltType nextType=null;
    byte etype=in.readByte();
    try {
      nextType=VoltType.get(etype);
    }
 catch (    AssertionError ae) {
      throw new RuntimeException("ParameterSet doesn't support type " + etype);
    }
    if (nextType == null) {
      value=null;
    }
 else     if (nextType == VoltType.STRING) {
      encodedStringArray=(byte[][])in.readArray(byte[].class);
      String[] sval=new String[encodedStringArray.length];
      for (int i=0; i < encodedStringArray.length; ++i) {
        if (encodedStringArray[i] == null) {
          sval[i]=null;
        }
 else {
          sval[i]=new String(encodedStringArray[i],Constants.UTF8ENCODING);
        }
      }
      value=sval;
    }
 else {
      value=in.readArray(nextType.classFromType());
    }
  }
 else {
    VoltType nextType;
    try {
      nextType=VoltType.get(nextTypeByte);
    }
 catch (    AssertionError ae) {
      throw new RuntimeException("ParameterSet doesn't support type " + nextTypeByte);
    }
switch (nextType) {
case NULL:
      value=null;
    break;
case TINYINT:
  value=in.readByte();
break;
case SMALLINT:
value=in.readShort();
break;
case INTEGER:
value=in.readInt();
break;
case BIGINT:
value=in.readLong();
break;
case FLOAT:
value=in.readDouble();
break;
case STRING:
encodedString=in.readVarbinary();
if (encodedString == null) {
value=VoltType.NULL_STRING_OR_VARBINARY;
}
 else {
value=new String(encodedString,Constants.UTF8ENCODING);
}
break;
case VARBINARY:
byte[] bin_val=in.readVarbinary();
if (bin_val == null) {
value=VoltType.NULL_STRING_OR_VARBINARY;
}
 else {
value=bin_val;
}
break;
case TIMESTAMP:
final long micros=in.readLong();
value=new TimestampType(micros);
break;
case VOLTTABLE:
value=in.readObject(VoltTable.class);
break;
case DECIMAL:
{
BigDecimal decimal_val=in.readBigDecimal();
if (decimal_val == null) {
value=VoltType.NULL_DECIMAL;
}
 else {
value=decimal_val;
}
break;
}
default :
throw new RuntimeException("ParameterSet doesn't support type " + nextType);
}
}
OneParamInfo retval=new OneParamInfo();
retval.value=value;
retval.encodedString=encodedString;
retval.encodedStringArray=encodedStringArray;
return retval;
}
