{
  out.writeShort(m_params.length);
  for (  Object obj : m_params) {
    if ((obj == null) || (obj == JSONObject.NULL)) {
      VoltType type=VoltType.NULL;
      out.writeByte(type.getValue());
      continue;
    }
    Class<?> cls=obj.getClass();
    if (cls.isArray()) {
      if (obj instanceof byte[]) {
        final byte[] b=(byte[])obj;
        out.writeByte(VoltType.VARBINARY.getValue());
        out.writeInt(b.length);
        out.write(b);
        continue;
      }
      out.writeByte(ARRAY);
      VoltType type;
      try {
        type=VoltType.typeFromClass(cls.getComponentType());
      }
 catch (      VoltTypeException e) {
        obj=getAKosherArray((Object[])obj);
        cls=obj.getClass();
        type=VoltType.typeFromClass(cls.getComponentType());
      }
      out.writeByte(type.getValue());
switch (type) {
case TINYINT:
        out.writeArray((byte[])obj);
      break;
case SMALLINT:
    out.writeArray((short[])obj);
  break;
case INTEGER:
out.writeArray((int[])obj);
break;
case BIGINT:
out.writeArray((long[])obj);
break;
case FLOAT:
out.writeArray((double[])obj);
break;
case STRING:
out.writeArray((String[])obj);
break;
case TIMESTAMP:
out.writeArray((TimestampType[])obj);
break;
case DECIMAL:
out.writeArray((BigDecimal[])obj);
break;
case VOLTTABLE:
out.writeArray((VoltTable[])obj);
break;
default :
throw new RuntimeException("FIXME: Unsupported type " + type);
}
continue;
}
if (obj == VoltType.NULL_TIMESTAMP) {
out.writeByte(VoltType.TIMESTAMP.getValue());
out.writeLong(VoltType.NULL_BIGINT);
continue;
}
 else if (obj == VoltType.NULL_STRING_OR_VARBINARY) {
out.writeByte(VoltType.STRING.getValue());
out.writeInt(VoltType.NULL_STRING_LENGTH);
continue;
}
 else if (obj == VoltType.NULL_DECIMAL) {
out.writeByte(VoltType.DECIMAL.getValue());
VoltDecimalHelper.serializeNull(out);
continue;
}
VoltType type=VoltType.typeFromClass(cls);
out.writeByte(type.getValue());
switch (type) {
case TINYINT:
out.writeByte((Byte)obj);
break;
case SMALLINT:
out.writeShort((Short)obj);
break;
case INTEGER:
out.writeInt((Integer)obj);
break;
case BIGINT:
out.writeLong((Long)obj);
break;
case FLOAT:
out.writeDouble((Double)obj);
break;
case STRING:
out.writeString((String)obj);
break;
case TIMESTAMP:
out.writeTimestamp((TimestampType)obj);
break;
case DECIMAL:
VoltDecimalHelper.serializeBigDecimal((BigDecimal)obj,out);
break;
case VOLTTABLE:
out.writeObject((VoltTable)obj);
break;
default :
throw new RuntimeException("FIXME: Unsupported type " + type);
}
}
}
