{
  if (rejoinHostId == null || m_hasLocalServer) {
    rejoinHostId=0;
  }
  int portNoToRejoin=m_cmdLines.get(rejoinHostId).internalPort();
  System.out.println("Rejoining " + hostId + " to hostID: "+ rejoinHostId);
  ArrayList<EEProcess> eeProcs=m_eeProcs.get(hostId);
  for (  EEProcess proc : eeProcs) {
    try {
      proc.waitForShutdown();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  eeProcs.clear();
  for (int ii=0; ii < m_siteCount; ii++) {
    String logfile="LocalCluster_host_" + hostId + "_site"+ ii+ ".log";
    eeProcs.add(new EEProcess(templateCmdLine.target(),logfile));
  }
  PipeToFile ptf=null;
  long start=0;
  try {
    CommandLine rejoinCmdLn=m_cmdLines.get(hostId);
    if (m_debug) {
      rejoinCmdLn.debugPort(portGenerator.next());
    }
    rejoinCmdLn.rejoinHostAndPort(rejoinHost + ":" + String.valueOf(portNoToRejoin));
    rejoinCmdLn.m_port=portGenerator.nextClient();
    rejoinCmdLn.m_adminPort=portGenerator.nextAdmin();
    rejoinCmdLn.m_zkInterface="127.0.0.1:" + portGenerator.next();
    rejoinCmdLn.m_internalPort=portGenerator.next();
    setPortsFromConfig(hostId,rejoinCmdLn);
    m_procBuilder.command().clear();
    m_procBuilder.command().addAll(rejoinCmdLn.createCommandLine());
    Process proc=m_procBuilder.start();
    start=System.currentTimeMillis();
    String testoutputdir=rejoinCmdLn.buildDir() + File.separator + "testoutput";
    File dir=new File(testoutputdir);
    if (dir.exists()) {
      assert(dir.isDirectory());
    }
 else {
      boolean status=dir.mkdirs();
      assert(status);
    }
    ptf=new PipeToFile(testoutputdir + File.separator + getName()+ "-"+ hostId+ ".txt",proc.getInputStream(),PipeToFile.m_rejoinToken,true,proc);
synchronized (this) {
      m_pipes.set(hostId,ptf);
      m_cluster.set(hostId,proc);
    }
    Thread t=new Thread(ptf);
    t.setName("ClusterPipe:" + String.valueOf(hostId));
    t.start();
  }
 catch (  IOException ex) {
    log.error("Failed to start recovering cluster process:" + ex.getMessage(),ex);
    assert(false);
  }
synchronized (ptf) {
    if (logtime)     System.out.println("********** pre witness: " + (System.currentTimeMillis() - startTime) + " ms");
    while (ptf.m_witnessedReady.get() != true) {
      if (ptf.m_eof.get())       break;
      if (isProcessDead(ptf.getProcess()))       break;
      try {
        ptf.wait();
      }
 catch (      InterruptedException ex) {
        log.error(ex.toString(),ex);
      }
    }
  }
  if (ptf.m_witnessedReady.get()) {
    long finish=System.currentTimeMillis();
    System.out.println("Took " + (finish - start) + " milliseconds, time from init was "+ (finish - ptf.m_initTime));
    return true;
  }
 else {
    System.out.println("Recovering process exited before recovery completed");
    try {
      silentShutdownSingleHost(hostId,true);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    return false;
  }
}
