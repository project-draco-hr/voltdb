{
  assert(!m_running);
  if (m_running) {
    return;
  }
  VoltDB.setDefaultTimezone();
  templateCmdLine.replicaMode(role);
  if (m_isPaused) {
    templateCmdLine.startPaused();
  }
  System.out.println("New CLI options set to: " + isNewCli);
  boolean logtime=false;
  long startTime=0;
  printTiming(logtime,"Starting cluster at: " + System.currentTimeMillis());
  if (clearLocalDataDirectories && !isNewCli) {
    try {
      m_subRoots.clear();
      VoltFile.deleteAllSubRoots();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  portGenerator.reset();
  internalPortGenerator=new InternalPortGeneratorForTest(portGenerator,numberOfCoordinators);
  templateCmdLine.leaderPort(portGenerator.nextInternalPort());
  templateCmdLine.coordinators(internalPortGenerator.getCoordinators());
  m_eeProcs.clear();
  for (int ii=0; ii < m_hostCount; ii++) {
    String logfile="LocalCluster_host_" + ii + ".log";
    m_eeProcs.add(new EEProcess(templateCmdLine.target(),m_siteCount,logfile));
  }
  m_pipes.clear();
  m_cluster.clear();
  m_cmdLines.clear();
  int oopStartIndex=0;
  if (m_hasLocalServer) {
    try {
      if (isNewCli && !skipInit) {
        initLocalServer(oopStartIndex,clearLocalDataDirectories);
      }
      startLocalServer(oopStartIndex,clearLocalDataDirectories);
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
    ++oopStartIndex;
  }
  for (int i=oopStartIndex; i < m_hostCount; i++) {
    try {
      if (isNewCli && !skipInit) {
        initOne(i,clearLocalDataDirectories);
      }
      startOne(i,clearLocalDataDirectories,role,StartAction.CREATE);
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  printTiming(logtime,"Pre-witness: " + (System.currentTimeMillis() - startTime) + "ms");
  boolean allReady=false;
  allReady=waitForAllReady();
  printTiming(logtime,"Post-witness: " + (System.currentTimeMillis() - startTime) + "ms");
  int downProcesses=0;
  for (  Process proc : m_cluster) {
    if ((proc != null) && (isProcessDead(proc))) {
      downProcesses++;
    }
  }
  if ((downProcesses > 0) || !allReady) {
    for (    Process proc : m_cluster) {
      if (proc != null) {
        try {
          proc.destroy();
        }
 catch (        Exception e) {
        }
      }
    }
    if (downProcesses > 0) {
      int expectedProcesses=m_hostCount - (m_hasLocalServer ? 1 : 0);
      if (!m_expectedToCrash) {
        throw new RuntimeException(String.format("%d/%d external processes failed to start",downProcesses,expectedProcesses));
      }
    }
 else     if (!allReady) {
      throw new RuntimeException("One or more external processes failed to complete initialization.");
    }
  }
  if (m_hasLocalServer) {
    m_localServer.waitForInitialization();
  }
  printTiming(logtime,"DONE: " + (System.currentTimeMillis() - startTime) + " ms");
  m_running=true;
  if (m_failureState != FailureState.ALL_RUNNING) {
    killOne();
  }
  if (m_failureState == FailureState.ONE_RECOVERING) {
    int hostId=m_hasLocalServer ? 1 : 0;
    recoverOne(logtime,startTime,hostId);
  }
}
