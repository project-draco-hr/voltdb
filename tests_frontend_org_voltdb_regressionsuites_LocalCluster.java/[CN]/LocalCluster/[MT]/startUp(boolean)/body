{
  assert(!m_running);
  if (m_running) {
    return;
  }
  if (clearLocalDataDirectories) {
    try {
      m_subRoots.clear();
      VoltFile.deleteAllSubRoots();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  boolean logtime=false;
  long startTime=0;
  if (logtime) {
    startTime=System.currentTimeMillis();
    System.out.println("********** Starting cluster at: " + startTime);
  }
  int oopStartIndex=0;
  for (int ii=0; ii < m_hostCount; ii++) {
    ArrayList<EEProcess> procs=new ArrayList<EEProcess>();
    m_eeProcs.add(procs);
    for (int zz=0; zz < m_siteCount; zz++) {
      String logfile="LocalCluster_host_" + ii + "_site"+ zz+ ".log";
      procs.add(new EEProcess(m_target,logfile));
    }
  }
  m_pipes.clear();
  m_cluster.clear();
  if (m_hasLocalServer) {
    if (clearLocalDataDirectories) {
      try {
        m_subRoots.add(VoltFile.initNewSubrootForThisProcess());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    m_cluster.add(null);
    m_pipes.add(null);
    Configuration config=new Configuration();
    config.m_backend=m_target;
    config.m_noLoadLibVOLTDB=(m_target == BackendTarget.HSQLDB_BACKEND);
    config.m_pathToCatalog=m_jarFileName;
    config.m_pathToDeployment=m_pathToDeployment;
    config.m_profilingLevel=ProcedureProfiler.Level.DISABLED;
    config.m_port=VoltDB.DEFAULT_PORT;
    config.m_adminPort=m_baseAdminPort;
    ArrayList<Integer> ports=new ArrayList<Integer>();
    for (    EEProcess proc : m_eeProcs.get(0)) {
      ports.add(proc.port());
    }
    config.m_ipcPorts=java.util.Collections.synchronizedList(ports);
    m_localServer=new ServerThread(config);
    m_localServer.start();
    oopStartIndex++;
  }
  for (int i=oopStartIndex; i < m_hostCount; i++) {
    startOne(i,clearLocalDataDirectories);
  }
  boolean allReady;
  do {
    if (logtime)     System.out.println("********** pre witness: " + (System.currentTimeMillis() - startTime) + " ms");
    allReady=true;
    for (    PipeToFile pipeToFile : m_pipes) {
      if (pipeToFile == null) {
        continue;
      }
synchronized (pipeToFile) {
        if (pipeToFile.m_witnessedReady.get() != true) {
          try {
            pipeToFile.wait();
          }
 catch (          InterruptedException ex) {
            Logger.getLogger(LocalCluster.class.getName()).log(Level.SEVERE,null,ex);
          }
          allReady=false;
          break;
        }
      }
    }
  }
 while (allReady == false);
  if (logtime)   System.out.println("********** post witness: " + (System.currentTimeMillis() - startTime) + " ms");
  if (!allReady) {
    throw new RuntimeException("Not all processes became ready");
  }
  if (m_hasLocalServer)   m_localServer.waitForInitialization();
  if (logtime)   System.out.println("********** DONE: " + (System.currentTimeMillis() - startTime) + " ms");
  m_running=true;
  if (m_failureState != FailureState.ALL_RUNNING) {
    System.out.println("Killing one cluster member.");
    int procIndex=0;
    if (m_hasLocalServer) {
      procIndex=1;
    }
    Process proc=m_cluster.get(procIndex);
    proc.destroy();
    int retval=0;
    try {
      retval=proc.waitFor();
      for (      EEProcess eeproc : m_eeProcs.get(procIndex)) {
        eeproc.waitForShutdown();
      }
    }
 catch (    InterruptedException e) {
      System.out.println("External VoltDB process is acting crazy.");
    }
 finally {
      m_cluster.set(procIndex,null);
    }
    if (retval != 0 && retval != 143) {
      System.out.println("External VoltDB process terminated abnormally with return: " + retval);
    }
  }
  if (m_failureState == FailureState.ONE_RECOVERING) {
    int hostId=m_hasLocalServer ? 1 : 0;
    recoverOne(logtime,startTime,hostId);
  }
}
