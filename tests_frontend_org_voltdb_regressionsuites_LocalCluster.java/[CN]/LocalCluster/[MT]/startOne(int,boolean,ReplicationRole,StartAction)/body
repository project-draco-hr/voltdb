{
  PipeToFile ptf=null;
  CommandLine cmdln=(templateCmdLine.makeCopy());
  cmdln.setJavaProperty(clusterHostIdProperty,String.valueOf(hostId));
  if (this.m_additionalProcessEnv != null) {
    for (    String name : this.m_additionalProcessEnv.keySet()) {
      cmdln.setJavaProperty(name,this.m_additionalProcessEnv.get(name));
    }
  }
  try {
    cmdln.internalPort(portGenerator.nextInternalPort());
    cmdln.drAgentStartPort(portGenerator.nextReplicationPort());
    portGenerator.next();
    portGenerator.next();
    if (m_target == BackendTarget.NATIVE_EE_IPC) {
      cmdln.ipcPort(portGenerator.next());
    }
    if (m_target == BackendTarget.NATIVE_EE_VALGRIND_IPC) {
      EEProcess proc=m_eeProcs.get(hostId);
      assert(proc != null);
      cmdln.m_ipcPort=proc.port();
    }
    cmdln.port(portGenerator.nextClient());
    cmdln.adminPort(portGenerator.nextAdmin());
    cmdln.httpPort(portGenerator.nextHttp());
    cmdln.replicaMode(replicaMode);
    cmdln.timestampSalt(getRandomTimestampSalt());
    if (m_debug) {
      cmdln.debugPort(portGenerator.next());
    }
    cmdln.zkport(portGenerator.nextZkPort());
    if (startAction == StartAction.JOIN) {
      cmdln.startCommand(startAction);
      int portNoToRejoin=m_cmdLines.get(0).internalPort();
      cmdln.leader(":" + portNoToRejoin);
    }
    File subroot=null;
    if (clearLocalDataDirectories) {
      subroot=VoltFile.getNewSubroot();
      m_subRoots.add(subroot);
    }
 else {
      if (m_subRoots.size() <= hostId) {
        m_subRoots.add(VoltFile.getNewSubroot());
      }
      subroot=m_subRoots.get(hostId);
    }
    cmdln.voltFilePrefix(subroot.getPath());
    cmdln.voltRoot(subroot.getPath() + "/" + m_voltdbroot);
    if ((m_versionOverrides != null) && (m_versionOverrides.length > hostId)) {
      assert(m_versionOverrides[hostId] != null);
      assert(m_versionCheckRegexOverrides[hostId] != null);
      cmdln.m_versionStringOverrideForTest=m_versionOverrides[hostId];
      cmdln.m_versionCompatibilityRegexOverrideForTest=m_versionCheckRegexOverrides[hostId];
      if ((m_buildStringOverrides != null) && (m_buildStringOverrides.length > hostId)) {
        assert(m_buildStringOverrides[hostId] != null);
        cmdln.m_buildStringOverrideForTest=m_buildStringOverrides[hostId];
      }
    }
    m_cmdLines.add(cmdln);
    m_procBuilder.command().clear();
    List<String> cmdlnList=cmdln.createCommandLine();
    String cmdLineFull="Start cmd host=" + String.valueOf(hostId) + " :";
    for (    String element : cmdlnList) {
      assert(element != null);
      cmdLineFull+=" " + element;
    }
    log.info(cmdLineFull);
    m_procBuilder.command().addAll(cmdlnList);
    String testoutputdir=cmdln.buildDir() + File.separator + "testoutput";
    System.out.println("Process output will be redirected to: " + testoutputdir);
    File dir=new File(testoutputdir);
    if (dir.exists()) {
      assert(dir.isDirectory());
    }
 else {
      boolean status=dir.mkdirs();
      assert(status);
    }
    File dirFile=new VoltFile(testoutputdir);
    if (dirFile.listFiles() != null) {
      for (      File f : dirFile.listFiles()) {
        if (f.getName().startsWith(getName() + "-" + hostId)) {
          f.delete();
        }
      }
    }
    Process proc=m_procBuilder.start();
    m_cluster.add(proc);
    String fileName=testoutputdir + File.separator + "LC-"+ getFileName()+ "-"+ hostId+ "-"+ "idx"+ String.valueOf(perLocalClusterExtProcessIndex++)+ ".txt";
    System.out.println("Process output can be found in: " + fileName);
    ptf=new PipeToFile(fileName,proc.getInputStream(),startAction == StartAction.JOIN ? PipeToFile.m_joinToken : PipeToFile.m_initToken,false,proc);
    m_pipes.add(ptf);
    ptf.setName("ClusterPipe:" + String.valueOf(hostId));
    ptf.start();
  }
 catch (  IOException ex) {
    log.error("Failed to start cluster process:" + ex.getMessage(),ex);
    assert(false);
  }
  if (startAction == StartAction.JOIN) {
    waitOnPTFReady(ptf,true,System.currentTimeMillis(),System.currentTimeMillis(),hostId);
  }
  if (hostId > (m_hostCount - 1)) {
    m_hostCount++;
    this.m_compiled=false;
  }
}
