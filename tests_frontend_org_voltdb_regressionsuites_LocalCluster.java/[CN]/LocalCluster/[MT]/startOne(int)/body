{
  try {
    m_procBuilder.command().set(m_portOffset,String.valueOf(VoltDB.DEFAULT_PORT + hostId));
    m_procBuilder.command().set(m_pathToDeploymentOffset,m_pathToDeployment);
    m_procBuilder.command().set(m_rejoinOffset,"");
    if (m_debug) {
      m_procBuilder.command().set(m_debugOffset1,"-Xdebug");
      m_procBuilder.command().set(m_debugOffset2,"-agentlib:jdwp=transport=dt_socket,address=" + m_debugPortOffset++ + ",server=y,suspend=n");
    }
    if (m_target.isIPC) {
      m_procBuilder.command().set(m_ipcPortOffset1,"ipcports");
      String portString="";
      for (      EEProcess proc : m_eeProcs.get(hostId)) {
        if (portString.isEmpty()) {
          portString+=Integer.valueOf(proc.port());
        }
 else {
          portString+="," + Integer.valueOf(proc.port());
        }
      }
      m_procBuilder.command().set(m_ipcPortOffset2,portString);
      m_procBuilder.command().set(m_ipcPortOffset3,"valgrind");
    }
    Process proc=m_procBuilder.start();
    m_cluster.add(proc);
    String testoutputdir=m_buildDir + File.separator + "testoutput";
    File dir=new File(testoutputdir);
    if (dir.exists()) {
      assert(dir.isDirectory());
    }
 else {
      boolean status=dir.mkdirs();
      assert(status);
    }
    PipeToFile ptf=new PipeToFile(testoutputdir + File.separator + getName()+ "-"+ hostId+ ".txt",proc.getInputStream(),PipeToFile.m_initToken);
    m_pipes.add(ptf);
    ptf.setName("ClusterPipe:" + String.valueOf(hostId));
    ptf.start();
  }
 catch (  IOException ex) {
    System.out.println("Failed to start cluster process:" + ex.getMessage());
    Logger.getLogger(LocalCluster.class.getName()).log(Level.SEVERE,null,ex);
    assert(false);
  }
}
