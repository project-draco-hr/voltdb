{
  if (rejoinHostId == null || m_hasLocalServer) {
    rejoinHostId=0;
  }
  int portNoToRejoin=m_cmdLines.get(rejoinHostId).internalPort();
  if (hostId == 0 && m_hasLocalServer) {
    templateCmdLine.leaderPort(portNoToRejoin);
    startLocalServer(rejoinHostId,false,StartAction.REJOIN);
    return true;
  }
  log.info("Rejoining " + hostId + " to hostID: "+ rejoinHostId);
  EEProcess eeProc=m_eeProcs.get(hostId);
  try {
    eeProc.waitForShutdown();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (templateCmdLine.target().isIPC) {
    String logfile="LocalCluster_host_" + hostId + ".log";
    m_eeProcs.set(hostId,new EEProcess(templateCmdLine.target(),m_siteCount,logfile));
  }
  PipeToFile ptf=null;
  long start=0;
  try {
    CommandLine rejoinCmdLn=m_cmdLines.get(hostId);
    rejoinCmdLn.javaProperties=templateCmdLine.javaProperties;
    rejoinCmdLn.startCommand(startAction);
    if (m_debug) {
      rejoinCmdLn.debugPort(portGenerator.next());
    }
    rejoinCmdLn.leader(rejoinHost + ":" + String.valueOf(portNoToRejoin));
    rejoinCmdLn.m_port=portGenerator.nextClient();
    rejoinCmdLn.m_adminPort=portGenerator.nextAdmin();
    rejoinCmdLn.m_httpPort=portGenerator.nextHttp();
    rejoinCmdLn.m_zkInterface="127.0.0.1:" + portGenerator.next();
    rejoinCmdLn.m_internalPort=portGenerator.nextInternalPort();
    setPortsFromConfig(hostId,rejoinCmdLn);
    if (this.m_additionalProcessEnv != null) {
      for (      String name : this.m_additionalProcessEnv.keySet()) {
        rejoinCmdLn.setJavaProperty(name,this.m_additionalProcessEnv.get(name));
      }
    }
    if ((m_versionOverrides != null) && (m_versionOverrides.length > hostId)) {
      assert(m_versionOverrides[hostId] != null);
      assert(m_versionCheckRegexOverrides[hostId] != null);
      rejoinCmdLn.m_versionStringOverrideForTest=m_versionOverrides[hostId];
      rejoinCmdLn.m_versionCompatibilityRegexOverrideForTest=m_versionCheckRegexOverrides[hostId];
      if ((m_buildStringOverrides != null) && (m_buildStringOverrides.length > hostId)) {
        assert(m_buildStringOverrides[hostId] != null);
        rejoinCmdLn.m_buildStringOverrideForTest=m_buildStringOverrides[hostId];
      }
    }
    List<String> rejoinCmdLnStr=rejoinCmdLn.createCommandLine();
    String cmdLineFull="Rejoin cmd line:";
    for (    String element : rejoinCmdLnStr) {
      cmdLineFull+=" " + element;
    }
    log.info(cmdLineFull);
    m_procBuilder.command().clear();
    m_procBuilder.command().addAll(rejoinCmdLnStr);
    Process proc=m_procBuilder.start();
    start=System.currentTimeMillis();
    String testoutputdir=rejoinCmdLn.buildDir() + File.separator + "testoutput";
    File dir=new File(testoutputdir);
    if (dir.exists()) {
      assert(dir.isDirectory());
    }
 else {
      boolean status=dir.mkdirs();
      assert(status);
    }
    ptf=new PipeToFile(testoutputdir + File.separator + "LC-"+ getFileName()+ "-"+ hostId+ "-"+ "idx"+ String.valueOf(perLocalClusterExtProcessIndex++)+ ".rejoined.txt",proc.getInputStream(),PipeToFile.m_rejoinToken,true,proc);
synchronized (this) {
      m_pipes.set(hostId,ptf);
      m_cluster.set(hostId,proc);
      m_cmdLines.set(hostId,rejoinCmdLn);
    }
    Thread t=new Thread(ptf);
    t.setName("ClusterPipe:" + String.valueOf(hostId));
    t.start();
  }
 catch (  IOException ex) {
    log.error("Failed to start recovering cluster process:" + ex.getMessage(),ex);
    assert(false);
  }
  return waitOnPTFReady(ptf,logtime,startTime,start,hostId);
}
