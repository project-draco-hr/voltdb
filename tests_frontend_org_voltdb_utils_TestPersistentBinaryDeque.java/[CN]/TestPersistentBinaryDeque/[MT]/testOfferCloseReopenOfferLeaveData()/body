{
  System.out.println("Running testOfferCloseHoleReopenOffer");
  for (int ii=0; ii < 96; ii++) {
    m_pbd.offer(DBBPool.wrapBB(getFilledBuffer(ii)));
  }
  File files[]=TEST_DIR.listFiles();
  assertEquals(3,files.length);
  m_pbd.sync();
  m_pbd.close();
  m_pbd=null;
  System.gc();
  System.runFinalization();
  m_pbd=new PersistentBinaryDeque(TEST_NONCE,TEST_DIR);
  int cnt=m_pbd.getNumObjects();
  assertEquals(cnt,96);
  for (int ii=96; ii < 192; ii++) {
    m_pbd.offer(DBBPool.wrapBB(getFilledBuffer(ii)));
  }
  m_pbd.sync();
  cnt=m_pbd.getNumObjects();
  assertEquals(cnt,192);
  for (int ii=0; ii < 96; ii++) {
    ByteBuffer defaultBuffer=getFilledBuffer(ii);
    BBContainer retval=m_pbd.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    assertTrue(defaultBuffer.equals(retval.b()));
    retval.discard();
    defaultBuffer.clear();
  }
  m_pbd.sync();
  m_pbd.close();
  m_pbd=null;
  System.gc();
  System.runFinalization();
  TreeSet<String> names=getSortedDirectoryListing();
  assertEquals(3,names.size());
  assertTrue(names.first().equals("pbd_nonce.3.pbd"));
  m_pbd=new PersistentBinaryDeque(TEST_NONCE,TEST_DIR);
  cnt=m_pbd.getNumObjects();
  assertEquals(cnt,96);
  names=getSortedDirectoryListing();
  assertEquals(4,names.size());
  assertTrue(names.first().equals("pbd_nonce.3.pbd"));
  for (int ii=96; ii < 192; ii++) {
    m_pbd.offer(DBBPool.wrapBB(getFilledBuffer(ii)));
  }
  m_pbd.sync();
  cnt=m_pbd.getNumObjects();
  assertEquals(cnt,192);
  for (int ii=96; ii < 192; ii++) {
    ByteBuffer defaultBuffer=getFilledBuffer(ii);
    BBContainer retval=m_pbd.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    assertTrue(defaultBuffer.equals(retval.b()));
    retval.discard();
    defaultBuffer.clear();
  }
  names=getSortedDirectoryListing();
  assertEquals(3,names.size());
  assertTrue(names.first().equals("pbd_nonce.6.pbd"));
  for (int ii=96; ii < 191; ii++) {
    ByteBuffer defaultBuffer=getFilledBuffer(ii);
    BBContainer retval=m_pbd.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    assertTrue(defaultBuffer.equals(retval.b()));
    retval.discard();
    defaultBuffer.clear();
  }
  names=getSortedDirectoryListing();
  assertEquals(1,names.size());
  assertTrue(names.first().equals("pbd_nonce.8.pbd"));
  BBContainer objs[]=new BBContainer[]{DBBPool.wrapBB(ByteBuffer.allocateDirect(1024 * 1024 * 32)),DBBPool.wrapBB(ByteBuffer.allocateDirect(1024 * 1024 * 32)),DBBPool.wrapBB(ByteBuffer.allocateDirect(1024 * 1024 * 32))};
  m_pbd.push(objs);
  names=getSortedDirectoryListing();
  assertEquals(4,names.size());
  assertTrue(names.first().equals("pbd_nonce.5.pbd"));
  BBContainer retval=m_pbd.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
  retval.discard();
  names=getSortedDirectoryListing();
  assertEquals(3,names.size());
  assertTrue(names.first().equals("pbd_nonce.6.pbd"));
}
