{
  assertTrue(m_pbd.isEmpty());
  for (int ii=0; ii < 64; ii++) {
    defaultBuffer.clear();
    m_pbd.offer(defaultContainer);
    assertFalse(m_pbd.isEmpty());
  }
  assertEquals(((1024 * 1024 * 2) + 4) * 64,m_pbd.sizeInBytes());
  File files[]=TEST_DIR.listFiles();
  assertEquals(3,files.length);
  final ByteBuffer buffer1=getFilledBuffer(16);
  final ByteBuffer buffer2=getFilledBuffer(32);
  BBContainer pushContainers[][]=new BBContainer[2][];
  pushContainers[0]=new BBContainer[]{DBBPool.wrapBB(buffer1)};
  pushContainers[1]=new BBContainer[]{DBBPool.wrapBB(buffer2)};
  m_pbd.push(pushContainers);
  TreeSet<String> names=getSortedDirectoryListing();
  assertEquals(4,names.size());
  assertTrue(names.first().equals("pbd_nonce.-1.pbd"));
  assertTrue(names.contains("pbd_nonce.0.pbd"));
  assertTrue(names.contains("pbd_nonce.1.pbd"));
  assertTrue(names.last().equals("pbd_nonce.2.pbd"));
  BBContainer retval1=m_pbd.poll();
  buffer1.clear();
  assert(retval1.b.equals(buffer1));
  BBContainer retval2=m_pbd.poll();
  buffer2.clear();
  assertTrue(retval2.b.equals(buffer2));
  names=getSortedDirectoryListing();
  assertEquals(4,names.size());
  assertEquals(((1024 * 1024 * 2) + 4) * 66,m_pbd.sizeInBytes());
  retval1.discard();
  assertEquals(((1024 * 1024 * 2) + 4) * 66,m_pbd.sizeInBytes());
  retval2.discard();
  assertEquals(((1024 * 1024 * 2) + 4) * 64,m_pbd.sizeInBytes());
  names=getSortedDirectoryListing();
  assertEquals(3,names.size());
  assertTrue(names.first().equals("pbd_nonce.0.pbd"));
  for (int ii=0; ii < 64; ii++) {
    defaultBuffer.clear();
    BBContainer retval=m_pbd.poll();
    assertTrue(defaultBuffer.equals(retval.b));
    retval.discard();
  }
  assertEquals(0,m_pbd.sizeInBytes());
  assertTrue(m_pbd.isEmpty());
  names=getSortedDirectoryListing();
  assertEquals(1,names.size());
  assertTrue(names.first().equals("pbd_nonce.3.pbd"));
}
