{
  System.out.println("Running testOfferThenPushThenPoll");
  BinaryDequeReader reader=m_pbd.openForRead(CURSOR_ID);
  assertTrue(reader.isEmpty());
  for (int ii=0; ii < 96; ii++) {
    m_pbd.offer(defaultContainer());
    assertFalse(reader.isEmpty());
  }
  File files[]=TEST_DIR.listFiles();
  assertEquals(3,files.length);
  final ByteBuffer buffer1=getFilledBuffer(16);
  final ByteBuffer buffer2=getFilledBuffer(32);
  BBContainer pushContainers[]=new BBContainer[2];
  pushContainers[0]=DBBPool.dummyWrapBB(buffer1);
  pushContainers[1]=DBBPool.dummyWrapBB(buffer2);
  m_pbd.push(pushContainers);
  TreeSet<String> names=getSortedDirectoryListing();
  assertEquals(4,names.size());
  assertTrue(names.first().equals("pbd_nonce.-1.pbd"));
  assertTrue(names.contains("pbd_nonce.0.pbd"));
  assertTrue(names.contains("pbd_nonce.1.pbd"));
  assertTrue(names.last().equals("pbd_nonce.2.pbd"));
  BBContainer retval1=reader.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
  try {
    buffer1.clear();
    System.err.println(Long.toHexString(buffer1.getLong(0)) + " " + Long.toHexString(retval1.b().getLong(0)));
    assertEquals(retval1.b(),buffer1);
    BBContainer retval2=reader.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    try {
      buffer2.clear();
      assertEquals(retval2.b(),buffer2);
      names=getSortedDirectoryListing();
      assertEquals(4,names.size());
    }
  finally {
      retval2.discard();
    }
  }
  finally {
    retval1.discard();
  }
  names=getSortedDirectoryListing();
  assertEquals(3,names.size());
  assertTrue(names.first().equals("pbd_nonce.0.pbd"));
  ByteBuffer defaultBuffer=defaultBuffer();
  for (int ii=0; ii < 96; ii++) {
    defaultBuffer.clear();
    BBContainer retval=reader.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY);
    assertTrue(defaultBuffer.equals(retval.b()));
    retval.discard();
  }
  assertTrue(reader.isEmpty());
  names=getSortedDirectoryListing();
  assertEquals(1,names.size());
  assertTrue(names.first().equals("pbd_nonce.2.pbd"));
}
