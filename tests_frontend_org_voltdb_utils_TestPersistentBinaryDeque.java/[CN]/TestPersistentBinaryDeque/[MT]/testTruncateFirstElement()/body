{
  System.out.println("Running testTruncateFirstElement");
  TreeSet<String> listing=getSortedDirectoryListing();
  assertEquals(listing.size(),1);
  for (int ii=0; ii < 150; ii++) {
    m_pbd.offer(DBBPool.wrapBB(getFilledBuffer(ii)));
  }
  listing=getSortedDirectoryListing();
  assertEquals(listing.size(),4);
  m_pbd.close();
  listing=getSortedDirectoryListing();
  assertEquals(listing.size(),4);
  m_pbd=new PersistentBinaryDeque(TEST_NONCE,TEST_DIR,logger);
  listing=getSortedDirectoryListing();
  assertEquals(listing.size(),5);
  m_pbd.parseAndTruncate(new BinaryDequeTruncator(){
    @Override public TruncatorResponse parse(    BBContainer bbc){
      return PersistentBinaryDeque.fullTruncateResponse();
    }
  }
);
  listing=getSortedDirectoryListing();
  assertEquals(listing.size(),1);
  BinaryDequeReader reader=m_pbd.openForRead(CURSOR_ID);
  assertNull(reader.poll(PersistentBinaryDeque.UNSAFE_CONTAINER_FACTORY));
}
