{
  final long TREE_MAP_ENTRY_OVERHEAD=32;
  final long TUPLE_PTR_SIZE=8;
  CatalogMap<ColumnRef> columnRefsMap=index.getColumns();
  List<Column> indexColumns=new ArrayList<Column>(columnRefsMap.size());
  for (  ColumnRef columnRef : columnRefsMap) {
    indexColumns.add(columnRef.getColumn());
  }
  CatalogItemSizeBase isize=getColumnsSize(indexColumns,true,false);
  if (index.getType() == IndexType.HASH_TABLE.getValue()) {
    isize.widthMin+=48;
    isize.widthMax+=48;
  }
 else   if (index.getType() == IndexType.COVERING_CELL_INDEX.getValue()) {
    final long MIN_CELLS=1;
    final long MAX_CELLS=8;
    final long CELL_SIZE=8;
    final long TUPLE_MAP_ENTRY=TREE_MAP_ENTRY_OVERHEAD + TUPLE_PTR_SIZE + MAX_CELLS * CELL_SIZE;
    final long CELL_MAP_ENTRY=TREE_MAP_ENTRY_OVERHEAD + CELL_SIZE + TUPLE_PTR_SIZE;
    isize.widthMin+=TUPLE_MAP_ENTRY + MIN_CELLS * CELL_MAP_ENTRY;
    isize.widthMax+=TUPLE_MAP_ENTRY + MAX_CELLS * CELL_MAP_ENTRY;
  }
 else {
    isize.widthMin+=TREE_MAP_ENTRY_OVERHEAD + TUPLE_PTR_SIZE;
    isize.widthMax+=TREE_MAP_ENTRY_OVERHEAD + TUPLE_PTR_SIZE;
  }
  return isize;
}
