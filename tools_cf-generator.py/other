from string import Template
import sys
TEMPLATE = '\n{\n    "AWSTemplateFormatVersion": "2010-09-09",\n\n    "Description" : "AWS CloudFormation template for launching a $hosts-node k-safety=$ksafety VoltDB cluster. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",\n\n    "Parameters": {\n        $zone\n\n        "InstanceType": {\n            "Description": "VoltDB server EC2 instance type",\n            "Type": "String",\n            "Default": "m2.xlarge",\n            "AllowedValues": [ "m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge"],\n            "ConstraintDescription": "must be a valid EC2 instance type."\n        },\n\n        "Example": {\n            "Description": "VoltDB example to start. (voter, json-sessions, voltcache, voltkv, windowing)",\n            "Type": "String",\n            "Default": "voter",\n            "AllowedValues": ["voter", "json-sessions", "voltcache", "voltkv", "windowing"],\n            "ConstraintDescription": "must be a valid VoltDB example name."\n        }\n    },\n\n    "Mappings": {\n        "AWSInstanceType2Arch": {\n            "m1.medium"  : { "Arch": "64" },\n            "m1.large"   : { "Arch": "64" },\n            "m1.xlarge"  : { "Arch": "64" },\n            "m2.xlarge"  : { "Arch": "64" },\n            "m2.2xlarge" : { "Arch": "64" },\n            "m2.4xlarge" : { "Arch": "64" },\n            "m3.xlarge"  : { "Arch": "64" },\n            "m3.2xlarge" : { "Arch": "64" },\n            "c1.medium"  : { "Arch": "64" },\n            "c1.xlarge"  : { "Arch": "64" },\n            "cc1.4xlarge": { "Arch": "64" }\n        },\n\n        "AWSRegionArch2AMI": {\n            "us-east-1"     : { "64": "$amiid", "64HVM": "NOT YET SUPPORTED" }\n        }\n    },\n\n    "Resources": {\n\n        "DBServer1": {\n            "Type": "AWS::EC2::Instance",\n            "Metadata": {\n                "Comment": "Configure the bootstrap helpers to install and start VoltDB",\n\n                "AWS::CloudFormation::Init": {\n                    "config": {\n                        "packages": {\n                        },\n\n                        "sources": {\n                        },\n\n                        "files": {\n                            "/etc/ntp.conf": {\n                                "content": { "Fn::Join": ["", [\n                                                              "driftfile /var/lib/ntp/ntp.drift\\n",\n                                                              "server time1.google.com burst iburst minpoll 4 maxpoll 4\\n",\n                                                              "server time2.google.com burst iburst minpoll 4 maxpoll 4\\n",\n                                                              "server time3.google.com burst iburst minpoll 4 maxpoll 4\\n",\n                                                              "server time4.google.com burst iburst minpoll 4 maxpoll 4\\n",\n                                                              "server 127.127.0.1\\n",\n                                                              "fudge 127.127.0.1 stratum 10\\n"\n                                                          ]]},\n                                "mode": "000644",\n                                "owner": "root",\n                                "group": "root"\n                            },\n\n                            "/tmp/deployment.xml": {\n                                "content": { "Fn::Join": ["", [\n                                                              $deployment\n                                                          ]]},\n                                "mode" : "000644"\n                            }\n                        },\n\n                        "services": {\n                            "sysvinit": {\n                                "ntp": {\n                                    "enabled"      : "true",\n                                    "ensureRunning": "true",\n                                    "files": ["/etc/ntp.conf"]\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            "Properties": {\n                "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" },\n                                                { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ] } ] },\n                ${zone_ref}\n                "InstanceType"  : { "Ref": "InstanceType" },\n                "SecurityGroups": [ {"Ref": "DBServerSecurityGroup"} ],\n                "UserData"      : { "Fn::Base64": { "Fn::Join": ["", [\n                                                                     "#!/bin/bash -v\\n",\n                                                                     "# Helper function\\n",\n                                                                     "function error_exit\\n",\n                                                                     "{\\n",\n                                                                     "  cfn-signal -e 1 -r \\"$$1\\" \'", { "Ref": "WaitHandle" }, "\'\\n",\n                                                                     "  exit 1\\n",\n                                                                     "}\\n",\n\n                                                                     "# Initialize\\n",\n                                                                     "cfn-init -s ", { "Ref": "AWS::StackId" }, " -r DBServer1 ",\n                                                                     "    --region ", { "Ref": "AWS::Region" }, " || error_exit \'Failed to run cfn-init\'\\n",\n\n                                                                     "# Start VoltDB as user voltdb\\n",\n                                                                     "sudo su - voltdb -c bash << EOF\\n",\n                                                                     "cd ", { "Ref": "Example" }, "; ./run.sh catalog\\n",\n                                                                     "echo \\"Starting VoltDB server\\"\\n",\n                                                                     "../../bin/voltdb create -B -H `hostname -I | awk \'{ print $$1 }\'` -l ../../voltdb/license.xml -d /tmp/deployment.xml ", { "Ref": "Example" }, ".jar\\n",\n                                                                     "\\n",\n                                                                     "status=255\\n",\n                                                                     "while [ \\\\$$status != 0 ]; do\\n",\n                                                                     "    sleep 1\\n",\n                                                                     "    ../../bin/sqlcmd --query=\\"exec @Statistics memory 0;\\" > /dev/null 2>&1\\n",\n                                                                     "    status=\\\\$$?\\n",\n                                                                     "done\\n",\n                                                                     "EOF\\n",\n                                                                     "\\n",\n                                                                     "# All is well so signal success\\n",\n                                                                     "cfn-signal -e 0 -r \\"VoltDB setup complete\\" \'", { "Ref": "WaitHandle" }, "\'\\n"\n                                                                 ]]}}\n            }\n        },\n\n        $additional_servers\n\n        "WaitHandle": {\n            "Type": "AWS::CloudFormation::WaitConditionHandle"\n        },\n\n        "WaitCondition": {\n            "Type": "AWS::CloudFormation::WaitCondition",\n            "DependsOn": "DBServer1",\n            "Properties": {\n                "Handle": {"Ref": "WaitHandle"},\n                "Timeout": "1200"\n            }\n        },\n\n        "DBServerSecurityGroup": {\n            "Type": "AWS::EC2::SecurityGroup",\n            "Properties": {\n                "GroupDescription": "Enable client access via port 21212 and HTTP access via port 8080",\n                "SecurityGroupIngress": [\n                    {"IpProtocol": "tcp", "FromPort": "3021", "ToPort": "3021", "CidrIp": "0.0.0.0/0"},\n                    {"IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "CidrIp": "0.0.0.0/0"},\n                    {"IpProtocol": "tcp", "FromPort": "9090", "ToPort": "9090", "CidrIp": "0.0.0.0/0"},\n                    {"IpProtocol": "tcp", "FromPort": "21211", "ToPort": "21211", "CidrIp": "0.0.0.0/0"},\n                    {"IpProtocol": "tcp", "FromPort": "21212", "ToPort": "21212", "CidrIp": "0.0.0.0/0"},\n                    {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0"},\n                    {"IpProtocol": "udp", "FromPort": "123", "ToPort": "123", "CidrIp": "0.0.0.0/0"}\n                ]\n            }\n        }\n    },\n\n    "Outputs": {\n        "VoltDBNodeURL": {\n            "Value": { "Fn::Join": ["", ["http://", { "Fn::GetAtt": [ "DBServer1", "PublicDnsName" ]}, ":8080"]] },\n            "Description": "URL to VoltDB Catalog Report page."\n        },\n        "VoltDBClientCmd": {\n            "Value": { "Fn::Join": ["", ["ssh voltdb@", { "Fn::GetAtt": [ "DBServer1", "PublicDnsName" ]},\n                                         " \\"bash --login -c \'cd ", { "Ref": "Example" }, "; ./run.sh client\'\\""]] },\n            "Description": "Command to start the client over an SSH connection. The password is \'voltdb\'."\n        }\n    }\n}\n'
ZONE_TEMPLATE = '"AvailabilityZone": {\n            "Description": "Availability zone to start the servers in",\n            "Type": "String",\n            "Default": "us-east-1e",\n            "AllowedValues": ["us-east-1a", "us-east-1b", "us-east-1c", "us-east-1d", "us-east-1e"],\n            "ConstraintDescription": "must be a valid availability zone in the U.S. East region."\n        },\n'
ZONE_REF_TEMPLATE = '"AvailabilityZone" : { "Ref": "AvailabilityZone" },'
DEPLOYMENT_TEMPLATE = '\n                                                              "<?xml version=\\"1.0\\"?>\\n",\n                                                              "<deployment>\\n",\n                                                              "    <cluster hostcount=\\"$hosts\\" kfactor=\\"$ksafety\\" />\\n",\n                                                              "    <httpd enabled=\\"true\\">\\n",\n                                                              "        <jsonapi enabled=\\"true\\" />\\n",\n                                                              "    </httpd>\\n",\n                                                              "</deployment>\\n"\n'
SERVER_TEMPLATE = '\n        "DBServer$seqId": {\n            "Type": "AWS::EC2::Instance",\n            "Metadata": {\n                "Comment": "Configure the bootstrap helpers to install and start VoltDB",\n\n                "AWS::CloudFormation::Init": {\n                    "config": {\n                        "packages": {\n                        },\n\n                        "sources": {\n                        },\n\n                        "files": {\n                            "/etc/ntp.conf": {\n                                "content": { "Fn::Join": ["", [\n                                                              "driftfile /var/lib/ntp/ntp.drift\\n",\n                                                              "server ", { "Fn::GetAtt": [ "DBServer1", "PrivateIp" ]}, " burst iburst minpoll 4 maxpoll 4\\n",\n                                                              "server 127.127.0.1\\n",\n                                                              "fudge 127.127.0.1 stratum 10\\n"\n                                                          ]]},\n                                "mode": "000644",\n                                "owner": "root",\n                                "group": "root"\n                            },\n\n                            "/tmp/deployment.xml": {\n                                "content": { "Fn::Join": ["", [\n                                                              $deployment\n                                                          ]]},\n                                "mode" : "000644"\n                            }\n                        },\n\n                        "services": {\n                            "sysvinit": {\n                                "ntp": {\n                                    "enabled"      : "true",\n                                    "ensureRunning": "true",\n                                    "files": ["/etc/ntp.conf"]\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            "Properties": {\n                "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" },\n                                                { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ] } ] },\n                "AvailabilityZone" : { "Ref": "AvailabilityZone" },\n                "InstanceType"  : { "Ref": "InstanceType" },\n                "SecurityGroups": [ {"Ref": "DBServerSecurityGroup"} ],\n                "UserData"      : { "Fn::Base64": { "Fn::Join": ["", [\n                                                                     "#!/bin/bash -v\\n",\n                                                                     "# Helper function\\n",\n                                                                     "function error_exit\\n",\n                                                                     "{\\n",\n                                                                     "  cfn-signal -e 1 -r \\"$$1\\" \'", { "Ref": "WaitHandle" }, "\'\\n",\n                                                                     "  exit 1\\n",\n                                                                     "}\\n",\n\n                                                                     "# Sync clocks so that they are close enough to start a cluster\\n",\n                                                                     "service ntp stop\\n",\n                                                                     "a=\\"1.0\\"\\n",\n                                                                     "while [ $$(echo \\"$${a#-}>0.05\\" | bc) -eq 1 ];\\n",\n                                                                     "do a=`ntpdate -p 8 ", { "Fn::GetAtt": [ "DBServer1", "PrivateIp" ]}, " | awk \'{ print $$10 }\'`; done\\n",\n                                                                     "\\n",\n\n                                                                     "# Initialize\\n",\n                                                                     "cfn-init -s ", { "Ref": "AWS::StackId" }, " -r DBServer$seqId ",\n                                                                     "    --region ", { "Ref": "AWS::Region" }, " || error_exit \'Failed to run cfn-init\'\\n",\n\n                                                                     "# Start VoltDB as user voltdb\\n",\n                                                                     "sudo su - voltdb -c bash << EOF\\n",\n                                                                     "cd ", { "Ref": "Example" }, "; ./run.sh catalog\\n",\n                                                                     "echo \\"Starting VoltDB server\\"\\n",\n                                                                     "../../bin/voltdb create -B -H ", { "Fn::GetAtt": [ "DBServer1", "PrivateIp" ]}, " -l ../../voltdb/license.xml -d /tmp/deployment.xml ", { "Ref": "Example" }, ".jar\\n",\n                                                                     "EOF\\n"\n                                                                 ]]}}\n            }\n        },\n'
if (__name__ == '__main__'):
    sys.exit(main())
