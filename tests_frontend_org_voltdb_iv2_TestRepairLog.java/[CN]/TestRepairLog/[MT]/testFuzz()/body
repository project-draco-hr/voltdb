{
  TxnEgo sphandle=TxnEgo.makeZero(0);
  UniqueIdGenerator spbuig=new UniqueIdGenerator(0,0);
  UniqueIdGenerator mpbuig=new UniqueIdGenerator(0,0);
  sphandle=sphandle.makeNext();
  RandomMsgGenerator msgGen=new RandomMsgGenerator();
  RepairLog dut=new RepairLog();
  long spBinaryLogSpUniqueId=Long.MIN_VALUE;
  long spBinaryLogMpUniqueId=Long.MIN_VALUE;
  long mpBinaryLogMpUniqueId=Long.MIN_VALUE;
  for (int i=0; i < 4000; i++) {
    TransactionInfoBaseMessage msg=msgGen.generateRandomMessageInStream();
    msg.setSpHandle(sphandle.getTxnId());
    if (msg instanceof Iv2InitiateTaskMessage) {
      Pair<Long,Long> uids=setBinaryLogUniqueId(msg,spbuig,mpbuig);
      spBinaryLogSpUniqueId=Math.max(spBinaryLogSpUniqueId,uids.getFirst());
      spBinaryLogMpUniqueId=Math.max(spBinaryLogMpUniqueId,uids.getSecond());
    }
 else     if (msg instanceof FragmentTaskMessage) {
      mpBinaryLogMpUniqueId=Math.max(mpBinaryLogMpUniqueId,setBinaryLogUniqueId(msg,null,mpbuig).getSecond());
    }
    sphandle=sphandle.makeNext();
    if (!msg.isReadOnly() || msg instanceof CompleteTransactionMessage) {
      dut.deliver(msg);
    }
  }
  List<Iv2RepairLogResponseMessage> stuff=dut.contents(1l,false);
  validateRepairLog(stuff,spBinaryLogSpUniqueId,spBinaryLogMpUniqueId);
  stuff=dut.contents(1l,true);
  validateRepairLog(stuff,Long.MIN_VALUE,mpBinaryLogMpUniqueId);
}
