{
  System.out.println("STARTING OCTET_LENGTH");
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  cr=client.callProcedure("P1.insert",1,"??????Vo",10,1.1);
  cr=client.callProcedure("P1.insert",2,"Xin",10,1.1);
  cr=client.callProcedure("P1.insert",3,null,10,1.1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("OCTET_LENGTH",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(8,result.getLong(1));
  cr=client.callProcedure("OCTET_LENGTH",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(3,result.getLong(1));
  cr=client.callProcedure("OCTET_LENGTH",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(VoltType.NULL_BIGINT,result.getLong(1));
  cr=client.callProcedure("BINARYTEST.insert",1,new byte[]{'x','i','n'});
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("@AdHoc","select bdata, OCTET_LENGTH(bdata) from BINARYTEST where ID=1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(3,result.getLong(1));
}
