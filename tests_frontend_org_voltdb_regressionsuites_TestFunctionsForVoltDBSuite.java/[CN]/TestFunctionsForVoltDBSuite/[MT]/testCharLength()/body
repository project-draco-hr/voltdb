{
  System.out.println("STARTING Char length");
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  cr=client.callProcedure("P1.insert",1,"??????Vo",10,1.1);
  cr=client.callProcedure("P1.insert",2,"Xin@Volt",10,1.1);
  cr=client.callProcedure("P1.insert",3,"???????????????",10,1.1);
  cr=client.callProcedure("P1.insert",4,null,10,1.1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("CHAR_LENGTH",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(4,result.getLong(1));
  cr=client.callProcedure("CHAR_LENGTH",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(8,result.getLong(1));
  cr=client.callProcedure("CHAR_LENGTH",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(5,result.getLong(1));
  cr=client.callProcedure("CHAR_LGTH_PARAM","???????????????",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(5,result.getLong(1));
  cr=client.callProcedure("CHAR_LENGTH",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(VoltType.NULL_BIGINT,result.getLong(1));
  try {
    cr=client.callProcedure("@AdHoc","select bdata, CHAR_LENGTH(bdata) from BINARYTEST where ID = 1");
    fail("char_length on columns which are not string expression is not supported");
  }
 catch (  ProcCallException pce) {
    assertTrue(pce.getMessage().contains("incompatible data type in operation"));
  }
}
