{
  System.out.println("STARTING testRound");
  Client client=getClient();
  ClientResponse cr=null;
  VoltTable result;
  BigDecimal str;
  cr=client.callProcedure("@AdHoc","Delete from D1;");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","Delete from R3;");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  String[] decimal_strs={"123456.64565","-123456.64565","1123456785.555","-1123456785.555","0.0","-0.0","0","-0","99999999999999999999999999.999999999999","-99999999999999999999999999.99999999999","1500","2500","8223372036854775807.123456789125","8223372036854775807.123456789175"};
  for (int i=0; i < decimal_strs.length; i++) {
    BigDecimal bd=new BigDecimal(decimal_strs[i]);
    cr=client.callProcedure("D1.insert",i,bd);
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  }
  cr=client.callProcedure("R3.insert",1,1,1,1,1,1.1,"2013-07-18 02:00:00.123457","IBM",1);
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","select ROUND(DEC, 1), ROUND(DEC, 2)," + "ROUND(DEC, 3), ROUND(DEC, 4)," + "ROUND(DEC, 0), ROUND(DEC, -1),"+ "ROUND(DEC, -2), ROUND(DEC, -3) from D1 where id = 0");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getDecimalAsBigDecimal(0);
  assertEquals(str.toString(),"123456.600000000000");
  str=result.getDecimalAsBigDecimal(1);
  assertEquals(str.toString(),"123456.650000000000");
  str=result.getDecimalAsBigDecimal(2);
  assertEquals(str.toString(),"123456.646000000000");
  str=result.getDecimalAsBigDecimal(3);
  assertEquals(str.toString(),"123456.645600000000");
  str=result.getDecimalAsBigDecimal(4);
  assertEquals(str.toString(),"123457.000000000000");
  str=result.getDecimalAsBigDecimal(5);
  assertEquals(str.toString(),"123460.000000000000");
  str=result.getDecimalAsBigDecimal(6);
  assertEquals(str.toString(),"123500.000000000000");
  str=result.getDecimalAsBigDecimal(7);
  assertEquals(str.toString(),"123000.000000000000");
  cr=client.callProcedure("@AdHoc","select ROUND(DEC, 1), ROUND(DEC, 2)," + "ROUND(DEC, 3), ROUND(DEC, 4)," + "ROUND(DEC, 0), ROUND(DEC, -1),"+ "ROUND(DEC, -2), ROUND(DEC, -3) from D1 where id = 1");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getDecimalAsBigDecimal(0);
  assertEquals(str.toString(),"-123456.600000000000");
  str=result.getDecimalAsBigDecimal(1);
  assertEquals(str.toString(),"-123456.650000000000");
  str=result.getDecimalAsBigDecimal(2);
  assertEquals(str.toString(),"-123456.646000000000");
  str=result.getDecimalAsBigDecimal(3);
  assertEquals(str.toString(),"-123456.645600000000");
  str=result.getDecimalAsBigDecimal(4);
  assertEquals(str.toString(),"-123457.000000000000");
  str=result.getDecimalAsBigDecimal(5);
  assertEquals(str.toString(),"-123460.000000000000");
  str=result.getDecimalAsBigDecimal(6);
  assertEquals(str.toString(),"-123500.000000000000");
  str=result.getDecimalAsBigDecimal(7);
  assertEquals(str.toString(),"-123000.000000000000");
  cr=client.callProcedure("@AdHoc","select ROUND(DEC, 1), ROUND(DEC, 2)," + "ROUND(DEC, 3), ROUND(DEC, 4)," + "ROUND(DEC, 0), ROUND(DEC, -1),"+ "ROUND(DEC, -2), ROUND(DEC, -3) from D1 where id = 2");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getDecimalAsBigDecimal(0);
  assertEquals(str.toString(),"1123456785.600000000000");
  str=result.getDecimalAsBigDecimal(1);
  assertEquals(str.toString(),"1123456785.560000000000");
  str=result.getDecimalAsBigDecimal(2);
  assertEquals(str.toString(),"1123456785.555000000000");
  str=result.getDecimalAsBigDecimal(3);
  assertEquals(str.toString(),"1123456785.555000000000");
  str=result.getDecimalAsBigDecimal(4);
  assertEquals(str.toString(),"1123456786.000000000000");
  str=result.getDecimalAsBigDecimal(5);
  assertEquals(str.toString(),"1123456790.000000000000");
  str=result.getDecimalAsBigDecimal(6);
  assertEquals(str.toString(),"1123456800.000000000000");
  str=result.getDecimalAsBigDecimal(7);
  assertEquals(str.toString(),"1123457000.000000000000");
  cr=client.callProcedure("@AdHoc","select ROUND(DEC, 1), ROUND(DEC, 2)," + "ROUND(DEC, 3), ROUND(DEC, 4)," + "ROUND(DEC, 0), ROUND(DEC, -1),"+ "ROUND(DEC, -2), ROUND(DEC, -3) from D1 where id = 3");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getDecimalAsBigDecimal(0);
  assertEquals(str.toString(),"-1123456785.600000000000");
  str=result.getDecimalAsBigDecimal(1);
  assertEquals(str.toString(),"-1123456785.560000000000");
  str=result.getDecimalAsBigDecimal(2);
  assertEquals(str.toString(),"-1123456785.555000000000");
  str=result.getDecimalAsBigDecimal(3);
  assertEquals(str.toString(),"-1123456785.555000000000");
  str=result.getDecimalAsBigDecimal(4);
  assertEquals(str.toString(),"-1123456786.000000000000");
  str=result.getDecimalAsBigDecimal(5);
  assertEquals(str.toString(),"-1123456790.000000000000");
  str=result.getDecimalAsBigDecimal(6);
  assertEquals(str.toString(),"-1123456800.000000000000");
  str=result.getDecimalAsBigDecimal(7);
  assertEquals(str.toString(),"-1123457000.000000000000");
  cr=client.callProcedure("@AdHoc","select ROUND(DEC, -3) from D1 where id = 10");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getDecimalAsBigDecimal(0);
  assertEquals(str.toString(),"2000.000000000000");
  cr=client.callProcedure("@AdHoc","select ROUND(DEC, -3) from D1 where id = 11");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getDecimalAsBigDecimal(0);
  assertEquals(str.toString(),"2000.000000000000");
  for (int i=4; i < 8; i++) {
    cr=client.callProcedure("@AdHoc","select ROUND(DEC, 2) from D1 where id = " + i);
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    str=result.getDecimalAsBigDecimal(0);
    assertEquals(str.intValue(),0);
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(dec, 2) from D1 where id = 8");
    fail("range validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("out of range"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(dec, 2) from D1 where id = 9");
    fail("range validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("out of range"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(id, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(tiny, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(small, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(num, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(big, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(tm, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("incompatible data type in operation"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(var, 2) from R3 where id = 1");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("incompatible data type in operation"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(DEC, -19) from D1 where id = 12");
    fail("type validity check failed for ROUND");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("out of range"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(DEC, 15) from D1 where id = 0");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("the second parameter"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select ROUND(DEC, -26) from D1 where id = 0");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("the second parameter"));
  }
}
