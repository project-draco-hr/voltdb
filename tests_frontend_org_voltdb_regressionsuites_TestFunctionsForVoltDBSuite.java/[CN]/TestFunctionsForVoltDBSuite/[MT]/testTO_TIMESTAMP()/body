{
  System.out.println("STARTING TO_TIMESTAMP");
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  cr=client.callProcedure("P2.insert",0,new Timestamp(0L));
  cr=client.callProcedure("P2.insert",1,new Timestamp(1L));
  cr=client.callProcedure("P2.insert",2,new Timestamp(1000L));
  cr=client.callProcedure("P2.insert",3,new Timestamp(-1000L));
  cr=client.callProcedure("@AdHoc","select to_timestamp(second, 1372640523) from P2 limit 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1372640523 * 1000000L,result.getTimestampAsLong(0));
  Exception ex=null;
  try {
    cr=client.callProcedure("@AdHoc","select to_timestamp(second, '1372640523') from P2 limit 1");
  }
 catch (  Exception e) {
    ex=e;
  }
 finally {
    assertTrue(ex.getMessage().contains("PlanningErrorException"));
    assertTrue(ex.getMessage().contains("incompatible data type"));
  }
  String[] procedures={"FROM_UNIXTIME","TO_TIMESTAMP_SECOND","TO_TIMESTAMP_MILLIS","TO_TIMESTAMP_MILLISECOND","TO_TIMESTAMP_MICROS","TO_TIMESTAMP_MICROSECOND"};
  for (int i=0; i < procedures.length; i++) {
    String proc=procedures[i];
    cr=client.callProcedure(proc,0L,0);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    if (proc == "TO_TIMESTAMP_SECOND" || proc == "FROM_UNIXTIME") {
      assertEquals(0L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MILLIS" || proc == "TO_TIMESTAMP_MILLISECOND") {
      assertEquals(0L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MICROS" || proc == "TO_TIMESTAMP_MICROSECOND") {
      assertEquals(0L,result.getTimestampAsLong(0));
    }
 else {
      fail();
    }
    cr=client.callProcedure(proc,1L,1);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    if (proc == "TO_TIMESTAMP_SECOND" || proc == "FROM_UNIXTIME") {
      assertEquals(1000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MILLIS" || proc == "TO_TIMESTAMP_MILLISECOND") {
      assertEquals(1000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MICROS" || proc == "TO_TIMESTAMP_MICROSECOND") {
      assertEquals(1L,result.getTimestampAsLong(0));
    }
 else {
      fail();
    }
    cr=client.callProcedure(proc,1000L,1);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    if (proc == "TO_TIMESTAMP_SECOND" || proc == "FROM_UNIXTIME") {
      assertEquals(1000000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MILLIS" || proc == "TO_TIMESTAMP_MILLISECOND") {
      assertEquals(1000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MICROS" || proc == "TO_TIMESTAMP_MICROSECOND") {
      assertEquals(1000L,result.getTimestampAsLong(0));
    }
 else {
      fail();
    }
    cr=client.callProcedure(proc,-1000,1);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    if (proc == "TO_TIMESTAMP_SECOND" || proc == "FROM_UNIXTIME") {
      assertEquals(-1000000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MILLIS" || proc == "TO_TIMESTAMP_MILLISECOND") {
      assertEquals(-1000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MICROS" || proc == "TO_TIMESTAMP_MICROSECOND") {
      assertEquals(-1000L,result.getTimestampAsLong(0));
    }
 else {
      fail();
    }
    cr=client.callProcedure(proc,1371808830000L,1);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    if (proc == "TO_TIMESTAMP_SECOND" || proc == "FROM_UNIXTIME") {
      assertEquals(1371808830000000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MILLIS" || proc == "TO_TIMESTAMP_MILLISECOND") {
      assertEquals(1371808830000000L,result.getTimestampAsLong(0));
    }
 else     if (proc == "TO_TIMESTAMP_MICROS" || proc == "TO_TIMESTAMP_MICROSECOND") {
      assertEquals(1371808830000L,result.getTimestampAsLong(0));
    }
 else {
      fail();
    }
  }
}
