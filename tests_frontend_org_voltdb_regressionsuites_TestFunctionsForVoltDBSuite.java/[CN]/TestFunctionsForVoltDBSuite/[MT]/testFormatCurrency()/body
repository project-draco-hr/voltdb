{
  System.out.println("STARTING testFormatCurrency");
  Client client=getClient();
  ClientResponse cr=null;
  VoltTable result;
  String str;
  cr=client.callProcedure("@AdHoc","Delete from D1;");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","Delete from R3;");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  String[] decimal_strs={"123456.64565","-123456.64565","1123456785.555","-1123456785.555","0.0","-0.0","0","-0","99999999999999999999999999.999999999999","-99999999999999999999999999.99999999999"};
  for (int i=0; i < decimal_strs.length; i++) {
    BigDecimal bd=new BigDecimal(decimal_strs[i]);
    cr=client.callProcedure("D1.insert",i,bd);
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  }
  cr=client.callProcedure("R3.insert",1,1,1,1,1,1.1,"2013-07-18 02:00:00.123457","IBM",1);
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, 1), FORMAT_CURRENCY(DEC, 2)," + "FORMAT_CURRENCY(DEC, 3), FORMAT_CURRENCY(DEC, 4)," + "FORMAT_CURRENCY(DEC, 0), FORMAT_CURRENCY(DEC, -1),"+ "FORMAT_CURRENCY(DEC, -2), FORMAT_CURRENCY(DEC, -3) from D1 where id = 0");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getString(0);
  assertEquals(str,"123,456.6");
  str=result.getString(1);
  assertEquals(str,"123,456.65");
  str=result.getString(2);
  assertEquals(str,"123,456.646");
  str=result.getString(3);
  assertEquals(str,"123,456.6456");
  str=result.getString(4);
  assertEquals(str,"123,457");
  str=result.getString(5);
  assertEquals(str,"123,460");
  str=result.getString(6);
  assertEquals(str,"123,500");
  str=result.getString(7);
  assertEquals(str,"123,000");
  cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, 1), FORMAT_CURRENCY(DEC, 2)," + "FORMAT_CURRENCY(DEC, 3), FORMAT_CURRENCY(DEC, 4)," + "FORMAT_CURRENCY(DEC, 0), FORMAT_CURRENCY(DEC, -1),"+ "FORMAT_CURRENCY(DEC, -2), FORMAT_CURRENCY(DEC, -3) from D1 where id = 1");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getString(0);
  assertEquals(str,"-123,456.6");
  str=result.getString(1);
  assertEquals(str,"-123,456.65");
  str=result.getString(2);
  assertEquals(str,"-123,456.646");
  str=result.getString(3);
  assertEquals(str,"-123,456.6456");
  str=result.getString(4);
  assertEquals(str,"-123,457");
  str=result.getString(5);
  assertEquals(str,"-123,460");
  str=result.getString(6);
  assertEquals(str,"-123,500");
  str=result.getString(7);
  assertEquals(str,"-123,000");
  cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, 1), FORMAT_CURRENCY(DEC, 2)," + "FORMAT_CURRENCY(DEC, 3), FORMAT_CURRENCY(DEC, 4)," + "FORMAT_CURRENCY(DEC, 0), FORMAT_CURRENCY(DEC, -1),"+ "FORMAT_CURRENCY(DEC, -2), FORMAT_CURRENCY(DEC, -3) from D1 where id = 2");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getString(0);
  assertEquals(str,"1,123,456,785.6");
  str=result.getString(1);
  assertEquals(str,"1,123,456,785.56");
  str=result.getString(2);
  assertEquals(str,"1,123,456,785.555");
  str=result.getString(3);
  assertEquals(str,"1,123,456,785.5550");
  str=result.getString(4);
  assertEquals(str,"1,123,456,786");
  str=result.getString(5);
  assertEquals(str,"1,123,456,790");
  str=result.getString(6);
  assertEquals(str,"1,123,456,800");
  str=result.getString(7);
  assertEquals(str,"1,123,457,000");
  cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, 1), FORMAT_CURRENCY(DEC, 2)," + "FORMAT_CURRENCY(DEC, 3), FORMAT_CURRENCY(DEC, 4)," + "FORMAT_CURRENCY(DEC, 0), FORMAT_CURRENCY(DEC, -1),"+ "FORMAT_CURRENCY(DEC, -2), FORMAT_CURRENCY(DEC, -3) from D1 where id = 3");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  str=result.getString(0);
  assertEquals(str,"-1,123,456,785.6");
  str=result.getString(1);
  assertEquals(str,"-1,123,456,785.56");
  str=result.getString(2);
  assertEquals(str,"-1,123,456,785.555");
  str=result.getString(3);
  assertEquals(str,"-1,123,456,785.5550");
  str=result.getString(4);
  assertEquals(str,"-1,123,456,786");
  str=result.getString(5);
  assertEquals(str,"-1,123,456,790");
  str=result.getString(6);
  assertEquals(str,"-1,123,456,800");
  str=result.getString(7);
  assertEquals(str,"-1,123,457,000");
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(dec, 2) from D1 where id = 8");
    fail("range validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("out of range"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(dec, 2) from D1 where id = 9");
    fail("range validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("out of range"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(id, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(tiny, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(small, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(num, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(big, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(ratio, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("can't be cast as DECIMAL"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(tm, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("incompatible data type in operation"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(var, 2) from R3 where id = 1");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("incompatible data type in operation"));
  }
  String[] s={"1,000,000.00","100,000.00","10,000.00","1,000.00","100.00","10.00","1.00","0.10","0.01","0.00"};
  for (int i=0; i < 10; i++) {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(CAST(" + Math.pow(10,6 - i) + " as DECIMAL), 2) from D1 where id = 1");
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    str=result.getString(0);
    assertEquals(str,s[i]);
  }
  for (int i=0; i < 10; i++) {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(CAST(" + -Math.pow(10,6 - i) + " as DECIMAL), 2) from D1 where id = 1");
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    str=result.getString(0);
    assertEquals(str,"-" + s[i]);
  }
  String[] s2={"1,111,111.11111","1,111,111.1111","1,111,111.111","1,111,111.11","1,111,111.1","1,111,111","1,111,110","1,111,100","1,111,000","1,110,000","1,100,000","1,000,000","0"};
  for (int i=5; i > -8; i--) {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(CAST(1111111.11111 as DECIMAL), " + i + ") from D1 where id = 1");
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    str=result.getString(0);
    assertEquals(str,s2[5 - i]);
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, 15) from D1 where id = 0");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("the second parameter"));
  }
  try {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, -26) from D1 where id = 0");
    fail("type validity check failed for FORMAT_CURRENCY");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("the second parameter"));
  }
  for (int i=4; i < 8; i++) {
    cr=client.callProcedure("@AdHoc","select FORMAT_CURRENCY(DEC, 2) from D1 where id = " + i);
    assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
    result=cr.getResults()[0];
    assertEquals(1,result.getRowCount());
    assertTrue(result.advanceRow());
    str=result.getString(0);
    assertEquals(str,"0.00");
  }
}
