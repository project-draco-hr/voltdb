{
  System.out.println("STARTING DECODE");
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  cr=client.callProcedure("@AdHoc","Delete from P1;");
  cr=client.callProcedure("P1.insert",1,"IBM",10,1.1);
  cr=client.callProcedure("P1.insert",2,"Microsoft",10,1.1);
  cr=client.callProcedure("P1.insert",3,"Hewlett Packard",10,1.1);
  cr=client.callProcedure("P1.insert",4,"Gateway",10,1.1);
  cr=client.callProcedure("P1.insert",5,null,10,1.1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("DECODE",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("zheng",result.getString(1));
  cr=client.callProcedure("DECODE",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("li",result.getString(1));
  cr=client.callProcedure("DECODE",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("at",result.getString(1));
  cr=client.callProcedure("DECODE",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("VoltDB",result.getString(1));
  cr=client.callProcedure("DECODE",5);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("where",result.getString(1));
  cr=client.callProcedure("DECODE_PARAM_INFER_STRING","Gateway","You got it!",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("You got it!",result.getString(1));
  cr=client.callProcedure("DECODE_PARAM_INFER_INT",4,-4,4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(-4,result.getLong(1));
  cr=client.callProcedure("DECODE_PARAM_INFER_DEFAULT","Gateway","Gateway","You got it!","You ain't got it!",4);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("You got it!",result.getString(1));
  cr=client.callProcedure("DECODE_PARAM_INFER_CONFLICTING","?????????????!",1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("?????????????!",result.getString(1));
  try {
    cr=client.callProcedure("DECODE_PARAM_INFER_CONFLICTING",1000,1);
    fail("Should have thrown unfortunate type error.");
  }
 catch (  ProcCallException pce) {
    String msg=pce.getMessage();
    assertTrue(msg.contains("TYPE ERROR FOR PARAMETER 0"));
  }
}
