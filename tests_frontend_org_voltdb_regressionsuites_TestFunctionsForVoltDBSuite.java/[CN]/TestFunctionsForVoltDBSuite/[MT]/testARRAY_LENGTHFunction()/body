{
  ClientResponse cr;
  VoltTable result;
  Client client=getClient();
  loadJS1(client);
  cr=client.callProcedure("IdArrayLengthProc","arr",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  try {
    cr=client.callProcedure("IdArrayLengthProc","arr","NoNumber");
    fail("parameter check failed");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("TYPE ERROR FOR PARAMETER 1"));
  }
  try {
    cr=client.callProcedure("IdArrayLengthProc",1,3);
    fail("parameter check failed");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("TYPE ERROR FOR PARAMETER 0"));
  }
  cr=client.callProcedure("NullFieldProc","funky");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(9,result.getRowCount());
  cr=client.callProcedure("NullArrayLengthProc","arr");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(6,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(4L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(5L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(6L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(7L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(8L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(9L,result.getLong(0));
  cr=client.callProcedure("LargeArrayLengthProc","arr",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(0,result.getRowCount());
  cr=client.callProcedure("LargeArrayLengthProc","arr",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("SmallArrayLengthProc","arr",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(0,result.getRowCount());
  cr=client.callProcedure("SmallArrayLengthProc","arr",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_LENGTH(FIELD(DOC, 'id')) FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getLong(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_LENGTH(FIELD(DOC, 'inner')) FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getLong(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("JS1.insert",10,"[0, 10, 100]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_LENGTH(DOC) FROM JS1 WHERE ID = 10");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("JS1.insert",11,"[]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_LENGTH(DOC) FROM JS1 WHERE ID = 11");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(0L,result.getLong(0));
}
