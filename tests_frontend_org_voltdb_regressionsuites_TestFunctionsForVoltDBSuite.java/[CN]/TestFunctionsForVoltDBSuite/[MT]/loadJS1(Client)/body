{
  final String jstemplate="{\n" + "    \"id\": %d,\n" + "    \"bool\": true,\n"+ "    \"inner\": {\n"+ "        \"veggies\": \"good for you\",\n"+ "        \"??????Vo\": \"wakarimasen\"\n"+ "    },\n"+ "    \"arr\": [\n"+ "        0,\n"+ "        %d,\n"+ "        100\n"+ "    ],\n"+ "    \"tag\": \"%s\"\n"+ "}";
  ClientResponse cr;
  cr=client.callProcedure("JS1.insert",1,String.format(jstemplate,1,1,"one"));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",2,String.format(jstemplate,2,2,"two"));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",3,String.format(jstemplate,3,3,"three"));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",4,"{\"id\":4,\"bool\": false}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",5,"{}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",6,"[]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",7,"{\"id\":7,\"funky\": null}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",8,null);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",9,"{\"id\":9, \"??????Vo\":\"??????????????????\"}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
}
