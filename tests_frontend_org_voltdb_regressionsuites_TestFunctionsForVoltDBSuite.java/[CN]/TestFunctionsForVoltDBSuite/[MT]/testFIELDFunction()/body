{
  final String jstemplate="{\n" + "    \"id\": %d,\n" + "    \"bool\": true,\n"+ "    \"inner\": {\n"+ "        \"veggies\": \"good for you\",\n"+ "        \"??????Vo\": \"wakarimasen\"\n"+ "    },\n"+ "    \"arr\": [\n"+ "        1,\n"+ "        2,\n"+ "        3,\n"+ "        4\n"+ "    ],\n"+ "    \"tag\": \"%s\"\n"+ "}";
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  cr=client.callProcedure("JS1.insert",1,String.format(jstemplate,1,"one"));
  cr=client.callProcedure("JS1.insert",2,String.format(jstemplate,2,"two"));
  cr=client.callProcedure("JS1.insert",3,String.format(jstemplate,3,"three"));
  cr=client.callProcedure("JS1.insert",4,"{\"id\":4,\"bool\": false}");
  cr=client.callProcedure("JS1.insert",5,"{}");
  cr=client.callProcedure("JS1.insert",6,"[]");
  cr=client.callProcedure("JS1.insert",7,"{\"id\":7,\"funky\": null}");
  cr=client.callProcedure("JS1.insert",8,null);
  cr=client.callProcedure("JS1.insert",9,"{\"id\":9, \"??????Vo\":\"??????????????????\"}");
  cr=client.callProcedure("IdFieldProc","id","1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  try {
    cr=client.callProcedure("IdFieldProc","id",1);
    fail("parameter check failed");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("TYPE ERROR FOR PARAMETER 1"));
  }
  try {
    cr=client.callProcedure("IdFieldProc",1,"1");
    fail("parameter check failed");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("TYPE ERROR FOR PARAMETER 0"));
  }
  cr=client.callProcedure("IdFieldProc","tag","three");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("IdFieldProc","bool","false");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(4L,result.getLong(0));
  cr=client.callProcedure("IdFieldProc","??????Vo","??????????????????");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(9L,result.getLong(0));
  cr=client.callProcedure("LikeFieldProc","tag");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(2,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("LikeNoParamFieldProc");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(2,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') LIKE 't%' ORDER BY 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(2,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("NullFieldProc","funky");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(9,result.getRowCount());
  cr=client.callProcedure("NullFieldProc","id");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(5L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(6L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(8L,result.getLong(0));
  cr=client.callProcedure("InnerFieldProc","??????Vo","wakarimasen");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("IdFieldProc","arr","[1,2,3,4]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
}
