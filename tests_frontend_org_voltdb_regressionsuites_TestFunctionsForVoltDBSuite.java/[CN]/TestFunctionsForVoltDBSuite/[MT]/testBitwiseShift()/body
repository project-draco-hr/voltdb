{
  System.out.println("STARTING test bitwise shifting tests");
  bitwiseShiftChecker(1,1,1);
  bitwiseShiftChecker(2,-1,1);
  bitwiseShiftChecker(3,3,60);
  bitwiseShiftChecker(4,-3,60);
  bitwiseShiftChecker(5,3,64);
  bitwiseShiftChecker(6,-3,64);
  bitwiseShiftChecker(7,3,65);
  bitwiseShiftChecker(8,-3,65);
  bitwiseShiftChecker(9,3,127);
  bitwiseShiftChecker(10,-3,127);
  bitwiseShiftChecker(11,3,128);
  bitwiseShiftChecker(12,-3,128);
  bitwiseShiftChecker(13,3,129);
  bitwiseShiftChecker(14,-3,129);
  bitwiseShiftChecker(15,8,63);
  bitwiseShiftChecker(16,-8,63);
  bitwiseShiftChecker(17,8,0);
  bitwiseShiftChecker(18,-8,0);
  bitwiseShiftChecker(50,Long.MAX_VALUE,3);
  bitwiseShiftChecker(51,3,Long.MAX_VALUE);
  bitwiseShiftChecker(52,Long.MAX_VALUE,-3);
  bitwiseShiftChecker(53,-3,Long.MAX_VALUE);
  bitwiseShiftChecker(54,Long.MIN_VALUE + 1,6);
  bitwiseShiftChecker(55,6,Long.MIN_VALUE + 1);
  bitwiseShiftChecker(56,Long.MIN_VALUE + 1,-6);
  bitwiseShiftChecker(57,-6,Long.MIN_VALUE + 1);
  try {
    bitwiseShiftChecker(19,3,63);
    fail();
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("would produce INT64_MIN, which is reserved for SQL NULL values"));
  }
  try {
    bitwiseShiftChecker(20,-3,63);
    fail();
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("would produce INT64_MIN, which is reserved for SQL NULL values"));
  }
  Client client=getClient();
  verifyStmtFails(client,"select BIT_SHIFT_LEFT(big, 9223372036854775809) from R3;","numeric value out of range");
  verifyStmtFails(client,"select BIT_SHIFT_LEFT(big, 0.5) from R3;","incompatible data type in conversion");
  verifyStmtFails(client,"select BIT_SHIFT_RIGHT(3.6, 2) from R3;","incompatible data type in conversion");
  verifyStmtFails(client,"select BIT_SHIFT_LEFT(big, -1) from R3;","unsupported negative value for bit shifting");
  verifyStmtFails(client,"select BIT_SHIFT_RIGHT(big, -1) from R3;","unsupported negative value for bit shifting");
  VoltTable vt;
  client.callProcedure("@AdHoc","insert into R3(id, big) values (100, null)");
  vt=client.callProcedure("BITWISE_SHIFT_PARAM_1",2,2,100).getResults()[0];
  validateRowOfLongs(vt,new long[]{Long.MIN_VALUE,Long.MIN_VALUE});
  vt=client.callProcedure("BITWISE_SHIFT_PARAM_2",2,2,100).getResults()[0];
  validateRowOfLongs(vt,new long[]{Long.MIN_VALUE,Long.MIN_VALUE});
}
