{
  System.out.println("STARTING testENG6861");
  Client client=getClient();
  ClientResponse cr;
  VoltTable result;
  try {
    cr=client.callProcedure("@Explain","SELECT TOP ? * FROM PAULTEST WHERE NAME IS NOT NULL AND " + "    ( LOCK_TIME IS NULL OR " + "      SINCE_EPOCH(MILLIS,CURRENT_TIMESTAMP)-? < SINCE_EPOCH(MILLIS,LOCK_TIME) );",10,5000);
  }
 catch (  Exception ex) {
    fail();
  }
  try {
    cr=client.callProcedure("@AdHoc","SELECT TOP ? * FROM PAULTEST WHERE NAME IS NOT NULL AND " + "    ( LOCK_TIME IS NULL OR " + "      SINCE_EPOCH(MILLIS,CURRENT_TIMESTAMP)-? < SINCE_EPOCH(MILLIS,LOCK_TIME) );",10,10000);
    result=cr.getResults()[0];
    assertEquals(0,result.getRowCount());
  }
 catch (  Exception ex) {
    fail();
  }
  try {
    cr=client.callProcedure("GOT_BAD_PARAM_COUNTS_INLINE",10,10000);
    result=cr.getResults()[0];
    assertEquals(0,result.getRowCount());
  }
 catch (  Exception ex) {
    fail();
  }
  try {
    cr=client.callProcedure("GotBadParamCountsInJava",10,10000);
    result=cr.getResults()[0];
    assertEquals(0,result.getRowCount());
  }
 catch (  Exception ex) {
    fail();
  }
  try {
    cr=client.callProcedure("@Explain","SELECT TOP ? FROM PAULTEST WHERE NAME IS NOT NULL AND (LOCK_TIME IS NULL OR SINCE_EPOCH(MILLIS,CURRENT_TIMESTAMP)-? < SINCE_EPOCH(MILLIS,LOCK_TIME));");
    fail("Expected to detect missing SELECT columns");
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("PlanningErrorException"));
    assertTrue(ex.getMessage().contains("unexpected token: FROM"));
    return;
  }
}
