{
  System.out.println("STARTING test DATEADD function tests");
  Client client=getClient();
  ClientResponse cr=null;
  VoltTable vt=null;
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (10000, '2000-01-01 01:00:00.000000');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(year, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2001-01-01 01:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(quarter, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-04-01 01:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(month, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-01 01:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(day, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(vt.getTimestampAsSqlTimestamp(0),Timestamp.valueOf("2000-01-02 01:00:00.000000"));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(hour, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-01-01 02:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(minute, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-01-01 01:01:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(second, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-01-01 01:00:01.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millisecond, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-01-01 01:00:00.001000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millis, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-01-01 01:00:00.001000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(microsecond, 1, TM) FROM P2 WHERE ID = 10000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-01-01 01:00:00.000001"),vt.getTimestampAsSqlTimestamp(0));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20000, '2007-01-01 13:10:10.111111');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millisecond, 1, TM) FROM P2 WHERE ID = 20000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 13:10:10.112111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millisecond, 2, TM) FROM P2 WHERE ID = 20000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 13:10:10.113111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(microsecond, 1, TM) FROM P2 WHERE ID = 20000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 13:10:10.111112"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(microsecond, 2, TM) FROM P2 WHERE ID = 20000").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 13:10:10.111113"),vt.getTimestampAsSqlTimestamp(0));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20001, '2007-01-01 01:01:01.111111');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(quarter, 4, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2008-01-01 01:01:01.111111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(month, 13, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2008-02-01 01:01:01.111111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(day, 365, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2008-01-01 01:01:01.111111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(hour, 23, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-02 00:01:01.111111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(minute, 59, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 02:00:01.111111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(second, 59, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 01:02:00.111111"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millisecond, 59, TM) FROM P2 WHERE ID = 20001").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2007-01-01 01:01:01.170111"),vt.getTimestampAsSqlTimestamp(0));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20002, '2000-01-01 00:00:00.000000');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(year, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-01-01 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(quarter, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-10-01 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(month, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-01 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(day, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-31 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(hour, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-31 23:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(minute, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-31 23:59:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(second, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-31 23:59:59.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millisecond, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-31 23:59:59.999000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(microsecond, -1, TM) FROM P2 WHERE ID = 20002").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("1999-12-31 23:59:59.999999"),vt.getTimestampAsSqlTimestamp(0));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20003, '2000-02-29 00:00:00.000000');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(year, 1, TM) FROM P2 WHERE ID = 20003").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2001-02-28 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20004, '2000-01-31 00:00:00.000000');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(month, 1, TM) FROM P2 WHERE ID = 20004").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(day, 31, TM) FROM P2 WHERE ID = 20004").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-03-02 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20005, '1999-12-31 00:00:00.000000');");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(year, 1, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-12-31 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(quarter, 2, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-06-30 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(month, 2, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(day, 60, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(hour, 1440, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(minute, 86400, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(second, 5184000, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(millisecond, 5184000000, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(microsecond, 5184000000000, TM) FROM P2 WHERE ID = 20005").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(Timestamp.valueOf("2000-02-29 00:00:00.000000"),vt.getTimestampAsSqlTimestamp(0));
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(YEAR, NULL, TM), DATEADD(QUARTER, NULL,TM), DATEADD(MONTH, NULL,TM), " + "DATEADD(DAY, NULL,TM), DATEADD(HOUR, NULL,TM), DATEADD(MINUTE, NULL,TM), " + "DATEADD(SECOND, NULL,TM), DATEADD(MILLISECOND, NULL,TM), "+ "DATEADD(MICROSECOND, NULL,TM) FROM P2 WHERE ID = 20005;").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(null,vt.getTimestampAsTimestamp(0));
  assertEquals(null,vt.getTimestampAsTimestamp(1));
  assertEquals(null,vt.getTimestampAsTimestamp(2));
  assertEquals(null,vt.getTimestampAsTimestamp(3));
  assertEquals(null,vt.getTimestampAsTimestamp(4));
  assertEquals(null,vt.getTimestampAsTimestamp(5));
  assertEquals(null,vt.getTimestampAsTimestamp(6));
  assertEquals(null,vt.getTimestampAsTimestamp(7));
  assertEquals(null,vt.getTimestampAsTimestamp(8));
  cr=client.callProcedure("@AdHoc","INSERT INTO P2 (ID, TM) VALUES (20006, null)");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  vt=client.callProcedure("@AdHoc","SELECT DATEADD(YEAR, 1, TM), DATEADD(QUARTER, 1, TM), DATEADD(MONTH, 1, TM), " + "DATEADD(DAY, 1, TM), DATEADD(HOUR, 1, TM), DATEADD(MINUTE, 1, TM), " + "DATEADD(SECOND, 1, TM), DATEADD(MILLISECOND, 1, TM), "+ "DATEADD(MICROSECOND, 1, TM) FROM P2 WHERE ID = 20006;").getResults()[0];
  assertTrue(vt.advanceRow());
  assertEquals(null,vt.getTimestampAsTimestamp(0));
  assertEquals(null,vt.getTimestampAsTimestamp(1));
  assertEquals(null,vt.getTimestampAsTimestamp(2));
  assertEquals(null,vt.getTimestampAsTimestamp(3));
  assertEquals(null,vt.getTimestampAsTimestamp(4));
  assertEquals(null,vt.getTimestampAsTimestamp(5));
  assertEquals(null,vt.getTimestampAsTimestamp(6));
  assertEquals(null,vt.getTimestampAsTimestamp(7));
  assertEquals(null,vt.getTimestampAsTimestamp(8));
  boolean throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(NULL, 1, TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("Unexpected Ad Hoc Planning Error"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(WEEK, 1, TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("Unexpected Ad Hoc Planning Error"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(YEAR, " + ((long)Integer.MAX_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(YEAR, " + ((long)Integer.MIN_VALUE - 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(QUARTER, " + ((long)Integer.MAX_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(QUARTER, " + ((long)Integer.MIN_VALUE - 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MONTH, " + ((long)Integer.MAX_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MONTH, " + ((long)Integer.MIN_VALUE - 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(DAY, " + Long.MAX_VALUE + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(DAY, " + (Long.MIN_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(HOUR, " + Long.MAX_VALUE + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(HOUR, " + (Long.MIN_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MINUTE, " + Long.MAX_VALUE + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MINUTE, " + (Long.MIN_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(SECOND, " + Long.MAX_VALUE + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(SECOND, " + (Long.MIN_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MILLISECOND, " + Long.MAX_VALUE + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MILLISECOND, " + (Long.MIN_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MICROSECOND, " + Long.MAX_VALUE + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
  throwed=false;
  try {
    client.callProcedure("@AdHoc","SELECT DATEADD(MICROSECOND, " + (Long.MIN_VALUE + 1) + ", TM) FROM P2 WHERE ID = 20005;");
  }
 catch (  ProcCallException e) {
    assertEquals(ClientResponse.GRACEFUL_FAILURE,e.getClientResponse().getStatus());
    assertTrue(e.getClientResponse().getStatusString().contains("interval is too large for DATEADD function"));
    throwed=true;
  }
  assertTrue(throwed);
}
