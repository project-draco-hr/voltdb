{
  System.out.println("STARTING testExplicitErrorUDF");
  Client client=getClient();
  ProcedureCallback callback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        throw new RuntimeException("Failed with response: " + clientResponse.getStatusString());
      }
    }
  }
;
  for (int id=7; id < 15; id++) {
    client.callProcedure(callback,"P1.insert",-id,"X" + String.valueOf(id),10,1.1);
    client.drain();
  }
  ClientResponse cr=null;
  cr=client.callProcedure("@AdHoc","select SQL_ERROR(123) from P1 where ID = 0");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","select SQL_ERROR('abc') from P1 where ID = 0");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","select SQL_ERROR(123, 'abc') from P1 where ID = 0");
  assertEquals(cr.getStatus(),ClientResponse.SUCCESS);
  verifyStmtFails(client,"select SQL_ERROR(123, 'abc') from P1","abc");
  verifyStmtFails(client,"select SQL_ERROR('abc') from P1","abc");
  verifyStmtFails(client,"select SQL_ERROR(123, 123) from P1",".*SQL ERROR\n.*VARCHAR.*");
  verifyStmtFails(client,"select SQL_ERROR(123.5) from P1","Type DECIMAL can't be cast as BIGINT");
  verifyStmtFails(client,"select SQL_ERROR(123.5E-2) from P1","Type FLOAT can't be cast as BIGINT");
}
