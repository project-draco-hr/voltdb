{
  ClientResponse cr;
  VoltTable result;
  Client client=getClient();
  loadJS1(client);
  cr=client.callProcedure("IdArrayProc","arr",1,"1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  try {
    cr=client.callProcedure("IdArrayProc","arr","NotNumeric","1");
    fail("parameter check failed");
  }
 catch (  ProcCallException pcex) {
    assertTrue(pcex.getMessage().contains("TYPE ERROR FOR PARAMETER 1"));
  }
  try {
    cr=client.callProcedure("IdArrayProc",1,1,"1");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  }
 catch (  ProcCallException pcex) {
    fail("parameter check failed");
  }
  cr=client.callProcedure("NullArrayProc","funky",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(9,result.getRowCount());
  cr=client.callProcedure("IdArrayProc","id",1,"1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(0,result.getRowCount());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_ELEMENT(FIELD(DOC, 'arr'), 99) FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_ELEMENT(FIELD(DOC, 'arr'), -1) FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_ELEMENT(FIELD(DOC, 'id'), 1) FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_ELEMENT(FIELD(DOC, 'inner'), 1) FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("JS1.insert",10,"[0, 10, 100]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_ELEMENT(DOC, 1) FROM JS1 WHERE ID = 10");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals("10",result.getString(0));
  cr=client.callProcedure("JS1.insert",11,"[]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("@AdHoc","SELECT ARRAY_ELEMENT(DOC, 0) FROM JS1 WHERE ID = 11");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
}
