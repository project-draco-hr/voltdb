{
  VoltServerConfig config=null;
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestFunctionsForVoltDBSuite.class);
  boolean success;
  VoltProjectBuilder project=new VoltProjectBuilder();
  final String literalSchema="CREATE TABLE P1 ( " + "ID INTEGER DEFAULT '0' NOT NULL, " + "DESC VARCHAR(300), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PRIMARY KEY (ID) ); "+ "PARTITION TABLE P1 ON COLUMN ID;"+ "CREATE TABLE P2 ( "+ "ID INTEGER DEFAULT '0' NOT NULL, "+ "TM TIMESTAMP DEFAULT NULL, "+ "PRIMARY KEY (ID) ); "+ "PARTITION TABLE P2 ON COLUMN ID;\n"+ "CREATE TABLE P3_INLINE_DESC ( "+ "ID INTEGER DEFAULT '0' NOT NULL, "+ "DESC VARCHAR(15), "+ "DESC2 VARCHAR(15), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PRIMARY KEY (ID) ); "+ "PARTITION TABLE P3_INLINE_DESC ON COLUMN ID;"+ "CREATE TABLE R3 ( "+ "ID INTEGER DEFAULT '0' NOT NULL, "+ "TINY TINYINT, "+ "SMALL SMALLINT, "+ "NUM INTEGER, "+ "BIG BIGINT, "+ "RATIO FLOAT, "+ "TM TIMESTAMP DEFAULT NULL, "+ "VAR VARCHAR(300), "+ "DEC DECIMAL, "+ "PRIMARY KEY (ID) ); "+ "CREATE INDEX R3_IDX_HEX ON R3 (hex(big));"+ "CREATE INDEX R3_IDX_bit_shift_left ON R3 (bit_shift_left(big, 3));"+ "CREATE INDEX R3_IDX_bit_shift_right ON R3 (bit_shift_right(big, 3));"+ "CREATE TABLE JS1 (\n"+ "  ID INTEGER NOT NULL, \n"+ "  DOC VARCHAR(8192),\n"+ "  PRIMARY KEY(ID))\n"+ ";\n"+ "CREATE TABLE D1 (\n"+ "  ID INTEGER NOT NULL, \n"+ "  DEC DECIMAL, \n"+ "  PRIMARY KEY(ID))\n"+ ";\n"+ "CREATE PROCEDURE IdFieldProc AS\n"+ "   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE InnerFieldProc AS\n"+ "   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE NullFieldProc AS\n"+ "   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE IdArrayProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE NullArrayProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE IdArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE NullArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE SmallArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE LargeArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\n"+ ";\n"+ "CREATE TABLE JSBAD (\n"+ "  ID INTEGER NOT NULL,\n"+ "  DOC VARCHAR(8192),\n"+ "  PRIMARY KEY(ID))\n"+ ";\n"+ "CREATE PROCEDURE BadIdFieldProc AS\n"+ "  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\n"+ ";\n"+ "CREATE PROCEDURE BadIdArrayProc AS\n"+ "  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\n"+ ";\n"+ "CREATE PROCEDURE BadIdArrayLengthProc AS\n"+ "  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\n"+ ";\n"+ "CREATE TABLE PAULTEST (ID INTEGER, NAME VARCHAR(12), LOCK_TIME TIMESTAMP, PRIMARY KEY(ID));"+ "\n"+ "CREATE PROCEDURE GOT_BAD_PARAM_COUNTS_INLINE AS \n"+ "    SELECT TOP ? * FROM PAULTEST WHERE NAME IS NOT NULL AND "+ "                                       (LOCK_TIME IS NULL OR "+ "                                        SINCE_EPOCH(MILLIS,CURRENT_TIMESTAMP)-? < "+ "                                        SINCE_EPOCH(MILLIS,LOCK_TIME))\n"+ ";\n"+ "CREATE INDEX ENG7792_UNUSED_INDEX_USES_CONCAT ON P3_INLINE_DESC (CONCAT(DESC, DESC2))"+ ";\n"+ "CREATE TABLE BINARYTEST (ID INTEGER, bdata varbinary(256), PRIMARY KEY(ID));"+ "";
  try {
    project.addLiteralSchema(literalSchema);
  }
 catch (  IOException e) {
    assertFalse(true);
  }
  loadProcedures(project);
  config=new LocalCluster("fixedsql-onesite.jar",1,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  config=new LocalCluster("fixedsql-threesite.jar",3,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  return builder;
}
