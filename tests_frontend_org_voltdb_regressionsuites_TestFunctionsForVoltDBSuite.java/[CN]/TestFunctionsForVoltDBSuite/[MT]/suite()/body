{
  VoltServerConfig config=null;
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestFunctionsForVoltDBSuite.class);
  boolean success;
  VoltProjectBuilder project=new VoltProjectBuilder();
  final String literalSchema="CREATE TABLE P1 ( " + "ID INTEGER DEFAULT '0' NOT NULL, " + "DESC VARCHAR(300), "+ "NUM INTEGER, "+ "RATIO FLOAT, "+ "PRIMARY KEY (ID) ); "+ "CREATE TABLE P2 ( "+ "ID INTEGER DEFAULT '0' NOT NULL, "+ "TM TIMESTAMP DEFAULT NULL, "+ "PRIMARY KEY (ID) ); "+ "CREATE TABLE JS1 (\n"+ "  ID INTEGER NOT NULL, \n"+ "  DOC VARCHAR(8192),\n"+ "  PRIMARY KEY(ID))\n"+ ";\n"+ "CREATE PROCEDURE IdFieldProc AS\n"+ "   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE InnerFieldProc AS\n"+ "   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE NullFieldProc AS\n"+ "   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE IdArrayProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE NullArrayProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE IdArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE NullArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE SmallArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\n"+ ";\n"+ "CREATE PROCEDURE LargeArrayLengthProc AS\n"+ "   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\n"+ ";\n"+ "CREATE TABLE JSBAD (\n"+ "  ID INTEGER NOT NULL,\n"+ "  DOC VARCHAR(8192),\n"+ "  PRIMARY KEY(ID))\n"+ ";\n"+ "CREATE PROCEDURE BadIdFieldProc AS\n"+ "  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\n"+ ";\n"+ "CREATE PROCEDURE BadIdArrayProc AS\n"+ "  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\n"+ ";\n"+ "CREATE PROCEDURE BadIdArrayLengthProc AS\n"+ "  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\n"+ ";\n"+ "";
  try {
    project.addLiteralSchema(literalSchema);
  }
 catch (  IOException e) {
    assertFalse(true);
  }
  project.addPartitionInfo("P1","ID");
  project.addPartitionInfo("P2","ID");
  project.addStmtProcedure("DECODE","select desc,  DECODE (desc,'IBM','zheng'," + "'Microsoft','li'," + "'Hewlett Packard','at',"+ "'Gateway','VoltDB',"+ "'where') from P1 where id = ?");
  project.addStmtProcedure("DECODEND","select desc,  DECODE (desc,'zheng','a') from P1 where id = ?");
  project.addStmtProcedure("DECODEVERYLONG","select desc,  DECODE (desc,'a','a'," + "'a','a'," + "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'a','a',"+ "'where') from P1 where id = ?");
  project.addStmtProcedure("DECODE_PARAM_INFER_STRING","select desc,  DECODE (desc,?,?,desc) from P1 where id = ?");
  project.addStmtProcedure("DECODE_PARAM_INFER_INT","select desc,  DECODE (id,?,?,id) from P1 where id = ?");
  project.addStmtProcedure("DECODE_PARAM_INFER_DEFAULT","select desc,  DECODE (?,?,?,?) from P1 where id = ?");
  project.addStmtProcedure("DECODE_PARAM_INFER_CONFLICTING","select desc,  DECODE (id,1,?,2,99,'??????') from P1 where id = ?");
  project.addStmtProcedure("OCTET_LENGTH","select desc,  OCTET_LENGTH (desc) from P1 where id = ?");
  project.addStmtProcedure("POSITION","select desc, POSITION (? IN desc) from P1 where id = ?");
  project.addStmtProcedure("CHAR_LENGTH","select desc, CHAR_LENGTH (desc) from P1 where id = ?");
  project.addStmtProcedure("SINCE_EPOCH_SECOND","select SINCE_EPOCH (SECOND, TM) from P2 where id = ?");
  project.addStmtProcedure("SINCE_EPOCH_MILLIS","select SINCE_EPOCH (MILLIS, TM) from P2 where id = ?");
  project.addStmtProcedure("SINCE_EPOCH_MICROS","select SINCE_EPOCH (MICROS, TM) from P2 where id = ?");
  config=new LocalCluster("fixedsql-onesite.jar",1,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  config=new LocalCluster("fixedsql-threesite.jar",3,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  return builder;
}
