{
  final String className=procedureDescriptor.m_className;
  final Language lang=procedureDescriptor.m_language;
  Class<?> procClass=procedureDescriptor.m_class;
  String shortName=deriveShortProcedureName(className);
  final Procedure procedure=db.getProcedures().add(shortName);
  for (  String groupName : procedureDescriptor.m_authGroups) {
    final Group group=db.getGroups().get(groupName);
    if (group == null) {
      throw compiler.new VoltCompilerException("Procedure " + className + " has a group "+ groupName+ " that does not exist");
    }
    final GroupRef groupRef=procedure.getAuthgroups().add(groupName);
    groupRef.setGroup(group);
  }
  procedure.setClassname(className);
  procedure.setSystemproc(false);
  procedure.setDefaultproc(procedureDescriptor.m_builtInStmt);
  procedure.setHasjava(true);
  procedure.setLanguage(lang.name());
  ProcInfoData info=compiler.getProcInfoOverride(shortName);
  ProcInfoData ddlInfo=null;
  if (procedureDescriptor.m_partitionString != null && !procedureDescriptor.m_partitionString.trim().isEmpty()) {
    ddlInfo=new ProcInfoData();
    ddlInfo.partitionInfo=procedureDescriptor.m_partitionString;
    ddlInfo.singlePartition=true;
  }
  if (info == null) {
    info=new ProcInfoData();
    ProcInfo annotationInfo=procClass.getAnnotation(ProcInfo.class);
    if (annotationInfo != null && ddlInfo != null) {
      String msg="Procedure: " + shortName + " has partition properties defined both in ";
      msg+="class \"" + className + "\" and in the schema defintion file(s)";
      throw compiler.new VoltCompilerException(msg);
    }
    if (annotationInfo != null) {
      info.partitionInfo=annotationInfo.partitionInfo();
      info.singlePartition=annotationInfo.singlePartition();
    }
 else     if (ddlInfo != null) {
      info=ddlInfo;
    }
  }
  assert(info != null);
  if (info.singlePartition == false) {
    if ((info.partitionInfo != null) && (info.partitionInfo.length() > 0)) {
      String msg="Procedure: " + shortName + " is annotated as multi-partition";
      msg+=" but partitionInfo has non-empty value: \"" + info.partitionInfo + "\"";
      throw compiler.new VoltCompilerException(msg);
    }
  }
  boolean procHasWriteStmts=false;
  boolean procHasSeqScans=false;
  boolean procWantsCommonPartitioning=true;
  AbstractExpression commonPartitionExpression=null;
  String exampleSPstatement=null;
  Object exampleSPvalue=null;
  Map<String,Object> fields=lang.accept(procedureIntrospector(compiler),procClass);
  boolean readWrite=false;
  for (  Object field : fields.values()) {
    if (!(field instanceof SQLStmt))     continue;
    SQLStmt stmt=(SQLStmt)field;
    QueryType qtype=QueryType.getFromSQL(stmt.getText());
    if (!qtype.isReadOnly()) {
      readWrite=true;
      break;
    }
  }
  final DeterminismMode detMode=readWrite ? DeterminismMode.SAFER : DeterminismMode.FASTER;
  for (  Entry<String,Object> entry : fields.entrySet()) {
    if (!(entry.getValue() instanceof SQLStmt))     continue;
    String stmtName=entry.getKey();
    SQLStmt stmt=(SQLStmt)entry.getValue();
    Statement catalogStmt=procedure.getStatements().add(stmtName);
    Object partitionParameter=null;
    if (info.singlePartition) {
      partitionParameter="StatementCompiler dummied up single partitioning for QueryPlanner";
    }
    PartitioningForStatement partitioning=info.singlePartition ? PartitioningForStatement.forceSP() : PartitioningForStatement.forceMP();
    StatementCompiler.compile(compiler,hsql,catalog,db,estimates,catalogStmt,stmt.getText(),stmt.getJoinOrder(),detMode,partitioning);
    if (partitioning.wasSpecifiedAsSingle()) {
      procWantsCommonPartitioning=false;
    }
 else     if (procWantsCommonPartitioning) {
      if (partitioning.getCountOfIndependentlyPartitionedTables() == 1) {
        AbstractExpression statementPartitionExpression=partitioning.singlePartitioningExpression();
        if (statementPartitionExpression != null) {
          if (commonPartitionExpression == null) {
            commonPartitionExpression=statementPartitionExpression;
            exampleSPstatement=stmt.getText();
            exampleSPvalue=partitioning.getInferredPartitioningValue();
          }
 else           if (commonPartitionExpression.equals(statementPartitionExpression) || (statementPartitionExpression instanceof ParameterValueExpression && commonPartitionExpression instanceof ParameterValueExpression)) {
          }
 else {
            procWantsCommonPartitioning=false;
          }
        }
 else {
          procWantsCommonPartitioning=false;
        }
      }
 else       if (partitioning.getCountOfPartitionedTables() == 0) {
        if (partitioning.getIsReplicatedTableDML()) {
          procWantsCommonPartitioning=false;
        }
      }
 else {
        procWantsCommonPartitioning=false;
      }
    }
    if (catalogStmt.getReadonly() == false) {
      procHasWriteStmts=true;
    }
    if (catalogStmt.getSeqscancount() > 0) {
      procHasSeqScans=true;
    }
  }
  if (procWantsCommonPartitioning && (commonPartitionExpression != null)) {
    String msg=null;
    if (commonPartitionExpression instanceof ParameterValueExpression) {
      msg="This procedure might benefit from an @ProcInfo annotation designating parameter " + ((ParameterValueExpression)commonPartitionExpression).getParameterIndex() + " of statement '"+ exampleSPstatement+ "'";
    }
 else {
      String valueDescription=null;
      if (exampleSPvalue == null) {
        valueDescription="of " + commonPartitionExpression.toString();
      }
 else {
        valueDescription=exampleSPvalue.toString();
      }
      msg="This procedure might benefit from an @ProcInfo annotation referencing an added parameter passed the value " + valueDescription;
    }
    compiler.addInfo(msg);
  }
  procedure.setReadonly(procHasWriteStmts == false);
  procedure.setHasseqscans(procHasSeqScans);
  for (  Statement catalogStmt : procedure.getStatements()) {
    if (catalogStmt.getIscontentdeterministic() == false) {
      String potentialErrMsg="Procedure " + shortName + " has a statement with a non-deterministic result - statement: \""+ catalogStmt.getSqltext()+ "\" , reason: "+ catalogStmt.getNondeterminismdetail();
      compiler.addWarn(potentialErrMsg);
    }
 else     if (catalogStmt.getIsorderdeterministic() == false) {
      String warnMsg;
      if (procHasWriteStmts) {
        String rwPotentialErrMsg="Procedure " + shortName + " is RW and has a statement whose result has a non-deterministic ordering - statement: \""+ catalogStmt.getSqltext()+ "\", reason: "+ catalogStmt.getNondeterminismdetail();
        warnMsg=rwPotentialErrMsg;
      }
 else {
        warnMsg="Procedure " + shortName + " has a statement with a non-deterministic result - statement: \""+ catalogStmt.getSqltext()+ "\", reason: "+ catalogStmt.getNondeterminismdetail();
      }
      compiler.addWarn(warnMsg);
    }
  }
  CatalogMap<ProcParameter> params=procedure.getParameters();
  Class<?>[] paramTypes=lang.accept(procedureEntryPointParametersTypeExtractor,fields);
  for (int i=0; i < paramTypes.length; i++) {
    Class<?> cls=paramTypes[i];
    ProcParameter param=params.add(String.valueOf(i));
    param.setIndex(i);
    if (cls.isArray()) {
      param.setIsarray(true);
      cls=cls.getComponentType();
    }
 else     param.setIsarray(false);
    if ((cls == Long.class) || (cls == Integer.class) || (cls == Short.class)|| (cls == Byte.class)|| (cls == Double.class)|| (cls == Character.class)|| (cls == Boolean.class)) {
      String msg="Procedure: " + shortName + " has a parameter with a boxed type: ";
      msg+=cls.getSimpleName();
      msg+=". Replace this parameter with the corresponding primitive type and the procedure may compile.";
      throw compiler.new VoltCompilerException(msg);
    }
 else     if ((cls == Float.class) || (cls == float.class)) {
      String msg="Procedure: " + shortName + " has a parameter with type: ";
      msg+=cls.getSimpleName();
      msg+=". Replace this parameter type with double and the procedure may compile.";
      throw compiler.new VoltCompilerException(msg);
    }
    VoltType type;
    try {
      type=VoltType.typeFromClass(cls);
    }
 catch (    VoltTypeException e) {
      String msg="Procedure: " + shortName + " has a parameter with invalid type: ";
      msg+=cls.getSimpleName();
      throw compiler.new VoltCompilerException(msg);
    }
catch (    RuntimeException e) {
      String msg="Procedure: " + shortName + " unexpectedly failed a check on a parameter of type: ";
      msg+=cls.getSimpleName();
      msg+=" with error: ";
      msg+=e.toString();
      throw compiler.new VoltCompilerException(msg);
    }
    param.setType(type.getValue());
  }
  procedure.setSinglepartition(info.singlePartition);
  if (info.singlePartition) {
    parsePartitionInfo(compiler,db,procedure,info.partitionInfo);
    if (procedure.getPartitionparameter() >= paramTypes.length) {
      String msg="PartitionInfo parameter not a valid parameter for procedure: " + procedure.getClassname();
      throw compiler.new VoltCompilerException(msg);
    }
    Class<?> partitionType=paramTypes[procedure.getPartitionparameter()];
    Class<?>[] validPartitionClzzes={Long.class,Integer.class,Short.class,Byte.class,long.class,int.class,short.class,byte.class,String.class,byte[].class};
    boolean found=false;
    for (    Class<?> candidate : validPartitionClzzes) {
      if (partitionType == candidate)       found=true;
    }
    if (!found) {
      String msg="PartitionInfo parameter must be a String or Number for procedure: " + procedure.getClassname();
      throw compiler.new VoltCompilerException(msg);
    }
    VoltType columnType=VoltType.get((byte)procedure.getPartitioncolumn().getType());
    VoltType paramType=VoltType.typeFromClass(partitionType);
    if (!columnType.canExactlyRepresentAnyValueOf(paramType)) {
      String msg="Type mismatch between partition column and partition parameter for procedure " + procedure.getClassname() + " may cause overflow or loss of precision.\nPartition column is type "+ columnType+ " and partition parameter is type "+ paramType;
      throw compiler.new VoltCompilerException(msg);
    }
 else     if (!paramType.canExactlyRepresentAnyValueOf(columnType)) {
      String msg="Type mismatch between partition column and partition parameter for procedure " + procedure.getClassname() + " does not allow the full range of partition key values.\nPartition column is type "+ columnType+ " and partition parameter is type "+ paramType;
      compiler.addWarn(msg);
    }
  }
  compiler.addClassToJar(jarOutput,procClass);
}
