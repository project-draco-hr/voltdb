{
  assert(procedure.getSinglepartition() == true);
  if (info.length() == 0) {
    String msg="Missing or Truncated PartitionInfo in attribute for procedure: " + procedure.getClassname();
    throw compiler.new VoltCompilerException(msg);
  }
  String[] parts=info.split(":");
  if (parts.length != 2) {
    String msg="Possibly invalid PartitionInfo in attribute for procedure: " + procedure.getClassname();
    throw compiler.new VoltCompilerException(msg);
  }
  String columnInfo=parts[0].trim();
  int paramIndex=Integer.parseInt(parts[1].trim());
  int paramCount=procedure.getParameters().size();
  if ((paramIndex < 0) || (paramIndex >= paramCount)) {
    String msg="PartitionInfo specifies invalid parameter index for procedure: " + procedure.getClassname();
    throw compiler.new VoltCompilerException(msg);
  }
  procedure.setPartitionparameter(paramIndex);
  parts=columnInfo.split("\\.");
  if (parts.length != 2) {
    String msg="Possibly invalid PartitionInfo in attribute for procedure: " + procedure.getClassname();
    throw compiler.new VoltCompilerException(msg);
  }
  String tableName=parts[0].trim();
  String columnName=parts[1].trim();
  CatalogMap<Table> tables=db.getTables();
  for (  Table table : tables) {
    if (table.getTypeName().equalsIgnoreCase(tableName)) {
      CatalogMap<Column> columns=table.getColumns();
      Column partitionColumn=table.getPartitioncolumn();
      if (partitionColumn == null) {
        String msg="PartitionInfo for procedure " + procedure.getClassname() + " refers to a replicated table (no partition column).";
        throw compiler.new VoltCompilerException(msg);
      }
      for (      Column column : columns) {
        if (column.getTypeName().equalsIgnoreCase(columnName)) {
          if (partitionColumn.getTypeName().equals(column.getTypeName())) {
            procedure.setPartitioncolumn(column);
            return;
          }
 else {
            String msg="PartitionInfo for procedure " + procedure.getClassname() + " refers to a column in schema which is not a partition key.";
            throw compiler.new VoltCompilerException(msg);
          }
        }
      }
    }
  }
  String msg="PartitionInfo for procedure " + procedure.getClassname() + " refers to a column in schema which can't be found.";
  throw compiler.new VoltCompilerException(msg);
}
