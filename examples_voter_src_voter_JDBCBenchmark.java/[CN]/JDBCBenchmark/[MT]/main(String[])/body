{
  try {
    AppHelper apph=new AppHelper(JDBCBenchmark.class.getCanonicalName()).add("threads","thread_count","Number of concurrent threads attacking the database.",1).add("display-interval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("contestants","contestant_count","Number of contestants in the voting contest (from 1 to 10).",6).add("max-votes","max_votes_per_phone_number","Maximum number of votes accepted for a given voter (phone number).",2).setArguments(args);
    int threadCount=apph.intValue("threads");
    long displayInterval=apph.longValue("display-interval");
    long duration=apph.longValue("duration");
    String servers=apph.stringValue("servers");
    int port=apph.intValue("port");
    int contestantCount=apph.intValue("contestants");
    int maxVoteCount=apph.intValue("max-votes");
    final String csv=apph.stringValue("stats");
    apph.validate("duration",(duration > 0)).validate("display-interval",(displayInterval > 0)).validate("threads",(threadCount > 0)).validate("contestants",(contestantCount > 0)).validate("max-votes",(maxVoteCount > 0));
    apph.printActualUsage();
    Class.forName("org.voltdb.jdbc.Driver");
    String url="jdbc:voltdb://" + servers + ":"+ port;
    System.out.printf("Connecting to: %s\n",url);
    int sleep=1000;
    while (true) {
      try {
        Con=DriverManager.getConnection(url,"","");
        break;
      }
 catch (      Exception e) {
        System.err.printf("Connection failed - retrying in %d second(s).\n",sleep / 1000);
        try {
          Thread.sleep(sleep);
        }
 catch (        Exception tie) {
        }
        if (sleep < 8000)         sleep+=sleep;
      }
    }
    System.out.println("Connected.  Starting benchmark.");
    final CallableStatement initializeCS=Con.prepareCall("{call Initialize(?,?)}");
    initializeCS.setInt(1,contestantCount);
    initializeCS.setString(2,ContestantNamesCSV);
    final int maxContestants=initializeCS.executeUpdate();
    PhoneCallGenerator switchboard=new PhoneCallGenerator(maxContestants);
    Timer timer=new Timer();
    timer.scheduleAtFixedRate(new TimerTask(){
      @Override public void run(){
        try {
          System.out.print(Con.unwrap(IVoltDBConnection.class).getStatistics("Vote"));
        }
 catch (        Exception x) {
        }
      }
    }
,displayInterval * 1000l,displayInterval * 1000l);
    ArrayList<Thread> threads=new ArrayList<Thread>();
    for (int i=0; i < threadCount; i++)     threads.add(new Thread(new ClientThread(url,switchboard,duration,maxVoteCount)));
    for (    Thread thread : threads)     thread.start();
    for (    Thread thread : threads)     thread.join();
    timer.cancel();
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Voting Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d votes was received...\n"+ " - %,9d Accepted\n"+ " - %,9d Rejected (Invalid Contestant)\n"+ " - %,9d Rejected (Maximum Vote Count Reached)\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n"+ "Contestant Name\t\tVotes Received\n",Con.unwrap(IVoltDBConnection.class).getStatistics("Vote").getExecutionCount(),VotingBoardResults.get(0),VotingBoardResults.get(1),VotingBoardResults.get(2),VotingBoardResults.get(3));
    final CallableStatement resultsCS=Con.prepareCall("{call Results}");
    ResultSet result=resultsCS.executeQuery();
    String winner="";
    long winnerVoteCount=0;
    while (result.next()) {
      if (result.getLong(3) > winnerVoteCount) {
        winnerVoteCount=result.getLong(3);
        winner=result.getString(1);
      }
      System.out.printf("%s\t\t%,14d\n",result.getString(1),result.getLong(3));
    }
    System.out.printf("\n\nThe Winner is: %s\n-------------------------------------------------------------------------------------\n",winner);
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    System.out.print(Con.unwrap(IVoltDBConnection.class).getStatistics("Vote").toString(false));
    Con.unwrap(IVoltDBConnection.class).saveStatistics(csv);
    Con.close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
