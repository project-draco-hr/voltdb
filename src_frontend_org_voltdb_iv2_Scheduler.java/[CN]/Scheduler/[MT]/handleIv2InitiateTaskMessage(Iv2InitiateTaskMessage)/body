{
  final String procedureName=message.getStoredProcedureName();
  final ProcedureRunner runner=m_loadedProcs.getProcByName(procedureName);
  if (message.isSinglePartition()) {
    final SpProcedureTask task=new SpProcedureTask(m_mailbox,runner,m_txnId.incrementAndGet(),m_pendingTasks,message);
    m_pendingTasks.offer(task);
    return;
  }
  m_clerk=VoltDB.instance().getSiteTracker();
  if (runner.isSystemProcedure()) {
    SystemProcedureCatalog.Config cfg=SystemProcedureCatalog.listing.get(procedureName);
    if (cfg.everySite) {
      final Long localId=m_mailbox.getHSId();
      final long mpTxnId=m_txnId.incrementAndGet();
      Iv2InitiateTaskMessage sp=new Iv2InitiateTaskMessage(localId,message.getCoordinatorHSId(),mpTxnId,message.isReadOnly(),true,message.getStoredProcedureInvocation(),message.getClientInterfaceHandle());
      DuplicateCounter counter=new DuplicateCounter(message.getInitiatorHSId(),m_clerk.getHSIdsForPartitionInitiators().size(),mpTxnId);
      m_duplicateCounters.put(mpTxnId,counter);
      for (      Long hsid : m_clerk.getHSIdsForPartitionInitiators()) {
        if (!hsid.equals(localId)) {
          try {
            System.out.println("Sending ESP to: " + hsid);
            m_mailbox.send(hsid,sp);
          }
 catch (          MessagingException e) {
            VoltDB.crashLocalVoltDB("Failed to serialize initiation for " + procedureName,true,e);
          }
        }
 else {
          System.out.println("Sending ESP to myself: " + localId);
          handleIv2InitiateTaskMessage(sp);
        }
      }
      return;
    }
  }
  final List<Long> partitionInitiators=m_clerk.getHSIdsForPartitionInitiators();
  final MpProcedureTask task=new MpProcedureTask(m_mailbox,m_loadedProcs.getProcByName(procedureName),m_txnId.incrementAndGet(),m_pendingTasks,message,partitionInitiators);
  m_outstandingTxns.put(task.m_txn.txnId,task.m_txn);
  m_pendingTasks.offer(task);
}
