{
  VoltServerConfig config=null;
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestSqlUpsertSuite.class);
  VoltProjectBuilder project=new VoltProjectBuilder();
  final String literalSchema="CREATE TABLE R1 ( " + "ID INTEGER DEFAULT 0 NOT NULL, " + "WAGE INTEGER, "+ "DEPT INTEGER, "+ "PRIMARY KEY (ID) );"+ "CREATE TABLE P1 ( "+ "ID INTEGER DEFAULT 0 NOT NULL, "+ "WAGE INTEGER NOT NULL, "+ "DEPT INTEGER NOT NULL, "+ "PRIMARY KEY (ID) );"+ "PARTITION TABLE P1 ON COLUMN ID;"+ "CREATE TABLE R2 ( "+ "ID INTEGER DEFAULT 0 NOT NULL, "+ "WAGE INTEGER NOT NULL, "+ "DEPT INTEGER NOT NULL, "+ "PRIMARY KEY (ID, DEPT) );"+ "CREATE TABLE P2 ( "+ "ID INTEGER DEFAULT 0 NOT NULL, "+ "WAGE INTEGER NOT NULL, "+ "DEPT INTEGER NOT NULL, "+ "PRIMARY KEY (ID, DEPT) );"+ "PARTITION TABLE P2 ON COLUMN DEPT;"+ "CREATE TABLE UR1 ( "+ "ID INTEGER NOT NULL, "+ "DEPT INTEGER);"+ "CREATE TABLE UR2 ( "+ "ID INTEGER NOT NULL UNIQUE, "+ "DEPT INTEGER);"+ "CREATE TABLE UP1 ( "+ "ID INTEGER NOT NULL, "+ "DEPT INTEGER);"+ "PARTITION TABLE UP1 ON COLUMN ID;"+ "CREATE TABLE UP2 ( "+ "ID INTEGER NOT NULL UNIQUE, "+ "DEPT INTEGER);"+ "PARTITION TABLE UP2 ON COLUMN ID;"+ "";
  try {
    project.addLiteralSchema(literalSchema);
  }
 catch (  IOException e) {
    assertFalse(true);
  }
  boolean success;
  config=new LocalCluster("sqlupsert-onesite.jar",2,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assert(success);
  builder.addServerConfig(config);
  config=new LocalCluster("sqlupsert-cluster.jar",2,3,1,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assert(success);
  builder.addServerConfig(config);
  return builder;
}
