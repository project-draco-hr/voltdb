{
  Client client=getClient();
  VoltTable vt=null;
  final long modifiedOneTuple=1;
  String[] tables={"R1","P1","R2","P2"};
  for (  String tb : tables) {
    String query="select ID, wage, dept from " + tb + " order by ID, dept";
    validateDMLTupleCount(client,String.format("Insert into %s values(%d, %d, %d)",tb,1,1,1),modifiedOneTuple);
    validateTableOfLongs(client,query,new long[][]{{1,1,1}});
    validateDMLTupleCount(client,String.format("Upsert into %s (id, dept) values (%d, %d)",tb,2,1),modifiedOneTuple);
    validateTableOfLongs(client,query,new long[][]{{1,1,1},{2,1,1}});
    validateDMLTupleCount(client,String.format("Upsert into %s (dept, wage, id) values(%d, %d, %d)",tb,1,2,2),modifiedOneTuple);
    validateTableOfLongs(client,query,new long[][]{{1,1,1},{2,2,1}});
    validateDMLTupleCount(client,String.format("Upsert into %s (dept, id) values(%d, %d)",tb,1,1),modifiedOneTuple);
    validateTableOfLongs(client,query,new long[][]{{1,1,1},{2,2,1}});
    validateDMLTupleCount(client,String.format("Upsert into %s (dept, id) values(%d, %d)",tb,3,1),modifiedOneTuple);
    if (tb.contains("2")) {
      validateTableOfLongs(client,query,new long[][]{{1,1,1},{1,1,3},{2,2,1}});
      validateDMLTupleCount(client,String.format("Delete from %s where id = %s and dept = %s",tb,1,1),modifiedOneTuple);
    }
    validateTableOfLongs(client,query,new long[][]{{1,1,3},{2,2,1}});
    validateDMLTupleCount(client,String.format("Upsert into %s (dept, id) values(%d, %d)",tb,3,4),modifiedOneTuple);
    validateTableOfLongs(client,query,new long[][]{{1,1,3},{2,2,1},{4,1,3}});
    try {
      vt=client.callProcedure("@AdHoc",String.format("Upsert into %s (wage) values(%d)",tb,5)).getResults()[0];
      fail("Should have thrown a planner exception on upsert with missing primary key.\n" + "Instead, the upsert return value was:\n" + vt.toString() + " and the check query now returns:\n"+ client.callProcedure("@AdHoc",query).getResults()[0].toString());
    }
 catch (    ProcCallException pce) {
      String msg=pce.toString();
      assertTrue(msg.contains("\" must specify a value for primary key \""));
    }
    if (tb.contains("1")) {
      validateDMLTupleCount(client,String.format("Upsert into %s (wage, id) values(%d, %d)",tb,6,2),modifiedOneTuple);
    }
 else {
      try {
        vt=client.callProcedure("@AdHoc",String.format("Upsert into %s (wage, id) values(%d, %d)",tb,6,2)).getResults()[0];
        fail("Should have thrown a planner exception on upsert with missing primary key.\n" + "Instead, the upsert return value was:\n" + vt.toString() + " and the check query now returns:\n"+ client.callProcedure("@AdHoc",query).getResults()[0].toString());
      }
 catch (      ProcCallException pce) {
        String msg=pce.toString();
        assertTrue(msg.contains("\" must specify a value for primary key \""));
      }
      validateDMLTupleCount(client,String.format("Upsert into %s (wage, id, dept) values(%d, %d, %d)",tb,6,2,1),modifiedOneTuple);
    }
    validateTableOfLongs(client,query,new long[][]{{1,1,3},{2,6,1},{4,1,3}});
  }
  try {
    vt=client.callProcedure("@AdHoc","Upsert into P1 (wage, id) values(8, 9)").getResults()[0];
    fail("Should have thrown a sql exception on upsert of a new row " + "without a required non-nullable column value.\n" + "Instead, the upsert return value was:\n" + vt.toString() + " and the check query now returns:\n"+ client.callProcedure("@AdHoc","select ID, wage, dept from P1 order by ID, dept").getResults()[0].toString());
  }
 catch (  ProcCallException pce) {
    String msg=pce.toString();
    assertTrue(msg.contains("CONSTRAINT VIOLATION"));
  }
  validateDMLTupleCount(client,"Upsert into R1 (dept, id) SELECT dept+10, id+1 FROM R2 order by 1, 2",3);
  validateTableOfLongs(client,"select ID, wage, dept from R1 order by ID, dept",new long[][]{{1,1,3},{2,6,13},{3,1,11},{4,1,3},{5,1,13}});
  validateDMLTupleCount(client,"Upsert into P1 (dept, id) SELECT id, dept FROM P2 order by 1, 2 ",3);
  validateTableOfLongs(client,"select ID, wage, dept from P1 order by ID, dept",new long[][]{{1,1,2},{2,6,1},{3,1,4},{4,1,3}});
}
