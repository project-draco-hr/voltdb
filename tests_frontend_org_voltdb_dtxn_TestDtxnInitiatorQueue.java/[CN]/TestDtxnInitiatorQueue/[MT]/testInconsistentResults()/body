{
  MockInitiator initiator=new MockInitiator();
  DtxnInitiatorQueue dut=new DtxnInitiatorQueue(INITIATOR_SITE_ID);
  dut.setInitiator(initiator);
  m_testStream.reset();
  dut.addPendingTxn(createTxnState(0,0,true,true));
  dut.addPendingTxn(createTxnState(0,1,true,true));
  dut.offer(createInitiateResponse(0,0,true,true,createResultSet("dude")));
  assertTrue(m_testStream.gotResponse());
  m_testStream.reset();
  boolean caught=false;
  try {
    dut.offer(createInitiateResponse(0,1,true,true,createResultSet("sweet")));
  }
 catch (  RuntimeException e) {
    if (e.getMessage().contains("Mismatched")) {
      caught=true;
    }
  }
  assertTrue(caught);
  m_testStream.reset();
  dut.addPendingTxn(createTxnState(2,0,false,true));
  dut.addPendingTxn(createTxnState(2,1,false,true));
  dut.offer(createInitiateResponse(2,0,false,true,createResultSet("dude")));
  assertFalse(m_testStream.gotResponse());
  caught=false;
  try {
    dut.offer(createInitiateResponse(2,1,true,true,createResultSet("sweet")));
  }
 catch (  RuntimeException e) {
    if (e.getMessage().contains("Mismatched")) {
      caught=true;
    }
  }
  assertTrue(caught);
}
