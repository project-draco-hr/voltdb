def initialize(standalone_arg, command_name_arg, command_dir_arg, version_arg):
    '\n    Set the VOLTDB_LIB and VOLTDB_VOLTDB environment variables based on the\n    script location and the working directory.\n    '
    global command_name, command_dir, version
    command_name = command_name_arg
    command_dir = command_dir_arg
    version = version_arg
    global standalone
    standalone = standalone_arg
    if standalone:
        return
    dirs = []

    def add_dir(dir):
        if (dir and os.path.isdir(dir) and (dir not in dirs)):
            dirs.append(os.path.realpath(dir))
    add_dir(os.getcwd())
    add_dir(command_dir)
    add_dir(os.environ.get('VOLTCORE', None))
    utility.verbose_info('Base directories for scan:', dirs)
    lib_search_globs = []
    voltdb_search_globs = []
    for dir in dirs:
        global voltdb_jar
        while (dir and (dir != '/') and (('VOLTDB_LIB' not in os.environ) or (not voltdb_jar))):
            utility.debug(('Checking potential VoltDB root directory: %s' % os.path.realpath(dir)))
            if (not os.environ.get('VOLTDB_LIB', '')):
                for subdir in ('lib', os.path.join('lib', 'voltdb')):
                    glob_chk = os.path.realpath(os.path.join(dir, subdir))
                    lib_search_globs.append(glob_chk)
                    if glob.glob(glob_chk):
                        os.environ['VOLTDB_LIB'] = os.path.join(dir, subdir)
                        utility.debug(('VOLTDB_LIB=>%s' % os.environ['VOLTDB_LIB']))
            if ((not os.environ.get('VOLTDB_VOLTDB', '')) or (voltdb_jar is None)):
                for subdir in ('voltdb', os.path.join('lib', 'voltdb')):
                    glob_chk = os.path.join(os.path.realpath(os.path.join(dir, subdir)), 'voltdb-*.jar')
                    voltdb_search_globs.append(glob_chk)
                    for voltdb_jar_chk in glob.glob(glob_chk):
                        if re_voltdb_jar.match(os.path.basename(voltdb_jar_chk)):
                            voltdb_jar = os.path.realpath(voltdb_jar_chk)
                            utility.debug(('VoltDB jar: %s' % voltdb_jar))
                            if (not os.environ.get('VOLTDB_VOLTDB', '')):
                                os.environ['VOLTDB_VOLTDB'] = os.path.dirname(voltdb_jar)
                                utility.debug(('VOLTDB_VOLTDB=>%s' % os.environ['VOLTDB_VOLTDB']))
            third_party_python_chk = os.path.join(dir, 'third_party', 'python')
            if os.path.isdir(third_party_python_chk):
                global third_party_python
                third_party_python = third_party_python_chk
            dir = os.path.dirname(dir)
    if (voltdb_jar is None):
        utility.abort('Failed to find the VoltDB jar file.', ('You may need to perform a build.', 'Searched the following:', voltdb_search_globs))
    if (not os.environ.get('VOLTDB_LIB', '')):
        utility.abort('Failed to find the VoltDB library directory.', ('You may need to perform a build.', 'Searched the following:', lib_search_globs))
    if ('LOG4J_CONFIG_PATH' not in os.environ):
        for chk_dir in ('$VOLTDB_LIB/../src/frontend', '$VOLTDB_VOLTDB'):
            path = os.path.join(os.path.realpath(os.path.expandvars(chk_dir)), 'log4j.xml')
            if os.path.exists(path):
                os.environ['LOG4J_CONFIG_PATH'] = path
                utility.debug(('LOG4J_CONFIG_PATH=>%s' % os.environ['LOG4J_CONFIG_PATH']))
                break
        else:
            utility.abort('Could not find log4j configuration file or LOG4J_CONFIG_PATH variable.')
    for var in ('VOLTDB_LIB', 'VOLTDB_VOLTDB', 'LOG4J_CONFIG_PATH'):
        utility.verbose_info(('Environment: %s=%s' % (var, os.environ[var])))
    global classpath
    classpath = [voltdb_jar]
    for path in glob.glob(os.path.join(os.environ['VOLTDB_LIB'], '*.jar')):
        classpath.append(path)
    for path in glob.glob(os.path.join(os.environ['VOLTDB_LIB'], 'extension', '*.jar')):
        classpath.append(path)
    utility.verbose_info(('Classpath: %s' % ':'.join(classpath)))
