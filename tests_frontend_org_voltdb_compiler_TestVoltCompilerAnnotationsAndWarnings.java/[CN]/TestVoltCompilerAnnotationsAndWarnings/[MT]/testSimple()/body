{
  String simpleSchema="create table blah (" + "ival bigint default 0 not null, " + "sval varchar(255) not null"+ ");"+ "create table indexed_blah ("+ "ival bigint default 0 not null, "+ "sval varchar(255) not null, "+ "PRIMARY KEY(ival)"+ ");";
  VoltProjectBuilder builder=new VoltProjectBuilder();
  ByteArrayOutputStream capturer=new ByteArrayOutputStream();
  PrintStream capturing=new PrintStream(capturer);
  builder.setCompilerDebugPrintStream(capturing);
  builder.addLiteralSchema(simpleSchema);
  builder.addPartitionInfo("blah","ival");
  builder.addStmtProcedure("Insert","insert                            into\t \tblah values\n\n(? \t ,\t\t\t?)                           ;",null);
  builder.addProcedures(NondeterministicROProc.class);
  builder.addProcedures(NondeterministicRWProc.class);
  builder.addProcedures(DeterministicRONonSeqProc.class);
  builder.addProcedures(DeterministicROSeqProc.class);
  builder.addProcedures(DeterministicRWProc.class);
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("annotations.jar"));
  assert(success);
  String captured=capturer.toString("UTF-8");
  String[] lines=captured.split("\n");
  assertTrue(foundLineMatching(lines,".*\\[RO].*NondeterministicROProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RO].*NondeterministicROProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RO].*DeterministicRONonSeqProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RO].*\\[Seq].*DeterministicROSeqProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*Insert.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*BLAH.insert.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*NondeterministicRWProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*DeterministicRWProc.*"));
  assertTrue(countLinesMatching(lines,".*\\[NDC].*NDC=true.*") == 2);
  assertFalse(foundLineMatching(lines,".*\\[NDC].*NDC=false.*"));
  assertFalse(foundLineMatching(lines,".*\\[RW].*NondeterministicROProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RW].*DeterministicRONonSeqProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RW].*\\[Seq].*DeterministicROSeqProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[Seq].*DeterministicRONonSeqProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*Insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*BLAH.insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[Seq].*Insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[Seq].*BLAH.insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*NondeterministicRWProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*DeterministicRWProc.*"));
  assertFalse(foundLineMatching(lines,".*values.*  .*"));
  assertFalse(foundLineMatching(lines,".*nsert.*  .*values.*"));
  assertFalse(foundLineMatching(lines,".*values.*\u0009.*"));
  assertFalse(foundLineMatching(lines,".*nsert.*\u0009.*values.*"));
  assertFalse(foundLineMatching(lines,".*values.*\\s\\s.*"));
  assertFalse(foundLineMatching(lines,".*nsert.*\\s\\s.*values.*"));
}
