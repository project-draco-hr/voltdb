{
  String simpleSchema="create table blah (" + "ival bigint default 0 not null, " + "sval varchar(255) not null"+ ");"+ "create table indexed_blah ("+ "ival bigint default 0 not null, "+ "sval varchar(255) not null, "+ "PRIMARY KEY(ival)"+ ");";
  VoltProjectBuilder builder=new VoltProjectBuilder();
  ByteArrayOutputStream capturer=new ByteArrayOutputStream();
  PrintStream capturing=new PrintStream(capturer);
  builder.setCompilerDebugPrintStream(capturing);
  builder.addLiteralSchema(simpleSchema);
  builder.addPartitionInfo("blah","ival");
  builder.addStmtProcedure("Insert","insert                            into\t \tblah values\n\n(? \t ,\t\t\t?)                           ;",null);
  builder.addProcedures(NondeterministicROProc.class);
  builder.addProcedures(NondeterministicRWProc.class);
  builder.addProcedures(DeterministicRONonSeqProc.class);
  builder.addProcedures(DeterministicROSeqProc.class);
  builder.addProcedures(DeterministicRWProc.class);
  builder.addProcedures(ProcSPcandidate1.class);
  builder.addProcedures(ProcSPcandidate2.class);
  builder.addProcedures(ProcSPcandidate3.class);
  builder.addProcedures(ProcSPcandidate4.class);
  builder.addProcedures(ProcSPcandidate5.class);
  builder.addProcedures(ProcSPcandidate6.class);
  builder.addProcedures(ProcSPcandidate7.class);
  builder.addProcedures(ProcSPNoncandidate1.class);
  builder.addProcedures(ProcSPNoncandidate2.class);
  builder.addProcedures(ProcSPNoncandidate3.class);
  builder.addProcedures(ProcSPNoncandidate4.class);
  builder.addProcedures(ProcSPNoncandidate5.class);
  builder.addProcedures(ProcSPNoncandidate6.class);
  builder.addStmtProcedure("StmtSPcandidate1","select count(*) from blah where ival = ?",null);
  builder.addStmtProcedure("StmtSPcandidate2","select count(*) from blah where ival = 12345678",null);
  builder.addStmtProcedure("StmtSPcandidate3","select count(*) from blah, indexed_blah " + "where indexed_blah.sval = blah.sval and blah.ival = 12345678",null);
  builder.addStmtProcedure("StmtSPcandidate4","select count(*) from blah, indexed_blah " + "where indexed_blah.sval = blah.sval and blah.ival = abs(1)+1",null);
  builder.addStmtProcedure("StmtSPcandidate5","select count(*) from blah where sval = ? and ival = 12345678",null);
  builder.addStmtProcedure("StmtSPcandidate6","select count(*) from blah where sval = ? and ival = ?",null);
  builder.addStmtProcedure("StmtSPNoncandidate1","select count(*) from blah where sval = ?",null);
  builder.addStmtProcedure("StmtSPNoncandidate2","select count(*) from blah where sval = '12345678'",null);
  builder.addStmtProcedure("StmtSPNoncandidate3","select count(*) from indexed_blah where ival = ?",null);
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("annotations.jar"));
  assert(success);
  String captured=capturer.toString("UTF-8");
  String[] lines=captured.split("\n");
  assertTrue(foundLineMatching(lines,".*\\[RO].*NondeterministicROProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RO].*NondeterministicROProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RO].*DeterministicRONonSeqProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RO].*\\[Seq].*DeterministicROSeqProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*Insert.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*BLAH.insert.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*NondeterministicRWProc.*"));
  assertTrue(foundLineMatching(lines,".*\\[RW].*DeterministicRWProc.*"));
  assertTrue(countLinesMatching(lines,".*\\[NDC].*NDC=true.*") == 2);
  assertFalse(foundLineMatching(lines,".*\\[NDC].*NDC=false.*"));
  assertFalse(foundLineMatching(lines,".*\\[RW].*NondeterministicROProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RW].*DeterministicRONonSeqProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RW].*\\[Seq].*DeterministicROSeqProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[Seq].*DeterministicRONonSeqProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*Insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*BLAH.insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[Seq].*Insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[Seq].*BLAH.insert.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*NondeterministicRWProc.*"));
  assertFalse(foundLineMatching(lines,".*\\[RO].*DeterministicRWProc.*"));
  assertEquals(4,countLinesMatching(lines,".*\\[StmtSPcandidate.].*partitioninfo=BLAH\\.IVAL:0.*"));
  assertEquals(2,countLinesMatching(lines,".*\\[StmtSPcandidate.].*12345678.*partitioninfo=BLAH\\.IVAL:0.*"));
  assertEquals(1,countLinesMatching(lines,".*\\[StmtSPcandidate.].*ABS.*partitioninfo=BLAH\\.IVAL:0.*"));
  assertEquals(1,countLinesMatching(lines,".*\\[StmtSPcandidate.].*12345678.*partitioninfo=BLAH\\.IVAL:1.*"));
  assertEquals(2,countLinesMatching(lines,".*\\[StmtSPcandidate.].*partitioninfo=BLAH\\.IVAL:1.*"));
  assertEquals(1,countLinesMatching(lines,".*\\[ProcSPcandidate.\\.class].*designating parameter 0 .*"));
  assertEquals(4,countLinesMatching(lines,".*\\[ProcSPcandidate.\\.class].*added parameter .*87654321.*"));
  assertEquals(1,countLinesMatching(lines,".*\\[ProcSPcandidate.\\.class].*added parameter .*ABS.*"));
  assertEquals(1,countLinesMatching(lines,".*\\[ProcSPcandidate.\\.class].*designating parameter 1 .*"));
  assertEquals(0,countLinesMatching(lines,".*\\[SPNoncandidate.].*partitioninfo=BLAH\\.IVAL:0.*"));
  assertEquals(0,countLinesMatching(lines,".*\\[SPNoncandidate.].*partitioninfo=BLAH\\.IVAL:1.*"));
  assertEquals(0,countLinesMatching(lines,".*\\[ProcSPNoncandidate.\\.class].* parameter .*"));
  assertEquals(0,countLinesMatching(lines,".*\\[ProcSPNoncandidate.\\.class].* parameter .*"));
  assertTrue(foundLineMatching(lines,"^[^ ].*values.*  .*"));
  assertFalse(foundLineMatching(lines,"^ .*values.*  .*"));
  assertTrue(foundLineMatching(lines,"^[^ ].*nsert.*  .*values.*"));
  assertFalse(foundLineMatching(lines,"^ .*nsert.*  .*values.*"));
  assertTrue(foundLineMatching(lines,"^[^ ].*values.*\u0009.*"));
  assertFalse(foundLineMatching(lines,"^ .*values.*\u0009.*"));
  assertTrue(foundLineMatching(lines,"^[^ ].*nsert.*\u0009.*values.*"));
  assertFalse(foundLineMatching(lines,"^ .*nsert.*\u0009.*values.*"));
  assertTrue(foundLineMatching(lines,"^[^ ].*values.*\\s\\s.*"));
  assertFalse(foundLineMatching(lines,"^ .*values.*\\s\\s.*"));
  assertTrue(foundLineMatching(lines,"^[^ ].*nsert.*\\s\\s.*values.*"));
  assertFalse(foundLineMatching(lines,"^ .*nsert.*\\s\\s.*values.*"));
}
