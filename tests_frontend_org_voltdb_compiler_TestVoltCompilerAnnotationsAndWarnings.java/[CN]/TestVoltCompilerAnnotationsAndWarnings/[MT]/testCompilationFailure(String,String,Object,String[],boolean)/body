{
  VoltProjectBuilder builder=new VoltProjectBuilder();
  ByteArrayOutputStream capturer=new ByteArrayOutputStream();
  PrintStream capturing=new PrintStream(capturer);
  builder.setCompilerDebugPrintStream(capturing);
  builder.addLiteralSchema(simpleSchema);
  if (procObject instanceof String[]) {
    String[] stmtProcDescrip=(String[])procObject;
    assertTrue(stmtProcDescrip.length == 2);
    builder.addStmtProcedure(stmtProcDescrip[0],stmtProcDescrip[1]);
  }
 else   if (procObject instanceof Class<?>) {
    Class<?> procKlazz=(Class<?>)procObject;
    builder.addProcedures(procKlazz);
  }
 else {
    assertTrue("Bad type of object for parameter \"procObject\"",false);
  }
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("annotations.jar"));
  assertEquals(String.format("Expected compilation %s",(expectSuccess ? "success" : "failure")),expectSuccess,success);
  if (errorMessages != null) {
    String captured=capturer.toString("UTF-8");
    String[] lines=captured.split("\n");
    System.out.printf("\n" + ":----------------------------------------------------------------------:\n" + ":  %s: Start of captured output\n"+ ":----------------------------------------------------------------------:\n",testName);
    System.out.println(captured);
    System.out.printf("\n" + ":----------------------------------------------------------------------:\n" + ":  %s: End of captured output\n"+ ":----------------------------------------------------------------------:\n",testName);
    for (    String oneMessagePattern : errorMessages) {
      assertTrue(foundLineMatching(lines,oneMessagePattern));
    }
  }
}
