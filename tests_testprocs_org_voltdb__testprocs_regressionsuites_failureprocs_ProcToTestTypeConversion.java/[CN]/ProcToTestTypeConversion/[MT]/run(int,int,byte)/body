{
  assert(m_tableColTypeVal.length > indOfTargetType);
  Object rowToInsert[];
  boolean useStrTs=(m_tableColTypeVal[indOfTargetType] == VoltType.TIMESTAMP) ? true : false;
switch (operation) {
case TestAllAllowedTypeConv:
    voltQueueSQL(insert,null,null,null,m_bigIntVal,null,null,null,null,null,null,null,null);
  voltQueueSQL(insert,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_tsVal,m_tsVal,m_tsVal,m_tsVal,m_tsVal,m_bigDecVal,m_tsVal,m_tsVal,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_strNum,m_strNum,m_strNum,m_strNum,m_strNum,m_strNum,m_strTs,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(insert,m_byteVal,m_shortVal,m_intVal,m_floatVal,m_bigIntVal,m_bigDecVal,m_tsVal,m_binVal,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,null,null,null,m_bigIntVal,null,null,null,null,null,null,null,null);
voltQueueSQL(compare,m_byteVal,m_shortVal,m_intVal,m_floatVal,m_bigIntVal,m_bigDecVal,m_tsVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_byteVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_shortVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_intVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_bigIntVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_longInst,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_doubleVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_doubleInst,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_floatVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_floatInst,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_bigDecVal,m_strTs,m_binVal,m_pt,m_poly);
voltQueueSQL(compare,m_tsVal,m_tsVal,m_tsVal,m_tsVal,m_tsVal,m_tsVal,m_tsVal,m_strTs,m_binVal,m_pt,m_poly);
break;
case TestTypeConvWithInsertProc:
rowToInsert=getUpdatedRowToInsert(indOfTargetType,valueOfTypeToPopulateWith,useStrTs);
voltQueueSQL(insert,rowToInsert);
break;
case TestTypesInList:
Object value=getUpdatedRow4InList(valueOfTypeToPopulateWith,useStrTs);
switch (m_tableColTypeVal[indOfTargetType]) {
case TINYINT:
voltQueueSQL(m_tinyInList,value);
break;
case SMALLINT:
voltQueueSQL(m_smallInList,value);
break;
case INTEGER:
voltQueueSQL(m_intInList,value);
break;
case BIGINT:
voltQueueSQL(m_bigIntInList,value);
break;
case FLOAT:
voltQueueSQL(m_fltInList,value);
break;
case DECIMAL:
voltQueueSQL(m_bigDecInList,value);
break;
case TIMESTAMP:
voltQueueSQL(m_tsInList,value);
break;
case STRING:
voltQueueSQL(m_strInList,value);
break;
case VARBINARY:
voltQueueSQL(m_binInList,value);
break;
case GEOGRAPHY_POINT:
voltQueueSQL(m_ptInList,value);
break;
case GEOGRAPHY:
voltQueueSQL(m_polyInList,value);
break;
default :
assert(false);
}
break;
}
return voltExecuteSQL();
}
