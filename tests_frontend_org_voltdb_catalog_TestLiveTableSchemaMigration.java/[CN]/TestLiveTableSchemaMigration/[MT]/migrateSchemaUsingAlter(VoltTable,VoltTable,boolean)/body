{
  ServerThread server=null;
  Client client=null;
  TableHelper helper=new TableHelper();
  try {
    String alterText=TableHelper.getAlterTableDDLToMigrate(t1,t2);
    if (withData) {
      helper.randomFill(t1,1000,1024);
    }
    String catPath1=catalogPathForTable(t1,"t1.jar");
    DeploymentBuilder depBuilder=new DeploymentBuilder(1,1,0);
    depBuilder.setVoltRoot("/tmp/rootbar");
    depBuilder.setUseDDLSchema(true);
    depBuilder.configureLogging("/tmp/foobar","/tmp/goobar",false,false,1,1,3);
    String deployment=depBuilder.getXML();
    File deploymentFile=VoltProjectBuilder.writeStringToTempFile(deployment);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToDeployment=deploymentFile.getAbsolutePath();
    config.m_pathToCatalog=catPath1;
    config.m_ipcPort=10000;
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    System.out.printf("PRE:  %s\n",TableHelper.ddlForTable(t1));
    System.out.printf("POST: %s\n",TableHelper.ddlForTable(t2));
    TableHelper.migrateTable(t1,t2);
    t2=TableHelper.sortTable(t2);
    ClientConfig clientConfig=new ClientConfig();
    client=ClientFactory.createClient(clientConfig);
    client.createConnection("localhost");
    TableHelper.loadTable(client,t1);
    if (alterText.trim().length() > 0) {
      ClientResponseImpl response=(ClientResponseImpl)client.callProcedure("@AdHoc",alterText,null);
      System.out.println(response.toJSONString());
    }
    VoltTable t3=client.callProcedure("@AdHoc","select * from FOO").getResults()[0];
    t3=TableHelper.sortTable(t3);
    StringBuilder sb=new StringBuilder();
    if (!TableHelper.deepEqualsWithErrorMsg(t2,t3,sb)) {
      System.out.println("Table Mismatch");
      System.out.println(sb.toString());
      fail();
    }
  }
  finally {
    if (client != null) {
      client.close();
    }
    if (server != null) {
      server.shutdown();
    }
  }
}
