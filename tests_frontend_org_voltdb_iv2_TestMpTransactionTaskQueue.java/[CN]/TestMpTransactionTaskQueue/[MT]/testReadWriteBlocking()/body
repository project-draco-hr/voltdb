{
  TxnEgo txnId=TxnEgo.makeZero(MpInitiator.MP_INIT_PID);
  Deque<Long> offeredReads=new ArrayDeque<Long>();
  for (int i=0; i < 10; i++) {
    txnId=txnId.makeNext();
    offeredReads.push(txnId.getTxnId());
    m_dut.offer(makeTransactionTask(txnId.getTxnId(),true));
    verify(m_MPpool).doWork(eq(txnId.getTxnId()),any(TransactionTask.class));
  }
  txnId=txnId.makeNext();
  long writetxnid=txnId.getTxnId();
  m_dut.offer(makeTransactionTask(writetxnid,false));
  verify(m_writeQueue,never()).offer(any(TransactionTask.class));
  txnId=txnId.makeNext();
  long readtxnid=txnId.getTxnId();
  m_dut.offer(makeTransactionTask(readtxnid,true));
  verify(m_MPpool,never()).doWork(eq(readtxnid),any(TransactionTask.class));
  for (int i=0; i < 10; i++) {
    verify(m_writeQueue,never()).offer(any(TransactionTask.class));
    verify(m_MPpool,never()).doWork(eq(readtxnid),any(TransactionTask.class));
    long txnid=offeredReads.pop();
    m_dut.flush(txnid);
    verify(m_MPpool).completeWork(txnid);
  }
  verify(m_writeQueue).offer(any(TransactionTask.class));
  verify(m_MPpool,never()).doWork(eq(readtxnid),any(TransactionTask.class));
  txnId=txnId.makeNext();
  long readtxnid2=txnId.getTxnId();
  m_dut.offer(makeTransactionTask(readtxnid2,true));
  verify(m_MPpool,never()).doWork(eq(readtxnid2),any(TransactionTask.class));
  m_dut.flush(writetxnid);
  verify(m_MPpool).doWork(eq(readtxnid),any(TransactionTask.class));
  verify(m_MPpool).doWork(eq(readtxnid2),any(TransactionTask.class));
}
