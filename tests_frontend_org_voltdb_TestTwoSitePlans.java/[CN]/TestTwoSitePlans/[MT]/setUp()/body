{
  VoltDB.instance().readBuildInfo("Test");
  String testDir=BuildDirectoryUtils.getBuildDirectoryPath();
  String catalogJar=testDir + File.separator + JAR;
  TPCCProjectBuilder pb=new TPCCProjectBuilder();
  pb.addDefaultSchema();
  pb.addDefaultPartitioning();
  pb.addProcedures(MultiSiteSelect.class,InsertNewOrder.class);
  pb.compile(catalogJar,2,0);
  byte[] bytes=MiscUtils.fileToBytes(new File(catalogJar));
  String serializedCatalog=CatalogUtil.getSerializedCatalogStringFromJar(CatalogUtil.loadAndUpgradeCatalogFromJar(bytes).getFirst());
  catalog=new Catalog();
  catalog.execute(serializedCatalog);
  String pathToDeployment=pb.getPathToDeployment();
  assertTrue(CatalogUtil.compileDeployment(catalog,pathToDeployment,false) == null);
  cluster=catalog.getClusters().get("cluster");
  CatalogMap<Procedure> procedures=cluster.getDatabases().get("database").getProcedures();
  Procedure insertProc=procedures.get("InsertNewOrder");
  assert(insertProc != null);
  selectProc=procedures.get("MultiSiteSelect");
  assert(selectProc != null);
  final AtomicReference<ExecutionEngine> site1Reference=new AtomicReference<ExecutionEngine>();
  final byte configBytes[]=LegacyHashinator.getConfigureBytes(2);
  Thread site1Thread=new Thread(){
    @Override public void run(){
      site1Reference.set(new ExecutionEngineJNI(cluster.getRelativeIndex(),1,0,0,"",100,new HashinatorConfig(HashinatorType.LEGACY,configBytes,0,0)));
    }
  }
;
  site1Thread.start();
  site1Thread.join();
  final AtomicReference<ExecutionEngine> site2Reference=new AtomicReference<ExecutionEngine>();
  Thread site2Thread=new Thread(){
    @Override public void run(){
      site2Reference.set(new ExecutionEngineJNI(cluster.getRelativeIndex(),2,1,0,"",100,new HashinatorConfig(HashinatorType.LEGACY,configBytes,0,0)));
    }
  }
;
  site2Thread.start();
  site2Thread.join();
  ee1=site1Reference.get();
  ee1.loadCatalog(0,catalog.serialize());
  ee2=site2Reference.get();
  ee2.loadCatalog(0,catalog.serialize());
  selectStmt=selectProc.getStatements().get("selectAll");
  assert(selectStmt != null);
  int i=0;
  for (  PlanFragment f : selectStmt.getFragments()) {
    if (i == 0)     selectTopFrag=f;
 else     selectBottomFrag=f;
    i++;
  }
  assert(selectTopFrag != null);
  assert(selectBottomFrag != null);
  if (selectTopFrag.getHasdependencies() == false) {
    PlanFragment temp=selectTopFrag;
    selectTopFrag=selectBottomFrag;
    selectBottomFrag=temp;
  }
  Statement insertStmt=insertProc.getStatements().get("insert");
  assert(insertStmt != null);
  for (  PlanFragment f : insertStmt.getFragments())   insertFrag=f;
  ActivePlanRepository.clear();
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(selectBottomFrag),Encoder.decodeBase64AndDecompressToBytes(selectBottomFrag.getPlannodetree()),selectStmt.getSqltext());
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(selectTopFrag),Encoder.decodeBase64AndDecompressToBytes(selectTopFrag.getPlannodetree()),selectStmt.getSqltext());
  ActivePlanRepository.addFragmentForTest(CatalogUtil.getUniqueIdForFragment(insertFrag),Encoder.decodeBase64AndDecompressToBytes(insertFrag.getPlannodetree()),insertStmt.getSqltext());
  ParameterSet params=ParameterSet.fromArrayNoCopy(1L,1L,1L);
  VoltTable[] results=ee2.executePlanFragments(1,new long[]{CatalogUtil.getUniqueIdForFragment(insertFrag)},null,new ParameterSet[]{params},new String[]{selectStmt.getSqltext()},1,1,0,42,Long.MAX_VALUE);
  assert(results.length == 1);
  assert(results[0].asScalarLong() == 1L);
  params=ParameterSet.fromArrayNoCopy(2L,2L,2L);
  results=ee1.executePlanFragments(1,new long[]{CatalogUtil.getUniqueIdForFragment(insertFrag)},null,new ParameterSet[]{params},new String[]{insertStmt.getSqltext()},2,2,1,42,Long.MAX_VALUE);
  assert(results.length == 1);
  assert(results[0].asScalarLong() == 1L);
}
