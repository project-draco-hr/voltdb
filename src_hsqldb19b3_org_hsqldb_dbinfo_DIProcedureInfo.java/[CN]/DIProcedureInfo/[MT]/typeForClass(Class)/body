{
  Class to;
  Integer type=(Integer)typeMap.get(c);
  if (type != null) {
    return type.intValue();
  }
  if (c.isArray() && !c.getComponentType().isArray()) {
    return Types.SQL_ARRAY;
  }
  try {
    to=Class.forName("java.sql.Array");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_ARRAY;
    }
  }
 catch (  Exception e) {
  }
  if (Number.class.isAssignableFrom(c)) {
    return Types.SQL_NUMERIC;
  }
  try {
    to=Class.forName("java.sql.Timestamp");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_TIMESTAMP;
    }
  }
 catch (  Exception e) {
  }
  try {
    to=Class.forName("java.sql.Time");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_TIME;
    }
  }
 catch (  Exception e) {
  }
  try {
    to=Class.forName("java.sql.Date");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_DATE;
    }
  }
 catch (  Exception e) {
  }
  try {
    to=Class.forName("java.sql.Blob");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_BLOB;
    }
  }
 catch (  Exception e) {
  }
  try {
    to=Class.forName("java.sql.Clob");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_CLOB;
    }
  }
 catch (  Exception e) {
  }
  try {
    to=Class.forName("java.sql.Ref");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_REF;
    }
  }
 catch (  Exception e) {
  }
  try {
    to=Class.forName("java.sql.Struct");
    if (to.isAssignableFrom(c)) {
      return Types.STRUCT;
    }
  }
 catch (  Exception e) {
  }
  if (BinaryData.class.isAssignableFrom(c)) {
    return Types.SQL_VARBINARY;
  }
  try {
    to=Class.forName("java.lang.CharSequence");
    if (to.isAssignableFrom(c)) {
      return Types.SQL_VARCHAR;
    }
  }
 catch (  Exception e) {
  }
  if (Serializable.class.isAssignableFrom(c)) {
    return Types.OTHER;
  }
  return Types.JAVA_OBJECT;
}
