{
  int start=reversePosition(index);
  final ListIterator<T> forwardIterator=forwardList.listIterator(start);
  return new ListIterator<T>(){
    boolean canRemoveOrSet;
    @Override public void add(    T e){
      forwardIterator.add(e);
      forwardIterator.previous();
      canRemoveOrSet=false;
    }
    @Override public boolean hasNext(){
      return forwardIterator.hasPrevious();
    }
    @Override public boolean hasPrevious(){
      return forwardIterator.hasNext();
    }
    @Override public T next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      canRemoveOrSet=true;
      return forwardIterator.previous();
    }
    @Override public int nextIndex(){
      return reversePosition(forwardIterator.nextIndex());
    }
    @Override public T previous(){
      if (!hasPrevious()) {
        throw new NoSuchElementException();
      }
      canRemoveOrSet=true;
      return forwardIterator.next();
    }
    @Override public int previousIndex(){
      return nextIndex() - 1;
    }
    @Override public void remove(){
      checkRemove(canRemoveOrSet);
      forwardIterator.remove();
      canRemoveOrSet=false;
    }
    @Override public void set(    T e){
      checkState(canRemoveOrSet);
      forwardIterator.set(e);
    }
  }
;
}
