{
  int chunksRead=0;
  while (m_hasMoreChunks) {
    try {
      m_chunkReads.acquire();
    }
 catch (    InterruptedException e) {
      return;
    }
    try {
      ByteBuffer chunkLengthB=ByteBuffer.allocate(16);
      while (chunkLengthB.hasRemaining()) {
        final int read=m_saveFile.read(chunkLengthB);
        if (read == -1) {
          throw new EOFException();
        }
      }
      chunkLengthB.flip();
      final int nextChunkLength=chunkLengthB.getInt();
      final CRC32 partitionIdCRC=new CRC32();
      chunkLengthB.mark();
      final int nextChunkPartitionId=chunkLengthB.getInt();
      final int nextChunkPartitionIdCRC=chunkLengthB.getInt();
      chunkLengthB.reset();
      byte partitionIdBytes[]=new byte[4];
      chunkLengthB.get(partitionIdBytes);
      partitionIdCRC.update(partitionIdBytes);
      int generatedValue=(int)partitionIdCRC.getValue();
      if (generatedValue != nextChunkPartitionIdCRC) {
        chunkLengthB.position(0);
        for (        int partitionId : m_partitionIds) {
          m_corruptedPartitions.add(partitionId);
        }
        throw new IOException("Chunk partition ID CRC check failed. " + "This corrupts all partitions in this file");
      }
      chunkLengthB.position(chunkLengthB.position() + 4);
      final int nextChunkCRC=chunkLengthB.getInt();
      if (nextChunkLength < 0) {
        throw new IOException("Corrupted TableSaveFile chunk has negative chunk length");
      }
      if (nextChunkLength > DEFAULT_CHUNKSIZE) {
        throw new IOException("Corrupted TableSaveFile chunk has unreasonable length " + "> DEFAULT_CHUNKSIZE bytes");
      }
      Container c=m_buffers.poll();
      if (c == null) {
        final BBContainer originContainer=DBBPool.allocateDirect(DEFAULT_CHUNKSIZE);
        final ByteBuffer b=originContainer.b;
        final long pointer=org.voltdb.utils.DBBPool.getBufferAddress(b);
        c=new Container(b,pointer,originContainer);
      }
      boolean completedRead=false;
      int checksumStartPosition=0;
      int rowCount=0;
      try {
        c.b.clear();
        c.b.limit((nextChunkLength - 8) + m_tableHeader.capacity());
        m_tableHeader.position(0);
        c.b.put(m_tableHeader);
        c.b.position(c.b.position() + 4);
        checksumStartPosition=c.b.position();
        while (c.b.hasRemaining()) {
          final int read=m_saveFile.read(c.b);
          if (read == -1) {
            throw new EOFException();
          }
        }
        c.b.position(c.b.position() - 4);
        rowCount=c.b.getInt();
        c.b.position(checksumStartPosition);
        completedRead=true;
      }
  finally {
        if (!completedRead) {
          for (          int partitionId : m_partitionIds) {
            m_corruptedPartitions.add(partitionId);
          }
        }
      }
      final int calculatedCRC=DBBPool.getBufferCRC32(c.b,c.b.position(),c.b.remaining());
      if (calculatedCRC != nextChunkCRC) {
        m_corruptedPartitions.add(nextChunkPartitionId);
        if (m_continueOnCorruptedChunk) {
          c.discard();
          m_chunkReads.release();
          continue;
        }
 else {
          throw new IOException("CRC mismatch in saved table chunk");
        }
      }
      if (m_relevantPartitionIds != null) {
        if (!m_relevantPartitionIds.contains(nextChunkPartitionId)) {
          c.discard();
          m_chunkReads.release();
          continue;
        }
      }
      boolean success=false;
      try {
        c.b.limit(c.b.limit() - 4);
        c.b.position(checksumStartPosition - 4);
        c.b.putInt(rowCount);
        c.b.position(0);
        success=true;
      }
  finally {
        if (!success) {
          for (          int partitionId : m_partitionIds) {
            m_corruptedPartitions.add(partitionId);
          }
        }
      }
      ++chunksRead;
synchronized (TableSaveFile.this) {
        m_availableChunks.offer(c);
        TableSaveFile.this.notifyAll();
      }
    }
 catch (    EOFException eof) {
synchronized (TableSaveFile.this) {
        m_hasMoreChunks=false;
        TableSaveFile.this.notifyAll();
      }
    }
catch (    IOException e) {
synchronized (TableSaveFile.this) {
        m_hasMoreChunks=false;
        m_chunkReaderException=e;
        TableSaveFile.this.notifyAll();
      }
    }
catch (    BufferUnderflowException e) {
synchronized (TableSaveFile.this) {
        m_hasMoreChunks=false;
        m_chunkReaderException=new IOException(e);
        TableSaveFile.this.notifyAll();
      }
    }
catch (    BufferOverflowException e) {
synchronized (TableSaveFile.this) {
        m_hasMoreChunks=false;
        m_chunkReaderException=new IOException(e);
        TableSaveFile.this.notifyAll();
      }
    }
catch (    IndexOutOfBoundsException e) {
synchronized (TableSaveFile.this) {
        m_hasMoreChunks=false;
        m_chunkReaderException=new IOException(e);
        TableSaveFile.this.notifyAll();
      }
    }
  }
}
