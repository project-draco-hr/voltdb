{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=5;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if (curChar == 34)           jjCheckNAdd(1);
        break;
case 1:
      if ((0xfffffffbffffffffL & l) != 0L)       jjCheckNAddTwoStates(1,2);
    break;
case 2:
  if (curChar == 34 && kind > 31)   kind=31;
break;
case 4:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 32) kind=32;
jjstateSet[jjnewStateCnt++]=4;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 32) kind=32;
jjCheckNAdd(4);
break;
case 1:
jjAddStates(0,1);
break;
case 4:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 32) kind=32;
jjCheckNAdd(4);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 1:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(0,1);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=5 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
