{
  if (fragmentId == SysProcFragmentId.PF_updateCatalogPrecheckAndSync) {
    String[] tablesThatMustBeEmpty=(String[])params.getParam(0);
    String[] reasonsForEmptyTables=(String[])params.getParam(1);
    checkForNonEmptyTables(tablesThatMustBeEmpty,reasonsForEmptyTables,context);
    CatalogAndIds catalogStuff=null;
    try {
      catalogStuff=CatalogUtil.getCatalogFromZK(VoltDB.instance().getHostMessenger().getZK());
      InMemoryJarfile testjar=new InMemoryJarfile(catalogStuff.catalogBytes);
      JarLoader testjarloader=testjar.getLoader();
      for (      String classname : testjarloader.getClassNames()) {
        try {
          Class.forName(classname,true,testjarloader);
        }
 catch (        LinkageError|ClassNotFoundException e) {
          String cause=e.getMessage();
          if (cause == null && e.getCause() != null) {
            cause=e.getCause().getMessage();
          }
          String msg="Error loading class: " + classname + " from catalog: "+ e.getClass().getCanonicalName()+ ", "+ cause;
          log.warn(msg);
          throw new VoltAbortException(e);
        }
      }
    }
 catch (    Exception e) {
      Throwables.propagate(e);
    }
    return new DependencyPair(DEP_updateCatalogSync,new VoltTable(new ColumnInfo[]{new ColumnInfo("UNUSED",VoltType.BIGINT)}));
  }
 else   if (fragmentId == SysProcFragmentId.PF_updateCatalogPrecheckAndSyncAggregate) {
    return new DependencyPair(DEP_updateCatalogSyncAggregate,new VoltTable(new ColumnInfo[]{new ColumnInfo("UNUSED",VoltType.BIGINT)}));
  }
 else   if (fragmentId == SysProcFragmentId.PF_updateCatalog) {
    String catalogDiffCommands=(String)params.toArray()[0];
    String commands=Encoder.decodeBase64AndDecompress(catalogDiffCommands);
    int expectedCatalogVersion=(Integer)params.toArray()[1];
    boolean requiresSnapshotIsolation=((Byte)params.toArray()[2]) != 0;
    CatalogAndIds catalogStuff=null;
    try {
      catalogStuff=CatalogUtil.getCatalogFromZK(VoltDB.instance().getHostMessenger().getZK());
    }
 catch (    Exception e) {
      Throwables.propagate(e);
    }
    String replayInfo=m_runner.getTxnState().isForReplay() ? " (FOR REPLAY)" : "";
    if (context.getCatalogVersion() == expectedCatalogVersion) {
      @SuppressWarnings("deprecation") Pair<CatalogContext,CatalogSpecificPlanner> p=VoltDB.instance().catalogUpdate(commands,catalogStuff.catalogBytes,catalogStuff.getCatalogHash(),expectedCatalogVersion,getVoltPrivateRealTransactionIdDontUseMe(),getUniqueId(),catalogStuff.getDeploymentHash());
      context.updateCatalog(commands,p.getFirst(),p.getSecond(),requiresSnapshotIsolation);
      log.info(String.format("Site %s completed catalog update with catalog hash %s, deployment hash %s%s.",CoreUtils.hsIdToString(m_site.getCorrespondingSiteId()),Encoder.hexEncode(catalogStuff.getCatalogHash()).substring(0,10),Encoder.hexEncode(catalogStuff.getDeploymentHash()).substring(0,10),replayInfo));
    }
 else     if ((context.getCatalogVersion() == (expectedCatalogVersion + 1) && (Arrays.equals(context.getCatalogHash(),catalogStuff.getCatalogHash()) && Arrays.equals(context.getDeploymentHash(),catalogStuff.getDeploymentHash())))) {
      log.info(String.format("Site %s will NOT apply an assumed restarted and identical catalog update with catalog hash %s and deployment hash %s.",CoreUtils.hsIdToString(m_site.getCorrespondingSiteId()),Encoder.hexEncode(catalogStuff.getCatalogHash()),Encoder.hexEncode(catalogStuff.getDeploymentHash())));
    }
 else {
      VoltDB.crashLocalVoltDB("Invalid catalog update.  Expected version: " + expectedCatalogVersion + ", current version: "+ context.getCatalogVersion(),false,null);
    }
    VoltTable result=new VoltTable(VoltSystemProcedure.STATUS_SCHEMA);
    result.addRow(VoltSystemProcedure.STATUS_OK);
    return new DependencyPair(DEP_updateCatalog,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_updateCatalogAggregate) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_updateCatalog));
    return new DependencyPair(DEP_updateCatalogAggregate,result);
  }
 else {
    VoltDB.crashLocalVoltDB("Received unrecognized plan fragment id " + fragmentId + " in UpdateApplicationCatalog",false,null);
  }
  throw new RuntimeException("Should not reach this code");
}
