{
  assert(tablesThatMustBeEmpty != null);
  if (tablesThatMustBeEmpty.length == 0) {
    return;
  }
  assert(reasonsForEmptyTables != null);
  assert(reasonsForEmptyTables.length == tablesThatMustBeEmpty.length);
  CatalogMap<Table> tables=context.getDatabase().getTables();
  int[] tableIds=new int[tablesThatMustBeEmpty.length];
  int i=0;
  for (  String tableName : tablesThatMustBeEmpty) {
    Table table=tables.get(tableName);
    if (table == null) {
      String msg=String.format("@UpdateApplicationCatalog was checking to see if table %s was empty, " + "presumably as part of a schema change, and it failed to find the table " + "in the current catalog context.",tableName);
      throw new SpecifiedException(ClientResponse.UNEXPECTED_FAILURE,msg);
    }
    tableIds[i++]=table.getRelativeIndex();
  }
  final VoltTable[] s1=context.getSiteProcedureConnection().getStats(StatsSelector.TABLE,tableIds,false,getTransactionTime().getTime());
  if ((s1 == null) || (s1.length == 0)) {
    String tableNames=StringUtils.join(tablesThatMustBeEmpty,", ");
    String msg=String.format("@UpdateApplicationCatalog was checking to see if tables (%s) were empty ," + "presumably as part of a schema change, but failed to get the row counts " + "from the native storage engine.",tableNames);
    throw new SpecifiedException(ClientResponse.UNEXPECTED_FAILURE,msg);
  }
  VoltTable stats=s1[0];
  SortedSet<String> nonEmptyTables=new TreeSet<String>();
  while (stats.advanceRow()) {
    long tupleCount=stats.getLong("TUPLE_COUNT");
    long tupleAllocatedMemory=stats.getLong("TUPLE_ALLOCATED_MEMORY");
    String tableName=stats.getString("TABLE_NAME");
    if (tupleCount > 0 && !"StreamedTable".equals(stats.getString("TABLE_TYPE"))) {
      nonEmptyTables.add(tableName);
    }
 else     if (tupleAllocatedMemory > 0) {
      nonEmptyTables.add(tableName);
    }
  }
  if (!nonEmptyTables.isEmpty()) {
    String msg="Unable to make requested schema change:\n";
    for (i=0; i < tablesThatMustBeEmpty.length; ++i) {
      if (nonEmptyTables.contains(tablesThatMustBeEmpty[i])) {
        msg+=reasonsForEmptyTables[i] + "\n";
      }
    }
    throw new SpecifiedException(ClientResponse.GRACEFUL_FAILURE,msg);
  }
}
