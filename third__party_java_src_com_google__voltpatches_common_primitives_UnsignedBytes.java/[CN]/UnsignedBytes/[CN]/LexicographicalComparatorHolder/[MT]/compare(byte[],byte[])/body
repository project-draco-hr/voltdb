{
  int minLength=Math.min(left.length,right.length);
  int minWords=minLength / Longs.BYTES;
  for (int i=0; i < minWords * Longs.BYTES; i+=Longs.BYTES) {
    long lw=theUnsafe.getLong(left,BYTE_ARRAY_BASE_OFFSET + (long)i);
    long rw=theUnsafe.getLong(right,BYTE_ARRAY_BASE_OFFSET + (long)i);
    if (lw != rw) {
      if (BIG_ENDIAN) {
        return UnsignedLongs.compare(lw,rw);
      }
      int n=Long.numberOfTrailingZeros(lw ^ rw) & ~0x7;
      return (int)(((lw >>> n) & UNSIGNED_MASK) - ((rw >>> n) & UNSIGNED_MASK));
    }
  }
  for (int i=minWords * Longs.BYTES; i < minLength; i++) {
    int result=UnsignedBytes.compare(left[i],right[i]);
    if (result != 0) {
      return result;
    }
  }
  return left.length - right.length;
}
