def get_tables():
    print ('Reading %s...' % config_path)
    tables = []
    et = ElementTree()
    try:
        xmlschema = et.parse(config_path).find('schema')
        if (xmlschema is None):
            raise Fatal('Missing <schema> element')
        xmltables = xmlschema.findall('table')
        if ((xmltables is None) or (len(xmltables) == 0)):
            raise Fatal('No <table> elements found')
        for xmltable in xmltables:
            name = xmltable.attrib['name']
            if (not name):
                raise Fatal('Table name is required')
            prefix = xmltable.attrib['prefix']
            if (not prefix):
                raise Fatal('Column prefix is required')
            nvariations = int(xmltable.attrib.get('variations', 1))
            if (nvariations < 1):
                raise Fatal(('Bad variations value: %d' % nvariations))
            ncolumns = int(xmltable.attrib['columns'])
            if (ncolumns < 1):
                raise Fatal(('Bad columns value: %d' % ncolumns))
            try:
                ipartcol = int(xmltable.attrib['partitioncolumn'])
                if ((ipartcol < 0) or (ipartcol >= ncolumns)):
                    raise Fatal(('Bad partition column index value: %d' % ipartcol))
            except KeyError as e:
                ipartcol = None
            try:
                ipkcol = int(xmltable.attrib['primarykey'])
                if ((ipkcol < 0) or (ipkcol >= ncolumns)):
                    raise Fatal(('Bad primary key column index value: %d' % ipkcol))
            except KeyError as e:
                ipkcol = None
            tables.append(create_table(name, prefix, nvariations, ncolumns, ipartcol, ipkcol))
    except (OSError, IOError) as e:
        raise Fatal(('Failed to parse %s' % config_path), e)
    except KeyError as e:
        raise Fatal('Missing table attribute', e)
    except ValueError as e:
        raise Fatal('Bad table attribute value', e)
    return tables
