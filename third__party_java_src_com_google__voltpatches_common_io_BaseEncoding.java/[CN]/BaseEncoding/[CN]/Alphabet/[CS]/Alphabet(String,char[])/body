{
  this.name=checkNotNull(name);
  this.chars=checkNotNull(chars);
  try {
    this.bitsPerChar=log2(chars.length,UNNECESSARY);
  }
 catch (  ArithmeticException e) {
    throw new IllegalArgumentException("Illegal alphabet length " + chars.length,e);
  }
  int gcd=Math.min(8,Integer.lowestOneBit(bitsPerChar));
  this.charsPerChunk=8 / gcd;
  this.bytesPerChunk=bitsPerChar / gcd;
  this.mask=chars.length - 1;
  byte[] decodabet=new byte[Ascii.MAX + 1];
  Arrays.fill(decodabet,(byte)-1);
  for (int i=0; i < chars.length; i++) {
    char c=chars[i];
    checkArgument(CharMatcher.ASCII.matches(c),"Non-ASCII character: %s",c);
    checkArgument(decodabet[c] == -1,"Duplicate character: %s",c);
    decodabet[c]=(byte)i;
  }
  this.decodabet=decodabet;
  boolean[] validPadding=new boolean[charsPerChunk];
  for (int i=0; i < bytesPerChunk; i++) {
    validPadding[divide(i * 8,bitsPerChar,CEILING)]=true;
  }
  this.validPadding=validPadding;
}
