{
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Setup & Initialization");
  System.out.println(HORIZONTAL_RULE);
  System.out.printf("Reading configuration file '%s'...\n",configPath);
  List<QueryTestBase> tests=BenchmarkConfiguration.configureTests(configPath,this.cliConfig.test);
  connect(this.cliConfig.servers);
  System.out.print(HORIZONTAL_RULE);
  System.out.println("Starting Benchmark");
  System.out.println(HORIZONTAL_RULE);
  QueryTracer tracer=new QueryTracer(cliConfig.querytracefile);
  if (this.cliConfig.warmup > 0) {
    System.out.println("Warming up...");
    CallProcedureCallback cb1=new CallProcedureCallback(null);
    for (    String query : new QueryGenerator(tests,this.cliConfig.warmup)) {
      this.client.callProcedure(cb1,"@AdHoc",query);
      if (cb1.errorStatus != ClientResponse.SUCCESS) {
        tracer.traceBad(query,cb1.errorStatus,cb1.errorString);
      }
    }
  }
  fullStatsContext.fetchAndResetBaseline();
  periodicStatsContext.fetchAndResetBaseline();
  this.benchmarkStartTS=System.currentTimeMillis();
  long queryElapsedMS=0;
  schedulePeriodicStats();
  System.out.printf("\nRunning '%s' benchmark...\n",this.cliConfig.test);
  CallProcedureCallback cb2=new CallProcedureCallback(this.counters);
  for (  String query : new QueryGenerator(tests,this.cliConfig.duration)) {
    long startTS=System.currentTimeMillis();
    this.client.callProcedure(cb2,"@AdHoc",query);
    if (cb2.errorStatus != ClientResponse.SUCCESS) {
      tracer.traceBad(query,cb2.errorStatus,cb2.errorString);
      this.counters.queriesFailed++;
    }
 else {
      tracer.traceGood(query);
    }
    queryElapsedMS+=(System.currentTimeMillis() - startTS);
    this.counters.queriesGenerated++;
  }
  System.out.printf("\n%d queries generated\n",this.counters.queriesGenerated);
  System.out.printf("%d queries processed\n",this.counters.queriesProcessed);
  System.out.printf("%d queries to drain\n\n",this.counters.queriesGenerated - this.counters.queriesProcessed);
  printStatistics();
  System.out.println("");
  long totalElapsedMS=System.currentTimeMillis() - this.benchmarkStartTS;
  this.timer.cancel();
  this.client.drain();
  printResults(totalElapsedMS,queryElapsedMS);
  this.client.close();
}
