{
  long numDeletes=(long)Long.valueOf(args[0]);
  String serverList=args[1];
  int outputToFile=(int)Integer.valueOf(args[2]);
  String outputFileName="log-ClientDelete.log";
  FileOutputStream foStatus;
  System.out.printf("Executing %,d deletes per transaction\n",numDeletes);
  if (outputToFile == 1) {
    System.out.printf("Outputting to file %s\n",outputFileName);
  }
 else {
    System.out.printf("File output disabled.\n");
  }
  int num_partitions=0;
  int intCounter;
  long longCounter;
  final org.voltdb.client.Client voltclient=ClientFactory.createClient();
  String[] voltServers=serverList.split(",");
  for (  String thisServer : voltServers) {
    try {
      System.out.printf("Connecting to server: %s\n",thisServer);
      voltclient.createConnection(thisServer,"program","none");
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
  long startTime=System.currentTimeMillis();
  try {
    VoltTable vtPartitionInfo[]=voltclient.callProcedure("@Statistics","partitioncount",0l);
    num_partitions=(int)vtPartitionInfo[0].fetchRow(0).getLong(0);
    System.out.println("System is running with " + num_partitions + " partition(s).");
  }
 catch (  ProcCallException e) {
    System.err.println("ProcCallException:");
    e.printStackTrace();
  }
catch (  NoConnectionsException e) {
    System.err.println("NoConnectionsException:");
    e.printStackTrace();
  }
  boolean foundRows=true;
  while (foundRows) {
    foundRows=false;
    for (longCounter=0; longCounter < num_partitions; longCounter++) {
      try {
        long callTimeBegin=System.currentTimeMillis();
        VoltTable vtDeleteVisits[]=voltclient.callProcedure("DeleteVisits",longCounter,numDeletes,callTimeBegin);
        int rowCount=(int)vtDeleteVisits[0].fetchRow(0).getLong(0);
        long callTimeEnd=System.currentTimeMillis();
        String currentDate=new Date().toString();
        System.out.printf("[%s] Ran delete on partition %d : deleted %,d row(s) in %,d milliseconds\n",currentDate,longCounter,rowCount,(callTimeEnd - callTimeBegin));
        if (outputToFile == 1) {
          try {
            foStatus=new FileOutputStream(outputFileName,true);
            new PrintStream(foStatus).printf("[%s] Ran delete on partition %d : deleted %,d row(s) in %,d milliseconds\n",currentDate,longCounter,rowCount,(callTimeEnd - callTimeBegin));
            foStatus.close();
          }
 catch (          IOException e) {
            e.printStackTrace();
            System.exit(-1);
          }
        }
        if (rowCount > 0) {
          foundRows=true;
        }
      }
 catch (      ProcCallException e) {
        System.err.println("ProcCallException:");
        e.printStackTrace();
      }
catch (      NoConnectionsException e) {
        System.err.println("NoConnectionsException:");
        e.printStackTrace();
      }
    }
  }
  String currentDate2=new Date().toString();
  System.out.printf("[%s] Finished deletion job, shutting down.\n",currentDate2);
  if (outputToFile == 1) {
    try {
      foStatus=new FileOutputStream(outputFileName,true);
      new PrintStream(foStatus).printf("[%s] Finished deletion job, shutting down.\n",currentDate2);
      foStatus.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
  try {
    voltclient.drain();
  }
 catch (  NoConnectionsException e) {
    e.printStackTrace();
    System.exit(-1);
  }
  try {
    voltclient.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(-1);
  }
}
