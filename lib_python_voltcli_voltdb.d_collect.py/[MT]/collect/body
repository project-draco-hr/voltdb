@VOLT.Command(description='Collect logs on the current node for problem analysis.', options=(VOLT.StringOption(None, '--prefix', 'prefix', 'file name prefix for uniquely identifying collection', default='voltdb_logs'), VOLT.StringOption(None, '--upload', 'host', 'upload resulting collection to HOST via SFTP', default=''), VOLT.StringOption(None, '--username', 'username', 'user name for SFTP upload', default=''), VOLT.StringOption(None, '--password', 'password', 'password for SFTP upload', default=''), VOLT.BooleanOption(None, '--no-prompt', 'noprompt', 'automatically upload collection (without user prompt)', default=False), VOLT.BooleanOption(None, '--dry-run', 'dryrun', 'list the log files without collecting them', default=False), VOLT.BooleanOption(None, '--skip-heap-dump', 'skipheapdump', 'exclude heap dump file from collection', default=False)), arguments=VOLT.PathArgument('voltdbroot', 'the voltdbroot path', absolute=True))
def collect(runner):
    runner.args.extend([runner.opts.voltdbroot, runner.opts.prefix, runner.opts.host, runner.opts.username, runner.opts.password, runner.opts.noprompt, runner.opts.dryrun, runner.opts.skipheapdump])
    runner.java_execute('org.voltdb.utils.Collector', None, *runner.args)
