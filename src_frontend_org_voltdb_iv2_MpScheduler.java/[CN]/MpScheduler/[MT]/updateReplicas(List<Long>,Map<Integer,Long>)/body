{
  m_iv2Masters.clear();
  m_iv2Masters.addAll(replicas);
  m_partitionMasters.clear();
  m_partitionMasters.putAll(partitionMasters);
  if (!m_isLeader) {
    return;
  }
  List<Long> doneCounters=new LinkedList<Long>();
  for (  Entry<Long,DuplicateCounter> entry : m_duplicateCounters.entrySet()) {
    DuplicateCounter counter=entry.getValue();
    int result=counter.updateReplicas(m_iv2Masters);
    if (result == DuplicateCounter.DONE) {
      doneCounters.add(entry.getKey());
    }
  }
  Collections.sort(doneCounters);
  for (  Long key : doneCounters) {
    DuplicateCounter counter=m_duplicateCounters.remove(key);
    VoltMessage resp=counter.getLastResponse();
    if (resp != null && resp instanceof InitiateResponseMessage) {
      InitiateResponseMessage msg=(InitiateResponseMessage)resp;
      if (msg.shouldCommit()) {
        m_repairLogTruncationHandle=m_repairLogAwaitingCommit;
        m_repairLogAwaitingCommit=msg.getTxnId();
      }
      m_outstandingTxns.remove(msg.getTxnId());
      m_mailbox.send(counter.m_destinationId,resp);
    }
 else {
      hostLog.warn("TXN " + counter.getTxnId() + " lost all replicas and "+ "had no responses.  This should be impossible?");
    }
  }
  MpRepairTask repairTask=new MpRepairTask((InitiatorMailbox)m_mailbox,replicas);
  m_pendingTasks.repair(repairTask,replicas,partitionMasters);
}
