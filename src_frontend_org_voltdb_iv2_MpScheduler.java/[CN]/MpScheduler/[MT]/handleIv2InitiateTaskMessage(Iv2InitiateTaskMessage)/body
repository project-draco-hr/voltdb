{
  final String procedureName=message.getStoredProcedureName();
  long mpTxnId;
  long timestamp;
  if (message.isForReplay()) {
    mpTxnId=message.getTxnId();
    timestamp=message.getUniqueId();
    setMaxSeenTxnId(mpTxnId);
    m_uniqueIdGenerator.updateMostRecentlyGeneratedUniqueId(timestamp);
  }
 else {
    TxnEgo ego=advanceTxnEgo();
    mpTxnId=ego.getTxnId();
    timestamp=m_uniqueIdGenerator.getNextUniqueId();
  }
  Iv2Trace.logIv2InitiateTaskMessage(message,m_mailbox.getHSId(),mpTxnId,Long.MIN_VALUE);
  final Config sysprocConfig=SystemProcedureCatalog.listing.get(procedureName);
  if (sysprocConfig != null && sysprocConfig.getEverysite()) {
    final Long localId=m_mailbox.getHSId();
    Iv2InitiateTaskMessage sp=new Iv2InitiateTaskMessage(localId,message.getCoordinatorHSId(),m_repairLogTruncationHandle,mpTxnId,timestamp,message.isReadOnly(),true,message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId(),message.isForReplay());
    DuplicateCounter counter=new DuplicateCounter(message.getInitiatorHSId(),mpTxnId,m_iv2Masters);
    m_duplicateCounters.put(mpTxnId,counter);
    EveryPartitionTask eptask=new EveryPartitionTask(m_mailbox,m_pendingTasks,sp,m_iv2Masters);
    m_pendingTasks.offer(eptask);
    return;
  }
  Iv2InitiateTaskMessage mp=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),m_repairLogTruncationHandle,mpTxnId,timestamp,message.isReadOnly(),message.isSinglePartition(),message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId(),message.isForReplay());
  final MpProcedureTask task=new MpProcedureTask(m_mailbox,procedureName,m_pendingTasks,mp,m_iv2Masters,m_buddyHSId,false);
  m_outstandingTxns.put(task.m_txn.txnId,task.m_txn);
  m_pendingTasks.offer(task);
}
