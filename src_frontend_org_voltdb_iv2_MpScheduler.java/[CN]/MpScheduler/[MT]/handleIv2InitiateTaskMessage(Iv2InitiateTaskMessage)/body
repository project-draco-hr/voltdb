{
  final String procedureName=message.getStoredProcedureName();
  long mpTxnId;
  long timestamp=Long.MIN_VALUE;
  if (message.isForReplay()) {
    timestamp=message.getUniqueId();
    m_uniqueIdGenerator.updateMostRecentlyGeneratedUniqueId(timestamp);
  }
 else   if (message.isForDRv1()) {
    timestamp=message.getStoredProcedureInvocation().getOriginalUniqueId();
    if (UniqueIdGenerator.getPartitionIdFromUniqueId(timestamp) == m_partitionId) {
      m_uniqueIdGenerator.updateMostRecentlyGeneratedUniqueId(timestamp);
    }
  }
 else {
    timestamp=m_uniqueIdGenerator.getNextUniqueId();
  }
  TxnEgo ego=advanceTxnEgo();
  mpTxnId=ego.getTxnId();
  Iv2Trace.logIv2InitiateTaskMessage(message,m_mailbox.getHSId(),mpTxnId,Long.MIN_VALUE);
  final Config sysprocConfig=SystemProcedureCatalog.listing.get(procedureName);
  if (sysprocConfig != null && sysprocConfig.getEverysite()) {
    final Long localId=m_mailbox.getHSId();
    Iv2InitiateTaskMessage sp=new Iv2InitiateTaskMessage(localId,message.getCoordinatorHSId(),m_repairLogTruncationHandle,mpTxnId,timestamp,message.isReadOnly(),true,message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId(),message.isForReplay());
    DuplicateCounter counter=new DuplicateCounter(message.getInitiatorHSId(),mpTxnId,m_iv2Masters,message);
    safeAddToDuplicateCounterMap(mpTxnId,counter);
    EveryPartitionTask eptask=new EveryPartitionTask(m_mailbox,m_pendingTasks,sp,m_iv2Masters);
    m_pendingTasks.offer(eptask);
    return;
  }
  Iv2InitiateTaskMessage mp=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),m_repairLogTruncationHandle,mpTxnId,timestamp,message.isReadOnly(),message.isSinglePartition(),message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId(),message.isForReplay());
  MpProcedureTask task=null;
  if (isNpTxn(message) && NpProcedureTaskConstructor != null) {
    Set<Integer> involvedPartitions=getBalancePartitions(message);
    if (involvedPartitions != null) {
      HashMap<Integer,Long> involvedPartitionMasters=Maps.newHashMap(m_partitionMasters);
      involvedPartitionMasters.keySet().retainAll(involvedPartitions);
      task=instantiateNpProcedureTask(m_mailbox,procedureName,m_pendingTasks,mp,involvedPartitionMasters,m_buddyHSIds.get(m_nextBuddy),false);
    }
  }
  if (task == null) {
    task=new MpProcedureTask(m_mailbox,procedureName,m_pendingTasks,mp,m_iv2Masters,m_partitionMasters,m_buddyHSIds.get(m_nextBuddy),false);
  }
  m_nextBuddy=(m_nextBuddy++) % m_buddyHSIds.size();
  m_outstandingTxns.put(task.m_txnState.txnId,task.m_txnState);
  m_pendingTasks.offer(task);
}
