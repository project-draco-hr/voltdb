{
  final String procedureName=message.getStoredProcedureName();
  final ProcedureRunner runner=m_loadedProcs.getProcByName(procedureName);
  final long mpTxnId=m_txnId.incrementAndGet();
  Iv2Trace.logIv2InitiateTaskMessage(message,m_mailbox.getHSId(),mpTxnId,Long.MIN_VALUE);
  if (runner.isEverySite()) {
    final Long localId=m_mailbox.getHSId();
    Iv2InitiateTaskMessage sp=new Iv2InitiateTaskMessage(localId,message.getCoordinatorHSId(),m_repairLogTruncationHandle,mpTxnId,message.isReadOnly(),true,message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId());
    DuplicateCounter counter=new DuplicateCounter(message.getInitiatorHSId(),mpTxnId,m_iv2Masters);
    m_duplicateCounters.put(mpTxnId,counter);
    EveryPartitionTask eptask=new EveryPartitionTask(m_mailbox,mpTxnId,m_pendingTasks,sp,m_iv2Masters);
    m_pendingTasks.offer(eptask);
    return;
  }
  Iv2InitiateTaskMessage mp=new Iv2InitiateTaskMessage(message.getInitiatorHSId(),message.getCoordinatorHSId(),m_repairLogTruncationHandle,mpTxnId,message.isReadOnly(),message.isSinglePartition(),message.getStoredProcedureInvocation(),message.getClientInterfaceHandle(),message.getConnectionId());
  final MpProcedureTask task=new MpProcedureTask(m_mailbox,m_loadedProcs.getProcByName(procedureName),mpTxnId,m_pendingTasks,mp,m_iv2Masters,m_buddyHSId,m_drGateway);
  m_outstandingTxns.put(task.m_txn.txnId,task.m_txn);
  m_pendingTasks.offer(task);
}
