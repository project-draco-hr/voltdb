{
  final String procedureName=message.getStoredProcedureName();
  final ProcedureRunner runner=m_loadedProcs.getProcByName(procedureName);
  m_clerk=VoltDB.instance().getSiteTracker();
  final List<Long> partitionInitiators=m_clerk.getHSIdsForPartitionInitiators();
  if (runner.isSystemProcedure()) {
    SystemProcedureCatalog.Config cfg=SystemProcedureCatalog.listing.get(procedureName);
    if (cfg.everySite) {
      final Long localId=m_mailbox.getHSId();
      final long mpTxnId=m_txnId.incrementAndGet();
      Iv2InitiateTaskMessage sp=new Iv2InitiateTaskMessage(localId,message.getCoordinatorHSId(),mpTxnId,message.isReadOnly(),true,message.getStoredProcedureInvocation(),message.getClientInterfaceHandle());
      DuplicateCounter counter=new DuplicateCounter(message.getInitiatorHSId(),partitionInitiators.size(),mpTxnId);
      m_duplicateCounters.put(mpTxnId,counter);
      EveryPartitionTask eptask=new EveryPartitionTask(m_mailbox,mpTxnId,m_pendingTasks,sp,partitionInitiators);
      m_pendingTasks.offer(eptask);
      return;
    }
  }
  long buddy_hsid=m_clerk.getBuddySiteForMPI(m_mailbox.getHSId());
  final MpProcedureTask task=new MpProcedureTask(m_mailbox,m_loadedProcs.getProcByName(procedureName),m_txnId.incrementAndGet(),m_pendingTasks,message,partitionInitiators,buddy_hsid);
  m_outstandingTxns.put(task.m_txn.txnId,task.m_txn);
  m_pendingTasks.offer(task);
}
