{
  if (params[0] == null) {
    throw new Exception("@SnapshotSave JSON blob is null");
  }
  if (!(params[0] instanceof String)) {
    throw new Exception("@SnapshotSave JSON blob is a " + params[0].getClass().getSimpleName() + " and should be a java.lang.String");
  }
  final JSONObject jsObj=new JSONObject((String)params[0]);
  String path=jsObj.getString("uripath");
  if (path.isEmpty()) {
    throw new Exception("uripath cannot be empty");
  }
  URI pathURI=new URI(path);
  String pathURIScheme=pathURI.getScheme();
  if (pathURIScheme == null) {
    throw new Exception("URI scheme cannot be null");
  }
  if (!pathURIScheme.equals("file")) {
    throw new Exception("Unsupported URI scheme " + pathURIScheme + " if this is a file path then you must prepend file://");
  }
  path=pathURI.getPath();
  String nonce=jsObj.getString("nonce");
  if (nonce.isEmpty()) {
    throw new Exception("nonce cannot be empty");
  }
  Object blockingObj=false;
  if (jsObj.has("block")) {
    blockingObj=jsObj.get("block");
  }
  boolean blocking;
  if (blockingObj instanceof Number) {
    blocking=((Number)blockingObj).byteValue() == 0 ? false : true;
  }
 else   if (blockingObj instanceof Boolean) {
    blocking=(Boolean)blockingObj;
  }
 else   if (blockingObj instanceof String) {
    blocking=Boolean.valueOf((String)blockingObj);
  }
 else {
    throw new Exception(blockingObj.getClass().getName() + " is not supported as " + " type for the block parameter");
  }
  SnapshotFormat format=SnapshotFormat.NATIVE;
  String formatString=jsObj.optString("format",SnapshotFormat.NATIVE.toString());
  try {
    format=SnapshotFormat.getEnumIgnoreCase(formatString);
  }
 catch (  IllegalArgumentException argException) {
    throw new Exception("@SnapshotSave format param is a " + format + " and should be one of [\"native\" | \"csv\"]");
  }
  return new SnapshotInitiationInfo(path,nonce,blocking,format,(String)params[0]);
}
