{
  if (event.getType() == EventType.NodeCreated) {
    byte data[]=m_zk.getData(event.getPath(),false,null);
    String jsonString=new String(data,"UTF-8");
    final JSONObject jsObj=new JSONObject(jsonString);
    final String requestId=jsObj.getString("requestId");
    jsObj.remove("requestId");
    final long handle=m_nextCallbackHandle++;
    m_procedureCallbacks.put(handle,new ProcedureCallback(){
      @Override public void clientCallback(      ClientResponse clientResponse) throws Exception {
        if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
          ClientResponseImpl rimpl=(ClientResponseImpl)clientResponse;
          ByteBuffer buf=ByteBuffer.allocate(rimpl.getSerializedSize());
          m_zk.create(VoltZK.user_snapshot_response + requestId,rimpl.flattenToBuffer(buf).array(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
          userSnapshotRequestExistenceCheck();
          return;
        }
        if (isSnapshotInProgressResponse(clientResponse)) {
          scheduleSnapshotForLater(jsObj.toString(4),requestId,true);
        }
 else {
          ClientResponseImpl rimpl=(ClientResponseImpl)clientResponse;
          ByteBuffer buf=ByteBuffer.allocate(rimpl.getSerializedSize());
          m_zk.create(VoltZK.user_snapshot_response + requestId,rimpl.flattenToBuffer(buf).array(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
          userSnapshotRequestExistenceCheck();
          return;
        }
      }
    }
);
    m_initiator.initiateSnapshotDaemonWork("@SnapshotSave",handle,new Object[]{jsObj.toString(4)});
    return;
  }
}
