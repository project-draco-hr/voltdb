{
  if (event.getType() == EventType.NodeCreated) {
    byte data[]=m_zk.getData(event.getPath(),false,null);
    String jsonString=new String(data,"UTF-8");
    final JSONObject jsObj=new JSONObject(jsonString);
    final String requestId=jsObj.getString("requestId");
    final boolean blocking=jsObj.getBoolean("block");
    jsObj.remove("requestId");
    jsObj.put("perPartitionTxnIds",retrievePerPartitionTransactionIds());
    final long handle=m_nextCallbackHandle++;
    m_procedureCallbacks.put(handle,new ProcedureCallback(){
      @Override public void clientCallback(      ClientResponse clientResponse){
        m_lastInitiationTs=null;
        try {
          if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
            ClientResponseImpl rimpl=(ClientResponseImpl)clientResponse;
            saveResponseToZKAndReset(requestId,rimpl);
            return;
          }
          if (isSnapshotInProgressResponse(clientResponse)) {
            scheduleSnapshotForLater(jsObj.toString(4),requestId,true);
          }
 else {
            ClientResponseImpl rimpl=(ClientResponseImpl)clientResponse;
            saveResponseToZKAndReset(requestId,rimpl);
            return;
          }
        }
 catch (        Exception e) {
          SNAP_LOG.error("Error processing user snapshot request",e);
          try {
            userSnapshotRequestExistenceCheck(true);
          }
 catch (          Exception e2) {
            VoltDB.crashLocalVoltDB("Error resetting watch for user snapshots",true,e2);
          }
        }
      }
    }
);
    initiateSnapshotSave(handle,new Object[]{jsObj.toString(4)},blocking);
    return;
  }
}
