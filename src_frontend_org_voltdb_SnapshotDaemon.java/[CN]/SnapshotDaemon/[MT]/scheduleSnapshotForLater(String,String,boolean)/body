{
  if (isFirstAttempt) {
    hostLog.info("A user snapshot request could not be immediately fulfilled and will be reattempted later");
    VoltTable result=SnapshotSave.constructNodeResultsTable();
    result.addRow(-1,org.voltdb.client.ConnectionUtil.getHostnameOrAddress(),"","SUCCESS","SNAPSHOT REQUEST QUEUED");
    final ClientResponseImpl queuedResponse=new ClientResponseImpl(ClientResponseImpl.SUCCESS,new VoltTable[]{result},"Snapshot request could not be fulfilled because a snapshot " + "is in progress. It was queued for execution",0);
    FastSerializer fs=new FastSerializer();
    fs.writeObject(queuedResponse);
    m_zk.create("/user_snapshot_response_" + requestId,fs.getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  }
  final Runnable r=new Runnable(){
    @Override public void run(){
      try {
        final long handle=m_nextCallbackHandle++;
        m_procedureCallbacks.put(handle,new ProcedureCallback(){
          @Override public void clientCallback(          ClientResponse clientResponse) throws Exception {
            if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
              hostLog.error(clientResponse.getStatusString());
              userSnapshotRequestExistenceCheck();
            }
            VoltTable results[]=clientResponse.getResults();
            if (results == null || results.length == 0 || results[0].getRowCount() < 1) {
              hostLog.error("Queued user snapshot request reattempt received an unexpected response" + " and will not be reattempted");
              userSnapshotRequestExistenceCheck();
            }
            VoltTable result=results[0];
            boolean snapshotInProgress=false;
            boolean haveFailure=false;
            while (result.advanceRow()) {
              if (result.getString("RESULT").equals("FAILURE")) {
                if (result.getString("ERR_MSG").equals("SNAPSHOT IN PROGRESS")) {
                  snapshotInProgress=true;
                }
 else {
                  haveFailure=true;
                }
              }
            }
            if (snapshotInProgress) {
              hostLog.info("Queued user snapshot was reattempted, but a snapshot was " + " still in progress. It will be reattempted.");
              scheduleSnapshotForLater(requestObj,null,false);
            }
 else             if (haveFailure) {
              hostLog.info("Queued user snapshot was attempted, but there was a failure.");
              userSnapshotRequestExistenceCheck();
              result.resetRowPosition();
              hostLog.info(result);
            }
 else {
              userSnapshotRequestExistenceCheck();
            }
          }
        }
);
        m_initiator.initiateSnapshotDaemonWork("@SnapshotSave",handle,new Object[]{requestObj});
      }
 catch (      Exception e) {
      }
    }
  }
;
  m_es.schedule(r,m_userSnapshotRetryInterval,TimeUnit.SECONDS);
}
