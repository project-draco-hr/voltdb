{
  m_lastKnownSchedule=schedule;
  if (schedule.getEnabled()) {
    m_frequency=schedule.getFrequencyvalue();
    m_retain=schedule.getRetain();
    m_path=schedule.getPath();
    m_prefix=schedule.getPrefix();
    m_prefixAndSeparator=m_prefix + "_";
    final String frequencyUnitString=schedule.getFrequencyunit().toLowerCase();
    assert(frequencyUnitString.length() == 1);
    final char frequencyUnit=frequencyUnitString.charAt(0);
switch (frequencyUnit) {
case 's':
      m_frequencyUnit=TimeUnit.SECONDS;
    break;
case 'm':
  m_frequencyUnit=TimeUnit.MINUTES;
break;
case 'h':
m_frequencyUnit=TimeUnit.HOURS;
break;
default :
throw new RuntimeException("Frequency unit " + frequencyUnitString + ""+ " in snapshot schedule is not one of d,m,h");
}
m_frequencyInMillis=TimeUnit.MILLISECONDS.convert(m_frequency,m_frequencyUnit);
m_nextSnapshotTime=System.currentTimeMillis() + m_frequencyInMillis;
}
if (m_isAutoSnapshotLeader) {
if (schedule.getEnabled()) {
if (m_autoSnapshotTask == null) {
m_autoSnapshotTask=m_es.scheduleAtFixedRate(new Runnable(){
@Override public void run(){
try {
doPeriodicWork(System.currentTimeMillis());
}
 catch (Exception e) {
SNAP_LOG.warn("Error doing periodic snapshot management work",e);
}
}
}
,0,m_periodicWorkInterval,TimeUnit.MILLISECONDS);
}
}
 else {
if (m_autoSnapshotTask != null) {
m_autoSnapshotTask.cancel(false);
m_autoSnapshotTask=null;
}
}
}
}
