{
  Object params[]=invocation.getParams().toArray();
  if (params.length != 3 && params.length != 1) {
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave requires 3 parameters or alternatively a single JSON blob. " + "Path, nonce, and blocking",invocation.clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
  if (params[0] == null) {
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave path is null",invocation.clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
  if (params.length == 3) {
    if (params[1] == null) {
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave nonce is null",invocation.clientHandle);
      c.writeStream().enqueue(errorResponse);
      return;
    }
    if (params[2] == null) {
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave blocking is null",invocation.clientHandle);
      c.writeStream().enqueue(errorResponse);
      return;
    }
  }
  if (!(params[0] instanceof String)) {
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave path param is a " + params[0].getClass().getSimpleName() + " and should be a java.lang.String",invocation.clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
  if (params.length == 3) {
    if (!(params[1] instanceof String)) {
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave nonce param is a " + params[0].getClass().getSimpleName() + " and should be a java.lang.String",invocation.clientHandle);
      c.writeStream().enqueue(errorResponse);
      return;
    }
    if (!(params[2] instanceof Byte || params[2] instanceof Short || params[2] instanceof Integer|| params[2] instanceof Long)) {
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.GRACEFUL_FAILURE,new VoltTable[0],"@SnapshotSave blocking param is a " + params[0].getClass().getSimpleName() + " and should be a java.lang.[Byte|Short|Integer|Long]",invocation.clientHandle);
      c.writeStream().enqueue(errorResponse);
      return;
    }
  }
  boolean requestExists=false;
  try {
    String path;
    String nonce;
    byte blocking;
    if (params.length == 1) {
      JSONObject jsObj=new JSONObject((String)params[0]);
      path=jsObj.getString("path");
      nonce=jsObj.getString("nonce");
      blocking=(byte)(jsObj.optBoolean("block",false) ? 1 : 0);
    }
 else {
      path=(String)params[0];
      nonce=(String)params[1];
      blocking=((Number)params[2]).byteValue();
    }
    final JSONObject jsObj=new JSONObject();
    jsObj.put("path",path);
    jsObj.put("nonce",nonce);
    jsObj.put("block",blocking == 1 ? true : false);
    final String requestId=java.util.UUID.randomUUID().toString();
    jsObj.put("requestId",requestId);
    String zkString=jsObj.toString(4);
    byte zkBytes[]=zkString.getBytes("UTF-8");
    m_zk.create("/user_snapshot_request",zkBytes,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
    registerUserSnapshotResponseWatch(requestId,invocation,c);
  }
 catch (  KeeperException.NodeExistsException e) {
    requestExists=true;
  }
catch (  Exception e) {
    VoltDB.crashLocalVoltDB("Exception while attempting to create user snapshot request in ZK",true,e);
  }
  if (requestExists) {
    VoltTable result=org.voltdb.sysprocs.SnapshotSave.constructNodeResultsTable();
    result.addRow(-1,org.voltdb.client.ConnectionUtil.getHostnameOrAddress(),"","FAILURE","SNAPSHOT IN PROGRESS");
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponseImpl.SUCCESS,new VoltTable[]{result},"A request to perform a user snapshot already exists",invocation.clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
}
