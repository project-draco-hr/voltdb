{
  String element=null;
  boolean unsupported=false;
switch (opType) {
case OpTypes.LIMIT:
    element="limit";
  break;
case OpTypes.ALTERNATIVE:
unsupported=true;
element="alternative";
break;
case OpTypes.CASEWHEN:
unsupported=true;
element="case";
break;
case OpTypes.CAST:
unsupported=true;
element="cast (possibly implied)";
break;
case OpTypes.ORDER_BY:
unsupported=true;
element="order by";
break;
case OpTypes.SIMPLE_COLUMN:
unsupported=true;
element="simple column";
break;
case OpTypes.TABLE:
unsupported=true;
element="tablen";
break;
case OpTypes.VALUE:
unsupported=true;
element="value";
break;
case OpTypes.ZONE_MODIFIER:
unsupported=true;
element="zone modifier";
break;
default :
throw new HSQLParseException("Unsupported Expression Operation: " + String.valueOf(opType));
}
if (unsupported) {
throw new HSQLParseException(element + " operation is not supported");
}
VoltXMLElement exp=new VoltXMLElement("operation");
exp.attributes.put("id",getUniqueId(session));
exp.attributes.put("optype",element);
if ((this.alias != null) && (getAlias().length() > 0)) {
exp.attributes.put("alias",getAlias());
}
for (Expression expr : nodes) {
VoltXMLElement vxmle=expr.voltGetXML(session);
exp.children.add(vxmle);
assert(vxmle != null);
}
return exp;
}
