{
  String element=null;
switch (opType) {
case OpTypes.LIMIT:
    element="limit";
  break;
case OpTypes.ADD:
element="add";
break;
case OpTypes.SUBTRACT:
element="subtract";
break;
case OpTypes.MULTIPLY:
element="multiply";
break;
case OpTypes.DIVIDE:
element="divide";
break;
case OpTypes.EQUAL:
element="equal";
break;
case OpTypes.NOT_EQUAL:
element="notequal";
break;
case OpTypes.GREATER:
element="greaterthan";
break;
case OpTypes.GREATER_EQUAL:
element="greaterthanorequalto";
break;
case OpTypes.SMALLER:
element="lessthan";
break;
case OpTypes.SMALLER_EQUAL:
element="lessthanorequalto";
break;
case OpTypes.AND:
element="and";
break;
case OpTypes.OR:
element="or";
break;
case OpTypes.IN:
element="in";
break;
case OpTypes.COUNT:
element="count";
break;
case OpTypes.SUM:
element="sum";
break;
case OpTypes.MIN:
element="min";
break;
case OpTypes.MAX:
element="max";
break;
case OpTypes.AVG:
element="avg";
break;
case OpTypes.SQL_FUNCTION:
element="function";
break;
case OpTypes.IS_NULL:
element="is_null";
break;
case OpTypes.NOT:
element="not";
break;
default :
throw new HSQLParseException("Unsupported Expresion Operation: " + String.valueOf(opType));
}
StringBuffer sb=new StringBuffer();
sb.append(indent).append("<operation id=\"").append(this.getUniqueId()).append("\"");
sb.append(" type=\"").append(element).append("\"");
if ((this.alias != null) && (getAlias().length() > 0)) {
sb.append(" alias='" + getAlias() + "'");
}
sb.append(">\n");
for (Expression expr : nodes) {
sb.append(expr.voltGetXML(session,indent + HSQLInterface.XML_INDENT)).append('\n');
}
sb.append(indent).append("</operation>");
return sb.toString();
}
