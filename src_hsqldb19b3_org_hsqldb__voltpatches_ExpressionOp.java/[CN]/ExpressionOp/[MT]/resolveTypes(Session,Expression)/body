{
  for (int i=0; i < nodes.length; i++) {
    if (nodes[i] != null) {
      nodes[i].resolveTypes(session,this);
    }
  }
switch (opType) {
case OpTypes.VALUE:
    break;
case OpTypes.CAST:
{
    Type type=nodes[LEFT].dataType;
    if (type != null && !dataType.canConvertFrom(type)) {
      throw Error.error(ErrorCode.X_42561);
    }
    if (nodes[LEFT].opType == OpTypes.VALUE) {
      setAsConstantValue(session);
      break;
    }
    break;
  }
case OpTypes.ZONE_MODIFIER:
if (nodes[LEFT].dataType == null) {
  throw Error.error(ErrorCode.X_42567);
}
if (nodes[RIGHT] != null) {
if (nodes[RIGHT].dataType == null) {
  nodes[RIGHT].dataType=Type.SQL_INTERVAL_HOUR_TO_MINUTE;
}
if (nodes[RIGHT].dataType.typeCode != Types.SQL_INTERVAL_HOUR_TO_MINUTE) {
  throw Error.error(ErrorCode.X_42565);
}
}
switch (nodes[LEFT].dataType.typeCode) {
case Types.SQL_TIME:
dataType=DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,nodes[LEFT].dataType.scale);
break;
case Types.SQL_TIMESTAMP:
dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP_WITH_TIME_ZONE,nodes[LEFT].dataType.scale);
break;
case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:
case Types.SQL_TIME_WITH_TIME_ZONE:
dataType=nodes[LEFT].dataType;
break;
default :
throw Error.error(ErrorCode.X_42565);
}
break;
case OpTypes.CASEWHEN:
resolveTypesForCaseWhen(session);
break;
case OpTypes.ALTERNATIVE:
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression.resolveTypes()");
}
}
