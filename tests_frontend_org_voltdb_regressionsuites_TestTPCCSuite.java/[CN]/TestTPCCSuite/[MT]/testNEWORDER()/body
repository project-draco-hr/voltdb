{
  Client client=getClient();
  final double W_TAX=0.1234;
  VoltTable warehouse=client.callProcedure("InsertWarehouse",W_ID,"EZ Street WHouse","Headquarters","77 Mass. Ave.","Cambridge","AZ","12938",W_TAX,18837.57)[0];
  assertEquals(1L,warehouse.asScalarLong());
  final double D_TAX=0.0825;
  final int D_NEXT_O_ID=21;
  VoltTable district=client.callProcedure("InsertDistrict",D_ID,W_ID,"A District","Street Addy","meh","westerfield","BA","99999",D_TAX,15241.45,D_NEXT_O_ID)[0];
  assertEquals(1L,district.asScalarLong());
  final double C_DISCOUNT=0.13;
  VoltTable customer=client.callProcedure("InsertCustomer",C_ID,D_ID,W_ID,"I","Is","Name","Place","Place2","BiggerPlace","AL","91083","(913) 909 - 0928",new TimestampType(),"GC",19298943.12,C_DISCOUNT,15.75,18832.45,45L,15L,"Some History")[0];
  assertEquals(1L,customer.asScalarLong());
  final int[] s_quantities={45,85,15};
  final long INITIAL_S_YTD=5582L;
  final long INITIAL_S_ORDER_CNT=152L;
  VoltTable stock1=client.callProcedure("InsertStock",4L,W_ID,s_quantities[0],"INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO",INITIAL_S_YTD,INITIAL_S_ORDER_CNT,32L,"DATA")[0];
  VoltTable stock2=client.callProcedure("InsertStock",5L,W_ID,s_quantities[1],"INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO",INITIAL_S_YTD + 10,INITIAL_S_ORDER_CNT + 10,32L,"foo" + Constants.ORIGINAL_STRING + "bar")[0];
  VoltTable stock3=client.callProcedure("InsertStock",6L,W_ID,s_quantities[2],"INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO","INFO",INITIAL_S_YTD + 20,INITIAL_S_ORDER_CNT + 20,32L,"DATA")[0];
  final double PRICE=2341.23;
  VoltTable item1=client.callProcedure("InsertItem",4L,4L,"ITEM1",PRICE,Constants.ORIGINAL_STRING)[0];
  VoltTable item2=client.callProcedure("InsertItem",5L,5L,"ITEM2",PRICE,Constants.ORIGINAL_STRING)[0];
  VoltTable item3=client.callProcedure("InsertItem",6L,6L,"ITEM3",PRICE,Constants.ORIGINAL_STRING)[0];
  assertEquals(1L,stock1.asScalarLong());
  assertEquals(1L,stock2.asScalarLong());
  assertEquals(1L,stock3.asScalarLong());
  assertEquals(1L,item1.asScalarLong());
  assertEquals(1L,item2.asScalarLong());
  assertEquals(1L,item3.asScalarLong());
  int[] items={4,5,6};
  short[] warehouses={W_ID,W_ID,W_ID};
  int[] quantities={3,5,1};
  TPCDataPrinter.printAllData(client);
  TimestampType timestamp=new TimestampType();
  VoltTable[] neworder=client.callProcedure("neworder",W_ID,D_ID,C_ID,timestamp,items,warehouses,quantities);
  VoltTableRow customerData=neworder[0].fetchRow(0);
  VoltTableRow miscData=neworder[1].fetchRow(0);
  assertEquals("Name",customerData.getString("C_LAST"));
  assertEquals("GC",customerData.getString("C_CREDIT"));
  assertEquals(.13,customerData.getDouble("C_DISCOUNT"));
  assertEquals(W_TAX,miscData.getDouble("w_tax"));
  assertEquals(D_TAX,miscData.getDouble("d_tax"));
  assertEquals(21L,miscData.getLong("o_id"));
  final double AMOUNT=PRICE * (3 + 5 + 1) * (1 - C_DISCOUNT)* (1 + D_TAX + W_TAX);
  assertEquals(AMOUNT,miscData.getDouble("total"),0.001);
  VoltTable itemResults=neworder[2];
  assertEquals(quantities.length,itemResults.getRowCount());
  for (int i=0; i < itemResults.getRowCount(); ++i) {
    VoltTableRow itemRow=itemResults.fetchRow(i);
    assertEquals("ITEM" + (i + 1),itemRow.getString("i_name"));
    long expected=s_quantities[i] - quantities[i];
    if (expected < 10)     expected+=91;
    assertEquals(expected,itemRow.getLong("s_quantity"));
    if (i == 1) {
      assertEquals("B",itemRow.getString("brand_generic"));
    }
 else {
      assertEquals("G",itemRow.getString("brand_generic"));
    }
    assertEquals(PRICE,itemRow.getDouble("i_price"));
    assertEquals(PRICE * quantities[i],itemRow.getDouble("ol_amount"));
  }
  VoltTable[] allTables=client.callProcedure("SelectAll");
  VoltTable stock=allTables[TPCDataPrinter.nameMap.get("STOCK")];
  for (int i=0; i < stock.getRowCount(); ++i) {
    VoltTableRow stockRow=stock.fetchRow(i);
    assertEquals(INITIAL_S_YTD + i * 10 + quantities[i],stockRow.getLong("S_YTD"));
    assertEquals(INITIAL_S_ORDER_CNT + i * 10 + 1,stockRow.getLong("S_ORDER_CNT"));
  }
  items=new int[]{Constants.NUM_ITEMS + 1};
  warehouses=new short[]{W_ID};
  quantities=new int[]{42};
  try {
    client.callProcedure("neworder",W_ID,D_ID,C_ID,timestamp,items,warehouses,quantities);
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().indexOf(Constants.INVALID_ITEM_MESSAGE) > 0);
  }
  allTables=client.callProcedure("SelectAll");
  TPCDataPrinter.nameMap.get("ORDERS");
  district=allTables[TPCDataPrinter.nameMap.get("DISTRICT")];
  assertEquals(1,district.getRowCount());
  assertEquals(D_NEXT_O_ID + 1,district.fetchRow(0).getLong("D_NEXT_O_ID"));
}
