{
  String[] volt_servers=null;
  String user=null;
  String password=null;
  String nonce=null;
  char delimiter='\0';
  File outdir=null;
  int firstfield=0;
  int period=60;
  char connect=' ';
  String dateformatString="yyyyMMddHHmmss";
  boolean batched=false;
  boolean withSchema=false;
  String fullDelimiters=null;
  int throughputMonitorPeriod=0;
  boolean autodiscoverTopolgy=true;
  TimeZone tz=VoltDB.GMT_TIMEZONE;
  for (int ii=0; ii < args.length; ii++) {
    String arg=args[ii];
    if (arg.equals("--help")) {
      printHelpAndQuit(0);
    }
 else     if (arg.equals("--discard")) {
      System.err.println("Option \"--discard\" is no longer supported.");
      System.err.println("Try org.voltdb.exportclient.DiscardingExportClient.");
      printHelpAndQuit(-1);
    }
 else     if (arg.equals("--skipinternals")) {
      firstfield=INTERNAL_FIELD_COUNT;
    }
 else     if (arg.equals("--connect")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --connect");
        printHelpAndQuit(-1);
      }
      String connectStr=args[ii + 1];
      if (connectStr.equalsIgnoreCase("admin")) {
        connect='a';
      }
 else       if (connectStr.equalsIgnoreCase("client")) {
        connect='c';
      }
 else {
        System.err.println("Error: --type must be one of \"admin\" or \"client\"");
        printHelpAndQuit(-1);
      }
      ii++;
    }
 else     if (arg.equals("--servers")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --servers");
        printHelpAndQuit(-1);
      }
      volt_servers=args[ii + 1].split(",");
      ii++;
    }
 else     if (arg.equals("--type")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --type");
        printHelpAndQuit(-1);
      }
      String type=args[ii + 1];
      if (type.equalsIgnoreCase("csv")) {
        delimiter=',';
      }
 else       if (type.equalsIgnoreCase("tsv")) {
        delimiter='\t';
      }
 else {
        System.err.println("Error: --type must be one of CSV or TSV");
        printHelpAndQuit(-1);
      }
      ii++;
    }
 else     if (arg.equals("--outdir")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --outdir");
        printHelpAndQuit(-1);
      }
      boolean invalidDir=false;
      outdir=new VoltFile(args[ii + 1]);
      if (!outdir.exists()) {
        if (!outdir.mkdir()) {
          System.err.println("Error: " + outdir.getPath() + " cannot be created");
          invalidDir=true;
        }
      }
      if (!outdir.canRead()) {
        System.err.println("Error: " + outdir.getPath() + " does not have read permission set");
        invalidDir=true;
      }
      if (!outdir.canExecute()) {
        System.err.println("Error: " + outdir.getPath() + " does not have execute permission set");
        invalidDir=true;
      }
      if (!outdir.canWrite()) {
        System.err.println("Error: " + outdir.getPath() + " does not have write permission set");
        invalidDir=true;
      }
      if (invalidDir) {
        System.exit(-1);
      }
      ii++;
    }
 else     if (args.equals("--timezone")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --timezone");
        printHelpAndQuit(-1);
      }
      String tzId=args[ii + 1];
      ii++;
      tz=TimeZone.getTimeZone(tzId);
    }
 else     if (arg.equals("--nonce")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --nonce");
        printHelpAndQuit(-1);
      }
      nonce=args[ii + 1];
      ii++;
    }
 else     if (arg.equals("--user")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --user");
        printHelpAndQuit(-1);
      }
      user=args[ii + 1];
      ii++;
    }
 else     if (arg.equals("--password")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --password");
        printHelpAndQuit(-1);
      }
      password=args[ii + 1];
      ii++;
    }
 else     if (arg.equals("--period")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --period");
        printHelpAndQuit(-1);
      }
      period=Integer.parseInt(args[ii + 1]);
      if (period < 1) {
        System.err.println("Error: Specified value for --period must be >= 1.");
        printHelpAndQuit(-1);
      }
      ii++;
    }
 else     if (arg.equals("--dateformat")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --dateformat");
        printHelpAndQuit(-1);
      }
      dateformatString=args[ii + 1].trim();
      ii++;
    }
 else     if (arg.equals("--batched")) {
      batched=true;
    }
 else     if (arg.equals("--with-schema")) {
      withSchema=true;
    }
 else     if (arg.equals("--delimiters")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --delimiters");
        printHelpAndQuit(-1);
      }
      fullDelimiters=args[ii + 1].trim();
      ii++;
      String charsAsStr=StringEscapeUtils.unescapeHtml4(fullDelimiters.trim());
      if (charsAsStr.length() != 4) {
        System.err.println("The delimiter set must contain exactly 4 characters (after any html escaping).");
        printHelpAndQuit(-1);
      }
    }
 else     if (arg.equals("--disable-topology-autodiscovery")) {
      autodiscoverTopolgy=false;
    }
 else     if (arg.equals("--throughput-monitor-period")) {
      if (args.length < ii + 1) {
        System.err.println("Error: Not enough args following --throughput-monitor-period");
        printHelpAndQuit(-1);
      }
      throughputMonitorPeriod=Integer.parseInt(args[ii + 1].trim());
      ii++;
    }
 else {
      System.err.println("Unrecognized parameter " + arg);
      System.exit(-1);
    }
  }
  if (volt_servers == null || volt_servers.length < 1) {
    System.err.println("ExportToFile: must provide at least one VoltDB server");
    printHelpAndQuit(-1);
  }
  if (connect == ' ') {
    System.err.println("ExportToFile: must specify connection type as admin or client using --connect argument");
    printHelpAndQuit(-1);
  }
  assert((connect == 'c') || (connect == 'a'));
  if (user == null) {
    user="";
  }
  if (password == null) {
    password="";
  }
  if (nonce == null) {
    System.err.println("ExportToFile: must provide a filename nonce");
    printHelpAndQuit(-1);
  }
  if (outdir == null) {
    outdir=new VoltFile(".");
  }
  if (delimiter == '\0') {
    System.err.println("ExportToFile: must provide an output type");
    printHelpAndQuit(-1);
  }
  ExportToFileClient client=new ExportToFileClient(delimiter,nonce,outdir,period,dateformatString,fullDelimiters,firstfield,connect == 'a',batched,withSchema,throughputMonitorPeriod,autodiscoverTopolgy,tz);
  for (  String server : volt_servers) {
    server=server.trim();
    client.m_commandLineServerArgs.add(server);
    client.addServerInfo(server,connect == 'a');
  }
  client.addCredentials(user,password);
  try {
    client.run();
  }
 catch (  ExportClientException e) {
    e.printStackTrace();
    System.exit(-1);
  }
}
