{
  TPCCProjectBuilder project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addDefaultProcedures();
  String testDir=BuildDirectoryUtils.getBuildDirectoryPath();
  String jarName="compile-deployment.jar";
  String catalogJar=testDir + File.separator + jarName;
  assertTrue("Project failed to compile",project.compile(catalogJar));
  byte[] bytes=MiscUtils.fileToBytes(new File(catalogJar));
  InMemoryJarfile memCatalog=CatalogUpgradeTools.loadCatalog(bytes,false);
  CatalogUpgradeTools.dorkVersion(memCatalog);
  CatalogUpgradeTools.dorkDDL(memCatalog,"CREATE PROCEDURE groovy.procedures.SelectItem AS ### \n" + "  selectItem = new SQLStmt('SELECT I_ID, I_NAME FROM ITEM WHERE I_ID = ?') \n" + "  transactOn = { id -> \n"+ "    voltQueueSQL(selectItem, EXPECT_ZERO_OR_ONE_ROW, id) \n"+ "    voltExecuteSQL(true) \n"+ "  } \n"+ "### LANGUAGE GROOVY");
  InMemoryJarfile memCatalog2=CatalogUpgradeTools.loadCatalog(memCatalog.getFullJarBytes(),true);
  assertNotNull(memCatalog2);
  String[] buildInfoLines2=CatalogUpgradeTools.getBuildInfoLines(memCatalog2);
  String serverVersion=VoltDB.instance().getVersionString();
  assertTrue(serverVersion.equals(buildInfoLines2[0]));
  String jarName2=String.format("catalog-%s.jar",serverVersion);
  File jar2=new File(VoltDB.Configuration.getPathToCatalogForTest(jarName2));
  assertTrue(jar2.exists());
}
