{
  assert(childNode != null);
  if (childNode.m_leftNode != null) {
    generateAccessPaths(childNode,childNode.m_leftNode);
  }
  if (childNode.m_rightNode != null) {
    generateAccessPaths(childNode,childNode.m_rightNode);
  }
  if (childNode.m_table != null) {
    assert(parentNode != null);
    if (parentNode.m_leftNode == childNode) {
      childNode.m_accessPaths.add(getRelevantNaivePathForTable(null,parentNode.m_whereOuterList));
    }
 else {
      assert(parentNode.m_rightNode == childNode);
      ArrayList<AbstractExpression> joinExprList=new ArrayList<AbstractExpression>();
      joinExprList.addAll(parentNode.m_joinInnerList);
      joinExprList.addAll(parentNode.m_joinInnerOuterList);
      childNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(childNode.m_table,joinExprList,null));
      assert(childNode.m_accessPaths.size() > 0);
    }
  }
 else {
    childNode.m_accessPaths.add(getRelevantNaivePathForTable(null,null));
  }
}
