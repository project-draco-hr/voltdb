{
  assert(childNode != null);
  if (childNode.m_leftNode != null) {
    generateAccessPaths(childNode,childNode.m_leftNode);
  }
  if (childNode.m_rightNode != null) {
    generateAccessPaths(childNode,childNode.m_rightNode);
  }
  if (parentNode != null) {
    if (parentNode.m_leftNode == childNode) {
      List<AbstractExpression> joinOuterList=(parentNode.m_joinType == JoinType.INNER) ? parentNode.m_joinOuterList : null;
      if (childNode.m_table != null) {
        childNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(childNode.m_table,joinOuterList,parentNode.m_whereOuterList,null));
      }
 else {
        childNode.m_accessPaths.add(getRelevantNaivePathForTable(joinOuterList,parentNode.m_whereOuterList));
      }
    }
 else {
      assert(parentNode.m_rightNode == childNode);
      childNode.m_accessPaths.addAll(getRelevantAccessPathsForInnerNode(parentNode,childNode));
    }
  }
 else {
    childNode.m_accessPaths.add(getRelevantNaivePathForTable(null,null));
  }
  assert(childNode.m_accessPaths.size() > 0);
}
