{
  if (place == inputNodes.length) {
    JoinNode root=null;
    for (    JoinNode outputNode : outputNodes) {
      assert(outputNode.m_table != null);
      JoinNode node=new JoinNode(outputNode.m_table,outputNode.m_joinType,null,null,outputNode.m_id);
      if (root == null) {
        root=node;
      }
 else {
        root=new JoinNode(JoinType.INNER,root,node,-node.m_id);
      }
    }
    joinNodes.add(root);
    return;
  }
  for (int i=0; i < outputNodes.length; i++) {
    outputNodes[place]=inputNodes[i];
    boolean duplicate=false;
    for (int j=0; j < place; j++) {
      if (outputNodes[j].m_id == outputNodes[place].m_id) {
        duplicate=true;
        break;
      }
    }
    if (duplicate)     continue;
    queueInnerSubJoinOrdersRecursively(inputNodes,outputNodes,place + 1,joinNodes);
  }
}
