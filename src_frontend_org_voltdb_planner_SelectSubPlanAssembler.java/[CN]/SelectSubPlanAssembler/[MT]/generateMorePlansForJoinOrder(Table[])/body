{
  assert(joinOrder != null);
  assert(m_plans.size() == 0);
  ArrayList<AccessPath[]> listOfAccessPathCombos=generateAllAccessPathCombinationsForJoinOrder(joinOrder);
  boolean suppressSendReceivePair=true;
  int partitionedTableCount=m_partitioning.getCountOfPartitionedTables();
  if ((m_partitioning.wasSpecifiedAsSingle() == false) && partitionedTableCount > 0) {
    m_partitioning.setEffectiveValue(null);
    suppressSendReceivePair=false;
    AccessPath.tagForMultiPartitionAccess(joinOrder,listOfAccessPathCombos.get(0),m_partitioning);
    int multiPartitionScanCount=m_partitioning.getCountOfIndependentlyPartitionedTables();
    if (multiPartitionScanCount > 1) {
      return;
    }
    if (m_partitioning.inferredPartitioningValue() == null) {
      if (partitionedTableCount > 1) {
        suppressSendReceivePair=true;
      }
    }
 else {
      if (multiPartitionScanCount == 1) {
        return;
      }
 else {
        suppressSendReceivePair=m_partitioning.isInferringSP();
      }
    }
  }
  for (  AccessPath[] accessPath : listOfAccessPathCombos) {
    AbstractPlanNode scanPlan=getSelectSubPlanForAccessPath(joinOrder,accessPath,suppressSendReceivePair);
    m_plans.add(scanPlan);
  }
}
