{
  assert(joinNode != null);
  if (joinNode.m_table != null) {
    return joinNode;
  }
  assert(joinNode.m_leftNode != null && joinNode.m_rightNode != null);
  assert(joinNode.m_leftNode.m_joinType == JoinType.INNER || joinNode.m_rightNode.m_joinType == JoinType.INNER);
  JoinNode innerNode=null;
  if (joinNode.m_rightNode.m_joinType == JoinType.LEFT || joinNode.m_leftNode.m_joinType == JoinType.RIGHT) {
    innerNode=joinNode.m_rightNode;
  }
 else   if (joinNode.m_rightNode.m_joinType == JoinType.RIGHT || joinNode.m_leftNode.m_joinType == JoinType.LEFT) {
    innerNode=joinNode.m_leftNode;
  }
 else {
    assert(false);
  }
  if (innerNode != null) {
    for (    AbstractExpression expr : exprs) {
      if (innerNode.m_table != null) {
        if (ExpressionUtil.isNullRejectingExpression(expr,innerNode.m_table.getTypeName())) {
          joinNode.m_leftNode.m_joinType=JoinType.INNER;
          joinNode.m_rightNode.m_joinType=JoinType.INNER;
          break;
        }
      }
 else {
        List<Table> tables=innerNode.generateTableJoinOrder();
        boolean rejectNull=false;
        for (        Table table : tables) {
          if (ExpressionUtil.isNullRejectingExpression(expr,table.getTypeName())) {
            joinNode.m_leftNode.m_joinType=JoinType.INNER;
            joinNode.m_rightNode.m_joinType=JoinType.INNER;
            rejectNull=true;
            break;
          }
        }
        if (rejectNull) {
          break;
        }
      }
    }
  }
  if (joinNode.m_leftNode.m_joinExpr != null) {
    exprs.add(joinNode.m_leftNode.m_joinExpr);
  }
  if (joinNode.m_leftNode.m_whereExpr != null) {
    exprs.add(joinNode.m_leftNode.m_whereExpr);
  }
  if (joinNode.m_rightNode.m_joinExpr != null) {
    exprs.add(joinNode.m_rightNode.m_joinExpr);
  }
  if (joinNode.m_rightNode.m_whereExpr != null) {
    exprs.add(joinNode.m_rightNode.m_whereExpr);
  }
  simplifyOuterJoinRecurcively(joinNode.m_leftNode,exprs);
  simplifyOuterJoinRecurcively(joinNode.m_rightNode,exprs);
  return joinNode;
}
