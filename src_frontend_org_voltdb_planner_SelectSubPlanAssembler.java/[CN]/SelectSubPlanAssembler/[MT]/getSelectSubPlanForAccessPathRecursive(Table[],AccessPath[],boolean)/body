{
  if (joinOrder.length == 1)   return getAccessPlanForTable(joinOrder[0],accessPath[0],!supressSendReceivePair);
  AbstractPlanNode nljAccessPlan=getAccessPlanForTable(joinOrder[0],accessPath[0],!supressSendReceivePair);
  boolean accessPlanIsSendReceive=false;
  AbstractPlanNode accessPlanTemp=nljAccessPlan;
  if (nljAccessPlan instanceof ReceivePlanNode) {
    accessPlanIsSendReceive=true;
    nljAccessPlan=nljAccessPlan.getChild(0).getChild(0);
    nljAccessPlan.clearParents();
  }
  Table[] subJoinOrder=Arrays.copyOfRange(joinOrder,1,joinOrder.length);
  AccessPath[] subAccessPath=Arrays.copyOfRange(accessPath,1,accessPath.length);
  AbstractPlanNode subPlan=getSelectSubPlanForAccessPathRecursive(subJoinOrder,subAccessPath,supressSendReceivePair);
  ArrayList<AbstractExpression> joinClauses=accessPath[0].joinExprs;
  AbstractPlanNode retval=null;
  if (nljAccessPlan instanceof IndexScanPlanNode) {
    NestLoopIndexPlanNode nlijNode=new NestLoopIndexPlanNode();
    nlijNode.setJoinType(JoinType.INNER);
    @SuppressWarnings("unused") IndexScanPlanNode innerNode=(IndexScanPlanNode)nljAccessPlan;
    nlijNode.addInlinePlanNode(nljAccessPlan);
    nlijNode.addAndLinkChild(subPlan);
    nlijNode.generateOutputSchema(m_db);
    retval=nlijNode;
  }
 else {
    NestLoopPlanNode nljNode=new NestLoopPlanNode();
    if ((joinClauses != null) && (joinClauses.size() > 0))     nljNode.setPredicate(ExpressionUtil.combine(joinClauses));
    nljNode.setJoinType(JoinType.LEFT);
    nljNode.addAndLinkChild(nljAccessPlan);
    nljNode.addAndLinkChild(subPlan);
    nljNode.generateOutputSchema(m_db);
    retval=nljNode;
  }
  if (accessPlanIsSendReceive) {
    accessPlanTemp.getChild(0).clearChildren();
    accessPlanTemp.getChild(0).addAndLinkChild(retval);
    retval=accessPlanTemp;
  }
  return retval;
}
