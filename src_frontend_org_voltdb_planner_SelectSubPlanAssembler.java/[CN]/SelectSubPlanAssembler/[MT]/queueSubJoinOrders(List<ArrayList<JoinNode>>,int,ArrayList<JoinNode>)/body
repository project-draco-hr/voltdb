{
  if (joinOrderListIdx == joinOrderList.size()) {
    assert(!currentJoinOrder.isEmpty());
    JoinNode joinTree=reconstructJoinTreeFromSubTrees(currentJoinOrder);
    m_joinOrders.add(joinTree);
    return;
  }
  ArrayList<JoinNode> nextTrees=joinOrderList.get(joinOrderListIdx);
  for (  JoinNode headTree : nextTrees) {
    ArrayList<JoinNode> updatedJoinOrder=new ArrayList<JoinNode>();
    for (    JoinNode node : currentJoinOrder) {
      updatedJoinOrder.add((JoinNode)node.clone());
    }
    updatedJoinOrder.add((JoinNode)headTree.clone());
    queueSubJoinOrders(joinOrderList,joinOrderListIdx + 1,updatedJoinOrder);
  }
}
