{
  List<JoinNode> tableNodes=subTree.generateLeafNodesJoinOrder();
  List<List<JoinNode>> joinOrders=PermutationGenerator.generatePurmutations(tableNodes);
  List<JoinNode> newTrees=new ArrayList<JoinNode>();
  for (  List<JoinNode> joinOrder : joinOrders) {
    newTrees.add(JoinNode.reconstructJoinTreeFromTableNodes(joinOrder,JoinType.INNER));
  }
  AbstractExpression combinedWhereExpr=subTree.getAllFilters();
  List<JoinNode> treePermutations=new ArrayList<>();
  for (  JoinNode newTree : newTrees) {
    if (combinedWhereExpr != null) {
      newTree.setWhereExpression((AbstractExpression)combinedWhereExpr.clone());
    }
    newTree.setId(subTree.getId());
    treePermutations.add(newTree);
  }
  return treePermutations;
}
