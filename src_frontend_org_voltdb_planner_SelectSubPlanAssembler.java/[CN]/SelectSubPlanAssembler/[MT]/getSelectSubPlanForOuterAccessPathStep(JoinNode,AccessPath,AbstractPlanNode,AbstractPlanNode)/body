{
  ArrayList<AbstractExpression> whereClauses=innerAccessPath.whereExprs;
  AbstractJoinPlanNode retval=null;
  if (innerPlan instanceof IndexScanPlanNode) {
    NestLoopIndexPlanNode nlijNode=new NestLoopIndexPlanNode();
    nlijNode.setJoinType(joinNode.m_rightNode.m_joinType);
    @SuppressWarnings("unused") IndexScanPlanNode innerNode=(IndexScanPlanNode)innerPlan;
    nlijNode.addInlinePlanNode(innerPlan);
    nlijNode.addAndLinkChild(outerPlan);
    nlijNode.generateOutputSchema(m_db);
    retval=nlijNode;
  }
 else {
    ArrayList<AbstractExpression> joinClauses=innerAccessPath.joinExprs;
    NestLoopPlanNode nljNode=new NestLoopPlanNode();
    if ((joinClauses != null) && (joinClauses.size() > 0))     nljNode.setJoinPredicate(ExpressionUtil.combine(joinClauses));
    nljNode.setJoinType(joinNode.m_rightNode.m_joinType);
    nljNode.addAndLinkChild(outerPlan);
    nljNode.addAndLinkChild(innerPlan);
    nljNode.generateOutputSchema(m_db);
    retval=nljNode;
  }
  if (joinNode.m_joinOuterList != null && !joinNode.m_joinOuterList.isEmpty()) {
    retval.setPreJoinPredicate(ExpressionUtil.combine(joinNode.m_joinOuterList));
  }
  if ((whereClauses != null) && (whereClauses.size() > 0)) {
    retval.setWherePredicate(ExpressionUtil.combine(whereClauses));
  }
  return retval;
}
