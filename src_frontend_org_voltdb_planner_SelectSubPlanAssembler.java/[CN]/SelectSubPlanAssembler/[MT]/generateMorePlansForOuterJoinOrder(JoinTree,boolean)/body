{
  JoinNode joinNode=joinTree.m_root;
  assert(joinNode != null);
  assert(joinNode.m_leftNode.m_table != null);
  assert(joinNode.m_rightNode.m_table != null);
  Table outerTable=joinNode.m_leftNode.m_table;
  AccessPath outerPath=getRelevantNaivePathForTable(outerTable,null,joinNode.m_whereOuterList);
  ArrayList<AbstractExpression> joinExprList=new ArrayList<AbstractExpression>();
  joinExprList.addAll(joinNode.m_joinInnerList);
  joinExprList.addAll(joinNode.m_joinInnerOuterList);
  Table innerTable=joinNode.m_rightNode.m_table;
  ArrayList<AccessPath> innerPaths=getRelevantAccessPathsForTable(innerTable,joinExprList,null);
  assert(innerPaths.size() > 0);
  ArrayList<AbstractExpression> filterExprList=new ArrayList<AbstractExpression>();
  filterExprList.addAll(joinNode.m_whereInnerList);
  filterExprList.addAll(joinNode.m_whereInnerOuterList);
  for (  AccessPath innerPath : innerPaths) {
    innerPath.whereExprs.addAll(filterExprList);
    AbstractPlanNode indexPlan=getSelectSubPlanForJoinNode(joinNode,outerPath,innerPath,deferSendReceivePair);
    m_plans.add(indexPlan);
  }
}
