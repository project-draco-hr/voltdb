{
  if (joinOrderList.isEmpty()) {
    assert(!currentJoinOrder.isEmpty());
    JoinTree joinTree=new JoinTree();
    joinTree.m_hasOuterJoin=true;
    joinTree.m_root=reassembleJoinTree(currentJoinOrder.get(0),currentJoinOrder.subList(1,currentJoinOrder.size()));
    m_joinOrders.add(joinTree);
    return;
  }
  ArrayList<JoinNode> headTrees=joinOrderList.get(0);
  for (  JoinNode headTree : headTrees) {
    ArrayList<JoinNode> updatedJoinOrder=new ArrayList<JoinNode>();
    for (    JoinNode node : currentJoinOrder) {
      updatedJoinOrder.add((JoinNode)node.clone());
    }
    updatedJoinOrder.add((JoinNode)headTree.clone());
    queueOuterSubJoinOrders(joinOrderList.subList(1,joinOrderList.size()),updatedJoinOrder);
  }
}
