{
  assert(parentNode.m_leftNode != null);
  JoinNode outerChildNode=parentNode.m_leftNode;
  List<AbstractExpression> joinOuterList=(parentNode.m_joinType == JoinType.INNER) ? parentNode.m_joinOuterList : null;
  if (outerChildNode.m_table == null) {
    assert(outerChildNode.m_leftNode != null && outerChildNode.m_rightNode != null);
    generateOuterAccessPaths(outerChildNode);
    generateInnerAccessPaths(outerChildNode);
    outerChildNode.m_accessPaths.add(getRelevantNaivePath(joinOuterList,parentNode.m_whereOuterList));
  }
 else {
    assert(outerChildNode.m_table != null);
    outerChildNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(outerChildNode.m_table,joinOuterList,parentNode.m_whereOuterList,null));
  }
  assert(outerChildNode.m_accessPaths.size() > 0);
}
