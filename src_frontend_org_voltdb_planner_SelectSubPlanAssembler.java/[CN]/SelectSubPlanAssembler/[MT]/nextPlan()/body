{
  while (m_plans.size() == 0) {
    JoinNode joinTree=m_joinOrders.poll();
    if (joinTree == null)     return null;
    m_parsedStmt.analyzeJoinExpressions(joinTree);
    assert(m_parsedStmt.multiTableSelectionList.size() == 0);
    assert(m_parsedStmt.noTableSelectionList.size() == 0);
    if (!m_partitioning.wasSpecifiedAsSingle()) {
      HashMap<AbstractExpression,Set<AbstractExpression>> valueEquivalence=joinTree.getAllEquivalenceFilters();
      int countOfIndependentlyPartitionedTables=m_partitioning.analyzeForMultiPartitionAccess(m_parsedStmt.tableList,valueEquivalence);
      if (countOfIndependentlyPartitionedTables > 1) {
        m_recentErrorMsg="Join of multiple partitioned tables has insufficient join criteria.";
        continue;
      }
    }
    generateMorePlansForJoinTree(joinTree);
  }
  return m_plans.poll();
}
