{
  assert(childNode != null);
  if (parentNode.m_joinType == JoinType.INNER) {
    parentNode.m_joinInnerOuterList.addAll(parentNode.m_whereInnerOuterList);
    parentNode.m_whereInnerOuterList.clear();
    parentNode.m_joinInnerList.addAll(parentNode.m_whereInnerList);
    parentNode.m_whereInnerList.clear();
  }
  if (childNode.m_table == null) {
    assert(childNode.m_leftNode != null && childNode.m_rightNode != null);
    generateOuterAccessPaths(childNode,childNode.m_leftNode);
    generateInnerAccessPaths(childNode,childNode.m_rightNode);
    childNode.m_accessPaths.add(getRelevantNaivePath(parentNode.m_joinInnerOuterList,parentNode.m_joinInnerList));
    return;
  }
  if (parentNode.m_joinType == JoinType.INNER || childNode.m_table.getIsreplicated() || canDeferSendReceivePairForNode()) {
    childNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(childNode.m_table,parentNode.m_joinInnerOuterList,parentNode.m_joinInnerList,null));
  }
 else {
    childNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(childNode.m_table,null,parentNode.m_joinInnerList,parentNode.m_joinInnerOuterList));
  }
  assert(childNode.m_accessPaths.size() > 0);
}
