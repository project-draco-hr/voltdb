{
  ArrayList<JoinNode> treePermutations=new ArrayList<JoinNode>();
  if (subTree instanceof BranchNode && ((BranchNode)subTree).getJoinType() != JoinType.INNER) {
    treePermutations.add(subTree);
  }
 else {
    List<JoinNode> tableNodes=subTree.generateLeafNodesJoinOrder();
    List<List<JoinNode>> joinOrders=PermutationGenerator.generatePurmutations(tableNodes);
    List<JoinNode> newTrees=new ArrayList<JoinNode>();
    for (    List<JoinNode> joinOrder : joinOrders) {
      newTrees.add(JoinNode.reconstructJoinTreeFromTableNodes(joinOrder));
    }
    AbstractExpression combinedWhereExpr=subTree.getAllFilters();
    for (    JoinNode newTree : newTrees) {
      if (combinedWhereExpr != null) {
        newTree.setWhereExpression((AbstractExpression)combinedWhereExpr.clone());
      }
      newTree.setId(subTree.getId());
      treePermutations.add(newTree);
    }
  }
  return treePermutations;
}
