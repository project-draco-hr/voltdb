{
  assert(joinNode != null);
  if (joinNode.m_tableAliasIndex != StmtCatalogCache.NULL_ALIAS_INDEX) {
    return;
  }
  assert(joinNode.m_leftNode != null);
  assert(joinNode.m_rightNode != null);
  JoinNode leftNode=joinNode.m_leftNode;
  JoinNode rightNode=joinNode.m_rightNode;
  JoinNode innerNode=null;
  if (joinNode.m_joinType == JoinType.LEFT) {
    innerNode=rightNode;
  }
 else   if (joinNode.m_joinType == JoinType.RIGHT) {
    innerNode=leftNode;
  }
 else   if (joinNode.m_joinType == JoinType.FULL) {
    assert(false);
  }
  if (innerNode != null) {
    for (    AbstractExpression expr : exprs) {
      if (innerNode.m_tableAliasIndex != StmtCatalogCache.NULL_ALIAS_INDEX) {
        String tableAlias=m_parsedStmt.stmtCache.get(innerNode.m_tableAliasIndex).m_tableAlias;
        if (ExpressionUtil.isNullRejectingExpression(expr,tableAlias)) {
          joinNode.m_joinType=JoinType.INNER;
          break;
        }
      }
 else {
        List<Integer> tableAliasIdxs=innerNode.generateTableJoinOrder();
        boolean rejectNull=false;
        for (        int aliasIdx : tableAliasIdxs) {
          assert(aliasIdx != StmtCatalogCache.NULL_ALIAS_INDEX);
          String tableAlias=m_parsedStmt.stmtCache.get(aliasIdx).m_tableAlias;
          if (ExpressionUtil.isNullRejectingExpression(expr,tableAlias)) {
            joinNode.m_joinType=JoinType.INNER;
            rejectNull=true;
            break;
          }
        }
        if (rejectNull) {
          break;
        }
      }
    }
  }
  if (leftNode.m_joinExpr != null) {
    exprs.add(leftNode.m_joinExpr);
  }
  if (leftNode.m_whereExpr != null) {
    exprs.add(leftNode.m_whereExpr);
  }
  if (rightNode.m_joinExpr != null) {
    exprs.add(rightNode.m_joinExpr);
  }
  if (rightNode.m_whereExpr != null) {
    exprs.add(rightNode.m_whereExpr);
  }
  simplifyOuterJoinRecursively(joinNode.m_leftNode,exprs);
  simplifyOuterJoinRecursively(joinNode.m_rightNode,exprs);
}
