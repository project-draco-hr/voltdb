{
  assert(joinNode != null);
  if (joinNode.getNodeType() != JoinNode.NodeType.JOIN) {
    return;
  }
  JoinNode leftNode=joinNode.getLeftNode();
  JoinNode rightNode=joinNode.getRightNode();
  JoinNode innerNode=null;
  JoinNode outerNode=null;
  if (joinNode.getJoinType() == JoinType.LEFT) {
    innerNode=rightNode;
    outerNode=leftNode;
  }
 else   if (joinNode.getJoinType() == JoinType.RIGHT) {
    innerNode=leftNode;
    outerNode=rightNode;
  }
 else   if (joinNode.getJoinType() == JoinType.FULL) {
    assert(false);
  }
  if (innerNode != null) {
    for (    AbstractExpression expr : exprs) {
      if (innerNode.getTableAliasIndex() != StmtTableScan.NULL_ALIAS_INDEX) {
        String tableAlias=m_parsedStmt.stmtCache.get(innerNode.getTableAliasIndex()).getTableAlias();
        if (ExpressionUtil.isNullRejectingExpression(expr,tableAlias)) {
          joinNode.setJoinType(JoinType.INNER);
          break;
        }
      }
 else {
        List<Integer> tableAliasIdxs=innerNode.generateTableJoinOrder();
        boolean rejectNull=false;
        for (        int aliasIdx : tableAliasIdxs) {
          assert(aliasIdx != StmtTableScan.NULL_ALIAS_INDEX);
          String tableAlias=m_parsedStmt.stmtCache.get(aliasIdx).getTableAlias();
          if (ExpressionUtil.isNullRejectingExpression(expr,tableAlias)) {
            joinNode.setJoinType(JoinType.INNER);
            rejectNull=true;
            break;
          }
        }
        if (rejectNull) {
          break;
        }
      }
    }
  }
  List<AbstractExpression> newExprs=new ArrayList<AbstractExpression>(exprs);
  if (leftNode.getJoinExpression() != null) {
    newExprs.add(leftNode.getJoinExpression());
  }
  if (rightNode.getJoinExpression() != null) {
    newExprs.add(rightNode.getJoinExpression());
  }
  if (leftNode.getWhereExpression() != null) {
    exprs.add(leftNode.getWhereExpression());
  }
  if (rightNode.getWhereExpression() != null) {
    exprs.add(rightNode.getWhereExpression());
  }
  if (joinNode.getJoinType() == JoinType.INNER) {
    exprs.addAll(newExprs);
    simplifyOuterJoinRecursively(leftNode,exprs);
    simplifyOuterJoinRecursively(rightNode,exprs);
  }
 else {
    newExprs.addAll(exprs);
    simplifyOuterJoinRecursively(innerNode,newExprs);
    simplifyOuterJoinRecursively(outerNode,exprs);
  }
}
