{
  assert(joinNode != null);
  if (joinNode.m_tableAliasIndex == StmtTableScan.NULL_ALIAS_INDEX) {
    assert(joinNode.m_leftNode != null && joinNode.m_rightNode != null);
    AbstractPlanNode outerScanPlan=getSelectSubPlanForJoinNode(joinNode.m_leftNode);
    if (outerScanPlan == null) {
      return null;
    }
    AbstractPlanNode innerScanPlan=getSelectSubPlanForJoinNode(joinNode.m_rightNode);
    if (innerScanPlan == null) {
      return null;
    }
    return getSelectSubPlanForJoin(joinNode,outerScanPlan,innerScanPlan);
  }
  AbstractPlanNode scanNode=getAccessPlanForTable(joinNode.m_tableAliasIndex,joinNode.m_currentAccessPath);
  if (joinNode.m_nodeType == NodeType.SUBQUERY) {
    assert(joinNode.m_tableAliasIndex != StmtTableScan.NULL_ALIAS_INDEX);
    StmtTableScan tableCache=m_parsedStmt.stmtCache.get(joinNode.m_tableAliasIndex);
    assert(tableCache.m_tableDerived != null);
    CompiledPlan subQueryPlan=tableCache.m_tableDerived.getBetsCostPlan();
    assert(subQueryPlan != null);
    assert(subQueryPlan.rootPlanGraph != null);
    scanNode.addAndLinkChild(subQueryPlan.rootPlanGraph);
  }
  return scanNode;
}
