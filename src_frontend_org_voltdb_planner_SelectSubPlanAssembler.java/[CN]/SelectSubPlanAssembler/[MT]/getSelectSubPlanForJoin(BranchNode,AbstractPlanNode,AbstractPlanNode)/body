{
  ArrayList<AbstractExpression> whereClauses=new ArrayList<AbstractExpression>();
  whereClauses.addAll(joinNode.m_whereInnerList);
  whereClauses.addAll(joinNode.m_whereInnerOuterList);
  if (joinNode.getJoinType() == JoinType.FULL) {
    whereClauses.addAll(joinNode.m_whereOuterList);
  }
  assert(joinNode.getRightNode() != null);
  JoinNode innerJoinNode=joinNode.getRightNode();
  AccessPath innerAccessPath=innerJoinNode.m_currentAccessPath;
  boolean needInnerSendReceive=m_partitioning.requiresTwoFragments() && !innerPlan.hasReplicatedResult() && outerPlan.hasReplicatedResult()&& joinNode.getJoinType() != JoinType.INNER;
  boolean canHaveNLJ=true;
  boolean canHaveNLIJ=true;
  if (innerPlan instanceof IndexScanPlanNode) {
    if (hasInnerOuterIndexExpression(joinNode.getRightNode().getTableAlias(),innerAccessPath.indexExprs,innerAccessPath.initialExpr,innerAccessPath.endExprs)) {
      canHaveNLJ=false;
    }
  }
 else {
    canHaveNLIJ=false;
  }
  if (needInnerSendReceive) {
    canHaveNLIJ=false;
  }
  if (joinNode.getJoinType() == JoinType.FULL && m_partitioning.requiresTwoFragments() && !outerPlan.hasReplicatedResult() && innerPlan.hasReplicatedResult()) {
    canHaveNLIJ=false;
    canHaveNLJ=false;
  }
  AbstractJoinPlanNode ajNode=null;
  if (canHaveNLJ) {
    NestLoopPlanNode nljNode=new NestLoopPlanNode();
    ArrayList<AbstractExpression> joinClauses=new ArrayList<>(innerAccessPath.joinExprs);
    if ((innerPlan instanceof IndexScanPlanNode) || (innerPlan instanceof NestLoopIndexPlanNode && innerPlan.getChild(0) instanceof MaterializedScanPlanNode)) {
      ArrayList<AbstractExpression> otherExprs=new ArrayList<AbstractExpression>();
      List<AbstractExpression> innerExpr=filterSingleTVEExpressions(innerAccessPath.otherExprs,otherExprs);
      joinClauses.addAll(otherExprs);
      IndexScanPlanNode scanNode=null;
      if (innerPlan instanceof IndexScanPlanNode) {
        scanNode=(IndexScanPlanNode)innerPlan;
      }
 else {
        scanNode=(IndexScanPlanNode)innerPlan.getInlinePlanNode(PlanNodeType.INDEXSCAN);
      }
      scanNode.setPredicate(innerExpr);
    }
 else     if (innerJoinNode instanceof BranchNode && joinNode.getJoinType() != JoinType.INNER) {
      joinClauses.addAll(innerAccessPath.otherExprs);
    }
    nljNode.setJoinPredicate(ExpressionUtil.combine(joinClauses));
    nljNode.addAndLinkChild(outerPlan);
    if (needInnerSendReceive) {
      if (outerPlan.hasAnyNodeOfClass(AbstractReceivePlanNode.class) || innerPlan.hasAnyNodeOfClass(AbstractReceivePlanNode.class)) {
        return null;
      }
      innerPlan=addSendReceivePair(innerPlan);
    }
    nljNode.addAndLinkChild(innerPlan);
    ajNode=nljNode;
  }
 else   if (canHaveNLIJ) {
    NestLoopIndexPlanNode nlijNode=new NestLoopIndexPlanNode();
    IndexScanPlanNode innerNode=(IndexScanPlanNode)innerPlan;
    innerNode.setPredicate(innerAccessPath.joinExprs,innerAccessPath.otherExprs);
    nlijNode.addInlinePlanNode(innerPlan);
    nlijNode.addAndLinkChild(outerPlan);
    ajNode=nlijNode;
  }
 else {
    m_recentErrorMsg="Unsupported special case of complex OUTER JOIN between replicated outer table and partitioned inner table.";
    return null;
  }
  ajNode.setJoinType(joinNode.getJoinType());
  ajNode.setPreJoinPredicate(ExpressionUtil.combine(joinNode.m_joinOuterList));
  ajNode.setWherePredicate(ExpressionUtil.combine(whereClauses));
  ajNode.resolveSortDirection();
  return ajNode;
}
