{
  assert(m_parsedStmt.m_joinTree != null);
  List<JoinNode> subTrees=m_parsedStmt.m_joinTree.extractSubTrees();
  int tableNameIdx=0;
  List<JoinNode> finalSubTrees=new ArrayList<JoinNode>();
  for (int i=subTrees.size() - 1; i >= 0; --i) {
    JoinNode subTree=subTrees.get(i);
    List<JoinNode> subTableNodes=subTree.generateLeafNodesJoinOrder();
    JoinNode joinOrderSubTree;
    if ((subTree instanceof BranchNode) && ((BranchNode)subTree).getJoinType() != JoinType.INNER) {
      joinOrderSubTree=subTree;
      for (      JoinNode tableNode : subTableNodes) {
        if (tableNode.getId() >= 0) {
          String tableAlias=tableNode.getTableAlias();
          if (!tableAliases.get(tableNameIdx++).equals(tableAlias)) {
            return false;
          }
        }
      }
    }
 else {
      Map<String,JoinNode> nodeNameMap=new HashMap<String,JoinNode>();
      for (      JoinNode tableNode : subTableNodes) {
        if (tableNode.getId() >= 0) {
          nodeNameMap.put(tableNode.getTableAlias(),tableNode);
        }
      }
      List<JoinNode> joinOrderSubNodes=new ArrayList<JoinNode>();
      for (int j=0; j < subTableNodes.size(); ++j) {
        if (subTableNodes.get(j).getId() >= 0) {
          assert(tableNameIdx < tableAliases.size());
          String tableAlias=tableAliases.get(tableNameIdx);
          if (tableAlias == null || !nodeNameMap.containsKey(tableAlias)) {
            return false;
          }
          joinOrderSubNodes.add(nodeNameMap.get(tableAlias));
          ++tableNameIdx;
        }
 else {
          joinOrderSubNodes.add(subTableNodes.get(j));
        }
      }
      joinOrderSubTree=JoinNode.reconstructJoinTreeFromTableNodes(joinOrderSubNodes);
      AbstractExpression combinedWhereExpr=subTree.getAllInnerJoinFilters();
      if (combinedWhereExpr != null) {
        joinOrderSubTree.setWhereExpression((AbstractExpression)combinedWhereExpr.clone());
      }
      joinOrderSubTree.setId(subTree.getId());
    }
    finalSubTrees.add(0,joinOrderSubTree);
  }
  m_parsedStmt.m_joinTree=JoinNode.reconstructJoinTreeFromSubTrees(finalSubTrees);
  return true;
}
