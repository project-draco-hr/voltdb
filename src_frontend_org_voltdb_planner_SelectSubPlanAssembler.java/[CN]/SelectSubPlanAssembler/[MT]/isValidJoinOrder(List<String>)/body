{
  assert(m_parsedStmt.joinTree != null);
  List<JoinNode> subTrees=m_parsedStmt.joinTree.extractSubTrees();
  int tableNameIdx=0;
  List<JoinNode> finalSubTrees=new ArrayList<JoinNode>();
  for (int i=subTrees.size() - 1; i >= 0; --i) {
    JoinNode subTree=subTrees.get(i);
    List<JoinNode> subTableNodes=subTree.generateLeafNodesJoinOrder();
    if (subTree.getJoinType() == JoinType.INNER) {
      Map<Integer,JoinNode> nodeNameMap=new HashMap<Integer,JoinNode>();
      for (      JoinNode tableNode : subTableNodes) {
        assert(tableNode.getTableAliasIndex() != StmtTableScan.NULL_ALIAS_INDEX);
        if (tableNode.getId() >= 0) {
          nodeNameMap.put(tableNode.getTableAliasIndex(),tableNode);
        }
      }
      List<JoinNode> joinOrderSubNodes=new ArrayList<JoinNode>();
      for (int j=0; j < subTableNodes.size(); ++j) {
        if (subTableNodes.get(j).getId() >= 0) {
          assert(tableNameIdx < tableAliases.size());
          String tableAlias=tableAliases.get(tableNameIdx);
          Integer aliasIdx=m_parsedStmt.tableAliasIndexMap.get(tableAlias);
          if (aliasIdx == null || !nodeNameMap.containsKey(aliasIdx)) {
            return false;
          }
          joinOrderSubNodes.add(nodeNameMap.get(aliasIdx));
          ++tableNameIdx;
        }
 else {
          joinOrderSubNodes.add(subTableNodes.get(j));
        }
      }
      JoinNode joinOrderSubTree=JoinNode.reconstructJoinTreeFromTableNodes(joinOrderSubNodes);
      AbstractExpression combinedWhereExpr=subTree.getAllInnerJoinFilters();
      if (combinedWhereExpr != null) {
        joinOrderSubTree.setWhereExpression((AbstractExpression)combinedWhereExpr.clone());
      }
      joinOrderSubTree.setId(subTree.getId());
      finalSubTrees.add(0,joinOrderSubTree);
    }
 else {
      for (      JoinNode tableNode : subTableNodes) {
        assert(tableNode.getTableAliasIndex() != StmtTableScan.NULL_ALIAS_INDEX && tableNameIdx < tableAliases.size());
        if (tableNode.getId() >= 0) {
          assert(m_parsedStmt.stmtCache.size() > tableNode.getTableAliasIndex());
          StmtTableScan tableCache=m_parsedStmt.stmtCache.get(tableNode.getTableAliasIndex());
          if (!tableAliases.get(tableNameIdx++).equals(tableCache.getTableAlias())) {
            return false;
          }
        }
      }
      finalSubTrees.add(0,subTree);
    }
  }
  m_parsedStmt.joinTree=JoinNode.reconstructJoinTreeFromSubTrees(finalSubTrees);
  return true;
}
