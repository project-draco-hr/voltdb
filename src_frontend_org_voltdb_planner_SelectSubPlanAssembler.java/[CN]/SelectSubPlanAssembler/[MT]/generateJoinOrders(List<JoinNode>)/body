{
  ArrayList<ArrayList<JoinNode>> permutations=new ArrayList<ArrayList<JoinNode>>();
  for (  JoinNode subTree : subTrees) {
    ArrayList<JoinNode> treePermutations=new ArrayList<JoinNode>();
    if (subTree.m_joinType != JoinType.INNER) {
      treePermutations.add(subTree);
    }
 else {
      List<JoinNode> tableNodes=subTree.generateLeafNodesJoinOrder();
      List<List<JoinNode>> joinOrders=PermutationGenerator.generatePurmutations(tableNodes);
      List<JoinNode> newTrees=new ArrayList<JoinNode>();
      for (      List<JoinNode> joinOrder : joinOrders) {
        newTrees.add(JoinNode.reconstructJoinTreeFromTableNodes(joinOrder));
      }
      AbstractExpression combinedWhereExpr=subTree.getAllInnerJoinFilters();
      for (      JoinNode newTree : newTrees) {
        if (combinedWhereExpr != null) {
          newTree.m_whereExpr=(AbstractExpression)combinedWhereExpr.clone();
        }
        newTree.m_id=subTree.m_id;
        treePermutations.add(newTree);
      }
    }
    permutations.add(treePermutations);
  }
  return permutations;
}
