{
  assert(parentNode.m_rightNode != null);
  JoinNode innerChildNode=parentNode.m_rightNode;
  if (parentNode.m_joinType == JoinType.INNER) {
    parentNode.m_joinInnerOuterList.addAll(parentNode.m_whereInnerOuterList);
    parentNode.m_whereInnerOuterList.clear();
    parentNode.m_joinInnerList.addAll(parentNode.m_whereInnerList);
    parentNode.m_whereInnerList.clear();
  }
  if (innerChildNode.m_table == null) {
    assert(innerChildNode.m_leftNode != null && innerChildNode.m_rightNode != null);
    generateOuterAccessPaths(innerChildNode);
    generateInnerAccessPaths(innerChildNode);
    innerChildNode.m_accessPaths.add(getRelevantNaivePath(parentNode.m_joinInnerOuterList,parentNode.m_joinInnerList));
    return;
  }
  if (parentNode.m_joinType == JoinType.INNER || innerChildNode.m_table.getIsreplicated() || canDeferSendReceivePairForNode()) {
    innerChildNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(innerChildNode.m_table,parentNode.m_joinInnerOuterList,parentNode.m_joinInnerList,null));
  }
 else {
    innerChildNode.m_accessPaths.addAll(getRelevantAccessPathsForTable(innerChildNode.m_table,null,parentNode.m_joinInnerList,parentNode.m_joinInnerOuterList));
  }
  assert(innerChildNode.m_accessPaths.size() > 0);
}
