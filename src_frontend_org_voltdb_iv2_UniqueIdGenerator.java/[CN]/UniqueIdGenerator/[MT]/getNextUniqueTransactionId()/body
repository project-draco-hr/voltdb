{
  long currentTime=m_clock.get() + m_timestampTestingSalt;
  long currentTimePlusOffset=currentTime + m_backwardsTimeAdjustmentOffset;
  if (currentTime == lastUsedTime) {
    counterValue++;
    if (counterValue > COUNTER_MAX_VALUE) {
      while (currentTime == lastUsedTime)       currentTime=m_clock.get();
      lastUsedTime=currentTime;
      counterValue=0;
    }
  }
 else {
    if (currentTime < lastUsedTime && currentTimePlusOffset < lastUsedTime) {
      VoltLogger log=new VoltLogger("HOST");
      double diffSeconds=(lastUsedTime - currentTime) / 1000.0;
      String msg=String.format("Initiator time moved backwards from: %d to %d, a difference of %.2f seconds.",lastUsedTime,currentTime,diffSeconds);
      log.error(msg);
      System.err.println(msg);
      if ((lastUsedTime - currentTime) < BACKWARD_TIME_FORGIVENESS_WINDOW_MS) {
        log.info("This node will delay any stored procedures sent to it.");
        log.info(String.format("This node will resume full operation in  %.2f seconds.",diffSeconds));
        long count=BACKWARD_TIME_FORGIVENESS_WINDOW_MS;
        while ((currentTime <= lastUsedTime) && (count-- > 0)) {
          try {
            m_clock.sleep(1);
          }
 catch (          InterruptedException e) {
          }
          currentTime=m_clock.get();
        }
        if (count < 0) {
          VoltDB.crashLocalVoltDB("VoltDB was unable to recover after the system time was externally negatively adusted. " + "It is possible that there is a serious system time or NTP error. ",false,null);
        }
      }
 else {
        m_backwardsTimeAdjustmentOffset=lastUsedTime - currentTime + 1;
        currentTimePlusOffset=currentTime + m_backwardsTimeAdjustmentOffset;
        assert(currentTimePlusOffset > lastUsedTime);
        double offsetSeconds=m_backwardsTimeAdjustmentOffset / 1000.0;
        msg=String.format("Continuing operation by adding an offset of %.2f to system time. " + "This means the time and unique IDs provided by VoltProcedure " + " (getUniqueId, getTransactionId, getTransactionTime) "+ "will not correctly reflect wall clock time as reported by the system clock."+ " For severe shifts you could see duplicate "+ "IDs or time moving backwards when the server is"+ " restarted causing the offset to be discarded.",offsetSeconds);
        log.error(msg);
        System.err.println(msg);
      }
    }
 else     if (currentTime > lastUsedTime && m_backwardsTimeAdjustmentOffset != 0) {
      m_backwardsTimeAdjustmentOffset=0;
      currentTimePlusOffset=currentTime;
      VoltLogger log=new VoltLogger("HOST");
      log.error("Host clock seems to have adjusted again to make the offset unecessary");
      System.err.println("Host clock seems to have adjusted again to make the offset unecessary");
    }
    currentTime=currentTimePlusOffset;
    lastUsedTime=currentTime;
    counterValue=0;
  }
  lastTxnId=makeIdFromComponents(currentTime,counterValue,initiatorId);
  return lastTxnId;
}
