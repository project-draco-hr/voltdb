{
  long currentTime=m_clock.get() + m_timestampTestingSalt;
  long currentTimePlusOffset=currentTime + m_backwardsTimeAdjustmentOffset;
  if (currentTime == lastUsedTime) {
    counterValue++;
    if (counterValue > COUNTER_MAX_VALUE) {
      while (currentTime == lastUsedTime)       currentTime=m_clock.get();
      lastUsedTime=currentTime;
      counterValue=0;
    }
  }
 else {
    if (currentTime < lastUsedTime && currentTimePlusOffset < lastUsedTime) {
      double diffSeconds=(lastUsedTime - currentTime) / 1000.0;
      StringBuilder msg=new StringBuilder(256);
      if ((lastUsedTime - currentTime) < BACKWARD_TIME_FORGIVENESS_WINDOW_MS) {
        msg.append("UniqueIdGenerator time moved backwards from: %d to %d, a difference of %.2f seconds.");
        msg.append("\nThis node will delay any stored procedures sent to it.");
        msg.append("\nThis node will resume full operation in  %.2f seconds.");
        log.rateLimitedLog(60,Level.INFO,null,msg.toString(),lastUsedTime,currentTime,diffSeconds,diffSeconds);
        long count=BACKWARD_TIME_FORGIVENESS_WINDOW_MS;
        while ((currentTime <= lastUsedTime) && (count-- > 0)) {
          try {
            m_clock.sleep(1);
          }
 catch (          InterruptedException e) {
          }
          currentTime=m_clock.get();
        }
        if (count < 0) {
          VoltDB.crashLocalVoltDB("VoltDB was unable to recover after the system time was externally negatively adusted. " + "It is possible that there is a serious system time or NTP error. ",false,null);
        }
      }
 else {
        m_backwardsTimeAdjustmentOffset=lastUsedTime - currentTime + 1;
        currentTimePlusOffset=currentTime + m_backwardsTimeAdjustmentOffset;
        assert(currentTimePlusOffset > lastUsedTime);
        double offsetSeconds=m_backwardsTimeAdjustmentOffset / 1000.0D;
        msg.append("UniqueIdGenerator time moved backwards from: %d to %d, a difference of %.2f seconds.");
        msg.append("\nContinuing operation by adding an offset of %.2f to system time. ");
        msg.append("This means the time and unique IDs provided by VoltProcedure ");
        msg.append(" (getUniqueId, getTransactionId, getTransactionTime) ");
        msg.append("will not correctly reflect wall clock time as reported by the system clock.");
        msg.append(" For severe shifts you could see duplicate ");
        msg.append("IDs or time moving backwards when the server is");
        msg.append(" restarted causing the offset to be discarded.");
        log.rateLimitedLog(60,Level.ERROR,null,msg.toString(),lastUsedTime,currentTime,diffSeconds,offsetSeconds);
      }
    }
 else     if (currentTime > lastUsedTime && m_backwardsTimeAdjustmentOffset != 0) {
      m_backwardsTimeAdjustmentOffset=0;
      currentTimePlusOffset=currentTime;
      log.error("Host clock seems to have adjusted again to make the offset unecessary");
      System.err.println("Host clock seems to have adjusted again to make the offset unecessary");
    }
    currentTime=currentTimePlusOffset;
    lastUsedTime=currentTime;
    counterValue=0;
  }
  lastUniqueId=makeIdFromComponents(currentTime,counterValue,partitionId);
  return lastUniqueId;
}
