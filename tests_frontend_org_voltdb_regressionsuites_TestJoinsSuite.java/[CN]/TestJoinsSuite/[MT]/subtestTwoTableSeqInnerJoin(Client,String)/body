{
  client.callProcedure("R1.INSERT",1,1,1);
  client.callProcedure("R1.INSERT",1,1,1);
  client.callProcedure("R1.INSERT",2,2,2);
  client.callProcedure("R1.INSERT",3,3,3);
  client.callProcedure("R2.INSERT",1,3);
  client.callProcedure("R2.INSERT",3,4);
  String query;
  query="SELECT * FROM R1 JOIN R2 " + "ON R1.A " + joinOp + " R2.A;";
  validateRowCount(client,query,3);
  query="SELECT * FROM R1 JOIN R2 USING(A);";
  validateRowCount(client,query,3);
  client.callProcedure("P1.INSERT",1,1);
  client.callProcedure("P1.INSERT",1,1);
  client.callProcedure("P1.INSERT",2,2);
  client.callProcedure("P1.INSERT",3,3);
  query="SELECT * FROM P1 JOIN R2 " + "ON P1.A " + joinOp + " R2.A;";
  validateRowCount(client,query,3);
  query="SELECT * FROM P1 JOIN R2 ON P1.C " + joinOp + " R2.C";
  final int BASELINE_COUNT=1;
  validateRowCount(client,query,BASELINE_COUNT);
  client.callProcedure("P1.INSERT",4,null);
  client.callProcedure("P1.INSERT",5,null);
  final int LHS_NULL_COUNT=2;
  validateRowCount(client,query,BASELINE_COUNT);
  client.callProcedure("R2.INSERT",6,null);
  client.callProcedure("R2.INSERT",7,null);
  client.callProcedure("R2.INSERT",8,null);
  final int RHS_NULL_COUNT=3;
  validateRowCount(client,query,joinOp.equals("=") ? BASELINE_COUNT : (BASELINE_COUNT + LHS_NULL_COUNT * RHS_NULL_COUNT));
}
