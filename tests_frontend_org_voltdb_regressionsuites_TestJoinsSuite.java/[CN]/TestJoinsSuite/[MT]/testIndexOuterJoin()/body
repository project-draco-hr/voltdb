{
  Client client=this.getClient();
  client.callProcedure("InsertR2",1,1);
  client.callProcedure("InsertR2",2,2);
  client.callProcedure("InsertR2",3,3);
  client.callProcedure("InsertR2",4,4);
  VoltTable result=client.callProcedure("@AdHoc","select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A").getResults()[0];
  VoltTableRow row=result.fetchRow(2);
  assertEquals(3,row.getLong(1));
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  client.callProcedure("InsertR3",1,1);
  client.callProcedure("InsertR3",2,2);
  client.callProcedure("InsertR3",5,5);
  result=client.callProcedure("@AdHoc","select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R3 RIGHT JOIN R2 ON R3.A = R2.A").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  client.callProcedure("InsertP2",1,1);
  client.callProcedure("InsertP2",2,2);
  client.callProcedure("InsertP2",3,3);
  client.callProcedure("InsertP2",4,4);
  result=client.callProcedure("@AdHoc","select * FROM P2 LEFT JOIN R3 ON R3.A = P2.A").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A AND R2.C < 0").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R3 RIGHT JOIN R2 ON R3.A = R2.A AND R2.C < 0").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM P2 LEFT JOIN R3 ON R3.A = P2.A AND P2.E < 0").getResults()[0];
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A AND R3.A > 1").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R3 RIGHT JOIN R2 ON R3.A = R2.A AND R3.A > 1").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A WHERE R3.A IS NULL").getResults()[0];
  System.out.println(result.toString());
  assertEquals(2,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R3 RIGHT JOIN R2 ON R3.A = R2.A WHERE R3.A IS NULL").getResults()[0];
  System.out.println(result.toString());
  assertEquals(2,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R3 RIGHT JOIN P2 ON R3.A = P2.A WHERE R3.A IS NULL").getResults()[0];
  System.out.println(result.toString());
  assertEquals(2,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A WHERE R2.C < 0").getResults()[0];
  System.out.println(result.toString());
  assertEquals(0,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM P2 LEFT JOIN R3 ON R3.A = P2.A WHERE P2.E < 0").getResults()[0];
  System.out.println(result.toString());
  assertEquals(0,result.getRowCount());
}
