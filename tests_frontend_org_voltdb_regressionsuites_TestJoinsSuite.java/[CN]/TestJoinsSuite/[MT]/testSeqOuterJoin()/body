{
  Client client=this.getClient();
  client.callProcedure("InsertR1",1,1,1);
  client.callProcedure("InsertR1",1,2,1);
  client.callProcedure("InsertR1",2,2,2);
  client.callProcedure("InsertR1",-1,3,3);
  VoltTable result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  VoltTableRow row=result.fetchRow(2);
  assertEquals(2,row.getLong(1));
  client.callProcedure("InsertR2",1,1);
  client.callProcedure("InsertR2",1,3);
  client.callProcedure("InsertR2",3,null);
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R2 RIGHT JOIN R1 ON R1.A = R2.C").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  client.callProcedure("InsertP1",1,1);
  client.callProcedure("InsertP1",1,2);
  client.callProcedure("InsertP1",2,2);
  client.callProcedure("InsertP1",-1,3);
  result=client.callProcedure("@AdHoc","select * FROM P1 LEFT JOIN R2 ON P1.A = R2.C").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C AND R1.C = 1").getResults()[0];
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R2 RIGHT JOIN R1 ON R1.A = R2.C AND R1.C = 1").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R2 RIGHT JOIN P1 ON P1.A = R2.C AND P1.C = 1").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C AND R2.A = 100").getResults()[0];
  System.out.println(result.toString());
  assertEquals(4,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C WHERE R2.A = 100").getResults()[0];
  System.out.println(result.toString());
  assertEquals(0,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM P1 LEFT JOIN R2 ON P1.A = R2.C WHERE R2.A = 100").getResults()[0];
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C WHERE R1.C = 1").getResults()[0];
  System.out.println(result.toString());
  assertEquals(1,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C WHERE R1.A = -1").getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","select * FROM P1 LEFT JOIN R2 ON P1.A = R2.C WHERE P1.A = -1").getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C WHERE R1.A = 1").getResults()[0];
  System.out.println(result.toString());
  assertEquals(2,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C WHERE R2.A = 2").getResults()[0];
  System.out.println(result.toString());
  assertEquals(0,result.getRowCount());
  result=client.callProcedure("@AdHoc","select * FROM R1 LEFT JOIN R2 ON R1.A = R2.C WHERE R2.A is NULL").getResults()[0];
  System.out.println(result.toString());
  assertEquals(2,result.getRowCount());
}
