{
  dml=dml.trim();
  String indicator=dml.substring(0,1).toLowerCase();
  if (indicator.equals("s") || indicator.equals("(")) {
    try {
      Statement stmt=dbconn.createStatement();
      sqlLog.l7dlog(Level.DEBUG,LogKeys.sql_Backend_ExecutingDML.name(),new Object[]{dml},null);
      sqlLog.debug("Executing " + dml);
      ResultSet rs=stmt.executeQuery(dml);
      ResultSetMetaData rsmd=rs.getMetaData();
      VoltTable.ColumnInfo[] columns=new VoltTable.ColumnInfo[rsmd.getColumnCount()];
      for (int i=1; i <= rsmd.getColumnCount(); i++) {
        String colname=rsmd.getColumnLabel(i);
        String type=rsmd.getColumnTypeName(i);
        if (type.equals("VARCHAR"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.STRING);
 else         if (type.equals("TINYINT"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.TINYINT);
 else         if (type.equals("SMALLINT"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.SMALLINT);
 else         if (type.equals("INTEGER"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.INTEGER);
 else         if (type.equals("BIGINT"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.BIGINT);
 else         if (type.equals("DECIMAL"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.DECIMAL);
 else         if (type.equals("FLOAT"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.FLOAT);
 else         if (type.equals("TIMESTAMP"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.TIMESTAMP);
 else         if (type.equals("VARBINARY"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.VARBINARY);
 else         if (type.equals("CHARACTER"))         columns[i - 1]=new VoltTable.ColumnInfo(colname,VoltType.STRING);
 else         throw new ExpectedProcedureException("Trying to create a column in Backend with a (currently) unsupported type: " + type);
      }
      VoltTable table=new VoltTable(columns);
      while (rs.next()) {
        Object[] row=new Object[table.getColumnCount()];
        for (int i=0; i < table.getColumnCount(); i++) {
          if (table.getColumnType(i) == VoltType.STRING)           row[i]=rs.getString(i + 1);
 else           if (table.getColumnType(i) == VoltType.TINYINT)           row[i]=rs.getByte(i + 1);
 else           if (table.getColumnType(i) == VoltType.SMALLINT)           row[i]=rs.getShort(i + 1);
 else           if (table.getColumnType(i) == VoltType.INTEGER)           row[i]=rs.getInt(i + 1);
 else           if (table.getColumnType(i) == VoltType.BIGINT)           row[i]=rs.getLong(i + 1);
 else           if (table.getColumnType(i) == VoltType.DECIMAL)           row[i]=rs.getBigDecimal(i + 1);
 else           if (table.getColumnType(i) == VoltType.FLOAT)           row[i]=rs.getDouble(i + 1);
 else           if (table.getColumnType(i) == VoltType.VARBINARY)           row[i]=rs.getBytes(i + 1);
 else           if (table.getColumnType(i) == VoltType.TIMESTAMP) {
            Timestamp t=rs.getTimestamp(i + 1);
            if (t == null) {
              row[i]=null;
            }
 else {
              row[i]=new org.voltdb.types.TimestampType(t.getTime() * 1000);
            }
          }
 else {
            throw new ExpectedProcedureException("Trying to read a (currently) unsupported type from a JDBC resultset.");
          }
        }
        table.addRow(row);
      }
      stmt.close();
      rs.close();
      return table;
    }
 catch (    Exception e) {
      if (e instanceof ExpectedProcedureException) {
        throw (ExpectedProcedureException)e;
      }
      sqlLog.l7dlog(Level.TRACE,LogKeys.sql_Backend_DmlError.name(),e);
      throw new ExpectedProcedureException("HSQLDB Backend DML Error ",e);
    }
  }
 else {
    try {
      Statement stmt=dbconn.createStatement();
      sqlLog.debug("Executing: " + dml);
      long ucount=stmt.executeUpdate(dml);
      sqlLog.debug("  result: " + String.valueOf(ucount));
      VoltTable table=new VoltTable(new VoltTable.ColumnInfo("",VoltType.BIGINT));
      table.addRow(ucount);
      return table;
    }
 catch (    SQLException e) {
      if (e.getMessage().contains("constraint")) {
        sqlLog.l7dlog(Level.TRACE,LogKeys.sql_Backend_ConvertingHSQLExtoCFEx.name(),e);
        final byte messageBytes[]=e.getMessage().getBytes();
        ByteBuffer b=ByteBuffer.allocate(25 + messageBytes.length);
        b.putInt(messageBytes.length);
        b.put(messageBytes);
        b.put(e.getSQLState().getBytes());
        b.putInt(0);
        try {
          FastSerializer.writeString("HSQL",b);
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
        b.putInt(0);
        b.rewind();
        throw new ConstraintFailureException(b);
      }
 else {
        sqlLog.l7dlog(Level.TRACE,LogKeys.sql_Backend_DmlError.name(),e);
        throw new ExpectedProcedureException("HSQLDB Backend DML Error ",e);
      }
    }
catch (    Exception e) {
      sqlLog.l7dlog(Level.TRACE,LogKeys.sql_Backend_DmlError.name(),e);
      throw new ExpectedProcedureException("HSQLDB Backend DML Error ",e);
    }
  }
}
