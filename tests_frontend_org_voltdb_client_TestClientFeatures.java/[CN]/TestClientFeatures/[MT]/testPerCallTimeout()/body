{
  CSL csl=new CSL();
  ClientConfig config=new ClientConfig(null,null,csl);
  config.setProcedureCallTimeout(500);
  Client client=ClientFactory.createClient(config);
  client.createConnection("localhost");
  ClientResponse response=client.callProcedure("ArbitraryDurationProc",0);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  try {
    client.callProcedure("ArbitraryDurationProc",3000);
    fail();
  }
 catch (  ProcCallException e) {
    assertTrue(e.getMessage().startsWith("No response received in the allotted time"));
  }
  assertTrue(csl.waitForCall(6000));
  CatalogBuilder builder=new CatalogBuilder();
  builder.addSchema(getClass().getResource("clientfeatures-wellindexed.ddl"));
  builder.addProcedures(ArbitraryDurationProc.class);
  byte[] catalogToUpdate=builder.compileToBytes();
  assert(catalogToUpdate != null);
  VoltTable t=TableHelper.quickTable("indexme (pkey:bigint, " + "c01:varchar63, " + "c02:varchar63, "+ "c03:varchar63, "+ "c04:varchar63, "+ "c05:varchar63, "+ "c06:varchar63, "+ "c07:varchar63, "+ "c08:varchar63, "+ "c09:varchar63, "+ "c10:varchar63) "+ "PKEY(pkey)");
  Client client2=ClientFactory.createClient();
  client2.createConnection("localhost");
  TableHelper.fillTableWithBigintPkey(t,400,client2,new Random(),0,1);
  long start=System.nanoTime();
  response=client.callProcedure("@UpdateApplicationCatalog",catalogToUpdate,depBuilder.getXML());
  double duration=(System.nanoTime() - start) / 1000000000.0;
  System.out.printf("Catalog update duration in seconds: %.2f\n",duration);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  start=System.nanoTime();
  response=client.callProcedure("@SnapshotSave",Configuration.getPathToCatalogForTest(""),"slow",1);
  duration=(System.nanoTime() - start) / 1000000000.0;
  System.out.printf("Snapshot save duration in seconds: %.2f\n",duration);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
}
