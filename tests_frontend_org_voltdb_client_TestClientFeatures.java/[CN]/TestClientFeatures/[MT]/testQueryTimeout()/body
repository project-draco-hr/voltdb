{
  CSL csl=new CSL();
  ClientConfig config=new ClientConfig(null,null,csl);
  config.setProcedureCallTimeout(0);
  Client client=ClientFactory.createClient(config);
  client.createConnection("localhost");
  ClientResponse response=client.callProcedure("ArbitraryDurationProc",0);
  assertEquals(ClientResponse.SUCCESS,response.getStatus());
  boolean exceptionCalled=false;
  try {
    ((ClientImpl)client).callProcedureWithTimeout("ArbitraryDurationProc",3,TimeUnit.SECONDS,6000);
  }
 catch (  ProcCallException ex) {
    assertEquals(ClientResponse.CONNECTION_TIMEOUT,ex.m_response.getStatus());
    exceptionCalled=true;
  }
  assertTrue(exceptionCalled);
  exceptionCalled=false;
  try {
    ((ClientImpl)client).callProcedureWithTimeout("ArbitraryDurationProc",30,TimeUnit.SECONDS,6000);
  }
 catch (  ProcCallException ex) {
    exceptionCalled=true;
  }
  assertFalse(exceptionCalled);
  try {
    ((ClientImpl)client).callProcedureWithTimeout("ArbitraryDurationProc",0,TimeUnit.SECONDS,2000);
  }
 catch (  ProcCallException ex) {
    exceptionCalled=true;
  }
  assertFalse(exceptionCalled);
  final CountDownLatch latch=new CountDownLatch(1);
class MyCallback implements ProcedureCallback {
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      assert(clientResponse.getStatus() == ClientResponse.CONNECTION_TIMEOUT);
      System.out.println("Async Query timeout called..");
      latch.countDown();
    }
  }
  ((ClientImpl)client).callProcedureWithTimeout(new MyCallback(),"ArbitraryDurationProc",3,TimeUnit.SECONDS,6000);
  try {
    latch.await();
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
    fail();
  }
  final CountDownLatch latch2=new CountDownLatch(1);
class MyCallback2 implements ProcedureCallback {
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      assert(clientResponse.getStatus() == ClientResponse.SUCCESS);
      latch2.countDown();
    }
  }
  ((ClientImpl)client).callProcedureWithTimeout(new MyCallback2(),"ArbitraryDurationProc",30,TimeUnit.SECONDS,6000);
  try {
    latch2.await();
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
    fail();
  }
  final CountDownLatch latch3=new CountDownLatch(1);
class MyCallback3 implements ProcedureCallback {
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      assert(clientResponse.getStatus() == ClientResponse.SUCCESS);
      latch3.countDown();
    }
  }
  ((ClientImpl)client).callProcedureWithTimeout(new MyCallback3(),"ArbitraryDurationProc",0,TimeUnit.SECONDS,6000);
  try {
    latch3.await();
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
    fail();
  }
  final CountDownLatch latch4=new CountDownLatch(1);
class MyCallback4 implements ProcedureCallback {
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      assert(clientResponse.getStatus() == ClientResponse.CONNECTION_TIMEOUT);
      latch4.countDown();
    }
  }
  ((ClientImpl)client).callProcedureWithTimeout(new MyCallback4(),"ArbitraryDurationProc",50,TimeUnit.NANOSECONDS,6000);
  final long start=System.nanoTime();
  try {
    latch4.await();
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
    fail();
  }
  final long delta=System.nanoTime() - start;
  assertTrue(TimeUnit.NANOSECONDS.toSeconds(delta) < 1);
}
