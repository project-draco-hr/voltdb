{
  int number_of_partitions=4;
  HashSet<Integer> partitionsToDistribute=new HashSet<Integer>();
  for (int i=0; i < number_of_partitions; ++i) {
    addSiteToTestData(0,0,i,4);
    addSiteToTestData(i,i,i,4);
    partitionsToDistribute.add(i);
    addSiteInfoToCatalog(i,i,i,true);
  }
  m_catalogCreator.addSite(number_of_partitions,0,0,false);
  m_catalogCreator.addSite(number_of_partitions + 1,1,0,false);
  m_siteInput.resetRowPosition();
  while (m_siteInput.advanceRow()) {
    try {
      m_state.addHostData(m_siteInput);
    }
 catch (    IOException e) {
      e.printStackTrace();
      assertTrue(false);
    }
  }
  Table test_table=m_catalogCreator.getTable(TABLE_NAME);
  SynthesizedPlanFragment[] test_plan=m_state.generateRestorePlan(test_table,m_catalogCreator.getCluster().getSites());
  checkPlanFragments(test_plan,partitionsToDistribute);
}
