{
  assertEquals(m_state.getTableName(),TABLE_NAME);
  addSiteToTestData(0,1,0,4);
  addSiteToTestData(0,1,1,4);
  addSiteToTestData(1,1,1,4);
  addSiteToTestData(1,1,0,4);
  addSiteToTestData(1,2,2,4);
  addSiteToTestData(2,3,3,4);
  addSiteToTestData(2,3,0,4);
  addSiteToTestData(3,3,3,4);
  addSiteToTestData(3,3,0,4);
  m_siteInput.resetRowPosition();
  while (m_siteInput.advanceRow()) {
    try {
      m_state.addHostData(m_siteInput);
    }
 catch (    IOException e) {
      e.printStackTrace();
      assertTrue(false);
    }
  }
  assertEquals(m_state.getTotalPartitions(),4);
  assertTrue(m_state.isConsistent());
  Set<Integer> partitions=m_state.getPartitionSet();
  assertEquals(partitions.size(),4);
  assertTrue(partitions.contains(0));
  assertTrue(partitions.contains(1));
  assertTrue(partitions.contains(2));
  assertTrue(partitions.contains(3));
  Set<Pair<Integer,Integer>> host_0_partitions=m_state.getPartitionsAtHost(0);
  assertEquals(host_0_partitions.size(),2);
  assertTrue(host_0_partitions.contains(new Pair<Integer,Integer>(0,1)));
  assertTrue(host_0_partitions.contains(new Pair<Integer,Integer>(1,1)));
  Set<Pair<Integer,Integer>> host_1_partitions=m_state.getPartitionsAtHost(1);
  assertEquals(host_1_partitions.size(),3);
  assertTrue(host_1_partitions.contains(new Pair<Integer,Integer>(1,1)));
  assertTrue(host_1_partitions.contains(new Pair<Integer,Integer>(0,1)));
  assertTrue(host_1_partitions.contains(new Pair<Integer,Integer>(2,2)));
  Set<Pair<Integer,Integer>> host_2_partitions=m_state.getPartitionsAtHost(2);
  assertEquals(host_2_partitions.size(),2);
  assertTrue(host_2_partitions.contains(new Pair<Integer,Integer>(3,3)));
  assertTrue(host_2_partitions.contains(new Pair<Integer,Integer>(0,3)));
  Set<Pair<Integer,Integer>> host_3_partitions=m_state.getPartitionsAtHost(2);
  assertEquals(host_3_partitions.size(),2);
  assertTrue(host_3_partitions.contains(new Pair<Integer,Integer>(3,3)));
  assertTrue(host_3_partitions.contains(new Pair<Integer,Integer>(0,3)));
}
