{
  VoltDB.replaceVoltDBInstanceForTest(m_mockVoltDB);
  Table table=m_mockVoltDB.getCatalogContext().database.getTables().get("TableName");
  ExportDataSource s=new ExportDataSource(null,"database",table.getTypeName(),m_part,m_site,table.getSignature(),0,table.getColumns(),"/tmp");
  ExportProtoMessage m=new ExportProtoMessage(0,m_part,table.getSignature());
  RawProcessor.ExportInternalMessage pair=new RawProcessor.ExportInternalMessage(null,m);
  final AtomicReference<ExportInternalMessage> ref=new AtomicReference<ExportInternalMessage>();
  ExportManager.setInstanceForTest(new ExportManager(){
    @Override public void queueMessage(    ExportInternalMessage mbp){
      ref.set(mbp);
    }
  }
);
  m.poll();
  s.exportAction(pair);
  ExportInternalMessage mbp=ref.get();
  assertEquals(mbp.m_m.getAckOffset(),0);
  assertEquals(mbp.m_m.m_data.getInt(),0);
  ByteBuffer firstBuffer=ByteBuffer.allocate(MAGIC_TUPLE_SIZE * 3);
  s.pushExportBuffer(0,0,firstBuffer,false,false);
  m.ack(MAGIC_TUPLE_SIZE * 2);
  s.exportAction(pair);
  m.close();
  s.exportAction(pair);
  mbp=ref.get();
  assertEquals(mbp.m_m.getAckOffset(),MAGIC_TUPLE_SIZE * 3);
  mbp.m_m.m_data.order(java.nio.ByteOrder.LITTLE_ENDIAN);
  assertEquals(mbp.m_m.m_data.getInt(),MAGIC_TUPLE_SIZE);
  m=new ExportProtoMessage(0,m_part,table.getSignature());
  m.poll();
  pair=new RawProcessor.ExportInternalMessage(null,m);
  m.ack(MAGIC_TUPLE_SIZE * 10);
  s.exportAction(pair);
  mbp=ref.get();
  assertEquals(mbp.m_m.getAckOffset(),MAGIC_TUPLE_SIZE * 3);
  assertEquals(mbp.m_m.m_data.getInt(),0);
  ByteBuffer secondBuffer=ByteBuffer.allocate(MAGIC_TUPLE_SIZE * 6);
  s.pushExportBuffer(MAGIC_TUPLE_SIZE * 3,0,secondBuffer,false,false);
  m.ack(MAGIC_TUPLE_SIZE * 3);
  s.exportAction(pair);
  mbp=ref.get();
  assertEquals(mbp.m_m.getAckOffset(),MAGIC_TUPLE_SIZE * 9);
  mbp.m_m.m_data.order(java.nio.ByteOrder.LITTLE_ENDIAN);
  assertEquals(mbp.m_m.m_data.getInt(),MAGIC_TUPLE_SIZE * 6);
}
