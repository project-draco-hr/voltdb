{
  VoltDB.replaceVoltDBInstanceForTest(m_mockVoltDB);
  Table table=m_mockVoltDB.getCatalogContext().database.getTables().get("TableName");
  ExportDataSource s=new ExportDataSource(null,"database",table.getTypeName(),m_part,m_site,table.getSignature(),0,table.getColumns(),"/tmp");
  ByteBuffer foo=ByteBuffer.allocate(20);
  s.pushExportBuffer(23,0,foo.duplicate(),false,false);
  assertEquals(s.sizeInBytes(),20);
  s.pushExportBuffer(43,0,foo.duplicate(),false,false);
  assertEquals(s.sizeInBytes(),40);
  s.pushExportBuffer(63,0,foo.duplicate(),false,false);
  assertEquals(s.sizeInBytes(),72);
  s.pushExportBuffer(63,0,null,true,false);
  assertEquals(96,s.sizeInBytes());
  ExportProtoMessage m=new ExportProtoMessage(0,m_part,table.getSignature());
  final AtomicReference<ExportProtoMessage> ref=new AtomicReference<ExportProtoMessage>();
  ExportStateBlock esb=new ExportStateBlock(){
    @Override public void event(    ExportProtoMessage m){
      ref.set(m);
    }
  }
;
  ExportInternalMessage pair=new ExportInternalMessage(esb,m);
  m.poll();
  s.exportAction(pair);
  assertEquals(96,s.sizeInBytes());
  m=ref.get();
  assertEquals(m_part,m.m_partitionId);
  assertEquals(table.getSignature(),m.m_signature);
  assertEquals(43,m.m_offset);
  foo=ByteBuffer.allocate(24);
  foo.order(ByteOrder.LITTLE_ENDIAN);
  foo.putInt(20);
  foo.position(0);
  assertEquals(foo,m.m_data);
  m.ack(43);
  m.poll();
  pair=new ExportInternalMessage(esb,m);
  s.exportAction(pair);
  assertEquals(96,s.sizeInBytes());
  m=ref.get();
  assertEquals(m_part,m.m_partitionId);
  assertEquals(table.getSignature(),m.m_signature);
  assertEquals(63,m.m_offset);
  assertEquals(foo,m.m_data);
  m.ack(63);
  m.poll();
  pair=new ExportInternalMessage(esb,m);
  s.exportAction(pair);
  assertEquals(32,s.sizeInBytes());
  m=ref.get();
  assertEquals(m_part,m.m_partitionId);
  assertEquals(table.getSignature(),m.m_signature);
  assertEquals(83,m.m_offset);
  assertEquals(foo,m.m_data);
  m.ack(83);
  m.poll();
  pair=new ExportInternalMessage(esb,m);
  s.exportAction(pair);
  assertEquals(0,s.sizeInBytes());
  System.out.println(s.sizeInBytes());
  m=ref.get();
  assertEquals(m_part,m.m_partitionId);
  assertEquals(table.getSignature(),m.m_signature);
  assertEquals(83,m.m_offset);
  assertEquals(0,m.m_data.getInt());
}
