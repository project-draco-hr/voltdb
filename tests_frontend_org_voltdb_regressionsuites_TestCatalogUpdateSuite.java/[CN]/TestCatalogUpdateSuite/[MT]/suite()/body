{
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestCatalogUpdateSuite.class);
  VoltServerConfig config=new LocalCluster("catalogupdate-cluster-base.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  TPCCProjectBuilder project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(BASEPROCS);
  boolean basecompile=config.compile(project);
  assertTrue(basecompile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-base.xml"));
  builder.addServerConfig(config);
  GroupInfo groups[]=new GroupInfo[]{new GroupInfo("group1",false,false,false)};
  UserInfo users[]=new UserInfo[]{new UserInfo("user1","userpass1",new String[]{"group1"})};
  ProcedureInfo procInfo=new ProcedureInfo(new String[]{"group1"},InsertNewOrder.class);
  config=new LocalCluster("catalogupdate-cluster-base-secure.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addUsers(users);
  project.addGroups(groups);
  project.addProcedures(procInfo);
  project.setSecurityEnabled(true);
  boolean compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-base-secure.xml"));
  config=new LocalCluster("catalogupdate-cluster-addtables.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addSchema(TestCatalogUpdateSuite.class.getResource("testorderby-ddl.sql").getPath());
  project.addDefaultPartitioning();
  project.addPartitionInfo("O1","PKEY");
  project.addProcedures(BASEPROCS_OPROCS);
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-addtables.xml"));
  try {
    config=new LocalCluster("catalogupdate-cluster-addtableswithmatview.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
    project=new TPCCProjectBuilder();
    project.addDefaultSchema();
    project.addSchema(TestCatalogUpdateSuite.class.getResource("testorderby-ddl.sql").getPath());
    project.addLiteralSchema("CREATE VIEW MATVIEW_O1(C1,NUM) AS SELECT A_INT, COUNT(*) FROM O1 GROUP BY A_INT;");
    project.addDefaultPartitioning();
    project.addPartitionInfo("O1","PKEY");
    project.addProcedures(BASEPROCS_OPROCS);
    compile=config.compile(project);
    assertTrue(compile);
    MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-addtableswithmatview.xml"));
  }
 catch (  IOException e) {
    fail();
  }
  config=new LocalCluster("catalogupdate-cluster-expanded.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(EXPANDEDPROCS);
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-expanded.xml"));
  config=new LocalCluster("catalogupdate-cluster-conflict.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(CONFLICTPROCS);
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-conflict.xml"));
  config=new LocalCluster("catalogupdate-cluster-many.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(SOMANYPROCS);
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-many.xml"));
  config=new LocalCluster("catalogupdate-cluster-enable_snapshot.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(BASEPROCS);
  project.setSnapshotSettings("1s",3,"/tmp/snapshotdir1","foo1");
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-enable_snapshot.xml"));
  config=new LocalCluster("catalogupdate-cluster-change_snapshot.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(BASEPROCS);
  project.setSnapshotSettings("1s",3,"/tmp/snapshotdir2","foo2");
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-change_snapshot.xml"));
  config=new LocalCluster("catalogupdate-cluster-change_snapshot_dir_not_exist.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addProcedures(BASEPROCS);
  project.setSnapshotSettings("1s",3,"/tmp/snapshotdirasda2","foo2");
  compile=config.compile(project);
  assertTrue(compile);
  MiscUtils.copyFile(project.getPathToDeployment(),Configuration.getPathToCatalogForTest("catalogupdate-cluster-change_snapshot_dir_not_exist.xml"));
  config=new LocalCluster("catalogupdate-cluster-huge.jar",2,2,1,BackendTarget.NATIVE_EE_JNI);
  project=new TPCCProjectBuilder();
  long t=System.currentTimeMillis();
  String hugeSchemaURL=generateRandomDDL("catalogupdate-cluster-huge",HUGE_TABLES,HUGE_COLUMNS,HUGE_NAME_SIZE);
  project.addDefaultSchema();
  project.addDefaultPartitioning();
  project.addSchema(hugeSchemaURL);
  project.addProcedures(BASEPROCS);
  compile=config.compile(project);
  assertTrue(compile);
  hugeCompileElapsed=(System.currentTimeMillis() - t) / 1000.0;
  hugeCatalogXML=Configuration.getPathToCatalogForTest("catalogupdate-cluster-huge.xml");
  hugeCatalogJar=Configuration.getPathToCatalogForTest("catalogupdate-cluster-huge.jar");
  MiscUtils.copyFile(project.getPathToDeployment(),hugeCatalogXML);
  return builder;
}
