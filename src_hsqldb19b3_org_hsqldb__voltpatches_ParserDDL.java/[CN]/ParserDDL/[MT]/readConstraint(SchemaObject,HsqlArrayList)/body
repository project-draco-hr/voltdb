{
  HsqlName constName=null;
  if (token.tokenType == Tokens.CONSTRAINT) {
    read();
    constName=readNewDependentSchemaObjectName(schemaObject.getName(),SchemaObject.CONSTRAINT);
  }
  boolean assumeUnique=false;
switch (token.tokenType) {
case Tokens.PRIMARY:
{
      if (schemaObject.getName().type != SchemaObject.TABLE) {
        throw this.unexpectedTokenRequire(Tokens.T_CHECK);
      }
      read();
      readThis(Tokens.KEY);
      Constraint mainConst;
      mainConst=(Constraint)constraintList.get(0);
      if (mainConst.constType == Constraint.PRIMARY_KEY) {
        throw Error.error(ErrorCode.X_42532);
      }
      if (constName == null) {
        constName=database.nameManager.newAutoName("PK",schemaObject.getSchemaName(),schemaObject.getName(),SchemaObject.CONSTRAINT);
      }
      OrderedHashSet set=readColumnNames(false);
      Constraint c=new Constraint(constName,set,Constraint.PRIMARY_KEY);
      constraintList.set(0,c);
      break;
    }
case Tokens.ASSUMEUNIQUE:
  assumeUnique=true;
case Tokens.UNIQUE:
{
  if (schemaObject.getName().type != SchemaObject.TABLE) {
    throw this.unexpectedTokenRequire(Tokens.T_CHECK);
  }
  read();
  java.util.List<Expression> indexExprs=XreadExpressions(null);
  OrderedHashSet set=getSimpleColumnNames(indexExprs);
  if (constName == null) {
    constName=database.nameManager.newAutoName("CT",schemaObject.getSchemaName(),schemaObject.getName(),SchemaObject.CONSTRAINT);
  }
  boolean hasNonColumnExprs=false;
  if (set == null) {
    hasNonColumnExprs=true;
    set=getBaseColumnNames(indexExprs);
  }
  Constraint c=new Constraint(constName,set,Constraint.UNIQUE);
  c.setAssumeUnique(assumeUnique);
  if (hasNonColumnExprs) {
    c=c.withExpressions(indexExprs.toArray(new Expression[indexExprs.size()]));
  }
  constraintList.add(c);
  break;
}
case Tokens.FOREIGN:
{
if (schemaObject.getName().type != SchemaObject.TABLE) {
  throw this.unexpectedTokenRequire(Tokens.T_CHECK);
}
read();
readThis(Tokens.KEY);
OrderedHashSet set=readColumnNames(false);
Constraint c=readFKReferences((Table)schemaObject,constName,set);
constraintList.add(c);
break;
}
case Tokens.CHECK:
{
read();
if (constName == null) {
constName=database.nameManager.newAutoName("CT",schemaObject.getSchemaName(),schemaObject.getName(),SchemaObject.CONSTRAINT);
}
Constraint c=new Constraint(constName,null,Constraint.CHECK);
readCheckConstraintCondition(c);
constraintList.add(c);
break;
}
case Tokens.LIMIT:
{
read();
for (int i=0; i < constraintList.size(); i++) {
if (((Constraint)constraintList.get(i)).getConstraintType() == Constraint.LIMIT) {
throw Error.error(ErrorCode.X_42524,String.format("Multiple LIMIT PARTITION ROWS constraints on table %s are forbidden.",schemaObject.getName().name));
}
}
if (constName == null) {
constName=database.nameManager.newAutoName("LIMIT",schemaObject.getSchemaName(),schemaObject.getName(),SchemaObject.CONSTRAINT);
}
Constraint c=new Constraint(constName,null,Constraint.LIMIT);
readLimitConstraintCondition(c);
constraintList.add(c);
break;
}
default :
{
if (constName != null) {
throw Error.error(ErrorCode.X_42581);
}
}
}
}
