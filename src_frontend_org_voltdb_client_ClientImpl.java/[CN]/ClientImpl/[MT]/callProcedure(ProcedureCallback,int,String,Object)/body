{
  if (m_isShutdown) {
    return false;
  }
  if (callback == null) {
    callback=new NullCallback();
  }
 else   if (callback instanceof ProcedureArgumentCacher) {
    ((ProcedureArgumentCacher)callback).setArgs(parameters);
  }
  ProcedureInvocation invocation=new ProcedureInvocation(m_handle.getAndIncrement(),procName,parameters);
  boolean isBlessed=m_blessedThreadIds.contains(Thread.currentThread().getId());
  if (!isBlessed) {
    try {
      m_maxOutstanding.acquire();
    }
 catch (    InterruptedException e) {
      throw new java.io.InterruptedIOException(e.toString());
    }
  }
  final ProcedureCallback userCallback=callback;
  ProcedureCallback callbackToReturnPermit=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      m_maxOutstanding.release();
      userCallback.clientCallback(clientResponse);
    }
  }
;
  if (m_blockingQueue) {
    while (!m_distributer.queue(invocation,callbackToReturnPermit,expectedSerializedSize,isBlessed)) {
      try {
        backpressureBarrier();
      }
 catch (      InterruptedException e) {
        throw new java.io.InterruptedIOException("Interrupted while invoking procedure asynchronously");
      }
    }
    return true;
  }
 else {
    return m_distributer.queue(invocation,callbackToReturnPermit,expectedSerializedSize,isBlessed);
  }
}
