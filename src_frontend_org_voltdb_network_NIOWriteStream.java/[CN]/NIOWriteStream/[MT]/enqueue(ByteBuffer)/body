{
  assert(b != null);
  assert(!b.isDirect());
  if (b.remaining() == 0) {
    return false;
  }
synchronized (this) {
    if (m_isShutdown) {
      return false;
    }
    updateLastPendingWriteTimeAndQueueBackpressure();
    if (b.remaining() < DBBPool.MAX_ALLOCATION_SIZE) {
      m_queuedWrites.offer(new DeferredSerialization(){
        @Override public BBContainer serialize(        final DBBPool pool){
          final BBContainer c=pool.acquire(b.remaining());
          assert(c.b.isDirect());
          c.b.put(b);
          c.b.flip();
          return c;
        }
        @Override public void cancel(){
        }
      }
);
    }
 else {
      updateQueued(b.remaining(),true);
      m_queuedBuffers.offer(DBBPool.wrapBB(b));
    }
    m_port.setInterests(SelectionKey.OP_WRITE,0);
  }
  return true;
}
