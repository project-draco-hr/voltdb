{
  VoltTable modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (1, 1, 1);").getResults()[0];
  assertEquals(1,modCount.getRowCount());
  assertEquals(1,modCount.asScalarLong());
  VoltTable result=client.callProcedure("@AdHoc","SELECT * FROM BLAH;").getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH;",0).getResults()[0];
  assertEquals(0,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH;",1).getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  try {
    client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (0, 0, 0);",1);
    fail("Badly partitioned insert failed to throw expected exception");
  }
 catch (  Exception e) {
  }
  try {
    client.callProcedure("@AdHoc","SLEECT * FROOM NEEEW_OOORDERERER;");
    fail("Bad SQL failed to throw expected exception");
  }
 catch (  Exception e) {
  }
  modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.123012', 5);").getResults()[0];
  modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (974599638818488301, '2011-06-24 10:30:28', 5);").getResults()[0];
  assertEquals(1,modCount.getRowCount());
  assertEquals(1,modCount.asScalarLong());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE IVAL = 974599638818488300;").getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE TVAL = '2011-06-24 10:30:26.123012';").getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE TVAL > '2011-06-24 10:30:25';").getResults()[0];
  assertEquals(2,result.getRowCount());
  System.out.println(result.toString());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE TVAL < '2011-06-24 10:30:27';").getResults()[0];
  System.out.println(result.toString());
  assertEquals(2,result.getRowCount());
  try {
    client.callProcedure("@AdHoc","select * from blah; dfvsdfgvdf select * from blah WHERE IVAL = 1;");
    fail("Bad SQL failed to throw expected exception");
  }
 catch (  Exception e) {
  }
  client.callProcedure("@AdHoc","select\n* from blah;");
  modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (2, '2011-06-24 10:30:26', 1.12345*1);").getResults()[0];
  assertEquals(1,modCount.getRowCount());
  assertEquals(1,modCount.asScalarLong());
  result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE IVAL = 2;").getResults()[0];
  assertEquals(1,result.getRowCount());
  System.out.println(result.toString());
  VoltTable[] batchResults=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (100, '2012-05-21 12:00:00.000000', 1000);" + "INSERT INTO BLAH VALUES (101, '2012-05-21 12:01:00.000000', 1001) ; " + "INSERT INTO BLAH VALUES (102, '2012-05-21 12:02:00.000000', 1002);;;;"+ "INSERT INTO BLAH VALUES (103, '2012-05-21 12:03:00.000000', 1003); "+ "INSERT INTO BLAH VALUES (104, '2012-05-21 12:04:00.000000', 1004) ;;").getResults();
  assertEquals(5,batchResults.length);
  for (  VoltTable batchResult : batchResults) {
    assertTrue(batchResult.getRowCount() == 1);
    assertTrue(batchResult.asScalarLong() == 1);
  }
  batchResults=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE IVAL = 102;" + "SELECT * FROM BLAH WHERE DVAL >= 1001 AND DVAL <= 1002;" + "SELECT * FROM BLAH WHERE DVAL >= 1002 AND DVAL <= 1004;").getResults();
  assertEquals(3,batchResults.length);
  assertTrue(batchResults[0].getRowCount() == 1);
  assertTrue(batchResults[1].getRowCount() == 2);
  assertTrue(batchResults[2].getRowCount() == 3);
}
