{
  VoltDB.Configuration config=setUpSPDB();
  ServerThread localServer=new ServerThread(config);
  try {
    localServer.start();
    localServer.waitForInitialization();
    m_client=ClientFactory.createClient();
    m_client.createConnection("localhost",config.m_port);
    m_client.callProcedure("@AdHoc","insert into PARTED1 values ( 23, 3 )");
    VoltTable results[]=m_client.callProcedure("executeSQLSP",23,"select * from PARTED1").getResults();
    assertTrue(results[0].advanceRow());
    assertTrue(results[1].advanceRow());
    results=m_client.callProcedure("executeSQLMP",23,"       select * from PARTED1").getResults();
    assertTrue(results[0].advanceRow());
    assertTrue(results[1].advanceRow());
    try {
      m_client.callProcedure("executeSQLSP",24,"insert into parted1 values (24,5)");
      fail("Procedure call should not have succeded");
    }
 catch (    ProcCallException e) {
    }
    try {
      m_client.callProcedure("executeSQLMP",24,"insert into parted1 values (24,5)");
      fail("Procedure call should not have succeded");
    }
 catch (    ProcCallException e) {
    }
    try {
      m_client.callProcedure("executeSQLSP",24,"insert into parted1 values (24,5); select * from parted1;");
      fail("Procedure call should not have succeded");
    }
 catch (    ProcCallException e) {
    }
    try {
      m_client.callProcedure("executeSQLSP",24,"drop table parted1");
      fail("Procedure call should not have succeded");
    }
 catch (    ProcCallException e) {
    }
    m_client.callProcedure("executeSQLSPWRITE",24,"insert into parted1 values (24, 4);");
    m_client.callProcedure("executeSQLMPWRITE",25,"insert into parted1 values (25, 5);");
    results=m_client.callProcedure("executeSQLMP",24,"select * from parted1 order by partval").getResults();
    assertEquals(3,results[0].getRowCount());
    for (int ii=3; ii < 6; ii++) {
      assertTrue(results[0].advanceRow());
      assertEquals(20 + ii,results[0].getLong(0));
      assertEquals(ii,results[0].getLong(1));
    }
    assertEquals(3,results[1].getRowCount());
    assertTrue(results[1].advanceRow());
    assertEquals(24,results[1].getLong(0));
    assertEquals(4,results[1].getLong(1));
    assertEquals(1,results[2].getRowCount());
    assertTrue(results[2].advanceRow());
    assertEquals(24,results[2].getLong(0));
    assertEquals(4,results[2].getLong(1));
    assertEquals(3,results[3].getRowCount());
    assertTrue(results[3].advanceRow());
    assertEquals(24,results[3].getLong(0));
    assertEquals(4,results[3].getLong(1));
    results=m_client.callProcedure("executeSQLSP",24,"select * from parted1 order by partval").getResults();
    assertEquals(1,results[0].getRowCount());
    assertTrue(results[0].advanceRow());
    assertEquals(24,results[0].getLong(0));
    assertEquals(4,results[0].getLong(1));
    assertEquals(1,results[1].getRowCount());
    assertTrue(results[1].advanceRow());
    assertEquals(24,results[1].getLong(0));
    assertEquals(4,results[1].getLong(1));
    assertEquals(1,results[2].getRowCount());
    assertTrue(results[2].advanceRow());
    assertEquals(24,results[2].getLong(0));
    assertEquals(4,results[2].getLong(1));
    assertEquals(1,results[3].getRowCount());
    assertTrue(results[3].advanceRow());
    assertEquals(24,results[3].getLong(0));
    assertEquals(4,results[3].getLong(1));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
 finally {
    if (m_client != null)     m_client.close();
    m_client=null;
    if (localServer != null) {
      localServer.shutdown();
      localServer.join();
    }
    localServer=null;
    System.gc();
  }
}
