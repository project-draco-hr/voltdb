{
  TestEnv env=new TestEnv(m_catalogJar,m_pathToDeployment,2,1,0);
  String adHocQuery;
  try {
    env.setUp();
    adHocQuery="  UPDATE STAFF \n" + "          SET GRADE=10*STAFF.GRADE \n" + "          WHERE STAFF.EMPNUM NOT IN \n"+ "                (SELECT WORKS.EMPNUM \n"+ "                      FROM WORKS \n"+ "                      WHERE STAFF.EMPNUM = WORKS.EMPNUM);";
    try {
      env.m_client.callProcedure("@AdHoc",adHocQuery);
      fail("did not fail on subquery In/Exists");
    }
 catch (    ProcCallException pcex) {
      assertTrue(pcex.getMessage().indexOf("Subquery expressions are only supported in SELECT statements") > 0);
    }
    adHocQuery="     SELECT 'ZZ', EMPNUM, EMPNAME, -99 \n" + "           FROM STAFF \n" + "           WHERE NOT EXISTS (SELECT * FROM WORKS \n"+ "                WHERE WORKS.EMPNUM = STAFF.EMPNUM) \n"+ "                ORDER BY EMPNUM;";
    try {
      env.m_client.callProcedure("@AdHoc",adHocQuery);
    }
 catch (    Exception ex) {
      fail("did fail on exists clause");
    }
    adHocQuery="   SELECT STAFF.EMPNAME \n" + "          FROM STAFF \n" + "          WHERE STAFF.EMPNUM IN \n"+ "                  (SELECT WORKS.EMPNUM \n"+ "                        FROM WORKS \n"+ "                        WHERE WORKS.PNUM IN \n"+ "                              (SELECT PROJ.PNUM \n"+ "                                    FROM PROJ \n"+ "                                    WHERE PROJ.CITY='Tampa')); \n"+ "";
    try {
      env.m_client.callProcedure("@AdHoc",adHocQuery);
    }
 catch (    Exception ex) {
      fail("did fail on subquery");
    }
    adHocQuery="SELECT PNAME \n" + "         FROM PROJ \n" + "         WHERE 'Tampa' NOT BETWEEN CITY AND 'Vienna' \n"+ "                           AND PNUM > 'P2';";
    try {
      env.m_client.callProcedure("@AdHoc",adHocQuery);
      fail("did not fail on static clause");
    }
 catch (    ProcCallException pcex) {
      assertTrue(pcex.getMessage().indexOf("does not support constant Boolean values, like TRUE or FALSE") > 0);
    }
    adHocQuery="ROLLBACK;";
    try {
      env.m_client.callProcedure("@AdHoc",adHocQuery);
      fail("did not fail on invalid SQL verb");
    }
 catch (    ProcCallException pcex) {
      assertTrue(pcex.getMessage().indexOf("this type of sql statement is not supported") > 0);
    }
  }
  finally {
    env.tearDown();
  }
}
