{
  VoltDB.Configuration config=setUpSPDB();
  ServerThread localServer=new ServerThread(config);
  try {
    localServer.start();
    localServer.waitForInitialization();
    m_client=ClientFactory.createClient();
    m_client.createConnection("localhost",config.m_port);
    VoltTable modCount;
    int hashableA;
    int hashableB;
    int hashableC;
    int hashableD;
    if (TheHashinator.getConfiguredHashinatorType() == HashinatorType.LEGACY) {
      hashableA=4;
      hashableB=1;
      hashableC=2;
      hashableD=3;
    }
 else {
      hashableA=8;
      hashableB=2;
      hashableC=1;
      hashableD=4;
    }
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO PARTED1 VALUES (%d, %d);",hashableA,hashableA)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO PARTED1 VALUES (%d, %d);",hashableB,hashableB)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO PARTED2 VALUES (%d, %d);",hashableA,hashableA)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO PARTED2 VALUES (%d, %d);",hashableC,hashableC)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO PARTED3 VALUES (%d, %d);",hashableA,hashableA)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO PARTED3 VALUES (%d, %d);",hashableD,hashableD)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO REPPED1 VALUES (%d, %d);",hashableA,hashableA)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO REPPED1 VALUES (%d, %d);",hashableB,hashableB)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO REPPED2 VALUES (%d, %d);",hashableA,hashableA)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc",String.format("INSERT INTO REPPED2 VALUES (%d, %d);",hashableC,hashableC)).getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    runAllAdHocSPtests(hashableA,hashableB,hashableC,hashableD);
  }
  finally {
    if (m_client != null)     m_client.close();
    m_client=null;
    if (localServer != null) {
      localServer.shutdown();
      localServer.join();
    }
    localServer=null;
    System.gc();
  }
}
