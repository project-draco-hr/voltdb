{
  VoltDB.Configuration config=setUpSPDB();
  ServerThread localServer=new ServerThread(config);
  try {
    localServer.start();
    localServer.waitForInitialization();
    m_client=ClientFactory.createClient();
    m_client.createConnection("localhost",config.m_port);
    VoltTable modCount;
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO PARTED1 VALUES (0, 0);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO PARTED1 VALUES (1, 1);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO PARTED2 VALUES (0, 0);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO PARTED2 VALUES (2, 2);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO PARTED3 VALUES (0, 0);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO PARTED3 VALUES (3, 3);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO REPPED1 VALUES (0, 0);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO REPPED1 VALUES (1, 1);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO REPPED2 VALUES (0, 0);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    modCount=m_client.callProcedure("@AdHoc","INSERT INTO REPPED2 VALUES (2, 2);").getResults()[0];
    assertEquals(1,modCount.getRowCount());
    assertEquals(1,modCount.asScalarLong());
    runAllAdHocSPtests();
  }
  finally {
    if (m_client != null)     m_client.close();
    m_client=null;
    if (localServer != null) {
      localServer.shutdown();
      localServer.join();
    }
    localServer=null;
    System.gc();
  }
}
