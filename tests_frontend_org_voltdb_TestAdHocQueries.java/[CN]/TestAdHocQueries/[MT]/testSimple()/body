{
  String simpleSchema="create table BLAH (" + "IVAL bigint default 0 not null, " + "TVAL timestamp default null,"+ "DVAL decimal default null,"+ "PRIMARY KEY(IVAL));";
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhoc.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhoc.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(simpleSchema);
  builder.addPartitionInfo("BLAH","IVAL");
  builder.addStmtProcedure("Insert","insert into blah values (?, ?, ?);",null);
  builder.addStmtProcedure("InsertWithDate","INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.002', 5);");
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  ServerThread localServer=new ServerThread(config);
  Client client=null;
  try {
    localServer.start();
    localServer.waitForInitialization();
    client=ClientFactory.createClient();
    client.createConnection("localhost");
    VoltTable modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (1, 1, 1);").getResults()[0];
    assertTrue(modCount.getRowCount() == 1);
    assertTrue(modCount.asScalarLong() == 1);
    VoltTable result=client.callProcedure("@AdHoc","SELECT * FROM BLAH;").getResults()[0];
    assertTrue(result.getRowCount() == 1);
    System.out.println(result.toString());
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH;",0).getResults()[0];
    assertTrue(result.getRowCount() == 0);
    System.out.println(result.toString());
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH;",1).getResults()[0];
    assertTrue(result.getRowCount() == 1);
    System.out.println(result.toString());
    try {
      client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (0, 0, 0);",1);
      fail("Badly partitioned insert failed to throw expected exception");
    }
 catch (    Exception e) {
    }
    try {
      client.callProcedure("@AdHoc","SLEECT * FROOM NEEEW_OOORDERERER;");
      fail("Bad SQL failed to throw expected exception");
    }
 catch (    Exception e) {
    }
    modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (974599638818488300, '2011-06-24 10:30:26.123012', 5);").getResults()[0];
    modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (974599638818488301, '2011-06-24 10:30:28', 5);").getResults()[0];
    assertTrue(modCount.getRowCount() == 1);
    assertTrue(modCount.asScalarLong() == 1);
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE IVAL = 974599638818488300;").getResults()[0];
    assertTrue(result.getRowCount() == 1);
    System.out.println(result.toString());
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE TVAL = '2011-06-24 10:30:26.123012';").getResults()[0];
    assertTrue(result.getRowCount() == 1);
    System.out.println(result.toString());
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE TVAL > '2011-06-24 10:30:25';").getResults()[0];
    assertEquals(2,result.getRowCount());
    System.out.println(result.toString());
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE TVAL < '2011-06-24 10:30:27';").getResults()[0];
    System.out.println(result.toString());
    assertEquals(2,result.getRowCount());
    try {
      client.callProcedure("@AdHoc","select * from blah; dfvsdfgvdf select * from blah WHERE IVAL = 1;");
      fail("Bad SQL failed to throw expected exception");
    }
 catch (    Exception e) {
    }
    client.callProcedure("@AdHoc","select\n* from blah;");
    modCount=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (2, '2011-06-24 10:30:26', 1.12345*1);").getResults()[0];
    assertTrue(modCount.getRowCount() == 1);
    assertTrue(modCount.asScalarLong() == 1);
    result=client.callProcedure("@AdHoc","SELECT * FROM BLAH WHERE IVAL = 2;").getResults()[0];
    assertTrue(result.getRowCount() == 1);
    System.out.println(result.toString());
  }
  finally {
    if (client != null)     client.close();
    client=null;
    if (localServer != null) {
      localServer.shutdown();
      localServer.join();
    }
    localServer=null;
    System.gc();
  }
}
