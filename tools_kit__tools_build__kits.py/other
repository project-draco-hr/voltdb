import os, sys, shutil, datetime
from fabric.api import run, cd, local, get, settings, lcd, put
from fabric_ssh_config import getSSHInfoForHost
from fabric.context_managers import shell_env
from fabric.utils import abort
username = 'test'
builddir = (('/tmp/' + username) + 'Kits/buildtemp')
version = 'UNKNOWN'
defaultlicensedays = 45
if ((len(sys.argv) > 3) or ((len(sys.argv) == 2) and (sys.argv[1] == '-h'))):
    print 'usage:'
    print '   build-kit.py'
    print '   build-kit.py git-tag'
    print '   build-kit.py voltdb-git-SHA pro-git-SHA'
proTreeish = 'master'
voltdbTreeish = 'master'
rbmqExportTreeish = 'master'
if ('-o' in sys.argv):
    oneOff = True
    sys.argv.remove('-o')
else:
    oneOff = False
if (len(sys.argv) == 2):
    createCandidate = False
    proTreeish = sys.argv[1]
    voltdbTreeish = sys.argv[1]
    rbmqExportTreeish = sys.argv[1]
if (len(sys.argv) == 3):
    createCandidate = False
    voltdbTreeish = sys.argv[1]
    proTreeish = sys.argv[2]
    rbmqExportTreeish = sys.argv[2]
    if (voltdbTreeish != proTreeish):
        oneOff = True
try:
    build_args = os.environ['VOLTDB_BUILD_ARGS']
except:
    build_args = ''
print ('Building with pro: %s and voltdb: %s' % (proTreeish, voltdbTreeish))
build_errors = False
versionCentos = 'unknown'
versionMac = 'unknown'
releaseDir = 'unknown'
CentosSSHInfo = getSSHInfoForHost('volt5f')
MacSSHInfo = getSSHInfoForHost('voltmini')
UbuntuSSHInfo = getSSHInfoForHost('volt12d')
try:
    with settings(user=username, host_string=MacSSHInfo[1], disable_known_hosts=True, key_filename=MacSSHInfo[0]):
        versionMac = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish)
        buildCommunity()
except Exception as e:
    print ((('Could not build MAC kit. Exception: ' + str(e)) + ', Type: ') + str(type(e)))
    build_errors = True
try:
    with settings(user=username, host_string=CentosSSHInfo[1], disable_known_hosts=True, key_filename=CentosSSHInfo[0]):
        versionCentos = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish)
        assert (versionCentos == versionMac)
        if oneOff:
            releaseDir = ('%s/releases/one-offs/%s-%s-%s' % (os.getenv('HOME'), versionCentos, voltdbTreeish, proTreeish))
        else:
            releaseDir = ((os.getenv('HOME') + '/releases/') + voltdbTreeish)
        makeReleaseDir(releaseDir)
        print ('VERSION: ' + versionCentos)
        buildCommunity()
        copyCommunityFilesToReleaseDir(releaseDir, versionCentos, 'LINUX')
        buildPro()
        buildRabbitMQExport(versionCentos)
        copyEnterpriseFilesToReleaseDir(releaseDir, versionCentos, 'LINUX')
        makeTrialLicense()
        copyTrialLicenseToReleaseDir(releaseDir)
        if versionHasZipTarget():
            makeEnterpriseZip()
            copyEnterpriseZipToReleaseDir(releaseDir, versionCentos, 'LINUX')
        makeMavenJars()
        copyMavenJarsToReleaseDir(releaseDir, versionCentos)
except Exception as e:
    print ((('Could not build LINUX kit. Exception: ' + str(e)) + ', Type: ') + str(type(e)))
    build_errors = True
try:
    with settings(user=username, host_string=MacSSHInfo[1], disable_known_hosts=True, key_filename=MacSSHInfo[0]):
        versionMac = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish)
        assert (versionCentos == versionMac)
        buildCommunity()
        copyCommunityFilesToReleaseDir(releaseDir, versionMac, 'MAC')
        buildPro()
        buildRabbitMQExport(versionMac)
        copyEnterpriseFilesToReleaseDir(releaseDir, versionMac, 'MAC')
except Exception as e:
    print ((('Could not build MAC kit. Exception: ' + str(e)) + ', Type: ') + str(type(e)))
    build_errors = True
try:
    with settings(user=username, host_string=UbuntuSSHInfo[1], disable_known_hosts=True, key_filename=UbuntuSSHInfo[0]):
        debbuilddir = ('%s/deb_build/' % builddir)
        run(('rm -rf ' + debbuilddir))
        run(('mkdir -p ' + debbuilddir))
        with cd(debbuilddir):
            put('tools/voltdb-install.py', '.')
            commbld = ('voltdb-%s.tar.gz' % versionCentos)
            put(('%s/%s' % (releaseDir, commbld)), '.')
            run(('sudo python voltdb-install.py -D ' + commbld))
            get(('voltdb_%s-1_amd64.deb' % versionCentos), releaseDir)
            entbld = ('voltdb-ent-%s.tar.gz' % versionCentos)
            put(('%s/%s' % (releaseDir, entbld)), '.')
            run(('sudo python voltdb-install.py -D ' + entbld))
            get(('voltdb-ent_%s-1_amd64.deb' % versionCentos), releaseDir)
except Exception as e:
    print ((('Could not build debian kit. Exception: ' + str(e)) + ', Type: ') + str(type(e)))
    build_errors = True
try:
    with settings(user=username, host_string=CentosSSHInfo[1], disable_known_hosts=True, key_filename=CentosSSHInfo[0]):
        rpmbuilddir = ('%s/rpm_build/' % builddir)
        run(('rm -rf ' + rpmbuilddir))
        run(('mkdir -p ' + rpmbuilddir))
        with cd(rpmbuilddir):
            put('tools/voltdb-install.py', '.')
            commbld = ('voltdb-%s.tar.gz' % versionCentos)
            put(('%s/%s' % (releaseDir, commbld)), '.')
            run(('python2.6 voltdb-install.py -R ' + commbld))
            get(('voltdb-%s-1.x86_64.rpm' % versionCentos), releaseDir)
            entbld = ('voltdb-ent-%s.tar.gz' % versionCentos)
            put(('%s/%s' % (releaseDir, entbld)), '.')
            run(('python2.6 voltdb-install.py -R ' + entbld))
            get(('voltdb-ent-%s-1.x86_64.rpm' % versionCentos), releaseDir)
except Exception as e:
    print ((('Could not build rpm kit. Exception: ' + str(e)) + ', Type: ') + str(type(e)))
    build_errors = True
computeChecksums(releaseDir)
exit(build_errors)
