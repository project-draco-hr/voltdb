import os, sys, shutil, datetime
from fabric.api import run, cd, local, get, settings, lcd
from fabric_ssh_config import getSSHInfoForHost
username = 'test'
builddir = (('/tmp/' + username) + '/buildtemp')
version = 'UNKNOWN'
if ((len(sys.argv) > 3) or ((len(sys.argv) == 2) and (sys.argv[1] == '-h'))):
    print 'usage:'
    print '   build-kit.py'
    print '   build-kit.py git-tag'
    print '   build-kit.py voltdb-git-SHA pro-git-SHA'
proTreeish = 'master'
voltdbTreeish = 'master'
createCandidate = True
if (len(sys.argv) == 2):
    createCandidate = False
    proTreeish = sys.argv[1]
    voltdbTreeish = sys.argv[1]
if (len(sys.argv) == 3):
    createCandidate = False
    voltdbTreeish = sys.argv[1]
    proTreeish = sys.argv[2]
print ('Building with pro: %s and voltdb: %s' % (proTreeish, voltdbTreeish))
print ('Create link for releases/candidate = %s' % createCandidate)
version = 'unknown'
releaseDir = 'unknown'
volt5f = getSSHInfoForHost('volt5f')
voltmini = getSSHInfoForHost('voltmini')
with settings(user=username, host_string=volt5f[1], disable_known_hosts=True, key_filename=volt5f[0]):
    version = checkoutCode(voltdbTreeish, proTreeish)
    if (voltdbTreeish == 'master'):
        releaseDir = ((os.getenv('HOME') + '/releases/') + version)
    else:
        releaseDir = ('%s/releases/one-offs/%s-%s-%s' % (os.getenv('HOME'), version, voltdbTreeish, proTreeish))
    makeReleaseDir(releaseDir)
    print ('VERSION: ' + version)
    buildCommunity()
    copyCommunityFilesToReleaseDir(releaseDir, version, 'LINUX')
    buildPro()
    copyEnterpriseFilesToReleaseDir(releaseDir, version, 'LINUX')
with settings(user=username, host_string=voltmini[1], disable_known_hosts=True, key_filename=voltmini[0]):
    version2 = checkoutCode(voltdbTreeish, proTreeish)
    assert (version == version2)
    buildCommunity()
    copyCommunityFilesToReleaseDir(releaseDir, version, 'MAC')
computeChecksums(releaseDir)
if createCandidate:
    createCandidateSysmlink(releaseDir)
archiveDir = ((os.getenv('HOME') + '/releases/archive/') + version)
backupReleaseDir(releaseDir, archiveDir, version)
