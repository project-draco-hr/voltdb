{
  System.out.println("testExportEnterExitAdminMode");
  m_username="admin";
  m_password="admin";
  final Object[] rowdata=TestSQLTypesSuite.m_midValues;
  Client client=getClient();
  for (int i=0; i < 40; i++) {
    m_tester.addRow("NO_NULLS",i,convertValsToRow(i,'I',rowdata));
    final Object[] params=convertValsToParams("NO_NULLS",i,rowdata);
    client.callProcedure("Insert",params);
  }
  quiesce(client);
  checkForExpectedStats(client,3,2,2);
  ExportToFileClient exportClient=new ExportToFileClient(',',"testnonce",new File("/tmp/" + System.getProperty("user.name")),60,"yyyyMMddHHmmss",null,0,false,false,false,0,ExportToFileClient.BinaryEncoding.HEX);
  exportClient.addServerInfo(new InetSocketAddress("localhost",port(0)));
  exportClient.addCredentials("export","export");
  final Thread currentThread=Thread.currentThread();
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(3000);
        currentThread.interrupt();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
  boolean threwException=false;
  try {
    exportClient.run();
  }
 catch (  ExportClientException e) {
    assertTrue(e.getCause() instanceof InterruptedException);
    threwException=true;
  }
  assertTrue(threwException);
  ClientConfig adminConfig=new ClientConfig("admin","admin");
  final Client adminClient=org.voltdb.client.ClientFactory.createClient(adminConfig);
  adminClient.createConnection("localhost",adminPort(0));
  adminClient.callProcedure("@Pause");
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(2000);
        adminClient.callProcedure("@Resume");
        Thread.sleep(3000);
        currentThread.interrupt();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
.start();
  threwException=false;
  try {
    exportClient.run();
  }
 catch (  ExportClientException e) {
    assertTrue(e.getCause() instanceof InterruptedException);
    threwException=true;
  }
  assertTrue(threwException);
  File tempDir=new VoltFile("/tmp/" + System.getProperty("user.name"));
  File outfile=null;
  for (  File f : tempDir.listFiles()) {
    if (f.getName().contains("testnonce") && f.getName().endsWith(".csv")) {
      outfile=f;
      break;
    }
  }
  assertNotNull(outfile);
  FileInputStream fis=new FileInputStream(outfile);
  InputStreamReader isr=new InputStreamReader(fis,"UTF-8");
  BufferedReader br=new BufferedReader(isr);
  ArrayList<String> lines=new ArrayList<String>();
  String nextLine=null;
  while ((nextLine=br.readLine()) != null) {
    lines.add(nextLine);
  }
  assertEquals(lines.size(),40);
  ArrayList<String[]> splitLines=new ArrayList<String[]>();
  for (  String line : lines) {
    line.split(",");
  }
  for (  String split[] : splitLines) {
    assertEquals(12,split.length);
    assertTrue(Integer.valueOf(split[2]) < 4);
    assertTrue(Integer.valueOf(split[3]) < 3);
    Integer siteId=Integer.valueOf(split[4]);
    assertTrue(siteId == 101 || siteId == 102 || siteId == 201 || siteId == 202 || siteId == 301 || siteId == 302);
    assertTrue(split[split.length - 1].equals(rowdata[rowdata.length - 1].toString()));
  }
}
