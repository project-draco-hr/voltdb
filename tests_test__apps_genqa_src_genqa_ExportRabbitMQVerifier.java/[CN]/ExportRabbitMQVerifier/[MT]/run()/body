{
  final Connection connection=m_connFactory.newConnection();
  final Channel channel=connection.createChannel();
  try {
    channel.exchangeDeclare(m_exchangeName,"topic",true);
    String dataQueue=channel.queueDeclare().getQueue();
    channel.queueBind(dataQueue,m_exchangeName,"EXPORT_PARTITIONED_TABLE.#");
    channel.queueBind(dataQueue,m_exchangeName,"EXPORT_PARTITIONED_TABLE2.#");
    channel.queueBind(dataQueue,m_exchangeName,"EXPORT_REPLICATED_TABLE.#");
    channel.queueBind(dataQueue,m_exchangeName,"EXPORT_PARTITIONED_TABLE_FOO.#");
    channel.queueBind(dataQueue,m_exchangeName,"EXPORT_PARTITIONED_TABLE2_FOO.#");
    channel.queueBind(dataQueue,m_exchangeName,"EXPORT_REPLICATED_TABLE_FOO.#");
    String doneQueue=channel.queueDeclare().getQueue();
    channel.queueBind(doneQueue,m_exchangeName,"EXPORT_DONE_TABLE.#");
    channel.queueBind(doneQueue,m_exchangeName,"EXPORT_DONE_TABLE_FOO.#");
    channel.basicConsume(dataQueue,false,createConsumer(channel));
    QueueingConsumer doneConsumer=new QueueingConsumer(channel);
    channel.basicConsume(doneQueue,true,doneConsumer);
    final QueueingConsumer.Delivery doneMsg=doneConsumer.nextDelivery();
    final long expectedRows=Long.parseLong(ExportOnServerVerifier.RoughCSVTokenizer.tokenize(new String(doneMsg.getBody(),Charsets.UTF_8))[6]);
    while (expectedRows > m_verifiedRows) {
      Thread.sleep(1000);
      System.err.println("Expected " + expectedRows + " "+ m_verifiedRows);
    }
  }
  finally {
    tearDown(channel);
    channel.close();
    connection.close();
  }
}
