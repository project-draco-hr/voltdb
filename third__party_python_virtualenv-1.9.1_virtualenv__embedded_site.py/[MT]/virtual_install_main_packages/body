def virtual_install_main_packages():
    f = open(os.path.join(os.path.dirname(__file__), 'orig-prefix.txt'))
    sys.real_prefix = f.read().strip()
    f.close()
    pos = 2
    hardcoded_relative_dirs = []
    if (sys.path[0] == ''):
        pos += 1
    if _is_jython:
        paths = [os.path.join(sys.real_prefix, 'Lib')]
    elif _is_pypy:
        if (sys.pypy_version_info >= (1, 5)):
            cpyver = ('%d.%d' % sys.version_info[:2])
        else:
            cpyver = ('%d.%d.%d' % sys.version_info[:3])
        paths = [os.path.join(sys.real_prefix, 'lib_pypy'), os.path.join(sys.real_prefix, 'lib-python', ('modified-%s' % cpyver)), os.path.join(sys.real_prefix, 'lib-python', cpyver)]
        hardcoded_relative_dirs = paths[:]
        for path in paths[:]:
            plat_path = os.path.join(path, ('plat-%s' % sys.platform))
            if os.path.exists(plat_path):
                paths.append(plat_path)
    elif (sys.platform == 'win32'):
        paths = [os.path.join(sys.real_prefix, 'Lib'), os.path.join(sys.real_prefix, 'DLLs')]
    else:
        paths = [os.path.join(sys.real_prefix, 'lib', ('python' + sys.version[:3]))]
        hardcoded_relative_dirs = paths[:]
        lib64_path = os.path.join(sys.real_prefix, 'lib64', ('python' + sys.version[:3]))
        if os.path.exists(lib64_path):
            if _is_64bit:
                paths.insert(0, lib64_path)
            else:
                paths.append(lib64_path)
        try:
            arch = getattr(sys, 'implementation', sys)._multiarch
        except AttributeError:
            arch = sys.platform
        plat_path = os.path.join(sys.real_prefix, 'lib', ('python' + sys.version[:3]), ('plat-%s' % arch))
        if os.path.exists(plat_path):
            paths.append(plat_path)
    for path in list(paths):
        tk_dir = os.path.join(path, 'lib-tk')
        if os.path.exists(tk_dir):
            paths.append(tk_dir)
    if (sys.platform == 'darwin'):
        hardcoded_paths = [os.path.join(relative_dir, module) for relative_dir in hardcoded_relative_dirs for module in ('plat-darwin', 'plat-mac', 'plat-mac/lib-scriptpackages')]
        for path in hardcoded_paths:
            if os.path.exists(path):
                paths.append(path)
    sys.path.extend(paths)
