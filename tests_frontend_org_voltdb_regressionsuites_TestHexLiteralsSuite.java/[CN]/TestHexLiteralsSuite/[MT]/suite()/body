{
  VoltServerConfig config=null;
  MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestHexLiteralsSuite.class);
  boolean success;
  VoltProjectBuilder project=new VoltProjectBuilder();
  String literalSchema="CREATE TABLE T (\n" + "  PK INTEGER NOT NULL PRIMARY KEY,\n" + "  BI BIGINT,\n"+ "  TI TINYINT,\n"+ "  VB VARBINARY(8)\n"+ ");\n";
  literalSchema+="CREATE PROCEDURE InsertVarbinary AS " + "INSERT INTO T (PK, VB) VALUES (?, ?);";
  literalSchema+="CREATE PROCEDURE InsertBigint AS " + "INSERT INTO T (PK, BI) VALUES (?, ?);";
  literalSchema+="CREATE PROCEDURE InsertTinyint AS " + "INSERT INTO T (PK, TI) VALUES (?, ?);";
  literalSchema+="CREATE PROCEDURE UpdateTinyint AS " + "UPDATE T SET TI = ? WHERE PK = ?;";
  literalSchema+="CREATE PROCEDURE InsertTinyintConstantMax AS " + "INSERT INTO T (PK, TI) VALUES (?, X'7F');";
  literalSchema+="CREATE PROCEDURE InsertTinyintConstantMin aS " + "INSERT INTO T (PK, TI) VALUES (?, X'FfffFfffFfffFf81');";
  literalSchema+="CREATE PROCEDURE UpdateTinyintConstantMax AS " + "UPDATE T SET TI = X'7F' WHERE PK = ?;";
  literalSchema+="CREATE PROCEDURE UpdateTinyintConstantMin AS " + "UPDATE T SET TI = X'FfffFfffFfffFf81' WHERE PK = ?;";
  literalSchema+="CREATE PROCEDURE MixedTypeMath AS \n" + "SELECT\n" + "  33 + ?,\n"+ "  33.0 + ?,\n"+ "  X'21' + ?,\n"+ "  10000000000000000033 + ?"+ "FROM T;"+ "";
  for (  long val : interestingValues) {
    literalSchema+="CREATE PROCEDURE XQUOTE_VARBINARY_PROC_" + makeSixteenDigits(val) + " AS\n"+ "  SELECT PK FROM T WHERE VB = "+ longToEightByteHexLiteral(val)+ ";\n";
  }
  for (  long val : interestingValues) {
    literalSchema+="CREATE PROCEDURE INT_HEX_LITERAL_PROC_" + makeEvenDigits(val) + " AS\n"+ "  SELECT HEX(BITXOR(X'"+ makeEvenDigits(val)+ "', ?)) FROM T;\n";
  }
  for (  long val : interestingValues) {
    literalSchema+="CREATE PROCEDURE INT_HEX_LITERAL_PROC_WHERE_" + makeEvenDigits(val) + " AS\n"+ "  SELECT PK FROM T WHERE BI = X'"+ makeEvenDigits(val)+ "';\n";
  }
  for (  long val : boringValues) {
    literalSchema+="CREATE PROCEDURE HEX_LITERAL_PROC_ARITH_" + makeEvenDigits(val) + " AS\n"+ "  SELECT \n"+ "? + X'"+ makeEvenDigits(val)+ "',\n"+ "X'"+ makeEvenDigits(val)+ "' - ?,\n"+ "? * X'"+ makeEvenDigits(val)+ "',\n"+ "X'"+ makeEvenDigits(val)+ "' / ?,\n"+ "- X'"+ makeEvenDigits(val)+ "'\n"+ "FROM T;";
  }
  try {
    project.addLiteralSchema(literalSchema);
  }
 catch (  Exception e) {
    fail();
  }
  config=new LocalCluster("fixedsql-threesite.jar",3,1,0,BackendTarget.NATIVE_EE_JNI);
  success=config.compile(project);
  assertTrue(success);
  builder.addServerConfig(config);
  return builder;
}
