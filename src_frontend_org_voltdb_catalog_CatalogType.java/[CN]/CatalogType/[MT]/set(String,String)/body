{
  if ((field == null) || (value == null)) {
    throw new CatalogException("Null value where it shouldn't be.");
  }
  if (m_fields.containsKey(field) == false)   throw new CatalogException("Unexpected field name '" + field + "' for "+ this);
  Object current=m_fields.get(field);
  value=value.trim();
  if (value.startsWith("/")) {
    UnresolvedInfo uinfo=new UnresolvedInfo();
    uinfo.path=value;
    m_fields.put(field,uinfo);
  }
 else   if (value.startsWith("null")) {
    m_fields.put(field,null);
  }
 else   if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
    if (current.getClass() != Boolean.class)     throw new CatalogException("Unexpected type for field '" + field + "'.");
    m_fields.put(field,Boolean.parseBoolean(value));
  }
 else   if ((value.startsWith("\"") && value.endsWith("\"")) || (value.startsWith("'") && value.endsWith("'"))) {
    if (current.getClass() != String.class)     throw new CatalogException("Unexpected type for field.");
    value=value.substring(1,value.length() - 1);
    m_fields.put(field,value);
  }
 else {
    boolean isint=value.length() > 0;
    for (int i=0; i < value.length(); i++) {
      if ((i == 0) && (value.length() > 1) && (value.charAt(i) == '-'))       continue;
      if (!Character.isDigit(value.charAt(i)))       isint=false;
    }
    if (isint) {
      if (current.getClass() != Integer.class)       throw new CatalogException("Unexpected type for field.");
      int intValue=Integer.parseInt(value);
      m_fields.put(field,intValue);
    }
 else {
      throw new CatalogException("Unexpected non-digit character in '" + value + "' for field '"+ field+ "'");
    }
  }
  update();
}
