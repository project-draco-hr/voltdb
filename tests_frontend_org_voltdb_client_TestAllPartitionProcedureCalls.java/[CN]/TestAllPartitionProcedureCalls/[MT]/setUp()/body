{
  VoltFile.recursivelyDelete(new File("/tmp/" + System.getProperty("user.name")));
  File f=new File("/tmp/" + System.getProperty("user.name"));
  f.mkdirs();
  if (TheHashinator.getConfiguredHashinatorType() != TheHashinator.HashinatorType.ELASTIC)   return;
  cluster=new LocalCluster("client-all-partitions.jar",4,2,0,BackendTarget.NATIVE_EE_JNI);
  cluster.overrideAnyRequestForValgrind();
  cluster.setHasLocalServer(false);
  VoltProjectBuilder project=new VoltProjectBuilder();
  project.setUseDDLSchema(true);
  project.addSchema(TestAllPartitionProcedureCalls.class.getResource("allpartitioncall.sql"));
  project.addPartitionInfo("TABLE_INT_PARTITION","value_number1");
  project.addPartitionInfo("TABLE_STRING_PARTITION","value_string");
  project.addProcedures(new VoltProjectBuilder.ProcedureInfo(PartitionIntegerTestProc.class,"TABLE_INT_PARTITION.value_number1"),new VoltProjectBuilder.ProcedureInfo(PartitionStringTestProc.class,"TABLE_STRING_PARTITION.value_string"),new VoltProjectBuilder.ProcedureInfo(PartitionFailureTestProc.class,"TABLE_INT_PARTITION.value_number1"));
  boolean success=cluster.compile(project);
  assertTrue(success);
  cluster.startUp();
  ClientConfig config=new ClientConfig();
  config.setClientAffinity(false);
  client=ClientFactory.createClient(config);
  client.createConnection("",cluster.port(0));
  load(client,"TABLE_INT_PARTITION");
  load(client,"TABLE_STRING_PARTITION");
  clientWithAffinity=ClientFactory.createClient();
  clientWithAffinity.createConnection("",cluster.port(0));
}
