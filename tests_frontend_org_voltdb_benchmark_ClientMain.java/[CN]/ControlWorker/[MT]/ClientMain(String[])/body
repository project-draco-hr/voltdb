{
  m_voltClient=ClientFactory.createClient(getExpectedOutgoingMessageSize(),null,true);
  String username="";
  String password="";
  ControlState state=ControlState.PREPARING;
  String reason="";
  int transactionRate=-1;
  int id=0;
  boolean exitOnCompletion=true;
  float checkTransaction=0;
  for (  final String arg : args) {
    final String[] parts=arg.split("=",2);
    if (parts.length == 1) {
      state=ControlState.ERROR;
      reason="Invalid parameter: " + arg;
      break;
    }
 else     if (parts[1].startsWith("${")) {
      continue;
    }
 else     if (parts[0].equals("USER")) {
      username=parts[1];
    }
 else     if (parts[0].equals("PASSWORD")) {
      password=parts[1];
    }
 else     if (parts[0].equals("EXITONCOMPLETION")) {
      exitOnCompletion=Boolean.parseBoolean(parts[1]);
    }
 else     if (parts[0].equals("TXNRATE")) {
      transactionRate=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("ID")) {
      id=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CHECKTRANSACTION")) {
      checkTransaction=Float.parseFloat(parts[1]);
    }
  }
  m_id=id;
  m_exitOnCompletion=exitOnCompletion;
  m_username=username;
  m_password=password;
  m_txnRate=transactionRate;
  m_txnsPerMillisecond=transactionRate / 1000.0;
  if (state != ControlState.PREPARING)   setState(state,reason);
  boolean atLeastOneConnection=false;
  for (  final String arg : args) {
    final String[] parts=arg.split("=",2);
    if (parts.length == 1) {
      continue;
    }
 else     if (parts[0].equals("HOST")) {
      final String hostnport[]=parts[1].split("\\:",2);
      try {
        System.err.println("Creating connection to  " + hostnport[0]);
        createConnection(hostnport[0]);
        System.err.println("Created connection.");
        atLeastOneConnection=true;
      }
 catch (      final Exception ex) {
        setState(ControlState.ERROR,"createConnection to " + arg + " failed: "+ ex.getMessage());
      }
    }
  }
  if (!atLeastOneConnection)   setState(ControlState.ERROR,"No HOSTS specified on command line.");
  m_checkTransaction=checkTransaction;
  m_constraints=new LinkedHashMap<Pair<String,Integer>,Verification.Expression>();
  m_countDisplayNames=getTransactionDisplayNames();
  m_counts=new AtomicLong[m_countDisplayNames.length];
  for (int ii=0; ii < m_counts.length; ii++) {
    m_counts[ii]=new AtomicLong(0);
  }
}
