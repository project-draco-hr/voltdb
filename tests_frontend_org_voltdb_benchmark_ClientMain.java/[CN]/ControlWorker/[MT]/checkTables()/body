{
  String dir="/tmp";
  String nonce="data_verification";
  Client client=ClientFactory.createClient(getExpectedOutgoingMessageSize(),null,false,null,null);
  LinkedHashMap<Integer,String> hostMappings=new LinkedHashMap<Integer,String>();
  LinkedHashMap<String,Pair<String,String>> snapshotMappings=new LinkedHashMap<String,Pair<String,String>>();
  boolean isSatisfied=true;
  org.voltdb.EELibraryLoader.loadExecutionEngineLibrary(true);
  try {
    boolean keepTrying=true;
    VoltTable[] response=null;
    client.createConnection(m_host,m_username,m_password);
    while (m_id == 0) {
      response=client.callProcedure("@SnapshotSave",dir,nonce,1).getResults();
      if (response.length != 1 || !response[0].advanceRow() || !response[0].getString("RESULT").equals("SUCCESS")) {
        if (keepTrying && response[0].getString("ERR_MSG").contains("ALREADY EXISTS")) {
          client.callProcedure("@SnapshotDelete",new String[]{dir},new String[]{nonce});
          keepTrying=false;
          continue;
        }
        System.err.println("Failed to take snapshot");
        return false;
      }
      break;
    }
    if (m_id > 0) {
      int maxTry=10;
      while (maxTry-- > 0) {
        boolean found=false;
        response=client.callProcedure("@SnapshotStatus").getResults();
        if (response.length != 2) {
          System.err.println("Failed to get snapshot status");
          return false;
        }
        while (response[0].advanceRow()) {
          if (response[0].getString("NONCE").equals(nonce)) {
            found=true;
            break;
          }
        }
        if (found) {
          if (response[0].getLong("END_TIME") > 0)           break;
        }
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
          return false;
        }
      }
    }
    response=client.callProcedure("@SystemInformation").getResults();
    if (response.length != 1) {
      System.err.println("Failed to get host ID to IP address mapping");
      return false;
    }
    while (response[0].advanceRow()) {
      if (!response[0].getString("KEY").equals("HOSTNAME")) {
        continue;
      }
      hostMappings.put((Integer)response[0].get("HOST_ID",VoltType.INTEGER),response[0].getString("VALUE"));
    }
    response=client.callProcedure("@SnapshotScan",dir).getResults();
    if (response.length != 3) {
      System.err.println("Failed to get snapshot filenames");
      return false;
    }
    while (response[0].advanceRow()) {
      if (!response[0].getString("NONCE").equals(nonce))       continue;
      String[] tables=response[0].getString("TABLES_REQUIRED").split(",");
      for (      String t : tables) {
        snapshotMappings.put(t,null);
      }
      break;
    }
    while (response[2].advanceRow()) {
      int id=(Integer)response[2].get("HOST_ID",VoltType.INTEGER);
      String tableName=response[2].getString("TABLE");
      if (!snapshotMappings.containsKey(tableName) || !hostMappings.containsKey(id)) {
        System.err.println("FAILED configuring snapshotMappings for: ");
        System.err.println("snapshottingMapping[" + tableName + "] "+ snapshotMappings.get(tableName));
        System.err.println("hostMappings[" + id + "] "+ hostMappings.get(id));
        continue;
      }
      snapshotMappings.put(tableName,Pair.of(hostMappings.get(id),response[2].getString("NAME")));
    }
  }
 catch (  NoConnectionsException e) {
    e.printStackTrace();
    return false;
  }
catch (  ProcCallException e) {
    e.printStackTrace();
    return false;
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  System.err.println("Checking " + m_tableCheckOrder.size() + " table contraints");
  for (  String tableName : m_tableCheckOrder) {
    Pair<String,String> value=snapshotMappings.get(tableName);
    if (value == null) {
      System.err.println("No snapshot mapping for table: " + tableName);
      continue;
    }
    String hostName=value.getFirst();
    File file=new File(dir,value.getSecond());
    FileInputStream inputStream=null;
    TableSaveFile saveFile=null;
    long rowCount=0;
    Pair<String,Integer> key=Pair.of(tableName,0);
    if (!m_constraints.containsKey(key) || hostName == null) {
      System.err.println("No constraint for : " + tableName);
      continue;
    }
    String localhostName=ConnectionUtil.getHostnameOrAddress();
    if (!hostName.equals("localhost") && !hostName.equals(localhostName)) {
      if (!SSHTools.copyFromRemote(file,m_username,hostName,file.getPath())) {
        System.err.println("Failed to copy the snapshot file " + file.getPath() + " from host "+ hostName);
        return false;
      }
    }
    if (!file.exists()) {
      System.err.println("Snapshot file " + file.getPath() + " cannot be copied from "+ hostName+ " to localhost");
      return false;
    }
    try {
      try {
        inputStream=new FileInputStream(file);
        saveFile=new TableSaveFile(inputStream.getChannel(),3,null);
        while (isSatisfied && saveFile.hasMoreChunks()) {
          final BBContainer chunk=saveFile.getNextChunk();
          VoltTable table=null;
          if (chunk == null)           continue;
          table=PrivateVoltTableFactory.createVoltTableFromBuffer(chunk.b,true);
          while (isSatisfied && table.advanceRow()) {
            isSatisfied=Verification.checkRow(m_constraints.get(key),table);
            rowCount++;
          }
          chunk.discard();
        }
      }
  finally {
        if (saveFile != null) {
          saveFile.close();
        }
        if (inputStream != null)         inputStream.close();
        if (!hostName.equals("localhost") && !hostName.equals(localhostName) && !file.delete())         System.err.println("Failed to delete snapshot file " + file.getPath());
      }
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      return false;
    }
catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
    if (isSatisfied) {
      System.err.println("Table " + tableName + " with "+ rowCount+ " rows passed check");
    }
 else {
      System.err.println("Table " + tableName + " failed check");
      break;
    }
  }
  try {
    if (m_id == 0) {
      client.callProcedure("@SnapshotDelete",new String[]{dir},new String[]{nonce}).getResults();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ProcCallException e) {
    e.printStackTrace();
  }
  System.err.println("Table checking finished " + (isSatisfied ? "successfully" : "with failures"));
  return isSatisfied;
}
