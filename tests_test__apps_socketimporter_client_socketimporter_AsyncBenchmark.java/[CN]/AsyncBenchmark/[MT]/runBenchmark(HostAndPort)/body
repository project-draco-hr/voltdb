{
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Setup & Initialization");
  System.out.println(HORIZONTAL_RULE);
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Starting Benchmark");
  System.out.println(HORIZONTAL_RULE);
  SecureRandom rnd=new SecureRandom();
  rnd.setSeed(Thread.currentThread().getId());
  long icnt=0;
  try {
    System.out.println("Warming up...");
    final long warmupEndTime=System.currentTimeMillis() + (1000l * config.warmup);
    while (warmupEndTime > System.currentTimeMillis()) {
      long t=System.currentTimeMillis();
      long key=rnd.nextLong();
      Pair<Long,Long> p=new Pair<Long,Long>(key,t);
      queue.offer(p);
      String s=key + "," + t+ "\n";
      writeFully(s,hap,warmupEndTime);
      icnt++;
    }
    benchmarkStartTS=System.currentTimeMillis();
    schedulePeriodicStats();
    System.out.println("\nRunning benchmark...");
    final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
    while (benchmarkEndTime > System.currentTimeMillis()) {
      long t=System.currentTimeMillis();
      long key=rnd.nextLong();
      Pair<Long,Long> p=new Pair<Long,Long>(key,t);
      queue.offer(p);
      String s=key + "," + t+ "\n";
      writeFully(s,hap,benchmarkEndTime);
      icnt++;
    }
    haplist.get(hap).flush();
  }
  finally {
    timer.cancel();
    finalInsertCount.addAndGet(icnt);
    printResults();
  }
}
