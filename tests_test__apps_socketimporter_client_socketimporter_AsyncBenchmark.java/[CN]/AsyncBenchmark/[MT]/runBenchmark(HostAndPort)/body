{
  System.out.print(HORIZONTAL_RULE);
  log.info(" Setup & Initialization");
  log.info(HORIZONTAL_RULE);
  System.out.print(HORIZONTAL_RULE);
  log.info(" Starting Benchmark");
  log.info(HORIZONTAL_RULE);
  SecureRandom rnd=new SecureRandom();
  rnd.setSeed(Thread.currentThread().getId());
  log.info("Warming up...");
  final long warmupEndTime=System.currentTimeMillis() + (1000l * config.warmup);
  while (warmupEndTime > System.currentTimeMillis()) {
    String key=Long.toString(rnd.nextLong());
    String s;
    if (config.perftest) {
      String valString=RandomStringUtils.randomAlphanumeric(1024);
      s=key + "," + valString+ "\n";
    }
 else {
      String t=Long.toString(System.currentTimeMillis());
      Pair<String,String> p=new Pair<String,String>(key,t);
      queue.offer(p);
      s=key + "," + t+ "\n";
    }
    writeFully(s,hap,warmupEndTime);
    warmupCount.getAndIncrement();
  }
  benchmarkStartTS=System.currentTimeMillis();
  log.info("\nRunning benchmark...");
  final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
  while (benchmarkEndTime > System.currentTimeMillis()) {
    String key=Long.toString(rnd.nextLong());
    String s;
    if (config.perftest) {
      String valString=RandomStringUtils.randomAlphanumeric(16);
      s=key + "," + valString+ "\n";
    }
 else {
      String t=Long.toString(System.currentTimeMillis());
      Pair<String,String> p=new Pair<String,String>(key,t);
      queue.offer(p);
      s=key + "," + t+ "\n";
    }
    writeFully(s,hap,benchmarkEndTime);
    runCount.getAndIncrement();
  }
  haplist.get(hap).flush();
  log.info("Benchmark loop complete for this thread.");
  if (timer != null)   timer.cancel();
}
