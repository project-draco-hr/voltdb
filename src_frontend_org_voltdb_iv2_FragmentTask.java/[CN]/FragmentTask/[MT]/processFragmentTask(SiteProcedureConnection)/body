{
  String procName=m_fragmentMsg.getProcedureName();
  if (procName != null) {
    siteConnection.ensureProcLoaded(procName);
  }
  if (procName.startsWith("@LoadMultipartitionTable")) {
    Iv2InitiateTaskMessage itm=m_fragmentMsg.getInitiateTask();
    if (itm != null) {
      String tableName=(String)itm.getParameters()[0];
      siteConnection.ensureProcLoaded(tableName.toUpperCase() + ".insert");
    }
  }
  final FragmentResponseMessage currentFragResponse=new FragmentResponseMessage(m_fragmentMsg,m_initiator.getHSId());
  currentFragResponse.setStatus(FragmentResponseMessage.SUCCESS,null);
  if (m_inputDeps != null) {
    siteConnection.stashWorkUnitDependencies(m_inputDeps);
  }
  if (m_fragmentMsg.isEmptyForRestart()) {
    int outputDepId=m_fragmentMsg.getOutputDepId(0);
    currentFragResponse.addDependency(outputDepId,new VoltTable(new ColumnInfo[]{new ColumnInfo("UNUSED",VoltType.INTEGER)},1));
    return currentFragResponse;
  }
  for (int frag=0; frag < m_fragmentMsg.getFragmentCount(); frag++) {
    byte[] planHash=m_fragmentMsg.getPlanHash(frag);
    final int outputDepId=m_fragmentMsg.getOutputDepId(frag);
    ParameterSet params=m_fragmentMsg.getParameterSetForFragment(frag);
    final int inputDepId=m_fragmentMsg.getOnlyInputDepId(frag);
    long fragmentId=0;
    byte[] fragmentPlan=null;
    try {
      VoltTable dependency;
      fragmentPlan=m_fragmentMsg.getFragmentPlan(frag);
      String stmtText=null;
      if (fragmentPlan != null) {
        stmtText=m_fragmentMsg.getStmtText(frag);
        fragmentId=ActivePlanRepository.loadOrAddRefPlanFragment(planHash,fragmentPlan,null);
      }
 else {
        fragmentId=ActivePlanRepository.getFragmentIdForPlanHash(planHash);
        stmtText=ActivePlanRepository.getStmtTextForPlanHash(planHash);
      }
      siteConnection.setBatch(m_fragmentMsg.getCurrentBatchIndex());
      dependency=siteConnection.executePlanFragments(1,new long[]{fragmentId},new long[]{inputDepId},new ParameterSet[]{params},stmtText == null ? null : new String[]{stmtText},m_txnState.txnId,m_txnState.m_spHandle,m_txnState.uniqueId,m_txnState.isReadOnly())[0];
      if (hostLog.isTraceEnabled()) {
        hostLog.l7dlog(Level.TRACE,LogKeys.org_voltdb_ExecutionSite_SendingDependency.name(),new Object[]{outputDepId},null);
      }
      currentFragResponse.addDependency(outputDepId,dependency);
    }
 catch (    final EEException e) {
      hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),new Object[]{Encoder.hexEncode(planHash)},e);
      currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
      break;
    }
catch (    final SQLException e) {
      hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),new Object[]{Encoder.hexEncode(planHash)},e);
      currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
      break;
    }
catch (    final InterruptException e) {
      hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),new Object[]{Encoder.hexEncode(planHash)},e);
      currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
      break;
    }
 finally {
      if (fragmentPlan != null) {
        ActivePlanRepository.decrefPlanFragmentById(fragmentId);
      }
    }
  }
  return currentFragResponse;
}
