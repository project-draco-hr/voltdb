{
  String insertStatement="insert into all_numbers values(?, ?, ?, ?, ?, ?, ?)";
  String selectStatement="select * from all_numbers";
  String deleteStatement="delete from all_numbers";
  for (  GetNumberData data : getNumberData) {
    PreparedStatement ins=conn.prepareStatement(insertStatement);
    for (int i=0; i < 7; i++) {
      ins.setString(i + 1,data.insertData[i]);
    }
    if (ins.executeUpdate() != 1) {
      if (data.testSuccess)       fail();
 else       continue;
    }
    Statement sel=conn.createStatement();
    sel.execute(selectStatement);
    ResultSet rs=sel.getResultSet();
    rs.next();
    for (int i=0; i < 7; i++) {
      try {
switch (data.getType[i]) {
case BYTE:
          Byte resByte=new Byte(rs.getByte(i + 1));
        if (rs.wasNull())         assertEquals(resByte,new Byte("0"));
 else         assertEquals(resByte,new Byte(data.insertData[i]));
      break;
case SHORT:
    Short resShort=new Short(rs.getShort(i + 1));
  if (rs.wasNull())   assertEquals(resShort,new Short("0"));
 else   assertEquals(resShort,new Short(data.insertData[i]));
break;
case INT:
Integer resInt=rs.getInt(i + 1);
if (rs.wasNull()) assertEquals(resInt,new Integer("0"));
 else assertEquals(resInt,new Integer(data.insertData[i]));
break;
case LONG:
Long resLong=rs.getLong(i + 1);
if (rs.wasNull()) assertEquals(resLong,new Long("0"));
 else assertEquals(resLong,new Long(data.insertData[i]));
break;
case FLOAT:
Float resFloat=rs.getFloat(i + 1);
if (rs.wasNull()) assertEquals(resFloat,new Float("0"));
 else assertEquals(resFloat,new Float(data.insertData[i]));
break;
case DOUBLE:
Double resDouble=rs.getDouble(i + 1);
if (rs.wasNull()) assertEquals(resDouble,new Double("0"));
 else assertEquals(resDouble,new Double(data.insertData[i]));
break;
case BIGDECIMAL:
BigDecimal resDec=rs.getBigDecimal(i + 1);
if (rs.wasNull()) assertNull(resDec);
 else {
int scale=resDec.scale();
assertEquals(resDec,new BigDecimal(data.insertData[i]).setScale(scale));
}
break;
}
}
 catch (Exception e) {
if (data.testSuccess) {
e.printStackTrace();
fail();
}
 else break;
}
}
Statement del=conn.createStatement();
del.execute(deleteStatement);
}
}
