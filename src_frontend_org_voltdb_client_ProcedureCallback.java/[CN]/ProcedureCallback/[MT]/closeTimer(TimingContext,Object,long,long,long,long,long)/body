{
synchronized (context) {
    final long now=System.nanoTime();
    final long durationNano=now - callTimeInNanos;
    final long durationNanoToMillis=(long)(durationNano / 1000000.0);
    final Long time=context.times.get(durationNanoToMillis);
    if (time != null) {
      context.times.put(durationNanoToMillis,time.longValue() + 1);
    }
 else {
      context.times.put(durationNanoToMillis,1L);
    }
    final Long totalTime=context.totalTimes.get(durationNanoToMillis);
    if (totalTime != null) {
      context.totalTimes.put(durationNanoToMillis,totalTime.longValue() + 1);
    }
 else {
      context.totalTimes.put(durationNanoToMillis,1L);
    }
    final Long invocationCount=context.invocationCount.get(invocationCounterKey);
    if (invocationCount != null) {
      context.invocationCount.put(invocationCounterKey,new Long(invocationCount.longValue() + 1));
    }
 else {
      context.invocationCount.put(invocationCounterKey,1L);
    }
    final Long totalInvocationCount=context.totalInvocationCount.get(invocationCounterKey);
    context.totalInvocationCount.put(invocationCounterKey,totalInvocationCount.longValue() + 1);
    context.totalCallTime+=durationNano;
    context.sumOfSquaresForCallTime+=durationNano * durationNano;
    context.totalCallCount++;
    if (durationNano > context.maxDuration)     context.maxDuration=durationNano;
    if (durationNano < context.minDuration)     context.minDuration=durationNano;
    if ((context.totalCallCount % 144000000) == 0) {
      final CharArrayWriter caw=new CharArrayWriter(8192);
      final PrintWriter pw=new PrintWriter(caw);
      double ave=context.totalCallTime / (double)context.totalCallCount;
      double s2=context.sumOfSquaresForCallTime / (context.totalCallCount - 1.0) - (ave * ave);
      double s=Math.sqrt(s2);
      final File timesFile=new File(hostname + "-latency-distribution-" + context.timesReportIndex+++ ".png");
      logTimes(context.times,timesFile);
      context.times.clear();
      pw.printf("Latency ave/max/min/stddev = %.3f / %.3f / %.3f / %.3f ms\n",ave / 1000000.0,context.maxDuration / 1000000.0,context.minDuration / 1000000.0,s / 1000000.0);
      pw.flush();
      timesLogger.info(caw.toString());
      context.totalCallTime=0;
      context.sumOfSquaresForCallTime=0;
      context.totalCallCount=0;
      context.maxDuration=Long.MIN_VALUE;
      context.minDuration=Long.MAX_VALUE;
    }
  }
}
