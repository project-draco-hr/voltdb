{
  TreeMap<Long,Long> sortedTimes=new TreeMap<Long,Long>(times);
  final File tempFile;
  try {
    tempFile=new File(file.getName().substring(0,file.getName().length() - 4));
    final FileWriter fw=new FileWriter(tempFile);
    BufferedWriter bw=new BufferedWriter(fw);
    PrintWriter pwr=new PrintWriter(bw);
    for (    Map.Entry<Long,Long> e : sortedTimes.entrySet()) {
      pwr.append('\n');
      pwr.append(e.getKey().toString()).append(' ').append(e.getValue().toString());
    }
    pwr.flush();
    pwr.close();
  }
 catch (  IOException e1) {
    throw new RuntimeException(e1);
  }
  try {
    String args[]=new String[]{"/bin/sh","-c","/usr/bin/graph -T png --bitmap-size 1024x768 -L \"Distribution of latency\" " + "-Y \"Number of invocations with this latency\" -w .8 -h.8 -u .1 " + "-X \"Latency in milliseconds\" "+ "-r .15 -f.03 " + tempFile.getAbsolutePath() + " > "+ file.getName()};
    ProcessBuilder pb=new ProcessBuilder(args);
    pb.redirectErrorStream(true);
    final Process p=pb.start();
    Thread t=new Thread(){
      @Override public void run(){
        BufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));
        try {
          while (true) {
            final String line=reader.readLine();
            if (line == null) {
              try {
                p.waitFor();
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
              return;
            }
            System.err.println(line);
          }
        }
 catch (        IOException e) {
        }
      }
    }
;
    t.start();
    return t;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}
