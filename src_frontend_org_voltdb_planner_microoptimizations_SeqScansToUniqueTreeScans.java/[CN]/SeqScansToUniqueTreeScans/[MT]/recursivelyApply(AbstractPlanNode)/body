{
  assert(plan != null);
  ArrayList<AbstractPlanNode> children=new ArrayList<AbstractPlanNode>();
  for (int i=0; i < plan.getChildCount(); i++) {
    children.add(plan.getChild(i));
  }
  for (  AbstractPlanNode child : children) {
    AbstractPlanNode newChild=recursivelyApply(child);
    if (newChild == child) {
      continue;
    }
    boolean replaced=plan.replaceChild(child,newChild);
    assert(true == replaced);
  }
  if ((plan instanceof SeqScanPlanNode) == false) {
    return plan;
  }
  assert(plan.getChildCount() == 0);
  SeqScanPlanNode scanNode=(SeqScanPlanNode)plan;
  String tableName=scanNode.getTargetTableName();
  Table table=m_parsedStmt.m_db.getTables().get(tableName);
  assert(table != null);
  Index indexToScan=null;
  for (  Index index : table.getIndexes()) {
    if (index.getUnique() == false) {
      continue;
    }
 else     if (index.getType() != IndexType.BALANCED_TREE.getValue()) {
      continue;
    }
 else {
      if (indexToScan == null) {
        indexToScan=index;
      }
 else {
        if (CatalogUtil.getCatalogIndexSize(indexToScan) > CatalogUtil.getCatalogIndexSize(index)) {
          indexToScan=index;
        }
      }
    }
  }
  if (indexToScan == null) {
    return plan;
  }
  IndexScanPlanNode indexScanNode=new IndexScanPlanNode(scanNode,null,indexToScan,SortDirectionType.ASC);
  indexScanNode.setKeyIterate(true);
  indexScanNode.setForDeterminismOnly();
  return indexScanNode;
}
