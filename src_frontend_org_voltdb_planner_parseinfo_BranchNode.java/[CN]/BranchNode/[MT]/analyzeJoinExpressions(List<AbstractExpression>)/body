{
  getLeftNode().analyzeJoinExpressions(noneList);
  getRightNode().analyzeJoinExpressions(noneList);
  assert(getJoinType() != JoinType.RIGHT);
  ArrayList<AbstractExpression> joinList=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> whereList=new ArrayList<AbstractExpression>();
  joinList.addAll(ExpressionUtil.uncombineAny(getJoinExpression()));
  whereList.addAll(ExpressionUtil.uncombineAny(getWhereExpression()));
  JoinNode leftChild=getLeftNode();
  if (!(leftChild instanceof BranchNode)) {
    joinList.addAll(leftChild.m_joinInnerList);
    leftChild.m_joinInnerList.clear();
    whereList.addAll(leftChild.m_whereInnerList);
    leftChild.m_whereInnerList.clear();
  }
  JoinNode rightChild=getRightNode();
  if (!(rightChild instanceof BranchNode)) {
    joinList.addAll(rightChild.m_joinInnerList);
    rightChild.m_joinInnerList.clear();
    whereList.addAll(rightChild.m_whereInnerList);
    rightChild.m_whereInnerList.clear();
  }
  Collection<String> outerTables=leftChild.generateTableJoinOrder();
  Collection<String> innerTables=rightChild.generateTableJoinOrder();
  classifyJoinExpressions(joinList,outerTables,innerTables,m_joinOuterList,m_joinInnerList,m_joinInnerOuterList,noneList);
  applyTransitiveEquivalence(m_joinOuterList,m_joinInnerList,m_joinInnerOuterList);
  classifyJoinExpressions(whereList,outerTables,innerTables,m_whereOuterList,m_whereInnerList,m_whereInnerOuterList,noneList);
  applyTransitiveEquivalence(m_whereOuterList,m_whereInnerList,m_whereInnerOuterList);
  pushDownExpressions(noneList);
  Iterator<AbstractExpression> iter=noneList.iterator();
  while (iter.hasNext()) {
    AbstractExpression noneExpr=iter.next();
    if (VoltType.BOOLEAN == noneExpr.getValueType()) {
      m_whereInnerOuterList.add(noneExpr);
      iter.remove();
    }
  }
}
