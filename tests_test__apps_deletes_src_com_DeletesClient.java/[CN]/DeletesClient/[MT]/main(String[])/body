{
  if (args.length != 7) {
    System.err.println("Client args: [average batch size] [num batches to keep] [cleanup frequency] [blocking snapshots (1 or 0)] [server list]");
    System.exit(-1);
  }
  m_averageBatchSize=Integer.valueOf(args[0]);
  m_batchesToKeep=Integer.valueOf(args[1]);
  m_deceasedCleanupFreq=Integer.valueOf(args[2]);
  m_snapshotFreq=Integer.valueOf(args[3]);
  m_blockingSnapshots=Integer.valueOf(args[4]) != 0;
  m_smallStrings=Integer.valueOf(args[5]) != 0;
  System.out.println("Starting Deletes app with:");
  System.out.printf("\tAverage batch size of %d\n",m_averageBatchSize);
  System.out.printf("\tKeeping %d batches\n",m_batchesToKeep);
  System.out.printf("\tCleaning up deceased every %d batches\n",m_deceasedCleanupFreq);
  System.out.printf("\tSnapshotting every %d batches\n",m_snapshotFreq);
  String commaSeparatedServers=args[6];
  List<String> servers=new LinkedList<String>();
  String[] commaSeparatedServersParts=commaSeparatedServers.split(",");
  for (  String server : commaSeparatedServersParts) {
    servers.add(server.trim());
  }
  File tmpdir=new File(m_snapshotDir);
  tmpdir.mkdir();
  generateNames(16);
  Client client=null;
  ClientConfig config=new ClientConfig("program","none");
  config.setProcedureCallTimeout(Long.MAX_VALUE);
  client=ClientFactory.createClient(config);
  for (  String server : servers) {
    try {
      client.createConnection(server);
    }
 catch (    UnknownHostException e) {
      e.printStackTrace();
      System.exit(-1);
    }
catch (    IOException e) {
      System.err.println("Could not connect to database, terminating: (" + server + ")");
      System.exit(-1);
    }
  }
  for (int i=0; i < m_batchesToKeep; i++) {
    insertBatch(client,true);
  }
  long deceased_counter=0;
  long snapshot_counter=0;
  long max_batch_counter=0;
  boolean fill_max=false;
  long max_batch_remaining=0;
  while (true) {
    insertBatch(client,fill_max);
    collectStats(client);
    snapshot_counter++;
    if (snapshot_counter == m_snapshotFreq) {
      performSnapshot(client);
      snapshot_counter=0;
    }
    deceased_counter++;
    if (deceased_counter == m_deceasedCleanupFreq) {
      deleteDeceased(client);
      deceased_counter=0;
    }
    countBatch(client,m_batchNumber - m_batchesToKeep - 1);
    deleteBatch(client,m_batchesToKeep);
  }
}
