{
  try {
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();
    Document doc=docBuilder.parse(valgrindOutputFile);
    NodeList errors=doc.getElementsByTagName("error");
    for (int idx=0; idx < errors.getLength(); idx+=1) {
      Node error=errors.item(idx);
      ValgrindError vgerr=new ValgrindError();
      for (Node sib=error.getFirstChild(); sib != null; sib=sib.getNextSibling()) {
        String name=sib.getNodeName();
        String value=sib.getTextContent().trim();
switch (name) {
case "kind":
          vgerr.m_kind=value;
        break;
case "what":
      vgerr.m_what=value;
    break;
case "xwhat":
  vgerr.m_what=readExtendedWhat(sib);
break;
case "leakedbytes":
vgerr.m_leakedBytes=Integer.valueOf(value);
break;
case "leakedblocks":
vgerr.m_leakedBlocks=Integer.valueOf(value);
break;
case "stack":
vgerr.m_stacks.add(readStackTrace(sib));
break;
default :
break;
}
}
valgrindErrors.add(vgerr.toString());
}
}
 catch (Exception ex) {
ex.printStackTrace();
return;
}
}
