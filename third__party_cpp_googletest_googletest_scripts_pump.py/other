'pump v0.2.0 - Pretty Useful for Meta Programming.\n\nA tool for preprocessor meta programming.  Useful for generating\nrepetitive boilerplate code.  Especially useful for writing C++\nclasses, functions, macros, and templates that need to work with\nvarious number of arguments.\n\nUSAGE:\n       pump.py SOURCE_FILE\n\nEXAMPLES:\n       pump.py foo.cc.pump\n         Converts foo.cc.pump to foo.cc.\n\nGRAMMAR:\n       CODE ::= ATOMIC_CODE*\n       ATOMIC_CODE ::= $var ID = EXPRESSION\n           | $var ID = [[ CODE ]]\n           | $range ID EXPRESSION..EXPRESSION\n           | $for ID SEPARATOR [[ CODE ]]\n           | $($)\n           | $ID\n           | $(EXPRESSION)\n           | $if EXPRESSION [[ CODE ]] ELSE_BRANCH\n           | [[ CODE ]]\n           | RAW_CODE\n       SEPARATOR ::= RAW_CODE | EMPTY\n       ELSE_BRANCH ::= $else [[ CODE ]]\n           | $elif EXPRESSION [[ CODE ]] ELSE_BRANCH\n           | EMPTY\n       EXPRESSION has Python syntax.\n'
__author__ = 'wan@google.com (Zhanyong Wan)'
import os
import re
import sys
TOKEN_TABLE = [(re.compile('\\$var\\s+'), '$var'), (re.compile('\\$elif\\s+'), '$elif'), (re.compile('\\$else\\s+'), '$else'), (re.compile('\\$for\\s+'), '$for'), (re.compile('\\$if\\s+'), '$if'), (re.compile('\\$range\\s+'), '$range'), (re.compile('\\$[_A-Za-z]\\w*'), '$id'), (re.compile('\\$\\(\\$\\)'), '$($)'), (re.compile('\\$'), '$'), (re.compile('\\[\\[\\n?'), '[['), (re.compile('\\]\\]\\n?'), ']]')]
ID_REGEX = re.compile('[_A-Za-z]\\w*')
EQ_REGEX = re.compile('=')
REST_OF_LINE_REGEX = re.compile('.*?(?=$|\\$\\$)')
OPTIONAL_WHITE_SPACES_REGEX = re.compile('\\s*')
WHITE_SPACE_REGEX = re.compile('\\s')
DOT_DOT_REGEX = re.compile('\\.\\.')
if (__name__ == '__main__'):
    main(sys.argv)
