{
  ArrayList<SynthesizedPlanFragment> restorePlan=new ArrayList<SynthesizedPlanFragment>();
  Set<Integer> coveredPartitions=new HashSet<Integer>();
  Iterator<Entry<Integer,Set<Pair<Integer,Integer>>>> partitionAtHostItr=m_partitionsAtHost.entrySet().iterator();
  while (partitionAtHostItr.hasNext()) {
    Entry<Integer,Set<Pair<Integer,Integer>>> partitionAtHost=partitionAtHostItr.next();
    Integer host=partitionAtHost.getKey();
    List<Integer> loadPartitions=new ArrayList<Integer>();
    List<Integer> loadOrigHosts=new ArrayList<Integer>();
    Set<Pair<Integer,Integer>> partitionAndOrigHostSet=partitionAtHost.getValue();
    Iterator<Pair<Integer,Integer>> itr=partitionAndOrigHostSet.iterator();
    while (itr.hasNext()) {
      Pair<Integer,Integer> pair=itr.next();
      if (!coveredPartitions.contains(pair.getFirst())) {
        loadPartitions.add(pair.getFirst());
        loadOrigHosts.add(pair.getSecond());
        coveredPartitions.add(pair.getFirst());
      }
    }
    if (loadPartitions.size() > 0) {
      int[] relevantPartitionIds=com.google.common.primitives.Ints.toArray(loadPartitions);
      int[] originalHosts=com.google.common.primitives.Ints.toArray(loadOrigHosts);
      List<Long> sitesAtHost=st.getSitesForHost(host);
      for (      Long site : sitesAtHost) {
        restorePlan.add(constructLoadPartitionedTableFragment(site,relevantPartitionIds,originalHosts));
      }
    }
  }
  restorePlan.add(constructLoadPartitionedTableAggregatorFragment());
  assert(coveredPartitions.size() == m_partitionsSeen.size());
  return restorePlan.toArray(new SynthesizedPlanFragment[0]);
}
