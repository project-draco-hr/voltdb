{
  LOG.info("Partition set: " + m_partitionsSeen);
  ArrayList<SynthesizedPlanFragment> restorePlan=new ArrayList<SynthesizedPlanFragment>();
  HashSet<Integer> coveredPartitions=new HashSet<Integer>();
  Iterator<Integer> hosts=m_partitionsAtHost.keySet().iterator();
  while (!coveredPartitions.containsAll(m_partitionsSeen)) {
    if (!hosts.hasNext()) {
      LOG.error("Ran out of hosts before covering all partitions with distributors");
      return null;
    }
    Integer nextHost=hosts.next();
    Set<Pair<Integer,Integer>> partitionsAndOrigHosts=new HashSet<Pair<Integer,Integer>>(m_partitionsAtHost.get(nextHost));
    Iterator<Pair<Integer,Integer>> removeCoveredIterator=partitionsAndOrigHosts.iterator();
    List<Integer> uncoveredPartitionsAtHostList=new ArrayList<Integer>();
    HashSet<Integer> originalHosts=new HashSet<Integer>();
    while (removeCoveredIterator.hasNext()) {
      Pair<Integer,Integer> p=removeCoveredIterator.next();
      if (coveredPartitions.contains(p.getFirst())) {
        removeCoveredIterator.remove();
      }
 else {
        coveredPartitions.add(p.getFirst());
        uncoveredPartitionsAtHostList.add(p.getFirst());
        originalHosts.add(p.getSecond());
      }
    }
    List<Integer> sitesAtHost=VoltDB.instance().getCatalogContext().siteTracker.getLiveExecutionSitesForHost(nextHost);
    int originalHostsArray[]=new int[originalHosts.size()];
    int qq=0;
    for (    int originalHostId : originalHosts)     originalHostsArray[qq++]=originalHostId;
    int uncoveredPartitionsAtHost[]=new int[uncoveredPartitionsAtHostList.size()];
    for (int ii=0; ii < uncoveredPartitionsAtHostList.size(); ii++) {
      uncoveredPartitionsAtHost[ii]=uncoveredPartitionsAtHostList.get(ii);
    }
    for (    Integer site : sitesAtHost) {
      restorePlan.add(constructDistributePartitionedTableFragment(site,uncoveredPartitionsAtHost,originalHostsArray));
    }
  }
  restorePlan.add(constructDistributePartitionedTableAggregatorFragment());
  return restorePlan.toArray(new SynthesizedPlanFragment[0]);
}
