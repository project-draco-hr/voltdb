{
  LOG.info("Partition set: " + m_partitionsSeen);
  ArrayList<SynthesizedPlanFragment> restorePlan=new ArrayList<SynthesizedPlanFragment>();
  HashSet<Integer> coveredPartitions=new HashSet<Integer>();
  HashMap<Integer,ArrayList<Integer>> hostsToUncoveredPartitions=new HashMap<Integer,ArrayList<Integer>>();
  HashMap<Integer,ArrayList<Integer>> hostsToOriginalHosts=new HashMap<Integer,ArrayList<Integer>>();
  for (  Integer host : m_partitionsAtHost.keySet()) {
    hostsToUncoveredPartitions.put(host,new ArrayList<Integer>());
    hostsToOriginalHosts.put(host,new ArrayList<Integer>());
  }
  while (!coveredPartitions.containsAll(m_partitionsSeen)) {
    Iterator<Integer> hosts=m_partitionsAtHost.keySet().iterator();
    int numPartitionsUsed=0;
    while (hosts.hasNext()) {
      Integer nextHost=hosts.next();
      Set<Pair<Integer,Integer>> partitionsAndOrigHosts=new HashSet<Pair<Integer,Integer>>(m_partitionsAtHost.get(nextHost));
      Iterator<Pair<Integer,Integer>> removeCoveredIterator=partitionsAndOrigHosts.iterator();
      List<Integer> uncoveredPartitionsAtHostList=hostsToUncoveredPartitions.get(nextHost);
      ArrayList<Integer> originalHosts=hostsToOriginalHosts.get(nextHost);
      while (removeCoveredIterator.hasNext()) {
        Pair<Integer,Integer> p=removeCoveredIterator.next();
        if (coveredPartitions.contains(p.getFirst())) {
          removeCoveredIterator.remove();
        }
      }
      Iterator<Pair<Integer,Integer>> candidatePartitions=partitionsAndOrigHosts.iterator();
      if (candidatePartitions.hasNext()) {
        Pair<Integer,Integer> p=candidatePartitions.next();
        coveredPartitions.add(p.getFirst());
        uncoveredPartitionsAtHostList.add(p.getFirst());
        originalHosts.add(p.getSecond());
        numPartitionsUsed++;
      }
    }
    if (numPartitionsUsed == 0 && !coveredPartitions.containsAll(m_partitionsSeen)) {
      LOG.error("Could not find a host to distribute some partitions");
      return null;
    }
  }
  hostLog.info("Distribution plan for table " + getTableName());
  for (  Integer host : m_partitionsAtHost.keySet()) {
    List<Integer> uncoveredPartitionsAtHostList=hostsToUncoveredPartitions.get(host);
    ArrayList<Integer> originalHosts=hostsToOriginalHosts.get(host);
    List<Long> sitesAtHost=VoltDB.instance().getSiteTrackerForSnapshot().getSitesForHost(host);
    int originalHostsArray[]=new int[originalHosts.size()];
    int qq=0;
    for (    int originalHostId : originalHosts)     originalHostsArray[qq++]=originalHostId;
    int uncoveredPartitionsAtHost[]=new int[uncoveredPartitionsAtHostList.size()];
    for (int ii=0; ii < uncoveredPartitionsAtHostList.size(); ii++) {
      uncoveredPartitionsAtHost[ii]=uncoveredPartitionsAtHostList.get(ii);
    }
    StringBuilder sb=new StringBuilder();
    sb.append("\tHost ").append(host).append(" will distribute partitions ");
    for (    Integer partition : uncoveredPartitionsAtHostList) {
      sb.append(partition).append(' ');
    }
    hostLog.info(sb.toString());
    for (    Long site : sitesAtHost) {
      restorePlan.add(constructDistributePartitionedTableFragment(site,uncoveredPartitionsAtHost,originalHostsArray));
    }
  }
  restorePlan.add(constructDistributePartitionedTableAggregatorFragment());
  return restorePlan.toArray(new SynthesizedPlanFragment[0]);
}
