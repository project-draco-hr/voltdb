{
  log.info(HORIZONTAL_RULE);
  log.info(" Setup & Initialization");
  log.info(HORIZONTAL_RULE);
  connect();
  VoltTable[] rowResults=null;
  VoltTable[] replicatedResults=null;
  boolean succeeded=false;
  while (!succeeded) {
    Client initClient=clients.get(0);
    try {
      initClient.callProcedure("Initialize");
      ClientResponse rowResp=initClient.callProcedure("getLastRow");
      rowResults=rowResp.getResults();
      assert(rowResp.getStatus() == ClientResponse.SUCCESS);
      ClientResponse replicatedRowResp=initClient.callProcedure("getLastReplicatedRow");
      replicatedResults=replicatedRowResp.getResults();
      assert(replicatedRowResp.getStatus() == ClientResponse.SUCCESS);
      succeeded=true;
    }
 catch (    Exception e) {
      log.error("Exception on init. Will sleep.",e);
      sleepUntilConnected(initClient,System.currentTimeMillis() + config.duration * 1000);
    }
  }
  final int cidCount=127;
  final long windowPerCid=config.windowsize / cidCount;
  final Map<Integer,Long> rids=new HashMap<Integer,Long>();
  for (int i=-1; i < cidCount; i++) {
    rids.put(i,0l);
  }
  while (rowResults[0].advanceRow()) {
    long cid=rowResults[0].getLong("cid");
    long last_rid=rowResults[0].getLong("last_rid");
    rids.put((int)cid,last_rid + 1);
  }
  rids.put(-1,replicatedResults[0].asScalarLong() + 1);
  log.info(HORIZONTAL_RULE);
  log.info("Starting Benchmark");
  log.info(HORIZONTAL_RULE);
  java.util.Random r=new java.util.Random(2);
  benchmarkStartTS=System.currentTimeMillis();
  schedulePeriodicStats();
  final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
  while (benchmarkEndTime > System.currentTimeMillis()) {
    int cid;
    if (r.nextDouble() < config.multisingleratio) {
      cid=-1;
    }
 else {
      cid=(byte)r.nextInt(cidCount);
    }
    long rid=rids.get(cid);
    Client client=null;
    try {
      if (cid == -1) {
        client=clients.get(0);
        if (client.getConnectedHostList().size() == 0) {
          continue;
        }
        try {
          client.callProcedure(new updateReplicatedCallback(),"updateReplicated",rid);
        }
 catch (        NoConnectionsException e) {
          log.error("ClientThread got NoConnectionsException on updateReplicated proc call.");
        }
      }
 else {
        client=clients.get(cid % clients.size());
        if (client.getConnectedHostList().size() == 0) {
          continue;
        }
        try {
          client.callProcedure(new doTxnCallback(),"doTxn",cid,rid,rid > windowPerCid ? rid - windowPerCid : 0,processor.generateForStore().getStoreValue());
        }
 catch (        NoConnectionsException e) {
          log.error("ClientThread got NoConnectionsException on doTxn proc call.");
        }
      }
    }
 catch (    Exception e) {
      log.error("Benchark had a unexpected exception",e);
      System.exit(-1);
    }
    rids.put(cid,rid + 1);
  }
  timer.cancel();
  shutdown.set(true);
  for (  Client client : clients) {
    client.drain();
    client.close();
  }
  log.info(HORIZONTAL_RULE);
  log.info("Benchmark Complete");
}
