{
  checkArgument(!(runtimeType instanceof TypeVariable),"Cannot get subtype of type variable <%s>",this);
  if (runtimeType instanceof WildcardType) {
    return getSubtypeFromLowerBounds(subclass,((WildcardType)runtimeType).getLowerBounds());
  }
  checkArgument(getRawType().isAssignableFrom(subclass),"%s isn't a subclass of %s",subclass,this);
  if (isArray()) {
    return getArraySubtype(subclass);
  }
  @SuppressWarnings("unchecked") TypeToken<? extends T> subtype=(TypeToken<? extends T>)of(resolveTypeArgsForSubclass(subclass));
  return subtype;
}
