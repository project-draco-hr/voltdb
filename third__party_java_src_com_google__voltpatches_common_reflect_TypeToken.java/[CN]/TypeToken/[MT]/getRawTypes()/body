{
  final ImmutableSet.Builder<Class<?>> builder=ImmutableSet.builder();
  new TypeVisitor(){
    @Override void visitTypeVariable(    TypeVariable<?> t){
      visit(t.getBounds());
    }
    @Override void visitWildcardType(    WildcardType t){
      visit(t.getUpperBounds());
    }
    @Override void visitParameterizedType(    ParameterizedType t){
      builder.add((Class<?>)t.getRawType());
    }
    @Override void visitClass(    Class<?> t){
      builder.add(t);
    }
    @Override void visitGenericArrayType(    GenericArrayType t){
      builder.add(Types.getArrayClass(of(t.getGenericComponentType()).getRawType()));
    }
  }
.visit(runtimeType);
  @SuppressWarnings({"unchecked","rawtypes"}) ImmutableSet<Class<? super T>> result=(ImmutableSet)builder.build();
  return result;
}
