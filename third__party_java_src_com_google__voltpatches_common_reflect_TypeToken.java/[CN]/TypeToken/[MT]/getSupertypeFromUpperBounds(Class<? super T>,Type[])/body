{
  for (  Type upperBound : upperBounds) {
    @SuppressWarnings("unchecked") TypeToken<? super T> bound=(TypeToken<? super T>)of(upperBound);
    if (bound.isSubtypeOf(supertype)) {
      @SuppressWarnings({"rawtypes","unchecked"}) TypeToken<? super T> result=bound.getSupertype((Class)supertype);
      return result;
    }
  }
  throw new IllegalArgumentException(supertype + " isn't a super type of " + this);
}
