{
  checkNotNull(declaringClass);
  final AtomicReference<Type> result=new AtomicReference<Type>();
  result.set(type);
  new TypeVisitor(){
    @Override void visitTypeVariable(    TypeVariable<?> var){
      if (var.getGenericDeclaration() == declaringClass) {
        result.set(Types.subtypeOf(Object.class));
      }
    }
    @Override void visitParameterizedType(    ParameterizedType pt){
      result.set(Types.newParameterizedTypeWithOwner(declaringClass.getEnclosingClass() == null ? pt.getOwnerType() : replaceTypeVariablesWithWildcard(pt.getOwnerType(),declaringClass.getEnclosingClass()),(Class<?>)pt.getRawType(),replaceTypeVariablesWithWildcard(pt.getActualTypeArguments(),declaringClass)));
    }
    @Override void visitWildcardType(    WildcardType t){
    }
    @Override void visitGenericArrayType(    GenericArrayType t){
    }
    @Override void visitClass(    Class<?> t){
    }
  }
.visit(type);
  return result.get();
}
