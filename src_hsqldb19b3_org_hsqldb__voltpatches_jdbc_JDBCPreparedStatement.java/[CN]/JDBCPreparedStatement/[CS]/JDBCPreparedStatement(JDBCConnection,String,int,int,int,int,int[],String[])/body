{
  isResult=false;
  connection=c;
  sql=c.nativeSQL(sql);
  int[] keyIndexes=null;
  if (generatedIndexes != null) {
    keyIndexes=new int[generatedIndexes.length];
    for (int i=0; i < generatedIndexes.length; i++) {
      keyIndexes[i]=generatedIndexes[i] - 1;
    }
  }
  resultOut=Result.newPrepareStatementRequest();
  resultOut.setPrepareOrExecuteProperties(sql,0,0,0,resultSetType,resultSetConcurrency,resultSetHoldability,generatedKeys,generatedIndexes,generatedNames);
  Result in=connection.sessionProxy.execute(resultOut);
  if (in.isError()) {
    throw Util.sqlException(in);
  }
  statementID=in.getStatementID();
  statementRetType=in.getStatementType();
  resultMetaData=in.metaData;
  parameterMetaData=in.parameterMetaData;
  parameterTypes=parameterMetaData.getParameterTypes();
  parameterModes=parameterMetaData.paramModes;
  rsScrollability=in.rsScrollability;
  rsConcurrency=in.rsConcurrency;
  rsHoldability=in.rsHoldability;
  int paramCount=parameterMetaData.getColumnCount();
  parameterValues=new Object[paramCount];
  parameterSet=new boolean[paramCount];
  parameterStream=new boolean[paramCount];
  streamLengths=new long[paramCount];
  for (int i=0; i < paramCount; i++) {
    if (parameterTypes[i].isLobType()) {
      hasLOBs=true;
      break;
    }
  }
  resultOut=Result.newPreparedExecuteRequest(parameterTypes,statementID);
  resultOut.setStatement(in.getStatement());
  this.sql=sql;
}
