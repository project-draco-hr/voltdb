{
  AbstractPlanNode sumOrLimitNode;
  if (isReplicated) {
    LimitPlanNode limitNode=new LimitPlanNode();
    sumOrLimitNode=limitNode;
    limitNode.setLimit(1);
  }
 else {
    AggregatePlanNode countNode=new AggregatePlanNode();
    sumOrLimitNode=countNode;
    TupleValueExpression count_tve=new TupleValueExpression(AbstractParsedStmt.TEMP_TABLE_NAME,AbstractParsedStmt.TEMP_TABLE_NAME,"modified_tuples","modified_tuples",0);
    count_tve.setValueType(VoltType.BIGINT);
    count_tve.setValueSize(VoltType.BIGINT.getLengthInBytesForFixedTypes());
    countNode.addAggregate(ExpressionType.AGGREGATE_SUM,false,0,count_tve);
    TupleValueExpression tve=new TupleValueExpression(AbstractParsedStmt.TEMP_TABLE_NAME,AbstractParsedStmt.TEMP_TABLE_NAME,"modified_tuples","modified_tuples",0);
    tve.setValueType(VoltType.BIGINT);
    tve.setValueSize(VoltType.BIGINT.getLengthInBytesForFixedTypes());
    NodeSchema count_schema=new NodeSchema();
    SchemaColumn col=new SchemaColumn(AbstractParsedStmt.TEMP_TABLE_NAME,AbstractParsedStmt.TEMP_TABLE_NAME,"modified_tuples","modified_tuples",tve);
    count_schema.addColumn(col);
    countNode.setOutputSchema(count_schema);
  }
  sumOrLimitNode.addAndLinkChild(dmlRoot);
  SendPlanNode sendNode=new SendPlanNode();
  sendNode.addAndLinkChild(sumOrLimitNode);
  return sendNode;
}
