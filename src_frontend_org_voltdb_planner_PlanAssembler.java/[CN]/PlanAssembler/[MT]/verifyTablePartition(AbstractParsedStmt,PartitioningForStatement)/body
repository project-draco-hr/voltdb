{
  int countOfPartitionedTables=0;
  Map<String,String> partitionColumnByTable=new HashMap<String,String>();
  for (  Table table : parsedStmt.tableList) {
    if (table.getIsreplicated()) {
      continue;
    }
    ++countOfPartitionedTables;
    String colName=null;
    Column partitionCol=table.getPartitioncolumn();
    if (partitionCol != null) {
      colName=partitionCol.getTypeName();
    }
    String partitionedTable=table.getTypeName();
    partitionColumnByTable.put(partitionedTable,colName);
  }
  partitioning.setPartitionedTables(partitionColumnByTable,countOfPartitionedTables);
  if ((partitioning.wasSpecifiedAsSingle() == false) && partitioning.getCountOfPartitionedTables() > 0) {
    partitioning.analyzeForMultiPartitionAccess(parsedStmt.tableList,parsedStmt.valueEquivalence);
    int multiPartitionScanCount=partitioning.getCountOfIndependentlyPartitionedTables();
    if (multiPartitionScanCount > 1) {
      String msg="Join or union of multiple partitioned tables has insufficient join criteria.";
      throw new PlanningErrorException(msg);
    }
  }
}
