{
  if (root.getPlanNodeType() == PlanNodeType.SEQSCAN && m_parsedSelect.isGrouped()) {
    Table targetTable=m_catalogDb.getTables().get(((SeqScanPlanNode)root).getTargetTableName());
    CatalogMap<Index> allIndexes=targetTable.getIndexes();
    ArrayList<AbstractExpression> groupByExprs=new ArrayList<AbstractExpression>();
    groupByExprs.addAll(m_parsedSelect.groupByExpressions.values());
    for (    Index index : allIndexes) {
      if (!IndexType.isScannable(index.getType())) {
        continue;
      }
      boolean replacable=true;
      String exprsjson=index.getExpressionsjson();
      if (exprsjson.isEmpty()) {
        List<ColumnRef> indexedColRefs=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
        if (groupByExprs.size() > indexedColRefs.size()) {
          continue;
        }
        for (int i=0; i < groupByExprs.size(); i++) {
          if (groupByExprs.get(i).getExpressionType() != ExpressionType.VALUE_TUPLE || !indexedColRefs.get(i).getColumn().getName().equals(((TupleValueExpression)groupByExprs.get(i)).getColumnName())) {
            replacable=false;
            break;
          }
        }
        if (replacable) {
          IndexScanPlanNode indexScanNode=new IndexScanPlanNode((SeqScanPlanNode)root,null,index,SortDirectionType.ASC);
          indexScanNode.setKeyIterate(true);
          return indexScanNode;
        }
      }
 else {
        List<AbstractExpression> indexedExprs=null;
        try {
          indexedExprs=AbstractExpression.fromJSONArrayString(exprsjson,null);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          assert(false);
          return root;
        }
        if (groupByExprs.size() > indexedExprs.size()) {
          continue;
        }
        for (int i=0; i < groupByExprs.size(); i++) {
          if (!groupByExprs.get(i).equals(indexedExprs.get(i))) {
            replacable=false;
            break;
          }
        }
        if (replacable) {
          IndexScanPlanNode indexScanNode=new IndexScanPlanNode((SeqScanPlanNode)root,null,index,SortDirectionType.ASC);
          indexScanNode.setKeyIterate(true);
          return indexScanNode;
        }
      }
    }
  }
  return root;
}
