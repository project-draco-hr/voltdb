{
  ArrayList<ParsedColInfo> groupBys=m_parsedSelect.groupByColumns;
  String fromTableAlias=null;
  for (  ParsedColInfo col : groupBys) {
    List<AbstractExpression> baseTVEs=col.expression.findBaseTVEs();
    for (    AbstractExpression baseTVE : baseTVEs) {
      String nextTableAlias=((TupleValueExpression)baseTVE).getTableAlias();
      assert(nextTableAlias != null);
      if (fromTableAlias == null) {
        fromTableAlias=nextTableAlias;
      }
 else       if (!fromTableAlias.equals(nextTableAlias)) {
        return root;
      }
    }
  }
  assert(fromTableAlias != null);
  Table targetTable=m_catalogDb.getTables().get(((SeqScanPlanNode)root).getTargetTableName());
  if (targetTable != null) {
    CatalogMap<Index> allIndexes=targetTable.getIndexes();
    assert(fromTableAlias != null);
    StmtTableScan fromTableScan=m_parsedSelect.m_tableAliasMap.get(fromTableAlias);
    for (    Index index : allIndexes) {
      if (!IndexType.isScannable(index.getType())) {
        continue;
      }
      ArrayList<AbstractExpression> allBindings=new ArrayList<AbstractExpression>();
      boolean replacable=true;
      String exprsjson=index.getExpressionsjson();
      if (exprsjson.isEmpty()) {
        List<ColumnRef> indexedColRefs=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
        if (groupBys.size() > indexedColRefs.size()) {
          continue;
        }
        for (        ParsedColInfo gbCol : groupBys) {
          AbstractExpression expr=gbCol.expression;
          if (!(expr instanceof TupleValueExpression)) {
            replacable=false;
            break;
          }
          TupleValueExpression grouptve=(TupleValueExpression)expr;
          if (!fromTableAlias.equals(grouptve.getTableAlias())) {
            replacable=false;
            break;
          }
          String gbColName=grouptve.getColumnName();
          boolean foundMatch=false;
          for (int j=0; j < groupBys.size(); j++) {
            if (indexedColRefs.get(j).getColumn().getName().equals(gbColName)) {
              foundMatch=true;
              break;
            }
          }
          if (!foundMatch) {
            replacable=false;
            break;
          }
        }
      }
 else {
        List<AbstractExpression> indexedExprs=null;
        try {
          indexedExprs=AbstractExpression.fromJSONArrayString(exprsjson,fromTableScan);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          assert(false);
          return root;
        }
        if (groupBys.size() > indexedExprs.size()) {
          continue;
        }
        for (        ParsedColInfo gbCol : groupBys) {
          AbstractExpression expr=gbCol.expression;
          boolean foundMatch=false;
          for (int j=0; j < groupBys.size(); j++) {
            AbstractExpression indexExpr=indexedExprs.get(j);
            List<AbstractExpression> binding=expr.bindingToIndexedExpression(indexExpr);
            if (binding != null) {
              allBindings.addAll(binding);
              foundMatch=true;
              break;
            }
          }
          if (!foundMatch) {
            replacable=false;
            break;
          }
        }
      }
      if (!replacable) {
        continue;
      }
      IndexScanPlanNode indexScanNode=new IndexScanPlanNode((SeqScanPlanNode)root,null,index,SortDirectionType.INVALID);
      indexScanNode.setForGroupingOnly();
      indexScanNode.setBindings(allBindings);
      return indexScanNode;
    }
  }
  return root;
}
