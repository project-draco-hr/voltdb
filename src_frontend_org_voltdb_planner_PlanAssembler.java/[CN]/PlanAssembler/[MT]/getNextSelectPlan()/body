{
  assert(subAssembler != null);
  AbstractPlanNode subSelectRoot=subAssembler.nextPlan();
  if (subSelectRoot == null) {
    m_recentErrorMsg=subAssembler.m_recentErrorMsg;
    return null;
  }
  AbstractPlanNode root=subSelectRoot;
  if (m_partitioning.requiresTwoFragments()) {
    ArrayList<AbstractPlanNode> receivers=root.findAllNodesOfType(PlanNodeType.RECEIVE);
    if (receivers.size() == 1) {
      HashSet<String> tablesRead=new HashSet<String>();
      root.getTablesReadByFragment(tablesRead);
      for (      String tableName : tablesRead) {
        Table table=m_parsedSelect.getTableFromDB(tableName);
        if (!table.getIsreplicated()) {
          throw new PlanningErrorException("This special case join between an outer replicated table and " + "an inner partitioned table is too complex and is not supported.");
        }
      }
    }
 else     if (receivers.size() > 0) {
      throw new PlanningErrorException("This special case join between an outer replicated table and " + "an inner partitioned table is too complex and is not supported.");
    }
 else {
      root=subAssembler.addSendReceivePair(root);
    }
  }
  if (root instanceof ReceivePlanNode) {
    if (m_parsedSelect.mayNeedAvgPushdown()) {
      m_parsedSelect.switchOptimalSuiteForAvgPushdown();
    }
    if (m_parsedSelect.mvFixInfo.needed) {
      if (m_parsedSelect.tableList.size() != 1) {
        String errorMsg=String.format("Unsupported query joined with materialized table %s",m_parsedSelect.mvFixInfo.mvTable.getTypeName());
        throw new PlanningErrorException(errorMsg);
      }
      AbstractExpression whereExpr=m_parsedSelect.getSingleTableFilterExpression();
      if (whereExpr != null) {
        String errorMsg=String.format("Unsupported query materialized table %s has filter " + "on the table",m_parsedSelect.mvFixInfo.mvTable.getTypeName());
        throw new PlanningErrorException(errorMsg);
      }
    }
  }
 else {
    m_parsedSelect.mvFixInfo.needed=false;
  }
  root=handleAggregationOperators(root);
  if (m_parsedSelect.mvFixInfo.needed) {
    root=handleMVBasedMultiPartQuery(root);
  }
  if (m_parsedSelect.hasComplexAgg()) {
    AbstractPlanNode aggNode=root.getChild(0);
    root.clearChildren();
    aggNode.clearParents();
    aggNode=handleOrderBy(aggNode);
    root.addAndLinkChild(aggNode);
  }
 else {
    root=handleOrderBy(root);
  }
  if (needProjectionNode(root)) {
    root=addProjection(root);
  }
  if (m_parsedSelect.hasLimitOrOffset()) {
    root=handleLimitOperator(root);
  }
  return root;
}
