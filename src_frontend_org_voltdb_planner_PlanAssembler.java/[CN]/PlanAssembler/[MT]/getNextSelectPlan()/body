{
  assert(subAssembler != null);
  AbstractPlanNode subSelectRoot=subAssembler.nextPlan();
  if (subSelectRoot == null) {
    m_recentErrorMsg=subAssembler.m_recentErrorMsg;
    return null;
  }
  AbstractPlanNode root=subSelectRoot;
  boolean mvFixNeedsProjection=false;
  if (m_partitioning.requiresTwoFragments()) {
    boolean mvFixInfoCoordinatorNeeded=true;
    boolean mvFixInfoEdgeCaseOuterJoin=false;
    ArrayList<AbstractPlanNode> receivers=root.findAllNodesOfClass(AbstractReceivePlanNode.class);
    if (receivers.size() == 1) {
      if (m_parsedSelect.m_mvFixInfo.needed()) {
        mvFixInfoCoordinatorNeeded=false;
        AbstractPlanNode receiveNode=receivers.get(0);
        if (receiveNode.getParent(0) instanceof NestLoopPlanNode) {
          if (subSelectRoot.hasInlinedIndexScanOfTable(m_parsedSelect.m_mvFixInfo.getMVTableName())) {
            return getNextSelectPlan();
          }
          List<AbstractPlanNode> nljs=receiveNode.findAllNodesOfType(PlanNodeType.NESTLOOP);
          List<AbstractPlanNode> nlijs=receiveNode.findAllNodesOfType(PlanNodeType.NESTLOOPINDEX);
          if (nljs.size() + nlijs.size() == 0) {
            mvFixInfoEdgeCaseOuterJoin=true;
          }
          root=handleMVBasedMultiPartQuery(root,mvFixInfoEdgeCaseOuterJoin);
        }
      }
    }
 else     if (receivers.size() > 0) {
      throw new PlanningErrorException("This special case join between an outer replicated table and " + "an inner partitioned table is too complex and is not supported.");
    }
 else {
      root=SubPlanAssembler.addSendReceivePair(root);
      assert(root instanceof ReceivePlanNode);
      if (m_parsedSelect.mayNeedAvgPushdown()) {
        m_parsedSelect.switchOptimalSuiteForAvgPushdown();
      }
      if (m_parsedSelect.m_tableList.size() > 1 && m_parsedSelect.m_mvFixInfo.needed() && subSelectRoot.hasInlinedIndexScanOfTable(m_parsedSelect.m_mvFixInfo.getMVTableName())) {
        return getNextSelectPlan();
      }
    }
    root=handleAggregationOperators(root);
    if (m_parsedSelect.m_mvFixInfo.needed() && mvFixInfoCoordinatorNeeded) {
      AbstractPlanNode tmpRoot=root;
      root=handleMVBasedMultiPartQuery(root,mvFixInfoEdgeCaseOuterJoin);
      if (root != tmpRoot) {
        mvFixNeedsProjection=true;
      }
    }
  }
 else {
    m_parsedSelect.m_mvFixInfo.setNeeded(false);
    root=handleAggregationOperators(root);
  }
  if (m_parsedSelect.hasOrderByColumns()) {
    root=handleOrderBy(m_parsedSelect,root);
    if (m_parsedSelect.isComplexOrderBy() && root instanceof OrderByPlanNode) {
      AbstractPlanNode child=root.getChild(0);
      AbstractPlanNode grandChild=child.getChild(0);
      if (child instanceof ProjectionPlanNode) {
        root.unlinkChild(child);
        child.unlinkChild(grandChild);
        child.addAndLinkChild(root);
        root.addAndLinkChild(grandChild);
        root=child;
      }
 else       if (m_parsedSelect.hasDistinctWithGroupBy() && child.getPlanNodeType() == PlanNodeType.HASHAGGREGATE && grandChild.getPlanNodeType() == PlanNodeType.PROJECTION) {
        AbstractPlanNode grandGrandChild=grandChild.getChild(0);
        child.clearParents();
        root.clearChildren();
        grandGrandChild.clearParents();
        grandChild.clearChildren();
        grandChild.addAndLinkChild(root);
        root.addAndLinkChild(grandGrandChild);
        root=child;
      }
    }
  }
  if (mvFixNeedsProjection || needProjectionNode(root)) {
    root=addProjection(root);
  }
  if (m_parsedSelect.hasLimitOrOffset()) {
    root=handleSelectLimitOperator(root);
  }
  CompiledPlan plan=new CompiledPlan();
  plan.rootPlanGraph=root;
  plan.setReadOnly(true);
  boolean orderIsDeterministic=m_parsedSelect.isOrderDeterministic();
  boolean hasLimitOrOffset=m_parsedSelect.hasLimitOrOffset();
  plan.statementGuaranteesDeterminism(hasLimitOrOffset,orderIsDeterministic);
  MicroOptimizationRunner.applyAll(plan,m_parsedSelect);
  return plan;
}
