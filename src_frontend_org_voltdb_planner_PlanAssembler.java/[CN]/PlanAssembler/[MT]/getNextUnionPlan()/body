{
  AbstractPlanNode subUnionRoot=subAssembler.nextPlan();
  if (subUnionRoot == null) {
    return null;
  }
  m_recentErrorMsg=null;
  ArrayList<CompiledPlan> childrenPlans=new ArrayList<CompiledPlan>();
  boolean orderIsDeterministic=true;
  boolean contentIsDeterministic=true;
  ArrayList<PartitioningForStatement> partitioningList=new ArrayList<PartitioningForStatement>();
  int planId=0;
  for (  AbstractParsedStmt parsedChildStmt : m_parsedUnion.m_children) {
    PartitioningForStatement partitioning=(PartitioningForStatement)m_partitioning.clone();
    PlanSelector processor=(PlanSelector)m_planSelector.clone();
    processor.m_planId=planId;
    PlanAssembler assembler=new PlanAssembler(m_catalogCluster,m_catalogDb,partitioning,processor);
    CompiledPlan bestChildPlan=assembler.getBestCostPlan(parsedChildStmt,m_catalogDb);
    if (bestChildPlan == null) {
      if (m_recentErrorMsg == null) {
        m_recentErrorMsg="Unable to plan for statement. Error unknown.";
      }
      return null;
    }
    childrenPlans.add(bestChildPlan);
    orderIsDeterministic=orderIsDeterministic && bestChildPlan.isOrderDeterministic();
    contentIsDeterministic=contentIsDeterministic && bestChildPlan.isContentDeterministic();
    partitioningList.add(partitioning);
    planId=processor.m_planId;
  }
  m_planSelector.m_planId=planId;
  for (  CompiledPlan selectPlan : childrenPlans) {
    subUnionRoot.addAndLinkChild(selectPlan.rootPlanGraph);
  }
  CompiledPlan retval=new CompiledPlan();
  retval.rootPlanGraph=subUnionRoot;
  retval.readOnly=true;
  retval.sql=m_planSelector.m_sql;
  retval.statementGuaranteesDeterminism(contentIsDeterministic,orderIsDeterministic);
  retval.cost=0.0;
  for (  CompiledPlan bestChildPlan : childrenPlans) {
    retval.cost+=bestChildPlan.cost;
  }
  return retval;
}
