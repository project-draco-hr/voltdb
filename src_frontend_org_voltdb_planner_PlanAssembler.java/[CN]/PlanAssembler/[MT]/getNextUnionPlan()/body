{
  if (m_bestAndOnlyPlanWasGenerated) {
    return null;
  }
  m_bestAndOnlyPlanWasGenerated=true;
  AbstractPlanNode subUnionRoot=new UnionPlanNode(m_parsedUnion.m_unionType);
  m_recentErrorMsg=null;
  ArrayList<CompiledPlan> childrenPlans=new ArrayList<CompiledPlan>();
  StatementPartitioning commonPartitioning=null;
  int planId=0;
  for (  AbstractParsedStmt parsedChildStmt : m_parsedUnion.m_children) {
    StatementPartitioning partitioning=(StatementPartitioning)m_partitioning.clone();
    PlanSelector processor=(PlanSelector)m_planSelector.clone();
    processor.m_planId=planId;
    PlanAssembler assembler=new PlanAssembler(m_catalogCluster,m_catalogDb,partitioning,processor);
    CompiledPlan bestChildPlan=assembler.getBestCostPlan(parsedChildStmt);
    partitioning=assembler.getPartition();
    if (bestChildPlan == null) {
      if (m_recentErrorMsg == null) {
        m_recentErrorMsg="Unable to plan for statement. Error unknown.";
      }
      return null;
    }
    childrenPlans.add(bestChildPlan);
    planId=processor.m_planId;
    if (commonPartitioning == null) {
      commonPartitioning=partitioning;
      continue;
    }
    AbstractExpression statementPartitionExpression=partitioning.singlePartitioningExpression();
    if (commonPartitioning.requiresTwoFragments()) {
      if (partitioning.requiresTwoFragments() || statementPartitionExpression != null) {
        throw new PlanningErrorException("Statements are too complex in set operation using multiple partitioned tables.");
      }
      continue;
    }
    AbstractExpression commonPartitionExpression=commonPartitioning.singlePartitioningExpression();
    if (commonPartitionExpression == null) {
      commonPartitioning=partitioning;
      continue;
    }
    if (partitioning.requiresTwoFragments()) {
      throw new PlanningErrorException("Statements are too complex in set operation using multiple partitioned tables.");
    }
    if (statementPartitionExpression == null) {
      continue;
    }
    if (!commonPartitionExpression.equals(statementPartitionExpression)) {
      throw new PlanningErrorException("Statements use conflicting partitioned table filters in set operation or sub-query.");
    }
  }
  if (commonPartitioning != null) {
    m_partitioning=commonPartitioning;
  }
  m_planSelector.m_planId=planId;
  for (  CompiledPlan selectPlan : childrenPlans) {
    subUnionRoot.addAndLinkChild(selectPlan.rootPlanGraph);
  }
  CompiledPlan retval=new CompiledPlan();
  retval.rootPlanGraph=subUnionRoot;
  retval.readOnly=true;
  retval.sql=m_planSelector.m_sql;
  boolean orderIsDeterministic=m_parsedUnion.isOrderDeterministic();
  boolean hasLimitOrOffset=m_parsedUnion.hasLimitOrOffset();
  retval.statementGuaranteesDeterminism(hasLimitOrOffset,orderIsDeterministic);
  retval.cost=0.0;
  for (  CompiledPlan bestChildPlan : childrenPlans) {
    retval.cost+=bestChildPlan.cost;
  }
  return retval;
}
