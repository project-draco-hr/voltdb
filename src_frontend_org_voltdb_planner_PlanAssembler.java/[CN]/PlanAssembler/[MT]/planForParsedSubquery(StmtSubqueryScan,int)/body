{
  AbstractParsedStmt subQuery=subqueryScan.getSubqueryStmt();
  assert(subQuery != null);
  PlanSelector planSelector=(PlanSelector)m_planSelector.clone();
  planSelector.m_planId=planId;
  StatementPartitioning currentPartitioning=(StatementPartitioning)m_partitioning.clone();
  PlanAssembler assembler=new PlanAssembler(m_catalogCluster,m_catalogDb,currentPartitioning,planSelector);
  CompiledPlan compiledPlan=assembler.getBestCostPlan(subQuery);
  if (compiledPlan == null) {
    String tbAlias=subqueryScan.getTableAlias();
    m_recentErrorMsg="Subquery statement for table " + tbAlias + " has error: "+ assembler.getErrorMessage();
    return planSelector.m_planId;
  }
  subqueryScan.setSubqueriesPartitioning(currentPartitioning);
  if (subqueryScan.canRunInOneFragment()) {
    if (!compiledPlan.rootPlanGraph.hasAnyNodeOfClass(MergeReceivePlanNode.class)) {
      compiledPlan.rootPlanGraph=removeCoordinatorSendReceivePair(compiledPlan.rootPlanGraph);
    }
  }
  subqueryScan.setBestCostPlan(compiledPlan);
  return planSelector.m_planId;
}
