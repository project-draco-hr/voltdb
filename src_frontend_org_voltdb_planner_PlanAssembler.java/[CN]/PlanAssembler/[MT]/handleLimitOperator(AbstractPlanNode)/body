{
  LimitPlanNode topLimit=m_parsedSelect.getLimitNodeTop();
  AbstractPlanNode sendNode=null;
  boolean canPushDown=!m_parsedSelect.hasDistinct();
  if (canPushDown) {
    sendNode=checkPushDownViability(root);
    if (sendNode == null) {
      canPushDown=false;
    }
 else {
      canPushDown=m_parsedSelect.m_limitCanPushdown;
    }
  }
  if (m_parsedSelect.m_mvFixInfo.needed()) {
    canPushDown=false;
  }
  if (canPushDown) {
    LimitPlanNode distLimit=m_parsedSelect.getLimitNodeDist();
    AbstractPlanNode distributedPlan=sendNode.getChild(0);
    distributedPlan.clearParents();
    sendNode.clearChildren();
    distributedPlan=handleOrderBy(distributedPlan);
    if (distributedPlan instanceof OrderByPlanNode || distributedPlan instanceof AggregatePlanNode) {
      distributedPlan.addInlinePlanNode(distLimit);
      sendNode.addAndLinkChild(distributedPlan);
    }
 else {
      distLimit.addAndLinkChild(distributedPlan);
      sendNode.addAndLinkChild(distLimit);
    }
  }
  if (m_parsedSelect.hasComplexAgg()) {
    AbstractPlanNode child=root.getChild(0);
    if (child instanceof OrderByPlanNode || child instanceof AggregatePlanNode) {
      child.addInlinePlanNode(topLimit);
    }
 else {
      root.clearChildren();
      child.clearParents();
      topLimit.addAndLinkChild(child);
      root.addAndLinkChild(topLimit);
    }
  }
 else {
    if (root instanceof OrderByPlanNode || root instanceof AggregatePlanNode) {
      root.addInlinePlanNode(topLimit);
    }
 else     if (root instanceof ProjectionPlanNode && (root.getChild(0) instanceof OrderByPlanNode || root instanceof AggregatePlanNode)) {
      root.getChild(0).addInlinePlanNode(topLimit);
    }
 else {
      topLimit.addAndLinkChild(root);
      root=topLimit;
    }
  }
  return root;
}
