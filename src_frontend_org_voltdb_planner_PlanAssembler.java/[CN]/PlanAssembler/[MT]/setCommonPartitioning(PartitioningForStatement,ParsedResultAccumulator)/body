{
  assert(parsedResult != null);
  assert(partitioning != null);
  parsedResult.m_currentPartitioning=partitioning;
  if (parsedResult.m_commonPartitioning == null) {
    parsedResult.m_commonPartitioning=partitioning;
    return parsedResult;
  }
  AbstractExpression statementPartitionExpression=partitioning.singlePartitioningExpression();
  if (parsedResult.m_commonPartitioning.requiresTwoFragments()) {
    if (partitioning.requiresTwoFragments() || statementPartitionExpression != null) {
      throw new PlanningErrorException("Statements are too complex in set operation or statement with sub-query using multiple partitioned tables.");
    }
    return parsedResult;
  }
  AbstractExpression commonPartitionExpression=parsedResult.m_commonPartitioning.singlePartitioningExpression();
  if (commonPartitionExpression == null) {
    parsedResult.m_commonPartitioning=partitioning;
    return parsedResult;
  }
  if (partitioning.requiresTwoFragments()) {
    throw new PlanningErrorException("Statements are too complex in set operation or statement with sub-query using multiple partitioned tables.");
  }
  if (statementPartitionExpression == null) {
    return parsedResult;
  }
  if (!commonPartitionExpression.equals(statementPartitionExpression)) {
    throw new PlanningErrorException("Statements use conflicting partitioned table filters in set operation or sub-query.");
  }
  return parsedResult;
}
