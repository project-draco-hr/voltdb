{
  if (m_bestAndOnlyPlanWasGenerated)   return null;
  m_bestAndOnlyPlanWasGenerated=true;
  assert(m_parsedInsert.tableList.size() == 1);
  Table targetTable=m_parsedInsert.tableList.get(0);
  InsertPlanNode insertNode=new InsertPlanNode();
  insertNode.setTargetTableName(targetTable.getTypeName());
  MaterializePlanNode materializeNode=new MaterializePlanNode();
  NodeSchema mat_schema=new NodeSchema();
  List<Column> columns=CatalogUtil.getSortedCatalogItems(targetTable.getColumns(),"index");
  for (  Column column : columns) {
    AbstractExpression expr=m_parsedInsert.columns.get(column);
    if (expr == null) {
      if (column.getNullable() == false && column.getDefaulttype() == 0) {
        throw new PlanningErrorException("Column " + column.getName() + " has no default and is not nullable.");
      }
      boolean isConstantValue=true;
      if (column.getDefaulttype() == VoltType.TIMESTAMP.getValue()) {
        boolean isFunctionFormat=true;
        String timeValue=column.getDefaultvalue();
        try {
          Long.parseLong(timeValue);
          isFunctionFormat=false;
        }
 catch (        NumberFormatException e) {
        }
        if (isFunctionFormat) {
          try {
            java.sql.Timestamp.valueOf(timeValue);
            isFunctionFormat=false;
          }
 catch (          IllegalArgumentException e) {
          }
        }
        if (isFunctionFormat) {
          String name=timeValue.split(":")[0];
          int id=Integer.parseInt(timeValue.split(":")[1]);
          FunctionExpression funcExpr=new FunctionExpression();
          funcExpr.setAttributes(name,name,id);
          funcExpr.setValueType(VoltType.TIMESTAMP);
          funcExpr.setValueSize(VoltType.TIMESTAMP.getMaxLengthInBytes());
          expr=funcExpr;
          isConstantValue=false;
        }
      }
      if (isConstantValue) {
        ConstantValueExpression const_expr=new ConstantValueExpression();
        expr=const_expr;
        if (column.getDefaulttype() != 0) {
          const_expr.setValue(column.getDefaultvalue());
          const_expr.refineValueType(VoltType.get((byte)column.getDefaulttype()),column.getSize());
        }
 else {
          const_expr.setValue(null);
          const_expr.refineValueType(VoltType.get((byte)column.getType()),column.getSize());
        }
      }
      assert(expr != null);
    }
    if (column.equals(m_partitioning.getColumn())) {
      String fullColumnName=targetTable.getTypeName() + "." + column.getTypeName();
      m_partitioning.addPartitioningExpression(fullColumnName,expr,expr.getValueType());
    }
    mat_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE",column.getTypeName(),column.getTypeName(),expr));
  }
  materializeNode.setOutputSchema(mat_schema);
  insertNode.addAndLinkChild(materializeNode);
  if (m_partitioning.wasSpecifiedAsSingle() || m_partitioning.isInferredSingle()) {
    insertNode.setMultiPartition(false);
    return insertNode;
  }
  insertNode.setMultiPartition(true);
  SendPlanNode sendNode=new SendPlanNode();
  sendNode.addAndLinkChild(insertNode);
  AbstractPlanNode recvNode=new ReceivePlanNode();
  recvNode.addAndLinkChild(sendNode);
  return addSumOrLimitAndSendToDMLNode(recvNode,targetTable.getIsreplicated());
}
