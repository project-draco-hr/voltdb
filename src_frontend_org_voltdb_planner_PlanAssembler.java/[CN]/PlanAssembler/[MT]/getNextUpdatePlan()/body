{
  assert(subAssembler != null);
  AbstractPlanNode subSelectRoot=subAssembler.nextPlan();
  if (subSelectRoot == null)   return null;
  UpdatePlanNode updateNode=new UpdatePlanNode();
  Table targetTable=m_parsedUpdate.tableList.get(0);
  updateNode.setTargetTableName(targetTable.getTypeName());
  updateNode.setUpdateIndexes(false);
  ProjectionPlanNode projectionNode=new ProjectionPlanNode();
  TupleAddressExpression tae=new TupleAddressExpression();
  NodeSchema proj_schema=new NodeSchema();
  proj_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE","tuple_address","tuple_address",tae));
  Set<String> affectedColumns=getIndexedColumnSetForTable(targetTable);
  for (  Entry<Column,AbstractExpression> col : m_parsedUpdate.columns.entrySet()) {
    AbstractExpression castedExpr=null;
    try {
      castedExpr=(AbstractExpression)col.getValue().clone();
      ExpressionUtil.setOutputTypeForInsertExpression(castedExpr,VoltType.get((byte)col.getKey().getType()),col.getKey().getSize(),m_paramTypeOverrideMap);
    }
 catch (    Exception e) {
      throw new PlanningErrorException(e.getMessage());
    }
    proj_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE",col.getKey().getTypeName(),col.getKey().getTypeName(),castedExpr));
    if (affectedColumns.contains(col.getKey().getTypeName())) {
      updateNode.setUpdateIndexes(true);
    }
  }
  projectionNode.setOutputSchema(proj_schema);
  assert(subSelectRoot instanceof AbstractScanPlanNode);
  subSelectRoot.addInlinePlanNode(projectionNode);
  updateNode.addAndLinkChild(subSelectRoot);
  if (m_partitioning.wasSpecifiedAsSingle() || m_partitioning.hasPartitioningConstantLockedIn()) {
    updateNode.generateOutputSchema(m_catalogDb);
    return updateNode;
  }
  AbstractPlanNode recvNode=subAssembler.addSendReceivePair(updateNode);
  return addSumAndSendToDMLNode(recvNode);
}
