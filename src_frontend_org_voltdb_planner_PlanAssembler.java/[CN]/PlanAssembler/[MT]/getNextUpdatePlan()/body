{
  assert(m_subAssembler != null);
  AbstractPlanNode subSelectRoot=m_subAssembler.nextPlan();
  if (subSelectRoot == null) {
    return null;
  }
  if (disableNestedLoopIndexJoinForInComparison(subSelectRoot,m_parsedUpdate)) {
    return getNextUpdatePlan();
  }
  UpdatePlanNode updateNode=new UpdatePlanNode();
  assert(m_parsedUpdate.m_tableList.size() == 1);
  Table targetTable=m_parsedUpdate.m_tableList.get(0);
  updateNode.setTargetTableName(targetTable.getTypeName());
  updateNode.setUpdateIndexes(false);
  ProjectionPlanNode projectionNode=new ProjectionPlanNode();
  TupleAddressExpression tae=new TupleAddressExpression();
  NodeSchema proj_schema=new NodeSchema();
  proj_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE","tuple_address","tuple_address",tae));
  Set<String> affectedColumns=getIndexedColumnSetForTable(targetTable);
  for (  Entry<Column,AbstractExpression> col : m_parsedUpdate.columns.entrySet()) {
    String tableName=col.getKey().getTypeName();
    AbstractExpression expr=col.getValue();
    expr.setInBytes(col.getKey().getInbytes());
    proj_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE",tableName,tableName,expr));
    if (affectedColumns.contains(col.getKey().getTypeName())) {
      updateNode.setUpdateIndexes(true);
    }
  }
  projectionNode.setOutputSchema(proj_schema);
  assert(subSelectRoot instanceof AbstractScanPlanNode);
  subSelectRoot.addInlinePlanNode(projectionNode);
  updateNode.addAndLinkChild(subSelectRoot);
  AbstractPlanNode planRoot=null;
  if (m_partitioning.wasSpecifiedAsSingle() || m_partitioning.isInferredSingle()) {
    planRoot=updateNode;
  }
 else {
    AbstractPlanNode recvNode=SubPlanAssembler.addSendReceivePair(updateNode);
    planRoot=addSumOrLimitAndSendToDMLNode(recvNode,targetTable.getIsreplicated());
  }
  CompiledPlan retval=new CompiledPlan();
  retval.rootPlanGraph=planRoot;
  retval.setReadOnly(false);
  if (targetTable.getIsreplicated()) {
    retval.replicatedTableDML=true;
  }
  retval.statementGuaranteesDeterminism(false,true,null);
  return retval;
}
