{
  List<StmtSubqueryScan> subqueryNodes=parsedStmt.getSubqueries();
  ParsedResultAccumulator subQueryResult=null;
  if (!subqueryNodes.isEmpty()) {
    subQueryResult=getBestCostPlanForSubQueries(subqueryNodes);
  }
  setupForNewPlans(parsedStmt);
  CompiledPlan rawplan=null;
  while (true) {
    rawplan=getNextPlan();
    if (rawplan == null)     break;
    m_planSelector.considerCandidatePlan(rawplan,parsedStmt);
  }
  CompiledPlan retval=m_planSelector.m_bestPlan;
  if (subQueryResult != null && retval != null) {
    boolean orderIsDeterministic;
    if (subQueryResult.m_orderIsDeterministic) {
      orderIsDeterministic=retval.isOrderDeterministic();
    }
 else {
      orderIsDeterministic=retval.isOrderDeterministic() && parsedStmt.isOrderDeterministicInSpiteOfUnorderedSubqueries();
    }
    boolean hasLimitOrOffset=subQueryResult.m_hasLimitOrOffset || retval.hasLimitOrOffset();
    retval.statementGuaranteesDeterminism(hasLimitOrOffset,orderIsDeterministic);
    retval.rootPlanGraph=connectChildrenBestPlans(retval.rootPlanGraph);
  }
  failIfNonDeterministicDml(parsedStmt,retval);
  return retval;
}
