{
  m_bestAndOnlyPlanWasGenerated=false;
  m_partitioning.analyzeTablePartitioning(parsedStmt.allScans());
  if (parsedStmt instanceof ParsedUnionStmt) {
    m_parsedUnion=(ParsedUnionStmt)parsedStmt;
    return;
  }
  if (parsedStmt instanceof ParsedSelectStmt) {
    if (tableListIncludesExportOnly(parsedStmt.m_tableList)) {
      throw new PlanningErrorException("Illegal to read a stream.");
    }
    m_parsedSelect=(ParsedSelectStmt)parsedStmt;
    if (m_parsedSelect.m_joinTree instanceof BranchNode) {
      if (!m_parsedSelect.hasJoinOrder()) {
        simplifyOuterJoin((BranchNode)m_parsedSelect.m_joinTree);
      }
      ((BranchNode)m_parsedSelect.m_joinTree).toLeftJoin();
    }
    m_subAssembler=new SelectSubPlanAssembler(m_catalogDb,m_parsedSelect,m_partitioning);
    if (isPartitionColumnInGroupbyList(m_parsedSelect.m_groupByColumns)) {
      m_parsedSelect.setHasPartitionColumnInGroupby();
    }
    return;
  }
  if (tableListIncludesReadOnlyView(parsedStmt.m_tableList)) {
    throw new PlanningErrorException("Illegal to modify a materialized view.");
  }
  m_partitioning.setIsDML();
  assert(parsedStmt.m_tableList.size() == 1);
  Table targetTable=parsedStmt.m_tableList.get(0);
  if (targetTable.getIsreplicated()) {
    if (m_partitioning.wasSpecifiedAsSingle() && !m_partitioning.isReplicatedDmlToRunOnAllPartitions()) {
      String msg="Trying to write to replicated table '" + targetTable.getTypeName() + "' in a single-partition procedure.";
      throw new PlanningErrorException(msg);
    }
  }
 else   if (m_partitioning.wasSpecifiedAsSingle() == false) {
    m_partitioning.setPartitioningColumnForDML(targetTable.getPartitioncolumn());
  }
  if (parsedStmt instanceof ParsedInsertStmt) {
    m_parsedInsert=(ParsedInsertStmt)parsedStmt;
    return;
  }
  if (parsedStmt instanceof ParsedUpdateStmt) {
    if (tableListIncludesExportOnly(parsedStmt.m_tableList)) {
      throw new PlanningErrorException("Illegal to update a stream.");
    }
    m_parsedUpdate=(ParsedUpdateStmt)parsedStmt;
  }
 else   if (parsedStmt instanceof ParsedDeleteStmt) {
    if (tableListIncludesExportOnly(parsedStmt.m_tableList)) {
      throw new PlanningErrorException("Illegal to delete from a stream.");
    }
    m_parsedDelete=(ParsedDeleteStmt)parsedStmt;
  }
 else {
    throw new RuntimeException("Unknown subclass of AbstractParsedStmt.");
  }
  if (!m_partitioning.wasSpecifiedAsSingle()) {
    HashMap<AbstractExpression,Set<AbstractExpression>> valueEquivalence=parsedStmt.analyzeValueEquivalence();
    m_partitioning.analyzeForMultiPartitionAccess(parsedStmt.allScans(),valueEquivalence);
  }
  m_subAssembler=new WriterSubPlanAssembler(m_catalogDb,parsedStmt,m_partitioning);
}
