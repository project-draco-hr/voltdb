{
  assert(parsedStmt instanceof ParsedSelectStmt || parsedStmt instanceof ParsedUnionStmt || parsedStmt instanceof ParsedDeleteStmt);
  if (!isOrderByNodeRequired(parsedStmt,root)) {
    return root;
  }
  List<AbstractPlanNode> receives=root.findAllNodesOfType(PlanNodeType.RECEIVE);
  boolean isMPPlan=!receives.isEmpty();
  boolean needPushDown=false;
  if (isMPPlan) {
    assert(receives.size() == 1);
    AbstractPlanNode receive=receives.get(0);
    assert(receive.getChildCount() == 1);
    assert(receive.getChild(0).getChildCount() == 1);
    AbstractPlanNode partitionRoot=receive.getChild(0).getChild(0);
    if (isOrderByNodeRequired(parsedStmt,partitionRoot)) {
      needPushDown=true;
    }
  }
  OrderByPlanNode orderByNode=buildOrderByPlanNode(parsedStmt.orderByColumns());
  if (isMPPlan && !isOrderByNodeRequired(parsedStmt,root)) {
    ReceivePlanNode receive=(ReceivePlanNode)receives.get(0);
    receive.setNeedMerge(true);
    receive.addInlinePlanNode(orderByNode);
    return receive;
  }
 else {
    orderByNode.addAndLinkChild(root);
    return orderByNode;
  }
}
