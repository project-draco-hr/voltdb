{
  AggregatePlanNode rootAggNode;
  if (coordNode != null) {
    coordNode.m_isCoordinatingAggregator=true;
  }
  if (coordNode != null && root instanceof ReceivePlanNode) {
    AbstractPlanNode accessPlanTemp=root;
    root=accessPlanTemp.getChild(0).getChild(0);
    root.clearParents();
    accessPlanTemp.getChild(0).clearChildren();
    distNode.addAndLinkChild(root);
    if (selectStmt.hasPartitionColumnInGroupby()) {
      distNode.setPostPredicate(selectStmt.getHavingPredicate());
      if (selectStmt.isComplexOrderBy()) {
        accessPlanTemp.getChild(0).addAndLinkChild(distNode);
        root=processComplexAggProjectionNode(selectStmt,accessPlanTemp);
        return root;
      }
      root=processComplexAggProjectionNode(selectStmt,distNode);
      accessPlanTemp.getChild(0).addAndLinkChild(root);
      return accessPlanTemp;
    }
    fixDistributedApproxCountDistinct(distNode,coordNode);
    accessPlanTemp.getChild(0).addAndLinkChild(distNode);
    coordNode.addAndLinkChild(accessPlanTemp);
    rootAggNode=coordNode;
  }
 else {
    distNode.addAndLinkChild(root);
    rootAggNode=distNode;
  }
  rootAggNode.setPostPredicate(selectStmt.getHavingPredicate());
  root=processComplexAggProjectionNode(selectStmt,rootAggNode);
  return root;
}
