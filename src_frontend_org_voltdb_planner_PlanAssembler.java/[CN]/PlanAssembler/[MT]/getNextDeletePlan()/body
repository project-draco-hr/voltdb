{
  assert(subAssembler != null);
  assert(m_parsedDelete.tableList.size() == 1);
  Table targetTable=m_parsedDelete.tableList.get(0);
  AbstractPlanNode subSelectRoot=subAssembler.nextPlan();
  if (subSelectRoot == null) {
    return null;
  }
  if (disableNestedLoopIndexJoinForInComparison(subSelectRoot,m_parsedDelete)) {
    return getNextDeletePlan();
  }
  DeletePlanNode deleteNode=new DeletePlanNode();
  deleteNode.setTargetTableName(targetTable.getTypeName());
  ProjectionPlanNode projectionNode=new ProjectionPlanNode();
  AbstractExpression addressExpr=new TupleAddressExpression();
  NodeSchema proj_schema=new NodeSchema();
  proj_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE","tuple_address","tuple_address",addressExpr));
  projectionNode.setOutputSchema(proj_schema);
  assert(subSelectRoot instanceof AbstractScanPlanNode);
  if (m_partitioning.wasSpecifiedAsSingle() && (subSelectRoot instanceof SeqScanPlanNode) && (((SeqScanPlanNode)subSelectRoot).getPredicate() == null)) {
    deleteNode.setTruncate(true);
    return deleteNode;
  }
  subSelectRoot.addInlinePlanNode(projectionNode);
  deleteNode.addAndLinkChild(subSelectRoot);
  if (m_partitioning.wasSpecifiedAsSingle() || (m_partitioning.effectivePartitioningExpression() != null)) {
    return deleteNode;
  }
  AbstractPlanNode recvNode=subAssembler.addSendReceivePair(deleteNode);
  return addSumOrLimitAndSendToDMLNode(recvNode,targetTable.getIsreplicated());
}
