{
  assert(subAssembler != null);
  assert(m_parsedDelete.m_tableList.size() == 1);
  Table targetTable=m_parsedDelete.m_tableList.get(0);
  AbstractPlanNode subSelectRoot=subAssembler.nextPlan();
  if (subSelectRoot == null) {
    return null;
  }
  if (disableNestedLoopIndexJoinForInComparison(subSelectRoot,m_parsedDelete)) {
    return getNextDeletePlan();
  }
  DeletePlanNode deleteNode=new DeletePlanNode();
  deleteNode.setTargetTableName(targetTable.getTypeName());
  assert(subSelectRoot instanceof AbstractScanPlanNode);
  if (deleteIsTruncate(m_parsedDelete,subSelectRoot)) {
    deleteNode.setTruncate(true);
    if (m_partitioning.wasSpecifiedAsSingle()) {
      return deleteNode;
    }
  }
 else {
    boolean needsOrderByNode=isOrderByNodeRequired(m_parsedDelete,subSelectRoot);
    ProjectionPlanNode projectionNode=new ProjectionPlanNode();
    AbstractExpression addressExpr=new TupleAddressExpression();
    NodeSchema proj_schema=new NodeSchema();
    proj_schema.addColumn(new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE","tuple_address","tuple_address",addressExpr));
    if (needsOrderByNode) {
      for (      ParsedColInfo col : m_parsedDelete.orderByColumns()) {
        proj_schema.addColumn(col.asSchemaColumn());
      }
    }
    projectionNode.setOutputSchema(proj_schema);
    subSelectRoot.addInlinePlanNode(projectionNode);
    AbstractPlanNode root=subSelectRoot;
    if (needsOrderByNode) {
      OrderByPlanNode ob=buildOrderByPlanNode(m_parsedDelete.orderByColumns());
      ob.addAndLinkChild(root);
      root=ob;
    }
    LimitPlanNode limitNode=m_parsedDelete.limitPlanNode();
    if (limitNode != null) {
      assert(m_parsedDelete.orderByColumns().size() > 0);
      root.addInlinePlanNode(limitNode);
    }
    deleteNode.addAndLinkChild(root);
  }
  if (m_partitioning.wasSpecifiedAsSingle() || m_partitioning.isInferredSingle()) {
    return deleteNode;
  }
  AbstractPlanNode recvNode=SubPlanAssembler.addSendReceivePair(deleteNode);
  return addSumOrLimitAndSendToDMLNode(recvNode,targetTable.getIsreplicated());
}
