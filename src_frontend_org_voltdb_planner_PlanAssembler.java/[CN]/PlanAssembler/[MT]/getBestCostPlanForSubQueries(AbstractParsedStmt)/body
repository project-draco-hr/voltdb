{
  List<StmtSubqueryScan> subqueryNodes=new ArrayList<StmtSubqueryScan>();
  if (parsedStmt.m_joinTree == null) {
    return null;
  }
  parsedStmt.m_joinTree.extractSubQueries(subqueryNodes);
  if (subqueryNodes.isEmpty()) {
    return null;
  }
  ParsedResultAccumulator parsedResult=new ParsedResultAccumulator();
  for (  StmtSubqueryScan subqueryScan : subqueryNodes) {
    AbstractParsedStmt subQuery=subqueryScan.getSubquery();
    assert(subQuery != null);
    parsedResult=planForParsedStmt(subQuery,parsedResult);
    parsedResult.m_compiledPlan.rootPlanGraph=removeCoordinatorSendReceivePair(parsedResult.m_compiledPlan.rootPlanGraph);
    subqueryScan.setPartitioning(parsedResult.m_currentPartitioning);
    if (parsedResult.m_compiledPlan == null) {
      return parsedResult;
    }
    subqueryScan.setBestCostPlan(parsedResult.m_compiledPlan);
  }
  m_planSelector.m_planId=parsedResult.m_planId;
  return parsedResult;
}
