{
  WindowedExpression winExpr=m_parsedSelect.getWindowedExpressions().get(0);
  assert(winExpr != null);
  PartitionByPlanNode pnode=new PartitionByPlanNode();
  pnode.setWindowedExpression(winExpr);
  OrderByPlanNode onode=new OrderByPlanNode();
  List<AbstractExpression> partitionByExpressions=winExpr.getPartitionByExpressions();
  boolean dontsort[]=new boolean[winExpr.getOrderbySize()];
  List<AbstractExpression> orderByExpressions=winExpr.getOrderByExpressions();
  List<SortDirectionType> orderByDirections=winExpr.getOrderByDirections();
  for (int idx=0; idx < winExpr.getPartitionbySize(); idx+=1) {
    SortDirectionType pdir=SortDirectionType.ASC;
    AbstractExpression partitionByExpression=partitionByExpressions.get(idx);
    int sidx=winExpr.getSortIndexOfOrderByExpression(partitionByExpression);
    if (0 <= sidx) {
      pdir=orderByDirections.get(sidx);
      dontsort[sidx]=true;
    }
    onode.addSort(partitionByExpression,pdir);
  }
  for (int idx=0; idx < winExpr.getOrderbySize(); idx+=1) {
    if (!dontsort[idx]) {
      AbstractExpression orderByExpr=orderByExpressions.get(idx);
      SortDirectionType orderByDir=orderByDirections.get(idx);
      onode.addSort(orderByExpr,orderByDir);
    }
  }
  onode.addAndLinkChild(root);
  pnode.addAndLinkChild(onode);
  return pnode;
}
