{
  if (!m_parsedSelect.hasDistinctWithGroupBy()) {
    return root;
  }
  assert(m_parsedSelect.isGrouped());
  if (m_parsedSelect.displayColumnsContainAllGroupByColumns()) {
    return root;
  }
  assert(m_parsedSelect.hasComplexAgg());
  assert(root instanceof ProjectionPlanNode && root.getChildCount() == 1);
  root=root.getChild(0);
  root.clearParents();
  AggregatePlanNode distinctAggNode=new HashAggregatePlanNode();
  distinctAggNode.setOutputSchema(m_parsedSelect.getFinalProjectionSchema());
  for (  ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.m_distinctGroupByColumns) {
    distinctAggNode.addGroupByExpression(col.expression);
  }
  boolean canPushdownDistinctAgg=m_parsedSelect.hasPartitionColumnInDistinctGroupby();
  boolean pushedDown=false;
  canPushdownDistinctAgg=false;
  if (canPushdownDistinctAgg && !m_parsedSelect.m_mvFixInfo.needed()) {
    assert(m_parsedSelect.hasPartitionColumnInGroupby());
    AbstractPlanNode receive=root;
    if (receive instanceof ReceivePlanNode) {
      AbstractPlanNode distNode=receive.getChild(0).getChild(0);
      receive.getChild(0).unlinkChild(distNode);
      distinctAggNode.addAndLinkChild(distNode);
      receive.getChild(0).addAndLinkChild(distinctAggNode);
      pushedDown=true;
    }
  }
  if (!pushedDown) {
    distinctAggNode.addAndLinkChild(root);
    root=distinctAggNode;
  }
  return root;
}
