{
  assert(m_parsedSelect != null);
  if (!m_parsedSelect.hasOrderByColumns()) {
    return root;
  }
  if (m_parsedSelect.guaranteesUniqueRow()) {
    return root;
  }
  if (root.getPlanNodeType() == PlanNodeType.INDEXSCAN) {
    if (((IndexScanPlanNode)root).getSortDirection() != SortDirectionType.INVALID) {
      return root;
    }
  }
  OrderByPlanNode orderByNode=new OrderByPlanNode();
  for (  ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.orderColumns) {
    orderByNode.addSort(col.expression,col.ascending ? SortDirectionType.ASC : SortDirectionType.DESC);
  }
  orderByNode.addAndLinkChild(root);
  orderByNode.generateOutputSchema(m_catalogDb);
  if (m_parsedSelect.tableList.size() == 1) {
    Table table=m_parsedSelect.tableList.get(0);
    ArrayList<String> orderColNames=new ArrayList<String>();
    for (    AbstractExpression e : orderByNode.getSortExpressions()) {
      if (e instanceof TupleValueExpression) {
        TupleValueExpression tve=(TupleValueExpression)e;
        orderColNames.add(tve.getColumnName());
      }
    }
    for (    Index index : table.getIndexes()) {
      if (!index.getUnique()) {
        continue;
      }
      ArrayList<String> indexColNames=new ArrayList<String>();
      for (      ColumnRef cref : index.getColumns()) {
        indexColNames.add(cref.getColumn().getTypeName());
      }
      if (orderColNames.containsAll(indexColNames)) {
        orderByNode.setOrderingByUniqueColumns();
      }
    }
  }
  return orderByNode;
}
