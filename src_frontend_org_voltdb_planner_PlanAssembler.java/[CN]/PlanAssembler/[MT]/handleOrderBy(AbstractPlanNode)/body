{
  assert(m_parsedSelect != null);
  if (!m_parsedSelect.hasOrderByColumns()) {
    return root;
  }
  if (m_parsedSelect.guaranteesUniqueRow()) {
    return root;
  }
  SortDirectionType sortDirection=SortDirectionType.INVALID;
  if (root.getPlanNodeType() == PlanNodeType.INDEXSCAN) {
    sortDirection=((IndexScanPlanNode)root).getSortDirection();
    if (sortDirection != SortDirectionType.INVALID) {
      return root;
    }
  }
  if (root instanceof AbstractJoinPlanNode) {
    sortDirection=((AbstractJoinPlanNode)root).getSortDirection();
    if (sortDirection != SortDirectionType.INVALID) {
      return root;
    }
  }
  OrderByPlanNode orderByNode=new OrderByPlanNode();
  for (  ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.orderColumns) {
    orderByNode.addSort(col.expression,col.ascending ? SortDirectionType.ASC : SortDirectionType.DESC);
  }
  orderByNode.addAndLinkChild(root);
  orderByNode.generateOutputSchema(m_catalogDb);
  List<AbstractExpression> orderExpressions=orderByNode.getSortExpressions();
  boolean allScansAreDeterministic=true;
  for (  Table table : m_parsedSelect.tableList) {
    allScansAreDeterministic=false;
    for (    Index index : table.getIndexes()) {
      if (!index.getUnique()) {
        continue;
      }
      List<AbstractExpression> indexExpressions=new ArrayList<AbstractExpression>();
      String jsonExpr=index.getExpressionsjson();
      if (jsonExpr.isEmpty()) {
        for (        ColumnRef cref : index.getColumns()) {
          Column col=cref.getColumn();
          TupleValueExpression tve=new TupleValueExpression();
          tve.setColumnIndex(col.getIndex());
          tve.setColumnName(col.getName());
          tve.setExpressionType(ExpressionType.VALUE_TUPLE);
          tve.setHasAggregate(false);
          tve.setTableName(table.getTypeName());
          tve.setValueSize(col.getSize());
          tve.setValueType(VoltType.get((byte)col.getType()));
          indexExpressions.add(tve);
        }
      }
 else {
        try {
          indexExpressions=AbstractExpression.fromJSONArrayString(jsonExpr,null);
        }
 catch (        JSONException e) {
          e.printStackTrace();
          assert(false);
          return null;
        }
      }
      if (orderExpressions.containsAll(indexExpressions)) {
        allScansAreDeterministic=true;
        break;
      }
    }
    if (!allScansAreDeterministic) {
      break;
    }
  }
  if (allScansAreDeterministic) {
    orderByNode.setOrderingByUniqueColumns();
  }
  return orderByNode;
}
