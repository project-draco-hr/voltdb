{
  MaterializedViewFixInfo mvFixInfo=m_parsedSelect.mvFixInfo;
  HashAggregatePlanNode reAggNode=new HashAggregatePlanNode(mvFixInfo.getReAggregationPlanNode());
  reAggNode.clearChildren();
  reAggNode.clearParents();
  AbstractPlanNode receiveNode=root;
  AbstractPlanNode reAggParent=null;
  if (root.getPlanNodeType() == PlanNodeType.RECEIVE) {
    root=reAggNode;
  }
 else {
    List<AbstractPlanNode> recList=root.findAllNodesOfType(PlanNodeType.RECEIVE);
    assert(recList.size() == 1);
    receiveNode=recList.get(0);
    reAggParent=receiveNode.getParent(0);
    boolean result=reAggParent.replaceChild(receiveNode,reAggNode);
    assert(result);
  }
  reAggNode.addAndLinkChild(receiveNode);
  assert(receiveNode instanceof ReceivePlanNode);
  AbstractPlanNode sendNode=receiveNode.getChild(0);
  assert(sendNode instanceof SendPlanNode);
  AbstractPlanNode sendNodeChild=sendNode.getChild(0);
  HashAggregatePlanNode reAggNodeForReplace=null;
  if (m_parsedSelect.tableList.size() > 1) {
    reAggNodeForReplace=reAggNode;
  }
  boolean find=mvFixInfo.processScanNodeWithReAggNode(sendNode,reAggNodeForReplace);
  assert(find);
  if (m_parsedSelect.tableList.size() > 1) {
    AbstractPlanNode joinNode=sendNodeChild;
    assert(joinNode instanceof AbstractJoinPlanNode);
    joinNode.clearParents();
    reAggNode.clearParents();
    assert(mvFixInfo.m_scanNode != null);
    mvFixInfo.m_scanNode.clearParents();
    sendNode.clearChildren();
    sendNode.addAndLinkChild(mvFixInfo.m_scanNode);
    if (reAggParent != null) {
      reAggParent.clearChildren();
      reAggParent.addAndLinkChild(joinNode);
      root=reAggParent;
    }
 else {
      root=joinNode;
    }
  }
  return root;
}
