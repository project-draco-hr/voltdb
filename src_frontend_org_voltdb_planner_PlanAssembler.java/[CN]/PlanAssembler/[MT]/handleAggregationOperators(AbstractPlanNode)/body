{
  AggregatePlanNode aggNode=null;
  if (m_parsedSelect.hasAggregateOrGroupby()) {
    AggregatePlanNode topAggNode=null;
    IndexGroupByInfo gbInfo=new IndexGroupByInfo();
    if (root.getPlanNodeType() == PlanNodeType.RECEIVE) {
      AbstractPlanNode candidate=root.getChild(0).getChild(0);
      gbInfo.m_multPartition=true;
      switchToIndexScanForGroupBy(candidate,gbInfo);
    }
 else     if (switchToIndexScanForGroupBy(root,gbInfo) && gbInfo.m_isIndexScanPlanRoot) {
      root=gbInfo.m_indexAccess;
    }
    boolean needHashAgg=gbInfo.needHashAggregator(root);
    if (needHashAgg) {
      if (m_parsedSelect.m_mvFixInfo.needed()) {
        aggNode=new HashAggregatePlanNode();
      }
 else {
        if (gbInfo.isChangedToSerialAggregate()) {
          assert(root instanceof ReceivePlanNode);
          aggNode=new AggregatePlanNode();
        }
 else         if (gbInfo.isChangedToPartialAggregate()) {
          aggNode=new PartialAggregatePlanNode(gbInfo.m_coveredGroupByColumns);
        }
 else {
          aggNode=new HashAggregatePlanNode();
        }
        topAggNode=new HashAggregatePlanNode();
      }
    }
 else {
      aggNode=new AggregatePlanNode();
      if (!m_parsedSelect.m_mvFixInfo.needed()) {
        topAggNode=new AggregatePlanNode();
      }
    }
    int outputColumnIndex=0;
    NodeSchema agg_schema=new NodeSchema();
    NodeSchema top_agg_schema=new NodeSchema();
    for (    ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.m_aggResultColumns) {
      AbstractExpression rootExpr=col.expression;
      AbstractExpression agg_input_expr=null;
      SchemaColumn schema_col=null;
      SchemaColumn top_schema_col=null;
      if (rootExpr instanceof AggregateExpression) {
        ExpressionType agg_expression_type=rootExpr.getExpressionType();
        agg_input_expr=rootExpr.getLeft();
        TupleValueExpression tve=new TupleValueExpression("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE","",col.alias,outputColumnIndex);
        tve.setValueType(rootExpr.getValueType());
        tve.setValueSize(rootExpr.getValueSize());
        tve.setInBytes(rootExpr.getInBytes());
        boolean is_distinct=((AggregateExpression)rootExpr).isDistinct();
        aggNode.addAggregate(agg_expression_type,is_distinct,outputColumnIndex,agg_input_expr);
        schema_col=new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE","",col.alias,tve);
        top_schema_col=new SchemaColumn("VOLT_TEMP_TABLE","VOLT_TEMP_TABLE","",col.alias,tve);
        if (topAggNode != null) {
          ExpressionType top_expression_type=agg_expression_type;
          if (agg_expression_type == ExpressionType.AGGREGATE_COUNT_STAR || agg_expression_type == ExpressionType.AGGREGATE_COUNT || agg_expression_type == ExpressionType.AGGREGATE_SUM) {
            if (is_distinct) {
              topAggNode=null;
            }
 else {
              top_expression_type=ExpressionType.AGGREGATE_SUM;
            }
          }
 else           if (agg_expression_type != ExpressionType.AGGREGATE_MIN && agg_expression_type != ExpressionType.AGGREGATE_MAX) {
            topAggNode=null;
          }
          if (topAggNode != null) {
            topAggNode.addAggregate(top_expression_type,is_distinct,outputColumnIndex,tve);
          }
        }
      }
 else       if (rootExpr.hasAnySubexpressionOfClass(AggregateExpression.class)) {
        assert(false);
      }
 else {
        schema_col=new SchemaColumn(col.tableName,col.tableAlias,col.columnName,col.alias,col.expression);
        AbstractExpression topExpr=null;
        if (col.groupBy) {
          topExpr=m_parsedSelect.m_groupByExpressions.get(col.alias);
        }
 else {
          topExpr=col.expression;
        }
        top_schema_col=new SchemaColumn(col.tableName,col.tableAlias,col.columnName,col.alias,topExpr);
      }
      agg_schema.addColumn(schema_col);
      top_agg_schema.addColumn(top_schema_col);
      outputColumnIndex++;
    }
    for (    ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.m_groupByColumns) {
      aggNode.addGroupByExpression(col.expression);
      if (topAggNode != null) {
        topAggNode.addGroupByExpression(m_parsedSelect.m_groupByExpressions.get(col.alias));
      }
    }
    aggNode.setOutputSchema(agg_schema);
    if (topAggNode != null) {
      if (m_parsedSelect.hasComplexGroupby()) {
        topAggNode.setOutputSchema(top_agg_schema);
      }
 else {
        topAggNode.setOutputSchema(agg_schema);
      }
    }
    root=pushDownAggregate(root,aggNode,topAggNode,m_parsedSelect);
  }
  if (m_parsedSelect.isGrouped()) {
    if (m_parsedSelect.displayColumnsContainAllGroupByColumns()) {
      return root;
    }
  }
 else   if (m_parsedSelect.hasAggregateExpression()) {
    return root;
  }
  return handleDistinct(root);
}
