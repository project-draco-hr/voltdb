{
  boolean containsAggregateExpression=false;
  HashAggregatePlanNode aggNode=null;
  for (  ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.displayColumns) {
    if (col.expression.getExpressionType() == ExpressionType.AGGREGATE_SUM || col.expression.getExpressionType() == ExpressionType.AGGREGATE_COUNT || col.expression.getExpressionType() == ExpressionType.AGGREGATE_COUNT_STAR || col.expression.getExpressionType() == ExpressionType.AGGREGATE_MIN || col.expression.getExpressionType() == ExpressionType.AGGREGATE_MAX || col.expression.getExpressionType() == ExpressionType.AGGREGATE_AVG) {
      containsAggregateExpression=true;
    }
  }
  if (m_parsedSelect.grouped) {
    containsAggregateExpression=true;
  }
  if (containsAggregateExpression) {
    aggNode=new HashAggregatePlanNode();
    HashAggregatePlanNode topAggNode=new HashAggregatePlanNode();
    int outputColumnIndex=0;
    int topOutputColumnIndex=0;
    NodeSchema agg_schema=new NodeSchema();
    NodeSchema topAggSchema=new NodeSchema();
    boolean hasAggregates=false;
    boolean isPushDownAgg=true;
    for (    ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.displayColumns) {
      AbstractExpression rootExpr=col.expression;
      AbstractExpression agg_input_expr=null;
      SchemaColumn schema_col=null;
      SchemaColumn topSchemaCol=null;
      ExpressionType agg_expression_type=rootExpr.getExpressionType();
      if (rootExpr.getExpressionType() == ExpressionType.AGGREGATE_SUM || rootExpr.getExpressionType() == ExpressionType.AGGREGATE_MIN || rootExpr.getExpressionType() == ExpressionType.AGGREGATE_MAX || rootExpr.getExpressionType() == ExpressionType.AGGREGATE_AVG || rootExpr.getExpressionType() == ExpressionType.AGGREGATE_COUNT || rootExpr.getExpressionType() == ExpressionType.AGGREGATE_COUNT_STAR) {
        agg_input_expr=rootExpr.getLeft();
        hasAggregates=true;
        if (rootExpr.getExpressionType() == ExpressionType.AGGREGATE_COUNT && rootExpr.getLeft() == null) {
          agg_expression_type=ExpressionType.AGGREGATE_COUNT_STAR;
          SchemaColumn first_col=root.getOutputSchema().getColumns().get(0);
          TupleValueExpression tve=new TupleValueExpression();
          tve.setValueType(first_col.getType());
          tve.setValueSize(first_col.getSize());
          tve.setColumnIndex(0);
          tve.setColumnName(first_col.getColumnName());
          tve.setColumnAlias(first_col.getColumnName());
          tve.setTableName(first_col.getTableName());
          agg_input_expr=tve;
        }
        TupleValueExpression tve=new TupleValueExpression();
        tve.setValueType(rootExpr.getValueType());
        tve.setValueSize(rootExpr.getValueSize());
        tve.setColumnIndex(outputColumnIndex);
        tve.setColumnName("");
        tve.setColumnAlias(col.alias);
        tve.setTableName("VOLT_TEMP_TABLE");
        boolean is_distinct=((AggregateExpression)rootExpr).m_distinct;
        aggNode.addAggregate(agg_expression_type,is_distinct,outputColumnIndex,agg_input_expr);
        schema_col=new SchemaColumn("VOLT_TEMP_TABLE","",col.alias,tve);
        if (!is_distinct && (agg_expression_type == ExpressionType.AGGREGATE_COUNT_STAR || agg_expression_type == ExpressionType.AGGREGATE_COUNT || agg_expression_type == ExpressionType.AGGREGATE_SUM)) {
          TupleValueExpression topOutputExpr=new TupleValueExpression();
          topOutputExpr.setValueType(rootExpr.getValueType());
          topOutputExpr.setValueSize(rootExpr.getValueSize());
          topOutputExpr.setColumnIndex(topOutputColumnIndex);
          topOutputExpr.setColumnName("");
          topOutputExpr.setColumnAlias(col.alias);
          topOutputExpr.setTableName("VOLT_TEMP_TABLE");
          topAggNode.addAggregate(ExpressionType.AGGREGATE_SUM,false,outputColumnIndex,tve);
          topSchemaCol=new SchemaColumn("VOLT_TEMP_TABLE","",col.alias,topOutputExpr);
        }
 else         if (agg_expression_type == ExpressionType.AGGREGATE_MIN || agg_expression_type == ExpressionType.AGGREGATE_MAX) {
          topAggNode.addAggregate(agg_expression_type,is_distinct,outputColumnIndex,tve);
          topSchemaCol=schema_col;
        }
 else {
          isPushDownAgg=false;
        }
      }
 else {
        schema_col=new SchemaColumn(col.tableName,col.columnName,col.alias,col.expression);
      }
      if (topSchemaCol == null) {
        topSchemaCol=new SchemaColumn(schema_col.getTableName(),schema_col.getColumnName(),schema_col.getColumnAlias(),schema_col.getExpression());
      }
      agg_schema.addColumn(schema_col);
      topAggSchema.addColumn(topSchemaCol);
      outputColumnIndex++;
      topOutputColumnIndex++;
    }
    for (    ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.groupByColumns) {
      if (agg_schema.find(col.tableName,col.columnName,col.alias) == null) {
        throw new PlanningErrorException("GROUP BY column " + col.alias + " is not in the display columns."+ " Please specify "+ col.alias+ " as a display column.");
      }
      aggNode.addGroupByExpression(col.expression);
      topAggNode.addGroupByExpression(col.expression);
    }
    aggNode.setOutputSchema(agg_schema);
    topAggNode.setOutputSchema(agg_schema);
    if (!hasAggregates || !isPushDownAgg) {
      topAggNode=null;
    }
    root=pushDownAggregate(root,aggNode,topAggNode);
  }
 else {
    root=handleDistinct(root);
  }
  return root;
}
