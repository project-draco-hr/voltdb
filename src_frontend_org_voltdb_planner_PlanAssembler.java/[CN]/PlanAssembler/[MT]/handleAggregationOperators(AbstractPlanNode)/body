{
  AggregatePlanNode aggNode=null;
  boolean containsAggregateExpression=m_parsedSelect.hasAggregateExpression();
  if (m_partitioning.requiresTwoFragments()) {
    AbstractPlanNode candidate=root.getChild(0).getChild(0);
    candidate.clearParents();
    root.getChild(0).clearChildren();
    root.getChild(0).addAndLinkChild(indexAccessForGroupByExprs(candidate));
  }
 else {
    root=indexAccessForGroupByExprs(root);
  }
  if (containsAggregateExpression || m_parsedSelect.isGrouped()) {
    AggregatePlanNode topAggNode;
    if (m_parsedSelect.isGrouped() && (root.getPlanNodeType() != PlanNodeType.INDEXSCAN || ((IndexScanPlanNode)root).getSortDirection() == SortDirectionType.INVALID)) {
      aggNode=new HashAggregatePlanNode();
      topAggNode=new HashAggregatePlanNode();
    }
 else {
      aggNode=new AggregatePlanNode();
      topAggNode=new AggregatePlanNode();
    }
    int outputColumnIndex=0;
    NodeSchema agg_schema=new NodeSchema();
    NodeSchema top_agg_schema=new NodeSchema();
    for (    ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.aggResultColumns) {
      AbstractExpression rootExpr=col.expression;
      AbstractExpression agg_input_expr=null;
      SchemaColumn schema_col=null;
      SchemaColumn top_schema_col=null;
      if (rootExpr instanceof AggregateExpression) {
        ExpressionType agg_expression_type=rootExpr.getExpressionType();
        agg_input_expr=rootExpr.getLeft();
        TupleValueExpression tve=new TupleValueExpression();
        tve.setValueType(rootExpr.getValueType());
        tve.setValueSize(rootExpr.getValueSize());
        tve.setColumnIndex(outputColumnIndex);
        tve.setColumnName("");
        tve.setColumnAlias(col.alias);
        tve.setTableName("VOLT_TEMP_TABLE");
        boolean is_distinct=((AggregateExpression)rootExpr).isDistinct();
        aggNode.addAggregate(agg_expression_type,is_distinct,outputColumnIndex,agg_input_expr);
        schema_col=new SchemaColumn("VOLT_TEMP_TABLE","",col.alias,tve);
        top_schema_col=new SchemaColumn("VOLT_TEMP_TABLE","",col.alias,tve);
        if (topAggNode != null) {
          ExpressionType top_expression_type=agg_expression_type;
          if (agg_expression_type == ExpressionType.AGGREGATE_COUNT_STAR || agg_expression_type == ExpressionType.AGGREGATE_COUNT || agg_expression_type == ExpressionType.AGGREGATE_SUM) {
            if (is_distinct) {
              topAggNode=null;
            }
 else {
              top_expression_type=ExpressionType.AGGREGATE_SUM;
            }
          }
 else           if (agg_expression_type != ExpressionType.AGGREGATE_MIN && agg_expression_type != ExpressionType.AGGREGATE_MAX) {
            topAggNode=null;
          }
          if (topAggNode != null) {
            topAggNode.addAggregate(top_expression_type,is_distinct,outputColumnIndex,tve);
          }
        }
      }
 else       if (rootExpr.hasAnySubexpressionOfClass(AggregateExpression.class)) {
        assert(false);
      }
 else {
        schema_col=new SchemaColumn(col.tableName,col.columnName,col.alias,col.expression);
        AbstractExpression topExpr=null;
        if (col.groupBy) {
          topExpr=m_parsedSelect.groupByExpressions.get(col.alias);
        }
 else {
          topExpr=col.expression;
        }
        top_schema_col=new SchemaColumn(col.tableName,col.columnName,col.alias,topExpr);
      }
      agg_schema.addColumn(schema_col);
      top_agg_schema.addColumn(top_schema_col);
      outputColumnIndex++;
    }
    for (    ParsedSelectStmt.ParsedColInfo col : m_parsedSelect.groupByColumns) {
      aggNode.addGroupByExpression(col.expression);
      if (topAggNode != null) {
        topAggNode.addGroupByExpression(m_parsedSelect.groupByExpressions.get(col.alias));
      }
    }
    aggNode.setOutputSchema(agg_schema);
    if (topAggNode != null) {
      if (m_parsedSelect.hasComplexGroupby()) {
        topAggNode.setOutputSchema(top_agg_schema);
      }
 else {
        topAggNode.setOutputSchema(agg_schema);
      }
    }
    NodeSchema newSchema=m_parsedSelect.getNewSchema();
    root=pushDownAggregate(root,aggNode,topAggNode,m_parsedSelect.hasComplexAgg(),newSchema);
  }
  if (m_parsedSelect.isGrouped()) {
    if (m_parsedSelect.displayColumnsContainAllGroupByColumns()) {
      return root;
    }
  }
 else   if (containsAggregateExpression) {
    return root;
  }
  return handleDistinct(root);
}
