{
  assert(m_parsedSelect != null);
  assert(m_parsedSelect.m_displayColumns != null);
  ProjectionPlanNode projectionNode=new ProjectionPlanNode();
  NodeSchema proj_schema=m_parsedSelect.getFinalProjectionSchema();
  List<TupleValueExpression> allTves=new ArrayList<>();
  for (  SchemaColumn col : proj_schema.getColumns()) {
    allTves.addAll(ExpressionUtil.getTupleValueExpressions(col.getExpression()));
  }
  for (  TupleValueExpression tve : allTves) {
    if (!tve.needsDifferentiation()) {
      continue;
    }
    tve.setDifferentiator(rootNode.adjustDifferentiatorField(tve.getColumnIndex()));
  }
  projectionNode.setOutputSchemaWithoutClone(proj_schema);
  if (rootNode instanceof AbstractScanPlanNode) {
    rootNode.addInlinePlanNode(projectionNode);
    return rootNode;
  }
 else {
    projectionNode.addAndLinkChild(rootNode);
    return projectionNode;
  }
}
