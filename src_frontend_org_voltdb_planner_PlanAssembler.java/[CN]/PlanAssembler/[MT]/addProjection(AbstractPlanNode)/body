{
  assert(m_parsedSelect != null);
  assert(m_parsedSelect.m_displayColumns != null);
  NodeSchema proj_schema=m_parsedSelect.getFinalProjectionSchema();
  for (  SchemaColumn col : proj_schema.getColumns()) {
    AbstractExpression colExpr=col.getExpression();
    Collection<TupleValueExpression> allTves=ExpressionUtil.getTupleValueExpressions(colExpr);
    for (    TupleValueExpression tve : allTves) {
      if (!tve.needsDifferentiation()) {
        continue;
      }
      rootNode.adjustDifferentiatorField(tve);
    }
  }
  ProjectionPlanNode projectionNode=new ProjectionPlanNode();
  projectionNode.setOutputSchemaWithoutClone(proj_schema);
  if (rootNode instanceof AbstractScanPlanNode) {
    rootNode.addInlinePlanNode(projectionNode);
    return rootNode;
  }
  projectionNode.addAndLinkChild(rootNode);
  return projectionNode;
}
