{
  Stack<AbstractExpression> stack=new Stack<AbstractExpression>();
  AbstractExpression expression=(AbstractExpression)outputCol.expression.clone();
  AbstractExpression currExp=expression;
  while (currExp != null) {
    if (currExp instanceof AggregateExpression) {
      boolean found=false;
      int offset=0;
      for (      Integer colguid : sourceColumns) {
        PlanColumn plancol=m_context.get(colguid);
        if (outputCol.alias.equals(plancol.displayName())) {
          found=true;
          expression=(AbstractExpression)plancol.m_expression.clone();
          assert(expression instanceof TupleValueExpression);
          TupleValueExpression tve=(TupleValueExpression)expression;
          tve.setColumnIndex(offset);
          break;
        }
        ++offset;
      }
      if (!found) {
        System.out.println("PLANNER ERROR: could not match aggregate column alias");
        System.out.println(getSQLText());
        throw new RuntimeException("Could not match aggregate column alias.");
      }
      break;
    }
 else     if (currExp instanceof TupleValueExpression) {
      TupleValueExpression tve=(TupleValueExpression)currExp;
      boolean found=false;
      int offset=0;
      for (      Integer colguid : sourceColumns) {
        PlanColumn plancol=m_context.get(colguid);
        if (tve.getColumnName().equals(plancol.originColumnName()) && tve.getTableName().equals(plancol.originTableName())) {
          tve.setColumnIndex(offset);
          found=true;
          break;
        }
        ++offset;
      }
      if (!found) {
        System.out.println("PLANNER ERROR: could not match tve column alias");
        System.out.println(getSQLText());
        throw new RuntimeException("Could not match TVE column alias.");
      }
    }
    if (currExp.getRight() != null) {
      stack.push(currExp.getRight());
    }
    currExp=currExp.getLeft();
    if (currExp == null) {
      if (!stack.empty())       currExp=stack.pop();
    }
  }
  return expression;
}
