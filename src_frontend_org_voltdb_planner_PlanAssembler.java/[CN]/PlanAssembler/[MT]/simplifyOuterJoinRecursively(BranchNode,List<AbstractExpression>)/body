{
  assert(joinNode != null);
  JoinNode leftNode=joinNode.getLeftNode();
  JoinNode rightNode=joinNode.getRightNode();
  if (joinNode.getJoinType() == JoinType.LEFT) {
    if (isNullRejecting(rightNode.generateTableJoinOrder(),exprs)) {
      joinNode.setJoinType(JoinType.INNER);
    }
  }
 else   if (joinNode.getJoinType() == JoinType.RIGHT) {
    if (isNullRejecting(leftNode.generateTableJoinOrder(),exprs)) {
      joinNode.setJoinType(JoinType.INNER);
    }
  }
 else   if (joinNode.getJoinType() == JoinType.FULL) {
    if (isNullRejecting(leftNode.generateTableJoinOrder(),exprs)) {
      joinNode.setJoinType(JoinType.LEFT);
    }
    if (isNullRejecting(rightNode.generateTableJoinOrder(),exprs)) {
      if (JoinType.FULL == joinNode.getJoinType()) {
        joinNode.setJoinType(JoinType.RIGHT);
      }
 else {
        joinNode.setJoinType(JoinType.INNER);
      }
    }
  }
  if (leftNode.getWhereExpression() != null) {
    exprs.add(leftNode.getWhereExpression());
  }
  if (rightNode.getWhereExpression() != null) {
    exprs.add(rightNode.getWhereExpression());
  }
  List<AbstractExpression> exprsForInnerNode=new ArrayList<AbstractExpression>(exprs);
  if (leftNode.getJoinExpression() != null) {
    exprsForInnerNode.add(leftNode.getJoinExpression());
  }
  if (rightNode.getJoinExpression() != null) {
    exprsForInnerNode.add(rightNode.getJoinExpression());
  }
  List<AbstractExpression> leftNodeExprs;
  List<AbstractExpression> rightNodeExprs;
switch (joinNode.getJoinType()) {
case INNER:
    leftNodeExprs=exprsForInnerNode;
  rightNodeExprs=exprsForInnerNode;
break;
case LEFT:
leftNodeExprs=exprs;
rightNodeExprs=exprsForInnerNode;
break;
case RIGHT:
leftNodeExprs=exprsForInnerNode;
rightNodeExprs=exprs;
break;
case FULL:
leftNodeExprs=exprs;
rightNodeExprs=exprs;
break;
default :
leftNodeExprs=null;
rightNodeExprs=null;
assert(false);
}
if (leftNode instanceof BranchNode) {
simplifyOuterJoinRecursively((BranchNode)leftNode,leftNodeExprs);
}
if (rightNode instanceof BranchNode) {
simplifyOuterJoinRecursively((BranchNode)rightNode,rightNodeExprs);
}
}
