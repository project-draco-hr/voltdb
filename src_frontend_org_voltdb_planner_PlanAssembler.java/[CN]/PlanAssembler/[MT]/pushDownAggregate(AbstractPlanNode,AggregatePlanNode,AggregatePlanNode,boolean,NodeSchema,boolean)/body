{
  if (coordNode != null) {
    coordNode.m_isCoordinatingAggregator=true;
  }
  AbstractPlanNode accessPlanTemp=root;
  if (coordNode != null && root instanceof ReceivePlanNode) {
    root=root.getChild(0).getChild(0);
    root.clearParents();
  }
 else {
    accessPlanTemp=null;
  }
  boolean opt=false;
  if (m_parsedSelect.m_having != null) {
    opt=true;
  }
  if (!opt && distNode.isAbleInlined(root)) {
    root.addInlinePlanNode(distNode);
    opt=true;
  }
 else {
    distNode.addAndLinkChild(root);
    root=distNode;
  }
  if (accessPlanTemp != null) {
    accessPlanTemp.getChild(0).clearChildren();
    accessPlanTemp.getChild(0).addAndLinkChild(root);
    root=accessPlanTemp;
    if (needCoordNode) {
      if (opt && coordNode.isAbleInlined(root)) {
        root.addInlinePlanNode(coordNode);
      }
 else {
        coordNode.addAndLinkChild(root);
        root=coordNode;
      }
    }
  }
  if (needCoordNode && accessPlanTemp != null) {
    coordNode.setPostPredicate(m_parsedSelect.m_having);
  }
 else {
    distNode.setPostPredicate(m_parsedSelect.m_having);
  }
  if (needProjectionNode) {
    ProjectionPlanNode proj=new ProjectionPlanNode();
    proj.addAndLinkChild(root);
    proj.setOutputSchema(newSchema);
    root=proj;
  }
  return root;
}
