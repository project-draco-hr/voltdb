{
  try {
    wrp.readerLock();
    assert(countsArrayLength == activeCounts.length());
    assert(countsArrayLength == inactiveCounts.length());
    if (normalizingIndexOffset == activeCounts.getNormalizingIndexOffset()) {
      return;
    }
    int zeroIndex=normalizeIndex(0,inactiveCounts.getNormalizingIndexOffset(),inactiveCounts.length());
    long inactiveZeroValueCount=inactiveCounts.get(zeroIndex);
    inactiveCounts.lazySet(zeroIndex,0);
    inactiveCounts.setNormalizingIndexOffset(normalizingIndexOffset);
    if ((shiftedAmount > 0) && lowestHalfBucketPopulated) {
      shiftLowestInactiveHalfBucketContentsLeft(shiftedAmount);
    }
    zeroIndex=normalizeIndex(0,inactiveCounts.getNormalizingIndexOffset(),inactiveCounts.length());
    inactiveCounts.lazySet(zeroIndex,inactiveZeroValueCount);
    AtomicLongArrayWithNormalizingOffset tmp=activeCounts;
    activeCounts=inactiveCounts;
    inactiveCounts=tmp;
    wrp.flipPhase();
    zeroIndex=normalizeIndex(0,inactiveCounts.getNormalizingIndexOffset(),inactiveCounts.length());
    inactiveZeroValueCount=inactiveCounts.get(zeroIndex);
    inactiveCounts.lazySet(zeroIndex,0);
    inactiveCounts.setNormalizingIndexOffset(normalizingIndexOffset);
    if ((shiftedAmount > 0) && lowestHalfBucketPopulated) {
      shiftLowestInactiveHalfBucketContentsLeft(shiftedAmount);
    }
    zeroIndex=normalizeIndex(0,inactiveCounts.getNormalizingIndexOffset(),inactiveCounts.length());
    inactiveCounts.lazySet(zeroIndex,inactiveZeroValueCount);
    tmp=activeCounts;
    activeCounts=inactiveCounts;
    inactiveCounts=tmp;
    wrp.flipPhase();
  }
  finally {
    wrp.readerUnlock();
  }
}
