{
  if (!m_enabled) {
    return new AuthUser(null,null,false,false){
      @Override public boolean hasPermission(      Procedure proc){
        return true;
      }
      @Override public boolean hasAdhocPermission(){
        return true;
      }
      @Override public boolean hasSystemProcPermission(){
        return true;
      }
    }
;
  }
  final AuthUser user=m_users.get(username);
  if (user == null) {
    authLogger.l7dlog(Level.INFO,LogKeys.auth_AuthSystem_NoSuchUser.name(),new String[]{username},null);
    return null;
  }
  MessageDigest md=null;
  try {
    md=MessageDigest.getInstance("SHA-1");
  }
 catch (  NoSuchAlgorithmException e) {
    authLogger.l7dlog(Level.FATAL,LogKeys.auth_AuthSystem_NoSuchAlgorithm.name(),e);
    VoltDB.crashVoltDB();
  }
  byte passwordHash[]=md.digest(password);
  if (java.util.Arrays.equals(passwordHash,user.m_shadowPassword)) {
    authLogger.l7dlog(Level.INFO,LogKeys.auth_AuthSystem_AuthenticatedUser.name(),new Object[]{username},null);
    return user;
  }
 else {
    authLogger.l7dlog(Level.INFO,LogKeys.auth_AuthSystem_AuthFailedPasswordMistmatch.name(),new String[]{username},null);
    return null;
  }
}
