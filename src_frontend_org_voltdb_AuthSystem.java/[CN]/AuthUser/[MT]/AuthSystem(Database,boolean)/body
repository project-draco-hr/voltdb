{
  AuthProvider ap=null;
  LoginContext loginContext=null;
  GSSManager gssManager=null;
  byte[] principal=null;
  m_enabled=enabled;
  if (!m_enabled) {
    m_authProvider=ap;
    m_loginCtx=loginContext;
    m_principalName=principal;
    m_gssManager=null;
    return;
  }
  m_authProvider=AuthProvider.fromProvider(db.getSecurityprovider());
  if (m_authProvider == AuthProvider.KERBEROS) {
    try {
      loginContext=new LoginContext(VOLTDB_SERVICE_LOGIN_MODULE);
    }
 catch (    LoginException|SecurityException ex) {
      VoltDB.crashGlobalVoltDB("Cannot initialize JAAS LoginContext",true,ex);
    }
    try {
      loginContext.login();
      principal=loginContext.getSubject().getPrincipals().iterator().next().getName().getBytes(Charsets.UTF_8);
      gssManager=GSSManager.getInstance();
    }
 catch (    AccountExpiredException ex) {
      VoltDB.crashGlobalVoltDB("VoltDB assigned service principal has expired",true,ex);
    }
catch (    CredentialExpiredException ex) {
      VoltDB.crashGlobalVoltDB("VoltDB assigned service principal credentials have expired",true,ex);
    }
catch (    FailedLoginException ex) {
      VoltDB.crashGlobalVoltDB("VoltDB failed to authenticate against kerberos",true,ex);
    }
catch (    LoginException ex) {
      VoltDB.crashGlobalVoltDB("VoltDB service principal failed to login",true,ex);
    }
catch (    Exception ex) {
      VoltDB.crashGlobalVoltDB("Unexpected exception occured during service authentication",true,ex);
    }
  }
  m_loginCtx=loginContext;
  m_principalName=principal;
  m_gssManager=gssManager;
  for (  org.voltdb.catalog.User catalogUser : db.getUsers()) {
    String shadowPassword=catalogUser.getShadowpassword();
    byte sha1ShadowPassword[]=null;
    if (shadowPassword.length() == 40) {
      sha1ShadowPassword=Encoder.hexDecode(shadowPassword);
    }
 else     if (shadowPassword.length() != 60) {
      VoltDB.crashGlobalVoltDB("Found a shadowPassword in the catalog that was in an unrecogized format",true,null);
    }
    final AuthUser user=new AuthUser(sha1ShadowPassword,shadowPassword,catalogUser.getTypeName());
    m_users.put(user.m_name,user);
    for (    org.voltdb.catalog.GroupRef catalogGroupRef : catalogUser.getGroups()) {
      final org.voltdb.catalog.Group catalogGroup=catalogGroupRef.getGroup();
      AuthGroup group=null;
      if (!m_groups.containsKey(catalogGroup.getTypeName())) {
        group=new AuthGroup(catalogGroup.getTypeName(),Permission.getPermissionSetForGroup(catalogGroup));
        m_groups.put(group.m_name,group);
      }
 else {
        group=m_groups.get(catalogGroup.getTypeName());
      }
      group.m_users.add(user);
      user.m_groups.add(group);
    }
  }
  for (  org.voltdb.catalog.Group catalogGroup : db.getGroups()) {
    AuthGroup group=null;
    if (!m_groups.containsKey(catalogGroup.getTypeName())) {
      group=new AuthGroup(catalogGroup.getTypeName(),Permission.getPermissionSetForGroup(catalogGroup));
      m_groups.put(group.m_name,group);
    }
 else {
      group=m_groups.get(catalogGroup.getTypeName());
    }
  }
  for (  org.voltdb.catalog.Procedure catalogProcedure : db.getProcedures()) {
    for (    org.voltdb.catalog.UserRef catalogUserRef : catalogProcedure.getAuthusers()) {
      final org.voltdb.catalog.User catalogUser=catalogUserRef.getUser();
      final AuthUser user=m_users.get(catalogUser.getTypeName());
      if (user == null) {
      }
 else {
        user.m_authorizedProcedures.add(catalogProcedure);
      }
    }
    for (    org.voltdb.catalog.GroupRef catalogGroupRef : catalogProcedure.getAuthgroups()) {
      final org.voltdb.catalog.Group catalogGroup=catalogGroupRef.getGroup();
      final AuthGroup group=m_groups.get(catalogGroup.getTypeName());
      if (group == null) {
      }
 else {
        for (        AuthUser user : group.m_users) {
          user.m_authorizedProcedures.add(catalogProcedure);
        }
      }
    }
  }
  m_users=ImmutableMap.copyOf(m_users);
  m_groups=ImmutableMap.copyOf(m_groups);
  for (  AuthUser user : m_users.values()) {
    user.finish();
  }
  for (  AuthGroup group : m_groups.values()) {
    group.finish();
  }
}
