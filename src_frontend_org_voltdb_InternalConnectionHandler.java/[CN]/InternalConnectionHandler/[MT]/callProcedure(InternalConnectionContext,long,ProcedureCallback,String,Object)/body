{
  Procedure catProc=VoltDB.instance().getClientInterface().getProcedureFromName(proc,VoltDB.instance().getCatalogContext());
  if (catProc == null) {
    String fmt="Cannot invoke procedure %s from streaming interface %s. Procedure not found.";
    m_logger.rateLimitedLog(SUPPRESS_INTERVAL,Level.ERROR,null,fmt,proc,caller);
    m_failedCount.incrementAndGet();
    return false;
  }
  boolean b=m_adapter.hasBackPressure();
  caller.setBackPressure(b);
  if (b) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ex) {
    }
  }
  final long nowNanos=System.nanoTime();
  StoredProcedureInvocation task=new StoredProcedureInvocation();
  ParameterSet pset=ParameterSet.fromArrayWithCopy(fieldList);
  int sz=1 + 4 + proc.length()+ 8+ pset.getSerializedSize();
  final BBContainer tcont=getBuffer(sz);
  final ByteBuffer taskbuf=tcont.b();
  try {
    taskbuf.put(ProcedureInvocationType.ORIGINAL.getValue());
    taskbuf.putInt(proc.length());
    taskbuf.put(proc.getBytes());
    taskbuf.putLong(m_adapter.connectionId());
    pset.flattenToBuffer(taskbuf);
    taskbuf.flip();
    task.initFromBuffer(taskbuf);
  }
 catch (  IOException ex) {
    m_failedCount.incrementAndGet();
    m_logger.error("Failed to serialize parameters for stream: " + proc,ex);
    tcont.discard();
    return false;
  }
  int partition=-1;
  try {
    partition=getPartitionForProcedure(catProc,task);
  }
 catch (  Exception e) {
    String fmt="Can not invoke procedure %s from streaming interface %s. Partition not found.";
    m_logger.rateLimitedLog(SUPPRESS_INTERVAL,Level.ERROR,e,fmt,proc,caller);
    m_failedCount.incrementAndGet();
    tcont.discard();
    return false;
  }
  boolean success=m_adapter.createTransaction(caller,proc,catProc,procCallback,task,tcont,partition,nowNanos);
  if (!success) {
    tcont.discard();
    m_failedCount.incrementAndGet();
  }
 else {
    m_submitSuccessCount.incrementAndGet();
  }
  return success;
}
