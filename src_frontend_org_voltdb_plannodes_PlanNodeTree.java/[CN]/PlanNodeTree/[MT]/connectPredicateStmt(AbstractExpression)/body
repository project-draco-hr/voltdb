{
  if (predicate == null) {
    return;
  }
  List<AbstractExpression> subquerysExprs=predicate.findAllSubexpressionsOfClass(AbstractSubqueryExpression.class);
  for (  AbstractExpression expr : subquerysExprs) {
    assert(expr instanceof AbstractSubqueryExpression);
    AbstractSubqueryExpression subqueryExpr=(AbstractSubqueryExpression)expr;
    int subqueryId=subqueryExpr.getSubqueryId();
    int subqueryNodeId=subqueryExpr.getSubqueryNodeId();
    List<AbstractPlanNode> subqueryNodes=m_planNodesListMap.get(subqueryId);
    if (subqueryNodes == null) {
      return;
    }
    AbstractPlanNode subqueryNode=getNodeofId(subqueryNodeId,subqueryNodes);
    assert(subqueryNode != null);
    subqueryExpr.setSubqueryNode(subqueryNode);
  }
}
