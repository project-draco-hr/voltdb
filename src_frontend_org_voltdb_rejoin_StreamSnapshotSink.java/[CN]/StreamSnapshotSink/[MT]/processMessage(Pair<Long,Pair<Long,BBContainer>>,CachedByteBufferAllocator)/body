{
  if (msg == null) {
    return null;
  }
  RestoreWork restoreWork=null;
  long hsId=msg.getFirst();
  long targetId=msg.getSecond().getFirst();
  BBContainer container=msg.getSecond().getSecond();
  try {
    ByteBuffer block=container.b();
    byte typeByte=block.get(StreamSnapshotDataTarget.typeOffset);
    final int blockIndex=block.getInt(StreamSnapshotDataTarget.blockIndexOffset);
    StreamSnapshotMessageType type=StreamSnapshotMessageType.values()[typeByte];
    if (type == StreamSnapshotMessageType.FAILURE) {
      VoltDB.crashLocalVoltDB("Rejoin source sent failure message.",false,null);
      if (m_expectedEOFs.decrementAndGet() == 0) {
        m_EOF=true;
      }
    }
 else     if (type == StreamSnapshotMessageType.END) {
      if (rejoinLog.isTraceEnabled()) {
        rejoinLog.trace("Got END message " + blockIndex);
      }
      if (m_expectedEOFs.decrementAndGet() == 0) {
        m_EOF=true;
        System.out.println("Got END message for site");
        System.out.flush();
      }
    }
 else     if (type == StreamSnapshotMessageType.SCHEMA) {
      rejoinLog.trace("Got SCHEMA message");
      block.position(StreamSnapshotDataTarget.contentOffset);
      byte[] schemaBytes=new byte[block.remaining()];
      block.get(schemaBytes);
      m_schemas.put(block.getInt(StreamSnapshotDataTarget.tableIdOffset),schemaBytes);
    }
 else     if (type == StreamSnapshotMessageType.HASHINATOR) {
      block.position(StreamSnapshotDataTarget.contentOffset);
      long version=block.getLong();
      byte[] hashinatorConfig=new byte[block.remaining()];
      block.get(hashinatorConfig);
      restoreWork=new HashinatorRestoreWork(version,hashinatorConfig);
    }
 else {
      final int tableId=block.getInt(StreamSnapshotDataTarget.tableIdOffset);
      if (!m_schemas.containsKey(tableId)) {
        VoltDB.crashLocalVoltDB("No schema for table with ID " + tableId,false,null);
      }
      block.position(StreamSnapshotDataTarget.contentOffset);
      ByteBuffer nextChunk=getNextChunk(m_schemas.get(tableId),block,resultBufferAllocator);
      m_bytesReceived+=nextChunk.remaining();
      restoreWork=new TableRestoreWork(tableId,nextChunk);
    }
    m_ack.ack(hsId,m_EOF,targetId,blockIndex);
    return restoreWork;
  }
  finally {
    container.discard();
  }
}
