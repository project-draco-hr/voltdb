{
  HashMap<Long,Pair<String,long[]>> retval=new HashMap<Long,Pair<String,long[]>>();
  LinkedList<Future<Map<Long,Pair<String,long[]>>>> statTasks=new LinkedList<Future<Map<Long,Pair<String,long[]>>>>();
  for (  VoltNetwork vn : m_networks) {
    statTasks.add(vn.getIOStats(interval));
  }
  for (  IOStatsIntf pn : picoNetworks) {
    statTasks.add(pn.getIOStats(interval));
  }
  long globalStats[]=null;
  for (  Future<Map<Long,Pair<String,long[]>>> statsFuture : statTasks) {
    try {
      Map<Long,Pair<String,long[]>> stats=statsFuture.get(500,TimeUnit.MILLISECONDS);
      if (globalStats == null) {
        globalStats=stats.get(-1L).getSecond();
      }
 else {
        final long localStats[]=stats.get(-1L).getSecond();
        for (int ii=0; ii < localStats.length; ii++) {
          globalStats[ii]+=localStats[ii];
        }
      }
      retval.putAll(stats);
    }
 catch (    TimeoutException e) {
      m_logger.warn("Timed out retrieving stats from network thread, probably harmless",e);
    }
  }
  retval.put(-1L,Pair.of("GLOBAL",globalStats));
  return retval;
}
