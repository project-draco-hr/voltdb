{
  long end=System.currentTimeMillis() + 20000;
  boolean success=false;
  String error="";
  while (System.currentTimeMillis() < end) {
    int scnt=0;
    ClientResponse response=client.callProcedure("@AdHoc","select count(*) from importTable");
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    if (count == response.getResults()[0].asScalarLong())     scnt++;
    response=client.callProcedure("@AdHoc","select count(*) from log_events");
    assertEquals(ClientResponse.SUCCESS,response.getStatus());
    if (min < 0) {
      if (count == response.getResults()[0].asScalarLong())       scnt++;
    }
 else {
      long result=response.getResults()[0].asScalarLong();
      if (result >= min && result <= count) {
        scnt++;
      }
 else {
        error=result + " not between " + min+ " and "+ count;
      }
    }
    if (scnt == 2) {
      success=true;
      break;
    }
    Thread.sleep(50);
  }
  assertTrue(error,success);
  ClientResponse response=client.callProcedure("@Statistics","Initiator",0);
  VoltTable stats=response.getResults()[0];
  int foundCount=0;
  for (int i=0; i < stats.getRowCount(); i++) {
    VoltTableRow row=stats.fetchRow(i);
    String name=row.getString(CONN_HOST_COL);
    if (!expectedStatRows.containsKey(name)) {
      continue;
    }
    foundCount++;
    assertEquals(expectedStatRows.get(name),row.getString(PROC_NAME_COL));
    long invocations=row.getLong(INVOCATIONS_COL);
    if (min < 0) {
      assertEquals(count,invocations);
    }
 else {
      assertTrue(invocations >= min && invocations <= count);
    }
  }
  assertEquals(expectedStatRows.size(),foundCount);
}
