{
  ClientStats stats=client.getStats(false,true,true)[0];
  String display="\n" + HORIZONTAL_RULE + " Voting Results\n"+ HORIZONTAL_RULE+ "\nA total of %d votes were received...\n"+ " - %,9d Accepted\n"+ " - %,9d Rejected (Invalid Contestant)\n"+ " - %,9d Rejected (Maximum Vote Count Reached)\n"+ " - %,9d Failed (Transaction Error)\n\n";
  System.out.printf(display,stats.invocationsCompleted,acceptedVotes.get(),badContestantVotes.get(),badVoteCountVotes.get(),failedVotes.get());
  VoltTable result=client.callProcedure("Results").getResults()[0];
  System.out.println("Contestant Name\t\tVotes Received");
  while (result.advanceRow()) {
    System.out.printf("%s\t\t%,14d\n",result.getString(0),result.getLong(2));
  }
  System.out.printf("\nThe Winner is: %s\n\n",result.fetchRow(0).getString(0));
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" System Statistics");
  System.out.println(HORIZONTAL_RULE);
  long now=System.currentTimeMillis();
  System.out.printf("For %.1f seconds, an average throughput of %d txns/sec was sustained.\n",(now - stats.since) / 1000.0,stats.throughput(now));
  System.out.printf("Average latency was %d ms per procedure.\n",stats.averageLatency());
  System.out.printf("Average internal latency, as reported by the server(s) was %d ms.\n",stats.averageInternalLatency());
  System.out.printf("Measured 95th and 99th percentile latencies were %d and %d ms respectively\n",stats.kPercentileLatency(.95),stats.kPercentileLatency(.99));
  if ((config.stats != null) && (config.stats.length() > 0)) {
    client.writeSummaryCSV(config.stats);
  }
}
