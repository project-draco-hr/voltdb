{
  try {
    String procedure="WaitSinglePartition";
    long wait=5000l;
    int repeat=100;
    String serverList="localhost";
    int port=21212;
    Random rand=new Random();
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (arg.startsWith("--wait="))       wait=1000l * Long.valueOf(arg.split("=")[1]);
 else       if (arg.startsWith("--repeat="))       repeat=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.equals("--multi"))       procedure="WaitMultiPartition";
 else       if (arg.startsWith("--servers="))       serverList=arg.split("=")[1];
 else       if (arg.startsWith("--port="))       port=Integer.valueOf(arg.split("=")[1]);
 else       if (arg.equals("--help")) {
        printUsage();
        System.exit(0);
      }
 else {
        System.err.println("Invalid Usage.");
        printUsage();
        System.exit(-1);
      }
    }
    if ((repeat <= 0) || (wait <= 0)) {
      System.err.println("Invalid Usage.");
      printUsage();
      System.exit(-1);
    }
    String[] servers=serverList.split(",");
    System.out.printf("-------------------------------------------------------------------------------------\n" + "       Procedure: %s\n" + "            Wait: %d ms\n"+ "          Repeat: %d times\n"+ "         Servers: %s\n"+ "            Port: %d\n"+ "-------------------------------------------------------------------------------------\n",procedure,wait,repeat,serverList,port);
    Client client=ClientExtensions.GetClient(servers,port);
    for (int i=0; i < repeat; i++) {
      System.out.printf("%d / %d\n",i + 1,repeat);
      System.out.flush();
      client.callProcedure(procedure,wait + ((rand.nextInt(10) * rand.nextInt(10)) % 10));
    }
    client.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(-1);
  }
}
