{
  if (subject == null) {
    return null;
  }
  Optional<DelegatePrincipal> opt=ConnectionUtil.getDelegate(subject);
  if (!opt.isPresent()) {
    throw new IOException("Subject " + subject + " does not contain suported principals");
  }
  DelegatePrincipal principal=opt.get();
  String userName=principal.getName();
  String userNameWithAdminSuffix=null;
  if (userName != null && !userName.trim().isEmpty()) {
    if (userName.endsWith(ADMIN_SUFFIX)) {
      throw new IOException("User name cannot end with " + ADMIN_SUFFIX);
    }
    userNameWithAdminSuffix=userName + ADMIN_SUFFIX;
  }
  final ClientAuthScheme scheme=ClientAuthScheme.SPNEGO;
  String ckey=(admin ? userNameWithAdminSuffix : userName) + scheme;
  Connection conn=m_connections.get(ckey);
  if (conn != null) {
    conn.refCount++;
  }
 else {
    conn=new Connection();
    conn.refCount=1;
    conn.subject=subject;
    conn.user=userName;
    ClientConfig config=new ClientConfig(subject,new StatusListener(conn));
    conn.client=(ClientImpl)ClientFactory.createClient(config);
    conn.scheme=scheme;
    try {
      conn.client.createConnection(m_hostname,(admin ? m_adminPort : m_port));
    }
 catch (    IOException e) {
      try {
        conn.client.close();
      }
 catch (      InterruptedException ex) {
        throw new IOException("Unable to close rejected authenticated " + (admin ? "admin " : "") + "client connection.",ex);
      }
      conn=null;
      throw e;
    }
    m_connections.put(ckey,conn);
    attemptToShrinkPoolIfNeeded();
  }
  return new ClientWithHashScheme(conn.client,scheme);
}
