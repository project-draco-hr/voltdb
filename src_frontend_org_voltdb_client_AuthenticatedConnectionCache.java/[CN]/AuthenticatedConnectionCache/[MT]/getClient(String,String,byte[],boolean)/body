{
  if (admin) {
    ClientImpl adminClient=null;
    try {
      adminClient=(ClientImpl)ClientFactory.createClient();
      if ((userName == null) || (userName.equals(""))) {
        if ((hashedPassword != null) && (hashedPassword.length > 0)) {
          throw new IOException("Username was null but password was not.");
        }
        adminClient.createConnection(m_adminHostName,m_adminPort);
      }
 else {
        adminClient.createConnectionWithHashedCredentials(m_adminHostName,m_adminPort,userName,hashedPassword);
      }
    }
 catch (    IOException ioe) {
      try {
        adminClient.close();
      }
 catch (      InterruptedException ex) {
        throw new IOException("Unable to close rejected admin client connection",ex);
      }
      throw ioe;
    }
    return adminClient;
  }
  if ((userName == null) || userName.equals("")) {
    if ((hashedPassword != null) && (hashedPassword.length > 0)) {
      throw new IOException("Username was null but password was not.");
    }
    if (m_unauthClient == null) {
      try {
        m_unauthClient=(ClientImpl)ClientFactory.createClient();
        m_unauthClient.createConnection(m_hostname,m_port);
      }
 catch (      IOException e) {
        try {
          m_unauthClient.close();
        }
 catch (        InterruptedException ex) {
          throw new IOException("Unable to close rejected unauthenticated client connection",ex);
        }
        m_unauthClient=null;
        throw e;
      }
    }
    assert(m_unauthClient != null);
    return m_unauthClient;
  }
  int passHash=0;
  if (hashedPassword != null) {
    passHash=Arrays.hashCode(hashedPassword);
  }
  Connection conn=m_connections.get(userName);
  if (conn != null) {
    if (conn.passHash != passHash) {
      throw new IOException("Incorrect authorization credentials.");
    }
    conn.refCount++;
  }
 else {
    conn=new Connection();
    conn.refCount=1;
    conn.passHash=passHash;
    if (hashedPassword != null) {
      conn.hashedPassword=Arrays.copyOf(hashedPassword,hashedPassword.length);
    }
 else {
      conn.hashedPassword=null;
    }
    ClientConfig config=new ClientConfig(userName,password,true,new StatusListener(conn));
    conn.user=userName;
    conn.client=(ClientImpl)ClientFactory.createClient(config);
    try {
      conn.client.createConnectionWithHashedCredentials(m_hostname,m_port,userName,hashedPassword);
    }
 catch (    IOException ioe) {
      try {
        conn.client.close();
      }
 catch (      InterruptedException ex) {
        throw new IOException("Unable to close rejected authenticated client connection.",ex);
      }
      conn=null;
      throw ioe;
    }
    m_connections.put(userName,conn);
    attemptToShrinkPoolIfNeeded();
  }
  return conn.client;
}
