{
  String userNameWithAdminSuffix=null;
  if (userName != null && !userName.trim().isEmpty()) {
    if (userName.endsWith(ADMIN_SUFFIX)) {
      throw new IOException("User name cannot end with " + ADMIN_SUFFIX);
    }
    userNameWithAdminSuffix=userName + ADMIN_SUFFIX;
  }
  if ((userName == null) || userName.trim().isEmpty()) {
    if ((hashedPassword != null) && (hashedPassword.length > 0)) {
      throw new IOException("Username was null but password was not.");
    }
    if (m_unauthClient == null) {
      try {
        m_unauthClient=(ClientImpl)ClientFactory.createClient();
        m_unauthClient.createConnection(m_hostname,m_port);
      }
 catch (      IOException e) {
        try {
          m_unauthClient.close();
        }
 catch (        InterruptedException ex) {
          throw new IOException("Unable to close rejected unauthenticated client connection",ex);
        }
        m_unauthClient=null;
        throw e;
      }
    }
    if (m_adminUnauthClient == null) {
      try {
        m_adminUnauthClient=(ClientImpl)ClientFactory.createClient();
        m_adminUnauthClient.createConnection(m_hostname,m_adminPort);
      }
 catch (      IOException e) {
        try {
          m_adminUnauthClient.close();
        }
 catch (        InterruptedException ex) {
          throw new IOException("Unable to close rejected unauthenticated admin client connection",ex);
        }
        m_adminUnauthClient=null;
        throw e;
      }
    }
    assert(m_unauthClient != null);
    assert(m_adminUnauthClient != null);
    return admin ? m_adminUnauthClient : m_unauthClient;
  }
  int passHash=0;
  if (hashedPassword != null) {
    passHash=Arrays.hashCode(hashedPassword);
  }
  Connection conn=m_connections.get(admin ? userNameWithAdminSuffix : userName);
  if (conn != null) {
    if (conn.passHash != passHash) {
      throw new IOException("Incorrect authorization credentials.");
    }
    conn.refCount++;
  }
 else {
    conn=new Connection();
    conn.refCount=1;
    conn.passHash=passHash;
    if (hashedPassword != null) {
      conn.hashedPassword=Arrays.copyOf(hashedPassword,hashedPassword.length);
    }
 else {
      conn.hashedPassword=null;
    }
    ClientAuthHashScheme scheme=(conn.hashedPassword == null ? ClientAuthHashScheme.HASH_SHA256 : ClientAuthHashScheme.getByUnencodedLength(hashedPassword.length));
    ClientConfig config=new ClientConfig(userName,password,true,new StatusListener(conn),scheme);
    conn.user=userName;
    conn.client=(ClientImpl)ClientFactory.createClient(config);
    try {
      conn.client.createConnectionWithHashedCredentials(m_hostname,(admin ? m_adminPort : m_port),userName,hashedPassword);
    }
 catch (    IOException ioe) {
      try {
        conn.client.close();
      }
 catch (      InterruptedException ex) {
        throw new IOException("Unable to close rejected authenticated " + (admin ? "admin " : "") + "client connection.",ex);
      }
      conn=null;
      throw ioe;
    }
    m_connections.put(admin ? userNameWithAdminSuffix : userName,conn);
    attemptToShrinkPoolIfNeeded();
  }
  return conn.client;
}
