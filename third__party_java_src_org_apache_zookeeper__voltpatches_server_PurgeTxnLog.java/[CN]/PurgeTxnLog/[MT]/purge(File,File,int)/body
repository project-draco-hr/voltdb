{
  if (num < 3) {
    throw new IllegalArgumentException("count should be greater than 3");
  }
  FileTxnSnapLog txnLog=new FileTxnSnapLog(dataDir,snapDir);
  Set<File> exc=new HashSet<File>();
  List<File> snaps=txnLog.findNRecentSnapshots(num);
  if (snaps.size() == 0)   return;
  File snapShot=snaps.get(snaps.size() - 1);
  for (  File f : snaps) {
    exc.add(f);
  }
  long zxid=Util.getZxidFromName(snapShot.getName(),"snapshot");
  exc.addAll(Arrays.asList(txnLog.getSnapshotLogs(zxid)));
  final Set<File> exclude=exc;
class MyFileFilter implements FileFilter {
    private final String prefix;
    MyFileFilter(    String prefix){
      this.prefix=prefix;
    }
    public boolean accept(    File f){
      if (!f.getName().startsWith(prefix) || exclude.contains(f))       return false;
      return true;
    }
  }
  List<File> files=new ArrayList<File>(Arrays.asList(txnLog.getDataDir().listFiles(new MyFileFilter("log."))));
  files.addAll(Arrays.asList(txnLog.getSnapDir().listFiles(new MyFileFilter("snapshot."))));
  for (  File f : files) {
    System.out.println("Removing file: " + DateFormat.getDateTimeInstance().format(f.lastModified()) + "\t"+ f.getPath());
    if (!f.delete()) {
      System.err.println("Failed to remove " + f.getPath());
    }
  }
}
