{
  final Iterator<Entry<E>> readOnlyIterator=new AbstractIterator<Entry<E>>(){
    private Iterator<Map.Entry<E,AtomicInteger>> mapEntries=countMap.entrySet().iterator();
    @Override protected Entry<E> computeNext(){
      while (true) {
        if (!mapEntries.hasNext()) {
          return endOfData();
        }
        Map.Entry<E,AtomicInteger> mapEntry=mapEntries.next();
        int count=mapEntry.getValue().get();
        if (count != 0) {
          return Multisets.immutableEntry(mapEntry.getKey(),count);
        }
      }
    }
  }
;
  return new ForwardingIterator<Entry<E>>(){
    private Entry<E> last;
    @Override protected Iterator<Entry<E>> delegate(){
      return readOnlyIterator;
    }
    @Override public Entry<E> next(){
      last=super.next();
      return last;
    }
    @Override public void remove(){
      checkRemove(last != null);
      ConcurrentHashMultiset.this.setCount(last.getElement(),0);
      last=null;
    }
  }
;
}
