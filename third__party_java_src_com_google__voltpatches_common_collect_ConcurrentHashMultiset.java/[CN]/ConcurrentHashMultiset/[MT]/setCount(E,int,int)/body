{
  checkNotNull(element);
  checkNonnegative(expectedOldCount,"oldCount");
  checkNonnegative(newCount,"newCount");
  AtomicInteger existingCounter=Maps.safeGet(countMap,element);
  if (existingCounter == null) {
    if (expectedOldCount != 0) {
      return false;
    }
 else     if (newCount == 0) {
      return true;
    }
 else {
      return countMap.putIfAbsent(element,new AtomicInteger(newCount)) == null;
    }
  }
  int oldValue=existingCounter.get();
  if (oldValue == expectedOldCount) {
    if (oldValue == 0) {
      if (newCount == 0) {
        countMap.remove(element,existingCounter);
        return true;
      }
 else {
        AtomicInteger newCounter=new AtomicInteger(newCount);
        return (countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter);
      }
    }
 else {
      if (existingCounter.compareAndSet(oldValue,newCount)) {
        if (newCount == 0) {
          countMap.remove(element,existingCounter);
        }
        return true;
      }
    }
  }
  return false;
}
