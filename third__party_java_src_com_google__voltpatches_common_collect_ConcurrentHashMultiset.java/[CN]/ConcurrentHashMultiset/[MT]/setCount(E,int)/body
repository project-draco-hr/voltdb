{
  checkNotNull(element);
  checkNonnegative(count,"count");
  while (true) {
    AtomicInteger existingCounter=Maps.safeGet(countMap,element);
    if (existingCounter == null) {
      if (count == 0) {
        return 0;
      }
 else {
        existingCounter=countMap.putIfAbsent(element,new AtomicInteger(count));
        if (existingCounter == null) {
          return 0;
        }
      }
    }
    while (true) {
      int oldValue=existingCounter.get();
      if (oldValue == 0) {
        if (count == 0) {
          return 0;
        }
 else {
          AtomicInteger newCounter=new AtomicInteger(count);
          if ((countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter)) {
            return 0;
          }
        }
        break;
      }
 else {
        if (existingCounter.compareAndSet(oldValue,count)) {
          if (count == 0) {
            countMap.remove(element,existingCounter);
          }
          return oldValue;
        }
      }
    }
  }
}
