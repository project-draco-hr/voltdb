{
  String t=Util.stripLeadingHyphens(token);
  int pos=t.indexOf('=');
  if (t.length() == 1) {
    if (options.hasShortOption(t)) {
      handleOption(options.getOption(t));
    }
 else {
      handleUnknownToken(token);
    }
  }
 else   if (pos == -1) {
    if (options.hasShortOption(t)) {
      handleOption(options.getOption(t));
    }
 else     if (!options.getMatchingOptions(t).isEmpty()) {
      handleLongOptionWithoutEqual(token);
    }
 else {
      String opt=getLongPrefix(t);
      if (opt != null && options.getOption(opt).acceptsArg()) {
        handleOption(options.getOption(opt));
        currentOption.addValueForProcessing(t.substring(opt.length()));
        currentOption=null;
      }
 else       if (isJavaProperty(t)) {
        handleOption(options.getOption(t.substring(0,1)));
        currentOption.addValueForProcessing(t.substring(1));
        currentOption=null;
      }
 else {
        handleConcatenatedOptions(token);
      }
    }
  }
 else {
    String opt=t.substring(0,pos);
    String value=t.substring(pos + 1);
    if (opt.length() == 1) {
      Option option=options.getOption(opt);
      if (option != null && option.acceptsArg()) {
        handleOption(option);
        currentOption.addValueForProcessing(value);
        currentOption=null;
      }
 else {
        handleUnknownToken(token);
      }
    }
 else     if (isJavaProperty(opt)) {
      handleOption(options.getOption(opt.substring(0,1)));
      currentOption.addValueForProcessing(opt.substring(1));
      currentOption.addValueForProcessing(value);
      currentOption=null;
    }
 else {
      handleLongOptionWithEqual(token);
    }
  }
}
