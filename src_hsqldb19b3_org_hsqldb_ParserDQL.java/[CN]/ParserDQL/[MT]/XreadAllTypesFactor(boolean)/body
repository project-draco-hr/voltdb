{
  Expression e;
  boolean minus=false;
  boolean not=false;
  boolean unknown=false;
switch (token.tokenType) {
case Tokens.PLUS:
    read();
  boole=false;
break;
case Tokens.MINUS:
read();
boole=false;
minus=true;
break;
case Tokens.NOT:
if (boole) {
read();
not=true;
}
break;
}
e=XreadAllTypesPrimary(boole);
if (boole && token.tokenType == Tokens.IS) {
read();
if (token.tokenType == Tokens.NOT) {
read();
not=!not;
}
if (token.tokenType == Tokens.TRUE) {
read();
}
 else if (token.tokenType == Tokens.FALSE) {
read();
not=!not;
}
 else if (token.tokenType == Tokens.UNKNOWN) {
read();
unknown=true;
}
 else {
throw unexpectedToken();
}
}
if (unknown) {
e=new ExpressionLogical(OpTypes.IS_NULL,e);
}
 else if (minus) {
e=new ExpressionArithmetic(OpTypes.NEGATE,e);
}
 else if (not) {
e=new ExpressionLogical(OpTypes.NOT,e);
}
return e;
}
