{
  Expression e=XreadAllTypesFactor(boole);
  int type=0;
  boolean end=false;
  while (true) {
switch (token.tokenType) {
case Tokens.ASTERISK:
      type=OpTypes.MULTIPLY;
    boole=false;
  break;
case Tokens.DIVIDE:
type=OpTypes.DIVIDE;
boole=false;
break;
case Tokens.AND:
if (boole) {
type=OpTypes.AND;
break;
}
default :
end=true;
break;
}
if (end) {
break;
}
read();
Expression a=e;
e=XreadAllTypesFactor(boole);
if (e == null) {
throw unexpectedToken();
}
e=boole ? new ExpressionLogical(type,a,e) : new ExpressionArithmetic(type,a,e);
}
return e;
}
