{
  boolean symmetric=false;
  read();
  if (token.tokenType == Tokens.ASYMMETRIC) {
    read();
  }
 else   if (token.tokenType == Tokens.SYMMETRIC) {
    symmetric=true;
    read();
  }
  Expression left=XreadRowValuePredicand();
  readThis(Tokens.AND);
  Expression right=XreadRowValuePredicand();
  if (a.isParam() && left.isParam()) {
    throw Error.error(ErrorCode.X_42567);
  }
  if (a.isParam() && right.isParam()) {
    throw Error.error(ErrorCode.X_42567);
  }
  Expression l=new ExpressionLogical(OpTypes.GREATER_EQUAL,a,left);
  Expression r=new ExpressionLogical(OpTypes.SMALLER_EQUAL,a,right);
  ExpressionLogical leftToRight=new ExpressionLogical(OpTypes.AND,l,r);
  if (symmetric) {
    l=new ExpressionLogical(OpTypes.SMALLER_EQUAL,a,left);
    r=new ExpressionLogical(OpTypes.GREATER_EQUAL,a,right);
    Expression rightToLeft=new ExpressionLogical(OpTypes.AND,l,r);
    return new ExpressionLogical(OpTypes.OR,leftToRight,rightToLeft);
  }
 else {
    return leftToRight;
  }
}
