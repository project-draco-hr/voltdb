{
  try {
    AppHelper apph=new AppHelper(AsyncBenchmark.class.getCanonicalName()).add("displayinterval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("pool-size","pool_size","Size of the record pool to operate on - larger sizes will cause a higher insert/update-delete rate.",100000).add("procedure","procedure_name","Procedure to call.","JiggleExportSinglePartition").add("ratelimit","rate_limit","Rate limit to start from (number of transactions per second).",100000).add("autotune","auto_tune","Flag indicating whether the benchmark should self-tune the transaction rate for a target execution latency (true|false).","true").add("latency-target","latency_target","Execution latency to target to tune transaction rate (in milliseconds).",10.0d).add("catalog-swap","Swap catalogs from the client","true").setArguments(args);
    final long displayInterval=apph.longValue("displayinterval");
    final long duration=apph.longValue("duration");
    final String servers=apph.stringValue("servers");
    final int port=apph.intValue("port");
    final int poolSize=apph.intValue("pool-size");
    final String procedure=apph.stringValue("procedure");
    final long rateLimit=apph.longValue("ratelimit");
    final boolean autoTune=apph.booleanValue("autotune");
    final double latencyTarget=apph.doubleValue("latency-target");
    final boolean catalogSwap=apph.booleanValue("catalog-swap");
    final String csv=apph.stringValue("stats");
    TxnIdWriter writer=new TxnIdWriter("dude","clientlog");
    apph.validate("duration",(duration > 0)).validate("pool-size",(duration > 0)).validate("ratelimit",(rateLimit > 0)).validate("latency-target",(latencyTarget > 0));
    apph.printActualUsage();
    Con=ClientConnectionPool.getWithRetry(servers,port);
    Timer timer=new Timer();
    timer.scheduleAtFixedRate(new TimerTask(){
      @Override public void run(){
        System.out.print(Con.getStatistics(procedure));
      }
    }
,displayInterval * 1000l,displayInterval * 1000l);
    IRateLimiter limiter=null;
    if (autoTune)     limiter=new LatencyLimiter(Con,procedure,latencyTarget,rateLimit);
 else     limiter=new RateLimiter(rateLimit);
    final long endTime=System.currentTimeMillis() + (1000l * duration);
    Random rand=new Random();
    int swap_count=0;
    boolean first_cat=false;
    while (endTime > System.currentTimeMillis()) {
      Con.executeAsync(new AsyncCallback(writer),procedure,(long)rand.nextInt(poolSize),0);
      swap_count++;
      if (((swap_count % CATALOG_SWAP_INTERVAL) == 0) && catalogSwap) {
        System.out.println("Changing catalogs...");
        Con.updateApplicationCatalog(catalogs[first_cat ? 0 : 1],deployment);
        first_cat=!first_cat;
      }
      limiter.throttle();
    }
    timer.cancel();
    Con.drain();
    Thread.sleep(10000);
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Benchmark Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d calls was received...\n"+ " - %,9d Succeeded\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n",TrackingResults.get(0) + TrackingResults.get(1),TrackingResults.get(0),TrackingResults.get(1));
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    System.out.print(Con.getStatistics(procedure).toString(false));
    Con.saveStatistics(csv);
    Con.close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
