{
  try {
    AppHelper apph=new AppHelper(AsyncBenchmark.class.getCanonicalName()).add("displayinterval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("poolsize","pool_size","Size of the record pool to operate on - larger sizes will cause a higher insert/update-delete rate.",100000).add("procedure","procedure_name","Procedure to call.","JiggleExportSinglePartition").add("ratelimit","rate_limit","Rate limit to start from (number of transactions per second).",100000).add("autotune","auto_tune","Flag indicating whether the benchmark should self-tune the transaction rate for a target execution latency (true|false).","true").add("latencytarget","latency_target","Execution latency to target to tune transaction rate (in milliseconds).",10).add("catalogswap","Swap catalogs from the client","true").setArguments(args);
    config=new ConnectionConfig(apph);
    final boolean catalogSwap=apph.booleanValue("catalogswap");
    final String csv=apph.stringValue("statsfile");
    TxnIdWriter writer=new TxnIdWriter("dude","clientlog");
    apph.validate("duration",(config.duration > 0)).validate("poolsize",(config.poolSize > 0)).validate("ratelimit",(config.rateLimit > 0)).validate("latencytarget",(config.latencyTarget > 0));
    apph.printActualUsage();
    createClient();
    connect();
    Timer timer=new Timer(true);
    timer.scheduleAtFixedRate(new TimerTask(){
      @Override public void run(){
        printStatistics(periodicStatsContext,true);
      }
    }
,config.displayInterval * 1000l,config.displayInterval * 1000l);
    benchmarkStartTS=System.currentTimeMillis();
    AtomicLong rowId=new AtomicLong(0);
    final long endTime=benchmarkStartTS + (1000l * config.duration);
    int swap_count=0;
    boolean first_cat=false;
    while (endTime > System.currentTimeMillis()) {
      long currentRowId=rowId.incrementAndGet();
      clientRef.get().callProcedure(new AsyncCallback(writer,currentRowId),config.procedure,currentRowId,0);
      swap_count++;
      if (((swap_count % CATALOG_SWAP_INTERVAL) == 0) && catalogSwap) {
        System.out.println("Changing catalogs...");
        clientRef.get().updateApplicationCatalog(catalogs[first_cat ? 0 : 1],deployment);
        first_cat=!first_cat;
      }
    }
    shutdown.compareAndSet(false,true);
    timer.cancel();
    clientRef.get().drain();
    Thread.sleep(10000);
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Benchmark Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d calls was received...\n"+ " - %,9d Succeeded\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n",TrackingResults.get(0) + TrackingResults.get(1),TrackingResults.get(0),TrackingResults.get(1));
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    printStatistics(fullStatsContext,false);
    clientRef.get().writeSummaryCSV(fullStatsContext.getStatsByProc().get(config.procedure),csv);
    clientRef.get().close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
