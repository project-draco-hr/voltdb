def plotByWorkload(buckets, path, combograph=False, title=''):
    for build in buckets:
        location = 0
        subplotlocations = {}
        sblocation = 0
        numcols = 1
        if combograph:
            fig = plt.figure(figsize=(70, 20))
            fig.suptitle(title, fontsize=10, fontweight='bold')
            numcols = len(buckets[build])
        for workload in sorted(buckets[build]):
            if (not combograph):
                fig = plt.figure(figsize=(9, 7))
                fig.suptitle(title, fontsize=10)
                subplotlocations[workload] = 1
            elif (workload in subplotlocations):
                sblocation = subplotlocations[workload]
            else:
                location = (location + 1)
                subplotlocations[workload] = location
            sb = plt.subplot(1, numcols, subplotlocations[workload])
            plt.xlabel('Zipfian Value', fontsize=20, fontweight='bold')
            plt.ylabel('Txns/Sec', fontsize=20, fontweight='bold')
            sb.set_title((('Workload ' + workload) + ': Throughput'), fontsize=20, fontweight='bold')
            sb.grid(True)
            legendlist = []
            for ratio in sorted(buckets[build][workload]):
                legendlist.append(ratio)
                statsraw = buckets[build][workload][ratio]
                stats = np.array(statsraw)
                statslist = stats[stats[:, 0].argsort()]
                x = statslist[:, 0]
                y = statslist[:, 1]
                if (len(y) <= 2):
                    print ('WARNING ratio %s: only has %s datapoints x/y: %s/%s' % (ratio, len(y), x, y))
                sb.plot(x, y, '-^', linewidth=3, label=ratio, solid_capstyle='round', solid_joinstyle='round', aa=True)
                sb.set_xticks([float(i) for i in x])
            plt.legend(legendlist, loc='best')
            sb.invert_xaxis()
            if (not combograph):
                savepath = (((((path + '/') + build) + '-workload-') + workload) + '.png')
                print ('writing:' + savepath)
                fig.savefig(savepath)
                fig.clear()
        if combograph:
            savepath = (((path + '/') + build) + '-workload.png')
            print ('writing:' + savepath)
            fig.savefig(savepath)
            fig.clear()
        plt.close(fig)
    plt.close('all')
