def main():
    build_tag = None
    width = None
    height = None
    if (len(sys.argv) < 1):
        usage()
        exit((-1))
    path = sys.argv[1]
    if (not os.path.exists(path)):
        print path, 'does not exist'
        exit((-1))
    if (len(sys.argv) >= 3):
        build_tag = str(sys.argv[2])
    print sys.argv
    if (len(sys.argv) >= 4):
        width = int(sys.argv[3])
    if (len(sys.argv) >= 5):
        height = int(sys.argv[4])
    (stats, mindate, maxdate) = get_stats(STATS_SERVER, 21212)
    root_path = path
    filenames = []
    iorder = 0
    buckets = {}
    for data in stats:
        app = data['app']
        app = app.replace('/', '')
        workload_group = re.search('YCSB-Anticache-([A-Z]+)-Z(\\d+\\.\\d+)-(\\d:\\d)', app)
        workload = workload_group.group(1)
        zipfian = workload_group.group(2)
        ratio = workload_group.group(3)
        tps = data['tps']
        branch = data['branch']
        date = data['date']
        build = data['build']
        stats = [zipfian, tps]
        statslist = []
        if (build in buckets):
            if (ratio in buckets[build]):
                if (workload in buckets[build][ratio]):
                    statslist = buckets[build][ratio][workload]
                else:
                    buckets[build][ratio][workload] = {}
            else:
                buckets[build][ratio] = {}
                buckets[build][ratio][workload] = {}
        else:
            buckets[build] = {}
            buckets[build][ratio] = {}
            buckets[build][ratio][workload] = {}
        statslist.append(stats)
        buckets[build][ratio][workload] = statslist
    for build in buckets:
        location = 0
        subplotlocations = {}
        sblocation = 0
        numrows = len(buckets[build])
        fig = plt.figure(figsize=(70, 20))
        fig.suptitle('Zipfian Distribution', fontsize=28, fontweight='bold')
        for ratio in sorted(buckets[build]):
            if (ratio in subplotlocations):
                sblocation = subplotlocations[ratio]
            else:
                location = (location + 1)
                subplotlocations[ratio] = location
            sb = plt.subplot(1, numrows, subplotlocations[ratio])
            plt.xlabel('Zipfian', fontsize=20)
            plt.ylabel('TPS', fontsize=20)
            sb.set_title(('workload distribution: ' + ratio))
            sb.grid(True)
            legendlist = []
            for workload in sorted(buckets[build][ratio]):
                legendlist.append(workload)
                statsraw = buckets[build][ratio][workload]
                stats = np.array(statsraw)
                statslist = stats[stats[:, 0].argsort()]
                x = statslist[:, 0]
                y = statslist[:, 1]
                sb.plot(x, y, '-', linewidth=10, label=workload, solid_capstyle='round', solid_joinstyle='round', aa=True)
            plt.legend(legendlist, loc='best')
        fig.savefig((build + '.png'))
        fig.clear()
        plt.close(fig)
    plt.close('all')
