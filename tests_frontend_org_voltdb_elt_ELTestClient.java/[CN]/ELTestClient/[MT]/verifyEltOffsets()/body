{
  boolean retval=true;
  HashMap<Integer,Long> table_offsets=new HashMap<Integer,Long>();
  for (  ELConnection connection : m_elConnections.values()) {
    HashMap<Integer,Long> seen_responses=new HashMap<Integer,Long>();
    for (    AdvertisedDataSource source : connection.getDataSources()) {
      try {
        ELTProtoMessage poll=new ELTProtoMessage(source.partitionId(),source.tableId());
        poll.poll();
        connection.sendMessage(poll);
        ELTProtoMessage m=null;
        while (m == null || m.getTableId() != source.tableId() || m.getPartitionId() != source.partitionId()) {
          m=connection.nextMessage();
        }
        assert(m.isPollResponse());
        long offset=m.getAckOffset();
        Integer table_hash=m.getTableId() * 137 + m.getPartitionId();
        if (!table_offsets.containsKey(table_hash)) {
          table_offsets.put(table_hash,offset);
        }
 else {
          if (table_offsets.get(table_hash) != offset) {
            System.out.println("Mismatched ELT offset: " + offset);
            System.out.println("  Table ID: " + source.tableName());
            System.out.println("  Partition: " + source.partitionId());
            System.out.println("  Orig. offset: " + table_offsets.get(table_hash));
            retval=false;
          }
        }
        if (seen_responses.containsKey(table_hash)) {
          System.out.println("Saw duplicate response from connection: " + connection.getConnectionName());
          System.out.println("   for table: " + source.tableName() + ", "+ source.partitionId());
          retval=false;
        }
 else {
          seen_responses.put(table_hash,offset);
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        System.exit(1);
      }
    }
    if (seen_responses.entrySet().size() != connection.getDataSources().size()) {
      System.out.println("Didn't see enough responses from connection: " + connection.getConnectionName());
      retval=false;
    }
  }
  return retval;
}
