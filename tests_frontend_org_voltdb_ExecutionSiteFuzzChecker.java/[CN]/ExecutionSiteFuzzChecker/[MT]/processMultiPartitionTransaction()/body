{
  boolean valid=true;
  boolean done=false;
  while (!done && valid) {
    LogString curr_log=null;
    for (    Integer partition_id : m_blockedSets) {
      for (      SiteLog site_log : m_replicaSets.get(partition_id).values()) {
        System.out.println("LOG: " + partition_id + ", "+ site_log.getSiteId()+ ": "+ site_log.currentLog());
        if (curr_log == null) {
          curr_log=site_log.currentLog();
        }
 else {
          if (!site_log.currentLog().equals(curr_log)) {
            System.out.println("SOMETHING BARFED IN MULTI-PART");
            junit.framework.Assert.assertFalse(true);
            valid=false;
          }
        }
      }
    }
    ArrayList<Integer> sets_to_remove=new ArrayList<Integer>();
    for (    Integer partition_id : m_blockedSets) {
      for (      SiteLog site_log : m_replicaSets.get(partition_id).values()) {
        site_log.advanceLog();
        if (site_log.isDone()) {
          System.out.println("LOG DONE: " + site_log.getSiteId());
          sets_to_remove.add(partition_id);
          m_doneSets.add(partition_id);
          done=true;
        }
 else         if (site_log.currentLog().isTxnStart() && site_log.currentLog().isSinglePart()) {
          System.out.println("LOG UNBLOCKED: " + site_log.getSiteId());
          sets_to_remove.add(partition_id);
          m_unblockedSets.add(partition_id);
          done=true;
        }
 else {
          System.out.println("LOG ADVANCING: " + site_log.getSiteId());
        }
      }
    }
    for (    Integer part_id : sets_to_remove) {
      m_blockedSets.remove((Integer)part_id);
    }
  }
  return valid;
}
