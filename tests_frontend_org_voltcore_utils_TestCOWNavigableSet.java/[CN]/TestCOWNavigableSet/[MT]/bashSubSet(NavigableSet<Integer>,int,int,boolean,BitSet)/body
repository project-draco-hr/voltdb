{
  check(set,min,max,ascending,bs);
  check(set.descendingSet(),min,max,!ascending,bs);
  mutateSubSet(set,min,max,bs);
  check(set,min,max,ascending,bs);
  check(set.descendingSet(),min,max,!ascending,bs);
  if (max - min < 2)   return;
  int midPoint=(min + max) / 2;
  boolean incl=rnd.nextBoolean();
  NavigableSet<Integer> hm=set.headSet(midPoint,incl);
  if (ascending) {
    if (rnd.nextBoolean())     bashSubSet(hm,min,midPoint - (incl ? 0 : 1),true,bs);
 else     bashSubSet(hm.descendingSet(),min,midPoint - (incl ? 0 : 1),false,bs);
  }
 else {
    if (rnd.nextBoolean())     bashSubSet(hm,midPoint + (incl ? 0 : 1),max,false,bs);
 else     bashSubSet(hm.descendingSet(),midPoint + (incl ? 0 : 1),max,true,bs);
  }
  incl=rnd.nextBoolean();
  NavigableSet<Integer> tm=set.tailSet(midPoint,incl);
  if (ascending) {
    if (rnd.nextBoolean())     bashSubSet(tm,midPoint + (incl ? 0 : 1),max,true,bs);
 else     bashSubSet(tm.descendingSet(),midPoint + (incl ? 0 : 1),max,false,bs);
  }
 else {
    if (rnd.nextBoolean()) {
      bashSubSet(tm,min,midPoint - (incl ? 0 : 1),false,bs);
    }
 else {
      bashSubSet(tm.descendingSet(),min,midPoint - (incl ? 0 : 1),true,bs);
    }
  }
  int rangeSize=max - min + 1;
  int[] endpoints=new int[2];
  endpoints[0]=min + rnd.nextInt(rangeSize);
  endpoints[1]=min + rnd.nextInt(rangeSize);
  Arrays.sort(endpoints);
  boolean lowIncl=rnd.nextBoolean();
  boolean highIncl=rnd.nextBoolean();
  if (ascending) {
    NavigableSet<Integer> sm=set.subSet(endpoints[0],lowIncl,endpoints[1],highIncl);
    if (rnd.nextBoolean())     bashSubSet(sm,endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),true,bs);
 else     bashSubSet(sm.descendingSet(),endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),false,bs);
  }
 else {
    NavigableSet<Integer> sm=set.subSet(endpoints[1],highIncl,endpoints[0],lowIncl);
    if (rnd.nextBoolean())     bashSubSet(sm,endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),false,bs);
 else     bashSubSet(sm.descendingSet(),endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),true,bs);
  }
}
