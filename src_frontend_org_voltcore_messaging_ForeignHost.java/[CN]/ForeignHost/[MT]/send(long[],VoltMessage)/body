{
  if (destinations.length == 0) {
    return;
  }
  m_network.enqueue(new DeferredSerialization(){
    @Override public final void serialize(    final ByteBuffer buf) throws IOException {
      buf.putInt(buf.capacity() - 4);
      buf.putLong(message.m_sourceHSId);
      buf.putInt(destinations.length);
      for (int ii=0; ii < destinations.length; ii++) {
        buf.putLong(destinations[ii]);
      }
      message.flattenToBuffer(buf);
      buf.flip();
    }
    @Override public final void cancel(){
    }
    @Override public String toString(){
      return message.getClass().getName();
    }
    @Override public int getSerializedSize(){
      final int len=4 + 8 + 4+ 8 * destinations.length + message.getSerializedSize();
      return len;
    }
  }
);
  long current_time=EstTime.currentTimeMillis();
  long current_delta=current_time - m_lastMessageMillis.get();
  if (current_delta > 10 * 1000) {
    rateLimitedLogger.log("Have not received a message from host " + hostnameAndIPAndPort() + " for "+ (current_delta / 1000.0)+ " seconds",current_time);
  }
  if ((!m_closing && m_isUp) && (current_delta > m_deadHostTimeout)) {
    if (m_deadReportsCount.getAndIncrement() == 0) {
      hostLog.error("DEAD HOST DETECTED, hostname: " + hostnameAndIPAndPort());
      hostLog.info("\tcurrent time: " + current_time);
      hostLog.info("\tlast message: " + m_lastMessageMillis);
      hostLog.info("\tdelta (millis): " + current_delta);
      hostLog.info("\ttimeout value (millis): " + m_deadHostTimeout);
      VoltDB.dropStackTrace("Timed out foreign host " + hostnameAndIPAndPort() + " with delta "+ current_delta);
    }
    m_hostMessenger.reportForeignHostFailed(m_hostId);
  }
}
