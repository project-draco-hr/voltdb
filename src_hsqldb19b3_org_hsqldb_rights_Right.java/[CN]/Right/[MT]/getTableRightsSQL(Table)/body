{
  StringBuffer sb=new StringBuffer();
  if (isFull) {
    return Tokens.T_ALL;
  }
  if (isFullSelect) {
    sb.append(Tokens.T_SELECT);
    sb.append(',');
  }
 else   if (selectColumnSet != null) {
    sb.append(Tokens.T_SELECT);
    getColumnList(table,selectColumnSet,sb);
    sb.append(',');
  }
  if (isFullInsert) {
    sb.append(Tokens.T_INSERT);
    sb.append(',');
  }
 else   if (insertColumnSet != null) {
    sb.append(Tokens.T_INSERT);
    getColumnList(table,insertColumnSet,sb);
    sb.append(',');
  }
  if (isFullUpdate) {
    sb.append(Tokens.T_UPDATE);
    sb.append(',');
  }
 else   if (updateColumnSet != null) {
    sb.append(Tokens.T_UPDATE);
    getColumnList(table,updateColumnSet,sb);
    sb.append(',');
  }
  if (isFullDelete) {
    sb.append(Tokens.T_DELETE);
    sb.append(',');
  }
  if (isFullReferences) {
    sb.append(Tokens.T_REFERENCES);
    sb.append(',');
  }
 else   if (referencesColumnSet != null) {
    sb.append(Tokens.T_REFERENCES);
    sb.append(',');
  }
  if (isFullTrigger) {
    sb.append(Tokens.T_TRIGGER);
    sb.append(',');
  }
 else   if (triggerColumnSet != null) {
    sb.append(Tokens.T_TRIGGER);
    sb.append(',');
  }
  return sb.toString().substring(0,sb.length() - 1);
}
