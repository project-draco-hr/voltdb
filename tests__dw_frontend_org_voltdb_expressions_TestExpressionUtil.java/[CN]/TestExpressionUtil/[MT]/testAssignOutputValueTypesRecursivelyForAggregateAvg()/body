{
  AbstractExpression root=new AggregateExpression(ExpressionType.AGGREGATE_AVG);
  AbstractExpression op=new TupleValueExpression();
  root.setLeft(op);
  op.setValueType(VoltType.FLOAT);
  ExpressionUtil.finalizeValueTypes(root);
  assertEquals(VoltType.FLOAT,root.getValueType());
  op.setValueType(VoltType.INTEGER);
  ExpressionUtil.finalizeValueTypes(root);
  assertEquals(VoltType.INTEGER,root.getValueType());
  op.setValueType(VoltType.DECIMAL);
  ExpressionUtil.finalizeValueTypes(root);
  assertEquals(VoltType.DECIMAL,root.getValueType());
  op=new OperatorExpression();
  root.setLeft(op);
  AbstractExpression left=new TupleValueExpression();
  AbstractExpression right=new TupleValueExpression();
  op.setLeft(left);
  op.setRight(right);
  left.setValueType(VoltType.FLOAT);
  right.setValueType(VoltType.INTEGER);
  ExpressionUtil.finalizeValueTypes(root);
  assertEquals(VoltType.FLOAT,root.getValueType());
  left.setValueType(VoltType.TINYINT);
  right.setValueType(VoltType.INTEGER);
  ExpressionUtil.finalizeValueTypes(root);
  assertEquals(VoltType.BIGINT,root.getValueType());
  left.setValueType(VoltType.DECIMAL);
  right.setValueType(VoltType.DECIMAL);
  ExpressionUtil.finalizeValueTypes(root);
  assertEquals(VoltType.DECIMAL,root.getValueType());
}
