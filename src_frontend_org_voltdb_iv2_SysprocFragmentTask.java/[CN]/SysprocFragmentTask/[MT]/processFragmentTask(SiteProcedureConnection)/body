{
  final FragmentResponseMessage currentFragResponse=new FragmentResponseMessage(m_fragmentMsg,m_initiator.getHSId());
  currentFragResponse.setStatus(FragmentResponseMessage.SUCCESS,null);
  for (int frag=0; frag < m_fragmentMsg.getFragmentCount(); frag++) {
    final long fragmentId=VoltSystemProcedure.hashToFragId(m_fragmentMsg.getPlanHash(frag));
    ParameterSet params=m_fragmentMsg.getParameterSetForFragment(frag);
    try {
      final DependencyPair dep=siteConnection.executeSysProcPlanFragment(m_txnState,m_inputDeps,fragmentId,params);
      if (dep != null) {
        currentFragResponse.addDependency(dep.depId,dep.dependency);
      }
    }
 catch (    final EEException e) {
      hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),new Object[]{Encoder.hexEncode(m_fragmentMsg.getFragmentPlan(frag))},e);
      currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
      break;
    }
catch (    final SQLException e) {
      hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),new Object[]{Encoder.hexEncode(m_fragmentMsg.getFragmentPlan(frag))},e);
      currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
      break;
    }
catch (    final VoltAbortException e) {
      hostLog.warn("Error running system procedure plan fragment",e);
      currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,null);
      break;
    }
  }
  return currentFragResponse;
}
