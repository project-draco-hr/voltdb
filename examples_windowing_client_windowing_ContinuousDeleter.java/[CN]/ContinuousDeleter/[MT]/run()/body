{
  AtomicBoolean unfinished=new AtomicBoolean(false);
  long yieldTimeMs=app.config.deleteyieldtime;
  try {
    TimestampType dateTarget=app.getTargetDate();
    long rowTarget=app.getTargetRowsPerPartition();
    ClientResponseWithPartitionKey[] responses;
    if (app.config.historyseconds > 0) {
      responses=app.client.callAllPartitionProcedure("DeleteAfterDate",dateTarget,app.config.deletechunksize);
    }
 else {
      responses=app.client.callAllPartitionProcedure("DeleteOldestToTarget",rowTarget,app.config.deletechunksize);
    }
    app.updatePartitionCount(responses.length);
    for (    ClientResponseWithPartitionKey resp : responses) {
      if (resp.response.getStatus() == ClientResponse.SUCCESS) {
        long tuplesDeleted=resp.response.getResults()[0].asScalarLong();
        app.addToDeletedTuples(tuplesDeleted);
        if (tuplesDeleted >= app.config.deletechunksize) {
          unfinished.set(true);
        }
      }
 else {
        failureCount.incrementAndGet();
      }
    }
    if (unfinished.get()) {
      yieldTimeMs=0;
    }
  }
 catch (  Exception e) {
    failureCount.incrementAndGet();
  }
catch (  Throwable t) {
    t.printStackTrace();
  }
 finally {
    app.scheduler.schedule(this,yieldTimeMs,TimeUnit.MILLISECONDS);
  }
}
