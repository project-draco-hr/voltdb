{
  String simpleSchema="create table blah (" + "ival bigint default 0 not null, " + "PRIMARY KEY(ival));";
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(simpleSchema);
  builder.addProcedures(CrashVoltDBProc.class);
  LocalCluster cluster=new LocalCluster("crash.jar",2,1,0,BackendTarget.NATIVE_EE_JNI);
  cluster.setHasLocalServer(false);
  boolean success=cluster.compile(builder);
  assert(success);
  cluster.startUp(true);
  String voltDbFilePrefix=cluster.getSubRoots().get(0).getCanonicalPath();
  File voltDbRoot=new File(voltDbFilePrefix,builder.getPathToVoltRoot().getCanonicalPath());
  String voltDbRootPath=voltDbRoot.getCanonicalPath();
  final String listener=cluster.getListenerAddresses().get(0);
  final Client client=ClientFactory.createClient();
  client.createConnection(listener);
  try {
    client.callProcedure("CrashVoltDBProc");
  }
 catch (  Exception e) {
  }
  collectionTgz=new File(voltDbRoot,prefix + ".tgz");
  Collector.main(new String[]{voltDbRootPath,prefix,"","","","true","false","false","true","false"});
  assertTrue(collectionTgz.exists());
  client.close();
  cluster.shutDown();
  collectionFileDecompressed=new File(voltDbRoot,prefix);
  TarReader tarReader=new TarReader(collectionTgz,TarReader.OVERWRITE_MODE,null,null,collectionFileDecompressed);
  tarReader.read();
  assertTrue(collectionFileDecompressed.exists());
  File voltdbCrashDir=new File(collectionFileDecompressed,"voltdb_crash");
  assertTrue(voltdbCrashDir.exists());
  assertTrue(voltdbCrashDir.listFiles().length > 0);
  for (  File file : voltdbCrashDir.listFiles()) {
    assertTrue(file.getName().startsWith("voltdb_crash") && file.getName().endsWith(".txt"));
  }
}
