{
  PatternLayout layout=new PatternLayout("%d   %-5p [%t] %c: %m%n");
  DailyRollingFileAppender appender=new DailyRollingFileAppender(layout,"log/volt.log","'.'yyyy-MM-dd");
  Logger.getRootLogger().addAppender(appender);
  String ddl="CREATE TABLE WAREHOUSE (" + "W_ID INTEGER DEFAULT '0' NOT NULL, " + "W_NAME VARCHAR(16) DEFAULT NULL, "+ "PRIMARY KEY (W_ID)"+ ");";
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(ddl);
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("collector.jar"));
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("collector.xml"));
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=Configuration.getPathToCatalogForTest("collector.jar");
  config.m_pathToDeployment=Configuration.getPathToCatalogForTest("collector.xml");
  ServerThread localServer=new ServerThread(config);
  localServer.start();
  localServer.waitForInitialization();
  voltDbRoot=builder.getPathToVoltRoot();
  voltDbRootPath=voltDbRoot.getCanonicalPath();
  pid=CLibrary.getpid();
  String[] cmd={"jmap","-dump:file=/tmp/java_pid" + pid + ".hprof",Integer.toString(pid)};
  Process p=Runtime.getRuntime().exec(cmd);
  p.waitFor();
  TimestampType ts=new TimestampType(new java.util.Date());
  CatalogContext catalogContext=VoltDB.instance().getCatalogContext();
  String root=catalogContext != null ? catalogContext.cluster.getVoltroot() + File.separator : "";
  PrintWriter writer=new PrintWriter(root + "voltdb_crash" + ts.toString().replace(' ','-')+ ".txt");
  writer.println("Time: " + ts);
  writer.close();
  writer=new PrintWriter(System.getProperty("user.dir") + File.separator + "hs_err_pid"+ pid+ ".log");
  writer.println("#");
  writer.println("# A fatal error has been detected by the Java Runtime Environment:");
  writer.println("#");
  writer.close();
  collectionTgz=new File(voltDbRoot,prefix + ".tgz");
  Collector.main(new String[]{voltDbRootPath,prefix,"","","","true","false","false","true","false"});
  assertTrue(collectionTgz.exists());
  collectionFileDecompressed=new File(voltDbRoot,prefix);
  TarReader tarReader=new TarReader(collectionTgz,TarReader.OVERWRITE_MODE,null,null,collectionFileDecompressed);
  tarReader.read();
  assertTrue(collectionFileDecompressed.exists());
}
