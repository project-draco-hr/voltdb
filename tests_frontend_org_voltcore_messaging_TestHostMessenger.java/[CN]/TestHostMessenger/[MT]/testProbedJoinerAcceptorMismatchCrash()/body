{
  VoltDB.ignoreCrash=true;
  MeshProber.Builder jcb=MeshProber.builder().coordinators(coordinators(2)).hostCount(3).startAction(StartAction.PROBE).nodeState(NodeState.INITIALIZING).kfactor(1).paused(false).bare(true);
  MeshProber jc1=jcb.build();
  JoinAcceptor jc2=new JoinAcceptor(){
    @Override public void detract(    Set<Integer> hostIds){
    }
    @Override public void detract(    int hostId){
    }
    @Override public void accrue(    Map<Integer,JSONObject> jos){
    }
    @Override public void accrue(    int hostId,    JSONObject jo){
    }
  }
;
  HostMessenger hm1=createHostMessenger(0,jcb.prober(jc1).build(),false);
  HostMessenger hm2=createHostMessenger(1,jcb.prober(jc1).build(),false);
  HostMessenger hm3=createHostMessenger(2,jc2,false);
  final AtomicReference<Exception> exception=new AtomicReference<Exception>();
  HostMessengerThread hm1Start=new HostMessengerThread(hm1,exception);
  HostMessengerThread hm2Start=new HostMessengerThread(hm2,exception);
  hm1Start.start();
  hm2Start.start();
  hm1Start.join();
  hm2Start.join();
  if (exception.get() != null) {
    fail(exception.get().toString());
  }
  try {
    hm3.start();
    fail("did not crash on whole cluster rejoin attempt");
  }
 catch (  AssertionError pass) {
    assertTrue(VoltDB.wasCrashCalled);
    assertTrue(VoltDB.crashMessage.contains("is incompatible with this node verion"));
  }
}
