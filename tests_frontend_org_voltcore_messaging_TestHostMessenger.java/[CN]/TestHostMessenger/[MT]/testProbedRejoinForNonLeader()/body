{
  NodeStateRef upNodesState=new NodeStateRef(NodeState.INITIALIZING);
  MeshProber.Builder jcb=MeshProber.builder().coordinators(coordinators(2)).hostCount(3).startAction(StartAction.PROBE).nodeStateSupplier(upNodesState).kfactor(1).paused(false).bare(true);
  HostMessenger hm1=createHostMessenger(0,jcb.build(),false);
  HostMessenger hm2=createHostMessenger(1,jcb.build(),false);
  HostMessenger hm3=createHostMessenger(2,jcb.build(),false);
  final AtomicReference<Exception> exception=new AtomicReference<Exception>();
  HostMessengerThread hm1Start=new HostMessengerThread(hm1,exception);
  HostMessengerThread hm3Start=new HostMessengerThread(hm3,exception);
  hm1Start.start();
  hm3Start.start();
  hm2.start();
  hm1Start.join();
  hm3Start.join();
  if (exception.get() != null) {
    fail(exception.get().toString());
  }
  Determination dtm=prober(hm1).waitForDetermination();
  assertEquals(StartAction.CREATE,dtm.startAction);
  assertEquals(3,dtm.hostCount);
  assertEquals(dtm,prober(hm2).waitForDetermination());
  assertEquals(dtm,prober(hm3).waitForDetermination());
  assertTrue(upNodesState.compareAndSet(NodeState.INITIALIZING,NodeState.UP));
  hm2.shutdown();
  jcb.nodeState(NodeState.INITIALIZING).bare(false).paused(true);
  hm2=createHostMessenger(1,jcb.build(),true);
  dtm=prober(hm2).waitForDetermination();
  assertEquals(StartAction.LIVE_REJOIN,dtm.startAction);
  assertEquals(3,dtm.hostCount);
  assertFalse(hm2.isPaused());
  List<String> root1=hm1.getZK().getChildren("/",false);
  List<String> root2=hm2.getZK().getChildren("/",false);
  List<String> root3=hm3.getZK().getChildren("/",false);
  assertTrue(root1.equals(root2));
  assertTrue(root2.equals(root3));
  List<String> hostids1=hm1.getZK().getChildren(CoreZK.hostids,false);
  List<String> hostids2=hm2.getZK().getChildren(CoreZK.hostids,false);
  List<String> hostids3=hm3.getZK().getChildren(CoreZK.hostids,false);
  assertTrue(hostids1.equals(hostids2));
  assertTrue(hostids2.equals(hostids3));
}
