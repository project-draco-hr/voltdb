{
  stringer.key(Members.TYPE.name()).value(m_type.toString());
  stringer.key(Members.VALUE_TYPE.name()).value(m_valueType == null ? null : m_valueType.name());
  stringer.key(Members.VALUE_SIZE.name()).value(m_valueSize);
  if (m_left != null) {
    assert(m_left instanceof JSONString);
    stringer.key(Members.LEFT.name()).value(m_left);
  }
  if (m_right != null) {
    assert(m_right instanceof JSONString);
    stringer.key(Members.RIGHT.name()).value(m_right);
  }
  if (m_args != null && m_args.size() > 0) {
    stringer.key(Members.ARGS.name()).array();
    for (    AbstractExpression argument : m_args) {
      assert(argument instanceof JSONString);
      stringer.value(argument);
    }
    stringer.endArray();
  }
}
