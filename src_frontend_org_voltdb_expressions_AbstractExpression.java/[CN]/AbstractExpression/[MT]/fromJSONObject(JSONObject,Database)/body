{
  ExpressionType type=ExpressionType.valueOf(obj.getString(Members.TYPE.name()));
  AbstractExpression expr;
  try {
    expr=type.getExpressionClass().newInstance();
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
    return null;
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
    return null;
  }
  expr.m_type=type;
  expr.m_valueType=VoltType.typeFromString(obj.getString(Members.VALUE_TYPE.name()));
  expr.m_valueSize=obj.getInt(Members.VALUE_SIZE.name());
  JSONObject leftObject=null;
  if (!obj.isNull(Members.LEFT.name())) {
    try {
      leftObject=obj.getJSONObject(Members.LEFT.name());
    }
 catch (    JSONException e) {
    }
  }
  if (leftObject != null) {
    expr.m_left=AbstractExpression.fromJSONObject(obj.getJSONObject(Members.LEFT.name()),db);
  }
  JSONObject rightObject=null;
  if (!obj.isNull(Members.RIGHT.name())) {
    try {
      rightObject=obj.getJSONObject(Members.RIGHT.name());
    }
 catch (    JSONException e) {
    }
  }
  if (rightObject != null) {
    expr.m_right=AbstractExpression.fromJSONObject(obj.getJSONObject(Members.RIGHT.name()),db);
  }
  if (!obj.isNull(Members.ARGS.name())) {
    ArrayList<AbstractExpression> arguments=new ArrayList<AbstractExpression>();
    try {
      JSONArray argsObject=obj.getJSONArray(Members.ARGS.name());
      if (argsObject != null) {
        for (int i=0; i < argsObject.length(); i++) {
          JSONObject argObject=argsObject.getJSONObject(i);
          if (argObject != null) {
            arguments.add(AbstractExpression.fromJSONObject(argObject,db));
          }
        }
      }
    }
 catch (    JSONException e) {
    }
    expr.setArgs(arguments);
  }
  expr.loadFromJSONObject(obj,db);
  return expr;
}
