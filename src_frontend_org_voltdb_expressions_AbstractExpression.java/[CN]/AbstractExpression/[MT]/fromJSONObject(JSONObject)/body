{
  ExpressionType type=ExpressionType.valueOf(obj.getString(Members.TYPE.name()));
  AbstractExpression expr;
  try {
    expr=type.getExpressionClass().newInstance();
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
    return null;
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
    return null;
  }
  expr.m_type=type;
  expr.m_valueType=VoltType.typeFromString(obj.getString(Members.VALUE_TYPE.name()));
  expr.m_valueSize=obj.getInt(Members.VALUE_SIZE.name());
  expr.m_left=AbstractExpression.fromJSONChild(obj,Members.LEFT.name());
  expr.m_right=AbstractExpression.fromJSONChild(obj,Members.RIGHT.name());
  if (!obj.isNull(Members.ARGS.name())) {
    JSONArray jarray=obj.getJSONArray(Members.ARGS.name());
    ArrayList<AbstractExpression> arguments=new ArrayList<AbstractExpression>();
    loadFromJSONArray(arguments,jarray);
    expr.setArgs(arguments);
  }
  expr.loadFromJSONObject(obj);
  return expr;
}
