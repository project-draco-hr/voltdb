{
  Integer ii=aggTableIndexMap.get(this);
  if (ii != null) {
    ParsedColInfo col=indexToColumnMap.get(ii);
    TupleValueExpression tve=new TupleValueExpression(col.tableName,col.tableAlias,col.columnName,col.alias,ii);
    tve.setTypeSizeBytes(getValueType(),getValueSize(),getInBytes());
    if (this instanceof TupleValueExpression) {
      tve.setOrigStmtId(((TupleValueExpression)this).getOrigStmtId());
    }
    if (hasAnySubexpressionOfClass(AggregateExpression.class))     tve.setHasAggregate(true);
    return tve;
  }
  AbstractExpression lnode=null, rnode=null;
  ArrayList<AbstractExpression> newArgs=null;
  if (m_left != null) {
    lnode=m_left.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
  }
  if (m_right != null) {
    rnode=m_right.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
  }
  boolean changed=false;
  if (m_args != null) {
    newArgs=new ArrayList<AbstractExpression>();
    for (    AbstractExpression expr : m_args) {
      AbstractExpression ex=expr.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
      newArgs.add(ex);
      if (ex != expr) {
        changed=true;
      }
    }
  }
  if (m_left != lnode || m_right != rnode || changed) {
    AbstractExpression resExpr=(AbstractExpression)this.clone();
    resExpr.setLeft(lnode);
    resExpr.setRight(rnode);
    resExpr.setArgs(newArgs);
    return resExpr;
  }
  return this;
}
