{
  UniqueIdGenerator.Clock fakeClock=new UniqueIdGenerator.Clock(){
    long currentTime=2000;
    public boolean haveGoneBack=false;
    @Override public long get(){
      currentTime++;
      return currentTime;
    }
    @Override public void sleep(    long millis) throws InterruptedException {
      if (millis < 0) {
        throw new IllegalArgumentException();
      }
      currentTime+=millis;
    }
  }
;
  tim=new UniqueIdGenerator(0,0,fakeClock);
  long greatestSeen=UniqueIdGenerator.makeIdFromComponents(500000,21,0);
  tim.updateMostRecentlyGeneratedUniqueId(greatestSeen);
  assertTrue(tim.getNextUniqueId() > greatestSeen);
  long last=0;
  for (int ii=0; ii < 60000; ii++) {
    last=tim.getNextUniqueId();
  }
  assertTrue(last > greatestSeen);
}
