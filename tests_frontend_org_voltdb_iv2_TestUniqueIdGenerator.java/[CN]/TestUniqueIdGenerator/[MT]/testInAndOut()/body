{
  long ts1=1267732596224L;
  long seq1=2;
  long init1=6;
  long txnId1=UniqueIdGenerator.makeIdFromComponents(ts1,seq1,init1);
  System.out.printf("%20d : %s\n",txnId1,UniqueIdGenerator.toBitString(txnId1));
  assertEquals(ts1,UniqueIdGenerator.getTimestampFromUniqueId(txnId1));
  assertEquals(seq1,UniqueIdGenerator.getSequenceNumberFromUniqueId(txnId1));
  assertEquals(init1,UniqueIdGenerator.getPartitionIdFromUniqueId(txnId1));
  long ts2=1267732596224L;
  long seq2=4;
  long init2=6;
  long txnId2=UniqueIdGenerator.makeIdFromComponents(ts2,seq2,init2);
  System.out.printf("%20d : %s\n",txnId2,UniqueIdGenerator.toBitString(txnId2));
  assertEquals(ts2,UniqueIdGenerator.getTimestampFromUniqueId(txnId2));
  assertEquals(seq2,UniqueIdGenerator.getSequenceNumberFromUniqueId(txnId2));
  assertEquals(init2,UniqueIdGenerator.getPartitionIdFromUniqueId(txnId2));
  assertTrue(txnId2 > txnId1);
  System.out.printf("%d > %d\n",txnId1,txnId2);
}
