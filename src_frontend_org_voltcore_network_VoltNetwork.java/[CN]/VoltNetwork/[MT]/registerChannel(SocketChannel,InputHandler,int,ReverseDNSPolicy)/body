{
  channel.configureBlocking(false);
  channel.socket().setKeepAlive(true);
  Callable<Connection> registerTask=new Callable<Connection>(){
    @Override public Connection call() throws Exception {
      final VoltPort port=new VoltPort(VoltNetwork.this,handler,(InetSocketAddress)channel.socket().getRemoteSocketAddress(),m_pool);
      port.registering();
      if (dns != ReverseDNSPolicy.NONE) {
        port.resolveHostname(dns == ReverseDNSPolicy.SYNCHRONOUS);
      }
      try {
        SelectionKey key=channel.register(m_selector,interestOps,null);
        port.setKey(key);
        port.registered();
        key.attach(port);
        return port;
      }
  finally {
        m_ports.add(port);
        m_numPorts.incrementAndGet();
      }
    }
  }
;
  FutureTask<Connection> ft=new FutureTask<Connection>(registerTask);
  m_tasks.offer(ft);
  m_selector.wakeup();
  try {
    return ft.get();
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
