{
  final Cluster cluster=catalogContext.catalog.getClusters().get("cluster");
  final Database db=cluster.getDatabases().get("database");
  final CatalogMap<Connector> connectors=db.getConnectors();
  updateProcessorConfig(connectors);
  if (m_processorConfig.size() == 0) {
    m_lastNonEnabledGeneration=catalogContext.m_uniqueId;
    return;
  }
  File exportOverflowDirectory=new File(catalogContext.cluster.getExportoverflow());
  final int numOfReplicas=catalogContext.getDeployment().getCluster().getKfactor();
  ExportGeneration newGeneration=null;
  try {
    newGeneration=new ExportGeneration(catalogContext.m_uniqueId,exportOverflowDirectory,false);
    newGeneration.setGenerationDrainRunnable(new GenerationDrainRunnable(newGeneration));
    newGeneration.initializeGenerationFromCatalog(connectors,m_hostId,m_messenger,partitions);
    m_generations.put(catalogContext.m_uniqueId,newGeneration);
  }
 catch (  IOException e1) {
    VoltDB.crashLocalVoltDB("Error processing catalog update in export system",true,e1);
  }
  if (m_processor.get() == null) {
    exportLog.info("First export table created processor will be initialized: " + m_loaderClass);
    createInitialExportProcessor(catalogContext,connectors,false,partitions,false);
  }
}
