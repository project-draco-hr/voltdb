{
  try {
    exportLog.info("Creating connector " + m_loaderClass);
    ExportDataProcessor newProcessor=null;
    final Class<?> loaderClass=Class.forName(m_loaderClass);
    newProcessor=(ExportDataProcessor)loaderClass.newInstance();
    newProcessor.addLogger(exportLog);
    newProcessor.setProcessorConfig(m_processorConfig);
    m_processor.set(newProcessor);
    File exportOverflowDirectory=new File(catalogContext.cluster.getExportoverflow());
    if (startup) {
      initializePersistedGenerations(exportOverflowDirectory,catalogContext,conn);
    }
    if (startup) {
      final ExportGeneration currentGeneration=new ExportGeneration(catalogContext.m_uniqueId,exportOverflowDirectory,isRejoin);
      currentGeneration.setGenerationDrainRunnable(new GenerationDrainRunnable(currentGeneration));
      currentGeneration.initializeGenerationFromCatalog(conn,m_hostId,m_messenger,partitions);
      if (!m_generations.isEmpty()) {
        if (m_generations.containsKey(catalogContext.m_uniqueId)) {
          exportLog.info("Persisted export generation with same timestamp from generation from catalog exists. Catalog generation will be used.");
        }
      }
      m_generations.put(catalogContext.m_uniqueId,currentGeneration);
    }
    final ExportGeneration nextGeneration=m_generations.firstEntry().getValue();
    newProcessor.setExportGeneration(nextGeneration);
    newProcessor.readyForData();
    if (startup) {
      if (nextGeneration.isDiskBased()) {
        nextGeneration.kickOffLeaderElection();
      }
    }
 else {
      if (nextGeneration.isDiskBased()) {
        nextGeneration.kickOffLeaderElection();
      }
 else {
        for (        Integer partitionId : m_masterOfPartitions) {
          nextGeneration.acceptMastershipTask(partitionId);
        }
      }
    }
  }
 catch (  final ClassNotFoundException e) {
    exportLog.l7dlog(Level.ERROR,LogKeys.export_ExportManager_NoLoaderExtensions.name(),e);
    Throwables.propagate(e);
  }
catch (  final Exception e) {
    Throwables.propagate(e);
  }
}
