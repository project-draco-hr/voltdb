{
  m_hostId=myHostId;
  m_messenger=messenger;
  final Cluster cluster=catalogContext.catalog.getClusters().get("cluster");
  final Database db=cluster.getDatabases().get("database");
  final Connector conn=db.getConnectors().get("0");
  if (conn == null) {
    exportLog.info("System is not using any export functionality.");
    return;
  }
  if (conn.getEnabled() == false) {
    exportLog.info("Export is disabled by user configuration.");
    return;
  }
  updateProcessorConfig(conn);
  exportLog.info(String.format("Export is enabled and can overflow to %s.",cluster.getExportoverflow()));
  m_loaderClass=conn.getLoaderclass();
  try {
    exportLog.info("Creating connector " + m_loaderClass);
    ExportDataProcessor newProcessor=null;
    final Class<?> loaderClass=Class.forName(m_loaderClass);
    newProcessor=(ExportDataProcessor)loaderClass.newInstance();
    m_processor.set(newProcessor);
    newProcessor.addLogger(exportLog);
    File exportOverflowDirectory=new File(catalogContext.cluster.getExportoverflow());
    initializePersistedGenerations(exportOverflowDirectory,catalogContext,conn);
    ExportGeneration currentGeneration=new ExportGeneration(catalogContext.m_timestamp,m_onGenerationDrained,exportOverflowDirectory);
    currentGeneration.initializeGenerationFromCatalog(conn,m_hostId,messenger);
    m_generations.put(catalogContext.m_timestamp,currentGeneration);
    newProcessor.setExportGeneration(m_generations.firstEntry().getValue());
    newProcessor.setProcessorConfig(m_processorConfig);
    newProcessor.readyForData();
  }
 catch (  final ClassNotFoundException e) {
    exportLog.l7dlog(Level.ERROR,LogKeys.export_ExportManager_NoLoaderExtensions.name(),e);
    throw new ExportManager.SetupException(e);
  }
catch (  final Exception e) {
    throw new ExportManager.SetupException(e);
  }
}
