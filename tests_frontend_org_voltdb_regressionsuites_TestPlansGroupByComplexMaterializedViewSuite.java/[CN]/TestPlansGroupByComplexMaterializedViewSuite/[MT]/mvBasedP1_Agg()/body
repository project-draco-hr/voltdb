{
  System.out.println("Test MV partition agg query...");
  VoltTable vt=null;
  Client client=this.getClient();
  loadTableForMVFixSuite();
  String[] tbs={"V_P1","V_P1_ABS","V_P2","V_R4"};
  for (  String tb : tbs) {
    vt=client.callProcedure("@AdHoc","Select count(*) from " + tb).getResults()[0];
    assertEquals(4,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select sum(V_G1) from " + tb).getResults()[0];
    assertEquals(90,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select sum(V_G1) / 2 from " + tb).getResults()[0];
    assertEquals(45,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select sum(distinct V_G1) from " + tb).getResults()[0];
    assertEquals(60,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select MAX(V_G1), MAX(v_sum_age), " + "MIN(v_sum_rent) from " + tb).getResults()[0];
    validateTableOfLongs(vt,new long[][]{{30,101,8}});
    vt=client.callProcedure("@AdHoc","Select sum(V_sum_rent) from " + tb).getResults()[0];
    assertEquals(95,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select max(V_sum_rent) from " + tb).getResults()[0];
    assertEquals(37,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select min(V_sum_rent) from " + tb).getResults()[0];
    assertEquals(8,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select count(V_sum_rent) from " + tb).getResults()[0];
    assertEquals(4,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select avg(V_sum_rent) from " + tb).getResults()[0];
    assertEquals(23,vt.asScalarLong());
    if (!isHSQL()) {
      vt=client.callProcedure("@AdHoc","Select sum(V_sum_age) + 5 from " + tb).getResults()[0];
      assertEquals(260,vt.asScalarLong());
    }
    vt=client.callProcedure("@AdHoc","Select avg(V_sum_age) from " + tb).getResults()[0];
    assertEquals(63,vt.asScalarLong());
    vt=client.callProcedure("@AdHoc","Select V_G1, sum(V_CNT), max(v_sum_age), min(v_sum_rent) " + "from " + tb + " group by V_G1 "+ "order by V_G1").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{10,4,101,37},{20,2,45,13},{30,4,85,8}});
    vt=client.callProcedure("@AdHoc","Select V_G1, V_G2, sum(V_CNT), min(v_sum_age) " + "from " + tb + " group by V_G1, V_G2 "+ "order by V_G1, V_G2").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{10,1,4,101},{20,2,2,45},{30,2,1,24},{30,3,3,85}});
    vt=client.callProcedure("@AdHoc","Select V_sum_rent, sum(V_CNT), max(v_sum_age) " + "from " + tb + " group by V_sum_rent order by V_sum_rent").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{8,1,24},{13,2,45},{37,7,101}});
    vt=client.callProcedure("@AdHoc","Select V_G1, V_sum_rent, sum(V_CNT), max(v_sum_age) " + "from " + tb + " group by V_G1, V_sum_rent "+ "order by V_G1, V_sum_rent").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{10,37,4,101},{20,13,2,45},{30,8,1,24},{30,37,3,85}});
    vt=client.callProcedure("@AdHoc","Select V_G1/V_G2, sum(V_CNT), min(v_sum_rent) " + "from " + tb + " group by V_G1/V_G2 "+ "order by V_G1/V_G2").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{10,9,13},{15,1,8}});
    vt=client.callProcedure("@AdHoc","Select V_G1, sum(V_sum_age)/sum(V_CNT), " + "sum(V_sum_rent)/sum(V_CNT), sum(V_sum_age/V_sum_rent) + 1, min(v_sum_age) " + "from " + tb + " group by V_G1 "+ "order by V_G1").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{10,25,9,3,101},{20,22,6,4,45},{30,27,11,6,24}});
  }
}
