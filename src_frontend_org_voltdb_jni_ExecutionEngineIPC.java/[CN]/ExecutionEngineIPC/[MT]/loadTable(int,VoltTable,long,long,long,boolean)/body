{
  final FastSerializer fser=new FastSerializer();
  try {
    fser.writeObject(table);
  }
 catch (  final IOException e) {
    throw new RuntimeException(e);
  }
  m_data.clear();
  m_data.putInt(Commands.LoadTable.m_id);
  m_data.putInt(tableId);
  m_data.putLong(txnId);
  m_data.putLong(lastCommittedTxnId);
  m_data.putLong(undoToken);
  if (allowELT)   m_data.putShort((short)1);
 else   m_data.putShort((short)0);
  final ByteBuffer tableBytes=fser.getBuffer();
  if (m_data.remaining() < tableBytes.remaining()) {
    m_data.flip();
    final ByteBuffer newBuffer=ByteBuffer.allocate(m_data.remaining() + tableBytes.remaining());
    newBuffer.rewind();
    newBuffer.put(m_data);
    m_data=newBuffer;
  }
  m_data.put(tableBytes);
  try {
    m_data.flip();
    m_connection.write();
  }
 catch (  final Exception e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  int result=ExecutionEngine.ERRORCODE_ERROR;
  try {
    result=m_connection.readStatusByte();
  }
 catch (  final IOException e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  if (result != ExecutionEngine.ERRORCODE_SUCCESS) {
    throw new EEException(result);
  }
}
