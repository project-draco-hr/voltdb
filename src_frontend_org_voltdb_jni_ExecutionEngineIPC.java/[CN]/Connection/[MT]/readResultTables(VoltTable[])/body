{
  final ByteBuffer resultTablesLengthBytes=ByteBuffer.allocate(4);
  while (resultTablesLengthBytes.hasRemaining()) {
    int read=m_socketChannel.read(resultTablesLengthBytes);
    if (read == -1) {
      throw new EOFException();
    }
  }
  resultTablesLengthBytes.flip();
  final int resultTablesLength=resultTablesLengthBytes.getInt();
  final ByteBuffer dirtyBytes=ByteBuffer.allocate(1);
  while (dirtyBytes.hasRemaining()) {
    int read=m_socketChannel.read(dirtyBytes);
    if (read == -1) {
      throw new EOFException();
    }
  }
  dirtyBytes.flip();
  final boolean dirty=dirtyBytes.get() > 0;
  if (dirty)   m_dirty=true;
  if (resultTablesLength <= 0)   return;
  final ByteBuffer resultTablesBuffer=ByteBuffer.allocate(resultTablesLength);
  while (resultTablesBuffer.hasRemaining()) {
    int read=m_socketChannel.read(resultTablesBuffer);
    if (read == -1) {
      throw new EOFException();
    }
  }
  resultTablesBuffer.flip();
  for (int ii=0; ii < tables.length; ii++) {
    final int dependencyCount=resultTablesBuffer.getInt();
    assert(dependencyCount == 1);
    resultTablesBuffer.getInt();
    tables[ii]=PrivateVoltTableFactory.createVoltTableFromSharedBuffer(resultTablesBuffer);
  }
}
