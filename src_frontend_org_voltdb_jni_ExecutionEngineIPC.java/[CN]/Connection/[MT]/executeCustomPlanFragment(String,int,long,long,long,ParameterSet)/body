{
  final FastSerializer fser=new FastSerializer();
  final FastSerializer fser2=new FastSerializer();
  try {
    fser.writeString(plan);
    params.writeExternal(fser2);
  }
 catch (  final IOException exception) {
    throw new RuntimeException(exception);
  }
  m_data.clear();
  m_data.putInt(Commands.CustomPlanFragment.m_id);
  m_data.putLong(txnId);
  m_data.putLong(lastCommittedTxnId);
  m_data.putLong(undoQuantumToken);
  m_data.putInt(0);
  m_data.putInt(inputDepId);
  ByteBuffer fragBuf=fser.getBuffer();
  ByteBuffer paramBuf=fser2.getBuffer();
  fragBuf.position(4);
  m_data.putInt(fragBuf.remaining());
  m_data.putInt(paramBuf.remaining() - 2);
  m_data.putShort(paramBuf.getShort());
  m_data.put(fragBuf);
  m_data.put(paramBuf);
  try {
    m_data.flip();
    m_connection.write();
  }
 catch (  final Exception e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  int result=ExecutionEngine.ERRORCODE_ERROR;
  try {
    result=m_connection.readStatusByte();
  }
 catch (  final IOException e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  if (result == ExecutionEngine.ERRORCODE_SUCCESS) {
    final VoltTable resultTables[]=new VoltTable[1];
    resultTables[0]=PrivateVoltTableFactory.createUninitializedVoltTable();
    try {
      m_connection.readResultTables(resultTables);
    }
 catch (    final IOException e) {
      throw new EEException(ExecutionEngine.ERRORCODE_WRONG_SERIALIZED_BYTES);
    }
    return resultTables[0];
  }
  return null;
}
