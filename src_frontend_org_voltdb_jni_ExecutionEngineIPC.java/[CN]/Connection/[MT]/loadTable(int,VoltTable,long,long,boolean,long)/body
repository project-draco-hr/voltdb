{
  if (returnUniqueViolations) {
    throw new UnsupportedOperationException("Haven't added IPC support for returning unique violatiosn");
  }
  m_data.clear();
  m_data.putInt(Commands.LoadTable.m_id);
  m_data.putInt(tableId);
  m_data.putLong(spHandle);
  m_data.putLong(lastCommittedSpHandle);
  m_data.putLong(undoToken);
  m_data.putInt(returnUniqueViolations ? 1 : 0);
  final ByteBuffer tableBytes=PrivateVoltTableFactory.getTableDataReference(table);
  if (m_data.remaining() < tableBytes.remaining()) {
    m_data.flip();
    final ByteBuffer newBuffer=ByteBuffer.allocate(m_data.remaining() + tableBytes.remaining());
    newBuffer.rewind();
    newBuffer.put(m_data);
    m_data=newBuffer;
  }
  m_data.put(tableBytes);
  try {
    m_data.flip();
    m_connection.write();
  }
 catch (  final Exception e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  int result=ExecutionEngine.ERRORCODE_ERROR;
  try {
    result=m_connection.readStatusByte();
  }
 catch (  final IOException e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  if (result != ExecutionEngine.ERRORCODE_SUCCESS) {
    throw new EEException(result);
  }
  ByteBuffer responseBuffer=null;
  try {
    responseBuffer=readMessage();
  }
 catch (  IOException e) {
    Throwables.propagate(e);
  }
  if (responseBuffer != null)   return responseBuffer.array();
  return null;
}
