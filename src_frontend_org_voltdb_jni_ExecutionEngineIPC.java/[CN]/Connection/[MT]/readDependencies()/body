{
  final ByteBuffer resultSetSizeBuff=ByteBuffer.allocate(4);
  resultSetSizeBuff.rewind();
  while (resultSetSizeBuff.hasRemaining()) {
    int read=m_socketChannel.read(resultSetSizeBuff);
    if (read == -1) {
      throw new EOFException();
    }
  }
  resultSetSizeBuff.rewind();
  final int resultsSize=resultSetSizeBuff.getInt();
  final ByteBuffer depsBuff=ByteBuffer.allocate(resultsSize);
  depsBuff.clear().rewind();
  while (depsBuff.hasRemaining()) {
    int read=m_socketChannel.read(depsBuff);
    if (read == -1) {
      throw new EOFException();
    }
  }
  depsBuff.rewind();
  final boolean dirty=depsBuff.get() > 0;
  if (dirty) {
    m_dirty=true;
  }
  final int numDependencies=depsBuff.getInt();
  final int[] depIds=new int[numDependencies];
  final VoltTable[] dependencies=new VoltTable[numDependencies];
  final FastDeserializer fds=new FastDeserializer(depsBuff);
  for (int ii=0; ii < numDependencies; ++ii) {
    depIds[ii]=fds.readInt();
    dependencies[ii]=fds.readObject(VoltTable.class);
  }
  assert(depIds.length == 1);
  return new DependencyPair(depIds[0],dependencies[0]);
}
