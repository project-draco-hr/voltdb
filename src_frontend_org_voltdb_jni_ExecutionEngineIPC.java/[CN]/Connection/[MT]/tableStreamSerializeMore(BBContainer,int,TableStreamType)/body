{
  int bytesReturned=-1;
  ByteBuffer view=c.b.duplicate();
  try {
    m_data.clear();
    m_data.putInt(Commands.TableStreamSerializeMore.m_id);
    m_data.putInt(tableId);
    m_data.putInt(streamType.ordinal());
    m_data.putInt(1);
    m_data.putInt(c.b.remaining());
    m_data.flip();
    m_connection.write();
    m_connection.readStatusByte();
    ByteBuffer countBuffer=ByteBuffer.allocate(4);
    while (countBuffer.hasRemaining()) {
      int read=m_connection.m_socketChannel.read(countBuffer);
      if (read == -1) {
        throw new EOFException();
      }
    }
    countBuffer.flip();
    final int count=countBuffer.getInt();
    if (count == -1 || count == 0) {
      return count;
    }
    ByteBuffer remainingBuffer=ByteBuffer.allocate(8);
    while (remainingBuffer.hasRemaining()) {
      int read=m_connection.m_socketChannel.read(remainingBuffer);
      if (read == -1) {
        throw new EOFException();
      }
    }
    remainingBuffer.flip();
    final long remaining=remainingBuffer.getLong();
    ByteBuffer lengthBuffer=ByteBuffer.allocate(4);
    while (lengthBuffer.hasRemaining()) {
      int read=m_connection.m_socketChannel.read(lengthBuffer);
      if (read == -1) {
        throw new EOFException();
      }
    }
    lengthBuffer.flip();
    final int length=lengthBuffer.getInt();
    bytesReturned=length;
    view.limit(view.position() + length);
    while (view.hasRemaining()) {
      m_connection.m_socketChannel.read(view);
    }
  }
 catch (  final IOException e) {
    System.out.println("Exception: " + e.getMessage());
    throw new RuntimeException(e);
  }
  return bytesReturned;
}
