{
  sendPlanFragmentsInvocation(Commands.QueryPlanFragments,numFragmentIds,planFragmentIds,inputDepIds,parameterSets,txnId,spHandle,lastCommittedSpHandle,uniqueId,undoToken);
  int result=ExecutionEngine.ERRORCODE_ERROR;
  while (true) {
    try {
      result=m_connection.readStatusByte();
      if (result == ExecutionEngine.ERRORCODE_NEED_PLAN) {
        long fragmentId=m_connection.readLong();
        byte[] plan=planForFragmentId(fragmentId);
        m_data.clear();
        m_data.put(plan);
        m_data.flip();
        m_connection.write();
      }
 else       if (result == ExecutionEngine.ERRORCODE_SUCCESS) {
        final VoltTable resultTables[]=new VoltTable[numFragmentIds];
        for (int ii=0; ii < numFragmentIds; ii++) {
          resultTables[ii]=PrivateVoltTableFactory.createUninitializedVoltTable();
        }
        try {
          m_connection.readResultTables(resultTables);
        }
 catch (        final IOException e) {
          throw new EEException(ExecutionEngine.ERRORCODE_WRONG_SERIALIZED_BYTES);
        }
        return resultTables;
      }
 else {
        return null;
      }
    }
 catch (    final IOException e) {
      m_history.append("GOT IOException: " + e.toString());
      System.out.println("Exception: " + e.getMessage());
      throw new RuntimeException(e);
    }
catch (    final Throwable thrown) {
      thrown.printStackTrace();
      m_history.append("GOT Throwable: " + thrown.toString());
      throw thrown;
    }
  }
}
