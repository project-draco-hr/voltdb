{
  final int count=type == byte.class ? buf.getInt() : buf.getShort();
  if (count < 0) {
    throw new IOException("Array length is negative " + count);
  }
 else   if (type == byte.class) {
    if (count > (VoltType.MAX_VALUE_LENGTH)) {
      throw new IOException("Array length is greater then the max of 1 megabyte " + count);
    }
    final byte[] retval=new byte[count];
    buf.get(retval);
    return retval;
  }
 else   if (type == byte[].class) {
    final byte[][] retval=new byte[count][];
    for (int i=0; i < count; i++) {
      int size=buf.getInt();
      if (size == -1) {
        retval[i]=null;
      }
 else {
        retval[i]=new byte[size];
        buf.get(retval[i]);
      }
    }
    return retval;
  }
 else   if (type == short.class) {
    final short[] retval=new short[count];
    for (int i=0; i < count; i++) {
      retval[i]=buf.getShort();
    }
    return retval;
  }
 else   if (type == int.class) {
    final int[] retval=new int[count];
    for (int i=0; i < count; i++) {
      retval[i]=buf.getInt();
    }
    return retval;
  }
 else   if (type == long.class) {
    final long[] retval=new long[count];
    for (int i=0; i < count; i++) {
      retval[i]=buf.getLong();
    }
    return retval;
  }
 else   if (type == Long.class) {
    final Long[] retval=new Long[count];
    for (int i=0; i < count; i++) {
      retval[i]=buf.getLong();
    }
    return retval;
  }
 else   if (type == String.class) {
    final String[] retval=new String[count];
    for (int i=0; i < count; i++) {
      retval[i]=getString(buf);
    }
    return retval;
  }
 else   if (type == double.class) {
    final double[] retval=new double[count];
    for (int i=0; i < count; i++) {
      retval[i]=buf.getDouble();
    }
    return retval;
  }
 else   if (type == Double.class) {
    final Double[] retval=new Double[count];
    for (int i=0; i < count; i++) {
      retval[i]=buf.getDouble();
    }
    return retval;
  }
 else   if (type == TimestampType.class) {
    final TimestampType[] retval=new TimestampType[count];
    for (int i=0; i < count; i++) {
      retval[i]=new TimestampType(buf.getLong());
    }
    return retval;
  }
 else   if (type == BigDecimal.class) {
    final BigDecimal[] retval=new BigDecimal[count];
    for (int i=0; i < count; ++i) {
      retval[i]=getBigDecimal(buf);
    }
    return retval;
  }
 else   if (type == GeographyPointValue.class) {
    final GeographyPointValue[] retval=new GeographyPointValue[count];
    for (int i=0; i < count; ++i) {
      retval[i]=GeographyPointValue.unflattenFromBuffer(buf);
    }
    return retval;
  }
 else   if (type == GeographyValue.class) {
    final GeographyValue[] retval=new GeographyValue[count];
    for (int i=0; i < count; ++i) {
      int len=buf.getInt();
      if (len == VoltType.NULL_STRING_LENGTH) {
        retval[i]=null;
      }
 else {
        retval[i]=GeographyValue.unflattenFromBuffer(buf);
      }
    }
    return retval;
  }
 else   if (type == VoltTable.class) {
    final VoltTable[] retval=new VoltTable[count];
    for (int i=0; i < count; ++i) {
      retval[i]=PrivateVoltTableFactory.createVoltTableFromSharedBuffer(buf.slice());
      buf.position(buf.position() + retval[i].getSerializedSize());
    }
    return retval;
  }
 else {
    throw new RuntimeException("SerializationHelper.readArray called with unhandled type: " + type.getName());
  }
}
