{
  VoltXMLElement xmlSQL=null;
  try {
    xmlSQL=m_hsql.getXMLCompiledStatement(stmtSQL);
  }
 catch (  HSQLParseException e) {
    e.printStackTrace();
    assertTrue(false);
  }
  PrintStream xmlDebugOut=BuildDirectoryUtils.getDebugOutputPrintStream("statement-hsql-xml",stmtName + ".xml");
  xmlDebugOut.println(xmlSQL);
  xmlDebugOut.close();
  AbstractParsedStmt parsedStmt=AbstractParsedStmt.parse(stmtSQL,xmlSQL,m_db,null);
  PrintStream parsedDebugOut=BuildDirectoryUtils.getDebugOutputPrintStream("statement-hsql-parsed",stmtName + ".txt");
  parsedDebugOut.println(parsedStmt.toString());
  parsedDebugOut.close();
  int clausesFound=0;
  clausesFound+=parsedStmt.noTableSelectionList.size();
  for (  Entry<Table,ArrayList<AbstractExpression>> pair : parsedStmt.tableFilterList.entrySet())   clausesFound+=pair.getValue().size();
  for (  Entry<AbstractParsedStmt.TablePair,ArrayList<AbstractExpression>> pair : parsedStmt.joinSelectionList.entrySet())   clausesFound+=pair.getValue().size();
  clausesFound+=parsedStmt.multiTableSelectionList.size();
  System.out.println(parsedStmt.toString());
  assertEquals(clausesFound,parsedStmt.whereSelectionList.size());
}
