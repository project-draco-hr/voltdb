{
  CallableStatement cs=conn.prepareCall("{call SelectC}");
  ResultSet results=cs.executeQuery();
  ResultSetMetaData meta=results.getMetaData();
  assertEquals(9,meta.getColumnCount());
  assertEquals(Byte.class.getName(),meta.getColumnClassName(1));
  assertEquals(java.sql.Types.TINYINT,meta.getColumnType(1));
  assertEquals("TINYINT",meta.getColumnTypeName(1));
  assertEquals(7,meta.getPrecision(1));
  assertEquals(0,meta.getScale(1));
  assertFalse(meta.isCaseSensitive(1));
  assertTrue(meta.isSigned(1));
  assertEquals(Short.class.getName(),meta.getColumnClassName(2));
  assertEquals(java.sql.Types.SMALLINT,meta.getColumnType(2));
  assertEquals("SMALLINT",meta.getColumnTypeName(2));
  assertEquals(15,meta.getPrecision(2));
  assertEquals(0,meta.getScale(2));
  assertFalse(meta.isCaseSensitive(2));
  assertTrue(meta.isSigned(2));
  assertEquals(Integer.class.getName(),meta.getColumnClassName(3));
  assertEquals(java.sql.Types.INTEGER,meta.getColumnType(3));
  assertEquals("INTEGER",meta.getColumnTypeName(3));
  assertEquals(31,meta.getPrecision(3));
  assertEquals(0,meta.getScale(3));
  assertFalse(meta.isCaseSensitive(3));
  assertTrue(meta.isSigned(3));
  assertEquals(Long.class.getName(),meta.getColumnClassName(4));
  assertEquals(java.sql.Types.BIGINT,meta.getColumnType(4));
  assertEquals("BIGINT",meta.getColumnTypeName(4));
  assertEquals(63,meta.getPrecision(4));
  assertEquals(0,meta.getScale(4));
  assertFalse(meta.isCaseSensitive(4));
  assertTrue(meta.isSigned(4));
  assertEquals(Double.class.getName(),meta.getColumnClassName(5));
  assertEquals(java.sql.Types.FLOAT,meta.getColumnType(5));
  assertEquals("FLOAT",meta.getColumnTypeName(5));
  assertEquals(53,meta.getPrecision(5));
  assertEquals(0,meta.getScale(5));
  assertFalse(meta.isCaseSensitive(5));
  assertTrue(meta.isSigned(5));
  assertEquals(String.class.getName(),meta.getColumnClassName(6));
  assertEquals(java.sql.Types.VARCHAR,meta.getColumnType(6));
  assertEquals("VARCHAR",meta.getColumnTypeName(6));
  assertEquals(VoltType.MAX_VALUE_LENGTH,meta.getPrecision(6));
  assertEquals(0,meta.getScale(6));
  assertTrue(meta.isCaseSensitive(6));
  assertFalse(meta.isSigned(6));
  assertEquals(Byte[].class.getCanonicalName(),meta.getColumnClassName(7));
  assertEquals(java.sql.Types.VARBINARY,meta.getColumnType(7));
  assertEquals(128,meta.getColumnDisplaySize(7));
  assertEquals("VARBINARY",meta.getColumnTypeName(7));
  assertEquals(VoltType.MAX_VALUE_LENGTH,meta.getPrecision(7));
  assertEquals(0,meta.getScale(7));
  assertFalse(meta.isCaseSensitive(7));
  assertFalse(meta.isSigned(7));
  assertEquals(Timestamp.class.getName(),meta.getColumnClassName(8));
  assertEquals(java.sql.Types.TIMESTAMP,meta.getColumnType(8));
  assertEquals("TIMESTAMP",meta.getColumnTypeName(8));
  assertEquals(63,meta.getPrecision(8));
  assertEquals(0,meta.getScale(8));
  assertFalse(meta.isCaseSensitive(8));
  assertFalse(meta.isSigned(8));
  assertEquals(BigDecimal.class.getName(),meta.getColumnClassName(9));
  assertEquals(java.sql.Types.DECIMAL,meta.getColumnType(9));
  assertEquals("DECIMAL",meta.getColumnTypeName(9));
  assertEquals(VoltDecimalHelper.kDefaultPrecision,meta.getPrecision(9));
  assertEquals(12,meta.getScale(9));
  assertFalse(meta.isCaseSensitive(9));
  assertTrue(meta.isSigned(9));
}
