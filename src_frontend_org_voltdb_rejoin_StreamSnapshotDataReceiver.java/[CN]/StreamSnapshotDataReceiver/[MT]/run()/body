{
  BlockingQueue<BBContainer> bufferQueue=m_bufferPool.getQueue(SnapshotSiteProcessor.m_snapshotBufferLength);
  BlockingQueue<BBContainer> compressionBufferQueue=m_bufferPool.getQueue(SnapshotSiteProcessor.m_snapshotBufferCompressedLen);
  try {
    while (true) {
      BBContainer container=null;
      BBContainer compressionBufferC=null;
      ByteBuffer compressionBuffer=null;
      boolean success=false;
      try {
        VoltMessage msg=m_mb.recvBlocking();
        if (msg == null) {
          break;
        }
        assert(msg instanceof RejoinDataMessage);
        RejoinDataMessage dataMsg=(RejoinDataMessage)msg;
        byte[] data=dataMsg.getData();
        container=bufferQueue.take();
        ByteBuffer messageBuffer=container.b();
        messageBuffer.clear();
        compressionBufferC=compressionBufferQueue.take();
        compressionBuffer=compressionBufferC.b();
        compressionBuffer.clear();
        compressionBuffer.limit(data.length);
        compressionBuffer.put(data);
        compressionBuffer.flip();
        int uncompressedSize=CompressionService.decompressBuffer(compressionBuffer,messageBuffer);
        messageBuffer.limit(uncompressedSize);
        m_queue.offer(Pair.of(dataMsg.m_sourceHSId,Pair.of(dataMsg.getTargetId(),container)));
        success=true;
      }
  finally {
        if (!success && container != null) {
          container.discard();
        }
        if (compressionBuffer != null) {
          compressionBufferC.discard();
        }
      }
    }
  }
 catch (  IOException e) {
    try {
      while (!m_queue.isEmpty()) {
        Thread.sleep(50);
      }
      Thread.sleep(300);
    }
 catch (    InterruptedException e2) {
    }
    if (m_closed) {
      return;
    }
    rejoinLog.error("Error reading a message from a recovery stream.",e);
  }
catch (  InterruptedException e) {
    return;
  }
}
