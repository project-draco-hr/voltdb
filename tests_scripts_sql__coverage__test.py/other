import sys
sys.path.append('../../lib/python')
import random
import time
import subprocess
import cPickle
import os.path
import imp
import re
from voltdbclient import *
from optparse import OptionParser
from Query import VoltQueryClient
from SQLCoverageReport import generate_summary
from SQLGenerator import SQLGenerator
from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement
from subprocess import call
from XMLUtils import prettify
if (__name__ == '__main__'):
    parser = OptionParser()
    parser.add_option('-l', '--leader', dest='hostname', help='the hostname of the leader')
    parser.add_option('-n', '--number', dest='hostcount', help='the number of total hosts used in this test')
    parser.add_option('-k', '--kfactor', dest='kfactor', help='the number of kfactor used in this test')
    parser.add_option('-t', '--sitescount', dest='sitescount', help='the number of partitions used in this test')
    parser.add_option('-p', '--port', dest='hostport', help='the port number of the leader')
    parser.add_option('-s', '--seed', dest='seed', help='seed for random number generator')
    parser.add_option('-c', '--config', dest='config', default=None, help='the name of the config to run')
    parser.add_option('-S', '--subversion_generation', dest='subversion_generation', action='store_true', default=None, help='enable generation of additional subquery forms for select statements')
    parser.add_option('-r', '--report-all', action='store_true', dest='report_all', default=False, help='report all attempted SQL statements rather than mismatches')
    parser.add_option('-g', '--generate-only', action='store_true', dest='generate_only', default=False, help='only generate and report SQL statements, do not start any database servers')
    (options, args) = parser.parse_args()
    if (options.seed == None):
        seed = random.randint(0, (2 ** 63))
        print ('Random seed: %d' % seed)
    else:
        seed = int(options.seed)
        print ('Using supplied seed: ' + str(seed))
    random.seed(seed)
    if (len(args) < 3):
        usage()
        sys.exit(3)
    config_filename = args[0]
    output_dir = args[1]
    basedir = os.path.dirname(config_filename)
    config_list = Config(config_filename)
    configs_to_run = []
    if (options.config != None):
        if (options.config not in config_list.get_configs()):
            print  >> sys.stderr, ('Selected config %s not present in config file %s' % (options.config, config_filename))
            sys.exit(3)
        else:
            configs_to_run.append(options.config)
    else:
        configs_to_run = config_list.get_configs()
    testConfigKits = {}
    defaultHost = 'localhost'
    defaultPort = 21212
    if ((options.hostname != None) and (options.hostname != defaultHost)):
        testConfigKits = create_testConfigKits(options, basedir)
    success = True
    statistics = {}
    for config_name in configs_to_run:
        print  >> sys.stderr, ('\nSQLCOVERAGE: STARTING ON CONFIG: %s\n' % config_name)
        report_dir = ((output_dir + '/') + config_name)
        config = config_list.get_config(config_name)
        if ((options.hostname != None) and (options.hostname != defaultHost)):
            testDDL = ((basedir + '/') + config['ddl'])
            testProjectFile = create_projectFile(testDDL, 'test')
            testCatalog = create_catalogFile(testConfigKits['voltcompiler'], testProjectFile, 'test')
            testConfigKits['testCatalog'] = testCatalog
        result = run_config(config_name, config, basedir, report_dir, seed, options.report_all, options.generate_only, options.subversion_generation, options.report_all, args, testConfigKits)
        statistics[config_name] = result['keyStats']
        statistics['seed'] = seed
        if (result['mis'] != 0):
            success = False
    generate_summary(output_dir, statistics)
    if (not success):
        print  >> sys.stderr, 'SQL coverage has errors.'
        exit(1)
