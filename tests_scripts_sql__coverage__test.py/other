import sys
sys.path.append('../../lib/python')
sys.path.append('./examples/sql_coverage/')
import random
import time
import subprocess
import cPickle
import os.path
import imp
import re
import traceback
from voltdbclient import *
from optparse import OptionParser
from Query import VoltQueryClient
from SQLCoverageReport import generate_summary
from SQLGenerator import SQLGenerator
from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement
from subprocess import call
from XMLUtils import prettify
if (__name__ == '__main__'):
    time0 = time.time()
    print (('Initial time: ' + str(time0)) + ', at start (in seconds since January 1, 1970)')
    save_prev_time = time0
    total_gensql_time = 0.0
    total_voltdb_time = 0.0
    total_cmpdb_time = 0.0
    total_compar_time = 0.0
    keyStats_start_index = 0
    valid_statements = 0
    invalid_statements = 0
    mismatched_statements = 0
    total_statements = 0
    total_volt_npes = 0
    total_cmp_npes = 0
    total_num_crashes = 0
    total_num_inserts = 0
    total_num_patterns = 0
    max_all_statements_per_pattern = 0
    min_all_statements_per_pattern = sys.maxint
    parser = OptionParser()
    parser.add_option('-l', '--leader', dest='hostname', help='the hostname of the leader')
    parser.add_option('-n', '--number', dest='hostcount', help='the number of total hosts used in this test')
    parser.add_option('-k', '--kfactor', dest='kfactor', help='the number of kfactor used in this test')
    parser.add_option('-t', '--sitescount', dest='sitescount', help='the number of partitions used in this test')
    parser.add_option('-p', '--port', dest='hostport', help='the port number of the leader')
    parser.add_option('-s', '--seed', dest='seed', help='seed for random number generator')
    parser.add_option('-c', '--config', dest='config', default=None, help='the name of the config to run')
    parser.add_option('-S', '--subversion_generation', dest='subversion_generation', action='store_true', default=None, help='enable generation of additional subquery forms for select statements')
    parser.add_option('-a', '--ascii-only', action='store_true', dest='ascii_only', default=False, help='include only ASCII values in randomly generated string constants')
    parser.add_option('-i', '--report-invalid', action='store_true', dest='report_invalid', default=False, help='report invalid SQL statements, not just mismatches')
    parser.add_option('-r', '--report-all', action='store_true', dest='report_all', default=False, help='report all attempted SQL statements, not just mismatches')
    parser.add_option('-g', '--generate-only', action='store_true', dest='generate_only', default=False, help='only generate and report SQL statements, do not start any database servers')
    parser.add_option('-P', '--postgresql', action='store_true', dest='postgresql', default=False, help='compare VoltDB results to PostgreSQL, rather than HSqlDB')
    parser.add_option('-G', '--postgis', action='store_true', dest='postgis', default=False, help='compare VoltDB results to PostgreSQL, with the PostGIS extension')
    parser.add_option('-d', '--debug', dest='debug', default=None, help='pass a debug option to the Non-VoltDB backend, e.g., to the PostgreSQL backend')
    (options, args) = parser.parse_args()
    if (options.seed == None):
        seed = random.randint(0, (2 ** 63))
        print ('Random seed: %d' % seed)
    else:
        seed = int(options.seed)
        print ('Using supplied seed: ' + str(seed))
    random.seed(seed)
    if (len(args) < 3):
        usage()
        sys.exit(3)
    config_filename = args[0]
    output_dir = args[1]
    basedir = os.path.dirname(config_filename)
    config_list = Config(config_filename)
    configs_to_run = []
    if (options.config != None):
        if (options.config not in config_list.get_configs()):
            print  >> sys.stderr, ('Selected config %s not present in config file %s' % (options.config, config_filename))
            sys.exit(3)
        else:
            configs_to_run.append(options.config)
    else:
        configs_to_run = config_list.get_configs()
    comparison_database = 'HSqlDB'
    if options.postgresql:
        comparison_database = 'PostgreSQL'
    if options.postgis:
        comparison_database = 'PostGIS'
    debug_transform_sql = False
    if (options.debug == 'transform_sql'):
        debug_transform_sql = True
    testConfigKits = {}
    defaultHost = 'localhost'
    defaultPort = 21212
    if ((options.hostname != None) and (options.hostname != defaultHost)):
        testConfigKits = create_testConfigKits(options, basedir)
    success = True
    statistics = {}
    for config_name in configs_to_run:
        print  >> sys.stderr, ('\nSQLCOVERAGE: STARTING ON CONFIG: %s\n' % config_name)
        report_dir = ((output_dir + '/') + config_name)
        config = config_list.get_config(config_name)
        if ((options.hostname != None) and (options.hostname != defaultHost)):
            testDDL = ((basedir + '/') + config['ddl'])
            testProjectFile = create_projectFile(testDDL, 'test')
            testCatalog = create_catalogFile(testConfigKits['voltcompiler'], testProjectFile, 'test')
            testConfigKits['testCatalog'] = testCatalog
        result = run_config(config_name, config, basedir, report_dir, seed, options.report_invalid, options.report_all, options.generate_only, options.subversion_generation, options.report_all, options.ascii_only, args, testConfigKits)
        statistics[config_name] = result['keyStats']
        statistics['seed'] = seed
        if (options.postgresql and (config_name == 'index-varbinary')):
            if (result['mis'] > 1520):
                success = False
        elif (result['mis'] != 0):
            success = False
    time1 = time.time()
    if (total_statements > 0):
        valid_percent = '{0:.2f}'.format(((100.0 * valid_statements) / total_statements))
        invalid_percent = '{0:.2f}'.format(((100.0 * invalid_statements) / total_statements))
        mismatched_percent = '{0:.2f}'.format(((100.0 * mismatched_statements) / total_statements))
    else:
        valid_percent = '0.00'
        invalid_percent = '0.00'
        mismatched_percent = '0.00'
    statistics['totals'] = (((((((((((((((((((((((((((((((((((((((((((((((((((((((('\n<td align=right>' + str(valid_statements)) + '</td>') + '\n<td align=right>') + valid_percent) + '%</td>') + '\n<td align=right>') + str(invalid_statements)) + '</td>') + '\n<td align=right>') + invalid_percent) + '%</td>') + '\n<td align=right>') + str(total_statements)) + '</td>') + '\n<td align=right>') + str(mismatched_statements)) + '</td>') + '\n<td align=right>') + mismatched_percent) + '%</td>') + '\n<td align=right>') + str(total_volt_npes)) + '</td>') + '\n<td align=right>') + str(total_cmp_npes)) + '</td>') + '\n<td align=right>') + str(total_num_crashes)) + '</td>') + '\n<td align=right>') + str(min_all_statements_per_pattern)) + '</td>') + '\n<td align=right>') + str(max_all_statements_per_pattern)) + '</td>') + '\n<td align=right>') + str(total_num_inserts)) + '</td>') + '\n<td align=right>') + str(total_num_patterns)) + '</td>') + '\n<td align=right>') + minutes_colon_seconds(total_gensql_time)) + '</td>') + '\n<td align=right>') + minutes_colon_seconds(total_voltdb_time)) + '</td>') + '\n<td align=right>') + minutes_colon_seconds(total_cmpdb_time)) + '</td>') + '\n<td align=right>') + minutes_colon_seconds(total_compar_time)) + '</td>') + '\n<td align=right>') + minutes_colon_seconds((time1 - time0))) + '</td></tr>\n')
    generate_summary(output_dir, statistics, comparison_database)
    print_seconds(total_gensql_time, 'for generating ALL SQL statements')
    print_seconds(total_voltdb_time, 'for running ALL VoltDB (JNI) statements')
    print_seconds(total_cmpdb_time, (('for running ALL ' + comparison_database) + ' statements'))
    print_seconds(total_compar_time, 'for comparing ALL DB results')
    print_elapsed_seconds('for generating the output report', time1, 'Total   time: ')
    print_elapsed_seconds('for the entire run', time0, 'Total   time: ')
    if (total_cmp_npes > 0):
        print (('Total number of ' + comparison_database) + (' NullPointerExceptions (NPEs): %d' % total_cmp_npes))
    if (total_volt_npes > 0):
        success = False
        print ('Total number of VoltDB NullPointerExceptions (NPEs): %d' % total_volt_npes)
    if (mismatched_statements > 0):
        print ('Total number of mismatched statements (i.e., test failures): %d' % mismatched_statements)
    if (total_num_crashes > 0):
        print (('Total number of (VoltDB, ' + comparison_database) + (', or compare results) crashes: %d' % total_num_crashes))
        success = False
    if (not success):
        sys.stdout.flush()
        sys.stderr.flush()
        print  >> sys.stderr, 'SQL coverage has errors.'
        exit(1)
