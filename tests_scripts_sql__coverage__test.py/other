import sys
import random
import time
import subprocess
import cPickle
import os.path
import imp
from base64 import encodestring
from voltdbclient import *
from optparse import OptionParser
from xml2 import XMLGenerator
from Query import VoltQueryClient
from SQLCoverageReport import generate_html_reports, generate_summary
from SQLGenerator import SQLGenerator
if (__name__ == '__main__'):
    parser = OptionParser()
    parser.add_option('-s', '--seed', dest='seed', help='seed for random number generator')
    parser.add_option('-c', '--config', dest='config', default=None, help='the name of the config to run')
    parser.add_option('-r', '--report-all', action='store_true', dest='report_all', default=False, help='report all attempted SQL statements rather than mismatches')
    (options, args) = parser.parse_args()
    if (options.seed == None):
        seed = random.randint(0, (2 ** 63))
        print ('Random seed: %d' % seed)
    else:
        seed = int(options.seed)
        print ('Using supplied seed: ' + str(seed))
    random.seed(seed)
    if (len(args) < 3):
        usage()
        sys.exit(3)
    config_filename = args[0]
    output_dir = args[1]
    basedir = os.path.dirname(config_filename)
    config_list = Config(config_filename)
    configs_to_run = []
    if (options.config != None):
        if (options.config not in config_list.get_configs()):
            print  >> sys.stderr, ('Selected config %s not present in config file' % options.config)
            sys.exit(3)
        else:
            configs_to_run.append(options.config)
    else:
        configs_to_run = config_list.get_configs()
    success = True
    statistics = {}
    for config_name in configs_to_run:
        report_dir = ((output_dir + '/') + config_name)
        config = config_list.get_config(config_name)
        result = run_config(config, basedir, report_dir, seed, options.report_all, args)
        statistics[config_name] = result
        if (result[1] != 0):
            success = False
    generate_summary(output_dir, statistics)
    if (not success):
        print  >> sys.stderr, 'SQL coverage has errors.'
        exit(1)
