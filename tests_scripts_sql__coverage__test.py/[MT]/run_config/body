def run_config(suite_name, config, basedir, output_dir, random_seed, report_all, generate_only, subversion_generation, submit_verbosely, args, testConfigKit):
    time0 = time.time()
    for key in config.iterkeys():
        print ("in run_config key = '%s', config[key] = '%s'" % (key, config[key]))
        if (not os.path.isabs(config[key])):
            config[key] = os.path.abspath(os.path.join(basedir, config[key]))
    if (not os.path.exists(output_dir)):
        os.makedirs(output_dir)
    statements_path = os.path.abspath(os.path.join(output_dir, 'statements.data'))
    hsql_path = os.path.abspath(os.path.join(output_dir, 'hsql.data'))
    jni_path = os.path.abspath(os.path.join(output_dir, 'jni.data'))
    template = config['template']
    global normalize
    if ('normalizer' in config):
        normalize = imp.load_source('normalizer', config['normalizer']).normalize
    else:
        normalize = (lambda x, y: x)
    command = ' '.join(args[2:])
    command += (' schema=' + os.path.basename(config['ddl']))
    random_state = random.getstate()
    if ('template-jni' in config):
        template = config['template-jni']
    generator = SQLGenerator(config['schema'], template, subversion_generation)
    counter = 0
    statements_file = open(statements_path, 'wb')
    for i in generator.generate():
        cPickle.dump({'id': counter, 'SQL': i, }, statements_file)
        counter += 1
    statements_file.close()
    if (generate_only or submit_verbosely):
        print ('Generated %d statements.' % counter)
    if generate_only:
        return {'keyStats': None, 'mis': 0, }
    global gensql_time
    gensql_time += print_elapsed_seconds((('for generating statements (' + suite_name) + ')'), time0)
    if (run_once('jni', command, statements_path, jni_path, submit_verbosely, testConfigKit) != 0):
        print  >> sys.stderr, 'Test with the JNI backend had errors.'
        print  >> sys.stderr, ('  jni_path: %s' % jni_path)
        sys.stderr.flush()
        exit(1)
    global voltdb_time
    voltdb_time += print_elapsed_seconds((('for running VoltDB (JNI) statements (' + suite_name) + ')'))
    random.seed(random_seed)
    random.setstate(random_state)
    if (run_once('hsqldb', command, statements_path, hsql_path, submit_verbosely, testConfigKit) != 0):
        print  >> sys.stderr, 'Test with the HSQLDB backend had errors.'
        exit(1)
    global hsqldb_time
    hsqldb_time += print_elapsed_seconds((('for running HSqlDB statements (' + suite_name) + ')'))
    global compare_results
    compare_results = imp.load_source('normalizer', config['normalizer']).compare_results
    success = compare_results(suite_name, random_seed, statements_path, hsql_path, jni_path, output_dir, report_all)
    global compar_time
    compar_time += print_elapsed_seconds((('for comparing DB results (' + suite_name) + ')'))
    suite_secs = print_elapsed_seconds((("for run_config of '" + suite_name) + "'"), time0, 'Sub-tot time: ')
    global total_statements

    def next_keyStats_column_value():
        prefix = '<td'
        suffix = '</td>'
        global keyStats_start_index
        start_index = 0
        end_index = 0
        next_col_val = '0'
        try:
            start_index = (success['keyStats'].index(prefix, keyStats_start_index) + len(prefix))
            start_index = (success['keyStats'].index('>', start_index) + 1)
            end_index = success['keyStats'].index(suffix, start_index)
            next_col_val = success['keyStats'][start_index:end_index]
            keyStats_start_index = (end_index + len(suffix))
        except:
            print 'Caught exception:\n', sys.exc_info()[0]
            print ('success[keyStats]:\n' + success['keyStats'])
            print 'keyStats_start_index:', keyStats_start_index
            print 'start_index :', start_index
            print 'end_index   :', end_index
            print 'next_col_val:', next_col_val
        return next_col_val
    global valid_statements
    global invalid_statements
    global mismatched_statements
    global keyStats_start_index
    keyStats_start_index = 0
    valid_statements += int(next_keyStats_column_value())
    next_keyStats_column_value()
    invalid_statements += int(next_keyStats_column_value())
    next_keyStats_column_value()
    total_statements += int(next_keyStats_column_value())
    mismatched_statements += int(next_keyStats_column_value())
    success['keyStats'] = success['keyStats'].replace('</tr>', ('\n<td align=right>%s</td></tr>' % minutes_colon_seconds(suite_secs)))
    return success
