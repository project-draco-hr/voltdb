def run_config(suite_name, config, basedir, output_dir, random_seed, report_all, generate_only, subversion_generation, submit_verbosely, args, testConfigKit):
    for key in config.iterkeys():
        print ("in run_config key = '%s', config[key] = '%s'" % (key, config[key]))
        if (not os.path.isabs(config[key])):
            config[key] = os.path.abspath(os.path.join(basedir, config[key]))
    if (not os.path.exists(output_dir)):
        os.makedirs(output_dir)
    statements_path = os.path.abspath(os.path.join(output_dir, 'statements.data'))
    hsql_path = os.path.abspath(os.path.join(output_dir, 'hsql.data'))
    jni_path = os.path.abspath(os.path.join(output_dir, 'jni.data'))
    template = config['template']
    global normalize
    if ('normalizer' in config):
        normalize = imp.load_source('normalizer', config['normalizer']).normalize
    else:
        normalize = (lambda x, y: x)
    command = ' '.join(args[2:])
    command += (' schema=' + os.path.basename(config['ddl']))
    random_state = random.getstate()
    if ('template-jni' in config):
        template = config['template-jni']
    generator = SQLGenerator(config['schema'], template, subversion_generation, True)
    counter = 0
    statements_file = open(statements_path, 'wb')
    for i in generator.generate():
        cPickle.dump({'id': counter, 'SQL': i, }, statements_file)
        counter += 1
    statements_file.close()
    if (generate_only or submit_verbosely):
        print ('Generated %d statements.' % counter)
    if generate_only:
        return {'keyStats': None, 'mis': 0, }
    if (run_once('jni', command, statements_path, jni_path, submit_verbosely, testConfigKit) != 0):
        print  >> sys.stderr, 'Test with the JNI backend had errors.'
        print  >> sys.stderr, ('  jni_path: %s' % jni_path)
        sys.stderr.flush()
        exit(1)
    random.seed(random_seed)
    random.setstate(random_state)
    if ('template-hsqldb' in config):
        template = config['template-hsqldb']
    generator = SQLGenerator(config['schema'], template, subversion_generation, False)
    counter = 0
    statements_file = open(statements_path, 'wb')
    for i in generator.generate():
        cPickle.dump({'id': counter, 'SQL': i, }, statements_file)
        counter += 1
    statements_file.close()
    if (run_once('hsqldb', command, statements_path, hsql_path, submit_verbosely, testConfigKit) != 0):
        print  >> sys.stderr, 'Test with the HSQLDB backend had errors.'
        exit(1)
    global compare_results
    compare_results = imp.load_source('normalizer', config['normalizer']).compare_results
    success = compare_results(suite_name, random_seed, statements_path, hsql_path, jni_path, output_dir, report_all)
    return success
