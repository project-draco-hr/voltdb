def __buildinner__(self, current, pos):
    "Builds the inner branches of the tree.\n\n        'current': The current node.\n        'pos': The current position in the Python object.\n        "
    if (type(pos) is dict):
        for (k, v) in pos.iteritems():
            if (k in self.__attributes):
                if (type(v) is not unicode):
                    current.setAttribute(k, str(v))
                else:
                    current.setAttribute(k, v)
            else:
                node = self.tree.createElement(k)
                current.appendChild(node)
                self.__buildinner__(node, v)
    elif (type(pos) is list):
        for v in pos:
            node = self.tree.createElement(self.__parallels[current.tagName])
            current.appendChild(node)
            self.__buildinner__(node, v)
    elif (not isinstance(pos, basestring)):
        current.appendChild(self.tree.createTextNode(str(pos)))
    else:
        current.appendChild(self.tree.createTextNode(pos))
