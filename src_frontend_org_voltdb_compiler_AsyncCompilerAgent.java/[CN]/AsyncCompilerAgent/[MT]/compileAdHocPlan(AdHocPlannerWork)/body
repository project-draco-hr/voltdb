{
  CatalogContext context=work.catalogContext;
  if (context == null) {
    context=VoltDB.instance().getCatalogContext();
  }
  final PlannerTool ptool=context.m_ptool;
  List<String> errorMsgs=new ArrayList<String>();
  List<AdHocPlannedStatement> stmts=new ArrayList<AdHocPlannedStatement>();
  int partitionParamIndex=-1;
  VoltType partitionParamType=null;
  Object partitionParamValue=null;
  assert(work.sqlStatements != null);
  StatementPartitioning partitioning=null;
  boolean inferSP=(work.sqlStatements.length == 1) && work.inferPartitioning;
  for (  final String sqlStatement : work.sqlStatements) {
    if (inferSP) {
      partitioning=StatementPartitioning.inferPartitioning();
    }
 else     if (work.userPartitionKey == null) {
      partitioning=StatementPartitioning.forceMP();
    }
 else {
      partitioning=StatementPartitioning.forceSP();
    }
    try {
      AdHocPlannedStatement result=ptool.planSql(sqlStatement,partitioning);
      if (inferSP) {
        partitionParamIndex=result.getPartitioningParameterIndex();
        partitionParamType=result.getPartitioningParameterType();
        partitionParamValue=result.getPartitioningParameterValue();
      }
      stmts.add(result);
    }
 catch (    Exception e) {
      errorMsgs.add("Unexpected Ad Hoc Planning Error: " + e);
    }
  }
  String errorSummary=null;
  if (!errorMsgs.isEmpty()) {
    errorSummary=StringUtils.join(errorMsgs,"\n");
  }
  if (work.explainMode == ExplainMode.NONE && work.userParamSet != null) {
    int totalQuestionMarkParameters=0;
    for (    AdHocPlannedStatement result : stmts) {
      totalQuestionMarkParameters+=result.getQuestionMarkParameterCount();
    }
    if (totalQuestionMarkParameters != work.userParamSet.length) {
      return AsyncCompilerResult.makeErrorResult(work,String.format("\nIncorrect number of parameters passed: expected %d, passed %d",totalQuestionMarkParameters,work.userParamSet.length));
    }
  }
  AdHocPlannedStmtBatch plannedStmtBatch=new AdHocPlannedStmtBatch(work,stmts,partitionParamIndex,partitionParamType,partitionParamValue,errorSummary);
  if (adhocLog.isDebugEnabled()) {
    logBatch(plannedStmtBatch);
  }
  return plannedStmtBatch;
}
