{
  CatalogContext context=work.catalogContext;
  if (context == null) {
    context=VoltDB.instance().getCatalogContext();
  }
  final PlannerTool ptool=context.m_ptool;
  AdHocPlannedStmtBatch plannedStmtBatch=new AdHocPlannedStmtBatch(work.sqlBatchText,work.partitionParam,work.clientHandle,work.connectionId,work.hostname,work.adminConnection,work.clientData);
  List<String> errorMsgs=new ArrayList<String>();
  assert(work.sqlStatements != null);
  if (work.sqlStatements.length == 1) {
    try {
      String sqlStatement=work.sqlStatements[0];
      AdHocPlannedStatement result=ptool.planSql(sqlStatement,work.partitionParam,work.inferSinglePartition,work.allowParameterization);
      result.catalogVersion=context.catalogVersion;
      plannedStmtBatch.partitionParam=result.partitionParam;
      plannedStmtBatch.addStatement(result);
    }
 catch (    Exception e) {
      errorMsgs.add("Unexpected Ad Hoc Planning Error: " + e.getMessage());
    }
  }
 else {
    for (    final String sqlStatement : work.sqlStatements) {
      try {
        AdHocPlannedStatement result=ptool.planSql(sqlStatement,work.partitionParam,false,work.allowParameterization);
        result.catalogVersion=context.catalogVersion;
        plannedStmtBatch.addStatement(result);
      }
 catch (      Exception e) {
        errorMsgs.add("Unexpected Ad Hoc Planning Error: " + e.getMessage());
      }
    }
  }
  if (!errorMsgs.isEmpty()) {
    plannedStmtBatch.errorMsg=StringUtils.join(errorMsgs,"\n");
  }
  if (work.isExplainWork()) {
    plannedStmtBatch.setIsExplainWork();
  }
  return plannedStmtBatch;
}
