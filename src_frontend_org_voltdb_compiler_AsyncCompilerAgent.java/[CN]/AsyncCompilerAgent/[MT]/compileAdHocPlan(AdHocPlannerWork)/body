{
  CatalogContext context=work.catalogContext;
  if (context == null) {
    context=VoltDB.instance().getCatalogContext();
  }
  final PlannerTool ptool=context.m_ptool;
  List<String> errorMsgs=new ArrayList<String>();
  List<AdHocPlannedStatement> stmts=new ArrayList<AdHocPlannedStatement>();
  int partitionParamIndex=-1;
  Object partitionParamValue=null;
  assert(work.sqlStatements != null);
  PartitioningForStatement partitioning=null;
  boolean inferSP=(work.sqlStatements.length == 1) && work.inferPartitioning;
  for (  final String sqlStatement : work.sqlStatements) {
    if (inferSP) {
      partitioning=PartitioningForStatement.inferPartitioning();
    }
 else     if (work.userPartitionKey == null) {
      partitioning=PartitioningForStatement.forceMP();
    }
 else {
      partitioning=PartitioningForStatement.forceSP();
    }
    try {
      AdHocPlannedStatement result=ptool.planSql(sqlStatement,partitioning);
      if (inferSP) {
        partitionParamIndex=result.getPartitioningParameterIndex();
        partitionParamValue=result.getPartitioningParameterValue();
      }
      stmts.add(result);
    }
 catch (    Exception e) {
      errorMsgs.add("Unexpected Ad Hoc Planning Error: " + e);
    }
  }
  String errorSummary=null;
  if (!errorMsgs.isEmpty()) {
    errorSummary=StringUtils.join(errorMsgs,"\n");
  }
  AdHocPlannedStmtBatch plannedStmtBatch=new AdHocPlannedStmtBatch(work,stmts,partitionParamIndex,partitionParamValue,errorSummary);
  return plannedStmtBatch;
}
