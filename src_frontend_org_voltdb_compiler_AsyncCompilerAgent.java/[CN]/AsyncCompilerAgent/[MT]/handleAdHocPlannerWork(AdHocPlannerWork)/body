{
  Boolean hasDDL=null;
  SortedSet<String> conflictTables=new TreeSet<String>();
  Set<String> createdTables=new HashSet<String>();
  for (  String stmt : w.sqlStatements) {
    if (DEBUG_MODE.isTrue() && stmt.equals(DEBUG_EXCEPTION_DDL)) {
      throw new IndexOutOfBoundsException(DEBUG_EXCEPTION_DDL);
    }
    if (SQLLexer.isComment(stmt) || stmt.trim().isEmpty()) {
      continue;
    }
    String ddlToken=SQLLexer.extractDDLToken(stmt);
    if (hasDDL == null) {
      hasDDL=(ddlToken != null) ? true : false;
    }
 else     if ((hasDDL && ddlToken == null) || (!hasDDL && ddlToken != null)) {
      AsyncCompilerResult errResult=AsyncCompilerResult.makeErrorResult(w,"DDL mixed with DML and queries is unsupported.");
      w.completionHandler.onCompletion(errResult);
      return;
    }
    if (hasDDL) {
      String rejectionExplanation=SQLLexer.checkPermitted(stmt);
      if (rejectionExplanation != null) {
        AsyncCompilerResult errResult=AsyncCompilerResult.makeErrorResult(w,rejectionExplanation);
        w.completionHandler.onCompletion(errResult);
        return;
      }
      if (ddlToken.equals("drop")) {
        String tableName=SQLLexer.extractDDLTableName(stmt);
        if (tableName != null) {
          conflictTables.add(tableName);
        }
      }
 else       if (ddlToken.equals("create")) {
        String tableName=SQLLexer.extractDDLTableName(stmt);
        if (tableName != null) {
          createdTables.add(tableName);
        }
      }
    }
  }
  if (hasDDL == null) {
    AsyncCompilerResult errResult=AsyncCompilerResult.makeErrorResult(w,"Failed to plan, no SQL statement provided.");
    w.completionHandler.onCompletion(errResult);
    return;
  }
 else   if (!hasDDL) {
    final AsyncCompilerResult result=compileAdHocPlan(w);
    w.completionHandler.onCompletion(result);
  }
 else {
    conflictTables.retainAll(createdTables);
    if (!conflictTables.isEmpty()) {
      StringBuilder sb=new StringBuilder();
      sb.append("AdHoc DDL contains both DROP and CREATE statements for the following table(s):");
      for (      String tableName : conflictTables) {
        sb.append(" ");
        sb.append(tableName);
      }
      sb.append("\nYou cannot DROP and ADD a table with the same name in a single batch " + "(via @AdHoc). Issue the DROP and ADD statements as separate commands.");
      AsyncCompilerResult errResult=AsyncCompilerResult.makeErrorResult(w,sb.toString());
      w.completionHandler.onCompletion(errResult);
      return;
    }
    if (!w.onReplica && !w.useAdhocDDL) {
      AsyncCompilerResult errResult=AsyncCompilerResult.makeErrorResult(w,"Cluster is configured to use @UpdateApplicationCatalog " + "to change application schema.  AdHoc DDL is forbidden.");
      w.completionHandler.onCompletion(errResult);
      return;
    }
 else     if (w.onReplica) {
      AsyncCompilerResult errResult=AsyncCompilerResult.makeErrorResult(w,"AdHoc DDL is forbidden on a DR replica cluster. " + "Apply schema changes to the master and they will propogate to replicas.");
      w.completionHandler.onCompletion(errResult);
      return;
    }
    final CatalogChangeWork ccw=new CatalogChangeWork(w);
    dispatchCatalogChangeWork(ccw);
  }
}
