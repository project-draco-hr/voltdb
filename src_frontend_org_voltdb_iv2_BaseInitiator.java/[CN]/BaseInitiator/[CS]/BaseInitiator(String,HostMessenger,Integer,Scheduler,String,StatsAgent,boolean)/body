{
  m_zkMailboxNode=zkMailboxNode;
  m_messenger=messenger;
  m_partitionId=partition;
  m_scheduler=scheduler;
  RejoinProducer rejoinProducer=forRejoin ? new RejoinProducer(m_partitionId,scheduler.m_tasks) : null;
  if (m_partitionId == MpInitiator.MP_INIT_PID) {
    m_initiatorMailbox=new MpInitiatorMailbox(m_partitionId,m_scheduler,m_messenger,m_repairLog,rejoinProducer);
  }
 else {
    m_initiatorMailbox=new InitiatorMailbox(m_partitionId,m_scheduler,m_messenger,m_repairLog,rejoinProducer);
  }
  m_messenger.createMailbox(null,m_initiatorMailbox);
  rejoinProducer.setMailbox(m_initiatorMailbox);
  m_scheduler.setMailbox(m_initiatorMailbox);
  StarvationTracker st=new StarvationTracker(getInitiatorHSId());
  m_scheduler.setStarvationTracker(st);
  m_scheduler.setLock(m_initiatorMailbox);
  agent.registerStatsSource(SysProcSelector.STARVATION,getInitiatorHSId(),st);
  String partitionString=" ";
  if (m_partitionId != -1) {
    partitionString=" for partition " + m_partitionId + " ";
  }
  m_whoami=whoamiPrefix + " " + CoreUtils.hsIdToString(getInitiatorHSId())+ partitionString;
}
