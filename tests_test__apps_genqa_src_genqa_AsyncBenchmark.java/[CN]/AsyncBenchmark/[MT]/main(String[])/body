{
  try {
    AppHelper apph=new AppHelper(AsyncBenchmark.class.getCanonicalName()).add("display-interval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("pool-size","pool_size","Size of the record pool to operate on - larger sizes will cause a higher insert/update-delete rate.",100000).add("procedure","procedure_name","Procedure to call.","JiggleSinglePartition").add("wait","wait_duration","Wait duration (only when calling one of the Wait procedures), in milliseconds.",0).add("rate-limit","rate_limit","Rate limit to start from (number of transactions per second).",100000).add("auto-tune","auto_tune","Flag indicating whether the benchmark should self-tune the transaction rate for a target execution latency (true|false).","true").add("latency-target","latency_target","Execution latency to target to tune transaction rate (in milliseconds).",10.0d).setArguments(args);
    final long displayInterval=apph.longValue("display-interval");
    final long duration=apph.longValue("duration");
    final String servers=apph.stringValue("servers");
    final int port=apph.intValue("port");
    final int poolSize=apph.intValue("pool-size");
    final String procedure=apph.stringValue("procedure");
    final long wait=apph.intValue("wait");
    final long rateLimit=apph.longValue("rate-limit");
    final boolean autoTune=apph.booleanValue("auto-tune");
    final double latencyTarget=apph.doubleValue("latency-target");
    final String csv=apph.stringValue("stats");
    apph.validate("duration",(duration > 0)).validate("pool-size",(duration > 0)).validate("wait",(wait >= 0)).validate("rate-limit",(rateLimit > 0)).validate("latency-target",(latencyTarget > 0));
    apph.printActualUsage();
    Con=ClientConnectionPool.getWithRetry(servers,port);
    Timer timer=new Timer();
    timer.scheduleAtFixedRate(new TimerTask(){
      @Override public void run(){
        System.out.print(Con.getStatistics(procedure));
      }
    }
,displayInterval * 1000l,displayInterval * 1000l);
    IRateLimiter limiter=null;
    if (autoTune)     limiter=new LatencyLimiter(Con,procedure,latencyTarget,rateLimit);
 else     limiter=new RateLimiter(rateLimit);
    final long endTime=System.currentTimeMillis() + (1000l * duration);
    Random rand=new Random();
    while (endTime > System.currentTimeMillis()) {
      Con.executeAsync(new ProcedureCallback(){
        @Override public void clientCallback(        ClientResponse response) throws Exception {
          if (response.getStatus() == ClientResponse.SUCCESS)           TrackingResults.incrementAndGet(0);
 else           TrackingResults.incrementAndGet(1);
        }
      }
,procedure,(long)rand.nextInt(poolSize),wait);
      limiter.throttle();
    }
    timer.cancel();
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Benchmark Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d calls was received...\n"+ " - %,9d Succeeded\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n",TrackingResults.get(0) + TrackingResults.get(1),TrackingResults.get(0),TrackingResults.get(1));
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    System.out.print(Con.getStatistics(procedure).toString(false));
    Con.saveStatistics(csv);
    Con.close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
