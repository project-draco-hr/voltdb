{
  AbstractPlanNode pn;
  AbstractPlanNode n;
  NestLoopPlanNode nlj;
  AbstractExpression e;
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A WHERE R2.C IS NULL AND R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getWherePredicate();
  assertNotNull(e);
  assertEquals(ExpressionType.CONJUNCTION_AND,e.getExpressionType());
  pn=compile("select * FROM  " + "R1 JOIN R2 ON R1.A = R2.A FULL JOIN R3 ON R3.C = R2.C WHERE R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getWherePredicate();
  assertNotNull(e);
  assertEquals(ExpressionType.OPERATOR_IS_NULL,e.getExpressionType());
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A WHERE R2.C IS NULL OR R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getWherePredicate();
  assertNotNull(e);
  assertEquals(ExpressionType.CONJUNCTION_OR,e.getExpressionType());
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A LEFT JOIN R3 ON R3.C = R2.C WHERE R1.C is NULL");
  n=pn.getChild(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getWherePredicate();
  assertNotNull(e);
  assertEquals(ExpressionType.OPERATOR_IS_NULL,e.getExpressionType());
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A AND R1.C = R2.C");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getJoinPredicate();
  assertNotNull(e);
  assertEquals(ExpressionType.CONJUNCTION_AND,e.getExpressionType());
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A AND R1.C < 0 AND R2.C > 0");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getWherePredicate();
  assertNull(e);
  e=nlj.getPreJoinPredicate();
  assertEquals(ExpressionType.COMPARE_LESSTHAN,e.getExpressionType());
  e=nlj.getJoinPredicate();
  assertEquals(ExpressionType.CONJUNCTION_AND,e.getExpressionType());
  pn=compile("select * FROM  " + "R1 JOIN R2 ON R1.A = R2.A FULL JOIN R3 ON R1.A = R3.C AND R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN);
  nlj=(NestLoopPlanNode)n;
  e=nlj.getPreJoinPredicate();
  assertNotNull(e);
  assertEquals(ExpressionType.OPERATOR_IS_NULL,e.getExpressionType());
}
