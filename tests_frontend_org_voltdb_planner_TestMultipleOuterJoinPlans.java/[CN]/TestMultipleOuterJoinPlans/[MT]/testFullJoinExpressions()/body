{
  AbstractPlanNode pn;
  AbstractPlanNode n;
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A WHERE R2.C IS NULL AND R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,ExpressionType.CONJUNCTION_AND,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  pn=compile("select * FROM  " + "R1 JOIN R2 ON R1.A = R2.A FULL JOIN R3 ON R3.C = R2.C WHERE R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,ExpressionType.OPERATOR_IS_NULL,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN);
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A WHERE R2.C IS NULL OR R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,ExpressionType.CONJUNCTION_OR,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A LEFT JOIN R3 ON R3.C = R2.C WHERE R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN);
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,ExpressionType.OPERATOR_IS_NULL,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  pn=compile("select * FROM R1 JOIN R2 ON R1.A = R2.C FULL JOIN R3 ON R3.C = R2.C  AND R1.A > 0 AND R3.C < 0");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,ExpressionType.COMPARE_GREATERTHAN,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN,null,"R3");
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.INNER,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN,"R1","R2");
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A AND R1.C = R2.C");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  pn=compile("select * FROM  " + "R1 FULL JOIN R2 ON R1.A = R2.A AND R1.C < 0 AND R2.C > 0");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,ExpressionType.COMPARE_LESSTHAN,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN);
  pn=compile("select * FROM  " + "R1 JOIN R2 ON R1.A = R2.A FULL JOIN R3 ON R1.A = R3.C AND R1.C is NULL");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,ExpressionType.OPERATOR_IS_NULL,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN);
}
