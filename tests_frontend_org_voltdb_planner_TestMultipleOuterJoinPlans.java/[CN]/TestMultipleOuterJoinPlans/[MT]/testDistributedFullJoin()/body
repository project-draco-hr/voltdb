{
  List<AbstractPlanNode> lpn;
  AbstractPlanNode n;
  lpn=compileToFragments("select * FROM  " + "P1 FULL JOIN R2 ON P1.A = R2.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "R2 FULL JOIN P1 ON P1.A = R2.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "P1 FULL JOIN R2 ON P1.C = R2.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "P2 FULL JOIN R2 ON P2.A = R2.A AND R2.A > 0 AND P2.E < 0");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,ExpressionType.COMPARE_GREATERTHAN,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "P2 FULL JOIN R2 ON P2.E = R2.A AND P2.A > 0");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "P2 FULL JOIN R3 ON P2.A = R3.A AND R3.A > 0 AND P2.E < 0");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,ExpressionType.COMPARE_GREATERTHAN,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R3",null);
  lpn=compileToFragments("select * FROM  P1 FULL JOIN P4 ON P1.A = P4.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(1).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN,"P1","P4");
  lpn=compileToFragments("select * FROM P2 FULL JOIN P1 ON P1.A = P2.A AND P2.A > 0");
  assertEquals(2,lpn.size());
  n=lpn.get(1).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.FULL,null,null,null,PlanNodeType.SEQSCAN,PlanNodeType.INDEXSCAN,"P1","P2");
  verifyIndexScanNode(n.getInlinePlanNode(PlanNodeType.INDEXSCAN),IndexLookupType.EQ,ExpressionType.COMPARE_GREATERTHAN);
  failToCompile("select * FROM  P1 FULL JOIN P4 ON P1.C = P4.A ","Join of multiple partitioned tables has insufficient join criteria");
}
