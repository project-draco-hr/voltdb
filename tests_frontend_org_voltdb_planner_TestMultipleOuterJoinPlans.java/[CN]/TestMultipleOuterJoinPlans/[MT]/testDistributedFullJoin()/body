{
  List<AbstractPlanNode> lpn;
  AbstractPlanNode n;
  lpn=compileToFragments("select * FROM  " + "P1 FULL JOIN R2 ON P1.A = R2.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "R2 FULL JOIN P1 ON P1.A = R2.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "P1 FULL JOIN R2 ON P1.C = R2.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE,"R2",null);
  lpn=compileToFragments("select * FROM  " + "P1 FULL JOIN P4 ON P1.A = P4.A ");
  assertEquals(2,lpn.size());
  n=lpn.get(1).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.FULL,true,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN,"P1","P4");
  failToCompile("select * FROM  P1 FULL JOIN P4 ON P1.C = P4.A ","Join of multiple partitioned tables has insufficient join criteria");
}
