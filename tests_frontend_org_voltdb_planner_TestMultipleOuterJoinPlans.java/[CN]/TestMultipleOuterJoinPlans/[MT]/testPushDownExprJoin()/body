{
  AbstractPlanNode pn;
  AbstractPlanNode n;
  pn=compile("select * FROM R3, R2 LEFT JOIN R1 ON R1.C = R2.C WHERE R3.C = R2.C AND R3.A > 0");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN,null,"R1");
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.INNER,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.INDEXSCAN,PlanNodeType.SEQSCAN,"R3","R2");
  pn=compile("select * FROM R3, R2 LEFT JOIN R1 ON R1.C = R2.C  AND R3.A > 0 WHERE R3.C = R2.C");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,ExpressionType.COMPARE_GREATERTHAN,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN,null,"R1");
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.INNER,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN,"R3","R2");
  pn=compile("select * FROM R3 JOIN R2 ON R3.C = R2.C RIGHT JOIN R1 ON R1.C = R2.C  AND R3.A > 0");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,null,ExpressionType.CONJUNCTION_AND,null,PlanNodeType.SEQSCAN,PlanNodeType.NESTLOOP,"R1",null);
  n=n.getChild(1);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.INNER,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.SEQSCAN,"R3","R2");
  pn=compile("select * FROM R2, R3 LEFT JOIN R1 ON R1.C = R2.C WHERE R3.C = R2.C AND R3.A > 0");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN,null,"R1");
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.INNER,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.SEQSCAN,PlanNodeType.INDEXSCAN,"R2","R3");
  pn=compile("select * FROM R2, R3 LEFT JOIN R1 ON R1.C = R2.C WHERE R3.A = R2.C");
  n=pn.getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,null,ExpressionType.COMPARE_EQUAL,null,PlanNodeType.NESTLOOPINDEX,PlanNodeType.SEQSCAN,null,"R1");
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.INNER,null,null,null,PlanNodeType.SEQSCAN,null,"R2","R3");
}
