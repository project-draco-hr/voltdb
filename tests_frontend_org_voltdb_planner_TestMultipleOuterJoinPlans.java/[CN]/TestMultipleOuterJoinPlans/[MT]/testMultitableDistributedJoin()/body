{
  List<AbstractPlanNode> lpn;
  AbstractPlanNode n;
  lpn=compileToFragments("select *  FROM R3,R1 LEFT JOIN P2 ON R3.A = P2.A WHERE R3.A=R1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,true,PlanNodeType.NESTLOOPINDEX,PlanNodeType.RECEIVE);
  lpn=compileToFragments("select *  FROM P2,R1 LEFT JOIN R3 ON R3.A = P2.A WHERE P2.A=R1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.LEFT,false,PlanNodeType.NESTLOOPINDEX,PlanNodeType.INDEXSCAN);
  lpn=compileToFragments("select *  FROM R3,R1 LEFT JOIN P2 ON R3.A = P2.A WHERE R3.A=R1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,true,PlanNodeType.NESTLOOPINDEX,PlanNodeType.RECEIVE);
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.INNER,false,PlanNodeType.SEQSCAN,PlanNodeType.INDEXSCAN);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  lpn=compileToFragments("select *  FROM R1 LEFT JOIN P2 ON R1.A = P2.A, R3 WHERE R1.A=R3.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.INNER,false,PlanNodeType.NESTLOOP,PlanNodeType.SEQSCAN);
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOP,JoinType.LEFT,true,PlanNodeType.SEQSCAN,PlanNodeType.RECEIVE);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  lpn=compileToFragments("select *  FROM R3,P1 LEFT JOIN P2 ON R3.A = P2.A WHERE R3.A=P1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.LEFT,false,PlanNodeType.NESTLOOPINDEX,PlanNodeType.INDEXSCAN);
  n=n.getChild(0);
  verifyJoinNode(n,PlanNodeType.NESTLOOPINDEX,JoinType.INNER,false,PlanNodeType.SEQSCAN,PlanNodeType.INDEXSCAN);
}
