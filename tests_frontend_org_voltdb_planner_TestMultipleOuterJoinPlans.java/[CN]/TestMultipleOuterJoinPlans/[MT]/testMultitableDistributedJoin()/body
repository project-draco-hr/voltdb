{
  List<AbstractPlanNode> lpn=compileToFragments("select *  FROM R3,R1 LEFT JOIN P2 ON R3.A = P2.A WHERE R3.A=R1.A ");
  assertTrue(lpn.size() == 2);
  AbstractPlanNode n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(JoinType.LEFT == ((NestLoopPlanNode)n).getJoinType());
  AbstractPlanNode c=n.getChild(0);
  assertTrue(c instanceof NestLoopIndexPlanNode);
  lpn=compileToFragments("select *  FROM P2,R1 LEFT JOIN R3 ON R3.A = P2.A WHERE P2.A=R1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(JoinType.LEFT == ((NestLoopIndexPlanNode)n).getJoinType());
  c=n.getChild(0);
  assertTrue(c instanceof NestLoopIndexPlanNode);
  lpn=compileToFragments("select *  FROM R3,R1 LEFT JOIN P2 ON R3.A = P2.A WHERE R3.A=R1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(JoinType.LEFT == ((NestLoopPlanNode)n).getJoinType());
  c=n.getChild(0);
  assertTrue(c instanceof NestLoopIndexPlanNode);
  assertTrue(JoinType.INNER == ((NestLoopIndexPlanNode)c).getJoinType());
  c=n.getChild(1);
  assertTrue(c instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof SeqScanPlanNode);
  lpn=compileToFragments("select *  FROM R1 LEFT JOIN P2 ON R1.A = P2.A, R3 WHERE R1.A=R3.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(JoinType.INNER == ((NestLoopIndexPlanNode)n).getJoinType());
  n=n.getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  c=n.getChild(0);
  assertTrue(c instanceof SeqScanPlanNode);
  c=n.getChild(1);
  assertTrue(c instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof SeqScanPlanNode);
  lpn=compileToFragments("select *  FROM R3,P1 LEFT JOIN P2 ON R3.A = P2.A WHERE R3.A=P1.A ");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  assertTrue(JoinType.LEFT == ((NestLoopIndexPlanNode)n).getJoinType());
  c=n.getChild(0);
  assertTrue(c instanceof NestLoopIndexPlanNode);
  assertTrue(JoinType.INNER == ((NestLoopIndexPlanNode)c).getJoinType());
}
