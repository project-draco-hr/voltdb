{
  List<AbstractPlanNode> planNodes;
  planNodes=compileToFragments("SELECT * FROM (SELECT P1.A, R1.C FROM R1, P1,  " + "                (SELECT A, C FROM R2 LIMIT 5) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A");
  assertEquals(2,planNodes.size());
  checkPushedDownJoins(planNodes,3);
  planNodes=compileToFragments("SELECT     * " + "  FROM     (SELECT   P1.A, R1.C " + "              FROM   R1, P1, (SELECT     Distinct A   "+ "                                FROM     R2"+ "                                WHERE    A > 3) T0"+ "              WHERE  R1.A = T0.A ) T1, P2 "+ "  WHERE    T1.A = P2.A");
  for (  AbstractPlanNode apn : planNodes) {
    System.out.println(apn.toExplainPlanString());
  }
  assertEquals(2,planNodes.size());
  checkPushedDownJoins(planNodes,3);
  planNodes=compileToFragments("SELECT * FROM (SELECT P1.A, R1.C FROM R1, P1,  " + "                (SELECT COUNT(*) AS A FROM R2 where C > 3) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A");
  for (  AbstractPlanNode apn : planNodes) {
    System.out.println(apn.toExplainPlanString());
  }
  assertEquals(2,planNodes.size());
  checkPushedDownJoins(planNodes,3);
  planNodes=compileToFragments("SELECT * FROM (SELECT P1.A, R1.C FROM R1, P1,  " + "                (SELECT A, COUNT(*) C FROM R2 where C > 3 GROUP BY A) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A");
  for (  AbstractPlanNode apn : planNodes) {
    System.out.println(apn.toExplainPlanString());
  }
  assertEquals(2,planNodes.size());
  checkPushedDownJoins(planNodes,3);
  planNodes=compileToFragments("SELECT * FROM (SELECT P1.A, R1.C FROM R1, P1,  " + "                (SELECT A, C FROM R2 where C > 3 ) T0 where R1.A = T0.A ) T1, " + "              P2 "+ "where T1.A = P2.A");
  for (  AbstractPlanNode apn : planNodes) {
    System.out.println(apn.toExplainPlanString());
  }
  assertEquals(2,planNodes.size());
  checkPushedDownJoins(planNodes,3);
}
