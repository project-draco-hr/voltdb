{
  byte[] data=new byte[rowSize];
  byte shouldRollback=0;
  long currentRowCount=0;
  while (m_shouldContinue.get()) {
    r.nextBytes(data);
    try {
      currentRowCount=TxnId2Utils.getRowCount(client,tableName);
    }
 catch (    Exception e) {
      log.error("getrowcount exception",e);
      System.exit(-1);
    }
    try {
      int tc=batchSize * r.nextInt(99);
      while ((currentRowCount < tc) && (m_shouldContinue.get())) {
        CountDownLatch latch=new CountDownLatch(batchSize);
        for (int i=0; i < batchSize; i++) {
          long p=Math.abs(r.nextLong());
          m_permits.acquire();
          insertsTried++;
          client.callProcedure(new InsertCallback(latch),tableName.toUpperCase() + "TableInsert",p,data);
        }
        latch.await(10,TimeUnit.SECONDS);
        long nextRowCount=-1;
        try {
          nextRowCount=TxnId2Utils.getRowCount(client,tableName);
        }
 catch (        Exception e) {
          log.error("getrowcount exception",e);
          System.exit(-1);
        }
        if (nextRowCount == currentRowCount) {
          try {
            Thread.sleep(1000);
          }
 catch (          Exception e2) {
          }
        }
        currentRowCount=nextRowCount;
      }
    }
 catch (    Exception e) {
      log.error("TruncateTableLoader failed a TableInsert procedure call for table " + tableName,e);
      try {
        Thread.sleep(3000);
      }
 catch (      Exception e2) {
      }
    }
    try {
      currentRowCount=TxnId2Utils.getRowCount(client,tableName);
    }
 catch (    Exception e) {
      log.error("getrowcount exception",e);
      System.exit(-1);
    }
    try {
      log.debug("TruncateTableLoader truncate table..." + tableName + " current row count is "+ currentRowCount);
      shouldRollback=(byte)(r.nextInt(10) == 0 ? 1 : 0);
      long p=Math.abs(r.nextLong());
      String tp=this.truncateProcedure;
      if (tableName == "trup")       tp+=r.nextInt(100) < mpRatio * 100. ? "MP" : "SP";
      ClientResponse clientResponse=client.callProcedure(tableName.toUpperCase() + tp,p,shouldRollback);
      byte status=clientResponse.getStatus();
      if (status == ClientResponse.GRACEFUL_FAILURE || (shouldRollback == 0 && status == ClientResponse.USER_ABORT)) {
        log.error("TruncateTableLoader gracefully failed to truncate table " + tableName + " and this shoudn't happen. Exiting.");
        log.error(((ClientResponseImpl)clientResponse).toJSONString());
        Benchmark.printJStack();
        System.exit(-1);
      }
      if (status != ClientResponse.SUCCESS) {
        log.error("TruncateTableLoader ungracefully failed to truncate table " + tableName);
        log.error(((ClientResponseImpl)clientResponse).toJSONString());
      }
 else {
        nTruncates++;
      }
      shouldRollback=0;
    }
 catch (    ProcCallException e) {
      ClientResponseImpl cri=(ClientResponseImpl)e.getClientResponse();
      if (shouldRollback == 0) {
        if ((cri.getStatus() == ClientResponse.GRACEFUL_FAILURE) || (cri.getStatus() == ClientResponse.USER_ABORT)) {
          log.error("TruncateTableLoader failed a TruncateTable ProcCallException call for table " + tableName,e);
          Benchmark.printJStack();
          System.exit(-1);
        }
      }
    }
catch (    InterruptedIOException e) {
    }
catch (    Exception e) {
      log.error("TruncateTableLoader failed a non-proc call exception for table " + tableName,e);
      try {
        Thread.sleep(3000);
      }
 catch (      Exception e2) {
      }
    }
    try {
      currentRowCount=TxnId2Utils.getRowCount(client,tableName);
    }
 catch (    Exception e) {
      log.error("getrowcount exception",e);
      System.exit(-1);
    }
    try {
      log.debug("TruncateTableLoader scan agg table..." + tableName + " current row count is "+ currentRowCount);
      shouldRollback=(byte)(r.nextInt(10) == 0 ? 1 : 0);
      long p=Math.abs(r.nextLong());
      String sp=this.scanAggProcedure;
      if (tableName == "trup")       sp+=r.nextInt(100) < mpRatio * 100. ? "MP" : "SP";
      ClientResponse clientResponse=client.callProcedure(tableName.toUpperCase() + sp,p,shouldRollback);
      byte status=clientResponse.getStatus();
      if (status == ClientResponse.GRACEFUL_FAILURE || (shouldRollback == 0 && status == ClientResponse.USER_ABORT)) {
        log.error("TruncateTableLoader gracefully failed to scan-agg table " + tableName + " and this shoudn't happen. Exiting.");
        log.error(((ClientResponseImpl)clientResponse).toJSONString());
        Benchmark.printJStack();
        System.exit(-1);
      }
      if (status != ClientResponse.SUCCESS) {
        log.error("TruncateTableLoader ungracefully failed to scan-agg table " + tableName);
        log.error(((ClientResponseImpl)clientResponse).toJSONString());
      }
      shouldRollback=0;
    }
 catch (    ProcCallException e) {
      ClientResponseImpl cri=(ClientResponseImpl)e.getClientResponse();
      if (shouldRollback == 0) {
        if ((cri.getStatus() == ClientResponse.GRACEFUL_FAILURE) || (cri.getStatus() == ClientResponse.USER_ABORT)) {
          log.error("TruncateTableLoader failed a ScanAgg ProcCallException call for table " + tableName,e);
          Benchmark.printJStack();
          System.exit(-1);
        }
      }
    }
catch (    InterruptedIOException e) {
    }
catch (    Exception e) {
      log.error("TruncateTableLoader failed a non-proc call exception for table " + tableName,e);
      try {
        Thread.sleep(3000);
      }
 catch (      Exception e2) {
      }
    }
  }
  log.info("TruncateTableLoader normal exit for table " + tableName + " rows sent: "+ insertsTried+ " inserted: "+ rowsLoaded+ " truncates: "+ nTruncates);
}
