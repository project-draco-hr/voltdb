{
  Map<Integer,Integer> repsPerPart=new HashMap<Integer,Integer>();
  repsPerPart.put(0,2);
  repsPerPart.put(1,2);
  repsPerPart.put(2,2);
  repsPerPart.put(3,2);
  repsPerPart.put(4,1);
  int kfactor=2;
  int numberOfPartitions=5;
  int sitesPerHost=3;
  List<Integer> firstRejoin=Cartographer.computeReplacementPartitions(repsPerPart,kfactor,sitesPerHost,numberOfPartitions);
  assertEquals(3,firstRejoin.size());
  assertEquals((Integer)4,firstRejoin.get(0));
  assertEquals((Integer)0,firstRejoin.get(1));
  assertEquals((Integer)1,firstRejoin.get(2));
  for (  int partition : firstRejoin) {
    repsPerPart.put(partition,repsPerPart.get(partition) + 1);
  }
  List<Integer> secondRejoin=Cartographer.computeReplacementPartitions(repsPerPart,kfactor,sitesPerHost,numberOfPartitions);
  assertEquals(3,secondRejoin.size());
  assertEquals((Integer)2,secondRejoin.get(0));
  assertEquals((Integer)3,secondRejoin.get(1));
  assertEquals((Integer)4,secondRejoin.get(2));
}
