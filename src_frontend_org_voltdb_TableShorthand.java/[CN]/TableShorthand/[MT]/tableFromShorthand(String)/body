{
  String name="T";
  ColMeta[] columns=null;
  Matcher nameMatcher=m_namePattern.matcher(schema);
  if (nameMatcher.find()) {
    name=nameMatcher.group().trim();
  }
  Matcher columnDataMatcher=m_columnsPattern.matcher(schema);
  if (!columnDataMatcher.find()) {
    throw new IllegalArgumentException("No column data found in shorthand");
  }
  String[] columnData=columnDataMatcher.group().trim().split("\\s*,\\s*");
  int columnCount=columnData.length;
  columns=new ColMeta[columnCount];
  for (int i=0; i < columnCount; i++) {
    columns[i]=ColMeta.parse(columnData[i],i);
  }
  Matcher pkeyMatcher=m_pkeyPattern.matcher(schema);
  if (pkeyMatcher.find()) {
    String[] pkeyColData=pkeyMatcher.group().trim().split("\\s*,\\s*");
    for (int pkeyIndex=0; pkeyIndex < pkeyColData.length; pkeyIndex++) {
      String pkeyCol=pkeyColData[pkeyIndex];
      if (Character.isDigit(pkeyCol.charAt(0))) {
        int colIndex=Integer.parseInt(pkeyCol);
        columns[colIndex].pkeyIndex=pkeyIndex;
      }
 else {
        for (int colIndex=0; colIndex < columnCount; colIndex++) {
          if (columns[colIndex].name.equals(pkeyCol)) {
            columns[colIndex].pkeyIndex=pkeyIndex;
            break;
          }
        }
      }
    }
  }
  VoltTable table=new VoltTable(columns);
  table.m_name=name;
  return table;
}
