{
  String name;
  VoltType type=VoltType.BIGINT;
  int size=255;
  boolean unique=false;
  boolean nullable=true;
  String defaultValue=VoltTable.ColumnInfo.NO_DEFAULT_VALUE;
  try {
    String[] parts=colShorthand.trim().split(":",2);
    if (parts.length > 2)     throw new Exception();
    if (parts.length == 2)     name=parts[0].trim();
 else     name="C" + String.valueOf(index);
    String rest=parts[parts.length - 1].trim();
    Matcher typeMatcher=m_colTypePattern.matcher(rest);
    typeMatcher.find();
    type=VoltType.typeFromString(typeMatcher.group());
    Matcher sizeMatcher=m_colSizePattern.matcher(rest);
    if (sizeMatcher.find()) {
      String val=sizeMatcher.group();
      if (val.length() > 0) {
        size=Integer.parseInt(sizeMatcher.group());
      }
    }
    Matcher metaMatcher=m_colMetaPattern.matcher(rest);
    if (metaMatcher.find()) {
      String meta=metaMatcher.group().toUpperCase();
      if (meta.contains("N"))       nullable=false;
      if (meta.contains("U"))       unique=true;
    }
    Matcher defaultMatcher=m_colDefaultPattern.matcher(rest);
    if (defaultMatcher.find()) {
      defaultValue=defaultMatcher.group();
    }
  }
 catch (  Exception e) {
    String msg=String.format("Parse error while parsing column %d",index);
    throw new RuntimeException(msg,e);
  }
  ColMeta column=new ColMeta(name,type);
  column.defaultValue=defaultValue;
  column.nullable=nullable;
  column.size=size;
  column.unique=unique;
  return column;
}
