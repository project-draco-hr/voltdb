{
  assertEquals("Actual row has wrong number of columns",expectedRow.length,actualRow.getColumnCount());
  for (int i=0; i < expectedRow.length; ++i) {
    String msg="Row " + row + ", col "+ i+ ": ";
    Object expectedObj=expectedRow[i];
    if (expectedObj == null) {
      VoltType vt=actualRow.getColumnType(i);
      actualRow.get(i,vt);
      assertTrue(msg,actualRow.wasNull());
    }
 else     if (expectedObj instanceof GeographyPointValue) {
      assertApproximatelyEquals(msg,(GeographyPointValue)expectedObj,actualRow.getGeographyPointValue(i),epsilon);
    }
 else     if (expectedObj instanceof GeographyValue) {
      assertApproximatelyEquals(msg,(GeographyValue)expectedObj,actualRow.getGeographyValue(i),epsilon);
    }
 else     if (expectedObj instanceof Long) {
      long val=((Long)expectedObj).longValue();
      assertEquals(msg,val,actualRow.getLong(i));
    }
 else     if (expectedObj instanceof Integer) {
      long val=((Integer)expectedObj).longValue();
      assertEquals(msg,val,actualRow.getLong(i));
    }
 else     if (expectedObj instanceof Double) {
      double expectedValue=(Double)expectedObj;
      double actualValue=actualRow.getDouble(i);
      if (actualRow.wasNull()) {
        actualValue=Double.MIN_VALUE;
      }
      if (epsilon <= 0) {
        String fullMsg=msg + String.format("Expected value %f != actual value %f",expectedValue,actualValue);
        assertEquals(fullMsg,expectedValue,actualValue);
      }
 else {
        String fullMsg=msg + String.format("abs(Expected Value - Actual Value) = %e >= %e",Math.abs(expectedValue - actualValue),epsilon);
        assertTrue(fullMsg,Math.abs(expectedValue - actualValue) < epsilon);
      }
    }
 else     if (expectedObj instanceof String) {
      String val=(String)expectedObj;
      assertEquals(msg,val,actualRow.getString(i));
    }
 else {
      fail("Unexpected type in expected row: " + expectedObj.getClass().getSimpleName());
    }
  }
}
