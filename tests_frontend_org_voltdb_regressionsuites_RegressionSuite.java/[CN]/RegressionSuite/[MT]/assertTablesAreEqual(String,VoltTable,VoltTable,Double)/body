{
  assertEquals(prefix + "column count mismatch.  Expected: " + expectedRows.getColumnCount()+ " actual: "+ actualRows.getColumnCount(),expectedRows.getColumnCount(),actualRows.getColumnCount());
  int i=0;
  while (expectedRows.advanceRow()) {
    assertTrue(prefix + "too few actual rows; expected more than " + (i + 1),actualRows.advanceRow());
    for (int j=0; j < actualRows.getColumnCount(); j++) {
      String columnName=actualRows.getColumnName(j);
      String colPrefix=prefix + "row " + i+ ": column: "+ columnName+ ": ";
      VoltType actualTy=actualRows.getColumnType(j);
      VoltType expectedTy=expectedRows.getColumnType(j);
      assertEquals(colPrefix + "type mismatch",expectedTy,actualTy);
      Object expectedObj=expectedRows.get(j,expectedTy);
      Object actualObj=actualRows.get(j,actualTy);
      boolean expectedNull=expectedRows.wasNull();
      boolean actualNull=actualRows.wasNull();
      assertEquals(colPrefix + "null/not null mismatch",expectedNull,actualNull);
      if (!expectedNull) {
        String message=colPrefix + "values not equal: expected: " + expectedObj+ ", actual: "+ actualObj;
        if (expectedTy != VoltType.FLOAT) {
          assertEquals(message,expectedObj,actualObj);
        }
 else {
          assertNotNull("You pass in an epsilon to compare tables with floating point columns",epsilon);
          assertEquals(message,(Double)expectedObj,(Double)actualObj,epsilon);
        }
      }
    }
    i++;
  }
  assertFalse(prefix + "too many actual rows; expected only " + i,actualRows.advanceRow());
}
