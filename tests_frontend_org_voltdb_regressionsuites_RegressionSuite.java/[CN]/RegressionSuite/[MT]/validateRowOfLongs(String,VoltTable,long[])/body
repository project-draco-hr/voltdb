{
  int len=expected.length;
  assertTrue(vt.advanceRow());
  for (int i=0; i < len; i++) {
    String message=messagePrefix + "at column " + i+ ", ";
    long actual=-10000000;
    try {
      actual=vt.getLong(i);
    }
 catch (    IllegalArgumentException ex) {
      try {
        actual=(long)vt.getDouble(i);
      }
 catch (      IllegalArgumentException newEx) {
        try {
          actual=vt.getTimestampAsLong(i);
        }
 catch (        IllegalArgumentException exTm) {
          try {
            actual=vt.getDecimalAsBigDecimal(i).longValueExact();
          }
 catch (          IllegalArgumentException newerEx) {
            newerEx.printStackTrace();
            fail(message);
          }
        }
catch (        ArithmeticException newestEx) {
          newestEx.printStackTrace();
          fail(message);
        }
      }
    }
    if (expected[i] != Long.MIN_VALUE) {
      assertEquals(message,expected[i],actual);
    }
 else {
      VoltType type=vt.getColumnType(i);
      assertEquals(message + "expected null: ",Long.parseLong(type.getNullValue().toString()),actual);
    }
  }
}
