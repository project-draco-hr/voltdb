{
  String names[]={"john","scott","bruce"};
  String passwords[]={"piekos","jarr","reading"};
  int idx=(int)(Math.random() * names.length);
  String username=names[idx];
  String password=passwords[idx];
  while (warmupComplete.get() == false) {
    PhoneCallGenerator.PhoneCall call=switchboard.receive();
    try {
      ParameterSet pset=ParameterSet.fromArrayNoCopy(call.phoneNumber,call.contestantNumber,config.maxvotes);
      callProcOverJSON("Vote",pset,username,password,true);
    }
 catch (    Exception e) {
    }
  }
  while (benchmarkComplete.get() == false) {
    PhoneCallGenerator.PhoneCall call=switchboard.receive();
    try {
      ParameterSet pset=ParameterSet.fromArrayNoCopy(call.phoneNumber,call.contestantNumber,config.maxvotes);
      String res=callProcOverJSON("Vote",pset,username,password,true);
      Response response=responseFromJSON(res);
      assert(response.results[0].advanceRow());
      long resultCode=response.results[0].getLong(0);
      if (resultCode == Vote.ERR_INVALID_CONTESTANT) {
        badContestantVotes.incrementAndGet();
      }
 else       if (resultCode == Vote.ERR_VOTER_OVER_VOTE_LIMIT) {
        badVoteCountVotes.incrementAndGet();
      }
 else {
        assert(resultCode == Vote.VOTE_SUCCESSFUL);
        acceptedVotes.incrementAndGet();
      }
    }
 catch (    Exception e) {
      failedVotes.incrementAndGet();
      e.printStackTrace(System.out);
    }
  }
}
