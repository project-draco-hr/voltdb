{
  Map<R,Integer> rowIndex=Maps.indexMap(rowSpace);
  Map<R,Map<C,V>> rows=Maps.newLinkedHashMap();
  for (  R row : rowSpace) {
    rows.put(row,new LinkedHashMap<C,V>());
  }
  Map<C,Map<R,V>> columns=Maps.newLinkedHashMap();
  for (  C col : columnSpace) {
    columns.put(col,new LinkedHashMap<R,V>());
  }
  int[] iterationOrderRow=new int[cellList.size()];
  int[] iterationOrderColumn=new int[cellList.size()];
  for (int i=0; i < cellList.size(); i++) {
    Cell<R,C,V> cell=cellList.get(i);
    R rowKey=cell.getRowKey();
    C columnKey=cell.getColumnKey();
    V value=cell.getValue();
    iterationOrderRow[i]=rowIndex.get(rowKey);
    Map<C,V> thisRow=rows.get(rowKey);
    iterationOrderColumn[i]=thisRow.size();
    V oldValue=thisRow.put(columnKey,value);
    if (oldValue != null) {
      throw new IllegalArgumentException("Duplicate value for row=" + rowKey + ", column="+ columnKey+ ": "+ value+ ", "+ oldValue);
    }
    columns.get(columnKey).put(rowKey,value);
  }
  this.iterationOrderRow=iterationOrderRow;
  this.iterationOrderColumn=iterationOrderColumn;
  ImmutableMap.Builder<R,Map<C,V>> rowBuilder=new ImmutableMap.Builder<R,Map<C,V>>(rows.size());
  for (  Map.Entry<R,Map<C,V>> row : rows.entrySet()) {
    rowBuilder.put(row.getKey(),ImmutableMap.copyOf(row.getValue()));
  }
  this.rowMap=rowBuilder.build();
  ImmutableMap.Builder<C,Map<R,V>> columnBuilder=new ImmutableMap.Builder<C,Map<R,V>>(columns.size());
  for (  Map.Entry<C,Map<R,V>> col : columns.entrySet()) {
    columnBuilder.put(col.getKey(),ImmutableMap.copyOf(col.getValue()));
  }
  this.columnMap=columnBuilder.build();
}
