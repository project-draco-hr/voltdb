def parseState(self, node_data):
    for node in node_data:
        name = node['displayName']
        if (node['displayName'] == 'master'):
            name = '(master)'
        offline = node['offline']
        if offline:
            busy = NODE_STATE_BUSY
        else:
            busy = 'available'
        offlineCause = node['offlineCause']
        offlineCauseReason = node['offlineCauseReason']
        reason = node['offlineCauseReason']
        self.node_state_map[name] = busy
        short_matchobj = re.match('(volt\\d+[a-z]{1,2})', name)
        if (short_matchobj != None):
            short_name = short_matchobj.group(1)
            self.node_state_map[short_name] = busy
