def convert_type(mysql_type):
    '\n    Convert MySQL type to VoltDB type.\n    Return (volt_type, message)\n    message is a string with information about conversion issues when they occur.\n    '
    m = Global.re_type.match(mysql_type)
    if (not m):
        return ('VARCHAR(50)', MESSAGES.PARSE_ERROR)
    name = ''.join(m.group(1).upper().split())
    param = m.group(3)

    def noparam(volt_type, message):
        if param:
            return (volt_type, message)
        return (volt_type, None)
    if (name == 'TINYINT'):
        return noparam('TINYINT', MESSAGES.WIDTH_PARAM)
    if (name == 'SMALLINT'):
        return noparam('SMALLINT', MESSAGES.WIDTH_PARAM)
    if (name == 'MEDIUMINT'):
        return ('INTEGER', MESSAGES.MEDIUM_INT)
    if (name == 'INT'):
        return noparam('INTEGER', MESSAGES.WIDTH_PARAM)
    if (name == 'BIGINT'):
        return noparam('BIGINT', MESSAGES.WIDTH_PARAM)
    if (name in ('DECIMAL', 'NUMERIC')):
        return noparam('DECIMAL', MESSAGES.PREC_PARAMS)
    if (name in ('FLOAT', 'REAL', 'DOUBLE', 'DOUBLE PRECISION')):
        return noparam('FLOAT', MESSAGES.PREC_PARAMS)
    if (name == 'BIT'):
        nbytes = ((int(param) + 7) // 8)
        return (('VARBINARY(%d)' % nbytes), MESSAGES.BIT_TYPE)
    if (name == 'TIMESTAMP'):
        return ('TIMESTAMP', None)
    if (name in ('DATE', 'DATETIME', 'TIME', 'YEAR')):
        return ('TIMESTAMP', MESSAGES.DATE_TIME)
    if (name == 'CHAR'):
        return (('VARCHAR(%d)' % int(param)), MESSAGES.CHAR)
    if (name == 'VARCHAR'):
        return (('VARCHAR(%d)' % int(param)), None)
    if (name == 'ENUM'):
        return ('VARCHAR(50)', MESSAGES.ENUM)
    if (name == 'SET'):
        return ('VARCHAR(50)', MESSAGES.SET)
    if (name in ('TEXT', 'TINYTEXT', 'MEDIUMTEXT', 'LONGTEXT')):
        return ('VARCHAR(1024)', MESSAGES.TEXT)
    if (name == 'BINARY'):
        return (('VARBINARY(%d)' % int(param)), MESSAGES.BINARY)
    if (name == 'VARBINARY'):
        return (('VARBINARY(%d)' % int(param)), None)
    if (name in ('BLOB', 'TINYBLOB', 'MEDIUMBLOB', 'LONGBLOB')):
        return ('VARBINARY(1024)', MESSAGES.BLOB)
    return ('VARCHAR(50)', MESSAGES.UNSUPPORTED)
