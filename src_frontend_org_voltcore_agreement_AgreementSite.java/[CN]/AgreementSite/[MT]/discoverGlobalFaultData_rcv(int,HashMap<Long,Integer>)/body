{
  int responses=0;
  java.util.ArrayList<FailureSiteUpdateMessage> messages=new java.util.ArrayList<FailureSiteUpdateMessage>();
  HashMap<Long,Long> initiatorSafeInitPoint=new HashMap<Long,Long>();
  do {
    VoltMessage m=m_mailbox.recvBlocking(new Subject[]{Subject.FAILURE,Subject.FAILURE_SITE_UPDATE},5);
    if (m == null) {
      continue;
    }
    FailureSiteUpdateMessage fm=null;
    if (m.getSubject() == Subject.FAILURE_SITE_UPDATE.getId()) {
      fm=(FailureSiteUpdateMessage)m;
      messages.add(fm);
    }
 else     if (m.getSubject() == Subject.FAILURE.getId()) {
      Long newFault=((FaultMessage)m).failedSite;
      m_mailbox.deliverFront(m);
      m_recoveryLog.info("Agreement, Detected a concurrent failure from FaultDistributor, new failed site " + newFault);
      return null;
    }
    if (!m_pendingFailedSites.equals(fm.m_failedHSIds)) {
      if (!m_pendingFailedSites.containsAll(fm.m_failedHSIds)) {
        HashSet<Long> difference=new HashSet<Long>(fm.m_failedHSIds);
        difference.removeAll(m_pendingFailedSites);
        for (        Long siteId : difference) {
          m_messenger.reportForeignHostFailed(siteId.intValue());
        }
        m_recoveryLog.info("Detected a concurrent failure from " + MiscUtils.hsIdToString(fm.m_sourceHSId) + " with new failed sites "+ MiscUtils.hsIdCollectionToString(difference));
        m_mailbox.deliver(m);
        return null;
      }
 else {
        HashSet<Long> difference=new HashSet<Long>(m_pendingFailedSites);
        difference.removeAll(fm.m_failedHSIds);
        m_recoveryLog.info("Agreement, Discarding failure message from " + MiscUtils.hsIdToString(fm.m_sourceHSId) + " because it was missing failed sites "+ MiscUtils.hsIdCollectionToString(difference));
        continue;
      }
    }
    expectedResponseCount.put(fm.m_sourceHSId,expectedResponseCount.get(fm.m_sourceHSId) - 1);
    ++responses;
    m_recoveryLog.info("Agreement, Received failure message " + responses + " of "+ expectedResponses+ " from "+ MiscUtils.hsIdToString(fm.m_sourceHSId)+ " for failed sites "+ MiscUtils.hsIdCollectionToString(fm.m_failedHSIds)+ " safe txn id "+ fm.m_safeTxnId+ " failed site "+ fm.m_committedTxnId);
    m_recoveryLog.info("Agreement, expecting failures messages " + expectedResponseCount);
    if (!initiatorSafeInitPoint.containsKey(fm.m_initiatorForSafeTxnId)) {
      initiatorSafeInitPoint.put(fm.m_initiatorForSafeTxnId,Long.MIN_VALUE);
    }
    initiatorSafeInitPoint.put(fm.m_initiatorForSafeTxnId,Math.max(initiatorSafeInitPoint.get(fm.m_initiatorForSafeTxnId),fm.m_safeTxnId));
  }
 while (responses < expectedResponses);
  assert(!initiatorSafeInitPoint.containsValue(Long.MIN_VALUE));
  return initiatorSafeInitPoint;
}
