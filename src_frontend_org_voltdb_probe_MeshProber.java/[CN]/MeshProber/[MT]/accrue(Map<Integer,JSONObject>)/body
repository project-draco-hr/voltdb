{
  checkArgument(jos != null,"map of host ids and json object is null");
  ImmutableMap.Builder<Integer,HostCriteria> hcb=ImmutableMap.builder();
  for (  Map.Entry<Integer,JSONObject> e : jos.entrySet()) {
    HostCriteria hc=new HostCriteria(e.getValue());
    checkArgument(!hc.isUndefined(),"json boject for host id %s does not contain prober fields",e.getKey());
    hcb.put(e.getKey(),hc);
  }
  Map<Integer,HostCriteria> additions=hcb.build();
  Map<Integer,HostCriteria> expect;
  Map<Integer,HostCriteria> update;
  do {
    expect=m_hostCriteria.get();
    update=ImmutableMap.<Integer,HostCriteria>builder().putAll(Maps.filterKeys(expect,not(in(additions.keySet())))).putAll(additions).build();
  }
 while (!m_hostCriteria.compareAndSet(expect,update));
  determineStartActionIfNecessary(update);
}
