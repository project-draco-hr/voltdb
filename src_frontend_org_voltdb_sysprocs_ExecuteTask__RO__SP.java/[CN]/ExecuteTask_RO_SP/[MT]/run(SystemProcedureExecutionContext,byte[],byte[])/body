{
  ByteBuffer buffer=ByteBuffer.wrap(payload);
  int taskId=buffer.getInt();
  TaskType taskType=TaskType.values()[taskId];
switch (taskType) {
case SP_JAVA_GET_DRID_TRACKER:
    ParameterSet params=ParameterSet.fromArrayNoCopy(new Object[]{payload});
  int producerClusterId=(int)params.getParam(1);
Map<Integer,Map<Integer,DRConsumerDrIdTracker>> drIdTrackers=ctx.getDrAppliedTrackers();
long lastConsumerUniqueId=ctx.getDrLastAppliedUniqueId();
Map<Integer,DRConsumerDrIdTracker> producerPartitionMap=drIdTrackers.get(producerClusterId);
if (producerPartitionMap == null) {
producerPartitionMap=new HashMap<Integer,DRConsumerDrIdTracker>();
}
JSONStringer stringer=new JSONStringer();
try {
stringer.key(Integer.toString(producerClusterId));
stringer.object();
for (Map.Entry<Integer,DRConsumerDrIdTracker> e : producerPartitionMap.entrySet()) {
stringer.key(e.getKey().toString());
stringer.object();
stringer.key("lastConsumerUniqueId").value(lastConsumerUniqueId);
ExtensibleSnapshotDigestData.serializeConsumerDrIdTrackerToJSON(stringer,e.getValue());
stringer.endObject();
}
stringer.endObject();
}
 catch (JSONException e) {
throw new VoltAbortException("DRConsumerDrIdTracker could not be converted to JSON");
}
setAppStatusString(stringer.toString());
default :
throw new VoltAbortException("Unable to find the task associated with the given task id");
}
}
