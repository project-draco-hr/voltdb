{
  ByteBuffer buffer=ByteBuffer.wrap(payload);
  int taskId=buffer.getInt();
  TaskType taskType=TaskType.values()[taskId];
switch (taskType) {
case SP_JAVA_GET_DRID_TRACKER:
    ParameterSet params=ParameterSet.fromArrayNoCopy(new Object[]{payload});
  int producerClusterId=(int)params.getParam(1);
Integer producerPartitionId=(int)params.getParam(2);
DRConsumerDrIdTracker tracker;
Map<Integer,Map<Integer,DRConsumerDrIdTracker>> drIdTrackers=ctx.getDrAppliedTrackers();
Map<Integer,DRConsumerDrIdTracker> producerPartitionMap=drIdTrackers.get(producerClusterId);
if (producerPartitionMap != null) {
tracker=producerPartitionMap.get(producerPartitionId);
if (tracker == null) {
tracker=new DRConsumerDrIdTracker(DRLogSegmentId.makeEmptyDRId(producerClusterId),Long.MIN_VALUE,Long.MIN_VALUE);
}
}
 else {
tracker=new DRConsumerDrIdTracker(DRLogSegmentId.makeEmptyDRId(producerClusterId),Long.MIN_VALUE,Long.MIN_VALUE);
}
JSONStringer stringer=new JSONStringer();
try {
ExtensibleSnapshotDigestData.serializeConsumerDrIdTrackerToJSON(stringer,producerPartitionId,tracker);
}
 catch (JSONException e) {
throw new VoltAbortException("DRConsumerDrIdTracker could not be converted to JSON");
}
setAppStatusString(stringer.toString());
default :
throw new VoltAbortException("Unable to find the task associated with the given task id");
}
}
