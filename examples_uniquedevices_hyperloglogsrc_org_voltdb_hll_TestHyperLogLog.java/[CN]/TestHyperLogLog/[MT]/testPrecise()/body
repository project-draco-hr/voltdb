{
  int cardinality=1000000000;
  int b=12;
  HyperLogLog baseline=new HyperLogLog(b);
  HyperLogLog guava128=new HyperLogLog(b);
  HashFunction hf128=Hashing.murmur3_128();
  for (int j=0; j < cardinality; j++) {
    Double val=Math.random();
    String valString=val.toString();
    baseline.offer(valString);
    guava128.offerHashed(hf128.hashString(valString,Charsets.UTF_8).asLong());
    if (j > 0 && j % 1000000 == 0) {
      System.out.println("current count: " + j);
    }
  }
  long baselineEstimate=baseline.cardinality();
  long g128Estimate=guava128.cardinality();
  double se=cardinality * (1.04 / Math.sqrt(Math.pow(2,b)));
  double baselineError=(baselineEstimate - cardinality) / (double)cardinality;
  double g128Error=(g128Estimate - cardinality) / (double)cardinality;
  System.out.format("b: %f g128 %f",baselineError,g128Error);
  assertTrue("baseline estimate bigger than expected",baselineEstimate >= cardinality - (2 * se));
  assertTrue("baseline estimate smaller than expected",baselineEstimate <= cardinality + (2 * se));
  assertTrue("g128 estimate bigger than expected",g128Estimate >= cardinality - (2 * se));
  assertTrue("g128 estimate smaller than expected",g128Estimate <= cardinality + (2 * se));
}
