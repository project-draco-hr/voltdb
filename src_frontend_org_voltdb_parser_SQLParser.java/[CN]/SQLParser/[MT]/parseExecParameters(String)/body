{
  final String SafeParamStringValuePattern="#(SQL_PARSER_SAFE_PARAMSTRING)";
  ArrayList<String> originalString=new ArrayList<String>();
  Matcher stringMatcher=SingleQuotedString.matcher(paramText);
  StringBuilder safeText=new StringBuilder();
  while (stringMatcher.find()) {
    safeText.append(paramText.substring(0,stringMatcher.start()));
    String asMatched=stringMatcher.group();
    if (SingleQuotedStringContainingParameterSeparators.matcher(asMatched).matches()) {
      originalString.add(asMatched);
      safeText.append(SafeParamStringValuePattern);
    }
 else {
      safeText.append(asMatched);
    }
    paramText=paramText.substring(stringMatcher.end());
    stringMatcher=SingleQuotedString.matcher(paramText);
  }
  safeText.append(paramText);
  ArrayList<String> params=new ArrayList<String>();
  int subCount=0;
  int neededSubs=originalString.size();
  String[] split=safeText.toString().split("[\\s,]+");
  for (  String fragment : split) {
    if (fragment.isEmpty()) {
      continue;
    }
    if (subCount < neededSubs) {
      while (fragment.indexOf(SafeParamStringValuePattern) > -1) {
        fragment=fragment.replace(SafeParamStringValuePattern,originalString.get(subCount));
        ++subCount;
      }
    }
    params.add(fragment);
  }
  assert(subCount == neededSubs);
  return params;
}
