{
  Matcher fileMatcher=FileToken.matcher(statement);
  if (!fileMatcher.lookingAt()) {
    return null;
  }
  String remainder=statement.substring(fileMatcher.end(),statement.length());
  Matcher inlineBatchMatcher=DashInlineBatchToken.matcher(remainder);
  if (inlineBatchMatcher.lookingAt()) {
    remainder=remainder.substring(inlineBatchMatcher.end(),remainder.length());
    Matcher delimiterMatcher=DelimiterToken.matcher(remainder);
    if (delimiterMatcher.matches()) {
      String delimiter=delimiterMatcher.group(1);
      return new FileInfo(parentContext,FileOption.INLINEBATCH,delimiter);
    }
    throw new SQLParser.Exception("Did not find valid delimiter for \"file -inlinebatch\" command.");
  }
  FileOption option=FileOption.PLAIN;
  Matcher batchMatcher=DashBatchToken.matcher(remainder);
  if (batchMatcher.lookingAt()) {
    option=FileOption.BATCH;
    remainder=remainder.substring(batchMatcher.end(),remainder.length());
  }
  Matcher filenameMatcher=FilenameToken.matcher(remainder);
  String filename=null;
  if (filenameMatcher.matches()) {
    filename=filenameMatcher.group(1);
    filename=filename.trim();
  }
  if (filename == null || filename.length() == 0) {
    String msg=String.format("Did not find valid file name in \"file%s\" command.",option == FileOption.BATCH ? " -batch" : "");
    throw new SQLParser.Exception(msg);
  }
  if (filename.startsWith("~")) {
    filename=filename.replace("~",System.getProperty("user.home"));
  }
  return new FileInfo(parentContext,option,filename);
}
