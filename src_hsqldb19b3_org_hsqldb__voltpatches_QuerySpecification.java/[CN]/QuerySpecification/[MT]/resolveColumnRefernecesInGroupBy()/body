{
  if (!isAggregated) {
    return;
  }
  if (unresolvedExpressions == null || unresolvedExpressions.isEmpty()) {
    return;
  }
  HashSet uniqueSet=new HashSet();
  for (int i=0; i < unresolvedExpressions.size(); i++) {
    Object element=unresolvedExpressions.get(i);
    uniqueSet.add(element);
  }
  HsqlList newUnresolvedExpressions=new ArrayListIdentity();
  Iterator iter=uniqueSet.iterator();
  while (iter.hasNext()) {
    Expression element=(Expression)iter.next();
    int k=indexLimitVisible;
    for (; k < indexStartOrderBy; k++) {
      if (element.equals(exprColumns[k])) {
        break;
      }
    }
    if (exprColumns[k].opType != OpTypes.COLUMN) {
      continue;
    }
    ExpressionColumn exprCol=(ExpressionColumn)exprColumns[k];
    String alias=exprCol.getColumnName();
    boolean hasFound=false;
    for (int j=0; j < indexLimitVisible; j++) {
      Expression selectCol=exprColumns[j];
      if (selectCol.isAggregate) {
        continue;
      }
      if (alias.equals(selectCol.alias.name)) {
        hasFound=true;
        exprColumns[k]=selectCol;
        exprColumnList.set(k,selectCol);
        break;
      }
    }
    if (!hasFound) {
      newUnresolvedExpressions.add(element);
    }
  }
  unresolvedExpressions=newUnresolvedExpressions;
}
