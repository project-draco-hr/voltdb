{
  tempSet.clear();
  if (isGrouped) {
    for (int i=indexLimitVisible; i < indexLimitVisible + groupByColumnCount; i++) {
      Expression.collectAllExpressions(tempSet,exprColumns[i],Expression.aggregateFunctionSet,Expression.subqueryExpressionSet);
      if (!tempSet.isEmpty()) {
        throw Error.error(ErrorCode.X_42572,((Expression)tempSet.get(0)).getSQL());
      }
    }
    for (int i=0; i < indexLimitVisible; i++) {
      if (!exprColumns[i].isComposedOf(exprColumns,indexLimitVisible,indexLimitVisible + groupByColumnCount,Expression.subqueryAggregateExpressionSet)) {
        tempSet.add(exprColumns[i]);
      }
    }
    for (int i=indexStartOrderBy; i < indexStartAggregates; i++) {
      if (!exprColumns[i].isComposedOf(exprColumns,indexLimitVisible,indexLimitVisible + groupByColumnCount,Expression.subqueryAggregateExpressionSet)) {
        tempSet.add(exprColumns[i]);
      }
    }
    if (!tempSet.isEmpty() && !resolveForGroupBy(tempSet)) {
      throw Error.error(ErrorCode.X_42574,((Expression)tempSet.get(0)).getSQL());
    }
  }
 else   if (isAggregated) {
    for (int i=0; i < indexLimitVisible; i++) {
      Expression.collectAllExpressions(tempSet,exprColumns[i],Expression.columnExpressionSet,Expression.aggregateFunctionSet);
      if (!tempSet.isEmpty()) {
        throw Error.error(ErrorCode.X_42574,((Expression)tempSet.get(0)).getSQL());
      }
    }
  }
  tempSet.clear();
  if (havingCondition != null) {
    if (unresolvedExpressions != null) {
      tempSet.addAll(unresolvedExpressions);
    }
    for (int i=indexLimitVisible; i < indexLimitVisible + groupByColumnCount; i++) {
      tempSet.add(exprColumns[i]);
    }
    if (!havingCondition.isComposedOf(tempSet,Expression.subqueryAggregateExpressionSet)) {
      throw Error.error(ErrorCode.X_42573);
    }
    tempSet.clear();
  }
  if (isDistinctSelect) {
    int orderCount=sortAndSlice.getOrderLength();
    for (int i=0; i < orderCount; i++) {
      Expression e=(Expression)sortAndSlice.exprList.get(i);
      if (e.queryTableColumnIndex != -1) {
        continue;
      }
      if (!e.isComposedOf(exprColumns,0,indexLimitVisible,Expression.emptyExpressionSet)) {
        throw Error.error(ErrorCode.X_42576);
      }
    }
  }
  if (isGrouped) {
    int orderCount=sortAndSlice.getOrderLength();
    for (int i=0; i < orderCount; i++) {
      Expression e=(Expression)sortAndSlice.exprList.get(i);
      if (e.queryTableColumnIndex != -1) {
        continue;
      }
      if (!e.isComposedOf(exprColumns,0,indexLimitVisible + groupByColumnCount,Expression.emptyExpressionSet)) {
        throw Error.error(ErrorCode.X_42576);
      }
    }
  }
  simpleLimit=(!isDistinctSelect && !isGrouped && !sortAndSlice.hasOrder());
  if (!isAggregated) {
    return;
  }
  OrderedHashSet expressions=new OrderedHashSet();
  OrderedHashSet columnExpressions=new OrderedHashSet();
  for (int i=indexStartAggregates; i < indexLimitExpressions; i++) {
    Expression e=exprColumns[i];
    Expression c=new ExpressionColumn(e,i,resultRangePosition);
    expressions.add(e);
    columnExpressions.add(c);
  }
  for (int i=0; i < indexStartOrderBy; i++) {
    if (exprColumns[i].isAggregate) {
      continue;
    }
    Expression e=exprColumns[i];
    if (expressions.add(e)) {
      Expression c=new ExpressionColumn(e,i,resultRangePosition);
      columnExpressions.add(c);
    }
  }
  int orderCount=sortAndSlice.getOrderLength();
  for (int i=0; i < orderCount; i++) {
    Expression e=(Expression)sortAndSlice.exprList.get(i);
    if (e.getLeftNode().isAggregate) {
      e.isAggregate=true;
    }
  }
  for (int i=indexStartOrderBy; i < indexStartAggregates; i++) {
    if (exprColumns[i].getLeftNode().isAggregate) {
      exprColumns[i].isAggregate=true;
    }
  }
  for (int i=0; i < indexStartAggregates; i++) {
    Expression e=exprColumns[i];
    if (!e.isAggregate) {
      continue;
    }
    aggregateCheck[i]=true;
    e.convertToSimpleColumn(expressions,columnExpressions);
  }
  for (int i=0; i < aggregateSet.size(); i++) {
    Expression e=(Expression)aggregateSet.get(i);
    e.convertToSimpleColumn(expressions,columnExpressions);
  }
  if (resolvedSubqueryExpressions != null) {
    for (int i=0; i < resolvedSubqueryExpressions.size(); i++) {
      Expression e=(Expression)resolvedSubqueryExpressions.get(i);
      e.convertToSimpleColumn(expressions,columnExpressions);
    }
  }
}
