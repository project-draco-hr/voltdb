{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table BLAH (" + "ID int default 0 not null, " + "VAL varchar(32) default null,"+ "PRIMARY KEY(ID));\n"+ "create table DROPME ("+ "ID int default 0 not null, "+ "VAL varchar(32) default null,"+ "PRIMARY KEY(ID))\n;"+ "create table DROPME_R ("+ "ID int default 0 not null, "+ "VAL varchar(32) default null,"+ "PRIMARY KEY(ID));");
  builder.addPartitionInfo("BLAH","ID");
  builder.addPartitionInfo("DROPME","ID");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    ClientResponse resp=m_client.callProcedure("@SystemCatalog","TABLES");
    System.out.println(resp.getResults()[0]);
    assertTrue(findTableInSystemCatalogResults("DROPME"));
    try {
      m_client.callProcedure("@AdHoc","drop table DROPME;");
    }
 catch (    ProcCallException pce) {
      fail("drop table should have succeeded");
    }
    resp=m_client.callProcedure("@SystemCatalog","TABLES");
    System.out.println(resp.getResults()[0]);
    assertFalse(findTableInSystemCatalogResults("DROPME"));
    resp=m_client.callProcedure("@SystemCatalog","TABLES");
    System.out.println(resp.getResults()[0]);
    assertTrue(findTableInSystemCatalogResults("DROPME_R"));
    try {
      m_client.callProcedure("@AdHoc","drop table DROPME_R;");
    }
 catch (    ProcCallException pce) {
      fail("drop table should have succeeded");
    }
    resp=m_client.callProcedure("@SystemCatalog","TABLES");
    System.out.println(resp.getResults()[0]);
    assertFalse(findTableInSystemCatalogResults("DROPME_R"));
    boolean threw=false;
    try {
      m_client.callProcedure("@AdHoc","drop table DROPME;");
    }
 catch (    ProcCallException pce) {
      assertTrue(pce.getMessage().contains("object not found: DROPME"));
      threw=true;
    }
    assertTrue("Dropping bad table should have failed",threw);
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","drop table DROPME IF EXISTS;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertFalse("Dropping bad table with IF EXISTS should not have failed",threw);
  }
  finally {
    teardownSystem();
  }
}
