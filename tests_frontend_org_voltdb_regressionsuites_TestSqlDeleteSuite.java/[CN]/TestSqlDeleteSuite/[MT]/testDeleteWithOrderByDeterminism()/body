{
  if (isHSQL()) {
    return;
  }
  Client client=getClient();
  verifyStmtFails(client,"DELETE FROM R1 ORDER BY NUM ASC","DELETE statement with ORDER BY but no LIMIT or OFFSET is not allowed.");
  verifyStmtFails(client,"DELETE FROM R1 LIMIT 1","DELETE statement with LIMIT or OFFSET but no ORDER BY would produce non-deterministic results.");
  verifyStmtFails(client,"DELETE FROM R1 OFFSET 1","PlanningErrorException");
  verifyStmtFails(client,"DELETE FROM R1 LIMIT 1 OFFSET 1","DELETE statement with LIMIT or OFFSET but no ORDER BY would produce non-deterministic results.");
  verifyStmtFails(client,"DELETE FROM R1 OFFSET 1 LIMIT 1","DELETE statement with LIMIT or OFFSET but no ORDER BY would produce non-deterministic results.");
  verifyStmtFails(client,"DELETE FROM P1_VIEW ORDER BY ID ASC LIMIT 1","INSERT, UPDATE, or DELETE not permitted for view");
  verifyStmtFails(client,"DELETE FROM P1 WHERE ID < 50 ORDER BY NUM DESC LIMIT 1","Only single-partition DELETE statements may contain ORDER BY with LIMIT and/or OFFSET clauses");
  verifyStmtFails(client,"DELETE FROM P1 WHERE ID = 1 ORDER BY RATIO LIMIT 1","statement manipulates data in a non-deterministic way");
  verifyStmtFails(client,"DELETE FROM P4 WHERE ID = 1 ORDER BY RATIO LIMIT 1","statement manipulates data in a non-deterministic way");
  verifyStmtFails(client,"DELETE FROM P4 WHERE ID = 1 ORDER BY NUM LIMIT 1","statement manipulates data in a non-deterministic way");
  insertMoreRows(client,"P4",1,50);
  VoltTable vt=client.callProcedure("@AdHoc","DELETE FROM P4 WHERE ID = 0 ORDER BY RATIO, NUM LIMIT 9").getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{9});
  insertMoreRows(client,"P5",1,20);
  vt=client.callProcedure("@AdHoc","DELETE FROM P5 WHERE ID = 0 ORDER BY NUM, DESC, ID, RATIO LIMIT 13").getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{13});
}
