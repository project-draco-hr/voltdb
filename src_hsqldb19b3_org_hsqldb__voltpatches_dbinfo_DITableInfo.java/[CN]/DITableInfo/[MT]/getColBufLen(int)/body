{
  int size;
  int type;
  ColumnSchema column;
  column=table.getColumn(i);
  type=column.getDataType().getJDBCTypeCode();
switch (type) {
case Types.SQL_CHAR:
case Types.SQL_CLOB:
case Types.VARCHAR_IGNORECASE:
case Types.SQL_VARCHAR:
{
      size=column.getDataType().precision > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)column.getDataType().precision;
      if (size == 0) {
      }
 else       if (size > HALF_MAX_INT) {
        size=0;
      }
 else {
        size=2 * size;
      }
      break;
    }
case Types.SQL_BINARY:
case Types.SQL_BLOB:
case Types.SQL_VARBINARY:
{
    size=column.getDataType().precision > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)column.getDataType().precision;
    break;
  }
case Types.SQL_BIGINT:
case Types.SQL_DOUBLE:
case Types.SQL_FLOAT:
case Types.SQL_DATE:
case Types.SQL_REAL:
case Types.SQL_TIME_WITH_TIME_ZONE:
case Types.SQL_TIME:
{
  size=8;
  break;
}
case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:
case Types.SQL_TIMESTAMP:
{
size=12;
break;
}
case Types.SQL_INTEGER:
case Types.SQL_SMALLINT:
case Types.TINYINT:
{
size=4;
break;
}
case Types.SQL_BOOLEAN:
{
size=1;
break;
}
default :
{
size=0;
break;
}
}
return (size > 0) ? ValuePool.getInt(size) : null;
}
