{
class ReferenceSet {
    int lower(    int key){
      return ascending ? lowerAscending(key) : higherAscending(key);
    }
    int floor(    int key){
      return ascending ? floorAscending(key) : ceilingAscending(key);
    }
    int ceiling(    int key){
      return ascending ? ceilingAscending(key) : floorAscending(key);
    }
    int higher(    int key){
      return ascending ? higherAscending(key) : lowerAscending(key);
    }
    int first(){
      return ascending ? firstAscending() : lastAscending();
    }
    int last(){
      return ascending ? lastAscending() : firstAscending();
    }
    int lowerAscending(    int key){
      return floorAscending(key - 1);
    }
    int floorAscending(    int key){
      if (key < min)       return -1;
 else       if (key > max)       key=max;
      while (key >= min) {
        if (bs.get(key))         return key;
        key--;
      }
      return -1;
    }
    int ceilingAscending(    int key){
      if (key < min)       key=min;
 else       if (key > max)       return -1;
      int result=bs.nextSetBit(key);
      return result > max ? -1 : result;
    }
    int higherAscending(    int key){
      return ceilingAscending(key + 1);
    }
    private int firstAscending(){
      int result=ceilingAscending(min);
      return result > max ? -1 : result;
    }
    private int lastAscending(){
      int result=floorAscending(max);
      return result < min ? -1 : result;
    }
  }
  ReferenceSet rs=new ReferenceSet();
  int size=0;
  for (int i=min; i <= max; i++) {
    boolean bsContainsI=bs.get(i);
    assertEquals(bsContainsI,map.containsKey(i));
    if (bsContainsI)     size++;
  }
  assertEquals(size,map.size());
  int size2=0;
  int previousKey=-1;
  for (  int key : map.keySet()) {
    assertTrue(bs.get(key));
    size2++;
    assertTrue(previousKey < 0 || (ascending ? key - previousKey > 0 : key - previousKey < 0));
    previousKey=key;
  }
  assertEquals(size2,size);
  for (int key=min - 1; key <= max + 1; key++) {
    assertEq(map.lowerKey(key),rs.lower(key));
    assertEq(map.floorKey(key),rs.floor(key));
    assertEq(map.higherKey(key),rs.higher(key));
    assertEq(map.ceilingKey(key),rs.ceiling(key));
  }
  if (map.size() != 0) {
    assertEq(map.firstKey(),rs.first());
    assertEq(map.lastKey(),rs.last());
  }
 else {
    assertEq(rs.first(),-1);
    assertEq(rs.last(),-1);
    try {
      map.firstKey();
      shouldThrow();
    }
 catch (    NoSuchElementException success) {
    }
    try {
      map.lastKey();
      shouldThrow();
    }
 catch (    NoSuchElementException success) {
    }
  }
}
