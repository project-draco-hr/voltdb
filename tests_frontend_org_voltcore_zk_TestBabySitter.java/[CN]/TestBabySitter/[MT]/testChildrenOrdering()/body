{
  final Semaphore sem=new Semaphore(0);
  final AtomicReference<List<String>> latestChildren=new AtomicReference<List<String>>();
  BabySitter.Callback cb=new BabySitter.Callback(){
    @Override public void run(    List<String> children){
      latestChildren.set(children);
      sem.release();
    }
  }
;
  ZooKeeper zk=getClient(0);
  zk.create("/babysitterroot",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  final String node6=zk.create("/babysitterroot/6_",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);
  zk.create("/babysitterroot/7_",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);
  zk.create("/babysitterroot/10_",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);
  Pair<BabySitter,List<String>> pair=BabySitter.blockingFactory(zk,"/babysitterroot",cb);
  BabySitter bs=pair.getFirst();
  sem.acquire();
  assertEquals(Lists.newArrayList(6l,7l,10l),VoltZK.childrenToReplicaHSIds(latestChildren.get()));
  zk.delete(node6,-1);
  sem.acquire();
  assertEquals(Lists.newArrayList(7l,10l),VoltZK.childrenToReplicaHSIds(latestChildren.get()));
  bs.shutdown();
}
