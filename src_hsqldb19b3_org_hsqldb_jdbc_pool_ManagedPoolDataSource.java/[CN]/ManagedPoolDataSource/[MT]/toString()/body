{
  int timeout=0;
  try {
    timeout=getLoginTimeout();
  }
 catch (  SQLException se) {
    throw new RuntimeException("Failed to retrieve the Login Timeout value");
  }
  StringBuffer sb=new StringBuffer(ManagedPoolDataSource.class.getName() + " instance:\n    User:  " + getUsername()+ "\n    Url:  "+ getUrl()+ "\n    Login Timeout:  "+ timeout+ "\n    Num ACTIVE:  "+ getNumActive()+ "\n    Num IDLE:  "+ getNumIdle());
  if (doResetAutoCommit) {
    sb.append("\n    Default auto-commit: " + getDefaultAutoCommit());
  }
  if (doResetReadOnly) {
    sb.append("\n    Default read-only: " + getDefaultReadOnly());
  }
  if (doResetTransactionIsolation) {
    sb.append("\n    Default trans. lvl.: " + getDefaultTransactionIsolation());
  }
  if (doResetCatalog) {
    sb.append("\n    Default catalog: " + getDefaultCatalog());
  }
  return sb.toString() + "\n    Max Active: " + getMaxActive()+ "\n    Init Size: "+ getInitialSize()+ "\n    Conn Props: "+ getConnectionProperties()+ "\n    Validation Query: "+ validationQuery+ '\n';
}
