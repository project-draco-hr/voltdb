{
  pns=compileToFragments("SELECT F_PKEY FROM RF GROUP BY F_PKEY LIMIT 5");
  checkGroupByOnlyPlanWithLimit(false,false,true,true);
  pns=compileToFragments("SELECT F_D1 FROM RF GROUP BY F_D1 LIMIT 5");
  checkGroupByOnlyPlanWithLimit(false,false,true,true);
  pns=compileToFragments("SELECT F_PKEY FROM F GROUP BY F_PKEY LIMIT 5");
  checkGroupByOnlyPlanWithLimit(true,false,true,true);
  String expectedStr=" inline Serial AGGREGATION ops\n" + "        inline LIMIT 5";
  AbstractPlanNode.disableVerboseExplainForDebugging();
  AbstractExpression.disableVerboseExplainForDebugging();
  String explainPlan="";
  for (  AbstractPlanNode apn : pns) {
    explainPlan+=apn.toExplainPlanString();
  }
  assertTrue(explainPlan.contains(expectedStr));
  AbstractPlanNode.enableVerboseExplainForDebugging();
  AbstractExpression.enableVerboseExplainForDebugging();
  pns=compileToFragments("SELECT A3, COUNT(*) FROM T3 GROUP BY A3 LIMIT 5");
  checkGroupByOnlyPlanWithLimit(true,false,true,true);
  pns=compileToFragments("SELECT A3, B3, COUNT(*) FROM T3 GROUP BY A3, B3 LIMIT 5");
  checkGroupByOnlyPlanWithLimit(true,false,true,true);
  pns=compileToFragments("SELECT A3, B3, COUNT(*) FROM T3 WHERE A3 > 1 GROUP BY A3, B3 LIMIT 5");
  checkGroupByOnlyPlanWithLimit(true,true,true,false);
  pns=compileToFragments("SELECT F_VAL2 FROM RF GROUP BY F_VAL2 LIMIT 5");
  checkGroupByOnlyPlanWithLimit(false,true,true,false);
}
