{
  AbstractPlanNode p;
  List<AbstractPlanNode> pns;
  pns=compileToFragments("SELECT A, count(B) from R2 where B > 2 group by A;");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof IndexScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  assertTrue(p.toExplainPlanString().contains("primary key index"));
  pns=compileToFragments("SELECT A, count(B) from R2 where B > 3 group by A;");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof IndexScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.AGGREGATE));
  assertTrue(p.toExplainPlanString().contains("PARTIAL_IDX_R2"));
  pns=compileToFragments("SELECT A, count(B) from R2 where A > 5 and B > 3 group by A;");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof IndexScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.AGGREGATE));
  assertTrue(p.toExplainPlanString().contains("PARTIAL_IDX_R2"));
  pns=compileToFragments("SELECT A, count(B) from R2 where B > 3 group by A order by A;");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof IndexScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.AGGREGATE));
  assertTrue(p.toExplainPlanString().contains("PARTIAL_IDX_R2"));
  pns=compileToFragments("SELECT C, A, MAX(B) FROM R2 WHERE A > 0 and B > 3 GROUP BY C, A");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertEquals(PlanNodeType.INDEXSCAN,p.getPlanNodeType());
  assertNotNull(p.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  assertTrue(p.toExplainPlanString().contains("PARTIAL_IDX_R2"));
  pns=compileToFragments("SELECT F_D1, F_VAL1, MAX(F_VAL2) FROM F WHERE F_D1 > 0 GROUP BY F_D1, F_VAL1 ORDER BY F_D1, MAX(F_VAL2)");
  assertEquals(2,pns.size());
  p=pns.get(1).getChild(0);
  assertEquals(PlanNodeType.INDEXSCAN,p.getPlanNodeType());
  assertNotNull(p.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  assertTrue(p.toExplainPlanString().contains("COL_F_TREE1"));
  pns=compileToFragments("SELECT F_VAL1, F_VAL2, MAX(F_VAL3) FROM RF WHERE F_VAL1 > 0 GROUP BY F_VAL2, F_VAL1");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertEquals(PlanNodeType.INDEXSCAN,p.getPlanNodeType());
  assertNotNull(p.getInlinePlanNode(PlanNodeType.AGGREGATE));
  assertTrue(p.toExplainPlanString().contains("COL_RF_TREE2"));
  pns=compileToFragments("SELECT F_VAL2, MAX(F_VAL2) FROM RF WHERE F_VAL1 > 0 GROUP BY F_VAL2");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertEquals(PlanNodeType.INDEXSCAN,p.getPlanNodeType());
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  assertTrue(p.toExplainPlanString().contains("COL_RF_TREE2"));
  pns=compileToFragments("SELECT MAX(F_VAL2) FROM F WHERE F_VAL1 > 0 GROUP BY F_D1");
  assertEquals(2,pns.size());
  p=pns.get(1).getChild(0);
  assertEquals(PlanNodeType.INDEXSCAN,p.getPlanNodeType());
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  assertTrue(p.toExplainPlanString().contains("COL_F_TREE2"));
  pns=compileToFragments("SELECT F_VAL3, MAX(F_VAL2) FROM RF WHERE F_VAL3 = 0 GROUP BY F_VAL3");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertEquals(PlanNodeType.INDEXSCAN,p.getPlanNodeType());
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  assertTrue(p.toExplainPlanString().contains("COL_RF_HASH"));
  pns=compileToFragments("SELECT A, count(B) from R2 where B > 2 group by A order by A;");
  assertEquals(1,pns.size());
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof ProjectionPlanNode);
  p=p.getChild(0);
  assertTrue(p instanceof OrderByPlanNode);
  p=p.getChild(0);
  assertTrue(p instanceof SeqScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
}
