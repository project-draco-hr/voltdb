{
  AbstractPlanNode p;
  List<AbstractPlanNode> pns;
  pns=compileToFragments("SELECT A4, count(distinct B4) FROM T4 GROUP BY A4");
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof ReceivePlanNode);
  p=pns.get(1).getChild(0);
  assertTrue(p instanceof AbstractScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  pns=compileToFragments("SELECT C4, A4, count(distinct B4) FROM T4 GROUP BY C4, A4");
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof ReceivePlanNode);
  p=pns.get(1).getChild(0);
  assertTrue(p instanceof AbstractScanPlanNode);
  assertNotNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  pns=compileToFragments("SELECT ABS(A4), count(distinct B4) FROM T4 GROUP BY ABS(A4)");
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof HashAggregatePlanNode);
  assertTrue(p.getChild(0) instanceof ReceivePlanNode);
  p=pns.get(1).getChild(0);
  assertTrue(p instanceof AbstractScanPlanNode);
  assertNull(p.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  pns=compileToFragments("SELECT A.NUM, COUNT(DISTINCT A.ID ) AS Q58 FROM P2 A GROUP BY A.NUM; ");
  p=pns.get(0).getChild(0);
  assertTrue(p instanceof HashAggregatePlanNode);
  assertTrue(p.getChild(0) instanceof ReceivePlanNode);
  p=pns.get(1).getChild(0);
  assertTrue(p instanceof IndexScanPlanNode);
  assertTrue(p.toExplainPlanString().contains("for deterministic order only"));
}
