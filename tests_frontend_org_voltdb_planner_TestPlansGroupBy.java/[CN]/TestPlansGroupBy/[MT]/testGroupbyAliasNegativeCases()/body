{
  try {
    pns=compileToFragments("SELECT abs(PKEY) as sp, count(*) as ct FROM P1 GROUP BY count(*)");
    fail();
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("invalid GROUP BY expression:  COUNT()"));
  }
  try {
    pns=compileToFragments("SELECT abs(PKEY) as sp, count(*) as ct FROM P1 GROUP BY ct");
    fail();
  }
 catch (  Exception ex) {
    assertEquals("invalid GROUP BY expression:  COUNT()",ex.getMessage());
  }
  try {
    pns=compileToFragments("SELECT abs(PKEY) as sp, (count(*) +1 ) as ct FROM P1 GROUP BY ct");
    fail();
  }
 catch (  Exception ex) {
    assertEquals("invalid GROUP BY expression:  COUNT()",ex.getMessage());
  }
  try {
    pns=compileToFragments("SELECT abs(PKEY) as sp, count(*) as ct FROM P1 GROUP BY sp + 1");
    fail();
  }
 catch (  Exception ex) {
    assertEquals("user lacks privilege or object not found: SP",ex.getMessage());
  }
  try {
    pns=compileToFragments("SELECT ABS(A1), count(*) as ct FROM P1 GROUP BY ABS(A1) having ct > 3");
    fail();
  }
 catch (  Exception ex) {
    assertEquals("user lacks privilege or object not found: CT",ex.getMessage());
  }
  try {
    pns=compileToFragments("SELECT abs(PKEY) as sp, count(*) as ct FROM P1 GROUP BY P1.sp");
    fail();
  }
 catch (  Exception ex) {
    assertEquals("user lacks privilege or object not found: P1.SP",ex.getMessage());
  }
  pns=compileToFragments("SELECT ABS(A1) AS A1, count(*) as ct FROM P1 GROUP BY A1");
  AbstractPlanNode p=pns.get(1).getChild(0);
  assertTrue(p instanceof AbstractScanPlanNode);
  AggregatePlanNode agg=AggregatePlanNode.getInlineAggregationNode(p);
  assertNotNull(agg);
  assertEquals(agg.getGroupByExpressions().get(0).getExpressionType(),ExpressionType.VALUE_TUPLE);
}
