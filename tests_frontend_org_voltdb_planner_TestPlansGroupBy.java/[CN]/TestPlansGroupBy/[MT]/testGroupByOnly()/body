{
  List<AbstractPlanNode> pns;
  System.out.println("Starting testGroupByOnly");
  pns=compileToFragments("SELECT F_D1 FROM RF GROUP BY F_D1");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT F_D1, COUNT(*) FROM RF GROUP BY F_D1");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT F_VAL1, SUM(F_VAL2) FROM RF GROUP BY F_VAL1");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT F_D1 + F_D2, COUNT(*) FROM RF GROUP BY F_D1 + F_D2");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT ABS(F_D1), COUNT(*) FROM RF GROUP BY ABS(F_D1)");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT F_D2 - F_D3, ABS(F_D1), COUNT(*) FROM RF GROUP BY F_D2 - F_D3, ABS(F_D1)");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT F_VAL1, F_VAL2, COUNT(*) FROM RF GROUP BY F_VAL2, F_VAL1");
  checkGroupByOnlyPlan(pns,false,S_AGG,true);
  pns=compileToFragments("SELECT F_D1 FROM F GROUP BY F_D1");
  checkGroupByOnlyPlan(pns,true,S_AGG,true);
  pns=compileToFragments("SELECT F_D1, COUNT(*) FROM F GROUP BY F_D1");
  checkGroupByOnlyPlan(pns,true,S_AGG,true);
  pns=compileToFragments("SELECT F_VAL1, SUM(F_VAL2) FROM F GROUP BY F_VAL1");
  checkGroupByOnlyPlan(pns,true,S_AGG,true);
  pns=compileToFragments("SELECT F_D1 + F_D2, COUNT(*) FROM F GROUP BY F_D1 + F_D2");
  checkGroupByOnlyPlan(pns,true,S_AGG,true);
  pns=compileToFragments("SELECT ABS(F_D1), COUNT(*) FROM F GROUP BY ABS(F_D1)");
  checkGroupByOnlyPlan(pns,true,S_AGG,true);
  pns=compileToFragments("SELECT F_D2 - F_D3, ABS(F_D1), COUNT(*) FROM F GROUP BY F_D2 - F_D3, ABS(F_D1)");
  checkGroupByOnlyPlan(pns,true,S_AGG,true);
  pns=compileToFragments("SELECT F_D2 - F_D3, COUNT(*) FROM RF GROUP BY F_D2 - F_D3");
  checkGroupByOnlyPlan(pns,false,H_AGG,true);
  pns=compileToFragments("SELECT F_VAL3, COUNT(*) FROM RF GROUP BY F_VAL3");
  checkGroupByOnlyPlan(pns,false,H_AGG,true);
  pns=compileToFragments("SELECT F_D2, COUNT(*) FROM RF GROUP BY F_D2");
  checkGroupByOnlyPlan(pns,false,H_AGG,true);
  pns=compileToFragments("SELECT F_D2 - F_D3, COUNT(*) FROM F GROUP BY F_D2 - F_D3");
  checkGroupByOnlyPlan(pns,true,H_AGG,true);
  pns=compileToFragments("SELECT F_D2 - F_D3, COUNT(*) FROM RF GROUP BY F_D2 - F_D3");
  checkGroupByOnlyPlan(pns,false,H_AGG,true);
  pns=compileToFragments("SELECT F_D1, F_D2, COUNT(*) FROM RF GROUP BY F_D1, F_D2");
  checkGroupByOnlyPlan(pns,false,P_AGG,true);
  pns=compileToFragments("SELECT ABS(F_D1), F_D3, COUNT(*) FROM RF GROUP BY ABS(F_D1), F_D3");
  checkGroupByOnlyPlan(pns,false,P_AGG,true);
  pns=compileToFragments("SELECT F_D1, F_D2, COUNT(*) FROM F GROUP BY F_D1, F_D2");
  checkGroupByOnlyPlan(pns,true,P_AGG,true);
  pns=compileToFragments("SELECT ABS(F_D1), F_D3, COUNT(*) FROM F GROUP BY ABS(F_D1), F_D3");
  checkGroupByOnlyPlan(pns,true,P_AGG,true);
  pns=compileToFragments("SELECT G_PKEY, COUNT(*) C, G_PKEY FROM G GROUP BY G_PKEY");
  AbstractPlanNode pn=pns.get(0);
  pn=pn.getChild(0);
  NodeSchema os=pn.getOutputSchema();
  SchemaColumn middleCol=os.getColumns().get(1);
  System.out.println(middleCol.toString());
  assertTrue(middleCol.getColumnAlias().equals("C"));
}
