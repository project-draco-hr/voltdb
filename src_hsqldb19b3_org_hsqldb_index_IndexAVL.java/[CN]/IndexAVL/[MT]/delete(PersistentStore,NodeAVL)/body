{
  if (x == null) {
    return;
  }
  NodeAVL n;
  writeLock.lock();
  try {
    if (x.getLeft(store) == null) {
      n=x.getRight(store);
    }
 else     if (x.getRight(store) == null) {
      n=x.getLeft(store);
    }
 else {
      NodeAVL d=x;
      x=x.getLeft(store);
      while (true) {
        NodeAVL temp=x.getRight(store);
        if (temp == null) {
          break;
        }
        x=temp;
      }
      n=x.getLeft(store);
      int b=x.getBalance();
      x=x.setBalance(store,d.getBalance());
      d=d.setBalance(store,b);
      NodeAVL xp=x.getParent(store);
      NodeAVL dp=d.getParent(store);
      if (d.isRoot()) {
        store.setAccessor(this,x);
      }
      x=x.setParent(store,dp);
      if (dp != null) {
        if (dp.isRight(d)) {
          dp=dp.setRight(store,x);
        }
 else {
          dp=dp.setLeft(store,x);
        }
      }
      if (d.equals(xp)) {
        d=d.setParent(store,x);
        if (d.isLeft(x)) {
          x=x.setLeft(store,d);
          NodeAVL dr=d.getRight(store);
          x=x.setRight(store,dr);
        }
 else {
          x=x.setRight(store,d);
          NodeAVL dl=d.getLeft(store);
          x=x.setLeft(store,dl);
        }
      }
 else {
        d=d.setParent(store,xp);
        xp=xp.setRight(store,d);
        NodeAVL dl=d.getLeft(store);
        NodeAVL dr=d.getRight(store);
        x=x.setLeft(store,dl);
        x=x.setRight(store,dr);
      }
      x.getRight(store).setParent(store,x);
      x.getLeft(store).setParent(store,x);
      d=d.setLeft(store,n);
      if (n != null) {
        n=n.setParent(store,d);
      }
      d=d.setRight(store,null);
      x=d;
    }
    boolean isleft=x.isFromLeft(store);
    replace(store,x,n);
    n=x.getParent(store);
    x.delete();
    while (n != null) {
      x=n;
      int sign=isleft ? 1 : -1;
switch (x.getBalance() * sign) {
case -1:
        x=x.setBalance(store,0);
      break;
case 0:
    x=x.setBalance(store,sign);
  return;
case 1:
NodeAVL r=child(store,x,!isleft);
int b=r.getBalance();
if (b * sign >= 0) {
replace(store,x,r);
x=set(store,x,!isleft,child(store,r,isleft));
r=set(store,r,isleft,x);
if (b == 0) {
x=x.setBalance(store,sign);
r=r.setBalance(store,-sign);
return;
}
x=x.setBalance(store,0);
r=r.setBalance(store,0);
x=r;
}
 else {
NodeAVL l=child(store,r,isleft);
replace(store,x,l);
b=l.getBalance();
r=set(store,r,isleft,child(store,l,!isleft));
l=set(store,l,!isleft,r);
x=set(store,x,!isleft,child(store,l,isleft));
l=set(store,l,isleft,x);
x=x.setBalance(store,(b == sign) ? -sign : 0);
r=r.setBalance(store,(b == -sign) ? sign : 0);
l=l.setBalance(store,0);
x=l;
}
}
isleft=x.isFromLeft(store);
n=x.getParent(store);
}
}
  finally {
writeLock.unlock();
}
}
