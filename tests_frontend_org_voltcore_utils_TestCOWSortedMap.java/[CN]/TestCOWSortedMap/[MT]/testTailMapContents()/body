{
  COWSortedMap map=map5();
  NavigableMap sm=map.tailMap(two,true);
  assertFalse(sm.containsKey(one));
  assertTrue(sm.containsKey(two));
  assertTrue(sm.containsKey(three));
  assertTrue(sm.containsKey(four));
  assertTrue(sm.containsKey(five));
  Iterator i=sm.keySet().iterator();
  Object k;
  k=(Integer)(i.next());
  assertEquals(two,k);
  k=(Integer)(i.next());
  assertEquals(three,k);
  k=(Integer)(i.next());
  assertEquals(four,k);
  k=(Integer)(i.next());
  assertEquals(five,k);
  assertFalse(i.hasNext());
  Iterator r=sm.descendingKeySet().iterator();
  k=(Integer)(r.next());
  assertEquals(five,k);
  k=(Integer)(r.next());
  assertEquals(four,k);
  k=(Integer)(r.next());
  assertEquals(three,k);
  k=(Integer)(r.next());
  assertEquals(two,k);
  assertFalse(r.hasNext());
  Iterator ei=sm.entrySet().iterator();
  Map.Entry e;
  e=(Map.Entry)(ei.next());
  assertEquals(two,e.getKey());
  assertEquals("B",e.getValue());
  e=(Map.Entry)(ei.next());
  assertEquals(three,e.getKey());
  assertEquals("C",e.getValue());
  e=(Map.Entry)(ei.next());
  assertEquals(four,e.getKey());
  assertEquals("D",e.getValue());
  e=(Map.Entry)(ei.next());
  assertEquals(five,e.getKey());
  assertEquals("E",e.getValue());
  assertFalse(i.hasNext());
  NavigableMap ssm=sm.tailMap(four,true);
  assertEquals(four,ssm.firstKey());
  assertEquals(five,ssm.lastKey());
}
