{
  check(map,min,max,ascending);
  check(map.descendingMap(),min,max,!ascending);
  mutateSubMap(map,min,max);
  check(map,min,max,ascending);
  check(map.descendingMap(),min,max,!ascending);
  if (max - min < 2)   return;
  int midPoint=(min + max) / 2;
  boolean incl=rnd.nextBoolean();
  NavigableMap<Integer,Integer> hm=map.headMap(midPoint,incl);
  if (ascending) {
    if (rnd.nextBoolean())     bashSubMap(hm,min,midPoint - (incl ? 0 : 1),true);
 else     bashSubMap(hm.descendingMap(),min,midPoint - (incl ? 0 : 1),false);
  }
 else {
    if (rnd.nextBoolean())     bashSubMap(hm,midPoint + (incl ? 0 : 1),max,false);
 else     bashSubMap(hm.descendingMap(),midPoint + (incl ? 0 : 1),max,true);
  }
  incl=rnd.nextBoolean();
  NavigableMap<Integer,Integer> tm=map.tailMap(midPoint,incl);
  if (ascending) {
    if (rnd.nextBoolean())     bashSubMap(tm,midPoint + (incl ? 0 : 1),max,true);
 else     bashSubMap(tm.descendingMap(),midPoint + (incl ? 0 : 1),max,false);
  }
 else {
    if (rnd.nextBoolean()) {
      bashSubMap(tm,min,midPoint - (incl ? 0 : 1),false);
    }
 else {
      bashSubMap(tm.descendingMap(),min,midPoint - (incl ? 0 : 1),true);
    }
  }
  int rangeSize=max - min + 1;
  int[] endpoints=new int[2];
  endpoints[0]=min + rnd.nextInt(rangeSize);
  endpoints[1]=min + rnd.nextInt(rangeSize);
  Arrays.sort(endpoints);
  boolean lowIncl=rnd.nextBoolean();
  boolean highIncl=rnd.nextBoolean();
  if (ascending) {
    NavigableMap<Integer,Integer> sm=map.subMap(endpoints[0],lowIncl,endpoints[1],highIncl);
    if (rnd.nextBoolean())     bashSubMap(sm,endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),true);
 else     bashSubMap(sm.descendingMap(),endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),false);
  }
 else {
    NavigableMap<Integer,Integer> sm=map.subMap(endpoints[1],highIncl,endpoints[0],lowIncl);
    if (rnd.nextBoolean())     bashSubMap(sm,endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),false);
 else     bashSubMap(sm.descendingMap(),endpoints[0] + (lowIncl ? 0 : 1),endpoints[1] - (highIncl ? 0 : 1),true);
  }
}
