{
  ZKUtil.StringCallback cb1=new ZKUtil.StringCallback();
  try {
    assert(VoltDB.instance().getHostMessenger().getZK().exists(VoltZK.nodes_currently_snapshotting + "/" + VoltDB.instance().getHostMessenger().getHostId(),false) == null);
    ByteBuffer snapshotTxnId=ByteBuffer.allocate(8);
    snapshotTxnId.putLong(txnId);
    VoltDB.instance().getHostMessenger().getZK().create(VoltZK.nodes_currently_snapshotting + "/" + VoltDB.instance().getHostMessenger().getHostId(),snapshotTxnId.array(),Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL,cb1,null);
  }
 catch (  NodeExistsException e) {
    HOST_LOG.warn("Didn't expect the snapshot node to already exist",e);
  }
catch (  Exception e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  String nextTruncationNonce=null;
  boolean isTruncation=false;
  try {
    final byte payloadBytes[]=VoltDB.instance().getHostMessenger().getZK().getData(VoltZK.request_truncation_snapshot,false,null);
    if (payloadBytes != null) {
      ByteBuffer payload=ByteBuffer.wrap(payloadBytes);
      nextTruncationNonce=Long.toString(payload.getLong());
    }
  }
 catch (  KeeperException.NoNodeException e) {
  }
catch (  Exception e) {
    VoltDB.crashLocalVoltDB("Getting the nonce should never fail with anything other than no node",true,e);
  }
  if (nextTruncationNonce == null) {
    isTruncation=false;
  }
 else {
    if (nextTruncationNonce.equals(nonce)) {
      isTruncation=true;
    }
 else {
      isTruncation=false;
    }
  }
  createSnapshotCompletionNode(nonce,txnId,st.getAllHosts(),isTruncation,truncReqId);
  if (recoveringSiteCount.get() == st.getLocalSites().length) {
    removeRejoiningHost(txnId,hostId);
  }
  try {
    cb1.get();
  }
 catch (  NodeExistsException e) {
    HOST_LOG.warn("Didn't expect the snapshot node to already exist",e);
  }
catch (  Exception e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
}
