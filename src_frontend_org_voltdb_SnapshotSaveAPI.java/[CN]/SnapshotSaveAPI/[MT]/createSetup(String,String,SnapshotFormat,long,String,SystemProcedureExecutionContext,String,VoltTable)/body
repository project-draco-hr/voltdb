{
{
    SiteTracker tracker=context.getSiteTrackerForSnapshot();
    final int numLocalSites=(tracker.getLocalSites().length - recoveringSiteCount.get());
    Long targetHSid=null;
    MessageDigest digest;
    try {
      digest=MessageDigest.getInstance("SHA-1");
    }
 catch (    NoSuchAlgorithmException e) {
      throw new AssertionError(e);
    }
    List<Integer> partitionsToInclude=new ArrayList<Integer>();
    List<Long> sitesToInclude=new ArrayList<Long>();
    for (    long localSite : tracker.getLocalSites()) {
      final int partitionId=tracker.getPartitionForSite(localSite);
      List<Long> sites=new ArrayList<Long>(tracker.getSitesForPartition(tracker.getPartitionForSite(localSite)));
      Collections.sort(sites);
      digest.update(Longs.toByteArray(txnId));
      final long seed=Longs.fromByteArray(Arrays.copyOf(digest.digest(Ints.toByteArray(partitionId)),8));
      int siteIndex=new java.util.Random(seed).nextInt(sites.size());
      if (localSite == sites.get(siteIndex)) {
        partitionsToInclude.add(partitionId);
        sitesToInclude.add(localSite);
      }
    }
    assert(partitionsToInclude.size() == sitesToInclude.size());
    final ArrayList<SnapshotDataTarget> targets=new ArrayList<SnapshotDataTarget>();
    try {
      final ArrayDeque<SnapshotTableTask> partitionedSnapshotTasks=new ArrayDeque<SnapshotTableTask>();
      final ArrayList<SnapshotTableTask> replicatedSnapshotTasks=new ArrayList<SnapshotTableTask>();
      assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.get() == -1);
      final List<Table> tables=SnapshotUtil.getTablesToSave(context.getDatabase());
      if (format.isFileBased()) {
        Runnable completionTask=SnapshotUtil.writeSnapshotDigest(txnId,context.getCatalogCRC(),file_path,file_nonce,tables,context.getHostId(),SnapshotSiteProcessor.getExportSequenceNumbers());
        if (completionTask != null) {
          SnapshotSiteProcessor.m_tasksOnSnapshotCompletion.offer(completionTask);
        }
        completionTask=SnapshotUtil.writeSnapshotCatalog(file_path,file_nonce);
        if (completionTask != null) {
          SnapshotSiteProcessor.m_tasksOnSnapshotCompletion.offer(completionTask);
        }
      }
      final AtomicInteger numTables=new AtomicInteger(tables.size());
      final SnapshotRegistry.Snapshot snapshotRecord=SnapshotRegistry.startSnapshot(txnId,context.getHostId(),file_path,file_nonce,format,tables.toArray(new Table[0]));
      SnapshotDataTarget sdt=null;
      if (!format.isTableBased()) {
        Map<Integer,byte[]> schemas=new HashMap<Integer,byte[]>();
        for (        final Table table : SnapshotUtil.getTablesToSave(context.getDatabase())) {
          VoltTable schemaTable=CatalogUtil.getVoltTable(table);
          schemas.put(table.getRelativeIndex(),schemaTable.getSchemaBytes());
        }
        if (format == SnapshotFormat.STREAM && data != null) {
          JSONObject jsObj=new JSONObject(data);
          long hsId=jsObj.getLong("hsId");
          try {
            targetHSid=jsObj.getLong("target_hsid");
          }
 catch (          JSONException e) {
          }
          if (targetHSid != null) {
            List<Long> localHSids=tracker.getSitesForHost(context.getHostId());
            if (localHSids.contains(targetHSid)) {
              sdt=new StreamSnapshotDataTarget(hsId,schemas);
            }
 else {
              sdt=new DevNullSnapshotTarget();
            }
          }
        }
      }
      for (      final Table table : SnapshotUtil.getTablesToSave(context.getDatabase())) {
        if (format == SnapshotFormat.CSV && table.getIsreplicated() && !tracker.isFirstHost()) {
          snapshotRecord.removeTable(table.getTypeName());
          continue;
        }
        String canSnapshot="SUCCESS";
        String err_msg="";
        File saveFilePath=null;
        if (format.isFileBased()) {
          saveFilePath=SnapshotUtil.constructFileForTable(table,file_path,file_nonce,format,context.getHostId());
        }
        try {
          if (format == SnapshotFormat.CSV) {
            sdt=new SimpleFileSnapshotDataTarget(saveFilePath);
          }
 else           if (format == SnapshotFormat.NATIVE) {
            sdt=constructSnapshotDataTargetForTable(context,saveFilePath,table,context.getHostId(),tracker.m_numberOfPartitions,txnId);
          }
          if (sdt == null) {
            throw new IOException("Unable to create snapshot target");
          }
          targets.add(sdt);
          final SnapshotDataTarget sdtFinal=sdt;
          final Runnable onClose=new Runnable(){
            @SuppressWarnings("synthetic-access") @Override public void run(){
              snapshotRecord.updateTable(table.getTypeName(),new SnapshotRegistry.Snapshot.TableUpdater(){
                @Override public SnapshotRegistry.Snapshot.Table update(                SnapshotRegistry.Snapshot.Table registryTable){
                  return snapshotRecord.new Table(registryTable,sdtFinal.getBytesWritten(),sdtFinal.getLastWriteException());
                }
              }
);
              int tablesLeft=numTables.decrementAndGet();
              if (tablesLeft == 0) {
                final SnapshotRegistry.Snapshot completed=SnapshotRegistry.finishSnapshot(snapshotRecord);
                final double duration=(completed.timeFinished - org.voltdb.TransactionIdManager.getTimestampFromTransactionId(completed.txnId)) / 1000.0;
                HOST_LOG.info("Snapshot " + snapshotRecord.nonce + " finished at "+ completed.timeFinished+ " and took "+ duration+ " seconds ");
              }
            }
          }
;
          sdt.setOnCloseHandler(onClose);
          List<SnapshotDataFilter> filters=new ArrayList<SnapshotDataFilter>();
          if (format == SnapshotFormat.CSV) {
            if (!table.getIsreplicated()) {
              filters.add(new PartitionProjectionSnapshotFilter(Ints.toArray(partitionsToInclude),0));
            }
            filters.add(new CSVSnapshotFilter(CatalogUtil.getVoltTable(table),',',null));
          }
          if (targetHSid != null) {
            List<Long> localHSids=tracker.getSitesForHost(context.getHostId());
            if (localHSids.contains(targetHSid)) {
              int partitionId=tracker.getPartitionForSite(targetHSid);
              filters.add(new PartitionProjectionSnapshotFilter(new int[]{partitionId},sdt.getHeaderSize()));
            }
 else {
              filters.add(new PartitionProjectionSnapshotFilter(new int[0],sdt.getHeaderSize()));
            }
          }
          final SnapshotTableTask task=new SnapshotTableTask(table.getRelativeIndex(),sdt,filters.toArray(new SnapshotDataFilter[filters.size()]),table.getIsreplicated(),table.getTypeName());
          if (table.getIsreplicated()) {
            replicatedSnapshotTasks.add(task);
          }
 else {
            partitionedSnapshotTasks.offer(task);
          }
        }
 catch (        IOException ex) {
          try {
            if (sdt != null) {
              targets.remove(sdt);
              sdt.close();
            }
          }
 catch (          Exception e) {
            HOST_LOG.error(e);
          }
          StringWriter sw=new StringWriter();
          PrintWriter pw=new PrintWriter(sw);
          ex.printStackTrace(pw);
          pw.flush();
          canSnapshot="FAILURE";
          err_msg="SNAPSHOT INITIATION OF " + file_nonce + "RESULTED IN IOException: \n"+ sw.toString();
        }
        result.addRow(context.getHostId(),hostname,table.getTypeName(),canSnapshot,err_msg);
      }
synchronized (SnapshotSiteProcessor.m_taskListsForSites) {
        boolean aborted=false;
        if (!partitionedSnapshotTasks.isEmpty() || !replicatedSnapshotTasks.isEmpty()) {
          SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.set(numLocalSites);
          for (int ii=0; ii < numLocalSites; ii++) {
            SnapshotSiteProcessor.m_taskListsForSites.add(new ArrayDeque<SnapshotTableTask>());
          }
        }
 else {
          SnapshotRegistry.discardSnapshot(snapshotRecord);
          aborted=true;
        }
        for (int ii=0; ii < numLocalSites && !partitionedSnapshotTasks.isEmpty(); ii++) {
          SnapshotSiteProcessor.m_taskListsForSites.get(ii).addAll(partitionedSnapshotTasks);
          if (!format.isTableBased()) {
            SnapshotSiteProcessor.m_taskListsForSites.get(ii).addAll(replicatedSnapshotTasks);
          }
        }
        if (format.isTableBased()) {
          int siteIndex=0;
          for (          SnapshotTableTask t : replicatedSnapshotTasks) {
            SnapshotSiteProcessor.m_taskListsForSites.get(siteIndex++ % numLocalSites).offer(t);
          }
        }
        if (!aborted) {
          logSnapshotStartToZK(txnId,context,file_nonce);
        }
      }
    }
 catch (    Exception ex) {
      SnapshotSiteProcessor.m_taskListsForSites.clear();
      for (      SnapshotDataTarget sdt : targets) {
        try {
          sdt.close();
        }
 catch (        Exception e) {
          HOST_LOG.error(ex);
        }
      }
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      ex.printStackTrace(pw);
      pw.flush();
      result.addRow(context.getHostId(),hostname,"","FAILURE","SNAPSHOT INITIATION OF " + file_path + file_nonce+ "RESULTED IN Exception: \n"+ sw.toString());
      HOST_LOG.error(ex);
    }
 finally {
      SnapshotSiteProcessor.m_snapshotPermits.release(numLocalSites);
    }
  }
}
