{
  TRACE_LOG.trace("Creating snapshot target and handing to EEs");
  final VoltTable result=SnapshotUtil.constructNodeResultsTable();
  final int numLocalSites=context.getCluster().getDeployment().get("deployment").getSitesperhost();
synchronized (SnapshotSiteProcessor.m_snapshotCreateLock) {
    SnapshotSiteProcessor.m_snapshotCreateSetupBarrierActualAction.set(new Runnable(){
      @Override public void run(){
        Map<Integer,Long> partitionTransactionIds=new HashMap<Integer,Long>();
        partitionTransactionIds=m_partitionLastSeenTransactionIds;
        SNAP_LOG.debug("Last seen partition transaction ids " + partitionTransactionIds);
        m_partitionLastSeenTransactionIds=new HashMap<Integer,Long>();
        partitionTransactionIds.put(TxnEgo.getPartitionId(multiPartTxnId),multiPartTxnId);
        for (        long txnId : legacyPerPartitionTxnIds) {
          final int legacyPartition=TxnEgo.getPartitionId(txnId);
          if (partitionTransactionIds.containsKey(legacyPartition)) {
            SNAP_LOG.warn("While saving a snapshot and propagating legacy " + "transaction ids found an id that matches currently active partition" + partitionTransactionIds.get(legacyPartition));
          }
 else {
            partitionTransactionIds.put(legacyPartition,txnId);
          }
        }
        exportSequenceNumbers=SnapshotSiteProcessor.getExportSequenceNumbers();
        createSetupIv2(file_path,file_nonce,format,multiPartTxnId,partitionTransactionIds,data,context,hostname,result,exportSequenceNumbers,context.getSiteTrackerForSnapshot(),hashinatorData,timestamp);
      }
    }
);
    SnapshotSiteProcessor.readySnapshotSetupBarriers(numLocalSites);
    SnapshotSiteProcessor.populateExportSequenceNumbersForExecutionSite(context);
    SNAP_LOG.debug("Registering transaction id " + partitionTxnId + " for "+ TxnEgo.getPartitionId(partitionTxnId));
    m_partitionLastSeenTransactionIds.put(TxnEgo.getPartitionId(partitionTxnId),partitionTxnId);
  }
  boolean runPostTasks=false;
  VoltTable earlyResultTable=null;
  try {
    SnapshotSiteProcessor.m_snapshotCreateSetupBarrier.await();
    try {
synchronized (m_createLock) {
        SNAP_LOG.debug("Found tasks for HSIds: " + CoreUtils.hsIdCollectionToString(m_taskListsForHSIds.keySet()));
        SNAP_LOG.debug("Looking for local HSID: " + CoreUtils.hsIdToString(context.getSiteId()));
        Deque<SnapshotTableTask> taskList=m_taskListsForHSIds.remove(context.getSiteId());
        List<SnapshotDataTarget> targetList=new ArrayList<SnapshotDataTarget>(m_snapshotDataTargets);
        if (!m_createSuccess.get()) {
          assert(m_taskListsForHSIds.isEmpty());
          VoltTable finalresult=m_createResult.get();
          if (finalresult != null) {
            m_createResult.set(null);
            earlyResultTable=finalresult;
          }
 else {
            earlyResultTable=SnapshotUtil.constructNodeResultsTable();
          }
        }
 else         if (taskList == null) {
          SNAP_LOG.debug("No task for this site, block " + block);
          if (block != 0) {
            runPostTasks=true;
            earlyResultTable=SnapshotUtil.constructPartitionResultsTable();
            earlyResultTable.addRow(context.getHostId(),hostname,CoreUtils.getSiteIdFromHSId(context.getSiteId()),"SUCCESS","");
          }
 else {
            earlyResultTable=SnapshotUtil.constructNodeResultsTable();
          }
        }
 else {
          context.getSiteSnapshotConnection().initiateSnapshots(format,taskList,targetList,multiPartTxnId,exportSequenceNumbers);
        }
      }
    }
  finally {
      SnapshotSiteProcessor.m_snapshotCreateFinishBarrier.await(120,TimeUnit.SECONDS);
    }
  }
 catch (  TimeoutException e) {
    VoltDB.crashLocalVoltDB("Timed out waiting 120 seconds for all threads to arrive and start snapshot",true,null);
  }
catch (  InterruptedException e) {
    result.addRow(context.getHostId(),hostname,"","FAILURE",CoreUtils.throwableToString(e));
    earlyResultTable=result;
  }
catch (  BrokenBarrierException e) {
    result.addRow(context.getHostId(),hostname,"","FAILURE",CoreUtils.throwableToString(e));
    earlyResultTable=result;
  }
  if (earlyResultTable != null) {
    if (runPostTasks) {
      SnapshotSiteProcessor.runPostSnapshotTasks(context);
    }
    return earlyResultTable;
  }
  if (block != 0) {
    HashSet<Exception> failures=null;
    String status="SUCCESS";
    String err="";
    try {
      failures=context.getSiteSnapshotConnection().completeSnapshotWork();
      SnapshotSiteProcessor.runPostSnapshotTasks(context);
    }
 catch (    InterruptedException e) {
      status="FAILURE";
      err=e.toString();
      failures=new HashSet<Exception>();
      failures.add(e);
    }
    final VoltTable blockingResult=SnapshotUtil.constructPartitionResultsTable();
    if (failures.isEmpty()) {
      blockingResult.addRow(context.getHostId(),hostname,CoreUtils.getSiteIdFromHSId(context.getSiteId()),status,err);
    }
 else {
      status="FAILURE";
      for (      Exception e : failures) {
        err=e.toString();
      }
      blockingResult.addRow(context.getHostId(),hostname,CoreUtils.getSiteIdFromHSId(context.getSiteId()),status,err);
    }
    return blockingResult;
  }
  return result;
}
