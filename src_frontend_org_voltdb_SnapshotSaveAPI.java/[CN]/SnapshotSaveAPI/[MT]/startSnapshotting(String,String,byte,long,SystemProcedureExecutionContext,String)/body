{
  TRACE_LOG.trace("Creating snapshot target and handing to EEs");
  final VoltTable result=SnapshotSave.constructNodeResultsTable();
  final int numLocalSites=VoltDB.instance().getLocalSites().values().size();
synchronized (SnapshotSiteProcessor.m_snapshotCreateLock) {
    if (SnapshotSiteProcessor.m_snapshotCreateSetupPermit == null) {
      SnapshotSiteProcessor.m_snapshotCreateSetupPermit=new Semaphore(numLocalSites);
    }
    try {
      SnapshotSiteProcessor.populateExportSequenceNumbersForExecutionSite(context);
      SnapshotSiteProcessor.m_snapshotCreateSetupPermit.acquire();
    }
 catch (    InterruptedException e) {
      result.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,"","FAILURE",e.toString());
      return result;
    }
    if (SnapshotSiteProcessor.m_snapshotCreateSetupPermit.availablePermits() == 0) {
      createSetup(file_path,file_nonce,txnId,context,hostname,result);
      SnapshotSiteProcessor.m_snapshotCreateSetupPermit.release(numLocalSites);
    }
  }
  VoltTable error=acquireSnapshotPermit(context,hostname,result);
  if (error != null) {
    return error;
  }
synchronized (SnapshotSiteProcessor.m_taskListsForSites) {
    final Deque<SnapshotTableTask> m_taskList=SnapshotSiteProcessor.m_taskListsForSites.poll();
    if (m_taskList == null) {
      return result;
    }
 else {
      assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.get() > 0);
      context.getExecutionSite().initiateSnapshots(m_taskList);
    }
  }
  if (block != 0) {
    HashSet<Exception> failures=null;
    String status="SUCCESS";
    String err="";
    try {
      failures=context.getExecutionSite().completeSnapshotWork();
    }
 catch (    InterruptedException e) {
      status="FAILURE";
      err=e.toString();
    }
    final VoltTable blockingResult=SnapshotSave.constructPartitionResultsTable();
    if (failures.isEmpty()) {
      blockingResult.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,Integer.parseInt(context.getSite().getTypeName()),status,err);
    }
 else {
      status="FAILURE";
      for (      Exception e : failures) {
        err=e.toString();
      }
      blockingResult.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,Integer.parseInt(context.getSite().getTypeName()),status,err);
    }
    return blockingResult;
  }
  return result;
}
