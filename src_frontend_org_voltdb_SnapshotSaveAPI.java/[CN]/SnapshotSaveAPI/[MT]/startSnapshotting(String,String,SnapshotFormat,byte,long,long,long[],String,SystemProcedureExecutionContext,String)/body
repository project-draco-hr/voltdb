{
  TRACE_LOG.trace("Creating snapshot target and handing to EEs");
  final VoltTable result=SnapshotSave.constructNodeResultsTable();
  final int numLocalSites=(context.getSiteTrackerForSnapshot().getLocalSites().length - recoveringSiteCount.get());
synchronized (SnapshotSiteProcessor.m_snapshotCreateLock) {
    if (SnapshotSiteProcessor.m_snapshotCreateSetupPermit == null) {
      SnapshotSiteProcessor.m_snapshotCreateSetupPermit=new Semaphore(numLocalSites);
    }
    try {
      SnapshotSiteProcessor.populateExportSequenceNumbersForExecutionSite(context);
      SnapshotSiteProcessor.m_snapshotCreateSetupPermit.acquire();
      if (VoltDB.instance().isIV2Enabled()) {
        SnapshotSiteProcessor.m_partitionLastSeenTransactionIds.add(partitionTxnId);
      }
    }
 catch (    InterruptedException e) {
      result.addRow(context.getHostId(),hostname,"","FAILURE",e.toString());
      return result;
    }
    if (SnapshotSiteProcessor.m_snapshotCreateSetupPermit.availablePermits() == 0) {
      List<Long> partitionTransactionIds=new ArrayList<Long>();
      if (VoltDB.instance().isIV2Enabled()) {
        partitionTransactionIds=SnapshotSiteProcessor.m_partitionLastSeenTransactionIds;
        SnapshotSiteProcessor.m_partitionLastSeenTransactionIds=new ArrayList<Long>();
        partitionTransactionIds.add(multiPartTxnId);
        for (        long txnId : legacyPerPartitionTxnIds) {
          final int legacyPartition=TxnEgo.getPartitionId(txnId);
          boolean isDup=false;
          for (          long existingId : partitionTransactionIds) {
            final int existingPartition=TxnEgo.getPartitionId(existingId);
            if (existingPartition == legacyPartition) {
              HOST_LOG.warn("While saving a snapshot and propagating legacy " + "transaction ids found an id that matches currently active partition" + existingPartition);
              isDup=true;
            }
          }
          if (!isDup) {
            partitionTransactionIds.add(txnId);
          }
        }
      }
      exportSequenceNumbers=SnapshotSiteProcessor.getExportSequenceNumbers();
      createSetup(file_path,file_nonce,format,multiPartTxnId,partitionTransactionIds,data,context,hostname,result,exportSequenceNumbers);
      SnapshotSiteProcessor.m_snapshotCreateSetupPermit.release(numLocalSites);
    }
  }
  VoltTable error=acquireSnapshotPermit(context,hostname,result);
  if (error != null) {
    return error;
  }
synchronized (SnapshotSiteProcessor.m_taskListsForSites) {
    final Deque<SnapshotTableTask> m_taskList=SnapshotSiteProcessor.m_taskListsForSites.poll();
    if (m_taskList == null) {
      return result;
    }
 else {
      assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.get() > 0);
      context.getSiteSnapshotConnection().initiateSnapshots(m_taskList,multiPartTxnId,context.getSiteTrackerForSnapshot().getAllHosts().size(),exportSequenceNumbers);
    }
  }
  if (block != 0) {
    HashSet<Exception> failures=null;
    String status="SUCCESS";
    String err="";
    try {
      failures=context.getSiteSnapshotConnection().completeSnapshotWork();
    }
 catch (    InterruptedException e) {
      status="FAILURE";
      err=e.toString();
      failures=new HashSet<Exception>();
      failures.add(e);
    }
    final VoltTable blockingResult=SnapshotSave.constructPartitionResultsTable();
    if (failures.isEmpty()) {
      blockingResult.addRow(context.getHostId(),hostname,CoreUtils.getSiteIdFromHSId(context.getSiteId()),status,err);
    }
 else {
      status="FAILURE";
      for (      Exception e : failures) {
        err=e.toString();
      }
      blockingResult.addRow(context.getHostId(),hostname,CoreUtils.getSiteIdFromHSId(context.getSiteId()),status,err);
    }
    return blockingResult;
  }
  return result;
}
