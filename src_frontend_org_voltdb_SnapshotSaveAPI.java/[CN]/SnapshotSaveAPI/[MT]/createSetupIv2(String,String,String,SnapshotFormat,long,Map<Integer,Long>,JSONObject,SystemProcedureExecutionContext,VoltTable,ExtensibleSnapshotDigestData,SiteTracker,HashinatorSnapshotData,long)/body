{
  SnapshotWritePlan plan;
  if (format == SnapshotFormat.NATIVE) {
    plan=new NativeSnapshotWritePlan();
  }
 else   if (format == SnapshotFormat.CSV) {
    plan=new CSVSnapshotWritePlan();
  }
 else   if (format == SnapshotFormat.STREAM) {
    plan=new StreamSnapshotWritePlan();
  }
 else   if (format == SnapshotFormat.INDEX) {
    plan=new IndexSnapshotWritePlan();
  }
 else {
    throw new RuntimeException("BAD BAD BAD");
  }
  file_path=SnapshotUtil.getRealPath(SnapshotPathType.valueOf(pathType),file_path);
  final Callable<Boolean> deferredSetup=plan.createSetup(file_path,pathType,file_nonce,txnId,partitionTransactionIds,jsData,context,result,extraSnapshotData,tracker,hashinatorData,timestamp);
  m_deferredSetupFuture=VoltDB.instance().submitSnapshotIOWork(new DeferredSnapshotSetup(plan,deferredSetup,txnId,partitionTransactionIds));
synchronized (m_createLock) {
    if (!m_taskListsForHSIds.isEmpty()) {
      SNAP_LOG.warn("Found lingering snapshot tasks while setting up a snapshot");
    }
    m_taskListsForHSIds.clear();
    m_createSuccess.set(true);
    m_createResult.set(result);
    m_taskListsForHSIds.putAll(plan.getTaskListsForHSIds());
    if (m_taskListsForHSIds.isEmpty()) {
      SNAP_LOG.debug("Node had no snapshot work to do.  Creating a null task to drive completion.");
      m_taskListsForHSIds.put(context.getSiteId(),new ArrayDeque<SnapshotTableTask>());
    }
    SNAP_LOG.debug("Planned tasks: " + CoreUtils.hsIdCollectionToString(plan.getTaskListsForHSIds().keySet()));
    SNAP_LOG.debug("Created tasks for HSIds: " + CoreUtils.hsIdCollectionToString(m_taskListsForHSIds.keySet()));
  }
}
