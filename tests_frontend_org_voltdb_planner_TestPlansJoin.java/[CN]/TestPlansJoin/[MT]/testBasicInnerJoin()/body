{
  AbstractPlanNode pn=compile("select * FROM R1 JOIN R2 ON R1.C = R2.C",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  for (int ii=0; ii < 2; ii++) {
    assertTrue(n.getChild(ii) instanceof SeqScanPlanNode);
  }
  pn=compile("select C FROM R1 JOIN R2 ON R1.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  pn=compile("select R1.C, R2.C FROM R1 JOIN R2 ON R1.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  pn=compile("select R1.C, R2.C FROM R1 INNER JOIN R2 ON R1.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  pn=compile("select * FROM R1 JOIN R2 USING (C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  for (int ii=0; ii < 2; ii++) {
    assertTrue(n.getChild(ii) instanceof SeqScanPlanNode);
  }
  pn=compile("select C FROM R1 JOIN R2 USING (C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  pn=compile("select R1.C, R2.C FROM R1 JOIN R2 USING (C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  pn=compile("select R1.C, R2.C FROM R1 INNER JOIN R2 USING (C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  pn=compile("select R2.A, R2.C FROM R2 JOIN R3 USING(C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  AbstractExpression pred=nlj.getPredicate();
  assertTrue(pred != null);
}
