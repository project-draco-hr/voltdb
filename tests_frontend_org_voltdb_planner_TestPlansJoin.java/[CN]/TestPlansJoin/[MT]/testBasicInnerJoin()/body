{
  AbstractPlanNode pn=compile("select * FROM R1 JOIN R2 ON R1.C = R2.C",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  for (int ii=0; ii < 2; ii++) {
    assertTrue(n.getChild(ii) instanceof SeqScanPlanNode);
  }
  assertTrue(pn.getOutputSchema().getColumns().size() == 5);
  pn=compile("select * FROM R1 JOIN R2 USING(C)",0,false,null);
  assertTrue(pn.getChild(0).getChild(0) instanceof NestLoopPlanNode);
  assertTrue(pn.getOutputSchema().getColumns().size() == 4);
  pn=compile("select A,C,D FROM R1 JOIN R2 ON R1.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(pn.getOutputSchema().getColumns().size() == 3);
  pn=compile("select A,C,D FROM R1 JOIN R2 USING(C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(pn.getOutputSchema().getColumns().size() == 3);
  pn=compile("select R1.A, R2.C, R1.D FROM R1 JOIN R2 ON R1.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(pn.getOutputSchema().getColumns().size() == 3);
  assertTrue(pn.getOutputSchema().getColumns().get(0).getTableName().equalsIgnoreCase("R1"));
  assertTrue(pn.getOutputSchema().getColumns().get(1).getTableName().equalsIgnoreCase("R2"));
  pn=compile("select R1.A, C, R1.D FROM R1 JOIN R2 USING(C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  String table=pn.getOutputSchema().getColumns().get(1).getTableName();
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(pn.getOutputSchema().getColumns().size() == 3);
  assertTrue(pn.getOutputSchema().getColumns().get(0).getTableName().equalsIgnoreCase("R1"));
  assertTrue(table.equalsIgnoreCase("R2") || table.equalsIgnoreCase("R1"));
  try {
    List<AbstractPlanNode> pnl=aide.compile("select R1.C FROM R1 JOIN R2 USING(C)",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("user lacks privilege or object not found: R1.C".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pnl=aide.compile("select R2.C FROM R1 JOIN R2 USING(C)",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("user lacks privilege or object not found: R2.C".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pnl=aide.compile("select R2.C FROM R1 JOIN R2 USING(X)",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("user lacks privilege or object not found: X".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pnl=aide.compile("select R2.C FROM R1 JOIN R2 ON R1.X = R2.X",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("user lacks privilege or object not found: R1.X".equalsIgnoreCase(ex.getMessage()));
  }
}
