{
  AbstractPlanNode pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.A = R2.A AND R2.A = 1 ");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  AbstractJoinPlanNode jn=(AbstractJoinPlanNode)n;
  assertNull(jn.getJoinPredicate());
  AbstractExpression p=jn.getPreJoinPredicate();
  assertNotNull(p);
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.VALUE_CONSTANT,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,p.getRight().getExpressionType());
  assertTrue(jn.getChild(1) instanceof SeqScanPlanNode);
  SeqScanPlanNode ssn=(SeqScanPlanNode)jn.getChild(1);
  assertNotNull(ssn.getPredicate());
  p=ssn.getPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.VALUE_CONSTANT,p.getRight().getExpressionType());
  pn=compile("select * FROM R2 LEFT JOIN R1 ON R1.A = R2.A AND R2.A = 1 ");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  jn=(AbstractJoinPlanNode)n;
  assertNull(jn.getJoinPredicate());
  p=jn.getPreJoinPredicate();
  assertNotNull(p);
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.VALUE_CONSTANT,p.getRight().getExpressionType());
  assertTrue(jn.getChild(1) instanceof SeqScanPlanNode);
  ssn=(SeqScanPlanNode)jn.getChild(1);
  assertNotNull(ssn.getPredicate());
  p=ssn.getPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.VALUE_CONSTANT,p.getRight().getExpressionType());
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.A = R2.A AND R2.C = 1 ");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertNotNull(p);
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  AbstractExpression l=p.getLeft();
  AbstractExpression r=p.getRight();
  assertEquals(ExpressionType.VALUE_TUPLE,l.getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,r.getExpressionType());
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.A = R2.A AND ABS(R2.C) = 1 ");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertNotNull(p);
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  l=p.getLeft();
  r=p.getRight();
  assertEquals(ExpressionType.VALUE_TUPLE,l.getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,r.getExpressionType());
  pn=compile("select * FROM R1 LEFT JOIN R3 ON R1.A = R3.A");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  pn=compile("select * FROM R1 LEFT JOIN R3 ON R1.A = R3.A and R1.A = 4");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  pn=compile("select * FROM R1 LEFT JOIN R3 ON R1.A = R3.A and R3.A = 4");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
}
