{
  AbstractPlanNode pn=compile("select A, C FROM R2 JOIN R1 USING(A, C)",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  AbstractExpression pred=nlj.getPredicate();
  assertTrue(pred != null);
  assertTrue(pred.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  pn=compile("select R1.A, R2.A FROM R2 JOIN R1 on R1.A = R2.A and R1.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  pred=nlj.getPredicate();
  assertTrue(pred != null);
  assertTrue(pred.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  pn=compile("select A FROM R2 JOIN R3 USING(A)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nlij=(NestLoopIndexPlanNode)n;
  pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
  assertTrue(pred != null);
  assertTrue(pred.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  pn=compile("select R3.A, R2.A FROM R2 JOIN R3 ON R3.A = R2.A",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nlij=(NestLoopIndexPlanNode)n;
  pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
  assertTrue(pred != null);
  assertTrue(pred.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  pn=compile("select A, C FROM R3 JOIN R2 USING(A, C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nlij=(NestLoopIndexPlanNode)n;
  pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
  assertTrue(pred != null);
  assertTrue(pred.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  pn=compile("select R3.A, R2.A FROM R3 JOIN R2 ON R3.A = R2.A AND R3.C = R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nlij=(NestLoopIndexPlanNode)n;
  pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
  assertTrue(pred != null);
  assertTrue(pred.getExpressionType() == ExpressionType.COMPARE_EQUAL);
}
