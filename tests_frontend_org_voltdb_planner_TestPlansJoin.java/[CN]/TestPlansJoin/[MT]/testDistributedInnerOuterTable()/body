{
  List<AbstractPlanNode> lpn;
  AbstractPlanNode pn;
  AbstractPlanNode n;
  lpn=compileToFragments("select * FROM P1 LEFT JOIN R2 ON P1.C = R2.C");
  assertEquals(2,lpn.size());
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(2,n.getChildCount());
  assertTrue(n.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  pn=compile("select * FROM R2 LEFT JOIN P1 ON P1.C = R2.C");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertEquals(2,nl.getChildCount());
  assertTrue(nl.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(nl.getChild(1) instanceof ReceivePlanNode);
  lpn=compileToFragments("select * FROM P1 LEFT JOIN P4 ON P1.A = P4.A");
  assertEquals(2,lpn.size());
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(2,n.getChildCount());
  assertTrue(n.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  failToCompile("select * FROM P1 LEFT JOIN P4 ON P1.A = P4.E","This query is not plannable.  The planner cannot guarantee that all rows would be in a single partition");
}
