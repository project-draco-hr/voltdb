{
  AbstractPlanNode pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertTrue(ExpressionType.COMPARE_EQUAL.equals(nl.getJoinPredicate().getExpressionType()));
  assertTrue(nl.getWherePredicate() == null);
  assertTrue(nl.getChildCount() == 2);
  SeqScanPlanNode c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate() == null);
  SeqScanPlanNode c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() == null);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C AND R1.A > 0 AND R2.A < 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertTrue(nl.getPreJoinPredicate() != null);
  AbstractExpression p=nl.getPreJoinPredicate();
  assertTrue(ExpressionType.COMPARE_GREATERTHAN.equals(p.getExpressionType()));
  assertTrue(nl.getJoinPredicate() != null);
  p=nl.getJoinPredicate();
  assertTrue(ExpressionType.COMPARE_EQUAL.equals(p.getExpressionType()));
  assertTrue(nl.getWherePredicate() == null);
  assertTrue(nl.getChildCount() == 2);
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate() == null);
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() != null);
  p=c1.getPredicate();
  assertTrue(ExpressionType.COMPARE_LESSTHAN.equals(p.getExpressionType()));
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C AND (R1.A > 0 OR R2.A < 0)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  p=nl.getJoinPredicate();
  assertTrue(ExpressionType.CONJUNCTION_AND.equals(p.getExpressionType()));
  assertTrue(ExpressionType.CONJUNCTION_OR.equals(p.getLeft().getExpressionType()));
  assertTrue(nl.getWherePredicate() == null);
  assertTrue(nl.getChildCount() == 2);
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate() == null);
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() == null);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE R1.A > 0 AND R2.A IS NULL AND (R1.C > R2.C OR R2.C IS NULL)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertTrue(JoinType.LEFT == nl.getJoinType());
  assertTrue(nl.getJoinPredicate() != null);
  p=nl.getJoinPredicate();
  assertTrue(ExpressionType.COMPARE_EQUAL.equals(p.getExpressionType()));
  AbstractExpression w=nl.getWherePredicate();
  assertTrue(w != null);
  assertTrue(ExpressionType.CONJUNCTION_AND.equals(w.getExpressionType()));
  assertTrue(ExpressionType.OPERATOR_IS_NULL.equals(w.getRight().getExpressionType()));
  assertTrue(ExpressionType.CONJUNCTION_OR.equals(w.getLeft().getExpressionType()));
  assertTrue(nl.getChildCount() == 2);
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(ExpressionType.COMPARE_GREATERTHAN.equals(c0.getPredicate().getExpressionType()));
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() == null);
  pn=compile("select * FROM R3 LEFT JOIN R2 ON R3.A = R2.A WHERE R3.A > 3 AND R3.C < 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertTrue(nl.getJoinType() == JoinType.LEFT);
  AbstractPlanNode outerScan=n.getChild(0);
  assertTrue(outerScan instanceof IndexScanPlanNode);
  IndexScanPlanNode indexScan=(IndexScanPlanNode)outerScan;
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.GT));
  assertTrue(indexScan.getPredicate() != null);
  assertTrue(indexScan.getPredicate().getExpressionType() == ExpressionType.COMPARE_LESSTHAN);
}
