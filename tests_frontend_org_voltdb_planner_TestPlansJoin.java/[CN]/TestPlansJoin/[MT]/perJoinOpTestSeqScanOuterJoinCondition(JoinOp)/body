{
  AbstractPlanNode pn=compile("SELECT * FROM R1 LEFT JOIN R2 ON R1.C " + joinOp + " R2.C");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertEquals(joinOp.toOperator(),nl.getJoinPredicate().getExpressionType());
  assertNull(nl.getWherePredicate());
  assertEquals(2,nl.getChildCount());
  SeqScanPlanNode c0=(SeqScanPlanNode)nl.getChild(0);
  assertNull(c0.getPredicate());
  SeqScanPlanNode c1=(SeqScanPlanNode)nl.getChild(1);
  assertNull(c1.getPredicate());
  pn=compile("SELECT * FROM R1 LEFT JOIN R2 ON R1.C " + joinOp + " R2.C AND R1.A > 0 AND R2.A < 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertNotNull(nl.getPreJoinPredicate());
  AbstractExpression p=nl.getPreJoinPredicate();
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,p.getExpressionType());
  assertNotNull(nl.getJoinPredicate());
  p=nl.getJoinPredicate();
  assertEquals(joinOp.toOperator(),p.getExpressionType());
  assertNull(nl.getWherePredicate());
  assertEquals(2,nl.getChildCount());
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertNull(c0.getPredicate());
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertNotNull(c1.getPredicate());
  p=c1.getPredicate();
  assertEquals(ExpressionType.COMPARE_LESSTHAN,p.getExpressionType());
  pn=compile("SELECT * FROM R1 LEFT JOIN R2 ON R1.C " + joinOp + " R2.C AND (R1.A > 0 OR R2.A < 0)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  p=nl.getJoinPredicate();
  assertEquals(ExpressionType.CONJUNCTION_AND,p.getExpressionType());
  if (ExpressionType.CONJUNCTION_OR == p.getLeft().getExpressionType()) {
    assertEquals(ExpressionType.CONJUNCTION_OR,p.getLeft().getExpressionType());
  }
 else {
    assertEquals(ExpressionType.CONJUNCTION_OR,p.getRight().getExpressionType());
  }
  assertNull(nl.getWherePredicate());
  assertEquals(2,nl.getChildCount());
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertNull(c0.getPredicate());
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertNull(c1.getPredicate());
  pn=compile("SELECT * FROM R1 LEFT JOIN R2 ON R1.C " + joinOp + " R2.C WHERE R1.A > 0 AND R2.A IS NULL AND (R1.C > R2.C OR R2.C IS NULL)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertEquals(JoinType.LEFT,nl.getJoinType());
  assertNotNull(nl.getJoinPredicate());
  p=nl.getJoinPredicate();
  assertEquals(joinOp.toOperator(),p.getExpressionType());
  AbstractExpression w=nl.getWherePredicate();
  assertNotNull(w);
  assertEquals(ExpressionType.CONJUNCTION_AND,w.getExpressionType());
  assertEquals(ExpressionType.OPERATOR_IS_NULL,w.getRight().getExpressionType());
  assertEquals(ExpressionType.CONJUNCTION_OR,w.getLeft().getExpressionType());
  assertEquals(2,nl.getChildCount());
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,c0.getPredicate().getExpressionType());
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertNull(c1.getPredicate());
  pn=compile("SELECT * FROM R3 LEFT JOIN R2 ON R3.A " + joinOp + " R2.A WHERE R3.A > 3 AND R3.C < 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertEquals(JoinType.LEFT,nl.getJoinType());
  AbstractPlanNode outerScan=n.getChild(0);
  assertTrue(outerScan instanceof IndexScanPlanNode);
  IndexScanPlanNode indexScan=(IndexScanPlanNode)outerScan;
  assertEquals(IndexLookupType.GT,indexScan.getLookupType());
  assertNotNull(indexScan.getPredicate());
  assertEquals(ExpressionType.COMPARE_LESSTHAN,indexScan.getPredicate().getExpressionType());
  pn=compile("SELECT * FROM R2 LEFT JOIN R3 ON R3.C " + joinOp + " R2.C WHERE R3.A > 3");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertEquals(JoinType.INNER,nl.getJoinType());
  outerScan=n.getChild(1);
  assertTrue(outerScan instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)outerScan;
  assertEquals(IndexLookupType.GT,indexScan.getLookupType());
  assertNull(indexScan.getPredicate());
  pn=compile("SELECT * FROM R2 LEFT JOIN R3 ON R3.A " + joinOp + " R2.C WHERE R3.A > 3");
  n=pn.getChild(0).getChild(0);
  if (joinOp != JoinOp.EQUAL) {
    return;
  }
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nli=(NestLoopIndexPlanNode)n;
  assertEquals(JoinType.INNER,nli.getJoinType());
}
