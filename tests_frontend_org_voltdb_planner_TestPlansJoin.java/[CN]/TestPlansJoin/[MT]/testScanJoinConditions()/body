{
  AbstractPlanNode pn=compile("select * FROM R1 WHERE R1.C = 0",0,false,null);
  AbstractPlanNode n=pn.getChild(0);
  assertTrue(n instanceof AbstractScanPlanNode);
  AbstractScanPlanNode scan=(AbstractScanPlanNode)n;
  AbstractExpression p=scan.getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  pn=compile("select * FROM R1, R2 WHERE R1.A = R2.A AND R1.C > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  n=n.getChild(0);
  assertTrue(n instanceof AbstractScanPlanNode);
  assertTrue(((AbstractScanPlanNode)n).getTargetTableName().equalsIgnoreCase("R1"));
  p=((AbstractScanPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
  pn=compile("select * FROM R1, R2 WHERE R1.A = R2.A AND R1.C > R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_LESSTHAN);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(((AbstractScanPlanNode)n.getChild(0)).getPredicate() == null);
  assertTrue(((AbstractScanPlanNode)n.getChild(1)).getPredicate() == null);
  pn=compile("select * FROM R1 JOIN R2 ON R1.A = R2.A WHERE R1.C > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  n=n.getChild(0);
  assertTrue(n instanceof AbstractScanPlanNode);
  assertTrue(((AbstractScanPlanNode)n).getTargetTableName().equalsIgnoreCase("R1"));
  p=((AbstractScanPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
  pn=compile("select * FROM R1 JOIN R2 ON R1.A = R2.A WHERE R1.C > R2.C",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_LESSTHAN);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(((AbstractScanPlanNode)n.getChild(0)).getPredicate() == null);
  assertTrue(((AbstractScanPlanNode)n.getChild(1)).getPredicate() == null);
  pn=compile("select * FROM R1, R2, R3 WHERE R1.A = R2.A AND R1.C = R3.C AND R1.A > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  n=n.getChild(0);
  assertTrue(n instanceof AbstractScanPlanNode);
  assertTrue(((AbstractScanPlanNode)n).getTargetTableName().equalsIgnoreCase("R1"));
  p=((AbstractScanPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
  pn=compile("select * FROM R1 JOIN R2 on R1.A = R2.A AND R1.C = R2.C where R1.A > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  n=n.getChild(0);
  assertTrue(n instanceof AbstractScanPlanNode);
  assertTrue(((AbstractScanPlanNode)n).getTargetTableName().equalsIgnoreCase("R1"));
  p=((AbstractScanPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
  pn=compile("select A,C FROM R1 RIGHT JOIN R2 USING (A, C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  pn=compile("select A,C FROM R1 JOIN R2 USING (A, C)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  pn=compile("select * FROM R1 JOIN R2 ON R1.A = R2.A JOIN R3 ON R1.C = R3.C WHERE R1.A > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  n=n.getChild(0);
  assertTrue(n instanceof AbstractScanPlanNode);
  assertTrue(((AbstractScanPlanNode)n).getTargetTableName().equalsIgnoreCase("R1"));
  p=((AbstractScanPlanNode)n).getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
}
