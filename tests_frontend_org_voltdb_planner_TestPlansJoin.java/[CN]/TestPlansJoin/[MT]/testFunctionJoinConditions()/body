{
  AbstractPlanNode pn=compile("select * FROM R1 JOIN R2 ON ABS(R1.A) = ABS(R2.A) ");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  AbstractExpression p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.FUNCTION);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.FUNCTION);
  pn=compile("select * FROM R1 ,R2 WHERE ABS(R1.A) = ABS(R2.A) ");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.FUNCTION);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.FUNCTION);
  pn=compile("select * FROM R1 ,R2");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertTrue(p == null);
  failToCompile("select * FROM R1 JOIN R2 USING (ABS(A))","user lacks privilege or object not found: ABS");
}
