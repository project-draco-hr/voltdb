{
  AbstractPlanNode pn=compile("select * FROM R1 JOIN R2 ON ABS(R1.A) = ABS(R2.A) ",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  AbstractExpression p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.FUNCTION);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.FUNCTION);
  pn=compile("select * FROM R1 ,R2 WHERE ABS(R1.A) = ABS(R2.A) ",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.FUNCTION);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.FUNCTION);
  pn=compile("select * FROM R1 ,R2",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertTrue(p == null);
  try {
    List<AbstractPlanNode> pnl=aide.compile("select * FROM R1 JOIN R2 USING (ABS(A))",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("user lacks privilege or object not found: ABS".equalsIgnoreCase(ex.getMessage()));
  }
}
