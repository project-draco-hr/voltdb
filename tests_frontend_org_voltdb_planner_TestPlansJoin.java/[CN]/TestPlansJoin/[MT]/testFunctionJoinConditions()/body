{
  AbstractPlanNode pn=compile("SELECT * FROM R1 JOIN R2 ON ABS(R1.A) = ABS(R2.A) ");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  AbstractExpression p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.FUNCTION,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.FUNCTION,p.getRight().getExpressionType());
  pn=compile("SELECT * FROM R1 ,R2 WHERE ABS(R1.A) = ABS(R2.A) ");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.FUNCTION,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.FUNCTION,p.getRight().getExpressionType());
  pn=compile("SELECT * FROM R1 ,R2");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof AbstractJoinPlanNode);
  p=((AbstractJoinPlanNode)n).getJoinPredicate();
  assertNull(p);
  failToCompile("SELECT * FROM R1 JOIN R2 USING (ABS(A))","user lacks privilege or object not found: ABS");
}
