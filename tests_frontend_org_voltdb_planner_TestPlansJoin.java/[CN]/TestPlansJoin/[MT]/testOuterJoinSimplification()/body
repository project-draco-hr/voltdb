{
  AbstractPlanNode pn, n;
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE R2.C IS NOT NULL");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE R2.C > 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 RIGHT JOIN R2 ON R1.C = R2.C WHERE R1.C > 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R3 ON R1.C = R3.C WHERE R3.A > 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R3 ON R1.C = R3.A WHERE R3.A > 0");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertEquals(((NestLoopIndexPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 RIGHT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.LEFT);
  pn=compile("select * FROM R1 RIGHT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.LEFT);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10 AND R1.C = 3");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10 OR R2.C IS NOT NULL");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10 AND R1.C > 3");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.LEFT);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10 OR R2.C IS NOT NULL");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.LEFT);
  AbstractExpression ex;
  pn=compile("select R2.A, R1.* FROM R1 LEFT OUTER JOIN R2 ON R2.A = R1.A WHERE R2.A > 3");
  System.out.println(pn.toExplainPlanString());
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.INNER);
  ex=((NestLoopPlanNode)n).getWherePredicate();
  assertEquals(ex,null);
  pn=compile("select R2.A, R1.* FROM R1 LEFT OUTER JOIN R2 ON R2.A = R1.A WHERE R2.A IS NULL");
  System.out.println(pn.toExplainPlanString());
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertEquals(((NestLoopPlanNode)n).getJoinType(),JoinType.LEFT);
  ex=((NestLoopPlanNode)n).getWherePredicate();
  assertEquals(ex instanceof OperatorExpression,true);
  pn=compile("select b.A, a.* FROM R1 a LEFT OUTER JOIN R4 b ON b.A = a.A AND b.C = a.C AND a.D = b.D WHERE b.A IS NULL");
  System.out.println(pn.toExplainPlanString());
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertEquals(((NestLoopIndexPlanNode)n).getJoinType(),JoinType.LEFT);
  ex=((NestLoopIndexPlanNode)n).getWherePredicate();
  assertEquals(ex instanceof OperatorExpression,true);
  pn=compile("select b.A, a.* FROM R1 a LEFT OUTER JOIN R4 b ON b.A = a.A AND b.C = a.C AND a.D = b.D WHERE b.B + b.A IS NULL");
  System.out.println(pn.toExplainPlanString());
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertEquals(((NestLoopIndexPlanNode)n).getJoinType(),JoinType.LEFT);
  pn=compile("select a.* FROM R1 a LEFT OUTER JOIN R5 b ON b.A = a.A WHERE b.A IS NULL");
  System.out.println(pn.toExplainPlanString());
  n=pn.getChild(0).getChild(0);
  assertEquals(((NestLoopIndexPlanNode)n).getJoinType(),JoinType.LEFT);
}
