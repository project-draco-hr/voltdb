{
  AbstractPlanNode pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE R2.C IS NOT NULL",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE R2.C > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 RIGHT JOIN R2 ON R1.C = R2.C WHERE R1.C > 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 RIGHT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.LEFT);
  pn=compile("select * FROM R1 RIGHT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.LEFT);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10 AND R1.C = 3",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R2.C) <  10 OR R2.C IS NOT NULL",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.INNER);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10 AND R1.C > 3",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.LEFT);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C WHERE ABS(R1.C) <  10 OR R2.C IS NOT NULL",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(((NestLoopPlanNode)n).getJoinType() == JoinType.LEFT);
}
