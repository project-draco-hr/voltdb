{
  AbstractPlanNode pn=compile("select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A AND R3.C > 0 AND R2.A < 6");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nlij=(NestLoopIndexPlanNode)n;
  assertTrue(JoinType.LEFT == nlij.getJoinType());
  assertTrue(nlij.getPreJoinPredicate() != null);
  AbstractExpression p=nlij.getPreJoinPredicate();
  assertTrue(ExpressionType.COMPARE_LESSTHAN.equals(p.getExpressionType()));
  assertTrue(nlij.getJoinPredicate() == null);
  assertTrue(nlij.getWherePredicate() == null);
  IndexScanPlanNode indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(IndexLookupType.EQ == indexScan.getLookupType());
  assertTrue(ExpressionType.COMPARE_EQUAL.equals(indexScan.getEndExpression().getExpressionType()));
  assertTrue(ExpressionType.COMPARE_GREATERTHAN.equals(indexScan.getPredicate().getExpressionType()));
  AbstractPlanNode c1=n.getChild(0);
  assertTrue(c1 instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)c1).getPredicate() == null);
  pn=compile("select * FROM R2 LEFT JOIN R3 ON R3.C = R2.A AND R3.A > 0 AND R3.C != 0 AND R2.A < 6");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.LEFT == nlj.getJoinType());
  assertTrue(nlj.getPreJoinPredicate() != null);
  p=nlj.getPreJoinPredicate();
  assertTrue(ExpressionType.COMPARE_LESSTHAN.equals(p.getExpressionType()));
  assertTrue(nlj.getJoinPredicate() != null);
  assertTrue(ExpressionType.COMPARE_EQUAL.equals(nlj.getJoinPredicate().getExpressionType()));
  assertTrue(nlj.getWherePredicate() == null);
  c1=n.getChild(0);
  assertTrue(c1 instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)c1).getPredicate() == null);
  AbstractPlanNode c2=n.getChild(1);
  assertTrue(c2 instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)c2;
  assertTrue(IndexLookupType.GT == indexScan.getLookupType());
  assertTrue(indexScan.getPredicate() != null);
  assertTrue(ExpressionType.COMPARE_NOTEQUAL.equals(indexScan.getPredicate().getExpressionType()));
  pn=compile("select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A WHERE R3.A IS NULL AND R2.A > 3 AND (R2.A < 6 OR R3.C IS NULL)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinType() == JoinType.LEFT);
  assertTrue(((NestLoopIndexPlanNode)n).getPreJoinPredicate() == null);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  assertTrue(((NestLoopIndexPlanNode)n).getWherePredicate() != null);
  AbstractExpression w=((NestLoopIndexPlanNode)n).getWherePredicate();
  assertTrue(ExpressionType.CONJUNCTION_AND == w.getExpressionType());
  assertTrue(ExpressionType.OPERATOR_IS_NULL == w.getRight().getExpressionType());
  assertTrue(ExpressionType.CONJUNCTION_OR == w.getLeft().getExpressionType());
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(IndexLookupType.EQ == indexScan.getLookupType());
  assertTrue(ExpressionType.COMPARE_EQUAL == indexScan.getEndExpression().getExpressionType());
  c1=n.getChild(0);
  assertTrue(c1 instanceof SeqScanPlanNode);
  assertTrue(ExpressionType.COMPARE_GREATERTHAN == ((SeqScanPlanNode)c1).getPredicate().getExpressionType());
}
