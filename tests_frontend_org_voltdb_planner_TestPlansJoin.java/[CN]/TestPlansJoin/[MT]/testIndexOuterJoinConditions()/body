{
  AbstractPlanNode pn=compile("select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A AND R3.C > 0 AND R2.A < 6",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinType() == JoinType.LEFT);
  assertTrue(((NestLoopIndexPlanNode)n).getPreJoinPredicate() != null);
  AbstractExpression p=((NestLoopIndexPlanNode)n).getPreJoinPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.COMPARE_LESSTHAN));
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  assertTrue(((NestLoopIndexPlanNode)n).getWherePredicate() == null);
  IndexScanPlanNode indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(indexScan.getEndExpression().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(indexScan.getPredicate().getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
  AbstractPlanNode seqScan=(SeqScanPlanNode)n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)seqScan).getPredicate() == null);
  pn=compile("select * FROM R2 LEFT JOIN R3 ON R3.A = R2.A WHERE R3.A IS NULL AND R2.A > 3 AND (R2.A < 6 OR R3.C IS NULL)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinType() == JoinType.LEFT);
  assertTrue(((NestLoopIndexPlanNode)n).getPreJoinPredicate() == null);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  assertTrue(((NestLoopIndexPlanNode)n).getWherePredicate() != null);
  AbstractExpression w=((NestLoopIndexPlanNode)n).getWherePredicate();
  assertTrue(w.getExpressionType() == ExpressionType.CONJUNCTION_AND);
  assertTrue(w.getRight().getExpressionType() == ExpressionType.OPERATOR_IS_NULL);
  assertTrue(w.getLeft().getExpressionType() == ExpressionType.CONJUNCTION_OR);
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(indexScan.getEndExpression().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  seqScan=(SeqScanPlanNode)n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)seqScan).getPredicate().getExpressionType().equals(ExpressionType.COMPARE_GREATERTHAN));
  pn=compile("select * FROM R3 LEFT JOIN R2 ON R3.A = R2.A WHERE R3.A > 3 AND R3.C < 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertTrue(nl.getJoinType() == JoinType.LEFT);
  AbstractPlanNode outerScan=n.getChild(0);
  assertTrue(outerScan instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)outerScan;
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.GT));
  assertTrue(indexScan.getPredicate() != null);
  assertTrue(indexScan.getPredicate().getExpressionType() == ExpressionType.COMPARE_LESSTHAN);
}
