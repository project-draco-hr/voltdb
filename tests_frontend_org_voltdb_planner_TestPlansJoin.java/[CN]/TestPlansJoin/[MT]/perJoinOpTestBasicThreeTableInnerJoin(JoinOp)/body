{
  AbstractPlanNode pn=compile("SELECT * FROM R1 JOIN R2 ON R1.C " + joinOp + " R2.C JOIN R3 ON R3.C "+ joinOp+ " R2.C");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(n.getChild(0) instanceof NestLoopPlanNode);
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  assertEquals(7,pn.getOutputSchema().getColumns().size());
  pn=compile("SELECT R1.C, R2.C R3.C FROM R1 INNER JOIN R2 ON R1.C " + joinOp + " R2.C INNER JOIN R3 ON R3.C "+ joinOp+ " R2.C");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(n.getChild(0) instanceof NestLoopPlanNode);
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  pn=compile("SELECT C FROM R1 INNER JOIN R2 USING (C) INNER JOIN R3 USING(C)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(n.getChild(0) instanceof NestLoopPlanNode);
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  assertEquals(1,pn.getOutputSchema().getColumns().size());
  pn=compile("SELECT C FROM R1 INNER JOIN R2 USING (C), R3_NOC WHERE R1.A " + joinOp + " R3_NOC.A");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  if (joinOp == JoinOp.EQUAL) {
    assertTrue(n.getChild(0) instanceof NestLoopIndexPlanNode);
  }
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  assertEquals(1,pn.getOutputSchema().getColumns().size());
  failToCompile("SELECT C FROM R1 INNER JOIN R2 USING (C), R3 WHERE R1.A " + joinOp + " R3.A","Column \"C\" is ambiguous");
}
