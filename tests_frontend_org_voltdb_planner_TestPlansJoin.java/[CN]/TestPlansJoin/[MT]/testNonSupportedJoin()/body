{
  try {
    List<AbstractPlanNode> pn=aide.compile("select R2.C FROM (R1 JOIN R2 ON R1.C = R2.C) JOIN R3 ON R1.C = R3.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("user lacks privilege or object not found: R1.C".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pn=aide.compile("select * FROM R1 JOIN R2 JOIN R3 ON R1.C = R2.C ON R1.C = R3.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue(ex.getMessage().contains("unexpected token"));
  }
  try {
    List<AbstractPlanNode> pn=aide.compile("select R1.C FROM R1 FULL JOIN R2 ON R1.C = R2.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("VoltDB does not yet support full outer joins".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pn=aide.compile("select R1.C FROM R1 FULL OUTER JOIN R2 ON R1.C = R2.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("VoltDB does not yet support full outer joins".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pn=aide.compile("select R1.C FROM R1 LEFT OUTER JOIN R2 ON R1.C = R2.C RIGHT JOIN R3 ON R3.C = R1.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("VoltDB does not yet support outer joins with more than two tables involved".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pn=aide.compile("select R1.C FROM R1 LEFT JOIN R2 ON R1.C = R2.C, R3 WHERE R3.C = R1.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("VoltDB does not yet support outer joins with more than two tables involved".equalsIgnoreCase(ex.getMessage()));
  }
  try {
    List<AbstractPlanNode> pn=aide.compile("select R1.C FROM R1 LEFT OUTER JOIN R2 ON R1.C = R2.C RIGHT JOIN R2 ON R2.C = R1.C",0,false,null);
    fail();
  }
 catch (  PlanningErrorException ex) {
    assertTrue("VoltDB does not yet support self joins, consider using views instead".equalsIgnoreCase(ex.getMessage()));
  }
}
