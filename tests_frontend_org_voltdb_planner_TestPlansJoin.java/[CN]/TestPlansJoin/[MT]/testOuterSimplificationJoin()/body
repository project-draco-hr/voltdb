{
  AbstractPlanNode pn=compile("select * FROM R1, R3 RIGHT JOIN R2 ON R1.A = R2.A WHERE R3.C = R1.C");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.INNER == nlj.getJoinType());
  n=nlj.getChild(1);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.INNER == nlj.getJoinType());
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.A = R2.A LEFT JOIN R3 ON R3.C = R2.C");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.LEFT == nlj.getJoinType());
  n=nlj.getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.INNER == nlj.getJoinType());
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.A = R2.A RIGHT JOIN R3 ON R3.C = R2.C");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.LEFT == nlj.getJoinType());
  n=nlj.getChild(1);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  assertTrue(JoinType.INNER == nlj.getJoinType());
}
