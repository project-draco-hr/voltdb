{
  AbstractPlanNode pn=compile("select * FROM P1 LEFT JOIN R2 ON P1.C = R2.C");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertTrue(nl.getChildCount() == 2);
  assertTrue(nl.getChild(0) instanceof ReceivePlanNode);
  assertTrue(nl.getChild(1) instanceof SeqScanPlanNode);
  pn=compile("select * FROM R2 LEFT JOIN P1 ON P1.C = R2.C");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertTrue(nl.getChildCount() == 2);
  assertTrue(nl.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(nl.getChild(1) instanceof ReceivePlanNode);
  List<AbstractPlanNode> lpn=compileToFragments("select * FROM P1 LEFT JOIN P4 ON P1.A = P4.A");
  assertTrue(lpn.size() == 2);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(n.getChildCount() == 2);
  assertTrue(n.getChild(0) instanceof SeqScanPlanNode);
  assertTrue(n.getChild(1) instanceof SeqScanPlanNode);
  failToCompile("select * FROM P1 LEFT JOIN P4 ON P1.A = P4.E","Join or union of multiple partitioned tables has insufficient join criteria");
}
