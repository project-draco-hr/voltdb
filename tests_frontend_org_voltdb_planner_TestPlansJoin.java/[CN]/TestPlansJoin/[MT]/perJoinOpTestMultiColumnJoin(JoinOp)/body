{
  AbstractPlanNode pn=compile("SELECT A, C FROM R2 JOIN R1 USING(A, C)");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  AbstractExpression pred=nlj.getJoinPredicate();
  assertNotNull(pred);
  assertEquals(ExpressionType.CONJUNCTION_AND,pred.getExpressionType());
  pn=compile("SELECT R1.A, R2.A FROM R2 JOIN R1 ON R1.A " + joinOp + " R2.A AND R1.C "+ joinOp+ " R2.C");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nlj=(NestLoopPlanNode)n;
  pred=nlj.getJoinPredicate();
  assertNotNull(pred);
  assertEquals(ExpressionType.CONJUNCTION_AND,pred.getExpressionType());
  pn=compile("SELECT A FROM R2 JOIN R3 USING(A)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nlij=(NestLoopIndexPlanNode)n;
  assertEquals(IndexLookupType.EQ,((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getLookupType());
  pn=compile("SELECT R3.A, R2.A FROM R2 JOIN R3 ON R3.A " + joinOp + " R2.A");
  n=pn.getChild(0).getChild(0);
  if (joinOp == JoinOp.EQUAL) {
    assertTrue(n instanceof NestLoopIndexPlanNode);
    nlij=(NestLoopIndexPlanNode)n;
    pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
    assertEquals(IndexLookupType.EQ,((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getLookupType());
  }
  pn=compile("SELECT A, C FROM R3 JOIN R2 USING(A, C)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nlij=(NestLoopIndexPlanNode)n;
  pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
  assertNotNull(pred);
  assertEquals(ExpressionType.COMPARE_EQUAL,pred.getExpressionType());
  pn=compile("SELECT R3.A, R2.A FROM R3 JOIN R2 ON R3.A " + joinOp + " R2.A AND R3.C "+ joinOp+ " R2.C");
  n=pn.getChild(0).getChild(0);
  if (joinOp != JoinOp.EQUAL) {
    return;
  }
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nlij=(NestLoopIndexPlanNode)n;
  pred=((IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN)).getPredicate();
  assertNotNull(pred);
  assertEquals(joinOp.toOperator(),pred.getExpressionType());
}
