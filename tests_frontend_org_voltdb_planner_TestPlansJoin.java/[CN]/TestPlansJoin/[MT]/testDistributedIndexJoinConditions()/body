{
  AbstractPlanNode pn=compile("select * FROM P1 LEFT JOIN R3 ON P1.C = R3.A");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertTrue(nl.getChildCount() == 2);
  assertTrue(nl.getChild(0) instanceof ReceivePlanNode);
  assertTrue(nl.getChild(1) instanceof IndexScanPlanNode);
  List<AbstractPlanNode> lpn=compileToFragments("select *  FROM R3 LEFT JOIN P2 ON R3.A = P2.A AND P2.A < 0 AND P2.E > 3 WHERE P2.A IS NULL");
  assertTrue(lpn.size() == 2);
  n=lpn.get(0).getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  assertTrue(JoinType.LEFT == ((NestLoopPlanNode)n).getJoinType());
  assertTrue(((NestLoopPlanNode)n).getJoinPredicate() != null);
  assertTrue(((NestLoopPlanNode)n).getWherePredicate() != null);
  AbstractPlanNode c=n.getChild(0);
  assertTrue(c instanceof SeqScanPlanNode);
  c=n.getChild(1);
  assertTrue(c instanceof ReceivePlanNode);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  IndexScanPlanNode in=(IndexScanPlanNode)n;
  assertTrue(in.getPredicate() != null);
  assertTrue(ExpressionType.COMPARE_GREATERTHAN == in.getPredicate().getExpressionType());
  assertTrue(IndexLookupType.GTE == in.getLookupType());
  lpn=compileToFragments("select *  FROM P2 RIGHT JOIN P3 ON P3.A = P2.A AND P2.A < 0 WHERE P2.A IS NULL");
  assertTrue(lpn.size() == 2);
  n=lpn.get(1).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(JoinType.LEFT == ((NestLoopIndexPlanNode)n).getJoinType());
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  assertTrue(((NestLoopIndexPlanNode)n).getWherePredicate() != null);
  AbstractExpression w=((NestLoopIndexPlanNode)n).getWherePredicate();
  assertTrue(ExpressionType.OPERATOR_IS_NULL == w.getExpressionType());
  IndexScanPlanNode indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(ExpressionType.COMPARE_EQUAL == indexScan.getEndExpression().getExpressionType());
  w=indexScan.getPredicate();
  assertTrue(w != null);
  assertTrue(w.getExpressionType() == ExpressionType.COMPARE_LESSTHAN);
}
