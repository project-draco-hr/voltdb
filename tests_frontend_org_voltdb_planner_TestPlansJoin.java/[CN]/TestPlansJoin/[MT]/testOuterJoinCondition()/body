{
  AbstractPlanNode pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C",0,false,null);
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nl=(NestLoopPlanNode)n;
  assertTrue(nl.getJoinPredicate().getExpressionType().equals(ExpressionType.COMPARE_EQUAL));
  assertTrue(nl.getWherePredicate() == null);
  assertTrue(nl.getChildCount() == 2);
  SeqScanPlanNode c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate() == null);
  SeqScanPlanNode c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() == null);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C AND R1.A > 0 AND R2.A < 0",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertTrue(nl.getPreJoinPredicate() != null);
  AbstractExpression p=nl.getPreJoinPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.COMPARE_GREATERTHAN));
  assertTrue(nl.getJoinPredicate() != null);
  p=nl.getJoinPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.COMPARE_EQUAL));
  assertTrue(nl.getWherePredicate() == null);
  assertTrue(nl.getChildCount() == 2);
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate() == null);
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() != null);
  p=c1.getPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.COMPARE_LESSTHAN));
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C AND (R1.A > 0 OR R2.A < 0)",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  p=nl.getJoinPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.CONJUNCTION_AND));
  assertTrue(p.getLeft().getExpressionType().equals(ExpressionType.CONJUNCTION_OR));
  assertTrue(nl.getWherePredicate() == null);
  assertTrue(nl.getChildCount() == 2);
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate() == null);
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() == null);
  pn=compile("select * FROM R1 LEFT JOIN R2 ON R1.C = R2.C AND R1.A != 2 WHERE R1.A > 0 AND R2.A IS NULL",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  nl=(NestLoopPlanNode)n;
  assertTrue(nl.getJoinType() == JoinType.LEFT);
  assertTrue(nl.getPreJoinPredicate() != null);
  p=nl.getPreJoinPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.COMPARE_NOTEQUAL));
  assertTrue(nl.getJoinPredicate() != null);
  p=nl.getJoinPredicate();
  assertTrue(p.getExpressionType().equals(ExpressionType.COMPARE_EQUAL));
  AbstractExpression w=nl.getWherePredicate();
  assertTrue(w != null);
  assertTrue(w.getExpressionType().equals(ExpressionType.OPERATOR_IS_NULL));
  assertTrue(nl.getChildCount() == 2);
  c0=(SeqScanPlanNode)nl.getChild(0);
  assertTrue(c0.getPredicate().getExpressionType().equals(ExpressionType.COMPARE_GREATERTHAN));
  c1=(SeqScanPlanNode)nl.getChild(1);
  assertTrue(c1.getPredicate() == null);
}
