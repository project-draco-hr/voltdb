{
  String sql;
  String explained;
  for (  JoinOp joinOp : JoinOp.JOIN_OPS) {
    sql="SELECT P1.A, P1.C, P3.A, P3.F " + "FROM P1 FULL JOIN P3 " + "ON P1.A " + joinOp + " P3.A AND P1.A = ? AND P3.F = 1 "+ "ORDER BY P1.A, P1.C, P3.A, P3.F";
    explained=buildExplainPlan(compileToFragments(sql));
    if (joinOp == JoinOp.EQUAL) {
      assertTrue(explained.contains("NESTLOOP INDEX FULL JOIN"));
    }
 else {
      assertTrue(explained.contains("NEST LOOP FULL JOIN"));
    }
    sql="SELECT R1.A, R1.C, R3.A, R3.C " + "FROM R1 FULL JOIN R3 " + "ON R3.A " + joinOp + " R1.A AND R3.A < 2 "+ "ORDER BY R1.A, R1.D, R3.A, R3.C";
    explained=buildExplainPlan(compileToFragments(sql));
    if (joinOp == JoinOp.EQUAL) {
      assertTrue(explained.contains("NESTLOOP INDEX FULL JOIN"));
    }
 else {
      assertTrue(explained.contains("NEST LOOP FULL JOIN"));
    }
    sql="SELECT LHS.A, LHS.C, RHS.A, RHS.C " + "FROM R3 LHS FULL JOIN R3 RHS " + "ON LHS.A " + joinOp + " RHS.A AND LHS.A < 2 "+ "ORDER BY 1, 2, 3, 4";
    explained=buildExplainPlan(compileToFragments(sql));
    if (joinOp == JoinOp.EQUAL) {
      assertTrue(explained.contains("NESTLOOP INDEX FULL JOIN"));
    }
    sql="SELECT * " + "FROM R1 FULL JOIN R2 " + "ON R1.A " + joinOp + " R2.A RIGHT JOIN P2 "+ "ON P2.A "+ joinOp+ " R1.A "+ "ORDER BY P2.A";
    explained=buildExplainPlan(compileToFragments(sql));
    if (joinOp == JoinOp.EQUAL) {
      assertFalse(explained.contains("FULL"));
      assertEquals(2,StringUtils.countMatches(explained,"LEFT"));
    }
 else {
      assertEquals(1,StringUtils.countMatches(explained,"FULL"));
      assertEquals(1,StringUtils.countMatches(explained,"LEFT"));
    }
    sql="SELECT * " + "FROM R1 FULL JOIN R2 " + "ON R1.A " + joinOp + " R2.A LEFT JOIN P2 "+ "ON P2.A "+ joinOp+ " R2.A "+ "ORDER BY P2.A";
    explained=buildExplainPlan(compileToFragments(sql));
    assertTrue(explained.contains("FULL"));
    sql="SELECT * " + "FROM R1 RIGHT JOIN R2 " + "ON R1.A " + joinOp + " R2.A FULL JOIN P2 "+ "ON R1.A "+ joinOp+ " P2.A "+ "ORDER BY P2.A";
    explained=buildExplainPlan(compileToFragments(sql));
    assertTrue(explained.contains("LEFT"));
    sql="SELECT * " + "FROM R1 FULL JOIN R2 " + "ON R1.A " + joinOp + " R2.A FULL JOIN P2 "+ "ON R1.A "+ joinOp+ " P2.A "+ "ORDER BY P2.A";
    explained=buildExplainPlan(compileToFragments(sql));
    assertEquals(2,StringUtils.countMatches(explained,"FULL"));
    sql="SELECT MAX(R1.C), A " + "FROM R1 FULL JOIN R2 USING (A) " + "WHERE A > 0 GROUP BY A ORDER BY A";
    explained=buildExplainPlan(compileToFragments(sql));
    assertEquals(1,StringUtils.countMatches(explained,"FULL"));
    sql="SELECT A " + "FROM R1 FULL JOIN R2 USING (A) " + "FULL JOIN R3 USING(A) "+ "WHERE A > 0 ORDER BY A";
    explained=buildExplainPlan(compileToFragments(sql));
    assertEquals(2,StringUtils.countMatches(explained,"FULL"));
    sql="SELECT L.A " + "FROM R3 L FULL JOIN R3 R " + "ON L.C " + joinOp + " R.C "+ "ORDER BY A";
    explained=buildExplainPlan(compileToFragments(sql));
    assertEquals(1,StringUtils.countMatches(explained,"FULL"));
    assertEquals(1,StringUtils.countMatches(explained,"SORT"));
    sql="SELECT L.A, SUM(L.C) " + "FROM R3 L FULL JOIN R3 R " + "ON L.C " + joinOp + " R.C "+ "GROUP BY L.A ORDER BY 1";
    explained=buildExplainPlan(compileToFragments(sql));
    assertEquals(1,StringUtils.countMatches(explained,"FULL"));
    assertEquals(1,StringUtils.countMatches(explained,"SORT"));
    assertEquals(1,StringUtils.countMatches(explained,"Serial AGGREGATION"));
  }
}
