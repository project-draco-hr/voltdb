{
  AbstractPlanNode pn;
  AbstractPlanNode n;
  NestLoopIndexPlanNode nli;
  AbstractPlanNode c0;
  pn=compile("SELECT * FROM R3 JOIN R1 ON R1.C " + joinOp + " R3.A");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(n.getChild(0) instanceof SeqScanPlanNode);
  assertNotNull(n.getInlinePlanNode(PlanNodeType.INDEXSCAN));
  pn=compile("SELECT X.A FROM R5 X, R5 Y WHERE X.A " + joinOp + " Y.A ORDER BY X.A");
  n=pn.getChild(0);
  assertTrue(n instanceof ProjectionPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nli=(NestLoopIndexPlanNode)n;
  assertEquals(1,nli.getChildCount());
  c0=nli.getChild(0);
  assertTrue(c0 instanceof IndexScanPlanNode);
  assertTrue(((IndexScanPlanNode)c0).getTargetTableAlias().equalsIgnoreCase("X"));
  pn=compile("SELECT X.A FROM R5 X, R5 Y WHERE X.A " + joinOp + " Y.A ORDER BY Y.A");
  n=pn.getChild(0);
  assertTrue(n instanceof ProjectionPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  nli=(NestLoopIndexPlanNode)n;
  assertEquals(1,nli.getChildCount());
  c0=nli.getChild(0);
  assertTrue(c0 instanceof IndexScanPlanNode);
  assertTrue(((IndexScanPlanNode)c0).getTargetTableAlias().equalsIgnoreCase("Y"));
  pn=compile("SELECT X.A, X.C FROM R4 X, R4 Y WHERE X.A " + joinOp + " Y.A ORDER BY X.A, Y.C");
  n=pn.getChild(0);
  assertTrue(n instanceof ProjectionPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof OrderByPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  pn=compile("SELECT X.A FROM R4 X, R4 Y WHERE X.A " + joinOp + " Y.A ORDER BY Y.A, X.C");
  n=pn.getChild(0);
  assertTrue(n instanceof ProjectionPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof OrderByPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
}
