{
  AbstractPlanNode pn=compile("select * FROM R3 WHERE R3.A = 0");
  AbstractPlanNode n=pn.getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  assertNull(((IndexScanPlanNode)n).getPredicate());
  pn=compile("select * FROM R3 WHERE R3.A > 0 and R3.A < 5 and R3.C = 4");
  n=pn.getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  IndexScanPlanNode indexScan=(IndexScanPlanNode)n;
  AbstractExpression p=indexScan.getPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  p=indexScan.getEndExpression();
  assertEquals(ExpressionType.COMPARE_LESSTHAN,p.getExpressionType());
  assertEquals(IndexLookupType.GT,indexScan.getLookupType());
  pn=compile("select * FROM R3, R2 WHERE R3.A = R2.A AND R3.C > 0 and R2.C >= 5");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertNull(((NestLoopIndexPlanNode)n).getJoinPredicate());
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.EQ,indexScan.getLookupType());
  assertEquals(ExpressionType.COMPARE_EQUAL,indexScan.getEndExpression().getExpressionType());
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,indexScan.getPredicate().getExpressionType());
  AbstractPlanNode seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertEquals(ExpressionType.COMPARE_GREATERTHANOREQUALTO,((SeqScanPlanNode)seqScan).getPredicate().getExpressionType());
  pn=compile("select * FROM R3 JOIN R2 ON R3.A = R2.A WHERE R3.C > 0 and R2.C >= 5");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertNull(((NestLoopIndexPlanNode)n).getJoinPredicate());
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.EQ,indexScan.getLookupType());
  assertEquals(ExpressionType.COMPARE_EQUAL,indexScan.getEndExpression().getExpressionType());
  seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertEquals(ExpressionType.COMPARE_GREATERTHANOREQUALTO,((SeqScanPlanNode)seqScan).getPredicate().getExpressionType());
  pn=compile("select * FROM R3 JOIN R2 USING(A) WHERE R3.C > 0 and R2.C >= 5");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertNull(((NestLoopIndexPlanNode)n).getJoinPredicate());
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.EQ,indexScan.getLookupType());
  assertEquals(ExpressionType.COMPARE_EQUAL,indexScan.getEndExpression().getExpressionType());
  seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertEquals(ExpressionType.COMPARE_GREATERTHANOREQUALTO,((SeqScanPlanNode)seqScan).getPredicate().getExpressionType());
  pn=compile("select * FROM R3 JOIN R2 ON R3.A = R2.A JOIN R1 ON R2.A = R1.A WHERE R3.C > 0 and R2.C >= 5");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  p=((NestLoopPlanNode)n).getJoinPredicate();
  assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,p.getLeft().getExpressionType());
  assertEquals(ExpressionType.VALUE_TUPLE,p.getRight().getExpressionType());
  seqScan=n.getChild(1);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  n=n.getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nlij=(NestLoopIndexPlanNode)n;
  indexScan=(IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.EQ,indexScan.getLookupType());
  assertEquals(ExpressionType.COMPARE_EQUAL,indexScan.getEndExpression().getExpressionType());
  seqScan=nlij.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertEquals(ExpressionType.COMPARE_GREATERTHANOREQUALTO,((SeqScanPlanNode)seqScan).getPredicate().getExpressionType());
}
