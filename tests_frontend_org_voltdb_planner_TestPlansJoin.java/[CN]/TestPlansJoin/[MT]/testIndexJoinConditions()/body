{
  AbstractPlanNode pn=compile("select * FROM R3 WHERE R3.A = 0",0,false,null);
  AbstractPlanNode n=pn.getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  assertTrue(((IndexScanPlanNode)n).getPredicate() == null);
  pn=compile("select * FROM R3 WHERE R3.A > 0 and R3.A < 5 and R3.C = 4",0,false,null);
  n=pn.getChild(0);
  assertTrue(n instanceof IndexScanPlanNode);
  IndexScanPlanNode indexScan=(IndexScanPlanNode)n;
  AbstractExpression p=indexScan.getPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  p=indexScan.getEndExpression();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_LESSTHAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.GT));
  pn=compile("select * FROM R3, R2 WHERE R3.A = R2.A AND R3.C > 0 and R2.C >= 5",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(indexScan.getEndExpression().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  assertTrue(indexScan.getPredicate().getExpressionType() == ExpressionType.COMPARE_GREATERTHAN);
  AbstractPlanNode seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)seqScan).getPredicate().getExpressionType().equals(ExpressionType.COMPARE_GREATERTHANOREQUALTO));
  pn=compile("select * FROM R3 JOIN R2 ON R3.A = R2.A WHERE R3.C > 0 and R2.C >= 5",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(indexScan.getEndExpression().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)seqScan).getPredicate().getExpressionType().equals(ExpressionType.COMPARE_GREATERTHANOREQUALTO));
  pn=compile("select * FROM R3 JOIN R2 USING(A) WHERE R3.C > 0 and R2.C >= 5",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertTrue(((NestLoopIndexPlanNode)n).getJoinPredicate() == null);
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(indexScan.getEndExpression().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)seqScan).getPredicate().getExpressionType().equals(ExpressionType.COMPARE_GREATERTHANOREQUALTO));
  pn=compile("select * FROM R3 JOIN R2 ON R3.A = R2.A JOIN R1 ON R2.A = R1.A WHERE R3.C > 0 and R2.C >= 5",0,false,null);
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  p=((NestLoopPlanNode)n).getJoinPredicate();
  assertTrue(p.getExpressionType() == ExpressionType.COMPARE_EQUAL);
  ExpressionType t=p.getLeft().getExpressionType();
  assertTrue(p.getLeft().getExpressionType() == ExpressionType.VALUE_TUPLE);
  assertTrue(p.getRight().getExpressionType() == ExpressionType.VALUE_TUPLE);
  seqScan=n.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  n=n.getChild(1);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nlij=(NestLoopIndexPlanNode)n;
  indexScan=(IndexScanPlanNode)nlij.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertTrue(indexScan.getLookupType().equals(IndexLookupType.EQ));
  assertTrue(indexScan.getEndExpression().getExpressionType() == ExpressionType.COMPARE_EQUAL);
  seqScan=nlij.getChild(0);
  assertTrue(seqScan instanceof SeqScanPlanNode);
  assertTrue(((SeqScanPlanNode)seqScan).getPredicate().getExpressionType().equals(ExpressionType.COMPARE_GREATERTHANOREQUALTO));
}
