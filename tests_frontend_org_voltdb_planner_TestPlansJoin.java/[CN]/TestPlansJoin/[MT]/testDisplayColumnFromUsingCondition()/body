{
  AbstractPlanNode pn=compile("select  max(A) FROM R1 JOIN R2 USING(A)");
  pn=pn.getChild(0);
  assertTrue(pn instanceof AggregatePlanNode);
  NodeSchema ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=compile("select  distinct(A) FROM R1 JOIN R2 USING(A)");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=pn.getChild(0);
  assertTrue(pn instanceof DistinctPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=compile("select  A  FROM R1 JOIN R2 USING(A) ORDER BY A");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  List<AbstractPlanNode> apl;
  AbstractPlanNode node;
  SeqScanPlanNode seqScan;
  apl=compileToFragments("select * FROM P1 JOIN R2 USING(A) WHERE P1.C > 0 and R2.C >= 5");
  pn=apl.get(1);
  node=pn.getChild(0);
  assertTrue(node instanceof NestLoopPlanNode);
  assertEquals(ExpressionType.COMPARE_EQUAL,((NestLoopPlanNode)node).getJoinPredicate().getExpressionType());
  seqScan=(SeqScanPlanNode)node.getChild(1);
  assertEquals(ExpressionType.COMPARE_GREATERTHANOREQUALTO,seqScan.getPredicate().getExpressionType());
  node=node.getChild(0);
  seqScan=(SeqScanPlanNode)node;
  assertTrue(node instanceof SeqScanPlanNode);
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,seqScan.getPredicate().getExpressionType());
}
