{
  AbstractPlanNode pn=compile("select  max(A)  FROM R1 A JOIN R2 B USING(A)");
  pn=pn.getChild(0);
  assertTrue(pn instanceof AggregatePlanNode);
  NodeSchema ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=compile("select  distinct(A)  FROM R1 A JOIN R2 B USING(A)");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=pn.getChild(0);
  assertTrue(pn instanceof DistinctPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=compile("select  A  FROM R1 A JOIN R2 B USING(A) ORDER BY A");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  ns=pn.getOutputSchema();
  for (  SchemaColumn sc : ns.getColumns()) {
    AbstractExpression e=sc.getExpression();
    assertTrue(e instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)e;
    assertNotSame(-1,tve.getColumnIndex());
  }
}
