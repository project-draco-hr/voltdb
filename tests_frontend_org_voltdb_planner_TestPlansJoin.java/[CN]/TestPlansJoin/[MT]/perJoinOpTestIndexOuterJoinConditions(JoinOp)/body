{
  AbstractPlanNode pn=compile("SELECT * FROM R2 LEFT JOIN R3 ON R3.A " + joinOp + " R2.A AND R3.C > 0 AND R2.A < 6");
  AbstractPlanNode n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  NestLoopIndexPlanNode nlij=(NestLoopIndexPlanNode)n;
  assertEquals(JoinType.LEFT,nlij.getJoinType());
  assertNotNull(nlij.getPreJoinPredicate());
  AbstractExpression p=nlij.getPreJoinPredicate();
  assertEquals(ExpressionType.COMPARE_LESSTHAN,p.getExpressionType());
  assertNull(nlij.getJoinPredicate());
  assertNull(nlij.getWherePredicate());
  IndexScanPlanNode indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.EQ,indexScan.getLookupType());
  assertEquals(ExpressionType.COMPARE_EQUAL,indexScan.getEndExpression().getExpressionType());
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,indexScan.getPredicate().getExpressionType());
  AbstractPlanNode c1=n.getChild(0);
  assertTrue(c1 instanceof SeqScanPlanNode);
  assertNull(((SeqScanPlanNode)c1).getPredicate());
  pn=compile("SELECT * FROM R2 LEFT JOIN R3 ON R3.C " + joinOp + " R2.A AND R3.A > 0 AND R3.C != 0 AND R2.A < 6");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopPlanNode);
  NestLoopPlanNode nlj=(NestLoopPlanNode)n;
  assertEquals(JoinType.LEFT,nlj.getJoinType());
  assertNotNull(nlj.getPreJoinPredicate());
  p=nlj.getPreJoinPredicate();
  assertEquals(ExpressionType.COMPARE_LESSTHAN,p.getExpressionType());
  assertNotNull(nlj.getJoinPredicate());
  assertEquals(ExpressionType.COMPARE_EQUAL,nlj.getJoinPredicate().getExpressionType());
  assertNull(nlj.getWherePredicate());
  c1=n.getChild(0);
  assertTrue(c1 instanceof SeqScanPlanNode);
  assertNull(((SeqScanPlanNode)c1).getPredicate());
  AbstractPlanNode c2=n.getChild(1);
  assertTrue(c2 instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)c2;
  assertEquals(IndexLookupType.GT,indexScan.getLookupType());
  assertNotNull(indexScan.getPredicate());
  assertEquals(ExpressionType.COMPARE_NOTEQUAL,indexScan.getPredicate().getExpressionType());
  pn=compile("SELECT * FROM R2 LEFT JOIN R3 ON R3.A " + joinOp + " R2.A WHERE R3.A IS NULL AND R2.A > 3 AND (R2.A < 6 OR R3.C IS NULL)");
  n=pn.getChild(0).getChild(0);
  assertTrue(n instanceof NestLoopIndexPlanNode);
  assertEquals(((NestLoopIndexPlanNode)n).getJoinType(),JoinType.LEFT);
  assertNull(((NestLoopIndexPlanNode)n).getPreJoinPredicate());
  assertNull(((NestLoopIndexPlanNode)n).getJoinPredicate());
  assertNotNull(((NestLoopIndexPlanNode)n).getWherePredicate());
  AbstractExpression w=((NestLoopIndexPlanNode)n).getWherePredicate();
  assertEquals(ExpressionType.CONJUNCTION_AND,w.getExpressionType());
  assertEquals(ExpressionType.OPERATOR_IS_NULL,w.getRight().getExpressionType());
  assertEquals(ExpressionType.CONJUNCTION_OR,w.getLeft().getExpressionType());
  indexScan=(IndexScanPlanNode)n.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.EQ,indexScan.getLookupType());
  assertEquals(ExpressionType.COMPARE_EQUAL,indexScan.getEndExpression().getExpressionType());
  c1=n.getChild(0);
  assertTrue(c1 instanceof SeqScanPlanNode);
  assertEquals(ExpressionType.COMPARE_GREATERTHAN,((SeqScanPlanNode)c1).getPredicate().getExpressionType());
}
