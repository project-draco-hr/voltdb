{
  AbstractPlanNode pn;
  IndexScanPlanNode ispn;
  String json;
  pn=compile("select * from l aliased where  b = ? and DECODE(a, null, 0, a) = 0 and id = ?;");
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(3,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l aliased, l where l.b = ? and DECODE(l.a, null, 0, l.a) = 0 and l.id = ? and l.lname = aliased.lname;");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(3,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where x.b = ? and DECODE(x.a, null, 0, x.a) = 0 and x.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0).getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(3,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where x.b = ? and DECODE(x.a, null, 0, x.a) = 0 and x.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0).getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(3,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where l.b = ? and DECODE(x.a, null, 0, x.a) = 0 and x.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"" + IndexAVL.AUTO_GEN_CONSTRAINT_WRAPPER_PREFIX + "PK_LOG"));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where l.b = ? and DECODE(x.a, null, 0, x.a) = 0 and l.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where x.b = ? and DECODE(l.a, null, 0, l.a) = 0 and x.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where l.b = ? and DECODE(x.a, null, 0, x.a) = 0 and l.id = ? and l.lname = x.lname;");
  System.out.println("DEBUG: " + pn.toExplainPlanString());
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where x.b = ? and DECODE(l.a, null, 0, x.a) = 0 and x.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where l.b = ? and DECODE(x.a, null, 0, l.a) = 0 and l.id = ? and l.lname = x.lname;");
  System.out.println("DEBUG: " + pn.toExplainPlanString());
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where x.b = ? and DECODE(l.a, null, 0, x.a) = 0 and x.id = ? and l.lname = x.lname;");
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"IDX_A\""));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
  pn=compile("select * from l x, l where l.b = ? and DECODE(x.a, null, 0, l.a) = 0 and x.id = ? and l.lname = x.lname;");
  System.out.println("DEBUG: " + pn.toExplainPlanString());
  pn=pn.getChild(0).getChild(0);
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  ispn=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  json=ispn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"" + IndexAVL.AUTO_GEN_CONSTRAINT_WRAPPER_PREFIX + "PK_LOG"));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  json=pn.toJSONString();
  assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"DECODE_IDX3\""));
  ispn=(IndexScanPlanNode)pn;
  assertEquals(1,ispn.getSearchKeyExpressions().size());
}
