{
{
    AbstractPlanNode pn=compile("select * from c where a > 0;");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"Z_FULL_IDX_A\""));
  }
{
    AbstractPlanNode pn=compile("select * from c where a > 0 and e is NULL;");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() == null);
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"PARTIAL_IDX_NULL_E\""));
  }
{
    AbstractPlanNode pn=compile("select * from c where a > 0 and e is not NULL;");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() == null);
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"A_PARTIAL_IDX_NOT_NULL_E\""));
  }
{
    AbstractPlanNode pn=compile("select * from c where a > 0 and e = 0;");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() != null);
    AbstractExpression p=ipn.getPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"A_PARTIAL_IDX_NOT_NULL_E\""));
  }
{
    AbstractPlanNode pn=compile("select * from c where a > 0 and 0 = abs(e + d);");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() != null);
    AbstractExpression p=ipn.getPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"A_PARTIAL_IDX_NOT_NULL_D_E\""));
  }
{
    AbstractPlanNode pn=compile("select * from c where a > 0 and 0 = abs(e + b);");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() != null);
    AbstractExpression p=ipn.getPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"A_PARTIAL_IDX_NOT_NULL_E\""));
  }
{
    AbstractPlanNode pn=compile("select * from c where a = 0 and e = 0;");
    pn=pn.getChild(0);
    assertEquals(PlanNodeType.INDEXSCAN,pn.getPlanNodeType());
    IndexScanPlanNode ipn=(IndexScanPlanNode)pn;
    assertTrue(ipn.getPredicate() != null);
    AbstractExpression p=ipn.getPredicate();
    assertEquals(ExpressionType.COMPARE_EQUAL,p.getExpressionType());
    String json=pn.toJSONString();
    assertTrue(json.contains("\"TARGET_INDEX_NAME\":\"Z_FULL_IDX_A\""));
  }
}
