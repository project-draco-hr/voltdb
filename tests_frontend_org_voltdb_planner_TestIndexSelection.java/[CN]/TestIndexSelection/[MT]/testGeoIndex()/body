{
  AbstractPlanNode pn;
  IndexScanPlanNode indexScan;
  String jsonicIdxScan;
  pn=compile("select polys.point " + "from polypoints polys " + "where contains(polys.poly, ?);");
  pn=pn.getChild(0);
  System.out.println("DEBUG: " + pn.toExplainPlanString());
  assertTrue(pn instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)pn;
  assertEquals(IndexLookupType.GEO_CONTAINS,indexScan.getLookupType());
  jsonicIdxScan=indexScan.toJSONString();
  System.out.println("DEBUG: " + jsonicIdxScan);
  assertTrue(jsonicIdxScan.contains("\"TARGET_INDEX_NAME\":\"POLYPOINTSPOLY\""));
  assertEquals(1,indexScan.getSearchKeyExpressions().size());
  assertTrue(jsonicIdxScan.contains("\"SEARCHKEY_EXPRESSIONS\":[{\"TYPE\":31,\"VALUE_TYPE\":26"));
  pn=compile("select polys.poly, points.point " + "from polypoints polys, polypoints points " + "where contains(polys.poly, points.point);");
  pn=pn.getChild(0);
  pn=pn.getChild(0);
  System.out.println("DEBUG: " + pn.toExplainPlanString());
  assertTrue(pn instanceof NestLoopIndexPlanNode);
  indexScan=(IndexScanPlanNode)pn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  assertEquals(IndexLookupType.GEO_CONTAINS,indexScan.getLookupType());
  jsonicIdxScan=indexScan.toJSONString();
  assertTrue(jsonicIdxScan.contains("\"TARGET_INDEX_NAME\":\"POLYPOINTSPOLY\""));
  assertEquals(1,indexScan.getSearchKeyExpressions().size());
  assertTrue(jsonicIdxScan.contains("\"SEARCHKEY_EXPRESSIONS\":[{\"TYPE\":32,\"VALUE_TYPE\":26"));
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)pn;
  assertEquals(IndexLookupType.GTE,indexScan.getLookupType());
  pn=compile("select polys.point " + "from polypoints polys " + "where contains(polys.poly, ?);");
  pn=pn.getChild(0);
  assertTrue(pn instanceof IndexScanPlanNode);
  indexScan=(IndexScanPlanNode)pn;
  assertEquals(IndexLookupType.GEO_CONTAINS,indexScan.getLookupType());
  jsonicIdxScan=indexScan.toJSONString();
  assertTrue(jsonicIdxScan.contains("\"TARGET_INDEX_NAME\":\"POLYPOINTSPOLY\""));
  assertEquals(1,indexScan.getSearchKeyExpressions().size());
  assertTrue(jsonicIdxScan.contains("\"SEARCHKEY_EXPRESSIONS\":[{\"TYPE\":31,\"VALUE_TYPE\":26"));
}
