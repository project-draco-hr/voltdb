{
  System.out.println("STARTING serial/parital aggregate test.....");
  String sql;
  VoltTable vt;
  Client client=this.getClient();
  client.callProcedure("VOTES.insert",1,"MA",1);
  client.callProcedure("VOTES.insert",2,"RI",2);
  client.callProcedure("VOTES.insert",3,"CA",1);
  client.callProcedure("VOTES.insert",4,"MA",2);
  client.callProcedure("VOTES.insert",5,"CA",1);
  sql="select state, count(*) from votes group by state order by 1, 2";
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().toLowerCase().contains("serial"));
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertEquals(3,vt.getRowCount());
  vt.advanceRow();
  assertEquals("CA",vt.getString(0));
  assertEquals(2,vt.getLong(1));
  vt.advanceRow();
  assertEquals("MA",vt.getString(0));
  assertEquals(2,vt.getLong(1));
  vt.advanceRow();
  assertEquals("RI",vt.getString(0));
  assertEquals(1,vt.getLong(1));
  sql="select state, contestant_number, count(*) from votes " + "group by state, contestant_number order by 1, 2";
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().toLowerCase().contains("partial"));
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertEquals(4,vt.getRowCount());
  vt.advanceRow();
  assertEquals("CA",vt.getString(0));
  assertEquals(1,vt.getLong(1));
  assertEquals(2,vt.getLong(2));
  vt.advanceRow();
  assertEquals("MA",vt.getString(0));
  assertEquals(1,vt.getLong(1));
  assertEquals(1,vt.getLong(2));
  vt.advanceRow();
  assertEquals("MA",vt.getString(0));
  assertEquals(2,vt.getLong(1));
  assertEquals(1,vt.getLong(2));
  vt.advanceRow();
  assertEquals("RI",vt.getString(0));
  assertEquals(2,vt.getLong(1));
  assertEquals(1,vt.getLong(2));
}
