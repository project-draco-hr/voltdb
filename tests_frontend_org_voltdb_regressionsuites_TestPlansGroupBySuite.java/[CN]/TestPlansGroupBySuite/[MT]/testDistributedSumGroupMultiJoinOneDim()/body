{
  VoltTable vt;
  Client client=getClient();
  loadF(client,0);
  loadDims(client);
  String qs="select D1.D1_NAME, D2.D2_NAME, sum(V.SUM_V1), sum(V.SUM_V2), sum(V.SUM_V3) " + "from D1, D2, V " + "where V.V_D1_PKEY = D1.D1_PKEY and V.V_D2_PKEY = D2.D2_PKEY and D1.D1_PKEY = 6 "+ "group by D1.D1_NAME, D2.D2_NAME;";
  vt=client.callProcedure("@adhoc",qs)[0];
  assertEquals(vt.getRowCount(),5);
  ArrayList<VoltTableRow> sorted=new ArrayList<VoltTableRow>();
  while (vt.advanceRow()) {
    sorted.add(vt.cloneRow());
  }
  System.out.println("DSGMJonedim");
  debug(sorted);
  Collections.sort(sorted,new VRowComparator<VoltTableRow>());
  System.out.println("DSGMJonedim: ");
  debug(sorted);
  int i=0;
  for (  VoltTableRow row : sorted) {
    String d2_name="D2_" + ((i * 10) + 6);
    String d1=(String)row.get(0,VoltType.STRING);
    String d2=(String)row.get(1,VoltType.STRING);
    Integer s1=(Integer)row.get(2,VoltType.INTEGER);
    Integer s3=(Integer)row.get(4,VoltType.INTEGER);
    System.out.println("D2 expected: " + d2_name + " actual: "+ d2);
    assertEquals(d1,"D1_6");
    assertEquals(d2,d2_name);
    assertEquals(s1.intValue(),40);
    assertEquals(s3.intValue(),0);
    i++;
  }
}
