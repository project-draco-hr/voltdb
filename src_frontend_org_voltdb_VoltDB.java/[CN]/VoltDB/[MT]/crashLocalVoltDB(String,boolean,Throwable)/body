{
  wasCrashCalled=true;
  crashMessage=errMsg;
  if (ignoreCrash) {
    throw new AssertionError("Faux crash of VoltDB successful.");
  }
  List<String> throwerStacktrace=null;
  if (thrown != null) {
    throwerStacktrace=new ArrayList<String>();
    throwerStacktrace.add("Stack trace of thrown exception: " + thrown.toString());
    for (    StackTraceElement ste : thrown.getStackTrace()) {
      throwerStacktrace.add(ste.toString());
    }
  }
  List<String> currentStacktrace=new ArrayList<String>();
  currentStacktrace.add("Stack trace from crashLocalVoltDB() method:");
  Map<Thread,StackTraceElement[]> traces=Thread.getAllStackTraces();
  StackTraceElement[] myTrace=traces.get(Thread.currentThread());
  for (  StackTraceElement ste : myTrace) {
    currentStacktrace.add(ste.toString());
  }
  try {
    TimestampType ts=new TimestampType(new java.util.Date());
    CatalogContext catalogContext=VoltDB.instance().getCatalogContext();
    String root=catalogContext != null ? catalogContext.cluster.getVoltroot() + File.separator : "";
    PrintWriter writer=new PrintWriter(root + "voltdb_crash" + ts.toString().replace(' ','-')+ ".txt");
    writer.println("Time: " + ts);
    writer.println("Message: " + errMsg);
    writer.println();
    writer.println("Platform Properties:");
    PlatformProperties pp=PlatformProperties.getPlatformProperties();
    String[] lines=pp.toLogLines().split("\n");
    for (    String line : lines) {
      writer.println(line.trim());
    }
    if (thrown != null) {
      writer.println();
      writer.println("****** Exception Thread ****** ");
      for (      String throwerStackElem : throwerStacktrace) {
        writer.println(throwerStackElem);
      }
    }
    writer.println();
    writer.println("****** Current Thread ****** ");
    for (    String currentStackElem : currentStacktrace) {
      writer.println(currentStackElem);
    }
    writer.println("****** All Threads ******");
    Iterator<Thread> it=traces.keySet().iterator();
    while (it.hasNext()) {
      Thread key=it.next();
      writer.println();
      StackTraceElement[] st=traces.get(key);
      writer.println("****** " + key + " ******");
      for (      StackTraceElement ste : st)       writer.println(ste);
    }
    writer.close();
  }
 catch (  Throwable err) {
    err.printStackTrace();
  }
  VoltLogger log=null;
  try {
    log=new VoltLogger("HOST");
  }
 catch (  RuntimeException rt_ex) {
  }
  if (log != null) {
    log.fatal(errMsg);
    if (thrown != null) {
      if (stackTrace) {
        for (        String throwerStackElem : throwerStacktrace) {
          log.fatal(throwerStackElem);
        }
      }
 else {
        log.fatal(thrown.toString());
      }
    }
 else {
      if (stackTrace) {
        for (        String currentStackElem : currentStacktrace) {
          log.fatal(currentStackElem);
        }
      }
    }
  }
 else {
    System.err.println(errMsg);
    if (thrown != null) {
      if (stackTrace) {
        for (        String throwerStackElem : throwerStacktrace) {
          System.err.println(throwerStackElem);
        }
      }
 else {
        System.err.println(thrown.toString());
      }
    }
 else {
      if (stackTrace) {
        for (        String currentStackElem : currentStacktrace) {
          System.err.println(currentStackElem);
        }
      }
    }
  }
  System.err.println("VoltDB has encountered an unrecoverable error and is exiting.");
  System.err.println("The log may contain additional information.");
  System.exit(-1);
}
