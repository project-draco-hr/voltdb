{
  String arg;
  for (int i=0; i < args.length; ++i) {
    arg=args[i];
    if (arg.equals("")) {
      continue;
    }
    if (arg.equalsIgnoreCase("-h") || arg.equalsIgnoreCase("--help")) {
      referToDocAndExit();
    }
    if (arg.equals("noloadlib")) {
      m_noLoadLibVOLTDB=true;
    }
 else     if (arg.equals("ipc")) {
      m_backend=BackendTarget.NATIVE_EE_IPC;
    }
 else     if (arg.equals("jni")) {
      m_backend=BackendTarget.NATIVE_EE_JNI;
    }
 else     if (arg.equals("hsqldb")) {
      m_backend=BackendTarget.HSQLDB_BACKEND;
    }
 else     if (arg.equals("postgresql")) {
      m_backend=BackendTarget.POSTGRESQL_BACKEND;
    }
 else     if (arg.equals("postgis")) {
      m_backend=BackendTarget.POSTGIS_BACKEND;
    }
 else     if (arg.equals("valgrind")) {
      m_backend=BackendTarget.NATIVE_EE_VALGRIND_IPC;
    }
 else     if (arg.equals("quietadhoc")) {
      m_quietAdhoc=true;
    }
 else     if (arg.equals("port")) {
      String portStr=args[++i];
      if (portStr.indexOf(':') != -1) {
        HostAndPort hap=MiscUtils.getHostAndPortFromHostnameColonPort(portStr,m_port);
        m_clientInterface=hap.getHostText();
        m_port=hap.getPort();
      }
 else {
        m_port=Integer.parseInt(portStr);
      }
    }
 else     if (arg.equals("adminport")) {
      String portStr=args[++i];
      if (portStr.indexOf(':') != -1) {
        HostAndPort hap=MiscUtils.getHostAndPortFromHostnameColonPort(portStr,VoltDB.DEFAULT_ADMIN_PORT);
        m_adminInterface=hap.getHostText();
        m_adminPort=hap.getPort();
      }
 else {
        m_adminPort=Integer.parseInt(portStr);
      }
    }
 else     if (arg.equals("internalport")) {
      String portStr=args[++i];
      if (portStr.indexOf(':') != -1) {
        HostAndPort hap=MiscUtils.getHostAndPortFromHostnameColonPort(portStr,m_internalPort);
        m_internalInterface=hap.getHostText();
        m_internalPort=hap.getPort();
      }
 else {
        m_internalPort=Integer.parseInt(portStr);
      }
    }
 else     if (arg.equals("replicationport")) {
      String portStr=args[++i];
      if (portStr.indexOf(':') != -1) {
        HostAndPort hap=MiscUtils.getHostAndPortFromHostnameColonPort(portStr,VoltDB.DEFAULT_DR_PORT);
        m_drInterface=hap.getHostText();
        m_drAgentPortStart=hap.getPort();
      }
 else {
        m_drAgentPortStart=Integer.parseInt(portStr);
      }
    }
 else     if (arg.equals("httpport")) {
      String portStr=args[++i];
      if (portStr.indexOf(':') != -1) {
        HostAndPort hap=MiscUtils.getHostAndPortFromHostnameColonPort(portStr,VoltDB.DEFAULT_HTTP_PORT);
        m_httpPortInterface=hap.getHostText();
        m_httpPort=hap.getPort();
      }
 else {
        m_httpPort=Integer.parseInt(portStr);
      }
    }
 else     if (arg.startsWith("zkport")) {
      String portStr=args[++i];
      if (portStr.indexOf(':') != -1) {
        HostAndPort hap=MiscUtils.getHostAndPortFromHostnameColonPort(portStr,org.voltcore.common.Constants.DEFAULT_ZK_PORT);
        m_zkInterface=hap.getHostText() + ":" + hap.getPort();
      }
 else {
        m_zkInterface="127.0.0.1:" + portStr.trim();
      }
    }
 else     if (arg.equals("mesh")) {
      StringBuilder sbld=new StringBuilder(64);
      while ((++i < args.length && args[i].endsWith(",")) || (i + 1 < args.length && args[i + 1].startsWith(","))) {
        sbld.append(args[i]);
      }
      if (i < args.length) {
        sbld.append(args[i]);
      }
      m_meshBrokers=sbld.toString();
    }
 else     if (arg.startsWith("mesh ")) {
      int next=i + 1;
      StringBuilder sbld=new StringBuilder(64).append(arg.substring("mesh ".length()));
      while ((++i < args.length && args[i].endsWith(",")) || (i + 1 < args.length && args[i + 1].startsWith(","))) {
        sbld.append(args[i]);
      }
      if (i > next && i < args.length) {
        sbld.append(args[i]);
      }
      m_meshBrokers=sbld.toString();
    }
 else     if (arg.equals("hostcount")) {
      m_hostCount=Integer.parseInt(args[++i].trim());
    }
 else     if (arg.equals("publicinterface")) {
      m_publicInterface=args[++i].trim();
    }
 else     if (arg.startsWith("publicinterface ")) {
      m_publicInterface=arg.substring("publicinterface ".length()).trim();
    }
 else     if (arg.equals("externalinterface")) {
      m_externalInterface=args[++i].trim();
    }
 else     if (arg.startsWith("externalinterface ")) {
      m_externalInterface=arg.substring("externalinterface ".length()).trim();
    }
 else     if (arg.equals("internalinterface")) {
      m_internalInterface=args[++i].trim();
    }
 else     if (arg.startsWith("internalinterface ")) {
      m_internalInterface=arg.substring("internalinterface ".length()).trim();
    }
 else     if (arg.startsWith("networkbindings")) {
      for (      String core : args[++i].split(",")) {
        m_networkCoreBindings.offer(core);
      }
      System.out.println("Network bindings are " + m_networkCoreBindings);
    }
 else     if (arg.startsWith("computationbindings")) {
      for (      String core : args[++i].split(",")) {
        m_computationCoreBindings.offer(core);
      }
      System.out.println("Computation bindings are " + m_computationCoreBindings);
    }
 else     if (arg.startsWith("executionbindings")) {
      for (      String core : args[++i].split(",")) {
        m_executionCoreBindings.offer(core);
      }
      System.out.println("Execution bindings are " + m_executionCoreBindings);
    }
 else     if (arg.startsWith("commandlogbinding")) {
      String binding=args[++i];
      if (binding.split(",").length > 1) {
        throw new RuntimeException("Command log only supports a single set of bindings");
      }
      m_commandLogBinding=binding;
      System.out.println("Commanglog binding is " + m_commandLogBinding);
    }
 else     if (arg.equals("host") || arg.equals("leader")) {
      m_leader=args[++i].trim();
    }
 else     if (arg.startsWith("host")) {
      m_leader=arg.substring("host ".length()).trim();
    }
 else     if (arg.startsWith("leader")) {
      m_leader=arg.substring("leader ".length()).trim();
    }
 else     if (arg.equals("rejoinhost")) {
      m_startAction=StartAction.REJOIN;
      m_leader=args[++i].trim();
    }
 else     if (arg.startsWith("rejoinhost ")) {
      m_startAction=StartAction.REJOIN;
      m_leader=arg.substring("rejoinhost ".length()).trim();
    }
 else     if (arg.equals("initialize")) {
      m_startAction=StartAction.INITIALIZE;
    }
 else     if (arg.equals("probe")) {
      m_startAction=StartAction.PROBE;
      if (args.length > i + 1 && args[i + 1].trim().equals("safemode")) {
        i+=1;
        m_safeMode=true;
      }
    }
 else     if (arg.equals("create")) {
      m_startAction=StartAction.CREATE;
    }
 else     if (arg.equals("recover")) {
      m_startAction=StartAction.RECOVER;
      if (args.length > i + 1 && args[i + 1].trim().equals("safemode")) {
        m_startAction=StartAction.SAFE_RECOVER;
        i+=1;
        m_safeMode=true;
      }
    }
 else     if (arg.equals("rejoin")) {
      m_startAction=StartAction.REJOIN;
    }
 else     if (arg.startsWith("live rejoin")) {
      m_startAction=StartAction.LIVE_REJOIN;
    }
 else     if (arg.equals("live") && args.length > i + 1 && args[++i].trim().equals("rejoin")) {
      m_startAction=StartAction.LIVE_REJOIN;
    }
 else     if (arg.startsWith("add")) {
      m_startAction=StartAction.JOIN;
      m_enableAdd=true;
    }
 else     if (arg.equals("noadd")) {
      m_enableAdd=false;
    }
 else     if (arg.equals("replica")) {
      m_replicationRole=ReplicationRole.REPLICA;
    }
 else     if (arg.equals("dragentportstart")) {
      m_drAgentPortStart=Integer.parseInt(args[++i]);
    }
 else     if (arg.equals("timestampsalt")) {
      m_timestampTestingSalt=Long.parseLong(args[++i]);
    }
 else     if (arg.startsWith("timestampsalt ")) {
      m_timestampTestingSalt=Long.parseLong(arg.substring("timestampsalt ".length()));
    }
 else     if (arg.equals("tag")) {
      m_tag=args[++i];
    }
 else     if (arg.startsWith("tag ")) {
      m_tag=arg.substring("tag ".length());
    }
 else     if (arg.equals("catalog")) {
      m_pathToCatalog=args[++i];
    }
 else     if (arg.startsWith("catalog ")) {
      m_pathToCatalog=arg.substring("catalog ".length());
    }
 else     if (arg.equals("deployment")) {
      m_pathToDeployment=args[++i];
    }
 else     if (arg.equals("license")) {
      m_pathToLicense=args[++i];
    }
 else     if (arg.equalsIgnoreCase("ipcport")) {
      String portStr=args[++i];
      m_ipcPort=Integer.valueOf(portStr);
    }
 else     if (arg.equals("forcecatalogupgrade")) {
      hostLog.info("Forced catalog upgrade will occur due to command line option.");
      m_forceCatalogUpgrade=true;
    }
 else     if (arg.equalsIgnoreCase("versionoverride")) {
      m_versionStringOverrideForTest=args[++i].trim();
      m_versionCompatibilityRegexOverrideForTest=args[++i].trim();
    }
 else     if (arg.equalsIgnoreCase("buildstringoverride"))     m_buildStringOverrideForTest=args[++i].trim();
 else     if (arg.equalsIgnoreCase("placementgroup"))     m_placementGroup=args[++i].trim();
 else     if (arg.equalsIgnoreCase("force")) {
      m_forceVoltdbCreate=true;
    }
 else     if (arg.equalsIgnoreCase("paused")) {
      m_isPaused=true;
    }
 else     if (arg.equalsIgnoreCase("voltdbroot")) {
      m_voltdbRoot=new VoltFile(args[++i]);
      if (!DBROOT.equals(m_voltdbRoot.getName())) {
        m_voltdbRoot=new VoltFile(m_voltdbRoot,DBROOT);
      }
      if (!m_voltdbRoot.exists() && !m_voltdbRoot.mkdirs()) {
        System.err.println("FATAL: Could not create directory \"" + m_voltdbRoot.getPath() + "\"");
        referToDocAndExit();
      }
      try {
        CatalogUtil.validateDirectory(DBROOT,m_voltdbRoot);
      }
 catch (      RuntimeException e) {
        System.err.println("FATAL: " + e.getMessage());
        referToDocAndExit();
      }
    }
 else {
      System.err.println("FATAL: Unrecognized option to VoltDB: " + arg);
      referToDocAndExit();
    }
  }
  if (!m_publicInterface.isEmpty()) {
    m_httpPortInterface=m_publicInterface;
  }
  if (m_startAction != null && !m_startAction.isLegacy()) {
    VoltLog4jLogger.setFileLoggerRoot(m_voltdbRoot);
  }
  if (null == m_startAction) {
    hostLog.fatal("You must specify a startup action, either initialize, probe, create, recover, rejoin, collect, or compile.");
    referToDocAndExit();
  }
  if (m_startAction.doesRecover() && m_pathToCatalog != null) {
    hostLog.warn("Catalog is ignored for 'recover' action.");
  }
  if (m_leader == null && m_pathToDeployment == null && !m_startAction.doesRejoin()) {
    m_leader="localhost";
  }
  if (m_startAction == StartAction.PROBE) {
    checkInitializationMarker();
  }
 else   if (m_startAction == StartAction.INITIALIZE) {
    if (isInitialized() && !m_forceVoltdbCreate) {
      hostLog.fatal(m_voltdbRoot + " is already initialized" + "\nUse the start command to start the initialized database or use init --force"+ " to initialize a new database overwriting existing files.");
      referToDocAndExit();
    }
  }
 else   if (m_meshBrokers == null || m_meshBrokers.trim().isEmpty()) {
    if (m_leader != null) {
      m_meshBrokers=m_leader;
    }
  }
  if (m_meshBrokers != null) {
    m_coordinators=MeshProber.hosts(m_meshBrokers);
    if (m_leader == null) {
      m_leader=m_coordinators.first();
    }
  }
  if (m_startAction == StartAction.PROBE && m_hostCount == UNDEFINED && m_coordinators.size() > 1) {
    m_hostCount=m_coordinators.size();
  }
}
