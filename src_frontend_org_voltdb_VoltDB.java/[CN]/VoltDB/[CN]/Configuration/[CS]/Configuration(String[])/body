{
  String arg;
  for (int i=0; i < args.length; ++i) {
    arg=args[i];
    if (arg.equals("")) {
      continue;
    }
    if (arg.equals("noloadlib")) {
      m_noLoadLibVOLTDB=true;
    }
 else     if (arg.equals("ipc")) {
      m_backend=BackendTarget.NATIVE_EE_IPC;
    }
 else     if (arg.equals("jni")) {
      m_backend=BackendTarget.NATIVE_EE_JNI;
    }
 else     if (arg.equals("hsqldb")) {
      m_backend=BackendTarget.HSQLDB_BACKEND;
    }
 else     if (arg.equals("valgrind")) {
      m_backend=BackendTarget.NATIVE_EE_VALGRIND_IPC;
    }
 else     if (arg.equals("quietadhoc")) {
      m_quietAdhoc=true;
    }
 else     if (arg.equals("port")) {
      m_port=Integer.parseInt(args[++i]);
    }
 else     if (arg.startsWith("port ")) {
      m_port=Integer.parseInt(arg.substring("port ".length()));
    }
 else     if (arg.equals("adminport")) {
      m_adminPort=Integer.parseInt(args[++i]);
    }
 else     if (arg.startsWith("adminport ")) {
      m_adminPort=Integer.parseInt(arg.substring("adminport ".length()));
    }
 else     if (arg.equals("internalport")) {
      m_internalPort=Integer.parseInt(args[++i]);
    }
 else     if (arg.startsWith("internalport ")) {
      m_internalPort=Integer.parseInt(arg.substring("internalport ".length()));
    }
 else     if (arg.equals("replicationport")) {
      m_drAgentPortStart=Integer.parseInt(args[++i]);
    }
 else     if (arg.startsWith("replicationport ")) {
      m_drAgentPortStart=Integer.parseInt(arg.substring("replicationport ".length()));
    }
 else     if (arg.startsWith("zkport")) {
      m_zkInterface="127.0.0.1:" + args[++i];
    }
 else     if (arg.equals("externalinterface")) {
      m_externalInterface=args[++i].trim();
    }
 else     if (arg.startsWith("externalinterface ")) {
      m_externalInterface=arg.substring("externalinterface ".length()).trim();
    }
 else     if (arg.equals("internalinterface")) {
      m_internalInterface=args[++i].trim();
    }
 else     if (arg.startsWith("internalinterface ")) {
      m_internalInterface=arg.substring("internalinterface ".length()).trim();
    }
 else     if (arg.equals("leaderport")) {
      m_leaderPort=Integer.valueOf(args[++i]);
    }
 else     if (arg.equals("leader")) {
      m_leader=args[++i].trim();
    }
 else     if (arg.startsWith("leader")) {
      m_leader=arg.substring("leader ".length()).trim();
    }
 else     if (arg.equals("rejoinhost")) {
      m_rejoinToHostAndPort=args[++i].trim();
    }
 else     if (arg.startsWith("rejoinhost ")) {
      m_rejoinToHostAndPort=arg.substring("rejoinhost ".length()).trim();
    }
 else     if (arg.equals("create")) {
      m_startAction=START_ACTION.CREATE;
    }
 else     if (arg.equals("recover")) {
      m_startAction=START_ACTION.RECOVER;
    }
 else     if (arg.equals("start")) {
      m_startAction=START_ACTION.START;
    }
 else     if (arg.equals("replica")) {
      m_replicationRole=ReplicationRole.REPLICA;
    }
 else     if (arg.equals("dragentportstart")) {
      m_drAgentPortStart=Integer.parseInt(args[++i]);
    }
 else     if (arg.equals("timestampsalt")) {
      m_timestampTestingSalt=Long.parseLong(args[++i]);
    }
 else     if (arg.startsWith("timestampsalt ")) {
      m_timestampTestingSalt=Long.parseLong(arg.substring("timestampsalt ".length()));
    }
 else     if (arg.equals("catalog")) {
      m_pathToCatalog=args[++i];
    }
 else     if (arg.startsWith("catalog ")) {
      m_pathToCatalog=arg.substring("catalog ".length());
    }
 else     if (arg.equals("deployment")) {
      m_pathToDeployment=args[++i];
    }
 else     if (arg.equals("license")) {
      m_pathToLicense=args[++i];
    }
 else     if (arg.equalsIgnoreCase("ipcports")) {
      String portList=args[++i];
      String ports[]=portList.split(",");
      for (      String port : ports) {
        m_ipcPorts.add(Integer.valueOf(port));
      }
    }
 else     if (arg.equals("enableiv2")) {
      m_enableIV2=true;
    }
 else {
      hostLog.fatal("Unrecognized option to VoltDB: " + arg);
      usage();
      System.exit(-1);
    }
  }
  if (m_leader == null && m_pathToDeployment == null) {
    m_leader="localhost";
  }
}
