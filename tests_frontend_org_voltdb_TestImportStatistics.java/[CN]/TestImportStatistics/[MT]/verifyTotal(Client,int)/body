{
  waitForLogEvents(client,count);
  ClientResponse response=client.callProcedure("@Statistics","Importer",0);
  VoltTable stats=response.getResults()[0];
  int numSocketsFound=0;
  boolean foundLog4j=false;
  for (int i=0; i < stats.getRowCount(); i++) {
    VoltTableRow row=stats.fetchRow(i);
    String name=row.getString(ImporterStatsCollector.IMPORTER_NAME_COL);
    long expectedFailures=0;
    String procName=row.getString(ImporterStatsCollector.PROC_NAME_COL);
    if (name.equals("SocketImporter")) {
      expectedFailures=m_expectedSocketFailures.get(procName);
      numSocketsFound++;
    }
 else     if (name.equals("Log4jSocketHandlerImporter")) {
      expectedFailures=0;
      procName="log_events.insert";
      foundLog4j=true;
    }
 else {
      continue;
    }
    assertEquals(procName,row.getString(ImporterStatsCollector.PROC_NAME_COL));
    assertEquals(expectedFailures,row.getLong(ImporterStatsCollector.FAILURE_COUNT_COL));
    assertEquals(count - expectedFailures,row.getLong(ImporterStatsCollector.SUCCESS_COUNT_COL));
    assertEquals(0,row.getLong(ImporterStatsCollector.PENDING_COUNT_COL));
    assertEquals(0,row.getLong(ImporterStatsCollector.RETRY_COUNT_COL));
    assertNotNull(row.getLong("TIMESTAMP"));
    assertNotNull(row.getLong(VoltSystemProcedure.CNAME_HOST_ID));
    assertNotNull(row.getString("HOSTNAME"));
    assertNotNull(row.getLong(VoltSystemProcedure.CNAME_SITE_ID));
  }
  assertTrue(numSocketsFound == 2 && foundLog4j);
}
