{
  if (responseToSend == null)   responseToSend=r;
  if (outstandingCoordinators != null)   outstandingCoordinators.remove(coordinatorHSId);
  outstandingResponses--;
  VoltTable[] currResults=r.getResults();
  if (resultsForComparison != null) {
    VoltTable[] curr_results=r.getResults();
    if (resultsForComparison.length != curr_results.length && !allowMismatchedResults) {
      String msg="Mismatched result count received for transaction ID: " + txnId;
      msg+="\n  while executing stored procedure: " + invocation.getProcName();
      msg+="\n  from execution site: " + coordinatorHSId;
      msg+="\n  Expected number of results: " + resultsForComparison.length;
      msg+="\n  Mismatched number of results: " + curr_results.length;
      msg+="\n  Read-only: " + new Boolean(isReadOnly).toString();
      VoltDB.crashGlobalVoltDB(msg,false,null);
      throw new RuntimeException(msg);
    }
    for (int i=0; i < resultsForComparison.length; ++i) {
      if (!curr_results[i].hasSameContents(resultsForComparison[i]) && !allowMismatchedResults) {
        String msg="Mismatched results received for transaction ID: " + txnId;
        msg+="\n  while executing stored procedure: " + invocation.getProcName();
        msg+="\n  from execution site: " + coordinatorHSId;
        msg+="\n  Expected results: " + resultsForComparison[i].toString();
        msg+="\n  Mismatched results: " + curr_results[i].toString();
        msg+="\n  Read-only: " + new Boolean(isReadOnly).toString();
        VoltDB.crashGlobalVoltDB(msg,false,null);
        throw new RuntimeException(msg);
      }
    }
  }
 else   if (outstandingResponses > 0) {
    resultsForComparison=new VoltTable[currResults.length];
    for (int i=0; i < currResults.length; ++i) {
      if (currResults[i] == null) {
        resultsForComparison[i]=null;
      }
 else {
        resultsForComparison[i]=PrivateVoltTableFactory.createVoltTableFromBuffer(currResults[i].getTableDataReference(),true);
      }
    }
  }
  if (isReadOnly && (!hasSentResponse)) {
    hasSentResponse=true;
    return responseToSend;
  }
 else   if ((!isReadOnly) && (outstandingResponses == 0)) {
    hasSentResponse=true;
    return responseToSend;
  }
  return null;
}
