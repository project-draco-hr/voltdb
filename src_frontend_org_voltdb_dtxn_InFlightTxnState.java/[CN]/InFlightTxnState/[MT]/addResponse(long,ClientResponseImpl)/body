{
  if (m_responseToSend == null)   m_responseToSend=r;
  if (m_outstandingCoordinators != null)   m_outstandingCoordinators.remove(coordinatorHSId);
  m_outstandingResponses--;
  VoltTable[] currResults=r.getResults();
  Integer sqlHash=r.getSQLHash();
  sqlHash=sqlHash == null ? 0 : sqlHash;
  if (m_sqlHash != null) {
    if (m_sqlHash.equals(sqlHash) == false) {
{
        String msg="Mismatched hash of SQL run for transaction ID: " + txnId;
        msg+="\n  while executing stored procedure: " + invocation.getProcName();
        msg+="\n  from execution site: " + CoreUtils.hsIdToString(coordinatorHSId);
        msg+="\n  Expected hash value: " + m_sqlHash;
        msg+="\n  Mismatched hash value: " + sqlHash;
        msg+="\n  Read-only: " + new Boolean(isReadOnly).toString();
        VoltDB.crashGlobalVoltDB(msg,false,null);
        throw new RuntimeException(msg);
      }
    }
  }
 else   if (m_outstandingResponses > 0) {
    m_sqlHash=sqlHash;
  }
  if (m_resultsForComparison != null) {
    if (!allowMismatchedResults) {
      VoltTable[] curr_results=r.getResults();
      if (m_resultsForComparison.length != curr_results.length) {
        String msg="Mismatched result count received for transaction ID: " + txnId;
        msg+="\n  while executing stored procedure: " + invocation.getProcName();
        msg+="\n  from execution site: " + CoreUtils.hsIdToString(coordinatorHSId);
        msg+="\n  Expected number of results: " + m_resultsForComparison.length;
        msg+="\n  Mismatched number of results: " + curr_results.length;
        msg+="\n  Read-only: " + new Boolean(isReadOnly).toString();
        VoltDB.crashGlobalVoltDB(msg,false,null);
        throw new RuntimeException(msg);
      }
      for (int i=0; i < m_resultsForComparison.length; ++i) {
        if (!curr_results[i].hasSameContents(m_resultsForComparison[i])) {
          String msg="Mismatched results received for transaction ID: " + txnId;
          msg+="\n  while executing stored procedure: " + invocation.getProcName();
          msg+="\n  from execution site: " + CoreUtils.hsIdToString(coordinatorHSId);
          msg+="\n  Expected results: " + m_resultsForComparison[i].toString();
          msg+="\n  Mismatched results: " + curr_results[i].toString();
          msg+="\n  Read-only: " + new Boolean(isReadOnly).toString();
          VoltDB.crashGlobalVoltDB(msg,false,null);
          throw new RuntimeException(msg);
        }
      }
    }
  }
 else   if (m_outstandingResponses > 0) {
    m_resultsForComparison=new VoltTable[currResults.length];
    for (int i=0; i < currResults.length; ++i) {
      if (currResults[i] == null) {
        m_resultsForComparison[i]=null;
      }
 else {
        m_resultsForComparison[i]=PrivateVoltTableFactory.createVoltTableFromBuffer(currResults[i].getTableDataReference(),true);
      }
    }
  }
  if (isReadOnly && (!m_hasSentResponse)) {
    m_hasSentResponse=true;
    return m_responseToSend;
  }
 else   if ((!isReadOnly) && (m_outstandingResponses == 0)) {
    m_hasSentResponse=true;
    return m_responseToSend;
  }
  return null;
}
