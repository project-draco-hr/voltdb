{
  boolean result=false;
  final Object[] srcdata=m_data.poll();
  if (srcdata == null) {
    try {
      Object[] decoded=decodeRow(rowData);
      StringBuilder sb=new StringBuilder();
      boolean first=true;
      for (      Object obj : decoded) {
        if (!first) {
          sb.append(", ");
        }
 else {
          first=false;
        }
        sb.append(obj);
      }
      System.out.println(sb);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    System.out.println("No source data. Rows remaining: " + m_data.size() + " received: "+ rowData.length+ " bytes to verify.");
    m_rowFailed=true;
    return false;
  }
  if (m_rowFailed) {
    return false;
  }
  try {
    Object[] decoded=decodeRow(rowData);
    for (int i=5; i < m_tableSchema.size(); i++) {
      if (!(decoded[i].equals(srcdata[i - 5]))) {
        System.out.println("Failed on table column: " + (i - 5));
        System.out.println("  orig value:" + srcdata[i - 5].toString());
        System.out.println("  export value:" + decoded[i].toString());
        m_rowFailed=true;
      }
    }
    if (!decoded[2].equals(sequenceNumber)) {
      System.out.println("Failed on sequence number expected:" + sequenceNumber + "  exported:"+ decoded[2]);
      m_rowFailed=true;
    }
    sequenceNumber++;
  }
 catch (  IOException e) {
    e.printStackTrace();
    m_rowFailed=true;
    return false;
  }
  return result;
}
