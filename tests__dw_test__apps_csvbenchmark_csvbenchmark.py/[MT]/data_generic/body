def data_generic(rebuild=False):
    '\n    a integer NOT NULL\n        , b tinyint\n        , c smallint\n        , d varchar(1)\n        , e timestamp\n        , f timestamp\n        , h varchar(60)\n        , i varchar(60)\n        , j varchar(60)\n        , k varchar(1024)\n        , l varchar(1024)\n        , m varchar(1024)\n        , n double\n        , o bigint\n        , p varchar(1)\n        , r bigint\n      a integer NOT NULL\n    , b tinyint\n    , c smallint\n    , d varchar(1)\n    , e timestamp\n    , f timestamp\n    , h varchar(60)\n    , i varchar(60)\n    , j varchar(60)\n    , k varchar(1024)\n    , l varchar(1024)\n    , m varchar(1024)\n    , n float\n    , o bigint\n    , p varchar(1)\n    , r bigint\n    , s decimal(32,4)\n    , t decimal(32,4)\n    , u decimal(32,4)\n    '
    case = 'generic'
    data_file = get_datafile_path(case)
    if (rebuild or (not os.path.exists(data_file)) or (get_filesize(data_file) != options.ROW_COUNT)):
        with open(data_file, 'w') as f:
            for I in range(0, options.ROW_COUNT):
                print  >> f, ('%d,%d,%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%f,%d,%s,%d' % (I, genint(1), genint(2), gentext(1), gentimestamp(), gentimestamp(), gentext(60), gentext(60), gentext(60), gentext(1024), gentext(1024), gentext(1024), gendouble(), genint(8), gentext(1), genint(8)))
        print ('data file %s was written' % data_file)
    return data_file
