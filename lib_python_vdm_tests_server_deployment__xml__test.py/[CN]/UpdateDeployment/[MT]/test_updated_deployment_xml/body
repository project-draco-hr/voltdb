def test_updated_deployment_xml(self):
    'ensure update deployment is working properly'
    data = requests.get('http://localhost:8000/api/1.0/databases/2/deployment/')
    tree = ElementTree.fromstring(data.content)
    for child in tree:
        if (child.tag == 'paths'):
            for subnode in child:
                if (subnode.tag == 'snapshots'):
                    self.assertEqual(subnode.attrib['path'], 'snapshotstest')
                if (subnode.tag == 'commandlogsnapshot'):
                    self.assertEqual(subnode.attrib['path'], 'command_log_snapshot')
                if (subnode.tag == 'voltdbroot'):
                    self.assertEqual(subnode.attrib['path'], 'voltdbroot')
                if (subnode.tag == 'exportoverflow'):
                    self.assertEqual(subnode.attrib['path'], 'export_overflowtest')
                if (subnode.tag == 'commandlog'):
                    self.assertEqual(subnode.attrib['path'], 'command_logtest')
        if (child.tag == 'snapshots'):
            self.assertEqual(child.attrib['enabled'], 'true')
            self.assertEqual(child.attrib['frequency'], '1h')
            self.assertEqual(child.attrib['prefix'], 'AUTOSHAP')
            self.assertEqual(child.attrib['retain'], '2')
        if (child.tag == 'httpd'):
            self.assertEqual(child.attrib['enabled'], 'true')
            self.assertEqual(child.attrib['port'], '8080')
            for subnode in child:
                if (subnode.tag == 'jsonapi'):
                    self.assertEqual(subnode.attrib['enabled'], 'true')
        if (child.tag == 'systemsettings'):
            for subnode in child:
                if (subnode.tag == 'query'):
                    self.assertEqual(subnode.attrib['timeout'], '0')
                if (subnode.tag == 'temptables'):
                    self.assertEqual(subnode.attrib['maxsize'], '100')
                if (subnode.tag == 'snapshot'):
                    self.assertEqual(subnode.attrib['priority'], '6')
                if (subnode.tag == 'elastic'):
                    self.assertEqual(subnode.attrib['duration'], '50')
                    self.assertEqual(subnode.attrib['throughput'], '2')
                if (subnode.tag == 'resourcemonitor'):
                    for supersubnode in subnode:
                        if (supersubnode == 'memorylimit'):
                            self.assertEqual(supersubnode.attrib['size'], '1')
        if (child.tag == 'admin-mode'):
            self.assertEqual(child.attrib['adminstartup'], 'false')
            self.assertEqual(child.attrib['port'], '21211')
        if (child.tag == 'cluster'):
            self.assertEqual(child.attrib['elastic'], 'enabled')
            self.assertEqual(child.attrib['kfactor'], '0')
            self.assertEqual(child.attrib['schema'], 'DDL')
            self.assertEqual(child.attrib['sitesperhost'], '8')
        if (child.tag == 'security'):
            self.assertEqual(child.attrib['enabled'], 'true')
            self.assertEqual(child.attrib['provider'], 'HASH')
        if (child.tag == 'partition-detection'):
            self.assertEqual(child.attrib['enabled'], 'true')
            for subnode in child:
                self.assertEqual(subnode.attrib['prefix'], 'voltdb_partition_detection')
