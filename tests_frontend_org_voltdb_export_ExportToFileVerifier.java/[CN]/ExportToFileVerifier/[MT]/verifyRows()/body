{
  TreeMap<Long,List<File>> generations=new TreeMap<Long,List<File>>();
  for (  File f : m_paths) {
    for (    File f2 : f.listFiles()) {
      if (f2.getName().endsWith("csv")) {
        Long generation;
        if (f2.getName().startsWith("active")) {
          generation=Long.valueOf(f2.getName().split("-")[2]);
        }
 else {
          generation=Long.valueOf(f2.getName().split("-")[1]);
        }
        if (!generations.containsKey(generation))         generations.put(generation,new ArrayList<File>());
        List<File> generationFiles=generations.get(generation);
        generationFiles.add(f2);
      }
    }
  }
  for (  List<File> generationFiles : generations.values()) {
    Collections.sort(generationFiles,new Comparator<File>(){
      @Override public int compare(      File o1,      File o2){
        return new Long(o1.lastModified()).compareTo(o2.lastModified());
      }
    }
);
    for (    File f : generationFiles) {
      System.out.println("Processing " + f);
      String tableName;
      if (f.getName().startsWith("active")) {
        tableName=f.getName().split("-")[3];
      }
 else {
        tableName=f.getName().split("-")[2];
      }
      FileInputStream fis=new FileInputStream(f);
      BufferedInputStream bis=new BufferedInputStream(fis);
      InputStreamReader isr=new InputStreamReader(bis,VoltDB.UTF8ENCODING);
      CSVReader csvreader=new CSVReader(isr);
      String next[]=null;
      while ((next=csvreader.readNext()) != null) {
        final int partitionId=Integer.valueOf(next[3]);
        StringBuilder sb=new StringBuilder();
        for (        String s : next) {
          sb.append(s).append(", ");
        }
        System.out.println(sb);
        ExportToFileTestVerifier verifier=m_verifiers.get(tableName + partitionId);
        assertThat(next,verifier.isExpectedRow());
      }
    }
  }
}
