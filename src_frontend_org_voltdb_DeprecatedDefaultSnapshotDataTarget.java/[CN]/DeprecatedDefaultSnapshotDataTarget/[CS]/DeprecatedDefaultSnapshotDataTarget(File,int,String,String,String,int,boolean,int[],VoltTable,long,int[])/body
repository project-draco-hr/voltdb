{
  String hostname=CoreUtils.getHostnameOrAddress();
  m_file=file;
  m_tableName=tableName;
  m_fos=new FileOutputStream(file);
  m_channel=m_fos.getChannel();
  m_needsFinalClose=!isReplicated;
  final FastSerializer fs=new FastSerializer();
  fs.writeInt(0);
  fs.writeInt(0);
  fs.writeByte(1);
  for (int ii=0; ii < 4; ii++) {
    fs.writeInt(version[ii]);
  }
  fs.writeLong(txnId);
  fs.writeInt(hostId);
  fs.writeString(hostname);
  fs.writeString(clusterName);
  fs.writeString(databaseName);
  fs.writeString(tableName.toUpperCase());
  fs.writeBoolean(isReplicated);
  if (!isReplicated) {
    fs.writeArray(partitionIds);
    fs.writeInt(numPartitions);
  }
  final BBContainer container=fs.getBBContainer();
  container.b().position(4);
  container.b().putInt(container.b().remaining() - 4);
  container.b().position(0);
  FastSerializer schemaSerializer=new FastSerializer();
  int schemaTableLen=schemaTable.getSerializedSize();
  ByteBuffer serializedSchemaTable=ByteBuffer.allocate(schemaTableLen);
  schemaTable.flattenToBuffer(serializedSchemaTable);
  serializedSchemaTable.flip();
  schemaSerializer.write(serializedSchemaTable);
  final BBContainer schemaContainer=schemaSerializer.getBBContainer();
  schemaContainer.b().limit(schemaContainer.b().limit() - 4);
  schemaContainer.b().position(schemaContainer.b().position() + 4);
  final PureJavaCrc32 crc=new PureJavaCrc32();
  ByteBuffer aggregateBuffer=ByteBuffer.allocate(container.b().remaining() + schemaContainer.b().remaining());
  aggregateBuffer.put(container.b());
  container.discard();
  aggregateBuffer.put(schemaContainer.b());
  schemaContainer.discard();
  aggregateBuffer.flip();
  crc.update(aggregateBuffer.array(),4,aggregateBuffer.capacity() - 4);
  final int crcValue=(int)crc.getValue();
  aggregateBuffer.putInt(crcValue).position(8);
  aggregateBuffer.put((byte)0).position(0);
  if (m_simulateFullDiskWritingHeader) {
    m_writeException=new IOException("Disk full");
    m_writeFailed=true;
    m_fos.close();
    throw m_writeException;
  }
  m_acceptOneWrite=true;
  ListenableFuture<?> writeFuture=write(Callables.returning((BBContainer)DBBPool.wrapBB(aggregateBuffer)),false);
  try {
    writeFuture.get();
  }
 catch (  InterruptedException e) {
    m_fos.close();
    throw new java.io.InterruptedIOException();
  }
catch (  ExecutionException e) {
    m_fos.close();
    throw m_writeException;
  }
  if (m_writeFailed) {
    m_fos.close();
    throw m_writeException;
  }
  ScheduledFuture<?> syncTask=null;
  syncTask=m_syncService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      int bytesSinceLastSync=0;
      while ((bytesSinceLastSync=m_bytesWrittenSinceLastSync.getAndSet(0)) > 0) {
        try {
          m_channel.force(false);
        }
 catch (        IOException e) {
          SNAP_LOG.error("Error syncing snapshot",e);
        }
        m_bytesAllowedBeforeSync.release(bytesSinceLastSync);
      }
    }
  }
,1,1,TimeUnit.SECONDS);
  m_syncTask=syncTask;
}
