def test_validate_db_name_invalid_datatype(self):
    '\n        ensure database name is of valid datatype\n        '
    response = requests.get(__url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        url = (__url__ + str(last_db_id))
        response = requests.put(url, json={'name': True, })
        value = response.json()
        self.assertEqual(value['statusString'], 'Invalid datatype for field database name.')
        self.assertEqual(response.status_code, 200)
        response = requests.put(url, json={'name': 11, })
        value = response.json()
        self.assertEqual(value['statusString'], 'Invalid datatype for field database name.')
        self.assertEqual(response.status_code, 200)
    else:
        print 'Database list is empty.'
