{
  Future<?> retval=null;
  if (m_snapshotTableTasks == null || m_availableSnapshotBuffers.isEmpty()) {
    return retval;
  }
  while (!m_snapshotTableTasks.isEmpty()) {
    final SnapshotTableTask currentTask=m_snapshotTableTasks.peek();
    assert(currentTask != null);
    final int headerSize=currentTask.m_target.getHeaderSize();
    final BBContainer snapshotBuffer=m_availableSnapshotBuffers.poll();
    assert(snapshotBuffer != null);
    snapshotBuffer.b.clear();
    snapshotBuffer.b.position(headerSize);
    final int serialized=ee.tableStreamSerializeMore(snapshotBuffer,currentTask.m_tableId,TableStreamType.SNAPSHOT);
    if (serialized < 0) {
      hostLog.error("Failure while serialize data from a table for COW snapshot");
      VoltDB.crashVoltDB();
    }
    if (serialized == 0) {
      final SnapshotTableTask t=m_snapshotTableTasks.poll();
      if (t.m_isReplicated) {
        final Thread terminatorThread=new Thread("Replicated SnapshotDataTarget terminator "){
          @Override public void run(){
            try {
              t.m_target.close();
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
          }
        }
;
        m_snapshotTargetTerminators.add(terminatorThread);
        terminatorThread.start();
      }
      m_availableSnapshotBuffers.offer(snapshotBuffer);
      continue;
    }
    snapshotBuffer.b.limit(headerSize + serialized);
    snapshotBuffer.b.position(0);
    retval=currentTask.m_target.write(snapshotBuffer);
    break;
  }
  if (m_snapshotTableTasks.isEmpty()) {
    final ArrayList<SnapshotDataTarget> snapshotTargets=m_snapshotTargets;
    m_snapshotTargets=null;
    m_snapshotTableTasks=null;
    final int result=ExecutionSitesCurrentlySnapshotting.decrementAndGet();
    if (result == 0) {
      final long txnId=m_lastSnapshotTxnId;
      final int numHosts=m_lastSnapshotNumHosts;
      final Thread terminatorThread=new Thread("Snapshot terminator"){
        @Override public void run(){
          try {
            for (            Thread t : m_snapshotTargetTerminators) {
              if (t == this) {
                continue;
              }
              try {
                t.join();
              }
 catch (              InterruptedException e) {
                return;
              }
            }
            for (            final SnapshotDataTarget t : snapshotTargets) {
              try {
                t.close();
              }
 catch (              IOException e) {
                throw new RuntimeException(e);
              }
catch (              InterruptedException e) {
                throw new RuntimeException(e);
              }
            }
          }
  finally {
            ExecutionSitesCurrentlySnapshotting.decrementAndGet();
            logSnapshotCompleteToZK(txnId,numHosts);
          }
        }
      }
;
      m_snapshotTargetTerminators.add(terminatorThread);
      terminatorThread.start();
    }
  }
  return retval;
}
