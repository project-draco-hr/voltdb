{
  ListenableFuture<?> retval=null;
  if (m_snapshotTableTasks == null || (!ignoreQuietPeriod && inQuietPeriod())) {
    return retval;
  }
  Iterator<Map.Entry<Integer,List<SnapshotTableTask>>> taskIter=m_snapshotTableTasks.entrySet().iterator();
  while (taskIter.hasNext()) {
    Map.Entry<Integer,List<SnapshotTableTask>> taskEntry=taskIter.next();
    final int tableId=taskEntry.getKey();
    final List<SnapshotTableTask> tableTasks=taskEntry.getValue();
    final List<BBContainer> outputBuffers=createOutputBuffers(tableTasks);
    if (outputBuffers == null) {
      break;
    }
    final int[] serialized=ee.tableStreamSerializeMore(tableId,TableStreamType.SNAPSHOT,outputBuffers);
    for (    int serializedBytes : serialized) {
      if (serializedBytes < 0) {
        VoltDB.crashLocalVoltDB("Failure while serialize data from a table for COW snapshot",false,null);
      }
    }
    if (serialized[0] == 0) {
      taskIter.remove();
      asyncTerminateReplicatedTableTasks(tableTasks);
      SNAP_LOG.debug("Finished snapshot tasks for table " + tableId + ": "+ tableTasks);
      for (      BBContainer container : outputBuffers) {
        m_availableSnapshotBuffers.offer(container);
      }
    }
 else {
      retval=writeSnapshotBlocksToTargets(tableId,outputBuffers,serialized);
      quietPeriodSet(ignoreQuietPeriod);
      break;
    }
  }
  if (m_snapshotTableTasks.isEmpty()) {
    SNAP_LOG.debug("Finished with tasks");
    runPostSnapshotTasks(context);
    final ArrayList<SnapshotDataTarget> snapshotTargets=m_snapshotTargets;
    m_snapshotTargets=null;
    m_snapshotTableTasks=null;
    boolean IamLast=false;
synchronized (ExecutionSitesCurrentlySnapshotting) {
      if (!ExecutionSitesCurrentlySnapshotting.contains(this)) {
        VoltDB.crashLocalVoltDB("Currently snapshotting site didn't find itself in set of snapshotting sites",true,null);
      }
      IamLast=ExecutionSitesCurrentlySnapshotting.size() == 1;
      if (!IamLast) {
        ExecutionSitesCurrentlySnapshotting.remove(this);
      }
    }
    if (IamLast) {
      SNAP_LOG.debug("I AM LAST!");
      final long txnId=m_lastSnapshotTxnId;
      final int numHosts=m_lastSnapshotNumHosts;
      final Map<String,Map<Integer,Pair<Long,Long>>> exportSequenceNumbers=m_exportSequenceNumbersToLogOnCompletion;
      m_exportSequenceNumbersToLogOnCompletion=null;
      final Thread terminatorThread=new Thread("Snapshot terminator"){
        @Override public void run(){
          try {
            for (            Thread t : m_snapshotTargetTerminators) {
              if (t == this) {
                continue;
              }
              try {
                t.join();
              }
 catch (              InterruptedException e) {
                return;
              }
            }
            for (            final SnapshotDataTarget t : snapshotTargets) {
              try {
                t.close();
              }
 catch (              IOException e) {
                m_lastSnapshotSucceded=false;
                throw new RuntimeException(e);
              }
catch (              InterruptedException e) {
                m_lastSnapshotSucceded=false;
                throw new RuntimeException(e);
              }
            }
            Runnable r=null;
            while ((r=m_tasksOnSnapshotCompletion.poll()) != null) {
              try {
                r.run();
              }
 catch (              Exception e) {
                SNAP_LOG.error("Error running snapshot completion task",e);
              }
            }
          }
  finally {
            try {
              logSnapshotCompleteToZK(txnId,numHosts,m_lastSnapshotSucceded,exportSequenceNumbers);
            }
  finally {
              ExecutionSitesCurrentlySnapshotting.remove(SnapshotSiteProcessor.this);
            }
          }
        }
      }
;
      m_snapshotTargetTerminators.add(terminatorThread);
      terminatorThread.start();
    }
  }
  return retval;
}
