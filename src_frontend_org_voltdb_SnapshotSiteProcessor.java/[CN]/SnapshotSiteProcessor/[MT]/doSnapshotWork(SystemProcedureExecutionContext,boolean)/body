{
  ListenableFuture<?> retval=null;
  if (m_snapshotTableTasks == null) {
    return retval;
  }
  if (m_snapshotTargets == null) {
    return null;
  }
  Iterator<Map.Entry<Integer,Collection<SnapshotTableTask>>> taskIter=m_snapshotTableTasks.asMap().entrySet().iterator();
  while (taskIter.hasNext()) {
    Map.Entry<Integer,Collection<SnapshotTableTask>> taskEntry=taskIter.next();
    final int tableId=taskEntry.getKey();
    final Collection<SnapshotTableTask> tableTasks=taskEntry.getValue();
    final List<BBContainer> outputBuffers=getOutputBuffers(tableTasks,noSchedule);
    if (outputBuffers == null) {
      if (!noSchedule) {
        rescheduleSnapshotWork();
      }
      break;
    }
    Pair<ListenableFuture,Boolean> streamResult=m_streamers.get(tableId).streamMore(context,outputBuffers,null);
    if (streamResult.getFirst() != null) {
      final ListenableFuture writeFutures=streamResult.getFirst();
      writeFutures.addListener(new Runnable(){
        @Override public void run(){
          try {
            writeFutures.get();
          }
 catch (          Throwable t) {
            if (m_lastSnapshotSucceded) {
              if (t instanceof StreamSnapshotTimeoutException || t.getCause() instanceof StreamSnapshotTimeoutException) {
              }
 else {
                SNAP_LOG.error("Error while attempting to write snapshot data",t);
              }
              m_lastSnapshotSucceded=false;
            }
          }
        }
      }
,CoreUtils.SAMETHREADEXECUTOR);
    }
    if (!streamResult.getSecond()) {
      asyncTerminateReplicatedTableTasks(tableTasks);
      taskIter.remove();
      SNAP_LOG.debug("Finished snapshot tasks for table " + tableId + ": "+ tableTasks);
    }
 else {
      break;
    }
  }
  if (m_snapshotTableTasks.isEmpty()) {
    SNAP_LOG.debug("Finished with tasks");
    runPostSnapshotTasks(context);
    final ArrayList<SnapshotDataTarget> snapshotTargets=m_snapshotTargets;
    m_snapshotTargets=null;
    m_snapshotTableTasks=null;
    boolean IamLast=false;
synchronized (ExecutionSitesCurrentlySnapshotting) {
      if (!ExecutionSitesCurrentlySnapshotting.contains(this)) {
        VoltDB.crashLocalVoltDB("Currently snapshotting site didn't find itself in set of snapshotting sites",true,null);
      }
      IamLast=ExecutionSitesCurrentlySnapshotting.size() == 1;
      if (!IamLast) {
        ExecutionSitesCurrentlySnapshotting.remove(this);
      }
    }
    if (IamLast) {
      SNAP_LOG.debug("I AM LAST!");
      final long txnId=m_lastSnapshotTxnId;
      final Map<String,Map<Integer,Pair<Long,Long>>> exportSequenceNumbers=m_exportSequenceNumbersToLogOnCompletion;
      final Map<Integer,Map<Integer,Long>> remoteDCLastUniqueIds=m_remoteDCLastSeenUniqueIds;
      m_exportSequenceNumbersToLogOnCompletion=null;
      m_remoteDCLastSeenUniqueIds=null;
      final Thread terminatorThread=new Thread("Snapshot terminator"){
        @Override public void run(){
          try {
            for (            Thread t : m_snapshotTargetTerminators) {
              if (t == this) {
                continue;
              }
              try {
                t.join();
              }
 catch (              InterruptedException e) {
                return;
              }
            }
            for (            final SnapshotDataTarget t : snapshotTargets) {
              try {
                t.close();
              }
 catch (              IOException e) {
                m_lastSnapshotSucceded=false;
                throw new RuntimeException(e);
              }
catch (              InterruptedException e) {
                m_lastSnapshotSucceded=false;
                throw new RuntimeException(e);
              }
            }
            Runnable r=null;
            while ((r=m_tasksOnSnapshotCompletion.poll()) != null) {
              try {
                r.run();
              }
 catch (              Exception e) {
                SNAP_LOG.error("Error running snapshot completion task",e);
              }
            }
          }
  finally {
            final boolean snapshotSucceeded=m_lastSnapshotSucceded;
            try {
              VoltDB.instance().getHostMessenger().getZK().delete(VoltZK.nodes_currently_snapshotting + "/" + VoltDB.instance().getHostMessenger().getHostId(),-1);
            }
 catch (            NoNodeException e) {
              SNAP_LOG.warn("Expect the snapshot node to already exist during deletion",e);
            }
catch (            Exception e) {
              VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
            }
 finally {
              ExecutionSitesCurrentlySnapshotting.remove(SnapshotSiteProcessor.this);
            }
            logSnapshotCompleteToZK(txnId,snapshotSucceeded,exportSequenceNumbers,remoteDCLastUniqueIds);
          }
        }
      }
;
      m_snapshotTargetTerminators.add(terminatorThread);
      terminatorThread.start();
    }
  }
  return retval;
}
