{
  ExecutionSitesCurrentlySnapshotting.add(this);
  final long now=System.currentTimeMillis();
  m_quietUntil=now + 200;
  m_lastSnapshotSucceded=true;
  m_lastSnapshotTxnId=txnId;
  m_lastSnapshotNumHosts=numHosts;
  m_snapshotTableTasks=MiscUtils.sortedArrayListMultimap();
  m_snapshotTargets=new ArrayList<SnapshotDataTarget>();
  m_snapshotTargetTerminators=new ArrayList<Thread>();
  m_exportSequenceNumbersToLogOnCompletion=exportSequenceNumbers;
  for (  final SnapshotDataTarget target : targets) {
    if (target.needsFinalClose()) {
      assert(m_snapshotTargets != null);
      m_snapshotTargets.add(target);
    }
  }
  Map<Integer,Pair<Table,SnapshotPredicates>> tablesAndPredicates=makeTablesAndPredicatesToSnapshot(tasks);
  activateTableStreams(ee,tablesAndPredicates);
  int maxTableTaskSize=0;
  for (  Collection<SnapshotTableTask> perTableTasks : m_snapshotTableTasks.asMap().values()) {
    maxTableTaskSize=Math.max(maxTableTaskSize,perTableTasks.size());
  }
  resizeBufferPool(maxTableTaskSize * m_bufferCountMultiplier);
  if (tasks.isEmpty()) {
    queueInitialSnapshotTasks(1,now);
  }
 else {
    queueInitialSnapshotTasks(m_availableSnapshotBuffers.size(),now);
  }
}
