{
  ExecutionSitesCurrentlySnapshotting.add(this);
  final long now=System.currentTimeMillis();
  m_quietUntil=now + 200;
  m_lastSnapshotSucceded=true;
  m_lastSnapshotTxnId=txnId;
  m_lastSnapshotNumHosts=numHosts;
  m_snapshotTableTasks=new ArrayDeque<SnapshotTableTask>(tasks);
  m_snapshotTargets=new ArrayList<SnapshotDataTarget>();
  m_snapshotTargetTerminators=new ArrayList<Thread>();
  m_exportSequenceNumbersToLogOnCompletion=exportSequenceNumbers;
  if (targets != null) {
    for (    final SnapshotDataTarget target : targets) {
      if (target.needsFinalClose()) {
        assert(m_snapshotTargets != null);
        m_snapshotTargets.add(target);
      }
    }
  }
  for (  final SnapshotTableTask task : tasks) {
    if (targets == null) {
      if (task.m_target.needsFinalClose()) {
        m_snapshotTargets.add(task.m_target);
      }
    }
    SNAP_LOG.debug("Examining SnapshotTableTask: " + task);
    AbstractExpression predicate=task.m_predicate;
    ByteBuffer buf;
    if (predicate != null) {
      byte[] predicateBytes=predicate.toJSONString().getBytes(Charsets.UTF_8);
      buf=ByteBuffer.allocate(predicateBytes.length + 9);
      buf.put(task.m_deleteTuples ? 1 : (byte)0);
      buf.putInt(1);
      buf.putInt(predicateBytes.length);
      buf.put(predicateBytes);
    }
 else {
      buf=ByteBuffer.allocate(5);
      buf.put((byte)0);
      buf.putInt(0);
    }
    if (!task.m_isDevNull) {
      if (!ee.activateTableStream(task.m_tableId,TableStreamType.SNAPSHOT,buf.array())) {
        SNAP_LOG.error("Attempted to activate copy on write mode for table " + task.m_name + " and failed");
        SNAP_LOG.error(task);
        VoltDB.crashLocalVoltDB("No additional info",false,null);
      }
    }
  }
  if (m_isIV2Enabled) {
    for (int ii=0; ii < m_availableSnapshotBuffers.size(); ii++) {
      VoltDB.instance().schedulePriorityWork(new Runnable(){
        @Override public void run(){
          m_siteTaskerQueue.offer(new SnapshotTask());
        }
      }
,(m_quietUntil + (5 * m_snapshotPriority) - now),0,TimeUnit.MILLISECONDS);
      m_quietUntil+=5 * m_snapshotPriority;
    }
  }
}
