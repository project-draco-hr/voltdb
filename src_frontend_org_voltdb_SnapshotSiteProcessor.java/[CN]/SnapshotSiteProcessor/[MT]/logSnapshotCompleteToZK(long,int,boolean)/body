{
  ZooKeeper zk=VoltDB.instance().getHostMessenger().getZK();
  final String snapshotPath=VoltZK.completed_snapshots + txnId;
  boolean success=false;
  while (!success) {
    Stat stat=new Stat();
    byte data[]=null;
    try {
      data=zk.getData(snapshotPath,false,stat);
    }
 catch (    Exception e) {
      hostLog.fatal("This ZK get should never fail",e);
      VoltDB.crashVoltDB();
    }
    if (data == null) {
      hostLog.fatal("Data should not be null if the node exists");
      VoltDB.crashVoltDB();
    }
    try {
      JSONObject jsonObj=new JSONObject(new String(data,"UTF-8"));
      if (jsonObj.getLong("txnId") != txnId) {
        hostLog.fatal("TxnId should match");
        VoltDB.crashVoltDB();
      }
      if (jsonObj.getInt("hosts") != numHosts) {
        hostLog.fatal("Num hosts should match");
        VoltDB.crashVoltDB();
      }
      int numHostsFinished=jsonObj.getInt("finishedHosts") + 1;
      jsonObj.put("finishedHosts",numHostsFinished);
      if (!snapshotSuccess) {
        hostLog.error("Snapshot failed at this node, snapshot will not be viable for log truncation");
        jsonObj.put("isTruncation",false);
      }
      zk.setData(snapshotPath,jsonObj.toString(4).getBytes("UTF-8"),stat.getVersion());
    }
 catch (    KeeperException.BadVersionException e) {
      continue;
    }
catch (    Exception e) {
      hostLog.fatal("This ZK call should never fail",e);
      VoltDB.crashVoltDB();
    }
    success=true;
  }
  try {
    TreeSet<String> snapshots=new TreeSet<String>(zk.getChildren(VoltZK.completed_snapshots,false));
    while (snapshots.size() > 30) {
      try {
        zk.delete(VoltZK.completed_snapshots + snapshots.first(),-1);
      }
 catch (      NoNodeException e) {
      }
catch (      Exception e) {
        hostLog.fatal("Deleting a snapshot completion record from ZK should only fail with NoNodeException",e);
        VoltDB.crashVoltDB();
      }
      snapshots.remove(snapshots.first());
    }
  }
 catch (  Exception e) {
    hostLog.fatal("Retrieving list of completed snapshots from ZK should never fail",e);
    VoltDB.crashVoltDB();
  }
  try {
    VoltDB.instance().getHostMessenger().getZK().delete(VoltZK.nodes_currently_snapshotting + VoltDB.instance().getHostMessenger().getHostId(),-1);
  }
 catch (  NoNodeException e) {
    hostLog.warn("Expect the snapshot node to already exist during deletion",e);
  }
catch (  Exception e) {
    VoltDB.crashVoltDB();
  }
}
