{
  File jarOut=new File("setDatabaseConfig.jar");
  jarOut.deleteOnExit();
  VoltCompiler compiler=new VoltCompiler();
  File schemaFile=VoltProjectBuilder.writeStringToTempFile("SET " + DatabaseConfiguration.DR_MODE_NAME + "="+ DatabaseConfiguration.ACTIVE_ACTIVE+ ";\n"+ "CREATE TABLE T (D1 INTEGER NOT NULL, D2 INTEGER, D3 VARCHAR(32), VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER, PRIMARY KEY (D1), LIMIT PARTITION ROWS 1000);\n"+ "DR TABLE T;\n"+ "PARTITION TABLE T ON COLUMN D1;\n");
  String schemaPath=schemaFile.getPath();
  try {
    assertTrue(compiler.compileFromDDL(jarOut.getPath(),schemaPath));
    Table t=compiler.getCatalogDatabase().getTables().get(CatalogUtil.DR_CONFLICTS_TABLE_PREFIX + "T");
    assertNotNull(t);
    assertTrue(t.getColumns().size() == 14);
    Column c1=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[0][0]);
    assertNotNull(c1);
    assertTrue(c1.getType() == VoltType.TINYINT.getValue());
    Column c2=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[1][0]);
    assertNotNull(c2);
    assertTrue(c2.getType() == VoltType.TINYINT.getValue());
    Column c3=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[2][0]);
    assertNotNull(c3);
    assertTrue(c3.getType() == VoltType.TINYINT.getValue());
    Column c4=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[2][0]);
    assertNotNull(c4);
    assertTrue(c4.getType() == VoltType.TINYINT.getValue());
    Column c5=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[3][0]);
    assertNotNull(c5);
    assertTrue(c5.getType() == VoltType.TINYINT.getValue());
    Column c6=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[4][0]);
    assertNotNull(c6);
    assertTrue(c6.getType() == VoltType.TINYINT.getValue());
    Column c7=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[6][0]);
    assertNotNull(c7);
    assertTrue(c7.getType() == VoltType.BIGINT.getValue());
    Column c8=t.getColumns().get(DDLCompiler.DR_CONFLICTS_EXPORT_TABLE_ADDITIONAL_COLUMNS[5][0]);
    assertNotNull(8);
    assertTrue(c8.getType() == VoltType.TINYINT.getValue());
    assertNotNull(t.getColumns().get("D1"));
    assertNotNull(t.getColumns().get("D2"));
    assertNotNull(t.getColumns().get("D3"));
    assertNotNull(t.getColumns().get("VAL1"));
    assertNotNull(t.getColumns().get("VAL2"));
    assertNotNull(t.getColumns().get("VAL3"));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  jarOut.delete();
}
