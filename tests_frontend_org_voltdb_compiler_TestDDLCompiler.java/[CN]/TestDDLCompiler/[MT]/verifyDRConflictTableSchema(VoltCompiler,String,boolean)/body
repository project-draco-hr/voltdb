{
  Table t=compiler.getCatalogDatabase().getTables().get(name);
  assertNotNull(t);
  if (partitioned) {
    assertNotNull(t.getPartitioncolumn());
  }
 else {
    assertNull(t.getPartitioncolumn());
  }
  assertTrue(t.getColumns().size() == 10);
  Column c1=t.getColumns().get(DDLCompiler.DR_ROW_TYPE_COLUMN_NAME);
  assertNotNull(c1);
  assertTrue(c1.getType() == VoltType.TINYINT.getValue());
  Column c2=t.getColumns().get(DDLCompiler.DR_LOG_ACTION_COLUMN_NAME);
  assertNotNull(c2);
  assertTrue(c2.getType() == VoltType.TINYINT.getValue());
  Column c3=t.getColumns().get(DDLCompiler.DR_CONFLICT_COLUMN_NAME);
  assertNotNull(c3);
  assertTrue(c3.getType() == VoltType.TINYINT.getValue());
  Column c4=t.getColumns().get(DDLCompiler.DR_CONFLICTS_ON_PK_COLUMN_NAME);
  assertNotNull(c4);
  assertTrue(c4.getType() == VoltType.TINYINT.getValue());
  Column c5=t.getColumns().get(DDLCompiler.DR_ROW_DECISION_COLUMN_NAME);
  assertNotNull(c5);
  assertTrue(c5.getType() == VoltType.TINYINT.getValue());
  Column c6=t.getColumns().get(DDLCompiler.DR_CLUSTER_ID_COLUMN_NAME);
  assertNotNull(c6);
  assertTrue(c6.getType() == VoltType.TINYINT.getValue());
  Column c7=t.getColumns().get(DDLCompiler.DR_TIMESTAMP_COLUMN_NAME);
  assertNotNull(c7);
  assertTrue(c7.getType() == VoltType.BIGINT.getValue());
  Column c8=t.getColumns().get(DDLCompiler.DR_DIVERGENCE_COLUMN_NAME);
  assertNotNull(8);
  assertTrue(c8.getType() == VoltType.TINYINT.getValue());
  Column c9=t.getColumns().get(DDLCompiler.DR_TABLE_NAME_COLUMN_NAME);
  assertNotNull(9);
  assertTrue(c9.getType() == VoltType.STRING.getValue());
  Column c10=t.getColumns().get(DDLCompiler.DR_TUPLE_COLUMN_NAME);
  assertNotNull(10);
  assertTrue(c10.getType() == VoltType.STRING.getValue());
}
