{
  File jarOut=new File("checkCompilerWarnings.jar");
  jarOut.deleteOnExit();
  String schema1="create table t0 (id bigint not null, name varchar(32), age integer,  primary key (id));\n" + "PARTITION TABLE t0 ON COLUMN id;\n" + "CREATE UNIQUE INDEX user_index ON t0 (name) ;";
  String schema2="create table t0 (id bigint not null, name varchar(32) not null, age integer,  primary key (id));\n" + "PARTITION TABLE t0 ON COLUMN name;\n" + "CREATE UNIQUE INDEX user_index ON t0 (age) ;";
  final String simpleProject="<?xml version=\"1.0\"?>\n" + "<project><database><schemas>" + "<schema path='%s' />"+ "</schemas></database></project>";
  File schemaFile=VoltProjectBuilder.writeStringToTempFile(schema1);
  String schemaPath=schemaFile.getPath();
  File projectFile=VoltProjectBuilder.writeStringToTempFile(String.format(simpleProject,schemaPath));
  String projectPath=projectFile.getPath();
  VoltCompiler compiler=new VoltCompiler();
  boolean success=compiler.compileWithProjectXML(projectPath,jarOut.getPath());
  assertTrue(success);
  int foundPCWarnings=0;
  for (  VoltCompiler.Feedback f : compiler.m_warnings) {
    if (f.message.toLowerCase().contains("does not include the partitioning column")) {
      foundPCWarnings++;
    }
  }
  assertEquals(1,foundPCWarnings);
  jarOut.delete();
  schemaFile=VoltProjectBuilder.writeStringToTempFile(schema2);
  schemaPath=schemaFile.getPath();
  projectFile=VoltProjectBuilder.writeStringToTempFile(String.format(simpleProject,schemaPath));
  projectPath=projectFile.getPath();
  success=compiler.compileWithProjectXML(projectPath,jarOut.getPath());
  assertTrue(success);
  foundPCWarnings=0;
  for (  VoltCompiler.Feedback f : compiler.m_warnings) {
    if (f.message.toLowerCase().contains("does not include the partitioning column")) {
      foundPCWarnings++;
      System.out.println(f.message);
    }
  }
  assertEquals(2,foundPCWarnings);
  jarOut.delete();
}
