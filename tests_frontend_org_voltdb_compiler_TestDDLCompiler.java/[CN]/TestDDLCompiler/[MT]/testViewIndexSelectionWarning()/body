{
  File jarOut=new File("indexedMinMaxViews.jar");
  jarOut.deleteOnExit();
  String schema[]={"CREATE TABLE T (D1 INTEGER, D2 INTEGER, D3 INTEGER, VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER);\n" + "CREATE VIEW VT1 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) " + "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT2 (V_D1_D2, V_D3, CNT, MIN_VAL1, SUM_VAL2, MAX_VAL3) "+ "AS SELECT D1 + D2, ABS(D3), COUNT(*), MIN(VAL1), SUM(VAL2), MAX(VAL3) "+ "FROM T "+ "GROUP BY D1 + D2, ABS(D3);"+ "CREATE VIEW VT3 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T WHERE D1 > 3 "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT4 (V_D1_D2, V_D3, CNT, MIN_VAL1, SUM_VAL2, MAX_VAL3) "+ "AS SELECT D1 + D2, ABS(D3), COUNT(*), MIN(VAL1), SUM(VAL2), MAX(VAL3) "+ "FROM T WHERE D1 > 3 "+ "GROUP BY D1 + D2, ABS(D3);","CREATE TABLE T (D1 INTEGER, D2 INTEGER, D3 INTEGER, VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER);\n" + "CREATE INDEX T_TREE_1 ON T(D1);\n" + "CREATE INDEX T_TREE_2 ON T(D1, D2);\n"+ "CREATE INDEX T_TREE_3 ON T(D1+D2, ABS(D3));\n"+ "CREATE INDEX T_TREE_4 ON T(D1, D2, D3);\n"+ "CREATE INDEX T_TREE_5 ON T(D1, D2, D3) WHERE D1 > 3;\n"+ "CREATE INDEX T_TREE_6 ON T(D1+D2, ABS(D3)) WHERE D1 > 3;\n"+ "CREATE VIEW VT1 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT2 (V_D1_D2, V_D3, CNT, MIN_VAL1, SUM_VAL2, MAX_VAL3) "+ "AS SELECT D1 + D2, ABS(D3), COUNT(*), MIN(VAL1), SUM(VAL2), MAX(VAL3) "+ "FROM T "+ "GROUP BY D1 + D2, ABS(D3);"+ "CREATE VIEW VT3 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T WHERE D1 > 3 "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT4 (V_D1_D2, V_D3, CNT, MIN_VAL1, SUM_VAL2, MAX_VAL3) "+ "AS SELECT D1 + D2, ABS(D3), COUNT(*), MIN(VAL1), SUM(VAL2), MAX(VAL3) "+ "FROM T WHERE D1 > 3 "+ "GROUP BY D1 + D2, ABS(D3);","CREATE TABLE T (D1 INTEGER, D2 INTEGER, D3 INTEGER, VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER);\n" + "CREATE VIEW VT1 (V_D1, V_D2, V_D3, CNT) " + "AS SELECT D1, D2, D3, COUNT(*) "+ "FROM T "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT2 (V_D1_D2, V_D3, CNT) "+ "AS SELECT D1 + D2, ABS(D3), COUNT(*) "+ "FROM T "+ "GROUP BY D1 + D2, ABS(D3);","CREATE TABLE T (D1 INTEGER, D2 INTEGER, D3 INTEGER, VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER);\n" + "CREATE INDEX T_TREE_1 ON T(D1, D2 + D3);\n" + "CREATE INDEX T_TREE_2 ON T(D1, D2 + D3, D3);\n"+ "CREATE INDEX T_TREE_3 ON T(D1, D2);\n"+ "CREATE INDEX T_TREE_4 ON T(D1, D2, D3) WHERE D1 > 0;\n"+ "CREATE VIEW VT1 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T WHERE D2 > 0 "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT2 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2, D3;\n","CREATE TABLE T (D1 INTEGER, D2 INTEGER, D3 INTEGER, VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER);\n" + "CREATE INDEX T_TREE_1 ON T(VAL1, D2 + D3);\n" + "CREATE INDEX T_TREE_2 ON T(VAL1, D2 + D3, D3);\n"+ "CREATE INDEX T_TREE_3 ON T(VAL1, D2);\n"+ "CREATE INDEX T_TREE_4 ON T(VAL1, D2, D3, VAL2);\n"+ "CREATE INDEX T_TREE_5 ON T(VAL1, D2, D3, ABS(VAL1));\n"+ "CREATE INDEX T_TREE_6 ON T(VAL1, D2-D3);\n"+ "CREATE INDEX T_TREE_7 ON T(VAL1, D2-D3, D3, D2);\n"+ "CREATE VIEW VT1 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT2 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2-D3, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2-D3, D3;","CREATE TABLE T (D1 INTEGER, D2 INTEGER, D3 INTEGER, VAL1 INTEGER, VAL2 INTEGER, VAL3 INTEGER);\n" + "CREATE INDEX T_TREE_1 ON T(D1, D2 + D3);\n" + "CREATE INDEX T_TREE_2 ON T(D1, D2 + D3, D3);\n"+ "CREATE INDEX T_TREE_3 ON T(D1, D2);\n"+ "CREATE INDEX T_TREE_4 ON T(D1, D2, D3, VAL1);\n"+ "CREATE INDEX T_TREE_5 ON T(D1, D2, D3, ABS(VAL1));\n"+ "CREATE INDEX T_TREE_6 ON T(D1, D2-D3, D3, ABS(VAL3));\n"+ "CREATE INDEX T_TREE_7 ON T(D1, D2, D3, VAL1 + VAL2);\n"+ "CREATE VIEW VT1 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2, D3;\n"+ "CREATE VIEW VT2 (V_D1, V_D2, V_D3, CNT, MIN_VAL1_VAL2, MAX_ABS_VAL3) "+ "AS SELECT D1, D2-D3, D3, COUNT(*), MIN(VAL1 + VAL2), MAX(ABS(VAL3)) "+ "FROM T "+ "GROUP BY D1, D2-D3, D3;","CREATE TABLE CUSTOMERS (ID INTEGER NOT NULL, NAME VARCHAR(20), AGE INTEGER NOT NULL, ADDRESS VARCHAR(20));\n" + "CREATE TABLE ORDERS (OID INTEGER NOT NULL, DATE TIMESTAMP, CUSTOMER_ID INTEGER NOT NULL, AMOUNT INTEGER NOT NULL);\n" + "CREATE VIEW ORDERSUM (NAME, CNT, SUMAMT, MINAMT, MAXAMT) AS\n"+ "  SELECT CUSTOMERS.NAME, COUNT(*), SUM(ORDERS.AMOUNT), MIN(ORDERS.AMOUNT), MAX(ORDERS.AMOUNT) FROM\n"+ "  CUSTOMERS JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID GROUP BY CUSTOMERS.NAME;","CREATE TABLE CUSTOMERS (ID INTEGER NOT NULL, NAME VARCHAR(20), AGE INTEGER NOT NULL, ADDRESS VARCHAR(20));\n" + "CREATE TABLE ORDERS (OID INTEGER NOT NULL, DATE TIMESTAMP, CUSTOMER_ID INTEGER NOT NULL, AMOUNT INTEGER NOT NULL);\n" + "CREATE INDEX IDX ON CUSTOMERS(ID);\n"+ "CREATE VIEW ORDERSUM (NAME, CNT, SUMAMT, MINAMT, MAXAMT) AS\n"+ "  SELECT CUSTOMERS.NAME, COUNT(*), SUM(ORDERS.AMOUNT), MIN(ORDERS.AMOUNT), MAX(ORDERS.AMOUNT) FROM\n"+ "  CUSTOMERS JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID GROUP BY CUSTOMERS.NAME;"};
  int expectWarning[]={4,0,0,0,2,0,1,0};
  int expectWarningType[]={0,0,0,0,0,0,1,1};
  final String warningPrefix[]={"No index found to support UPDATE and DELETE on some of the min() / max() columns","No index found to support some of the join operations required to refresh the materialized view"};
  final String simpleProject="<?xml version=\"1.0\"?>\n" + "<project><database><schemas>" + "<schema path='%s' />"+ "</schemas></database></project>";
  VoltCompiler compiler=new VoltCompiler();
  for (int ii=0; ii < schema.length; ++ii) {
    File schemaFile=VoltProjectBuilder.writeStringToTempFile(schema[ii]);
    String schemaPath=schemaFile.getPath();
    File projectFile=VoltProjectBuilder.writeStringToTempFile(String.format(simpleProject,schemaPath));
    String projectPath=projectFile.getPath();
    boolean success=compiler.compileWithProjectXML(projectPath,jarOut.getPath());
    assertTrue(success);
    int foundWarnings=0;
    for (    VoltCompiler.Feedback f : compiler.m_warnings) {
      if (f.message.contains(warningPrefix[expectWarningType[ii]])) {
        System.out.println(f.message);
        foundWarnings++;
      }
    }
    if (expectWarning[ii] != foundWarnings) {
      if (expectWarning[ii] > foundWarnings) {
        System.out.println("Missed expected warning(s) for schema:");
      }
 else {
        System.out.println("Unexpected warning(s) for schema:");
      }
      System.out.println(schema[ii]);
    }
    assertEquals(expectWarning[ii],foundWarnings);
    jarOut.delete();
  }
}
