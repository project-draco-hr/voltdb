{
  assert(m_subqueriesPartitioning != null);
  if (!m_subqueriesPartitioning.requiresTwoFragments()) {
    return root;
  }
  assert(root.findAllNodesOfClass(AbstractReceivePlanNode.class).size() == 1);
  assert(m_subqueryStmt != null);
  if (hasReceiveNode()) {
    m_hasReceiveNode=true;
    return root;
  }
  m_hasReceiveNode=true;
  if (m_subqueryStmt instanceof ParsedUnionStmt) {
    assert(m_subqueryStmt instanceof ParsedUnionStmt);
    return root;
  }
  if (m_subqueryStmt instanceof ParsedSelectStmt == false) {
    throw new PlanningErrorException("Unsupported subquery found in FROM clause:" + m_subqueryStmt.toString());
  }
  ParsedSelectStmt selectStmt=(ParsedSelectStmt)m_subqueryStmt;
  assert(selectStmt != null);
  if (selectStmt.hasLimitOrOffset() || selectStmt.hasDistinctWithGroupBy()) {
    return root;
  }
  if (selectStmt.m_mvFixInfo.needed()) {
    return root;
  }
  if (selectStmt.hasAggregateOrGroupby()) {
    if (!selectStmt.isGrouped()) {
      m_tableAggregateSubquery=true;
      return root;
    }
    if (!selectStmt.hasPartitionColumnInGroupby()) {
      return root;
    }
    if (selectStmt.hasAggregateDistinct()) {
      return root;
    }
  }
  root=removeCoordinatorSendReceivePair(root);
  m_hasReceiveNode=false;
  return root;
}
