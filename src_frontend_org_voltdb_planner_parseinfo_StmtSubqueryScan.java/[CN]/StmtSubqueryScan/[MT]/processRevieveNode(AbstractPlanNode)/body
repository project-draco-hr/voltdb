{
  assert(m_subqueriesPartitioning != null);
  if (!m_subqueriesPartitioning.requiresTwoFragments()) {
    return root;
  }
  assert(root.findAllNodesOfType(PlanNodeType.RECEIVE).size() == 1);
  assert(m_subqueryStmt != null);
  assert(m_subqueryStmt instanceof ParsedSelectStmt);
  ParsedSelectStmt selectStmt=(ParsedSelectStmt)m_subqueryStmt;
  if (selectStmt.hasLimitOrOffset() || selectStmt.hasDistinct()) {
    m_hasReceiveNode=true;
    return root;
  }
  if (selectStmt.m_mvFixInfo.needed()) {
    m_hasReceiveNode=true;
    return root;
  }
  if (selectStmt.hasAggregateExpression()) {
    if (!selectStmt.isGrouped()) {
      m_tableAggregateSubquery=true;
      m_hasReceiveNode=true;
      return root;
    }
    boolean findPartitionColumn=false;
    for (    ParsedSelectStmt.ParsedColInfo col : selectStmt.m_groupByColumns) {
      if (col.expression instanceof TupleValueExpression == false) {
        continue;
      }
      for (      SchemaColumn scol : m_partitioningColumns) {
        if (scol.getExpression().equals(col.expression)) {
          findPartitionColumn=true;
          break;
        }
      }
      if (findPartitionColumn) {
        break;
      }
    }
    if (!findPartitionColumn) {
      m_hasReceiveNode=true;
      return root;
    }
  }
  root=removeCoordinatorSendReceivePair(root);
  m_hasReceiveNode=false;
  return root;
}
