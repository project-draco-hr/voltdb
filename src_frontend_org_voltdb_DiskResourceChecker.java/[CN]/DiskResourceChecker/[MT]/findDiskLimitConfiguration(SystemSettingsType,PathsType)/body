{
  DiskLimitType diskLimitConfig=systemSettings.getResourcemonitor().getDisklimit();
  if (diskLimitConfig == null) {
    return;
  }
  String defaultSize=diskLimitConfig.getSize();
  List<DiskLimitType.Feature> features=diskLimitConfig.getFeature();
  if ((features == null || features.isEmpty()) && (defaultSize == null || defaultSize.trim().isEmpty())) {
    return;
  }
  ImmutableMap.Builder<FeatureNameType,FeatureDiskLimitConfig> builder=new ImmutableMap.Builder<>();
  EnumSet<FeatureNameType> configuredFeatures=EnumSet.noneOf(FeatureNameType.class);
  if (features != null && !features.isEmpty()) {
    for (    DiskLimitType.Feature feature : features) {
      configuredFeatures.add(feature.getName());
      if (!isSupportedFeature(feature.getName())) {
        m_logger.warn("Ignoring unsupported feature " + feature.getName());
        continue;
      }
      String size=feature.getSize();
      builder.put(feature.getName(),new FeatureDiskLimitConfig(feature.getName(),pathsConfig,size));
      if (m_logger.isDebugEnabled()) {
        m_logger.debug("Added disk usage limit configuration " + size + " for feature "+ feature.getName());
      }
    }
  }
  if (defaultSize != null && !defaultSize.trim().isEmpty()) {
    EnumSet<FeatureNameType> forDefault=EnumSet.complementOf(configuredFeatures);
    for (    FeatureNameType featureName : forDefault) {
      if (!isSupportedFeature(featureName)) {
        continue;
      }
      builder.put(featureName,new FeatureDiskLimitConfig(featureName,pathsConfig,defaultSize));
      if (m_logger.isDebugEnabled()) {
        m_logger.debug("Added disk usage limit configuration " + defaultSize + " for feature "+ featureName);
      }
    }
  }
  m_configuredLimits=builder.build();
}
