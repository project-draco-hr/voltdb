{
  System.out.println("subtest4AdvancedBadParameters...");
  String sql;
  VoltTable vt;
  sql="SELECT ID FROM R1 sub4_B WHERE ID > ? UNION SELECT ID FROM R1 sub4_C WHERE ID > ?;";
  vt=client.callProcedure("@AdHoc",sql,0,0).getResults()[0];
  assertEquals(3,vt.getRowCount());
  checkPlannerCache(client,CACHE_MISS2);
  verifyAdHocFails(client,String.format(pattern,2,1),sql,0);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  vt=client.callProcedure("@AdHoc",sql,1,2).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,2,3),sql,0,1,2);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  sql="SELECT ID FROM R1 sub4_B WHERE NUM = 0 UNION SELECT ID FROM R1 sub4_C WHERE ID < ?;";
  verifyAdHocFails(client,String.format(pattern,1,0),sql);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  verifyAdHocFails(client,String.format(pattern,1,2),sql,0,0);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  vt=client.callProcedure("@AdHoc",sql,2).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_MISS2);
  vt=client.callProcedure("@AdHoc",sql,3).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_HIT2);
  sql="SELECT ID FROM R1 sub4_B WHERE NUM > ? UNION SELECT ID FROM R1 sub4_C WHERE ID > 1;";
  vt=client.callProcedure("@AdHoc",sql,0).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_MISS2);
  vt=client.callProcedure("@AdHoc",sql,-1).getResults()[0];
  assertEquals(3,vt.getRowCount());
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,1,2),sql,0,0);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  verifyAdHocFails(client,String.format(pattern,1,0),sql);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  sql="SELECT ID FROM R1 sub4 WHERE ID > ? and ID IN (SELECT ID FROM R1 where id > ?) order by ID;";
  vt=client.callProcedure("@AdHoc",sql,1,2).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{3});
  checkPlannerCache(client,CACHE_MISS2);
  vt=client.callProcedure("@AdHoc",sql,0,1).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{2,3});
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,2,1),sql,0);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  sql="SELECT (select max(r1.id) from r1 where r1.id > sub4.ID and num >= ?) AS maxID FROM R1 sub4 " + " WHERE ID > ? order by id;";
  vt=client.callProcedure("@AdHoc",sql,1,1).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{3,Long.MIN_VALUE});
  checkPlannerCache(client,CACHE_MISS2);
  vt=client.callProcedure("@AdHoc",sql,0,0).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{3,3,Long.MIN_VALUE});
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,2,1),sql,0);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
  verifyAdHocFails(client,String.format(pattern,2,0),sql);
  checkPlannerCache(client,CACHE_PARAMS_EXCEPTION);
}
