{
  System.out.println("testAdvancedBadParameters...");
  resetStatistics();
  Client client=getClient();
  String sql;
  VoltTable vt;
  client.callProcedure("R1.insert",1,"foo1",0,1.1);
  client.callProcedure("R1.insert",2,"foo2",0,2.2);
  client.callProcedure("R1.insert",3,"foo3",1,3.3);
  sql="SELECT ID FROM R1 B WHERE B.ID > ? UNION SELECT ID FROM R1 C WHERE C.ID > ?;";
  vt=client.callProcedure("@AdHoc",sql,0,0).getResults()[0];
  assertEquals(3,vt.getRowCount());
  checkPlannerCache(client,CACHE_MISS1);
  verifyAdHocFails(client,String.format(pattern,2,1),sql,0);
  checkPlannerCache(client,CACHE_MISS1);
  vt=client.callProcedure("@AdHoc",sql,1,2).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,2,3),sql,0,1,2);
  checkPlannerCache(client,CACHE_MISS1);
  sql="SELECT ID FROM R1 B WHERE NUM = 0 UNION SELECT ID FROM R1 C WHERE C.ID < ?;";
  verifyAdHocFails(client,String.format(pattern,1,0),sql);
  checkPlannerCache(client,CACHE_MISS1);
  verifyAdHocFails(client,String.format(pattern,1,2),sql,0,0);
  checkPlannerCache(client,CACHE_MISS1);
  vt=client.callProcedure("@AdHoc",sql,2).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_MISS1);
  vt=client.callProcedure("@AdHoc",sql,3).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_HIT2);
  sql="SELECT ID FROM R1 B WHERE NUM > ? UNION SELECT ID FROM R1 C WHERE C.ID > 1;";
  vt=client.callProcedure("@AdHoc",sql,0).getResults()[0];
  assertEquals(2,vt.getRowCount());
  checkPlannerCache(client,CACHE_MISS1);
  vt=client.callProcedure("@AdHoc",sql,-1).getResults()[0];
  assertEquals(3,vt.getRowCount());
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,1,2),sql,0,0);
  checkPlannerCache(client,CACHE_MISS1);
  verifyAdHocFails(client,String.format(pattern,1,0),sql);
  checkPlannerCache(client,CACHE_MISS1);
  sql="SELECT ID FROM R1 B WHERE B.ID > ? and ID IN (SELECT ID FROM R1 where id > ?) order by ID;";
  vt=client.callProcedure("@AdHoc",sql,1,2).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{3});
  checkPlannerCache(client,CACHE_MISS1);
  vt=client.callProcedure("@AdHoc",sql,0,1).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{2,3});
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,2,1),sql,0);
  checkPlannerCache(client,CACHE_MISS1);
  sql="SELECT (select max(r1.id) from r1 where r1.id > B.id and num = ?) AS maxID FROM R1 B WHERE B.ID > ?;";
  vt=client.callProcedure("@AdHoc",sql,1,1).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{3,Long.MIN_VALUE});
  checkPlannerCache(client,CACHE_MISS1);
  vt=client.callProcedure("@AdHoc",sql,0,0).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{2,Long.MIN_VALUE,Long.MIN_VALUE});
  checkPlannerCache(client,CACHE_HIT2);
  verifyAdHocFails(client,String.format(pattern,2,1),sql,0);
  checkPlannerCache(client,CACHE_MISS1);
  verifyAdHocFails(client,String.format(pattern,2,0),sql);
  checkPlannerCache(client,CACHE_MISS1);
}
