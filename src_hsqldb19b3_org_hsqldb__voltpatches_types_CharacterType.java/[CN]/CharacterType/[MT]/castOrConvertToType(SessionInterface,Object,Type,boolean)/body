{
switch (otherType.typeCode) {
case Types.SQL_CHAR:
case Types.SQL_VARCHAR:
case Types.VARCHAR_IGNORECASE:
{
      int length=((String)a).length();
      if (precision != 0 && length > precision) {
        if (StringUtil.rightTrimSize((String)a) > precision) {
          if (!cast) {
            throw Error.error(ErrorCode.X_22001);
          }
          session.addWarning(Error.error(ErrorCode.W_01004));
        }
        a=((String)a).substring(0,(int)precision);
      }
switch (typeCode) {
case Types.SQL_CHAR:
        return convertToTypeLimits(session,a);
case Types.SQL_VARCHAR:
case Types.VARCHAR_IGNORECASE:
      return a;
case Types.SQL_CLOB:
{
      ClobData clob=session.createClob(((String)a).length());
      clob.setString(session,0,(String)a);
      return clob;
    }
default :
  throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");
}
}
case Types.SQL_CLOB:
{
long length=((ClobData)a).length(session);
if (precision != 0 && length > precision) {
if (((ClobData)a).nonSpaceLength(session) > precision) {
if (!cast) {
  throw Error.error(ErrorCode.X_22001);
}
session.addWarning(Error.error(ErrorCode.W_01004));
}
}
switch (typeCode) {
case Types.SQL_CHAR:
case Types.SQL_VARCHAR:
case Types.VARCHAR_IGNORECASE:
{
if (length > maxCharacterPrecision) {
  if (!cast) {
    throw Error.error(ErrorCode.X_22001);
  }
  length=maxCharacterPrecision;
}
a=((ClobData)a).getSubString(session,0,(int)length);
return convertToTypeLimits(session,a);
}
case Types.SQL_CLOB:
{
if (precision != 0 && length > precision) {
return ((ClobData)a).getClob(session,0,precision);
}
return a;
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");
}
}
case Types.OTHER:
case Types.SQL_BLOB:
case Types.SQL_BINARY:
case Types.SQL_VARBINARY:
{
throw Error.error(ErrorCode.X_42561);
}
default :
String s=otherType.convertToString(a);
if (precision != 0 && s.length() > precision) {
throw Error.error(ErrorCode.X_22001);
}
a=s;
return convertToTypeLimits(session,a);
}
}
