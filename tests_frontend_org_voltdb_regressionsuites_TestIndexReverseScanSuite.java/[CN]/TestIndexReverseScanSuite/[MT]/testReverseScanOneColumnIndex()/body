{
  loadData();
  Client c=this.getClient();
  VoltTable vt;
  for (  String tb : tbs) {
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < -60000000000 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < -3 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < 1 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < 2 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < 4 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < 5 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < 8 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a < 6000000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= -60000000000 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= -3 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= 1 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= 2 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= 4 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= 5 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= 8 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a <= 6000000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 1 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 4 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 5 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 8 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 6000000000000 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= -60000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= -3 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= 1 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= 2 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= 4 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= 5 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= 8 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a >= 6000000000000 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 AND a < -50000000000  order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 AND a < -1  order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 AND a < 1  order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 AND a < 2  order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 AND a < 5  order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -60000000000 AND a < 6000000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 AND a < -2 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 AND a < 1 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 AND a < 2 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 AND a < 5 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 AND a < 8 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > -3 AND a < 6000000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3,2,1});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 AND a < -2 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 AND a < 1 order by a DESC").getResults()[0];
    assertEquals(0,vt.getRowCount());
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 AND a < 4 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{3});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 AND a < 5 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{4,3});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 AND a < 8 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3});
    vt=c.callProcedure("@AdHoc","SELECT a from " + tb + " where a > 2 AND a < 6000000000000 order by a DESC").getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{5,4,3});
  }
}
