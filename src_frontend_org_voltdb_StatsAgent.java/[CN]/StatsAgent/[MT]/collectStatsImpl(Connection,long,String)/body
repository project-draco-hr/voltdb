{
  if (selector.equals("TOPO")) {
    PendingStatsRequest psr=new PendingStatsRequest(selector,c,clientHandle,new VoltTable[1],System.currentTimeMillis());
    collectTopoStats(psr);
    return;
  }
  if (m_pendingRequests.size() > MAX_IN_FLIGHT_REQUESTS) {
    Iterator<PendingStatsRequest> iter=m_pendingRequests.values().iterator();
    final long now=System.currentTimeMillis();
    boolean foundExpiredRequest=false;
    while (iter.hasNext()) {
      PendingStatsRequest psr=iter.next();
      if (now - psr.startTime > STATS_COLLECTION_TIMEOUT * 2) {
        iter.remove();
        foundExpiredRequest=true;
      }
    }
    if (!foundExpiredRequest) {
      final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"Too many pending stat requests",clientHandle);
      ByteBuffer buf=ByteBuffer.allocate(errorResponse.getSerializedSize() + 4);
      buf.putInt(buf.capacity() - 4);
      errorResponse.flattenToBuffer(buf).flip();
      c.writeStream().enqueue(buf);
      return;
    }
  }
  PendingStatsRequest psr=new PendingStatsRequest(selector,c,clientHandle,new VoltTable[2],System.currentTimeMillis());
  final long requestId=m_nextRequestId++;
  m_pendingRequests.put(requestId,psr);
  m_es.schedule(new Runnable(){
    @Override public void run(){
      checkForRequestTimeout(requestId);
    }
  }
,STATS_COLLECTION_TIMEOUT,TimeUnit.MILLISECONDS);
  JSONObject obj=new JSONObject();
  obj.put("requestId",requestId);
  obj.put("returnAddress",m_mailbox.getHSId());
  obj.put("selector","DRNODE");
  byte payloadBytes[]=CompressionService.compressBytes(obj.toString(4).getBytes("UTF-8"));
  final SiteTracker st=VoltDB.instance().getSiteTracker();
  for (  long agent : st.getStatsAgents()) {
    psr.expectedStatsResponses++;
    BinaryPayloadMessage bpm=new BinaryPayloadMessage(new byte[]{JSON_PAYLOAD},payloadBytes);
    m_mailbox.send(agent,bpm);
  }
}
