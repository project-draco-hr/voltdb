{
  if (m_hostId == -1) {
    m_hostId=VoltDB.instance().getHostMessenger().getHostId();
    m_hostName="&lt;unknownhost&gt;";
    try {
      InetAddress addr=InetAddress.getLocalHost();
      m_hostName=addr.getHostName();
    }
 catch (    Exception e) {
      try {
        InetAddress addr=InetAddress.getLocalHost();
        m_hostName=addr.getHostAddress();
      }
 catch (      Exception e2) {
      }
    }
  }
  VoltTable t=getEmptyNodeMemStatsTable();
  PartitionMemRow totals=new PartitionMemRow();
  for (  PartitionMemRow pmr : m_memoryStats.values()) {
    totals.tupleCount+=pmr.tupleCount;
    totals.tupleDataMem+=pmr.tupleDataMem;
    totals.tupleAllocatedMem+=pmr.tupleAllocatedMem;
    totals.indexMem+=pmr.indexMem;
    totals.stringMem+=pmr.stringMem;
    totals.pooledMem+=pmr.pooledMem;
  }
  int rss=0;
  int javaused=0;
  int javaunused=0;
  SystemStatsCollector.Datum d=SystemStatsCollector.getRecentSample();
  if (d != null) {
    rss=(int)(d.rss / 1024);
    double javausedFloat=d.javausedheapmem + d.javausedsysmem;
    javaused=(int)(javausedFloat / 1024);
    javaunused=(int)((d.javatotalheapmem + d.javatotalsysmem - javausedFloat) / 1024);
  }
  t.addRow(m_hostId,m_hostName,rss,javaused,javaunused,totals.tupleDataMem,totals.tupleAllocatedMem,totals.indexMem,totals.stringMem,totals.tupleCount,totals.pooledMem / 1024);
  assert(t.getRowCount() == 1);
  return t;
}
