{
  assert(selector.equals("WAN"));
  if (m_pendingRequests.size() > MAX_IN_FLIGHT_REQUESTS) {
    final ClientResponseImpl errorResponse=new ClientResponseImpl(ClientResponse.GRACEFUL_FAILURE,new VoltTable[0],"Too many pending stat requests",clientHandle);
    c.writeStream().enqueue(errorResponse);
    return;
  }
  PendingStatsRequest psr=new PendingStatsRequest(selector,c,clientHandle,VoltDB.instance().getCatalogContext().numberOfNodes,new VoltTable[2]);
  final long requestId=m_nextRequestId++;
  m_pendingRequests.put(requestId,psr);
  m_es.schedule(new Runnable(){
    @Override public void run(){
      checkForRequestTimeout(requestId);
    }
  }
,60,TimeUnit.SECONDS);
  JSONObject obj=new JSONObject();
  obj.put("requestId",requestId);
  obj.put("returnAddress",m_mailbox.getSiteId());
  obj.put("selector","WANNODE");
  byte payloadBytes[]=CompressionService.compressBytes(obj.toString(4).getBytes("UTF-8"));
  BinaryPayloadMessage bpm=new BinaryPayloadMessage(new byte[]{JSON_PAYLOAD},payloadBytes);
  final SiteTracker st=VoltDB.instance().getCatalogContext().siteTracker;
  for (  Integer host : st.getAllLiveHosts()) {
    m_mailbox.send(st.getFirstNonExecSiteForHost(host),VoltDB.STATS_MAILBOX_ID,bpm);
  }
}
