{
  assertFalse(CatalogUtil.isCatalogCompatible("0.3"));
  try {
    CatalogUtil.isCatalogCompatible("nonsense");
    fail("No exception thrown when bad version string given");
  }
 catch (  IllegalArgumentException ex) {
  }
  Object[] minCompatibleVersion=MiscUtils.parseVersionString(VoltDB.instance().getVersionString());
  for (int i=minCompatibleVersion.length - 1; i >= 0; i--) {
    if (minCompatibleVersion[i] instanceof Integer) {
      if (((Integer)minCompatibleVersion[i]) != 0) {
        minCompatibleVersion[i]=((Integer)minCompatibleVersion[i]) - 1;
        break;
      }
    }
  }
  ArrayList<Object> arrayList=new ArrayList<Object>();
  for (  Object part : minCompatibleVersion) {
    arrayList.add(part);
  }
  String version=Joiner.on('.').join(arrayList);
  assertNotNull(version);
  assertFalse(CatalogUtil.isCatalogCompatible(version));
  final String currentVersion=VoltDB.instance().getVersionString();
  Object[] parseCurrentVersion=MiscUtils.parseVersionString(currentVersion);
  for (int i=parseCurrentVersion.length - 1; i >= 0; i--) {
    if (parseCurrentVersion[i] instanceof Integer) {
      parseCurrentVersion[i]=((Integer)parseCurrentVersion[i]) + 1;
      break;
    }
  }
  arrayList=new ArrayList<Object>();
  for (  Object part : parseCurrentVersion) {
    arrayList.add(part);
  }
  String futureVersion=Joiner.on('.').join(arrayList);
  assertFalse(CatalogUtil.isCatalogCompatible(futureVersion));
  String longerVersion=currentVersion + ".2";
  assertFalse(CatalogUtil.isCatalogCompatible(longerVersion));
  Object[] longVersion=MiscUtils.parseVersionString("2.3.1");
  Object[] shortVersion=MiscUtils.parseVersionString("2.3");
  assertEquals(-1,MiscUtils.compareVersions(shortVersion,longVersion));
  assertTrue(CatalogUtil.isCatalogCompatible(VoltDB.instance().getVersionString()));
}
