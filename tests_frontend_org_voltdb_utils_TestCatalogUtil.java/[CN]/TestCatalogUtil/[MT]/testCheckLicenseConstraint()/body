{
  catalog_db.setIsactiveactivedred(true);
  LicenseApi lapi=new LicenseApi(){
    @Override public boolean initializeFromFile(    File license){
      return false;
    }
    @Override public boolean isTrial(){
      return false;
    }
    @Override public int maxHostcount(){
      return 0;
    }
    @Override public Calendar expires(){
      return null;
    }
    @Override public boolean verify() throws LicenseException {
      return false;
    }
    @Override public boolean isDrReplicationAllowed(){
      return false;
    }
    @Override public boolean isDrActiveActiveAllowed(){
      return true;
    }
    @Override public boolean isCommandLoggingAllowed(){
      return false;
    }
  }
;
  assertNull("Setting DR Active-Active should succeed with qualified license",CatalogUtil.checkLicenseConstraint(catalog,lapi));
  lapi=new LicenseApi(){
    @Override public boolean initializeFromFile(    File license){
      return false;
    }
    @Override public boolean isTrial(){
      return false;
    }
    @Override public int maxHostcount(){
      return 0;
    }
    @Override public Calendar expires(){
      return null;
    }
    @Override public boolean verify() throws LicenseException {
      return false;
    }
    @Override public boolean isDrReplicationAllowed(){
      return false;
    }
    @Override public boolean isDrActiveActiveAllowed(){
      return false;
    }
    @Override public boolean isCommandLoggingAllowed(){
      return false;
    }
  }
;
  assertNotNull("Setting DR Active-Active should fail with unqualified license",CatalogUtil.checkLicenseConstraint(catalog,lapi));
}
