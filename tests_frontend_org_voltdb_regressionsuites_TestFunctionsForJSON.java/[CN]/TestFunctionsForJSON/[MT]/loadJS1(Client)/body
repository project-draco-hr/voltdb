{
  final String jstemplate="{\n" + "    \"id\": %d,\n" + "    \"bool\": true,\n"+ "    \"numeric\": 1.2,\n"+ "    \"inner\": {\n"+ "        \"veggies\": \"good for you\",\n"+ "        \"??????Vo\": \"wakarimasen\",\n"+ "        \"second\": {\n"+ "            \"fruits\": 1,\n"+ "            \"third\": {\n"+ "                \"meats\": \"yum\",\n"+ "                \"dairy\": \"%d\",\n"+ "                \"numeric\": 2.3\n"+ "            }\n"+ "        },\n"+ "        \"arr\": [\n"+ "            0,\n"+ "            %d,\n"+ "            3.4\n"+ "        ]\n"+ "    },\n"+ "    \"arr\": [\n"+ "        0,\n"+ "        %d,\n"+ "        100\n"+ "    ],\n"+ "    \"arr3d\": [\n"+ "        0,\n"+ "        [\n"+ "            \"one\",\n"+ "            [\n"+ "                2,\n"+ "                %d,\n"+ "                4.5\n"+ "            ]\n"+ "        ],\n"+ "        {\n"+ "            \"veggies\": \"good for you\",\n"+ "            \"dairy\": \"%d\",\n"+ "            \"numeric\": 5.6\n"+ "        }\n"+ "    ],\n"+ "    \"dot.char\": \"foo.bar\",\n"+ "    \"bracket][[] [ ] chars\": \"[foo]\",\n"+ "    \"tag\": \"%s\",\n"+ "    \"last\": \"\\\"foobar\\\"\"\n"+ "}";
  ClientResponse cr;
  cr=client.callProcedure("JS1.insert",1,String.format(jstemplate,1,1,1,1,1,1,"one"));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",2,String.format(jstemplate,2,2,2,2,2,2,"two"));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",3,String.format(jstemplate,3,3,3,3,3,3,"three"));
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",4,"{\"id\":4,\"bool\": false}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",5,"{}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",6,"[]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",7,"{\"id\":7,\"funky\": null}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",8,null);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",9,"{\"id\":9, \"??????Vo\":\"??????????????????\"}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",10,"[1,2,3]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",11,"{\"null\": \"foo\"}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",12,"{\"foo\": \"null\"}");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",13,"\"foobar\"");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",14,"true");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  cr=client.callProcedure("JS1.insert",15,42);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
}
