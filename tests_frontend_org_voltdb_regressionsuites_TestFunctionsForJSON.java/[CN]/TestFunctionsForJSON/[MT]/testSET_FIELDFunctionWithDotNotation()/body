{
  Client client=getClient();
  loadJS1(client);
  testProcWithValidJSON(TABLE_ROWS123,client,"IdFieldProc","inner.veggies","good for you");
  testProcWithValidJSON(EMPTY_TABLE,client,"IdFieldProc","inner.veggies","bad for you");
  testProcWithValidJSON(TABLE_ROWS123,client,"IdFieldProc","inner.second.fruits",1);
  testProcWithValidJSON(EMPTY_TABLE,client,"IdFieldProc","inner.second.fruits",-1);
  testProcWithValidJSON(TABLE_ROWS123,client,"IdFieldProc","inner.second.third.meats","yum");
  testProcWithValidJSON(EMPTY_TABLE,client,"IdFieldProc","inner.second.third.meats","yuck");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","inner.newint");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","inner.newstr");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","inner.newbool");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","newobj.newint");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","newobj.newstr");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","newobj.newbool");
  testProcWithValidJSON(TABLE_ROWS123,client,"IdFieldProc","dot\\.char","foo.bar");
  testProcWithValidJSON(EMPTY_TABLE,client,"IdFieldProc","dot\\.char","bar.foo");
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","inner.veggies","\"bad for you\"",1);
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","inner.second.fruits",-1,2);
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","inner.second.third.meats","\"yuck\"",3);
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","inner.newint",7,1);
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","inner.newstr","\"newvalue\"",2);
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","newobj.newbool","true",4);
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'inner.veggies', '\"bad for you\"') WHERE ID = 2");
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'inner.second.fruits', '-1') WHERE ID = 3");
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'inner.second.third.meats', '\"yuck\"') WHERE ID = 1");
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'inner.newbool', 'true') WHERE ID = 3");
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'newobj.newint', '7') WHERE ID = 4");
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'newobj.newstr', '\"newvalue\"') WHERE ID = 4");
  testProcWithValidJSON(UPDATED_1ROW,client,"UpdateSetFieldProc","dot\\.char","\"bar.foo\"",1);
  testProcWithValidJSON(UPDATED_1ROW,client,"@AdHoc","UPDATE JS1 SET DOC = SET_FIELD(DOC, 'dot\\.char', '\"bar.foo\"') WHERE ID = 2");
  debugPrintJsonDoc("with new object values",client,1,2,3,4);
  testProcWithValidJSON(TABLE_ROW3,client,"IdFieldProc","inner.veggies","good for you");
  testProcWithValidJSON(TABLE_ROWS12,client,"IdFieldProc","inner.veggies","bad for you");
  testProcWithValidJSON(TABLE_ROW1,client,"IdFieldProc","inner.second.fruits",1);
  testProcWithValidJSON(TABLE_ROWS23,client,"IdFieldProc","inner.second.fruits",-1);
  testProcWithValidJSON(TABLE_ROW2,client,"IdFieldProc","inner.second.third.meats","yum");
  testProcWithValidJSON(TABLE_ROWS13,client,"IdFieldProc","inner.second.third.meats","yuck");
  testProcWithValidJSON(TABLE_ROW1,client,"IdFieldProc","inner.newint",7);
  testProcWithValidJSON(TABLE_ROW2,client,"IdFieldProc","inner.newstr","newvalue");
  testProcWithValidJSON(TABLE_ROW3,client,"IdFieldProc","inner.newbool","true");
  testProcWithValidJSON(TABLE_ROW4,client,"IdFieldProc","newobj.newint",7);
  testProcWithValidJSON(TABLE_ROW4,client,"IdFieldProc","newobj.newstr","newvalue");
  testProcWithValidJSON(TABLE_ROW4,client,"IdFieldProc","newobj.newbool","true");
  testProcWithValidJSON(TABLE_ROW3,client,"IdFieldProc","dot\\.char","foo.bar");
  testProcWithValidJSON(TABLE_ROWS12,client,"IdFieldProc","dot\\.char","bar.foo");
}
