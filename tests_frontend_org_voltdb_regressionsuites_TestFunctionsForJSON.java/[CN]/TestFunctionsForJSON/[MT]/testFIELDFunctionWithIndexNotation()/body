{
  ClientResponse cr;
  VoltTable result;
  Client client=getClient();
  loadJS1(client);
  cr=client.callProcedure("IdFieldProc","arr[0]",0);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{1},{2},{3}});
  cr=client.callProcedure("IdFieldProc","arr[1]",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{2}});
  cr=client.callProcedure("IdFieldProc","arr[2]",100);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{1},{2},{3}});
  cr=client.callProcedure("IdFieldProc","arr3d[1][0]","one");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{1},{2},{3}});
  cr=client.callProcedure("IdFieldProc","arr3d[1][1][0]",2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{1},{2},{3}});
  cr=client.callProcedure("IdFieldProc","arr3d[1][1][1]",3);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{3}});
  cr=client.callProcedure("IdFieldProc","bracket]\\[\\[] \\[ ] chars","[foo]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{{1},{2},{3}});
  cr=client.callProcedure("IdFieldProc","bracket]]  ] chars","[foo]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  validateTableOfLongs(result,new long[][]{});
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","id[0]");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","numeric[0]");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","bool[0]");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","tag[0]");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","last[0]");
  testProcWithValidJSON(EMPTY_TABLE,client,"NotNullFieldProc","inner[0]");
  testProcWithValidJSON(FULL_TABLE,client,"NullArrayProc","id",0);
  testProcWithValidJSON(FULL_TABLE,client,"NullArrayProc","numeric",0);
  testProcWithValidJSON(FULL_TABLE,client,"NullArrayProc","bool",0);
  testProcWithValidJSON(FULL_TABLE,client,"NullArrayProc","last",0);
  testProcWithValidJSON(FULL_TABLE,client,"NullArrayProc","inner",0);
  testProcWithInvalidJSON("Syntax error: value, object or array expected",client,"NullArrayProc","tag",0);
  testProcWithValidJSON(new long[][]{{10}},client,"NotNullFieldProc","[0]");
  testProcWithValidJSON(new long[][]{{10}},client,"IdFieldProc","[0]",1);
  testProcWithValidJSON(new long[][]{{10}},client,"IdFieldProc","[1]",2);
  testProcWithValidJSON(new long[][]{{10}},client,"IdFieldProc","[2]",3);
}
