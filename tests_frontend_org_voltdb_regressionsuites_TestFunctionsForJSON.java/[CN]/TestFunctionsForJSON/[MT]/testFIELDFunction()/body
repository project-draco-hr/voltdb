{
  ClientResponse cr;
  VoltTable result;
  Client client=getClient();
  loadJS1(client);
  if (DEBUG) {
    int[] ids=new int[TOTAL_NUM_ROWS];
    for (int id=1; id <= TOTAL_NUM_ROWS; id++) {
      ids[id - 1]=id;
    }
    debugPrintJsonDoc("initial values",client,ids);
  }
  cr=client.callProcedure("IdFieldProc","id","1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  try {
    cr=client.callProcedure("IdFieldProc","id",1);
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  }
 catch (  ProcCallException pcex) {
    fail("parameter check failed");
  }
  try {
    cr=client.callProcedure("IdFieldProc",1,"1");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  }
 catch (  ProcCallException pcex) {
    fail("parameter check failed");
  }
  cr=client.callProcedure("IdFieldProc","tag","Three");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("IdFieldProc","bool","false");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(4L,result.getLong(0));
  cr=client.callProcedure("IdFieldProc","??????Vo","??????????????????");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(9L,result.getLong(0));
  cr=client.callProcedure("NullFieldProc","funky");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(TOTAL_NUM_ROWS,result.getRowCount());
  cr=client.callProcedure("NullFieldProc","id");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  long[] expectedResults=new long[]{5L,6L,8L,10L,11L,12L,13L,14L,15L};
  assertEquals(expectedResults.length,result.getRowCount());
  for (  long expResult : expectedResults) {
    assertTrue(result.advanceRow());
    assertEquals(expResult,result.getLong(0));
  }
  cr=client.callProcedure("InnerFieldProc","??????Vo","wakarimasen");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(3,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(1L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  assertTrue(result.advanceRow());
  assertEquals(3L,result.getLong(0));
  cr=client.callProcedure("IdFieldProc","arr","[0,2,100]");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  assertEquals(2L,result.getLong(0));
  cr=client.callProcedure("@AdHoc","SELECT FIELD(FIELD(DOC, 'id'), 'value') FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
  cr=client.callProcedure("@AdHoc","SELECT FIELD(FIELD(DOC, 'arr'), 'value') FROM JS1 WHERE ID = 1");
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  result=cr.getResults()[0];
  assertEquals(1,result.getRowCount());
  assertTrue(result.advanceRow());
  result.getString(0);
  assertTrue(result.wasNull());
  testProcWithValidJSON(EMPTY_TABLE,client,"IdFieldProc","tag","one");
  testProcWithValidJSON(EMPTY_TABLE,client,"IdFieldProc","tag","ONE");
  testProcWithValidJSON(TABLE_ROW1,client,"IdFieldProc","tag","One");
  testProcWithValidJSON(EMPTY_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'one' ORDER BY ID");
  testProcWithValidJSON(EMPTY_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'ONE' ORDER BY ID");
  testProcWithValidJSON(TABLE_ROW1,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'tag') = 'One' ORDER BY ID");
  testProcWithValidJSON(FULL_TABLE,client,"NullFieldDocProc",null,null);
  testProcWithValidJSON(FULL_TABLE,client,"NullFieldDocProc",null,0);
  testProcWithValidJSON(FULL_TABLE,client,"NullFieldDocProc",null,1.2);
  testProcWithValidJSON(FULL_TABLE,client,"NullFieldDocProc",null,"true");
  testProcWithValidJSON(FULL_TABLE,client,"NullFieldDocProc",null,"One");
  testProcWithValidJSON(FULL_TABLE,client,"NullFieldDocProc",null,"tag");
  testProcWithInvalidJSON("Invalid FIELD path argument (SQL null)",client,"NullFieldProc",(Object)null);
  testProcWithValidJSON(new long[][]{{11}},client,"NotNullFieldProc","null");
  testProcWithValidJSON(new long[][]{{12}},client,"NotNullFieldProc","foo");
  testProcWithValidJSON(new long[][]{{11}},client,"IdFieldProc","null","foo");
  testProcWithValidJSON(new long[][]{{12}},client,"IdFieldProc","foo","null");
  testProcWithValidJSON(FULL_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(null, null) IS NULL ORDER BY ID");
  testProcWithValidJSON(FULL_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(null, 0) IS NULL ORDER BY ID");
  testProcWithValidJSON(FULL_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(null, 1.2) IS NULL ORDER BY ID");
  testProcWithValidJSON(FULL_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(null, 'true') IS NULL ORDER BY ID");
  testProcWithValidJSON(FULL_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(null, 'One') IS NULL ORDER BY ID");
  testProcWithValidJSON(FULL_TABLE,client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(null, 'tag') IS NULL ORDER BY ID");
  testProcWithInvalidJSON("Invalid FIELD path argument (SQL null)",client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, null) IS NULL ORDER BY ID");
  testProcWithValidJSON(new long[][]{{11}},client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'null') IS NOT NULL ORDER BY ID");
  testProcWithValidJSON(new long[][]{{12}},client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'foo') IS NOT NULL ORDER BY ID");
  testProcWithValidJSON(new long[][]{{11}},client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'null') = 'foo' ORDER BY ID");
  testProcWithValidJSON(new long[][]{{12}},client,"@AdHoc","SELECT ID FROM JS1 WHERE FIELD(DOC, 'foo') = 'null' ORDER BY ID");
}
