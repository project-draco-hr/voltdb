{
  if (iterable instanceof List) {
    List<E> list=(List<E>)iterable;
    if (list.isEmpty()) {
      return Optional.absent();
    }
    return Optional.of(list.get(list.size() - 1));
  }
  Iterator<E> iterator=iterable.iterator();
  if (!iterator.hasNext()) {
    return Optional.absent();
  }
  if (iterable instanceof SortedSet) {
    SortedSet<E> sortedSet=(SortedSet<E>)iterable;
    return Optional.of(sortedSet.last());
  }
  while (true) {
    E current=iterator.next();
    if (!iterator.hasNext()) {
      return Optional.of(current);
    }
  }
}
