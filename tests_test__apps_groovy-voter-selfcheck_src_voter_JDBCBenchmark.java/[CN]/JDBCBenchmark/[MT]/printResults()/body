{
  ClientStats stats=fullStatsContext.fetch().getStats();
  String display="\n" + HORIZONTAL_RULE + " Voting Results\n"+ HORIZONTAL_RULE+ "\nA total of %d votes were received...\n"+ " - %,9d Accepted\n"+ " - %,9d Rejected (Invalid Contestant)\n"+ " - %,9d Rejected (Maximum Vote Count Reached)\n"+ " - %,9d Failed (Transaction Error)\n\n";
  System.out.printf(display,stats.getInvocationsCompleted(),acceptedVotes.get(),badContestantVotes.get(),badVoteCountVotes.get(),failedVotes.get());
  final CallableStatement resultsCS=client.prepareCall("{call Results}");
  ResultSet result=resultsCS.executeQuery();
  String winner="";
  long winnerVoteCount=0;
  System.out.println("Contestant Name\t\tVotes Received");
  while (result.next()) {
    if (result.getLong(3) > winnerVoteCount) {
      winnerVoteCount=result.getLong(3);
      winner=result.getString(1);
    }
    System.out.printf("%s\t\t%,14d\n",result.getString(1),result.getLong(3));
  }
  System.out.printf("\nThe Winner is: %s\n\n",winner);
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Client Workload Statistics");
  System.out.println(HORIZONTAL_RULE);
  System.out.printf("Average throughput:            %,9d txns/sec\n",stats.getTxnThroughput());
  System.out.printf("Average latency:               %,9.2f ms\n",stats.getAverageLatency());
  System.out.printf("95th percentile latency:       %,9d ms\n",stats.kPercentileLatency(.95));
  System.out.printf("99th percentile latency:       %,9d ms\n",stats.kPercentileLatency(.99));
  System.out.print("\n" + HORIZONTAL_RULE);
  System.out.println(" System Server Statistics");
  System.out.println(HORIZONTAL_RULE);
  System.out.printf("Reported Internal Avg Latency: %,9.2f ms\n",stats.getAverageInternalLatency());
  ((IVoltDBConnection)client).writeSummaryCSV(stats,config.statsfile);
}
