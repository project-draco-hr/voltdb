def generate_index_file(filenames, branches):
    row = '\n      <tr>\n        <td><a href="%s"><img src="%s" width="100%%" height="35%%"/></a></td>\n        <td><a href="%s"><img src="%s" width="100%%" height="35%%"/></a></td>\n        <td><a href="%s"><img src="%s" width="100%%" height="35%%"/></a></td>\n      </tr>\n    '
    sep = '\n     </table>\n     <table frame="box" width="100%%">\n     <tr>\n         <th colspan="3"><a name="%s">%s</a></th>\n     </tr>\n    '
    full_content = '\n<html>\n  <head>\n    <title>Performance Graphs</title>\n  </head>\n  <body>\n    Generated on %s<br>\n    %s\n    <table frame="box" width="100%%">\n%s\n    </table>\n  </body>\n</html>\n'
    branch_studies = '\n        <a href=%s>%s</a>\n    '
    hrow = '\n    <tr>\n        <td %s><a href=#%s>%s</a></td>\n        <td %s><a href=#%s>%s</a></td>\n        <td %s><a href=#%s>%s</a></td>\n        <td %s><a href=#%s>%s</a></td>\n    </tr>\n    '
    toc = []
    for x in filenames:
        tdattr = '<span></span>'
        if (len(x) == 6):
            color = None
            for type in x[5].values():
                for branch in type:
                    if (branch[1] == 'red'):
                        color = 'red'
                        break
                    elif ((color is None) and (branch[1] == 'yellow')):
                        color = 'yellow'
                if (color == 'red'):
                    break
            if color:
                tdattr = ('<span style="color:%s">&#9658;</span>' % color)
        toc.append(('', x[0].replace(' ', '%20'), (tdattr + x[0])))
    n = 4
    z = (n - (len(toc) % n))
    while ((z > 0) and (z < n)):
        toc.append(('', '', ''))
        z -= 1
    rows = []
    t = ()
    for i in range(1, (len(toc) + 1)):
        t += tuple(toc[(i - 1)])
        if ((i % n) == 0):
            rows.append((hrow % t))
            t = ()
    last_app = None
    for i in filenames:
        if (i[0] != last_app):
            rows.append((sep % (i[0], i[0])))
            last_app = i[0]
        rows.append((row % (i[1], i[1], i[2], i[2], i[3], i[3])))
    return (full_content % (time.strftime('%Y/%m/%d %H:%M:%S'), branches, ''.join(rows)))
