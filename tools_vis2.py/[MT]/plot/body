def plot(title, xlabel, ylabel, filename, width, height, app, data, series, mindate, maxdate):
    global mc
    plot_data = dict()
    for run in data:
        if (run['branch'] not in plot_data):
            plot_data[run['branch']] = {series: [], }
        if (series == 'tppn'):
            value = (run['tps'] / run['nodes'])
        else:
            value = run[series]
        datenum = matplotlib.dates.date2num(run['date'])
        plot_data[run['branch']][series].append((datenum, value))
    if (len(plot_data) == 0):
        return
    pl = Plot(title, xlabel, ylabel, filename, width, height, mindate, maxdate, series)
    flag = dict()
    for (b, bd) in plot_data.items():
        for (k, v) in bd.items():
            if (k not in flag.keys()):
                flag[k] = []
            v = sorted(v, key=(lambda x: x[0]))
            u = zip(*v)
            if (b not in mc):
                mc[b] = (COLORS[(len(mc.keys()) % len(COLORS))], MARKERS[(len(mc.keys()) % len(MARKERS))])
            pl.plot(u[0], u[1], mc[b][0], mc[b][1], b, '-')
            ma = [None]
            if (len(u[0]) >= 10):
                (ma, mstd) = moving_average(u[1], 10)
                pl.plot(u[0], ma, mc[b][0], None, None, ':')
                failed = 0
                if k.startswith('lat'):
                    polarity = 1
                    cv = np.nanmin(ma)
                    rp = (u[0][np.nanargmin(ma)], cv)
                    if ((b == 'master') and (ma[(-1)] > (cv * 1.05))):
                        failed = 1
                else:
                    polarity = (-1)
                    cv = np.nanmax(ma)
                    rp = (u[0][np.nanargmax(ma)], cv)
                    if ((b == 'master') and (ma[(-1)] < (cv * 0.95))):
                        failed = 1
                twosigma = np.sum([np.convolve(mstd, (polarity * 2)), ma], axis=0)
                pl.plot(u[0], twosigma, mc[b][0], None, None, '-.')
                pl.ax.annotate('$2\\sigma$', xy=(u[0][(-1)], twosigma[(-1)]), xycoords='data', xytext=(20, 0), textcoords='offset points', ha='right')
                twntypercent = np.sum([np.convolve(ma, (polarity * 0.2)), ma], axis=0)
                pl.plot(u[0], twntypercent, mc[b][0], None, None, '-.')
                pl.ax.annotate('20%', xy=(u[0][(-1)], twntypercent[(-1)]), xycoords='data', xytext=(20, 0), textcoords='offset points', ha='right')
                p = (((ma[(-1)] - rp[1]) / rp[1]) * 100.0)
                if (failed != 0):
                    if (p < 10):
                        color = 'yellow'
                    else:
                        color = 'red'
                    flag[k].append((b, p))
                    for pos in ['top', 'bottom', 'right', 'left']:
                        pl.ax.spines[pos].set_edgecolor(color)
                    pl.ax.set_axis_bgcolor(color)
                    pl.ax.set_alpha(0.2)
                pl.ax.annotate(('%.2f' % cv), xy=rp, xycoords='data', xytext=(0, ((-10) * polarity)), textcoords='offset points', ha='center')
                pl.ax.annotate(('%.2f' % ma[(-1)]), xy=(u[0][(-1)], ma[(-1)]), xycoords='data', xytext=(5, (+ 5)), textcoords='offset points', ha='left')
                pl.ax.annotate(('(%+.2f%%)' % p), xy=(u[0][(-1)], ma[(-1)]), xycoords='data', xytext=(5, (-5)), textcoords='offset points', ha='left')
            '\n            #pl.ax.annotate(b, xy=(u[0][-1],u[1][-1]), xycoords=\'data\',\n            #        xytext=(0, 0), textcoords=\'offset points\') #, arrowprops=dict(arrowstyle="->"))\n            x = u[0][-1]\n            y = u[1][-1]\n            pl.ax.annotate(str(y), xy=(x,y), xycoords=\'data\', xytext=(5,0),\n                textcoords=\'offset points\', ha=\'left\')\n            xmin, ymin = [(u[0][i],y) for i,y in enumerate(u[1]) if y == min(u[1])][-1]\n            xmax, ymax= [(u[0][i],y) for i,y in enumerate(u[1]) if y == max(u[1])][-1]\n            if ymax != ymin:\n                if xmax != x:\n                    pl.ax.annotate(str(ymax), xy=(xmax,ymax),\n                        textcoords=\'offset points\', ha=\'center\', va=\'bottom\', xytext=(0,5))\n                if xmin != x:\n                    pl.ax.annotate(str(ymin), xy=(xmin,ymin),\n                        textcoords=\'offset points\', ha=\'center\', va=\'top\', xytext=(0,-5))\n            '
    pl.close()
    return flag
