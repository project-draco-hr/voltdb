def main():
    if (len(sys.argv) < 3):
        usage()
        exit((-1))
    if (not os.path.exists(sys.argv[1])):
        print sys.argv[1], 'does not exist'
        exit((-1))
    prefix = sys.argv[2]
    path = os.path.join(sys.argv[1], sys.argv[2])
    ndays = 2000
    if (len(sys.argv) >= 4):
        ndays = int(sys.argv[3])
    width = None
    height = None
    if (len(sys.argv) >= 5):
        width = int(sys.argv[4])
    if (len(sys.argv) >= 6):
        height = int(sys.argv[5])
    stats = get_stats(STATS_SERVER, 21212, ndays)
    root_path = path
    filenames = []
    iorder = 0
    for (group, data) in stats.iteritems():
        (app, nodes) = group
        conn = FastSerializer(STATS_SERVER, 21212)
        proc = VoltProcedure(conn, '@AdHoc', [FastSerializer.VOLTTYPE_STRING])
        resp = proc.call([("select series, chart_heading, x_label, y_label from charts where appname = '%s' order by chart_order" % app)])
        conn.close()
        app = (app + (' %d %s' % (nodes, ['node', 'nodes'][(nodes > 1)])))
        if (len(resp.tables[0].tuples) > 0):
            legend = resp.tables[0].tuples
        else:
            legend = [('lat95', 'avg latency95', 'Time', 'Latency (ms)'), ('lat99', 'avg latency99', 'Time', 'latency (ms)'), ('tppn', 'avg throughput per node', 'Time', 'TPS per node')]
        app_filename = app.replace(' ', '_')
        fns = [app]
        for r in legend:
            title = ((app + ' ') + r[1])
            fn = (('_' + title.replace(' ', '_')) + '.png')
            fns.append((prefix + fn))
            plot(title, r[2], r[3], (path + fn), width, height, app, data, r[0])
        fns.append(iorder)
        filenames.append(tuple(fns))
    filenames.append(('KVBenchmark-five9s-latency', '', '', 'http://ci/view/system%20tests-elastic/job/performance-nextrelease-5nines/lastSuccessfulBuild/artifact/pro/tests/apptests/savedlogs/5nines-histograms.png', iorder))
    index_file = open((root_path + '-index.html'), 'w')
    sorted_filenames = sorted(filenames, key=(lambda f: (f[0].lower() + str(f[1]))))
    index_file.write(generate_index_file(sorted_filenames))
    index_file.close()
