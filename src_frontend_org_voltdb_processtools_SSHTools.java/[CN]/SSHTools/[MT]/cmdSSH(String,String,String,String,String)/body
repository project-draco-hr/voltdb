{
  StringBuilder result=new StringBuilder(2048);
  try {
    JSch jsch=new JSch();
    if (null != key)     jsch.addIdentity(key);
    Session session=jsch.getSession(user,host,22);
    session.setTimeout(5000);
    java.util.Properties config=new java.util.Properties();
    config.put("StrictHostKeyChecking","no");
    session.setConfig(config);
    if (password != null && !password.trim().isEmpty()) {
      session.setPassword(password);
    }
    session.connect();
    Channel channel=session.openChannel("exec");
    ((ChannelExec)channel).setCommand(command);
    InputStream err=((ChannelExec)channel).getErrStream();
    InputStreamReader errStrRdr=new InputStreamReader(err,"UTF-8");
    Reader errStrBufRdr=new BufferedReader(errStrRdr);
    InputStream out=channel.getInputStream();
    InputStreamReader outStrRdr=new InputStreamReader(out,"UTF-8");
    Reader outStrBufRdr=new BufferedReader(outStrRdr);
    StringBuffer stdout=new StringBuffer();
    StringBuffer stderr=new StringBuffer();
    channel.connect(5000);
    while (true) {
      if (channel.isClosed()) {
        break;
      }
      int ch;
      while (outStrBufRdr.ready() && (ch=outStrBufRdr.read()) > -1) {
        stdout.append((char)ch);
      }
      while (errStrBufRdr.ready() && (ch=errStrBufRdr.read()) > -1) {
        stderr.append((char)ch);
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ie) {
      }
    }
    int ch;
    while ((ch=outStrBufRdr.read()) > -1) {
      stdout.append((char)ch);
    }
    while ((ch=errStrBufRdr.read()) > -1) {
      stderr.append((char)ch);
    }
    result.append(stdout.toString());
    result.append(stderr.toString());
    channel.disconnect();
    session.disconnect();
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return result.toString();
}
