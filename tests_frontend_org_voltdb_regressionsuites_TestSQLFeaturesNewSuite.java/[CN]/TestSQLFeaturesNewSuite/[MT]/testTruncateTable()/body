{
  System.out.println("STARTING TRUNCATE TABLE......");
  Client client=getClient();
  VoltTable vt=null;
  String[] procs={"RTABLE.insert","PTABLE.insert"};
  String[] tbs={"RTABLE","PTABLE"};
  int rowsToInsert=50000;
  final int rowsInsertionEachChunk=10000;
  for (int rowsInserted=0; rowsInserted < rowsToInsert; rowsInserted+=rowsInsertionEachChunk) {
    client.callProcedure("PopulateTruncateTable",rowsInserted + 1,rowsInsertionEachChunk);
  }
  for (  String tb : tbs) {
    vt=client.callProcedure("@AdHoc","select count(*) from " + tb).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{rowsToInsert});
  }
  if (isHSQL()) {
    return;
  }
  Exception e=null;
  try {
    client.callProcedure("TruncateTable");
  }
 catch (  ProcCallException ex) {
    System.out.println(ex.getMessage());
    e=ex;
    assertTrue(ex.getMessage().contains("CONSTRAINT VIOLATION"));
  }
 finally {
    assertNotNull(e);
  }
  for (  String tb : tbs) {
    vt=client.callProcedure("@AdHoc","select count(*) from " + tb).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{rowsToInsert});
    int nextId=rowsToInsert + 1;
    client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES ("+ nextId+ ", 30,  1.1, 'Jedi','Winchester');");
    vt=client.callProcedure("@AdHoc","select count(ID) from " + tb).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{nextId});
    vt=client.callProcedure("@AdHoc","Truncate table " + tb).getResults()[0];
    vt=client.callProcedure("@AdHoc","select count(*) from " + tb).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{0});
    client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES (7,  30,  1.1, 'Jedi','Winchester');");
    vt=client.callProcedure("@AdHoc","select ID from " + tb).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{7});
    vt=client.callProcedure("@AdHoc","Truncate table " + tb).getResults()[0];
  }
  loadTableForTruncateTest(client,procs);
  String nestedLoopIndexJoin="select count(*) from rtable r join ptable p on r.age = p.age";
  for (  String tb : tbs) {
    vt=client.callProcedure("@AdHoc","select count(*) from " + tb).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{6});
  }
  vt=client.callProcedure("@Explain",nestedLoopIndexJoin).getResults()[0];
  System.err.println(vt);
  assertTrue(vt.toString().contains("NESTLOOP INDEX INNER JOIN"));
  assertTrue(vt.toString().contains("inline INDEX SCAN of \"PTABLE (P)\""));
  assertTrue(vt.toString().contains("SEQUENTIAL SCAN of \"RTABLE (R)\""));
  vt=client.callProcedure("@AdHoc",nestedLoopIndexJoin).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{8});
  vt=client.callProcedure("@AdHoc","Truncate table ptable").getResults()[0];
  vt=client.callProcedure("@AdHoc","select count(*) from ptable").getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{0});
  vt=client.callProcedure("@AdHoc",nestedLoopIndexJoin).getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{0});
}
