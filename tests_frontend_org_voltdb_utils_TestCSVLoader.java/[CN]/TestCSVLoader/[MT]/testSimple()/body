{
  String simpleSchema="create table BLAH (" + "clm_integer integer default 0 not null, " + "clm_tinyint tinyint default 0, "+ "clm_smallint smallint default 0, "+ "clm_bigint bigint default 0, "+ "clm_string varchar(10) default null, "+ "clm_decimal decimal default null, "+ "); ";
  String pathToCatalog=Configuration.getPathToCatalogForTest("csv.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("csv.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(simpleSchema);
  builder.addPartitionInfo("BLAH","clm_integer");
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  ServerThread localServer=new ServerThread(config);
  Client client=null;
  try {
    localServer.start();
    localServer.waitForInitialization();
    String userHome=System.getProperty("user.home");
    String[] params={userHome + "/testdb.csv","--reportDir=" + userHome + "/invalidrows.csv","--tablename=BLAH","--abortfailurecount=50"};
    long lineCount=CSVLoader.main(params);
    client=ClientFactory.createClient();
    client.createConnection("localhost");
    VoltTable modCount;
    modCount=client.callProcedure("@AdHoc","SELECT * FROM BLAH;").getResults()[0];
    System.out.println("data inserted to table BLAH:\n" + modCount);
    modCount=client.callProcedure("@AdHoc","SELECT COUNT(*) FROM BLAH;").getResults()[0];
    int rowct=0;
    while (modCount.advanceRow()) {
      rowct=(Integer)modCount.get(0,VoltType.INTEGER);
    }
    System.out.println(String.format("The rows infected: (%d,%s)",lineCount,rowct));
    assertEquals(lineCount,rowct);
  }
  finally {
    if (client != null)     client.close();
    client=null;
    if (localServer != null) {
      localServer.shutdown();
      localServer.join();
    }
    localServer=null;
    System.gc();
  }
}
