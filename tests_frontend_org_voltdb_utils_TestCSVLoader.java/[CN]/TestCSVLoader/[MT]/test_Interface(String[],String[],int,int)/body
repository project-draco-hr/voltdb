{
  try {
    BufferedWriter out_csv=new BufferedWriter(new FileWriter(path_csv));
    for (    String aMy_data : my_data) {
      out_csv.write(aMy_data + "\n");
    }
    out_csv.flush();
    out_csv.close();
  }
 catch (  Exception e) {
    System.err.print(e.getMessage());
  }
  CSVLoader.testMode=true;
  CSVLoader.main(my_options);
  VoltTable modCount;
  modCount=client.callProcedure("@AdHoc","SELECT * FROM BLAH;").getResults()[0];
  System.out.println("data inserted to table BLAH:\n" + modCount);
  int rowct=modCount.getRowCount();
  VoltTable valTable;
  valTable=client.callProcedure("@ValidatePartitioning",null,null).getResults()[0];
  System.out.println("Validate for BLAH:\n" + valTable);
  while (valTable.advanceRow()) {
    long miscnt=valTable.getLong("MISPARTITIONED_ROWS");
    assertEquals(miscnt,0);
  }
  BufferedReader csvreport=new BufferedReader(new FileReader(CSVLoader.pathReportfile));
  int lineCount=0;
  String line;
  String promptMsg="Number of rows successfully inserted:";
  String promptFailMsg="Number of rows that could not be inserted:";
  int invalidlinecnt=0;
  while ((line=csvreport.readLine()) != null) {
    if (line.startsWith(promptMsg)) {
      String num=line.substring(promptMsg.length());
      lineCount=Integer.parseInt(num.replaceAll("\\s",""));
    }
    if (line.startsWith(promptFailMsg)) {
      String num=line.substring(promptFailMsg.length());
      invalidlinecnt=Integer.parseInt(num.replaceAll("\\s",""));
    }
  }
  System.out.println(String.format("The rows infected: (%d,%s)",lineCount,rowct));
  assertEquals(lineCount,rowct);
  assertEquals(validLineCnt,lineCount);
  assertEquals(invalidLineCnt,invalidlinecnt);
}
