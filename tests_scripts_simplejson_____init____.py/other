'\nA simple, fast, extensible JSON encoder and decoder\n\nJSON (JavaScript Object Notation) <http://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\nsimplejson exposes an API familiar to uses of the standard library\nmarshal and pickle modules.\n\nEncoding basic Python object hierarchies::\n\n    >>> import simplejson\n    >>> simplejson.dumps([\'foo\', {\'bar\': (\'baz\', None, 1.0, 2)}])\n    \'["foo", {"bar": ["baz", null, 1.0, 2]}]\'\n    >>> print simplejson.dumps("\\"foo\\bar")\n    "\\"foo\\bar"\n    >>> print simplejson.dumps(u\'\\u1234\')\n    "\\u1234"\n    >>> print simplejson.dumps(\'\\\\\')\n    "\\\\"\n    >>> print simplejson.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True)\n    {"a": 0, "b": 0, "c": 0}\n    >>> from StringIO import StringIO\n    >>> io = StringIO()\n    >>> simplejson.dump([\'streaming API\'], io)\n    >>> io.getvalue()\n    \'["streaming API"]\'\n\nCompact encoding::\n\n    >>> import simplejson\n    >>> simplejson.dumps([1,2,3,{\'4\': 5, \'6\': 7}], separators=(\',\',\':\'))\n    \'[1,2,3,{"4":5,"6":7}]\'\n\nPretty printing::\n\n    >>> import simplejson\n    >>> print simplejson.dumps({\'4\': 5, \'6\': 7}, sort_keys=True, indent=4)\n    {\n        "4": 5,\n        "6": 7\n    }\n\nDecoding JSON::\n\n    >>> import simplejson\n    >>> simplejson.loads(\'["foo", {"bar":["baz", null, 1.0, 2]}]\')\n    [u\'foo\', {u\'bar\': [u\'baz\', None, 1.0, 2]}]\n    >>> simplejson.loads(\'"\\\\"foo\\\\bar"\')\n    u\'"foo\\x08ar\'\n    >>> from StringIO import StringIO\n    >>> io = StringIO(\'["streaming API"]\')\n    >>> simplejson.load(io)\n    [u\'streaming API\']\n\nSpecializing JSON object decoding::\n\n    >>> import simplejson\n    >>> def as_complex(dct):\n    ...     if \'__complex__\' in dct:\n    ...         return complex(dct[\'real\'], dct[\'imag\'])\n    ...     return dct\n    ...\n    >>> simplejson.loads(\'{"__complex__": true, "real": 1, "imag": 2}\',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> import decimal\n    >>> simplejson.loads(\'1.1\', parse_float=decimal.Decimal)\n    Decimal("1.1")\n\nExtending JSONEncoder::\n\n    >>> import simplejson\n    >>> class ComplexEncoder(simplejson.JSONEncoder):\n    ...     def default(self, obj):\n    ...         if isinstance(obj, complex):\n    ...             return [obj.real, obj.imag]\n    ...         return simplejson.JSONEncoder.default(self, obj)\n    ...\n    >>> dumps(2 + 1j, cls=ComplexEncoder)\n    \'[2.0, 1.0]\'\n    >>> ComplexEncoder().encode(2 + 1j)\n    \'[2.0, 1.0]\'\n    >>> list(ComplexEncoder().iterencode(2 + 1j))\n    [\'[\', \'2.0\', \', \', \'1.0\', \']\']\n\n\nUsing simplejson from the shell to validate and\npretty-print::\n\n    $ echo \'{"json":"obj"}\' | python -msimplejson.tool\n    {\n        "json": "obj"\n    }\n    $ echo \'{ 1.2:3.4}\' | python -msimplejson.tool\n    Expecting property name: line 1 column 2 (char 2)\n\nNote that the JSON produced by this module\'s default settings\nis a subset of YAML, so it may be used as a serializer for that as well.\n'
__version__ = '1.9.2'
__all__ = ['dump', 'dumps', 'load', 'loads', 'JSONDecoder', 'JSONEncoder']
if (__name__ == '__main__'):
    import warnings
    warnings.warn('python -msimplejson is deprecated, use python -msiplejson.tool', DeprecationWarning)
    from simplejson.decoder import JSONDecoder
    from simplejson.encoder import JSONEncoder
else:
    from decoder import JSONDecoder
    from encoder import JSONEncoder
_default_encoder = JSONEncoder(skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, indent=None, separators=None, encoding='utf-8', default=None)
_default_decoder = JSONDecoder(encoding=None, object_hook=None)
if (__name__ == '__main__'):
    import simplejson.tool
    simplejson.tool.main()
