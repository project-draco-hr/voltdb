{
  TRACE_LOG.trace("Creating snapshot target and handing to EEs");
  final VoltTable result=constructNodeResultsTable();
  final int numLocalSites=VoltDB.instance().getLocalSites().values().size();
  if (m_snapshotCreateSetupPermit.tryAcquire()) {
    final ArrayList<SnapshotDataTarget> targets=new ArrayList<SnapshotDataTarget>();
    try {
      final ArrayDeque<SnapshotTableTask> partitionedSnapshotTasks=new ArrayDeque<SnapshotTableTask>();
      final ArrayList<SnapshotTableTask> replicatedSnapshotTasks=new ArrayList<SnapshotTableTask>();
      assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.get() == -1);
      final List<Table> tables=getTablesToSave(context.getDatabase());
      SnapshotUtil.recordSnapshotTableList(startTime,file_path,file_nonce,tables);
      final AtomicInteger numTables=new AtomicInteger(tables.size());
      final SnapshotRegistry.Snapshot snapshotRecord=SnapshotRegistry.startSnapshot(startTime,context.getExecutionSite().getCorrespondingHostId(),file_path,file_nonce,tables.toArray(new Table[0]));
      for (      final Table table : getTablesToSave(context.getDatabase())) {
        String canSnapshot="SUCCESS";
        String err_msg="";
        final File saveFilePath=constructFileForTable(table,file_path,file_nonce,context.getSite().getHost().getTypeName());
        SnapshotDataTarget sdt=null;
        try {
          sdt=constructSnapshotDataTargetForTable(context,saveFilePath,table,context.getSite().getHost(),context.getCluster().getPartitions().size(),startTime);
          targets.add(sdt);
          final SnapshotDataTarget sdtFinal=sdt;
          final Runnable onClose=new Runnable(){
            @Override public void run(){
              final long now=System.currentTimeMillis();
              snapshotRecord.updateTable(table.getTypeName(),new SnapshotRegistry.Snapshot.TableUpdater(){
                @Override public SnapshotRegistry.Snapshot.Table update(                SnapshotRegistry.Snapshot.Table registryTable){
                  return snapshotRecord.new Table(registryTable,sdtFinal.getBytesWritten(),now,sdtFinal.getLastWriteException());
                }
              }
);
              int tablesLeft=numTables.decrementAndGet();
              if (tablesLeft == 0) {
                final SnapshotRegistry.Snapshot completed=SnapshotRegistry.finishSnapshot(snapshotRecord);
                final double duration=(completed.timeFinished - completed.timeStarted) / 1000.0;
                HOST_LOG.info("Snapshot " + snapshotRecord.nonce + " finished at "+ completed.timeFinished+ " and took "+ duration+ " seconds ");
              }
            }
          }
;
          sdt.setOnCloseHandler(onClose);
          final SnapshotTableTask task=new SnapshotTableTask(table.getRelativeIndex(),sdt,table.getIsreplicated(),table.getTypeName());
          if (table.getIsreplicated()) {
            replicatedSnapshotTasks.add(task);
          }
 else {
            partitionedSnapshotTasks.offer(task);
          }
        }
 catch (        IOException ex) {
          try {
            if (sdt != null) {
              targets.remove(sdt);
              sdt.close();
            }
          }
 catch (          Exception e) {
            HOST_LOG.error(e);
          }
          StringWriter sw=new StringWriter();
          PrintWriter pw=new PrintWriter(sw);
          ex.printStackTrace(pw);
          pw.flush();
          canSnapshot="FAILURE";
          err_msg="SNAPSHOT INITIATION OF " + saveFilePath + "RESULTED IN IOException: \n"+ sw.toString();
        }
        result.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,table.getTypeName(),canSnapshot,err_msg);
      }
synchronized (m_taskListsForSites) {
        if (!partitionedSnapshotTasks.isEmpty() || !replicatedSnapshotTasks.isEmpty()) {
          SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.set(VoltDB.instance().getLocalSites().values().size());
          for (int ii=0; ii < numLocalSites; ii++) {
            m_taskListsForSites.add(new ArrayDeque<SnapshotTableTask>());
          }
        }
 else {
          SnapshotRegistry.discardSnapshot(snapshotRecord);
        }
        for (int ii=0; ii < numLocalSites && !partitionedSnapshotTasks.isEmpty(); ii++) {
          m_taskListsForSites.get(ii).addAll(partitionedSnapshotTasks);
        }
        int siteIndex=0;
        for (        SnapshotTableTask t : replicatedSnapshotTasks) {
          m_taskListsForSites.get(siteIndex++ % numLocalSites).offer(t);
        }
      }
    }
 catch (    Exception ex) {
      m_taskListsForSites.clear();
      for (      SnapshotDataTarget sdt : targets) {
        try {
          sdt.close();
        }
 catch (        Exception e) {
          HOST_LOG.error(ex);
        }
      }
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      ex.printStackTrace(pw);
      pw.flush();
      result.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,"","FAILURE","SNAPSHOT INITIATION OF " + file_path + file_nonce+ "RESULTED IN Exception: \n"+ sw.toString());
      HOST_LOG.error(ex);
    }
 finally {
      m_snapshotPermits.release(numLocalSites);
    }
  }
  try {
    m_snapshotPermits.acquire();
  }
 catch (  Exception e) {
    result.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,"","FAILURE",e.toString());
    return new DependencyPair(DEP_createSnapshotTargets,result);
  }
 finally {
synchronized (m_snapshotPermits) {
      if (m_snapshotPermits.availablePermits() == 0 && m_snapshotCreateSetupPermit.availablePermits() == 0) {
        m_snapshotCreateSetupPermit.release();
      }
    }
  }
synchronized (m_taskListsForSites) {
    final Deque<SnapshotTableTask> m_taskList=m_taskListsForSites.poll();
    if (m_taskList == null) {
      return new DependencyPair(DEP_createSnapshotTargets,result);
    }
 else {
      if (m_taskListsForSites.isEmpty()) {
        assert(m_snapshotCreateSetupPermit.availablePermits() == 1);
        assert(m_snapshotPermits.availablePermits() == 0);
      }
      assert(SnapshotSiteProcessor.ExecutionSitesCurrentlySnapshotting.get() > 0);
      context.getExecutionSite().initiateSnapshots(m_taskList);
    }
  }
  if (block != 0) {
    HashSet<Exception> failures=null;
    String status="SUCCESS";
    String err="";
    try {
      failures=context.getExecutionSite().completeSnapshotWork();
    }
 catch (    InterruptedException e) {
      status="FAILURE";
      err=e.toString();
    }
    final VoltTable blockingResult=constructPartitionResultsTable();
    if (failures.isEmpty()) {
      blockingResult.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,Integer.parseInt(context.getSite().getTypeName()),status,err);
    }
 else {
      status="FAILURE";
      for (      Exception e : failures) {
        err=e.toString();
      }
      blockingResult.addRow(Integer.parseInt(context.getSite().getHost().getTypeName()),hostname,Integer.parseInt(context.getSite().getTypeName()),status,err);
    }
    return new DependencyPair(DEP_createSnapshotTargets,blockingResult);
  }
  return new DependencyPair(DEP_createSnapshotTargets,result);
}
