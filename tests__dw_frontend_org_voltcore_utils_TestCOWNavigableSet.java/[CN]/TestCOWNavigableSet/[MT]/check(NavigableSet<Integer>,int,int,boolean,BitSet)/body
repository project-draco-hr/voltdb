{
class ReferenceSet {
    int lower(    int element){
      return ascending ? lowerAscending(element) : higherAscending(element);
    }
    int floor(    int element){
      return ascending ? floorAscending(element) : ceilingAscending(element);
    }
    int ceiling(    int element){
      return ascending ? ceilingAscending(element) : floorAscending(element);
    }
    int higher(    int element){
      return ascending ? higherAscending(element) : lowerAscending(element);
    }
    int first(){
      return ascending ? firstAscending() : lastAscending();
    }
    int last(){
      return ascending ? lastAscending() : firstAscending();
    }
    int lowerAscending(    int element){
      return floorAscending(element - 1);
    }
    int floorAscending(    int element){
      if (element < min)       return -1;
 else       if (element > max)       element=max;
      while (element >= min) {
        if (bs.get(element))         return element;
        element--;
      }
      return -1;
    }
    int ceilingAscending(    int element){
      if (element < min)       element=min;
 else       if (element > max)       return -1;
      int result=bs.nextSetBit(element);
      return result > max ? -1 : result;
    }
    int higherAscending(    int element){
      return ceilingAscending(element + 1);
    }
    private int firstAscending(){
      int result=ceilingAscending(min);
      return result > max ? -1 : result;
    }
    private int lastAscending(){
      int result=floorAscending(max);
      return result < min ? -1 : result;
    }
  }
  ReferenceSet rs=new ReferenceSet();
  int size=0;
  for (int i=min; i <= max; i++) {
    boolean bsContainsI=bs.get(i);
    assertEquals(bsContainsI,set.contains(i));
    if (bsContainsI)     size++;
  }
  assertEquals(size,set.size());
  int size2=0;
  int previousElement=-1;
  for (  int element : set) {
    assertTrue(bs.get(element));
    size2++;
    assertTrue(previousElement < 0 || (ascending ? element - previousElement > 0 : element - previousElement < 0));
    previousElement=element;
  }
  assertEquals(size2,size);
  for (int element=min - 1; element <= max + 1; element++) {
    assertEq(set.lower(element),rs.lower(element));
    assertEq(set.floor(element),rs.floor(element));
    assertEq(set.higher(element),rs.higher(element));
    assertEq(set.ceiling(element),rs.ceiling(element));
  }
  if (set.size() != 0) {
    assertEq(set.first(),rs.first());
    assertEq(set.last(),rs.last());
  }
 else {
    assertEq(rs.first(),-1);
    assertEq(rs.last(),-1);
    try {
      set.first();
      shouldThrow();
    }
 catch (    NoSuchElementException success) {
    }
    try {
      set.last();
      shouldThrow();
    }
 catch (    NoSuchElementException success) {
    }
  }
}
