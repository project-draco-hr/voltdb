{
  int n, delta, h, b, out, max_out, bias, j, m, q, k, t;
  int input_length=input.length;
  n=initial_n;
  delta=0;
  out=0;
  max_out=output_length.len;
  bias=initial_bias;
  for (j=0; j < input_length; ++j) {
    if (basic(input[j])) {
      if (max_out - out < 2)       return punycode_big_output;
      output[out++]=case_flags != null ? encode_basic(input[j],case_flags[j]) : (char)input[j];
    }
  }
  h=b=out;
  if (b > 0)   output[out++]=delimiter;
  while (h < input_length) {
    for (m=maxint, j=0; j < input_length; ++j) {
      if (input[j] >= n && input[j] < m)       m=input[j];
    }
    if (m - n > (maxint - delta) / (h + 1))     return punycode_overflow;
    delta+=(m - n) * (h + 1);
    n=m;
    for (j=0; j < input_length; ++j) {
      if (input[j] < n) {
        if (++delta == 0)         return punycode_overflow;
      }
      if (input[j] == n) {
        for (q=delta, k=base; ; k+=base) {
          if (out >= max_out)           return punycode_big_output;
          t=k <= bias ? tmin : k >= bias + tmax ? tmax : k - bias;
          if (q < t)           break;
          output[out++]=encode_digit(t + (q - t) % (base - t),false);
          q=(q - t) / (base - t);
        }
        output[out++]=encode_digit(q,case_flags != null && case_flags[j]);
        bias=adapt(delta,h + 1,h == b);
        delta=0;
        ++h;
      }
    }
    ++delta;
    ++n;
  }
  output_length.len=out;
  return punycode_success;
}
