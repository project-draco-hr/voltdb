{
  int n, out, i, max_out, bias, b, j, in, oldi, w, k, digit, t;
  int input_length=input.length;
  n=initial_n;
  out=i=0;
  max_out=output_length.len;
  bias=initial_bias;
  for (b=j=0; j < input_length; ++j)   if (delim(input[j]))   b=j;
  if (b > max_out)   return punycode_big_output;
  for (j=0; j < b; ++j) {
    if (case_flags != null)     case_flags[out]=flagged(input[j]);
    if (!basic(input[j]))     return punycode_bad_input;
    output[out++]=input[j];
  }
  for (in=b > 0 ? b + 1 : 0; in < input_length; ++out) {
    for (oldi=i, w=1, k=base; ; k+=base) {
      if (in >= input_length)       return punycode_bad_input;
      digit=decode_digit(input[in++]);
      if (digit >= base)       return punycode_bad_input;
      if (digit > (maxint - i) / w)       return punycode_overflow;
      i+=digit * w;
      t=(k <= bias ? tmin : (k >= bias + tmax ? tmax : k - bias));
      if (digit < t)       break;
      if (w > maxint / (base - t))       return punycode_overflow;
      w*=(base - t);
    }
    bias=adapt(i - oldi,out + 1,oldi == 0);
    if (i / (out + 1) > maxint - n)     return punycode_overflow;
    n+=i / (out + 1);
    i%=(out + 1);
    if (out >= max_out)     return punycode_big_output;
    if (case_flags != null) {
      System.arraycopy(case_flags,i,case_flags,i + 1,out - i);
      case_flags[i]=flagged(input[in - 1]);
    }
    System.arraycopy(output,i,output,i + 1,(out - i) * 4);
    output[i++]=n;
  }
  output_length.len=out;
  return punycode_success;
}
