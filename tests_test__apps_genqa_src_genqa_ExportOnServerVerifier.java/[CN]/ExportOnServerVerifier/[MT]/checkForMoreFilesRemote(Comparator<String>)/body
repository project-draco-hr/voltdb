{
  int onDoneRetries=6;
  long start_time=System.currentTimeMillis();
  while (m_exportFiles.isEmpty()) {
    int activeFound=0;
    List<Pair<ChannelSftp,List<String>>> pathsFromAllNodes=new ArrayList<Pair<ChannelSftp,List<String>>>();
    for (    RemoteHost rh : m_hosts) {
      Vector<LsEntry> files=rh.channel.ls(rh.path);
      List<String> paths=new ArrayList<String>();
      int trackerModifyTime=rh.channel.stat(rh.path + "/" + TRACKER_FILENAME).getMTime();
      boolean activeInRemote=false;
      for (      LsEntry entry : files) {
        activeInRemote=activeInRemote || entry.getFilename().startsWith("active");
        if (!entry.getFilename().equals(".") && !entry.getFilename().equals("..") && !entry.getAttrs().isDir()) {
          final String entryFileName=rh.path + "/" + entry.getFilename();
          if (!entry.getFilename().contains("active")) {
            Matcher mtc=EXPORT_FILENAME_REGEXP.matcher(entry.getFilename());
            if (mtc.matches()) {
              paths.add(entryFileName);
            }
 else {
              System.err.println("ERROR: " + entryFileName + " does not match expected export file name pattern");
            }
          }
 else           if (entry.getFilename().startsWith("active-")) {
            int activeModifyTime=entry.getAttrs().getMTime();
            if ((trackerModifyTime - activeModifyTime) > 120) {
              final String renamed=rh.path + "/" + entry.getFilename().substring("active-".length());
              rh.channel.rename(entryFileName,renamed);
              paths.add(renamed);
            }
          }
        }
      }
      touchActiveTracker(rh);
      rh.activeSeen=rh.activeSeen || activeInRemote;
      if (activeInRemote)       activeFound++;
      Collections.sort(paths,comparator);
      if (!paths.isEmpty())       pathsFromAllNodes.add(Pair.of(rh.channel,paths));
    }
    if (pathsFromAllNodes.isEmpty() && activeFound == 0 && allActiveSeen()) {
      if (--onDoneRetries <= 0)       return;
      Thread.sleep(5000);
    }
    TreeMap<String,Pair<ChannelSftp,String>> hadPaths=new TreeMap<String,Pair<ChannelSftp,String>>(comparator);
    for (    Pair<ChannelSftp,List<String>> p : pathsFromAllNodes) {
      final ChannelSftp c=p.getFirst();
      for (      String path : p.getSecond()) {
        hadPaths.put(path,Pair.of(c,path));
      }
    }
    boolean hadOne=!hadPaths.isEmpty();
    Iterator<Map.Entry<String,Pair<ChannelSftp,String>>> itr=hadPaths.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry<String,Pair<ChannelSftp,String>> entry=itr.next();
      m_exportFiles.offer(entry.getValue());
      itr.remove();
    }
    long now=System.currentTimeMillis();
    if ((now - start_time) > FILE_TIMEOUT_MS) {
      throw new ValidationErr("Timed out waiting on new files.\n" + "This indicates a mismatch in the transaction streams between the client logs and the export data or the death of something important.",null,null);
    }
 else     if (!hadOne) {
      Thread.sleep(1200);
    }
  }
}
