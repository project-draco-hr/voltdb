{
  int col=5;
  Long txnid=Long.parseLong(row[++col]);
  Long rowid=Long.parseLong(row[++col]);
  if (row.length < 29)   error("invalid number of columns in the row",row.length,29);
  Random prng=new Random(txnid);
  SampleRecord valid=new SampleRecord(rowid,prng);
  Byte rowid_group=Byte.parseByte(row[++col]);
  if (rowid_group != valid.rowid_group)   error("rowid_group invalid",rowid_group,valid.rowid_group);
  Byte type_null_tinyint=row[++col].equals("NULL") ? null : Byte.valueOf(row[col]);
  if ((!(type_null_tinyint == null && valid.type_null_tinyint == null)) && (!type_null_tinyint.equals(valid.type_null_tinyint)))   error("type_not_null_tinyint",type_null_tinyint,valid.type_null_tinyint);
  Byte type_not_null_tinyint=Byte.valueOf(row[++col]);
  if (!type_not_null_tinyint.equals(valid.type_not_null_tinyint))   error("type_not_null_tinyint",type_not_null_tinyint,valid.type_not_null_tinyint);
  Short type_null_smallint=row[++col].equals("NULL") ? null : Short.valueOf(row[col]);
  if ((!(type_null_smallint == null && valid.type_null_smallint == null)) && (!type_null_smallint.equals(valid.type_null_smallint)))   error("type_null_smallint",type_null_smallint,valid.type_null_smallint);
  Short type_not_null_smallint=Short.valueOf(row[++col]);
  if (!type_not_null_smallint.equals(valid.type_not_null_smallint))   error("type_null_smallint",type_not_null_smallint,valid.type_not_null_smallint);
  Integer type_null_integer=row[++col].equals("NULL") ? null : Integer.valueOf(row[col]);
  if ((!(type_null_integer == null && valid.type_null_integer == null)) && (!type_null_integer.equals(valid.type_null_integer)))   error("type_null_integer",type_null_integer,valid.type_null_integer);
  Integer type_not_null_integer=Integer.valueOf(row[++col]);
  if (!type_not_null_integer.equals(valid.type_not_null_integer))   error("type_not_null_integer",type_not_null_integer,valid.type_not_null_integer);
  Long type_null_bigint=row[++col].equals("NULL") ? null : Long.valueOf(row[col]);
  if ((!(type_null_bigint == null && valid.type_null_bigint == null)) && (!type_null_bigint.equals(valid.type_null_bigint)))   error("type_null_bigint",type_null_bigint,valid.type_null_bigint);
  Long type_not_null_bigint=Long.valueOf(row[++col]);
  if (!type_not_null_bigint.equals(valid.type_not_null_bigint))   error("type_not_null_bigint",type_not_null_bigint,valid.type_not_null_bigint);
  TimestampType type_null_timestamp;
  if (row[++col].equals("NULL")) {
    type_null_timestamp=null;
  }
 else {
    TimestampType tmp=new TimestampType(row[col]);
    type_null_timestamp=new TimestampType(tmp.asApproximateJavaDate());
  }
  if ((!(type_null_timestamp == null && valid.type_null_timestamp == null)) && (!type_null_timestamp.equals(valid.type_null_timestamp))) {
    System.out.println("CSV value: " + row[col]);
    System.out.println("EXP value: " + valid.type_null_timestamp.toString());
    System.out.println("ACT value: " + type_null_timestamp.toString());
    error("type_null_timestamp",type_null_timestamp,valid.type_null_timestamp);
  }
  TimestampType type_not_null_timestamp=new TimestampType(row[++col]);
  if (!type_not_null_timestamp.equals(valid.type_not_null_timestamp))   error("type_null_timestamp",type_not_null_timestamp,valid.type_not_null_timestamp);
  BigDecimal type_null_decimal=row[++col].equals("NULL") ? null : new BigDecimal(row[col]);
  if ((!(type_null_decimal == null && valid.type_null_decimal == null)) && (!type_null_decimal.equals(valid.type_null_decimal)))   error("type_null_decimal",type_null_decimal,valid.type_null_decimal);
  BigDecimal type_not_null_decimal=new BigDecimal(row[++col]);
  if (!type_not_null_decimal.equals(valid.type_not_null_decimal))   error("type_not_null_decimal",type_not_null_decimal,valid.type_not_null_decimal);
  Double type_null_float=row[++col].equals("NULL") ? null : Double.valueOf(row[col]);
  if ((!(type_null_float == null && valid.type_null_float == null)) && (!type_null_float.equals(valid.type_null_float))) {
    System.out.println("CSV value: " + row[col]);
    System.out.println("EXP value: " + valid.type_null_float);
    System.out.println("ACT value: " + type_null_float);
    System.out.println("valueOf():" + Double.valueOf("-2155882919525625344.000000000000"));
    System.out.flush();
    error("type_null_float",type_null_float,valid.type_null_float);
  }
  Double type_not_null_float=Double.valueOf(row[++col]);
  if (!type_not_null_float.equals(valid.type_not_null_float))   error("type_not_null_float",type_not_null_float,valid.type_not_null_float);
  String type_null_varchar25=row[++col].equals("NULL") ? null : row[col];
  if (!(type_null_varchar25 == valid.type_null_varchar25 || type_null_varchar25.equals(valid.type_null_varchar25)))   error("type_null_varchar25",type_null_varchar25,valid.type_null_varchar25);
  String type_not_null_varchar25=row[++col];
  if (!type_not_null_varchar25.equals(valid.type_not_null_varchar25))   error("type_not_null_varchar25",type_not_null_varchar25,valid.type_not_null_varchar25);
  String type_null_varchar128=row[++col].equals("NULL") ? null : row[col];
  if (!(type_null_varchar128 == valid.type_null_varchar128 || type_null_varchar128.equals(valid.type_null_varchar128)))   error("type_null_varchar128",type_null_varchar128,valid.type_null_varchar128);
  String type_not_null_varchar128=row[++col];
  if (!type_not_null_varchar128.equals(valid.type_not_null_varchar128))   error("type_not_null_varchar128",type_not_null_varchar128,valid.type_not_null_varchar128);
  String type_null_varchar1024=row[++col].equals("NULL") ? null : row[col];
  if (!(type_null_varchar1024 == valid.type_null_varchar1024 || type_null_varchar1024.equals(valid.type_null_varchar1024)))   error("type_null_varchar1024",type_null_varchar1024,valid.type_null_varchar1024);
  String type_not_null_varchar1024=row[++col];
  if (!type_not_null_varchar1024.equals(valid.type_not_null_varchar1024))   error("type_not_null_varchar1024",type_not_null_varchar1024,valid.type_not_null_varchar1024);
}
