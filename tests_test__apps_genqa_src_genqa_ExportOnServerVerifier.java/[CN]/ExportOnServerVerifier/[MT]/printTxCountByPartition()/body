{
  StringBuilder sb=new StringBuilder(512).append("partition TxCounts: ");
  int cnt=0;
  for (  Map<Long,Long> part : m_rowTxnIds.values()) {
    if (cnt++ > 0)     sb.append(", ");
    sb.append(part.size());
  }
  System.out.println("\n==================================================================");
  System.out.println(sb.toString());
  System.out.println("client tx id list size is " + m_clientTxnIds.size());
  int[] txByPart=new int[m_partitions];
  Arrays.fill(txByPart,0);
  int[] staleByPart=new int[m_partitions];
  Arrays.fill(staleByPart,0);
  for (  Long tx : m_clientTxnIds.keySet()) {
    int partid=TxnEgo.getPartitionId(tx);
    ++txByPart[partid];
    if (tx < m_maxPartTxId.get(partid))     ++staleByPart[partid];
  }
  sb.delete(0,sb.length()).append(" -- ");
  for (int i=0; i < m_partitions; ++i) {
    if (i > 0)     sb.append(", ");
    sb.append(txByPart[i]).append("[").append(staleByPart[i]).append("]");
  }
  System.out.println(sb.toString());
  System.out.println("overflow txid id list size is " + m_clientOverFlow.size());
  Arrays.fill(txByPart,0);
  Arrays.fill(staleByPart,0);
  for (  Long tx : m_clientOverFlow) {
    int partid=TxnEgo.getPartitionId(tx);
    ++txByPart[partid];
    if (tx < m_maxPartTxId.get(partid))     ++staleByPart[partid];
  }
  sb.delete(0,sb.length()).append(" -- ");
  for (int i=0; i < m_partitions; ++i) {
    if (i > 0)     sb.append(", ");
    sb.append(txByPart[i]).append("[").append(staleByPart[i]).append("]");
  }
  System.out.println(sb.toString());
  System.out.println("orphaned client row id list size is " + m_clientTxnIdOrphans.size());
  System.out.println("stale client txid id list size is " + m_staleTxnIds.size());
  System.out.println("==================================================================\n");
}
