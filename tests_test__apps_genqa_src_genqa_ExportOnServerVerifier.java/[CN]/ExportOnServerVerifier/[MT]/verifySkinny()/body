{
  long ttlVerified=0;
  Pair<BufferedReader,Runnable> csvPair=openNextExportFile();
  BufferedReader csv=csvPair.getFirst();
  String row;
  long[] rowValues=new long[8];
  boolean quit=false;
  boolean more_rows=true;
  boolean more_txnids=true;
  boolean expect_export_eof=false;
  int emptyRemovalCycles=0;
  try (PrintWriter txout=gzipWriterTo("read-exported-transactions.gz");PrintWriter vfout=gzipWriterTo("verified-exported-transactions.gz")){
    while (!quit) {
      markCheckedUpTo();
      int dcount=0;
      while ((dcount < 50000 || !more_txnids) && more_rows) {
        row=csv.readLine();
        if (row == null) {
          expect_export_eof=false;
          csvPair.getSecond().run();
          csvPair=openNextExportFile();
          if (csvPair == null) {
            System.out.println("No more export rows");
            more_rows=false;
            break;
          }
 else {
            csv=csvPair.getFirst();
            row=csv.readLine();
          }
        }
 else         if (expect_export_eof) {
          throw new ValidationErr("previously logged row had unexpected number of columns");
        }
        int columnCount=splitCSV(row,rowValues);
        expect_export_eof=columnCount < rowValues.length;
        dcount++;
        if (expect_export_eof) {
          System.err.println("ERROR: Unexpected number of columns for the following row:\n\t" + row);
          continue;
        }
        if (++ttlVerified % VALIDATION_REPORT_INTERVAL == 0) {
          System.out.println("Verified " + ttlVerified + " rows.");
        }
        int partition=Integer.MAX_VALUE;
        if (rowValues[3] < Integer.MAX_VALUE) {
          partition=(int)rowValues[3];
        }
        long rowTxnId=rowValues[6];
        long rowId=rowValues[7];
        if (TxnEgo.getPartitionId(rowTxnId) != partition) {
          System.err.println("ERROR: mismatched exported partition for txid " + rowTxnId + ", tx says it belongs to "+ TxnEgo.getPartitionId(rowTxnId)+ ", while export record says "+ partition);
        }
        txout.printf("%d:%d\n",rowTxnId,rowId);
        if (!m_rowTxnIds.containsKey(partition)) {
          System.err.println("ERROR: unknow partition " + partition + " in txnid "+ rowTxnId);
          continue;
        }
        Long previous=m_rowTxnIds.get(partition).put(rowTxnId,rowId);
        if (previous != null) {
          System.out.println("WARN Duplicate TXN ID in export stream: " + rowTxnId);
        }
 else {
        }
      }
      System.out.println("\n!_!_! DEBUG !_!_! read " + dcount + " exported records");
      determineReadUpToCounters();
      dcount=m_clientOverFlow.size();
      processClientIdOverFlow();
      System.out.println("!_!_! DEBUG !_!_! processed " + (dcount - m_clientOverFlow.size()) + " client overflow txid records");
      System.out.println("!_!_! DEBUG !_!_! overflow size is now " + m_clientOverFlow.size());
      more_txnids=readEnoughClientRecords();
      if (!more_txnids) {
        System.out.println("No more client txn IDs");
      }
      if (matchClientTxnIds(vfout)) {
        emptyRemovalCycles=0;
      }
 else       if (++emptyRemovalCycles >= 10) {
        System.err.println("ERROR: 10 check cycles failed to match client tx ids with exported tx id -- bailing out");
        System.exit(1);
      }
      printTxCountByPartition();
      if (!more_rows || !more_txnids) {
        if (more_rows && !m_clientTxnIds.isEmpty()) {
          quit=false;
        }
 else {
          quit=true;
        }
      }
    }
  }
 }
