{
  if (data.getRowCount() == 0)   return;
  byte cid=(byte)data.fetchRow(0).getLong("cid");
  data.resetRowPosition();
  long prevCnt=0;
  long entries=0;
  long max=0;
  long min=Long.MAX_VALUE;
  long sum=0;
  while (data.advanceRow()) {
    byte desc=(byte)data.getLong("desc");
    if (desc != cid) {
      throw new VoltAbortException(callerId + " desc value " + desc+ " not equal to cid value "+ cid);
    }
    long cntValue=data.getLong("cnt");
    if ((prevCnt > 0) && ((prevCnt - 1) != cntValue)) {
      throw new VoltAbortException(callerId + " cnt values are not consecutive" + " for cid "+ cid+ ". Got "+ cntValue+ ", prev was: "+ prevCnt);
    }
    if (view != null) {
      entries+=1;
      max=Math.max(max,cntValue);
      min=Math.min(min,cntValue);
      sum+=cntValue;
    }
    prevCnt=cntValue;
  }
  if (view != null) {
    if (view.getRowCount() != 1)     throw new VoltAbortException("View has multiple entries of the same cid, that should not happen.");
    VoltTableRow row0=view.fetchRow(0);
    long v_entries=row0.getLong("entries");
    long v_max=row0.getLong("maximum");
    long v_min=row0.getLong("minimum");
    long v_sum=row0.getLong("summation");
    if (v_entries != entries)     throw new VoltAbortException("The count(*):" + v_entries + " materialized view aggregation does not match the number of cnt entries:"+ entries+ " for cid:"+ cid);
    if (v_max != max)     throw new VoltAbortException("The max(cnt):" + v_max + " materialized view aggregation does not match the max:"+ max+ " for cid:"+ cid);
    if (v_min != min)     throw new VoltAbortException("The min(cnt):" + v_min + " materialized view aggregation does not match the min:"+ min+ " for cid:"+ cid);
    if (v_sum != sum)     throw new VoltAbortException("The sum(cnt):" + v_sum + " materialized view aggregation does not match the sum:"+ sum+ " for cid:"+ cid);
  }
}
