{
  m_properties=(Properties)p.clone();
  m_procedure=m_properties.getProperty("procedure","").trim();
  if (m_procedure.isEmpty()) {
    throw new RuntimeException("Missing procedure.");
  }
  String topics=m_properties.getProperty("topics","").trim();
  if (topics.isEmpty()) {
    throw new RuntimeException("Missing topic(s).");
  }
  m_topicList=Arrays.asList(topics.split("\\s*,\\s*"));
  if (m_topicList == null || m_topicList.isEmpty()) {
    throw new RuntimeException("Missing topic(s).");
  }
  for (  String topic : m_topicList) {
    if (topic.contains("..") || topic.contains(".")) {
      throw new RuntimeException("topic name cannot be \".\" or \"..\"");
    }
    if (topic.length() > topicMaxNameLength) {
      throw new RuntimeException("topic name is illegal, can't be longer than " + topicMaxNameLength + " characters");
    }
    if (!legalTopicNamesPattern.matcher(topic).matches()) {
      throw new RuntimeException("topic name " + topic + " is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'");
    }
  }
  String brokers=m_properties.getProperty("brokers","").trim();
  if (brokers.isEmpty()) {
    throw new RuntimeException("Missing kafka broker");
  }
  List<String> brokerList=Arrays.asList(brokers.split("\\s*,\\s*"));
  if (brokerList == null || brokerList.isEmpty()) {
    throw new RuntimeException("Missing kafka broker");
  }
  for (  String broker : brokerList) {
    HostAndPort hap=HostAndPort.fromString(broker);
    m_brokerList.add(hap);
  }
  if (m_brokerList.isEmpty()) {
    throw new RuntimeException("Missing or misconfigured kafka broker list. See brokers property");
  }
  m_groupId=m_properties.getProperty("groupid",GROUP_ID).trim();
  m_fetchSize=Integer.parseInt(m_properties.getProperty("fetch.message.max.bytes","65536"));
  m_consumerSocketTimeout=Integer.parseInt(m_properties.getProperty("socket.timeout.ms","30000"));
}
