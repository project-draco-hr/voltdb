{
  String brokers=p.getProperty("brokers","").trim();
  if (brokers.isEmpty()) {
    throw new RuntimeException("Missing kafka broker");
  }
  List<String> brokerList=Arrays.asList(brokers.split("\\s*,\\s*"));
  if (brokerList == null || brokerList.isEmpty()) {
    throw new RuntimeException("Missing kafka broker");
  }
  List<HostAndPort> haplist=new ArrayList<HostAndPort>();
  for (  String broker : brokerList) {
    HostAndPort hap=HostAndPort.fromString(broker);
    haplist.add(hap);
  }
  if (haplist.isEmpty()) {
    throw new RuntimeException("Missing or misconfigured kafka broker list. See brokers property");
  }
  String key=getBrokerKey(brokers);
  if (m_brokerList.containsKey(key)) {
    List<HostAndPort> l=m_brokerList.get(key);
    l.addAll(haplist);
  }
 else {
    m_brokerList.put(key,haplist);
  }
  m_brokerKeys.add(key);
  String procedure=p.getProperty("procedure","").trim();
  if (procedure.isEmpty()) {
    throw new RuntimeException("Missing procedure.");
  }
  Map<String,String> topicProc=m_brokerProcedure.get(key);
  if (topicProc == null) {
    topicProc=new HashMap<String,String>();
    m_brokerProcedure.put(key,topicProc);
  }
  String transformer=p.getProperty("transformer",CSV_TRANSFORMER_NAME).trim().toLowerCase();
  if (!CSV_TRANSFORMER_NAME.equals(transformer) && !TSV_TRANSFORMER_NAME.equals(transformer)) {
    throw new RuntimeException("Invalid transformer: " + transformer);
  }
  m_brokerTransformer.put(key,transformer);
  String topics=p.getProperty("topics","").trim();
  if (topics.isEmpty()) {
    throw new RuntimeException("Missing topic(s).");
  }
  List<String> ttopicList=Arrays.asList(topics.split("\\s*,\\s*"));
  if (ttopicList == null || ttopicList.isEmpty()) {
    throw new RuntimeException("Missing topic(s).");
  }
  List<String> topicList=new ArrayList<String>();
  for (  String topic : ttopicList) {
    if (topic.contains("..") || topic.contains(".")) {
      throw new RuntimeException("topic name cannot be \".\" or \"..\"");
    }
    if (topic.length() > topicMaxNameLength) {
      throw new RuntimeException("topic name is illegal, can't be longer than " + topicMaxNameLength + " characters");
    }
    if (!legalTopicNamesPattern.matcher(topic).matches()) {
      throw new RuntimeException("topic name " + topic + " is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'");
    }
    topicList.add(topic);
    topicProc.put(topic,procedure);
  }
  if (m_brokerTopicList.containsKey(key)) {
    List<String> l=m_brokerTopicList.get(key);
    l.addAll(topicList);
  }
 else {
    m_brokerTopicList.put(key,topicList);
  }
  m_brokerGroupId.put(key,p.getProperty("groupid",GROUP_ID).trim());
  m_brokerFetchSize.put(key,Integer.parseInt(p.getProperty("fetch.message.max.bytes","65536")));
  m_brokerSOTimeout.put(key,Integer.parseInt(p.getProperty("socket.timeout.ms","30000")));
  m_backpressureSleepMs=Integer.parseInt(p.getProperty("backpressure.sleep.ms","1"));
}
