{
  final int correlationId=m_topicAndPartition.partition();
  final short version=1;
  final long safe=m_gapTracker.commit(-1L);
  if (safe > m_lastCommittedOffset) {
    OffsetCommitRequest offsetCommitRequest=new OffsetCommitRequest(m_groupId,singletonMap(m_topicAndPartition,new OffsetAndMetadata(safe,"commit",ErrorMapping.NoError())),correlationId,CLIENT_ID,version);
    OffsetCommitResponse offsetCommitResponse=null;
    try {
      SimpleConsumer consumer=m_offsetManager.get();
      if (consumer == null) {
        getOffsetCoordinator();
        consumer=m_offsetManager.get();
      }
      if (consumer != null) {
        offsetCommitResponse=consumer.commitOffsets(offsetCommitRequest);
        final short code=((Short)offsetCommitResponse.errors().get(m_topicAndPartition));
        if (code == ErrorMapping.NotCoordinatorForConsumerCode()) {
          info("Not coordinator for committing offset for " + m_topicAndPartition + " Updating coordinator.");
          getOffsetCoordinator();
          consumer=m_offsetManager.get();
          if (consumer != null) {
            offsetCommitResponse=consumer.commitOffsets(offsetCommitRequest);
          }
        }
      }
 else {
        error("Commit Offset Failed to get offset coordinator for " + m_topicAndPartition);
        return false;
      }
    }
 catch (    Exception e) {
      error(e,"Failed to commit Offset for " + m_topicAndPartition);
      return false;
    }
    final short code=((Short)offsetCommitResponse.errors().get(m_topicAndPartition));
    if (code != ErrorMapping.NoError()) {
      final String msg="Commit Offset Failed to commit for " + m_topicAndPartition;
      error(ErrorMapping.exceptionFor(code),msg);
      return false;
    }
    m_lastCommittedOffset=safe;
  }
  return true;
}
