{
  if (args.length != 11) {
    System.err.println("ClientVoter [number of contestants] [votes per phone number] " + "[transactions per second] [client feedback interval (seconds)] " + "[test duration (seconds)] [lag record delay (seconds)] [server list (comma separated)] [auto-tuning] [target latency ms] [adjustment rate] [adjustment interval]");
    System.exit(1);
  }
  int maxContestant=Integer.valueOf(args[0]);
  if ((maxContestant < 1) || (maxContestant > 12)) {
    System.err.println("Number of contestants must be between 1 and 12");
    System.exit(1);
  }
  long maxVotesPerPhoneNumber=Long.valueOf(args[1]);
  long transactions_per_second_requested=Long.valueOf(args[2]);
  long transactions_per_second=transactions_per_second_requested;
  long transactions_per_milli=transactions_per_second / 1000l;
  long client_feedback_interval_secs=Long.valueOf(args[3]);
  long test_duration_secs=Long.valueOf(args[4]);
  long lag_latency_seconds=Long.valueOf(args[5]);
  String serverList=args[6];
  long lag_latency_millis=lag_latency_seconds * 1000l;
  long thisOutstanding=0;
  long lastOutstanding=0;
  boolean use_auto_tuning=Boolean.valueOf(args[7]) && (transactions_per_second > 1000);
  double auto_tuning_target_latency_millis=Double.valueOf(args[8]);
  double auto_tuning_adjustment_rate=Double.valueOf(args[9]);
  if (auto_tuning_adjustment_rate > 1.0) {
    auto_tuning_adjustment_rate=auto_tuning_adjustment_rate / 100.0;
  }
  long auto_tuning_interval_secs=Long.valueOf(args[10]);
  String contestantNameList="Edwina Burnam,Tabatha Gehling,Kelly Clauss,Jessie Alloway,Alana Bregman,Jessie Eichman,Allie Rogalski,Nita Coster,Kurt Walser,Ericka Dieter,Loraine NygrenTania Mattioli";
  String[] contestantNames=contestantNameList.split(",");
  System.out.printf("Allowing %d votes per phone number\n",maxVotesPerPhoneNumber);
  System.out.printf("Submitting %,d Transactions/sec (TPS)\n",transactions_per_second);
  System.out.printf("Feedback interval = %,d second(s)\n",client_feedback_interval_secs);
  System.out.printf("Running for %,d second(s)\n",test_duration_secs);
  System.out.printf("Latency not recorded for %d second(s)\n",lag_latency_seconds);
  if (use_auto_tuning) {
    System.out.println("Auto-Tuning = ON");
    System.out.printf(" - Tuning interval = %,d second(s)\n",auto_tuning_interval_secs);
    System.out.printf(" - Target latency = %.2f ms\n",auto_tuning_target_latency_millis);
    System.out.printf(" - Adjustment rate = %.2f%%\n",auto_tuning_adjustment_rate * 100.0);
  }
  long phoneNumber;
  byte contestantNumber;
  long transactions_this_second=0;
  long last_millisecond=System.currentTimeMillis();
  long this_millisecond=System.currentTimeMillis();
  ClientConfig config=new ClientConfig("program","none");
  config.setMaxOutstandingTxns(6000);
  final org.voltdb.client.Client voltclient=ClientFactory.createClient(config);
  String[] voltServers=serverList.split(",");
  for (  String thisServer : voltServers) {
    try {
      thisServer=thisServer.trim();
      System.out.printf("Connecting to server: '%s'\n",thisServer);
      voltclient.createConnection(thisServer);
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
  try {
    VoltTable[] vtInitialize=voltclient.callProcedure("Initialize",maxContestant,contestantNameList,areaCodes,states).getResults();
    maxContestant=(int)vtInitialize[0].fetchRow(0).getLong(0);
    System.out.printf("Running for %d contestant(s)\n",maxContestant);
  }
 catch (  ProcCallException e) {
    e.printStackTrace();
    System.exit(-1);
  }
catch (  java.io.IOException e) {
    e.printStackTrace();
    System.exit(-1);
  }
  java.util.Random rand=new java.util.Random();
  long startTime=System.currentTimeMillis();
  long endTime=startTime + (1000l * test_duration_secs);
  long currentTime=startTime;
  long lastFeedbackTime=startTime;
  long lastAutoTuningTime=startTime;
  long num_sp_calls=0;
  long cycle_num_sp_calls=0;
  long startRecordingLatency=startTime + lag_latency_millis;
  int callIdx=0;
  AsyncCallback callBack=new AsyncCallback();
  for (int i=0; i < votingMap.length; i++)   votingMap[i]=(short)(((rand.nextInt(maxContestant) * rand.nextInt(maxContestant) + (int)Math.floor(100 * Math.sin((double)i))) % maxContestant) + 1);
  while (endTime > currentTime) {
    num_sp_calls++;
    cycle_num_sp_calls++;
    callIdx=(rand.nextInt(areaCodes.length) * rand.nextInt(areaCodes.length)) % areaCodes.length;
    phoneNumber=areaCodes[callIdx] * 10000000l + (Math.abs(rand.nextLong()) % 9999999l);
    contestantNumber=(byte)(rand.nextInt(100) > 40 ? votingMap[callIdx] : ((rand.nextInt(maxContestant) % maxContestant) + 1));
    if ((num_sp_calls % 100) == 0) {
      contestantNumber=(byte)((rand.nextInt(maxContestant) + 1) * 2);
    }
    try {
      voltclient.callProcedure(callBack,"Vote",phoneNumber,contestantNumber,maxVotesPerPhoneNumber);
    }
 catch (    java.io.IOException e) {
      e.printStackTrace();
      if (e instanceof NoConnectionsException) {
        System.exit(-1);
      }
    }
    transactions_this_second++;
    if (transactions_this_second >= transactions_per_milli) {
      this_millisecond=System.currentTimeMillis();
      while (this_millisecond <= last_millisecond) {
        this_millisecond=System.currentTimeMillis();
      }
      last_millisecond=this_millisecond;
      transactions_this_second=0;
    }
    currentTime=System.currentTimeMillis();
    if ((!checkLatency) && (currentTime >= startRecordingLatency)) {
      checkLatency=true;
    }
    if (use_auto_tuning && (currentTime >= (lastAutoTuningTime + (auto_tuning_interval_secs * 1000)))) {
      long cycle_elapsedTimeMillis2=System.currentTimeMillis() - lastAutoTuningTime;
      float cycle_elapsedTimeSec2=cycle_elapsedTimeMillis2 / 1000F;
      lastAutoTuningTime=currentTime;
      counterLock.lock();
      try {
        if ((((double)cycle_tot_execution_milliseconds / (double)cycle_tot_executions_latency) > auto_tuning_target_latency_millis) && (((double)tot_execution_milliseconds / (double)tot_executions_latency) > auto_tuning_target_latency_millis)) {
          long new_transactions_per_second=(((long)(Math.min(cycle_num_sp_calls / cycle_elapsedTimeSec2,transactions_per_second) * auto_tuning_adjustment_rate)) / 1000l) * 1000l;
          String last_tuning_warning="";
          if ((new_transactions_per_second <= 1000) || (new_transactions_per_second == transactions_per_second)) {
            use_auto_tuning=false;
            last_tuning_warning=" | WARNING: Minimum load boundary reached.";
          }
          System.out.printf("Auto-Tuning | Observed: %,.2f TPS | Latency: min = %d | max = %d | avg = %.2f | Adjusting DOWN: %,d TPS%s\n",(cycle_num_sp_calls / cycle_elapsedTimeSec2),cycle_min_execution_milliseconds,cycle_max_execution_milliseconds,((double)cycle_tot_execution_milliseconds / (double)cycle_tot_executions_latency),new_transactions_per_second,last_tuning_warning);
          transactions_per_second=new_transactions_per_second;
          transactions_per_milli=transactions_per_second / 1000l;
        }
 else         if (((double)cycle_tot_execution_milliseconds / (double)cycle_tot_executions_latency) < 0.9d * auto_tuning_target_latency_millis) {
          long new_transactions_per_second=((long)Math.max(1.05d * transactions_per_second,(double)(cycle_num_sp_calls / cycle_elapsedTimeSec2)) / 1000l) * 1000l;
          if (new_transactions_per_second > transactions_per_second_requested)           new_transactions_per_second=transactions_per_second_requested;
          if (new_transactions_per_second > transactions_per_second) {
            System.out.printf("Auto-Tuning | Observed: %,.2f TPS | Latency: min = %d | max = %d | avg = %.2f | Adjusting UP: %,d TPS\n",(cycle_num_sp_calls / cycle_elapsedTimeSec2),cycle_min_execution_milliseconds,cycle_max_execution_milliseconds,((double)cycle_tot_execution_milliseconds / (double)cycle_tot_executions_latency),new_transactions_per_second);
            transactions_per_second=new_transactions_per_second;
            transactions_per_milli=transactions_per_second / 1000l;
          }
        }
        cycle_num_sp_calls=0;
        cycle_min_execution_milliseconds=999999999l;
        cycle_max_execution_milliseconds=-1l;
        cycle_tot_execution_milliseconds=0;
        cycle_tot_executions_latency=0;
      }
  finally {
        counterLock.unlock();
      }
    }
    if (currentTime >= (lastFeedbackTime + (client_feedback_interval_secs * 1000))) {
      final long elapsedTimeMillis2=System.currentTimeMillis() - startTime;
      lastFeedbackTime=currentTime;
      final long runTimeMillis=endTime - startTime;
      float elapsedTimeSec2=elapsedTimeMillis2 / 1000F;
      if (tot_executions_latency == 0) {
        tot_executions_latency=1;
      }
      double percentComplete=((double)elapsedTimeMillis2 / (double)runTimeMillis) * 100;
      if (percentComplete > 100.0) {
        percentComplete=100.0;
      }
      counterLock.lock();
      try {
        thisOutstanding=num_sp_calls - tot_executions;
        double avgLatency=(double)tot_execution_milliseconds / (double)tot_executions_latency;
        System.out.printf("%.3f%% Complete | Transactions: %,d at %,.2f TPS | outstanding = %d (%d) | min = %d | max = %d | avg = %.2f\n",percentComplete,num_sp_calls,(num_sp_calls / elapsedTimeSec2),thisOutstanding,(thisOutstanding - lastOutstanding),min_execution_milliseconds,max_execution_milliseconds,avgLatency);
        lastOutstanding=thisOutstanding;
      }
  finally {
        counterLock.unlock();
      }
    }
  }
  try {
    voltclient.drain();
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(-1);
  }
  long elapsedTimeMillis=System.currentTimeMillis() - startTime;
  float elapsedTimeSec=elapsedTimeMillis / 1000F;
  System.out.println("\n");
  System.out.println("*************************************************************************");
  System.out.println("Voting Results");
  System.out.println("*************************************************************************");
  System.out.printf(" - Accepted votes = %,d\n",vote_result_counter[0]);
  System.out.printf(" - Rejected votes (invalid contestant) = %,d\n",vote_result_counter[1]);
  System.out.printf(" - Rejected votes (voter over limit) = %,d\n\n",vote_result_counter[2]);
  String winnerName="<<UNKNOWN>>";
  int winnerId=0;
  try {
    VoltTable[] vtResults=voltclient.callProcedure("Results").getResults();
    int rowCount=vtResults[0].getRowCount();
    if (rowCount == 0) {
      System.out.println(" - No results to report.");
    }
 else {
      for (int ii=0; ii < rowCount; ii++) {
        VoltTableRow row=vtResults[0].fetchRow(ii);
        String resultName=row.getString(0);
        winnerId=(int)row.getLong(1);
        long resultVotes=row.getLong(2);
        System.out.printf(" - Contestant %s received %,d vote(s)\n",resultName,resultVotes);
        winnerName=resultName;
      }
    }
  }
 catch (  ProcCallException e) {
    e.printStackTrace();
    System.exit(-1);
  }
catch (  java.io.IOException e) {
    e.printStackTrace();
    System.exit(-1);
  }
  System.out.printf("\n - Contestant %s was the winner.\n",winnerName);
  System.out.println("\n");
  System.out.println("*************************************************************************");
  System.out.println("System Statistics");
  System.out.println("*************************************************************************");
  System.out.printf(" - Ran for %,.2f seconds\n",elapsedTimeSec);
  System.out.printf(" - Performed %,d Stored Procedure calls\n",num_sp_calls);
  System.out.printf(" - At %,.2f calls per second\n",num_sp_calls / elapsedTimeSec);
  System.out.printf(" - Average Latency = %.2f ms\n",((double)tot_execution_milliseconds / (double)tot_executions_latency));
  System.out.printf(" -   Latency   0ms -  25ms = %,d\n",latency_counter[0]);
  System.out.printf(" -   Latency  25ms -  50ms = %,d\n",latency_counter[1]);
  System.out.printf(" -   Latency  50ms -  75ms = %,d\n",latency_counter[2]);
  System.out.printf(" -   Latency  75ms - 100ms = %,d\n",latency_counter[3]);
  System.out.printf(" -   Latency 100ms - 125ms = %,d\n",latency_counter[4]);
  System.out.printf(" -   Latency 125ms - 150ms = %,d\n",latency_counter[5]);
  System.out.printf(" -   Latency 150ms - 175ms = %,d\n",latency_counter[6]);
  System.out.printf(" -   Latency 175ms - 200ms = %,d\n",latency_counter[7]);
  System.out.printf(" -   Latency 200ms+        = %,d\n",latency_counter[8]);
  if (transactions_per_second < transactions_per_second_requested) {
    System.out.println("*************************************************************************");
    System.out.println("Auto-Tuning Results");
    System.out.println("*************************************************************************");
    System.out.printf(" - Optimal Load: %,d TPS to match/approach desired %.2f ms Latency\n",transactions_per_second,auto_tuning_target_latency_millis);
  }
  try {
    voltclient.close();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    System.exit(-1);
  }
}
