{
  assert((sizeOfHole >= 0) && (sizeOfHole + m_incrementFactor < 1));
  assert(numOfVertexes >= 3);
  m_center=center;
  int numbOfAdditionalPointsInsideShell=8;
  if (isValgrind()) {
    numbOfAdditionalPointsInsideShell=4;
  }
  double centerLatitude=m_center.getLatitude();
  double centerLongitude=m_center.getLongitude();
  GeographyPointValue zeroDegreePoint=GeographyPointValue.normalizeLngLat(centerLongitude + radiusInDegrees,centerLatitude);
  int degreeRotate=m_random.nextInt(358) + 1;
  GeographyPointValue firstVertex=zeroDegreePoint.rotate(degreeRotate,m_center);
  m_polygon=PolygonFactory.CreateRegularConvex(m_center,firstVertex,numOfVertexes,sizeOfHole);
  assert(m_polygon.getRings().size() > 0);
  List<GeographyPointValue> outerRing=m_polygon.getRings().get(0);
  outerRing.remove(0);
  assert(outerRing.size() == numOfVertexes);
  for (  GeographyPointValue geographyPointValue : outerRing) {
    m_pointsForPolygons.add(geographyPointValue.scale(m_center,sizeOfHole + m_incrementFactor));
  }
  for (int i=0; i < numbOfAdditionalPointsInsideShell; i++) {
    m_pointsForPolygons.add(outerRing.get(i % numOfVertexes).scale(m_center,m_random.nextDouble()));
  }
  m_pointsForPolygons.add(GeographyPointValue.normalizeLngLat(centerLongitude + radiusInDegrees,centerLatitude + radiusInDegrees));
  m_pointsForPolygons.add(GeographyPointValue.normalizeLngLat(centerLongitude - radiusInDegrees,centerLatitude + radiusInDegrees));
  m_pointsForPolygons.add(GeographyPointValue.normalizeLngLat(centerLongitude - radiusInDegrees,centerLatitude - radiusInDegrees));
  m_pointsForPolygons.add(GeographyPointValue.normalizeLngLat(centerLongitude + radiusInDegrees,centerLatitude - radiusInDegrees));
  m_pointsForPolygons.add(GeographyPointValue.normalizeLngLat(centerLongitude + radiusInDegrees + 1,centerLatitude + radiusInDegrees + 1));
}
