{
  final int polygonRadius=3;
  final int numberOfPolygonPointsForEachShape;
  if (isValgrind()) {
    numberOfPolygonPointsForEachShape=2;
  }
 else {
    numberOfPolygonPointsForEachShape=10;
  }
  final int longitude=m_random.nextInt(10) - 178;
  final int latitude=m_random.nextInt(10) + 72;
  GeographyPointValue center=new GeographyPointValue(longitude,latitude);
  final GeographyPointValue centerShiftOffset=new GeographyPointValue(0.33 * polygonRadius,0);
  center=generatePolygonPointData(center,centerShiftOffset,polygonRadius,3,0,numberOfPolygonPointsForEachShape);
  center=generatePolygonPointData(center,centerShiftOffset,polygonRadius,3,0.33,numberOfPolygonPointsForEachShape);
  center=generatePolygonPointData(center,centerShiftOffset,polygonRadius,5,0,numberOfPolygonPointsForEachShape);
  center=generatePolygonPointData(center,centerShiftOffset,polygonRadius,5,0.33,numberOfPolygonPointsForEachShape);
  center=generatePolygonPointData(center,centerShiftOffset,polygonRadius,8,0,numberOfPolygonPointsForEachShape);
  center=generatePolygonPointData(center,centerShiftOffset,polygonRadius,8,0.33,numberOfPolygonPointsForEachShape);
  int polygonEntries=0;
  int pointEntries=0;
  List<GeographyPointValue> listOfPoints;
  for (  PolygonPoints polygonPoints : m_generatedPolygonPoints) {
    listOfPoints=polygonPoints.getPoints();
    for (    GeographyPointValue point : listOfPoints) {
      client.callProcedure("PLACES.Insert",pointEntries,point);
      pointEntries++;
    }
    client.callProcedure("BORDERS.Insert",polygonEntries,polygonPoints.getPolygon());
    client.callProcedure("INDEXED_BORDERS.Insert",polygonEntries,polygonPoints.getPolygon());
    polygonEntries++;
  }
}
