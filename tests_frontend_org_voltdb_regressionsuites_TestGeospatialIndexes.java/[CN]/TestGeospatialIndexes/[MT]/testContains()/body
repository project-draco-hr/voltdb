{
  System.out.println("Starting tests for Contains() ... ");
  VoltTable resultsUsingGeoIndex, resultsFromNonGeoIndex;
  String sql;
  String prefixMsg;
  Client client=getClient();
  populateGeoTables(client);
  subTestVerifyBordersData(client);
  if (isValgrind())   System.out.println("*******Executing CONTAINS");
  prefixMsg="Assertion failed comparing CONTAINS results of indexed with non-indexed tables: ";
  sql="Select A.region, B.loc from INDEXED_BORDERS A, PLACES B " + "where CONTAINS(A.region, B.loc) " + "order by A.region, B.loc;";
  resultsUsingGeoIndex=client.callProcedure("@AdHoc",sql).getResults()[0];
  sql="Select A.region, B.loc from BORDERS A, PLACES B " + "where CONTAINS(A.region, B.loc) " + "order by A.region, B.loc;";
  resultsFromNonGeoIndex=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertTablesAreEqual(prefixMsg,resultsFromNonGeoIndex,resultsUsingGeoIndex);
  if (isValgrind())   System.out.println("*******Executing NOT CONTAINS");
  sql="Select A.region, B.loc from INDEXED_BORDERS A, PLACES B " + "where NOT CONTAINS(A.region, B.loc) " + "order by A.id, B.id;";
  resultsUsingGeoIndex=client.callProcedure("@AdHoc",sql).getResults()[0];
  sql="Select A.region, B.loc from BORDERS A, PLACES B " + "where NOT CONTAINS(A.region, B.loc) " + "order by A.id, B.id;";
  resultsFromNonGeoIndex=client.callProcedure("@AdHoc",sql).getResults()[0];
  assertTablesAreEqual(prefixMsg,resultsFromNonGeoIndex,resultsUsingGeoIndex);
  if (isValgrind())   System.out.println("Test parameterized contains() ... ");
  subTestParameterizedContains(client,true);
  subTestParameterizedContains(client,false);
  System.out.println(" ... completed tests for Contains().");
}
