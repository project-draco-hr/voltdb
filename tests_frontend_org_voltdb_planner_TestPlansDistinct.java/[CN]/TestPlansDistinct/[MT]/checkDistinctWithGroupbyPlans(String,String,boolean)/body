{
  List<AbstractPlanNode> pns1=compileToFragments(distinctSQL);
  List<AbstractPlanNode> pns2=compileToFragments(groupbySQL);
  assertTrue(pns1.get(0) instanceof SendPlanNode);
  assertTrue(pns2.get(0) instanceof SendPlanNode);
  AbstractPlanNode apn1, apn2;
  apn1=pns1.get(0).getChild(0);
  apn2=pns2.get(0).getChild(0);
  boolean hasTopProjection1=false;
  if (apn1 instanceof ProjectionPlanNode) {
    apn1=apn1.getChild(0);
    hasTopProjection1=true;
  }
  boolean hasTopProjection2=false;
  if (apn2 instanceof ProjectionPlanNode) {
    apn2=apn2.getChild(0);
    hasTopProjection2=true;
  }
  boolean hasOrderby=false, hasLimit=false;
  boolean groupByMergeReceive=false;
  if (apn2 instanceof OrderByPlanNode) {
    hasOrderby=true;
    if (apn2.getInlinePlanNode(PlanNodeType.LIMIT) != null) {
      hasLimit=true;
    }
    apn2=apn2.getChild(0);
  }
 else   if (apn2 instanceof LimitPlanNode) {
    hasLimit=true;
    apn2=apn2.getChild(0);
  }
 else   if (apn2 instanceof MergeReceivePlanNode) {
    assertTrue(apn2.getInlinePlanNode(PlanNodeType.ORDERBY) != null);
    hasOrderby=true;
    hasLimit=apn2.getInlinePlanNode(PlanNodeType.LIMIT) != null;
    groupByMergeReceive=true;
  }
  boolean distinctMergeReceive=false;
  if (hasOrderby) {
    if (apn1 instanceof OrderByPlanNode) {
      assertTrue(apn1 instanceof OrderByPlanNode);
      if (hasLimit) {
        assertNotNull(apn1.getInlinePlanNode(PlanNodeType.LIMIT));
      }
      apn1=apn1.getChild(0);
    }
 else     if (apn1 instanceof MergeReceivePlanNode) {
      distinctMergeReceive=true;
      assertNotNull(apn1.getInlinePlanNode(PlanNodeType.ORDERBY));
      assertEquals(0,apn1.getChildCount());
      AbstractPlanNode aggr=apn1.getInlinePlanNode(PlanNodeType.AGGREGATE);
      if (aggr == null) {
        aggr=apn1.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE);
      }
      if (hasLimit) {
        if (aggr == null) {
          assertNotNull(apn1.getInlinePlanNode(PlanNodeType.LIMIT));
        }
 else {
          assertNotNull(aggr.getInlinePlanNode(PlanNodeType.LIMIT));
        }
      }
      apn1=aggr;
    }
 else {
      fail("The distinctSQL top node is not OrderBy or MergeReceive.");
    }
  }
 else   if (hasLimit) {
    assertTrue(apn1 instanceof LimitPlanNode);
    apn1=apn1.getChild(0);
  }
  if (distinctMergeReceive) {
    assertTrue(apn1 instanceof AggregatePlanNode);
    assertEquals(0,((AggregatePlanNode)apn1).getAggregateTypesSize());
    assertEquals(pns1.get(0).getOutputSchema().getColumns().size(),((AggregatePlanNode)apn1).getGroupByExpressionsSize());
  }
 else {
    assertTrue(apn1 instanceof HashAggregatePlanNode);
    assertEquals(0,((HashAggregatePlanNode)apn1).getAggregateTypesSize());
    assertEquals(pns1.get(0).getOutputSchema().getColumns().size(),((HashAggregatePlanNode)apn1).getGroupByExpressionsSize());
    apn1=apn1.getChild(0);
  }
  if (apn1 instanceof ProjectionPlanNode) {
    apn1=apn1.getChild(0);
    assertFalse(hasTopProjection1);
  }
  if (apn2 instanceof ProjectionPlanNode) {
    apn2=apn2.getChild(0);
    assertFalse(hasTopProjection2);
  }
  if (distinctMergeReceive == false && groupByMergeReceive == false) {
    assertEquals(apn1.toExplainPlanString(),apn2.toExplainPlanString());
  }
  if (pns1.size() > 1) {
    if (!limitPushdown) {
      assertEquals(pns1.get(1).toExplainPlanString(),pns2.get(1).toExplainPlanString());
      return;
    }
    assertTrue(pns1.get(1) instanceof SendPlanNode);
    assertTrue(pns2.get(1) instanceof SendPlanNode);
    apn1=pns1.get(1).getChild(0);
    apn2=pns2.get(1).getChild(0);
    assertTrue(apn2 instanceof OrderByPlanNode);
    assertNotNull(apn2.getInlinePlanNode(PlanNodeType.LIMIT));
    apn2=apn2.getChild(0);
    if (distinctMergeReceive == false && groupByMergeReceive == false) {
      assertEquals(apn1.toExplainPlanString(),apn2.toExplainPlanString());
    }
  }
}
