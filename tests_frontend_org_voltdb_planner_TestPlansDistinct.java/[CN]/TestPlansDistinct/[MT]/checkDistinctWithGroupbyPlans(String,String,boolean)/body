{
  List<AbstractPlanNode> pns1=compileToFragments(distinctSQL);
  List<AbstractPlanNode> pns2=compileToFragments(groupbySQL);
  printExplainPlan(pns1);
  printExplainPlan(pns2);
  if (pns1.size() > 1) {
    assertEquals(pns1.get(1).toExplainPlanString(),pns2.get(1).toExplainPlanString());
  }
  assertTrue(pns1.get(0) instanceof SendPlanNode);
  assertTrue(pns2.get(0) instanceof SendPlanNode);
  AbstractPlanNode apn1, apn2;
  apn1=pns1.get(0).getChild(0);
  apn2=pns2.get(0).getChild(0);
  if (hasLimit) {
    assertTrue(apn1 instanceof LimitPlanNode);
    apn1=apn1.getChild(0);
    assertTrue(apn2 instanceof LimitPlanNode);
    apn2=apn2.getChild(0);
  }
  assertTrue(apn1 instanceof HashAggregatePlanNode);
  assertEquals(0,((HashAggregatePlanNode)apn1).getAggregateTypesSize());
  assertEquals(pns1.get(0).getOutputSchema().getColumns().size(),((HashAggregatePlanNode)apn1).getGroupByExpressionsSize());
  apn1=apn1.getChild(0);
  assertEquals(apn1.toExplainPlanString(),apn2.toExplainPlanString());
}
