def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):
    'Runs gtest_break_on_failure_unittest_ and verifies that it does\n    (or does not) have a seg-fault.\n\n    Args:\n      env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\n                        variable; None if the variable should be unset.\n      flag_value:       value of the --gtest_break_on_failure flag;\n                        None if the flag should not be present.\n      expect_seg_fault: 1 if the program is expected to generate a seg-fault;\n                        0 otherwise.\n    '
    SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, env_var_value)
    if (env_var_value is None):
        env_var_value_msg = ' is not set'
    else:
        env_var_value_msg = ('=' + env_var_value)
    if (flag_value is None):
        flag = ''
    elif (flag_value == '0'):
        flag = ('--%s=0' % BREAK_ON_FAILURE_FLAG)
    else:
        flag = ('--%s' % BREAK_ON_FAILURE_FLAG)
    command = [EXE_PATH]
    if flag:
        command.append(flag)
    if expect_seg_fault:
        should_or_not = 'should'
    else:
        should_or_not = 'should not'
    has_seg_fault = Run(command)
    SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, None)
    msg = ('when %s%s, an assertion failure in "%s" %s cause a seg-fault.' % (BREAK_ON_FAILURE_ENV_VAR, env_var_value_msg, ' '.join(command), should_or_not))
    self.assert_((has_seg_fault == expect_seg_fault), msg)
