{
  VoltDB.ignoreCrash=true;
  VoltTable t1=new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT));
  t1.addRow(7);
  VoltTable t2=new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT));
  t2.addRow(6);
  InFlightTxnState state=createTxnState(1,new int[]{3,1},true,true);
  ClientResponseImpl cri1=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t1},"");
  ClientResponseImpl cri2=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t2},"");
  state.addResponse(1,cri1);
  state.addResponse(3,cri2);
  assertFalse(VoltDB.wasCrashCalled);
  state=createTxnState(1,new int[]{3,1},true,false);
  cri1=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t1},"");
  cri2=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t2},"");
  state.addResponse(1,cri1);
  try {
    state.addResponse(3,cri2);
    fail("Mismatched hash in response should have failed");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
catch (  AssertionError e) {
  }
  VoltDB.wasCrashCalled=false;
  state=createTxnState(1,new int[]{3,1},false,false);
  cri1=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t1},"");
  cri2=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t2},"");
  state.addResponse(1,cri1);
  try {
    state.addResponse(3,cri2);
    fail("Mismatched hash in response should have failed");
  }
 catch (  AssertionError e) {
  }
  VoltDB.wasCrashCalled=false;
  state=createTxnState(1,new int[]{3,1},false,false);
  cri1=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t1},"");
  cri2=new ClientResponseImpl(ClientResponse.SUCCESS,new VoltTable[]{t1},"");
  state.addResponse(1,cri1);
  state.addResponse(3,cri2);
  assertFalse(VoltDB.wasCrashCalled);
  VoltDB.ignoreCrash=false;
}
