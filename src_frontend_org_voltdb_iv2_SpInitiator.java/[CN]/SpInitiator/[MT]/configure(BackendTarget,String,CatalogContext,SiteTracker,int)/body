{
  boolean isLeader=joinElectoralCollege();
  if (isLeader) {
    hostLog.info("Chosen as leader for partition " + m_partitionId);
    m_babySitter=new BabySitter(m_messenger.getZK(),LeaderElector.electionDirForPartition(m_partitionId),m_replicasChangeHandler);
    List<String> children=m_babySitter.lastSeenChildren();
    while (children.size() < kfactor) {
      try {
        Thread.sleep(5);
      }
 catch (      InterruptedException e) {
      }
      children=m_babySitter.lastSeenChildren();
    }
  }
 else {
    hostLog.info("Chosen as replica for partition " + m_partitionId);
  }
  m_executionSite=new Site(m_scheduler.getQueue(),m_initiatorMailbox.getHSId(),backend,catalogContext,serializedCatalog,catalogContext.m_transactionId,m_partitionId,siteTracker.m_numberOfPartitions);
  ProcedureRunnerFactory prf=new ProcedureRunnerFactory();
  prf.configure(m_executionSite,m_executionSite.m_sysprocContext);
  m_procSet=new LoadedProcedureSet(m_executionSite,prf,m_initiatorMailbox.getHSId(),0,siteTracker.m_numberOfPartitions);
  m_procSet.loadProcedures(catalogContext,backend);
  m_scheduler.setProcedureSet(m_procSet);
  m_executionSite.setLoadedProcedures(m_procSet);
  m_siteThread=new Thread(m_executionSite);
  m_siteThread.start();
}
