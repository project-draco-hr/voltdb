{
  int columnCount=t.getColumnCount();
  int[] padding=new int[columnCount];
  String[] fmt=new String[columnCount];
  for (int i=0; i < columnCount; i++)   padding[i]=t.getColumnName(i).length();
  t.resetRowPosition();
  while (t.advanceRow()) {
    for (int i=0; i < columnCount; i++) {
      Object v=t.get(i,t.getColumnType(i));
      if (t.wasNull())       v="NULL";
      int l=0;
      if (t.getColumnType(i) == VoltType.VARBINARY && !t.wasNull()) {
        l=((byte[])v).length * 2;
      }
 else {
        l=v.toString().length();
      }
      if (padding[i] < l)       padding[i]=l;
    }
  }
  for (int i=0; i < columnCount; i++) {
    padding[i]+=1;
    fmt[i]="%1$" + ((t.getColumnType(i) == VoltType.STRING || t.getColumnType(i) == VoltType.TIMESTAMP || t.getColumnType(i) == VoltType.VARBINARY) ? "-" : "") + padding[i]+ "s";
  }
  for (int i=0; i < columnCount; i++) {
    System.out.printf("%1$-" + padding[i] + "s",t.getColumnName(i));
    if (i < columnCount - 1)     System.out.print(" ");
  }
  System.out.print("\n");
  for (int i=0; i < columnCount; i++) {
    System.out.print(paddingString("",padding[i],'-',false));
    if (i < columnCount - 1)     System.out.print(" ");
  }
  System.out.print("\n");
  t.resetRowPosition();
  while (t.advanceRow()) {
    for (int i=0; i < columnCount; i++) {
      Object v=t.get(i,t.getColumnType(i));
      if (t.wasNull())       v="NULL";
 else       if (t.getColumnType(i) == VoltType.VARBINARY)       v=byteArrayToHexString((byte[])v);
 else       v=v.toString();
      System.out.printf(fmt[i],v);
      if (i < columnCount - 1)       System.out.print(" ");
    }
    System.out.print("\n");
  }
  System.out.printf("\n(%d row(s) affected)\n",t.getRowCount());
}
