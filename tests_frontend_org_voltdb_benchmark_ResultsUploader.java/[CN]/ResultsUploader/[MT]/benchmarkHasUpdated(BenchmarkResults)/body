{
  int pollIndex=results.getCompletedIntervalCount();
  long duration=results.getTotalDuration();
  long interval=results.getIntervalDuration();
  if ((pollIndex * interval) < duration)   return;
  try {
    m_conn=DriverManager.getConnection(m_config.resultsDatabaseURL);
    m_stmt=m_conn.createStatement();
  }
 catch (  SQLException ex) {
    System.out.println("Unable to connect to MySQL results recording server.");
    System.out.println("SQLException: " + ex.getMessage());
    return;
  }
  try {
    StringBuilder sql=null;
    m_conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
    m_conn.setAutoCommit(false);
    sql=new StringBuilder();
    sql.append("INSERT INTO results (`userid`, `benchmarkname`, `benchmarkoptions`, " + "`duration`, `interval`, `sitesperhost`, `remotepath`, `hostcount`, `clientcount`, `totalhosts`, `totalclients`, `processesperclient`) values (");
    sql.append("'").append(getCurrentUserId()).append("', ");
    sql.append("'").append(m_benchmarkName).append("', ");
    sql.append("'").append(m_benchmarkOptions).append("', ");
    sql.append(m_config.duration).append(", ");
    sql.append(m_config.interval).append(", ");
    sql.append(m_config.sitesPerHost).append(", ");
    sql.append("'").append(m_config.remotePath).append("', ");
    sql.append(m_config.hosts.length).append(", ");
    sql.append(m_config.clients.length).append(", ");
    sql.append(m_config.hosts.length * m_config.sitesPerHost).append(", ");
    sql.append(m_config.clients.length * m_config.processesPerClient).append(", ");
    sql.append(m_config.processesPerClient).append(");");
    m_stmt.executeUpdate(sql.toString());
    int resultid=-1;
    java.sql.ResultSet rs=m_stmt.executeQuery("SELECT LAST_INSERT_ID()");
    if (rs.next()) {
      resultid=rs.getInt(1);
    }
 else {
      throw new RuntimeException();
    }
    for (    String host : m_config.hosts) {
      String args=m_hostArgs.get(host);
      if (args == null)       args="";
      addToHostsTableIfMissing(host);
      String distro[]=getHostDistroForHostName(host);
      sql=new StringBuilder();
      sql.append("INSERT INTO participants (`resultid`, `hostid`, `distributor`, `release`, `role`, `commandline`) values (");
      sql.append(String.valueOf(resultid)).append(", ");
      sql.append("'").append(getHostIdForHostName(host)).append("', ");
      sql.append("'").append(distro[0]).append("', ");
      sql.append("'").append(distro[1]).append("', ");
      sql.append("'SERVER', ");
      sql.append("'").append(args).append("');");
      m_stmt.executeUpdate(sql.toString());
    }
    for (    String clientName : results.getClientNames()) {
      String[] clientParts=clientName.split(":");
      String clientHostId=getHostIdForHostName(clientParts[0].trim());
      String processIndex=clientParts[1].trim();
      String args=m_clientArgs.get(clientName);
      if (args == null)       args="";
      addToHostsTableIfMissing(clientParts[0].trim());
      sql=new StringBuilder();
      sql.append("INSERT INTO participants (`resultid`, `hostid`, `processindex`, `role`, `commandline`) values (");
      sql.append(String.valueOf(resultid)).append(", ");
      sql.append("'").append(clientHostId).append("', ");
      sql.append(processIndex).append(", ");
      sql.append("'CLIENT', ");
      sql.append("'").append(args).append("');");
      m_stmt.executeUpdate(sql.toString());
      for (      String txnName : results.getTransactionNames()) {
        Result[] rset=results.getResultsForClientAndTransaction(clientName,txnName);
        for (int i=0; i < rset.length; i++) {
          Result r=rset[i];
          sql=new StringBuilder();
          sql.append("INSERT INTO resultparts (`resultid`, `clienthost`, `processindex`, `transaction`, `interval`, `count`) values (");
          sql.append(String.valueOf(resultid)).append(", ");
          sql.append("'").append(clientHostId).append("', ");
          sql.append(processIndex).append(", ");
          sql.append("'").append(txnName).append("', ");
          sql.append(i).append(", ");
          sql.append(r.transactionCount).append(");");
          m_stmt.executeUpdate(sql.toString());
        }
      }
    }
    sql=new StringBuilder();
    sql.append("insert into resultintervals (`resultid`, `interval`, `seconds`, `intervaltxn`, `intervaltxnpersecond`) ");
    sql.append("select r.resultid, ");
    sql.append("       rp.interval, ");
    sql.append("       ((rp.interval + 1) * r.interval / 1000) seconds, ");
    sql.append("       sum(rp.count) intervaltxn, ");
    sql.append("       sum(rp.count) / (r.interval / 1000) intervaltxnpersecond ");
    sql.append("from results r, ");
    sql.append("     resultparts rp ");
    sql.append("where rp.resultid = r.resultid and ");
    sql.append("      r.resultid = ").append(String.valueOf(resultid)).append(" ");
    sql.append("group by rp.interval, r.interval;");
    m_stmt.executeUpdate(sql.toString());
    sql=new StringBuilder();
    sql.append("update results r ");
    sql.append("set r.totaltxn = (select sum(rp.count) from resultparts rp where rp.resultid = r.resultid), ");
    sql.append("    r.txnpersecond = (select sum(rp.count) from resultparts rp where rp.resultid = r.resultid) / r.duration * 1000 ");
    sql.append("where r.resultid = ").append(String.valueOf(resultid)).append(";");
    m_stmt.executeUpdate(sql.toString());
    m_conn.commit();
  }
 catch (  SQLException e) {
    System.err.println("Unable to save results to results server.");
    System.err.println("  Consider uncommenting debugging output in ResultsUploader.java.");
    System.err.flush();
    e.printStackTrace();
  }
}
