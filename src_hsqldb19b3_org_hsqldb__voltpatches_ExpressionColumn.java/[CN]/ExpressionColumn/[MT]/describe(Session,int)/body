{
  StringBuffer sb=new StringBuffer(64);
  sb.append('\n');
  for (int i=0; i < blanks; i++) {
    sb.append(' ');
  }
switch (opType) {
case OpTypes.DEFAULT:
    sb.append(Tokens.T_DEFAULT);
  break;
case OpTypes.ASTERISK:
sb.append("OpTypes.ASTERISK ");
break;
case OpTypes.VARIABLE:
sb.append("VARIABLE: ");
sb.append(column.getName().name);
break;
case OpTypes.PARAMETER:
sb.append(Tokens.T_PARAMETER).append(": ");
sb.append(column.getName().name);
break;
case OpTypes.COALESCE:
sb.append(Tokens.T_COLUMN).append(": ");
sb.append(columnName);
if (alias != null) {
sb.append(" AS ").append(alias.name);
}
break;
case OpTypes.COLUMN:
sb.append(Tokens.T_COLUMN).append(": ");
sb.append(column.getName().name);
if (alias != null) {
sb.append(" AS ").append(alias.name);
}
sb.append(' ').append(Tokens.T_TABLE).append(": ").append(tableName);
break;
case OpTypes.DYNAMIC_PARAM:
sb.append("DYNAMIC PARAM: ");
sb.append(", TYPE = ").append((dataType != null) ? dataType.getNameString() : "null");
break;
case OpTypes.SEQUENCE:
sb.append(Tokens.T_SEQUENCE).append(": ");
sb.append(sequence.getName().name);
break;
case OpTypes.MULTICOLUMN:
}
return sb.toString();
}
