{
  for (int i=0; i < nodes.length; i++) {
    if (nodes[i] == null) {
      continue;
    }
    nodes[i]=nodes[i].replaceAliasInOrderBy(columns,length);
  }
switch (opType) {
case OpTypes.COALESCE:
case OpTypes.COLUMN:
{
      java.util.Set<SelectListAliasResolution> foundNames=new java.util.TreeSet<>();
      Expression firstFoundExpr=null;
      for (int i=0; i < length; i++) {
        ExpressionColumn ecol=(columns[i] instanceof ExpressionColumn) ? (ExpressionColumn)columns[i] : null;
        String selectTableName=null;
        String selectTableAlias=null;
        String selectColumnName=null;
        if (ecol != null) {
          selectTableName=ecol.getTableName();
          selectTableAlias=ecol.getTableAlias();
          if (selectTableAlias == null) {
            selectTableAlias=selectTableName;
          }
          selectColumnName=ecol.columnName;
        }
        SimpleName selectAliasName=columns[i].alias;
        String selectAlias=selectAliasName == null ? null : selectAliasName.name;
        if (selectAlias == null) {
          selectAlias=selectColumnName;
        }
        if (schema == null) {
          if (tableName == null) {
            if (columnName.equals(selectAlias)) {
              foundNames.add(new SelectListAliasResolution(columns[i],selectTableAlias,selectColumnName,selectAlias,i));
              if (firstFoundExpr == null) {
                firstFoundExpr=columns[i];
              }
            }
          }
        }
      }
      if (foundNames.size() == 1) {
        return firstFoundExpr;
      }
      if (foundNames.size() > 1) {
        StringBuffer sb=new StringBuffer();
        sb.append(String.format("The name \"%s\" in an order by expression is ambiguous.  It's in columns: ",columnName));
        appendNameList(sb,foundNames,"");
        sb.append(".");
        throw new HsqlException(sb.toString(),"",0);
      }
    }
default :
}
return this;
}
