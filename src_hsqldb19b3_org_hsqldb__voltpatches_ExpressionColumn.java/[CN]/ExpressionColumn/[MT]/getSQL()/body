{
switch (opType) {
case OpTypes.DEFAULT:
    return Tokens.T_DEFAULT;
case OpTypes.DYNAMIC_PARAM:
  return Tokens.T_QUESTION;
case OpTypes.ASTERISK:
return "*";
case OpTypes.COALESCE:
return alias.getStatementName();
case OpTypes.VARIABLE:
case OpTypes.PARAMETER:
case OpTypes.COLUMN:
{
if (column == null) {
if (alias != null) {
  return alias.getStatementName();
}
 else {
  return columnName;
}
}
if (rangeVariable == null || rangeVariable.tableAlias == null) {
return column.getName().getSchemaQualifiedStatementName();
}
 else {
StringBuffer sb=new StringBuffer();
sb.append(rangeVariable.tableAlias.getStatementName());
sb.append('.');
sb.append(column.getName().statementName);
return sb.toString();
}
}
case OpTypes.MULTICOLUMN:
{
if (nodes.length == 0) {
return "*";
}
StringBuffer sb=new StringBuffer();
for (int i=0; i < nodes.length; i++) {
Expression e=nodes[i];
if (i > 0) {
sb.append(',');
}
String s=e.getSQL();
sb.append(s);
}
return sb.toString();
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
}
