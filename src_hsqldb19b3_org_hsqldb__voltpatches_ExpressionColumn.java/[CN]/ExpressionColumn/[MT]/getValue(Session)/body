{
switch (opType) {
case OpTypes.DEFAULT:
    return null;
case OpTypes.VARIABLE:
{
    return session.sessionContext.routineVariables[columnIndex];
  }
case OpTypes.PARAMETER:
{
  return session.sessionContext.routineArguments[columnIndex];
}
case OpTypes.COLUMN:
{
Object[] data=session.sessionContext.rangeIterators[rangeVariable.rangePosition].getCurrent();
Object value=data[columnIndex];
Type colType=column.getDataType();
if (!dataType.equals(colType)) {
  value=dataType.convertToType(session,value,colType);
}
return value;
}
case OpTypes.SIMPLE_COLUMN:
{
Object[] data=session.sessionContext.rangeIterators[rangePosition].getCurrent();
return data[columnIndex];
}
case OpTypes.COALESCE:
{
Object value=null;
for (int i=0; i < nodes.length; i++) {
value=nodes[i].getValue(session,dataType);
if (value != null) {
return value;
}
}
return value;
}
case OpTypes.DYNAMIC_PARAM:
{
return session.sessionContext.dynamicArguments[parameterIndex];
}
case OpTypes.SEQUENCE:
{
return session.sessionData.getSequenceValue(sequence);
}
case OpTypes.ASTERISK:
case OpTypes.MULTICOLUMN:
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Expression");
}
}
