{
  NavigableMap<URI,Bundle> expect, update;
  do {
    expect=get();
    update=ImmutableSortedMap.<URI,Bundle>naturalOrder().putAll(Maps.filterKeys(expect,not(in(bundles)))).build();
  }
 while (!compareAndSet(expect,update));
  List<URI> couldNotStop=new ArrayList<>();
  NavigableMap<URI,Bundle> stopped=Maps.filterKeys(expect,in(bundles));
  for (  Map.Entry<URI,Bundle> e : stopped.entrySet()) {
    URI bundleURI=e.getKey();
    Bundle bundle=e.getValue();
    try {
      bundle.stop();
    }
 catch (    BundleException exc) {
      LOG.error("Failed to stop bundle " + bundleURI,exc);
      couldNotStop.add(bundleURI);
    }
  }
  if (!couldNotStop.isEmpty()) {
    throw new ModularException("Failed to stop bundles %s",couldNotStop);
  }
  return stopped;
}
