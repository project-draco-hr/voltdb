{
  NavigableMap<URI,Bundle> expect, update;
  Bundle bundle=null;
  do {
    expect=get();
    if (expect.containsKey(bundleURI))     break;
    BundleContext ctx=m_framework.getBundleContext();
    bundle=ctx.getBundle(bundleURI.toASCIIString());
    if (bundle != null) {
      try {
        bundle.update();
      }
 catch (      BundleException e) {
        String msg=e.getMessage();
        throw loggedModularException(e,"Unable to update bundle %s. %s",bundleURI,msg);
      }
catch (      Throwable t) {
        throw loggedModularException(t,"Unable to update bundle %s",bundleURI);
      }
    }
 else {
      try {
        bundle=ctx.installBundle(bundleURI.toASCIIString());
      }
 catch (      BundleException e) {
        String msg=e.getMessage();
        throw loggedModularException(e,"Unable to install bundle %s. %s",bundleURI,msg);
      }
catch (      Throwable t) {
        throw loggedModularException(t,"Unable to instal bundle %s",bundleURI);
      }
    }
    try {
      bundle.start();
    }
 catch (    BundleException e) {
      String msg=e.getMessage();
      throw loggedModularException(e,"Unable to start bundle %s. %s",bundleURI,msg);
    }
catch (    Throwable t) {
      throw loggedModularException(t,"Unable to start bundle %s",bundleURI);
    }
    update=ImmutableSortedMap.<URI,Bundle>naturalOrder().putAll(expect).put(bundleURI,bundle).build();
  }
 while (!compareAndSet(expect,update));
  return get().get(bundleURI);
}
