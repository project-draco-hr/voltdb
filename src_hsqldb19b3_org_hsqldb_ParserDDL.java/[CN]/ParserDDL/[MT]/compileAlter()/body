{
  read();
switch (token.tokenType) {
case Tokens.INDEX:
{
      read();
      HsqlName name=readNewSchemaObjectNameNoCheck(SchemaObject.INDEX);
      readThis(Tokens.RENAME);
      readThis(Tokens.TO);
      return compileRenameObject(name,SchemaObject.INDEX);
    }
case Tokens.SCHEMA:
{
    read();
    HsqlName name=readSchemaName();
    readThis(Tokens.RENAME);
    readThis(Tokens.TO);
    return compileRenameObject(name,SchemaObject.SCHEMA);
  }
case Tokens.CATALOG:
{
  read();
  checkIsSimpleName();
  String name=token.tokenString;
  checkValidCatalogName(name);
  read();
  readThis(Tokens.RENAME);
  readThis(Tokens.TO);
  return compileRenameObject(database.getCatalogName(),SchemaObject.CATALOG);
}
case Tokens.SEQUENCE:
{
read();
return compileAlterSequence();
}
case Tokens.TABLE:
{
read();
return compileAlterTable();
}
case Tokens.USER:
{
read();
return compileAlterUser();
}
case Tokens.DOMAIN:
{
read();
return compileAlterDomain();
}
default :
{
throw unexpectedToken();
}
}
}
