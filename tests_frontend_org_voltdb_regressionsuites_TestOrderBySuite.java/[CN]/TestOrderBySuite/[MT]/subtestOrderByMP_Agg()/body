{
  Client client=getClient();
  client.callProcedure("TruncateP");
  client.callProcedure("@AdHoc","insert into P values(1, 11, 1, 1)");
  client.callProcedure("@AdHoc","insert into P values(1, 1, 2, 1)");
  client.callProcedure("@AdHoc","insert into P values(3, 6, 2, 1)");
  client.callProcedure("@AdHoc","insert into P values(4, 6, 1, 1)");
  client.callProcedure("@AdHoc","insert into P values(5, 11, 2, 1)");
  client.callProcedure("@AdHoc","insert into P values(7, 1, 4, 1)");
  client.callProcedure("@AdHoc","insert into P values(7, 6, 1, 1)");
  String sql;
  VoltTable vt;
  long[][] expected;
  sql="select P_D1, max(P_D2) from P where P_D1 > 0 group by P_D1 order by P_D1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1,4},{6,2},{11,2}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="select P_D1, P_D3, max(P_D2) from P group by P_D1, P_D3 order by P_D1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1,1,4},{6,1,2},{11,1,2}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="select max(P_D2), P_D0 from P group by P_D0  order by P_D0";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{2,1},{2,3},{1,4},{2,5},{4,7}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="select max(P_D2), P_D1, P_D0 from P group by P_D1, P_D0 order by P_D0  limit 3 offset 2";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{2,6,3},{1,6,4},{2,11,5}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="select P_D3, P_D2, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D2 order by P_D3, P_D2 limit 1 offset 1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1,2,5}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="select P_D3, P_D2, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D2 order by P_D3, P_D2 offset 2";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1,4,7}};
  validateTableOfLongs(vt,expected);
  sql="select P_D3, P_D2, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D2 order by P_D3, P_D2 limit 2";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1,1,7},{1,2,5}};
  validateTableOfLongs(vt,expected);
  sql="select P_D3, P_D2, max (P_D0) from p where P_D3 > 0 group by P_D3, P_D2, P_D0 order by P_D3, P_D2";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1,1},{1,1},{1,1},{1,2},{1,2},{1,2},{1,4}};
  assertEquals(expected.length,vt.getRowCount());
  for (int i=0; i < expected.length; ++i) {
    VoltTableRow row=vt.fetchRow(i);
    assertEquals(expected[i][0],row.getLong("P_D3"));
    assertEquals(expected[i][1],row.getLong("P_D2"));
  }
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="SELECT V_P_D1 FROM V_P order by V_P_D1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1},{1},{6},{6},{11},{11}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="SELECT V_P_D1, V_P_D2 FROM V_P order by V_P_D1 DESC , V_P_D2 DESC";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{11,2},{11,1},{6,2},{6,1},{1,4},{1,2}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
}
