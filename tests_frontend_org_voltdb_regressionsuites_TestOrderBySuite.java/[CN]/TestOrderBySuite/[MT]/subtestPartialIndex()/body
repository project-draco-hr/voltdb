{
  Client client=getClient();
  client.callProcedure("Truncate03");
  client.callProcedure("InsertO3",2,3,2,2);
  client.callProcedure("InsertO3",3,-3,3,3);
  client.callProcedure("InsertO3",4,4,4,4);
  client.callProcedure("InsertO3",5,-5,5,5);
  client.callProcedure("InsertO3",1,1,1,1);
  client.callProcedure("InsertO3",1,2,1,1);
  client.callProcedure("InsertO3",1,3,1,1);
  client.callProcedure("InsertO3",2,1,2,2);
  client.callProcedure("InsertO3",2,2,2,2);
  VoltTable vt;
  String sql;
  sql="SELECT * FROM O3 WHERE PK2 > 0 ORDER BY I4 DESC LIMIT 1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  System.out.println(vt.toString());
  assertEquals(4,vt.fetchRow(0).getLong(3));
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  System.out.println(vt.toString());
  assertTrue(vt.toString().contains("O3_PARTIAL_TREE"));
  sql="SELECT * FROM O3 WHERE PK2 > 0 ORDER BY PK2 DESC LIMIT 1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  System.out.println(vt.toString());
  assertEquals(4,vt.fetchRow(0).getLong(1));
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  System.out.println(vt.toString());
  assertTrue(vt.toString().contains("O3_PARTIAL_TREE"));
  sql="SELECT * FROM O3 WHERE PK2 > 0 AND I3 > 2 ORDER BY PK2 LIMIT 1";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  System.out.println(vt.toString());
  assertEquals(4,vt.fetchRow(0).getLong(1));
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  System.out.println(vt.toString());
  assertTrue(vt.toString().contains("O3_TREE"));
}
