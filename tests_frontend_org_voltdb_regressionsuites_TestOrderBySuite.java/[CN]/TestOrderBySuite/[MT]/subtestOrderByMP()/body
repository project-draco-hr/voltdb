{
  Client client=getClient();
  client.callProcedure("Truncate01");
  List<Integer> ids=new ArrayList<Integer>();
  Random rand=new Random();
  int size=100;
  for (int i=0; i < size; ++i) {
    int val=rand.nextInt();
    ids.add(val);
    client.callProcedure("InsertO1",val,val,"dummy","dummy");
  }
  Collections.sort(ids);
  int max=ids.get(ids.size() - 1);
  int maxOffset3=ids.get(ids.size() - 4);
  VoltTable vt=client.callProcedure("@AdHoc","SELECT PKEY FROM O1 ORDER BY PKEY DESC").getResults()[0];
  assertEquals(size,vt.getRowCount());
  vt.advanceRow();
  assertEquals(max,vt.getLong(0));
  vt=client.callProcedure("@Explain","SELECT PKEY FROM O1 ORDER BY PKEY DESC").getResults()[0];
  System.out.println(vt.toString());
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  vt=client.callProcedure("@AdHoc","SELECT PKEY FROM O1 ORDER BY PKEY DESC LIMIT 3 OFFSET 3").getResults()[0];
  assertEquals(3,vt.getRowCount());
  vt.advanceRow();
  assertEquals(maxOffset3,vt.getLong(0));
  vt=client.callProcedure("@AdHoc","SELECT A_INT FROM O1 ORDER BY A_INT DESC").getResults()[0];
  assertEquals(size,vt.getRowCount());
  vt.advanceRow();
  assertEquals(max,vt.getLong(0));
  vt=client.callProcedure("@Explain","SELECT A_INT FROM O1 ORDER BY A_INT DESC").getResults()[0];
  System.out.println(vt.toString());
  assertTrue(!vt.toString().contains("MERGE RECEIVE"));
  vt=client.callProcedure("@AdHoc","SELECT A_INT FROM O1 ORDER BY A_INT DESC  LIMIT 3 OFFSET 3").getResults()[0];
  assertEquals(3,vt.getRowCount());
  vt.advanceRow();
  assertEquals(maxOffset3,vt.getLong(0));
}
