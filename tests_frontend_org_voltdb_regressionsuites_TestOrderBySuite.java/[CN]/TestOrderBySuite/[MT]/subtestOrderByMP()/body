{
  Client client=getClient();
  client.callProcedure("Truncate01");
  client.callProcedure("Truncate03");
  client.callProcedure("InsertO1",5,5,"dummy","dummy");
  client.callProcedure("InsertO1",1,5,"dummy1","dummy");
  client.callProcedure("InsertO1",4,2,"dummy","dummy");
  client.callProcedure("InsertO1",3,1,"dummy","dummy");
  client.callProcedure("InsertO1",2,7,"dummy","dummy");
  client.callProcedure("InsertO1",6,7,"dummy1","dummy");
  client.callProcedure("InsertO1",7,8,"dummy","dummy");
  client.callProcedure("InsertO3",1,1,7,7);
  client.callProcedure("InsertO3",2,2,7,7);
  client.callProcedure("InsertO3",3,3,8,8);
  client.callProcedure("InsertO3",4,4,1,1);
  client.callProcedure("InsertO3",10,10,10,10);
  String sql;
  sql="SELECT PKEY FROM O1 ORDER BY PKEY DESC";
  VoltTable vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  long[][] expected=new long[][]{{7},{6},{5},{4},{3},{2},{1}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="SELECT PKEY FROM O1 ORDER BY PKEY DESC LIMIT 3 OFFSET 3";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{4},{3},{2}};
  validateTableOfLongs(vt,expected);
  sql="SELECT A_INT, PKEY FROM O1 ORDER BY A_INT DESC, PKEY DESC LIMIT 3";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{8,7},{7,6},{7,2}};
  validateTableOfLongs(vt,expected);
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
  sql="SELECT O1.A_INT FROM O1, O3 WHERE O1.A_INT = O3.I3 ORDER BY O1.A_INT";
  vt=client.callProcedure("@AdHoc",sql).getResults()[0];
  expected=new long[][]{{1},{7},{7},{7},{7},{8}};
  vt=client.callProcedure("@Explain",sql).getResults()[0];
  assertTrue(vt.toString().contains("MERGE RECEIVE"));
}
