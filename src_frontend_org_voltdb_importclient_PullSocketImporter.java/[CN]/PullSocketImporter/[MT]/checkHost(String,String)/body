{
  Matcher mtc=HOST_RE.matcher(hspec);
  if (!mtc.matches()) {
    throw loggedException(null,"host spec %s is malformed",hspec);
  }
  int port=Integer.parseInt(mtc.group("port"));
  int tail=port;
  if (mtc.group("tail") != null) {
    tail=Integer.parseInt(mtc.group("tail"));
  }
  if (port > tail) {
    throw loggedException(null,"invalid port range in host spec %s",hspec);
  }
  ImmutableMap.Builder<URI,String> mbldr=ImmutableMap.builder();
  for (int p=port; p <= tail; ++p) {
    InetAddress a;
    try {
      a=InetAddress.getByName(mtc.group("host"));
    }
 catch (    UnknownHostException e) {
      throw loggedException(e,"failed to resolve host %s",mtc.group("host"));
    }
    InetSocketAddress sa=new InetSocketAddress(a,p);
    mbldr.put(URI.create("tcp://" + sa.getHostString() + ":"+ sa.getPort()+ "/"),procedure);
  }
  return mbldr.build();
}
