{
  if (key == null) {
    Object oldValue=_nullValue;
    _nullValue=value;
    if (_nullEntry == null) {
      _nullEntry=new NullEntry();
      _entrySet.add(_nullEntry);
    }
    return oldValue;
  }
  Node node=_root;
  int ni=-1;
  Node prev=null;
  Node parent=null;
  charLoop:   for (int i=0; i < key.length(); i++) {
    char c=key.charAt(i);
    if (ni == -1) {
      parent=node;
      prev=null;
      ni=0;
      node=(node._children == null) ? null : node._children[c % _width];
    }
    while (node != null) {
      if (node._char[ni] == c || _ignoreCase && node._ochar[ni] == c) {
        prev=null;
        ni++;
        if (ni == node._char.length)         ni=-1;
        continue charLoop;
      }
      if (ni == 0) {
        prev=node;
        node=node._next;
      }
 else {
        node.split(this,ni);
        i--;
        ni=-1;
        continue charLoop;
      }
    }
    node=new Node(_ignoreCase,key,i);
    if (prev != null)     prev._next=node;
 else     if (parent != null) {
      if (parent._children == null)       parent._children=new Node[_width];
      parent._children[c % _width]=node;
      int oi=node._ochar[0] % _width;
      if (node._ochar != null && node._char[0] % _width != oi) {
        if (parent._children[oi] == null)         parent._children[oi]=node;
 else {
          Node n=parent._children[oi];
          while (n._next != null)           n=n._next;
          n._next=node;
        }
      }
    }
 else     _root=node;
    break;
  }
  if (node != null) {
    if (ni > 0)     node.split(this,ni);
    Object old=node._value;
    node._key=key;
    node._value=value;
    _entrySet.add(node);
    return old;
  }
  return null;
}
