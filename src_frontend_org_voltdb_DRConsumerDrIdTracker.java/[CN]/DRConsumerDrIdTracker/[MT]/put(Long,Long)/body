{
  Map.Entry<Long,Long> nextEntry=m_map.higherEntry(endDrId);
  Map.Entry<Long,Long> prevEntry=m_map.lowerEntry(startDrId);
  assert(!m_map.containsKey(startDrId));
  if (prevEntry != null && prevEntry.getValue() + 1 == startDrId) {
    if (nextEntry != null && endDrId + 1 == nextEntry.getKey()) {
      m_map.remove(nextEntry.getKey());
      m_map.put(prevEntry.getKey(),nextEntry.getValue());
    }
 else {
      assert(nextEntry == null || endDrId < nextEntry.getKey());
      m_map.put(prevEntry.getKey(),endDrId);
    }
  }
 else {
    assert(prevEntry == null || prevEntry.getValue() < startDrId);
    if (nextEntry != null && endDrId + 1 == nextEntry.getKey()) {
      m_map.remove(nextEntry.getKey());
      m_map.put(startDrId,nextEntry.getValue());
    }
 else {
      assert(nextEntry == null || endDrId < nextEntry.getKey());
      m_map.put(startDrId,endDrId);
    }
  }
}
