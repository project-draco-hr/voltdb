{
  return new ForwardingNavigableSet<E>(){
    @Override protected NavigableSet<E> delegate(){
      return set;
    }
    @Override public boolean add(    E element){
      throw new UnsupportedOperationException();
    }
    @Override public boolean addAll(    Collection<? extends E> es){
      throw new UnsupportedOperationException();
    }
    @Override public SortedSet<E> headSet(    E toElement){
      return removeOnlySortedSet(super.headSet(toElement));
    }
    @Override public SortedSet<E> subSet(    E fromElement,    E toElement){
      return removeOnlySortedSet(super.subSet(fromElement,toElement));
    }
    @Override public SortedSet<E> tailSet(    E fromElement){
      return removeOnlySortedSet(super.tailSet(fromElement));
    }
    @Override public NavigableSet<E> headSet(    E toElement,    boolean inclusive){
      return removeOnlyNavigableSet(super.headSet(toElement,inclusive));
    }
    @Override public NavigableSet<E> tailSet(    E fromElement,    boolean inclusive){
      return removeOnlyNavigableSet(super.tailSet(fromElement,inclusive));
    }
    @Override public NavigableSet<E> subSet(    E fromElement,    boolean fromInclusive,    E toElement,    boolean toInclusive){
      return removeOnlyNavigableSet(super.subSet(fromElement,fromInclusive,toElement,toInclusive));
    }
    @Override public NavigableSet<E> descendingSet(){
      return removeOnlyNavigableSet(super.descendingSet());
    }
  }
;
}
