{
  Expression e;
  e=XreadUnsignedValueSpecificationOrNull();
  if (e != null) {
    return e;
  }
switch (token.tokenType) {
case Tokens.OPENBRACKET:
    int position=getPosition();
  read();
int subqueryPosition=getPosition();
readOpenBrackets();
switch (token.tokenType) {
case Tokens.TABLE:
case Tokens.VALUES:
case Tokens.SELECT:
SubQuery sq=null;
rewind(subqueryPosition);
try {
sq=XreadSubqueryBody(false,OpTypes.SCALAR_SUBQUERY);
readThis(Tokens.CLOSEBRACKET);
}
 catch (HsqlException ex) {
compileContext.resetSubQueryLevel();
ex.setLevel(compileContext.subQueryDepth);
if (lastError == null || lastError.getLevel() < ex.getLevel()) {
lastError=ex;
}
rewind(position);
return null;
}
SubQuery td=sq;
if (td.queryExpression.isSingleColumn()) {
e=new Expression(OpTypes.SCALAR_SUBQUERY,td);
}
 else {
e=new Expression(OpTypes.ROW_SUBQUERY,td);
}
return e;
default :
rewind(position);
return null;
}
case Tokens.ASTERISK:
e=new ExpressionColumn(token.namePrePrefix,token.namePrefix);
recordExpressionForToken((ExpressionColumn)e);
read();
return e;
case Tokens.CASEWHEN:
return readCaseWhenExpression();
case Tokens.CASE:
return readCaseExpression();
case Tokens.NULLIF:
return readNullIfExpression();
case Tokens.COALESCE:
case Tokens.IFNULL:
return readCoalesceExpression();
case Tokens.CAST:
case Tokens.CONVERT:
return readCastExpression();
case Tokens.DATE:
case Tokens.TIME:
case Tokens.TIMESTAMP:
case Tokens.INTERVAL:
e=readDateTimeIntervalLiteral();
if (e != null) {
return e;
}
break;
case Tokens.ANY:
case Tokens.SOME:
case Tokens.EVERY:
case Tokens.COUNT:
case Tokens.MAX:
case Tokens.MIN:
case Tokens.SUM:
case Tokens.AVG:
case Tokens.STDDEV_POP:
case Tokens.STDDEV_SAMP:
case Tokens.VAR_POP:
case Tokens.VAR_SAMP:
return readAggregate();
case Tokens.NEXT:
return readSequenceExpression();
case Tokens.LEFT:
case Tokens.RIGHT:
break;
default :
if (isCoreReservedKey()) {
throw unexpectedToken();
}
}
return readColumnOrFunctionExpression();
}
