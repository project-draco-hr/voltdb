{
  Expression e1=null;
  Expression e2=null;
  if (token.tokenType == Tokens.LIMIT) {
    int position=getPosition();
    read();
    e1=XreadSimpleValueSpecificationOrNull();
    if (e1 == null) {
      super.rewind(position);
      return null;
    }
    e2=XreadSimpleValueSpecificationOrNull();
    if (e2 == null) {
      throw Error.error(ErrorCode.X_42565,ErrorCode.INVALID_LIMIT);
    }
  }
 else   if (token.tokenType == Tokens.TOP) {
    int position=getPosition();
    read();
    e2=XreadSimpleValueSpecificationOrNull();
    if (e2 == null) {
      super.rewind(position);
      return null;
    }
    e1=new ExpressionValue(ValuePool.INTEGER_0,Type.SQL_INTEGER);
  }
  boolean valid=true;
  if (e1.isParam) {
    e1.setDataType(session,Type.SQL_INTEGER);
  }
 else {
    valid=(e1.getDataType().typeCode == Types.SQL_INTEGER && ((Integer)e1.getValue(null)).intValue() >= 0);
  }
  if (e2.isParam) {
    e2.setDataType(session,Type.SQL_INTEGER);
  }
 else {
    valid&=(e2.getDataType().typeCode == Types.SQL_INTEGER && ((Integer)e2.getValue(null)).intValue() >= 0);
  }
  if (valid) {
    SortAndSlice sortAndSlice=new SortAndSlice();
    sortAndSlice.addLimitCondition(new ExpressionOp(OpTypes.LIMIT,e1,e2));
    return sortAndSlice;
  }
  throw Error.error(ErrorCode.X_42565,ErrorCode.INVALID_LIMIT);
}
