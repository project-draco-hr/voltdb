{
  boolean hasNot=false;
  ExpressionLogical e=null;
  Expression r;
  if (token.tokenType == Tokens.NOT) {
    read();
    hasNot=true;
  }
switch (token.tokenType) {
case Tokens.IS:
{
      if (hasNot) {
        throw unexpectedToken();
      }
      read();
      if (token.tokenType == Tokens.NOT) {
        hasNot=true;
        read();
      }
      if (token.tokenType == Tokens.DISTINCT) {
        read();
        readThis(Tokens.FROM);
        r=XreadRowValuePredicand();
        e=new ExpressionLogical(OpTypes.NOT_DISTINCT,l,r);
        hasNot=!hasNot;
        break;
      }
      if (token.tokenType == Tokens.NULL || token.tokenType == Tokens.UNKNOWN) {
        read();
        e=new ExpressionLogical(OpTypes.IS_NULL,l);
        break;
      }
      throw unexpectedToken();
    }
case Tokens.LIKE:
{
    e=XreadLikePredicateRightPart(l);
    e.noOptimisation=isCheckOrTriggerCondition;
    break;
  }
case Tokens.BETWEEN:
{
  e=XreadBetweenPredicateRightPart(l);
  break;
}
case Tokens.IN:
{
e=XreadInPredicateRightPart(l);
e.noOptimisation=isCheckOrTriggerCondition;
break;
}
case Tokens.OVERLAPS:
{
if (hasNot) {
throw unexpectedToken();
}
e=XreadOverlapsPredicateRightPart(l);
break;
}
case Tokens.EQUALS:
case Tokens.GREATER_EQUALS:
case Tokens.GREATER:
case Tokens.LESS:
case Tokens.LESS_EQUALS:
case Tokens.NOT_EQUALS:
{
if (hasNot) {
throw unexpectedToken();
}
int type=getExpressionType(token.tokenType);
read();
switch (token.tokenType) {
case Tokens.ANY:
case Tokens.SOME:
case Tokens.ALL:
e=XreadQuantifiedComparisonRightPart(type,l);
break;
default :
{
Expression row=XreadRowValuePredicand();
e=new ExpressionLogical(type,l,row);
break;
}
}
break;
}
case Tokens.MATCH:
{
e=XreadMatchPredicateRightPart(l);
break;
}
default :
{
if (hasNot) {
throw unexpectedToken();
}
return l;
}
}
if (hasNot) {
e=new ExpressionLogical(OpTypes.NOT,e);
}
return e;
}
