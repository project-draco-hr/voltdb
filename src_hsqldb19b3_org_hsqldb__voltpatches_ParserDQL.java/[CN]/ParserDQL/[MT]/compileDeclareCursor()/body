{
  int sensitivity=0;
  int scrollability=0;
  int holdability=0;
  int returnability=0;
  readThis(Tokens.DECLARE);
  readNewSchemaObjectName(SchemaObject.CURSOR);
switch (token.tokenType) {
case Tokens.SENSITIVE:
    read();
  break;
case Tokens.INSENSITIVE:
read();
break;
case Tokens.ASENSITIVE:
read();
break;
}
if (token.tokenType == Tokens.NO) {
readThis(Tokens.SCROLL);
}
 else {
if (token.tokenType == Tokens.SCROLL) {
read();
}
}
readThis(Tokens.CURSOR);
for (int round=0; round < 2; round++) {
if (token.tokenType == Tokens.WITH) {
read();
if (round == 0 && token.tokenType == Tokens.HOLD) {
read();
}
 else {
readThis(Tokens.RETURN);
round++;
}
}
 else if (token.tokenType == Tokens.WITHOUT) {
read();
if (round == 0 && token.tokenType == Tokens.HOLD) {
read();
}
 else {
readThis(Tokens.RETURN);
round++;
}
}
}
StatementDMQL cs=compileCursorSpecification();
return cs;
}
