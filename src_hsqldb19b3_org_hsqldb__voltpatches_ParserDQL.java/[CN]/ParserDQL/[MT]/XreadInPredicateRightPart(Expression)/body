{
  int degree=l.getDegree();
  Expression e=null;
  read();
  if (token.tokenType == Tokens.QUESTION && !isCheckOrTriggerCondition) {
    read();
    e=new ExpressionColumn(OpTypes.DYNAMIC_PARAM);
    compileContext.parameters.add(e);
    e.nodeDataTypes=new Type[degree];
    ExpressionLogical r=new ExpressionLogical(OpTypes.EQUAL,l,e);
    r.exprSubType=OpTypes.ANY_QUANTIFIED;
    return r;
  }
  readThis(Tokens.OPENBRACKET);
  int position=getPosition();
  readOpenBrackets();
switch (token.tokenType) {
case Tokens.TABLE:
case Tokens.VALUES:
case Tokens.SELECT:
{
      rewind(position);
      SubQuery sq=XreadSubqueryBody(false,OpTypes.IN);
      e=new Expression(OpTypes.TABLE_SUBQUERY,sq);
      readThis(Tokens.CLOSEBRACKET);
      break;
    }
default :
{
    rewind(position);
    e=XreadInValueListConstructor(degree);
    readThis(Tokens.CLOSEBRACKET);
    break;
  }
}
ExpressionLogical r;
if (isCheckOrTriggerCondition) {
r=new ExpressionLogical(OpTypes.IN,l,e);
}
 else {
r=new ExpressionLogical(OpTypes.EQUAL,l,e);
r.exprSubType=OpTypes.ANY_QUANTIFIED;
}
return r;
}
