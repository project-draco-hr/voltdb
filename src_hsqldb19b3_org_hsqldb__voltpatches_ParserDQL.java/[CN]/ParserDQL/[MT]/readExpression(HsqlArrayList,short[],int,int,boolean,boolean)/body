{
  for (int i=start; i < start + count; i++) {
    int exprType=parseList[i];
switch (exprType) {
case Tokens.QUESTION:
{
        Expression e=null;
        e=XreadAllTypesCommonValueExpression(false);
        exprList.add(e);
        continue;
      }
case Tokens.X_POS_INTEGER:
{
      Expression e=null;
      int integer=readInteger();
      if (integer < 0) {
        throw Error.error(ErrorCode.X_42592);
      }
      e=new ExpressionValue(ValuePool.getInt(integer),Type.SQL_INTEGER);
      exprList.add(e);
      continue;
    }
case Tokens.X_OPTION:
{
    i++;
    int expressionCount=exprList.size();
    int position=getPosition();
    int elementCount=parseList[i++];
    int initialExprIndex=exprList.size();
    HsqlException ex=null;
    try {
      ex=readExpression(exprList,parseList,i,elementCount,true,false);
    }
 catch (    HsqlException caught) {
      ex=caught;
    }
    if (ex != null) {
      ex.setLevel(compileContext.subQueryDepth);
      if (lastError == null || lastError.getLevel() < ex.getLevel()) {
        lastError=ex;
      }
      rewind(position);
      exprList.setSize(expressionCount);
      for (int j=i; j < i + elementCount; j++) {
        if (parseList[j] == Tokens.QUESTION || parseList[j] == Tokens.X_KEYSET || parseList[j] == Tokens.X_POS_INTEGER) {
          exprList.add(null);
        }
      }
      i+=elementCount - 1;
      continue;
    }
    if (initialExprIndex == exprList.size()) {
      exprList.add(null);
    }
    i+=elementCount - 1;
    continue;
  }
case Tokens.X_REPEAT:
{
  i++;
  int elementCount=parseList[i++];
  int parseIndex=i;
  while (true) {
    int initialExprIndex=exprList.size();
    if (preferToThrow) {
      readExpression(exprList,parseList,parseIndex,elementCount,true,true);
    }
 else {
      HsqlException ex=null;
      try {
        ex=readExpression(exprList,parseList,parseIndex,elementCount,true,false);
      }
 catch (      HsqlException caught) {
        ex=caught;
      }
      if (ex != null) {
        if (ex.getMessage().equalsIgnoreCase("unexpected token: )")) {
          break;
        }
        return ex;
      }
    }
    if (exprList.size() == initialExprIndex) {
      break;
    }
  }
  i+=elementCount - 1;
  continue;
}
case Tokens.X_KEYSET:
{
int elementCount=parseList[++i];
Expression e=null;
if (ArrayUtil.find(parseList,token.tokenType,i + 1,elementCount) == -1) {
  if (!isOption) {
    if (!preferToThrow) {
      return unexpectedToken();
    }
    throw unexpectedToken();
  }
}
 else {
  e=new ExpressionValue(ValuePool.getInt(token.tokenType),Type.SQL_INTEGER);
  read();
}
exprList.add(e);
i+=elementCount;
continue;
}
case Tokens.OPENBRACKET:
case Tokens.CLOSEBRACKET:
case Tokens.COMMA:
default :
if (token.tokenType != exprType) {
if (!preferToThrow) {
return unexpectedToken();
}
throw unexpectedToken();
}
read();
continue;
}
}
return null;
}
