{
  int tokenT=token.tokenType;
  int exprSubType=0;
  Expression e;
switch (token.tokenType) {
case Tokens.ANY:
case Tokens.SOME:
    exprSubType=OpTypes.ANY_QUANTIFIED;
  break;
case Tokens.ALL:
exprSubType=OpTypes.ALL_QUANTIFIED;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"Parser");
}
read();
readThis(Tokens.OPENBRACKET);
int position=getPosition();
readOpenBrackets();
switch (token.tokenType) {
case Tokens.TABLE:
case Tokens.VALUES:
case Tokens.SELECT:
rewind(position);
SubQuery sq=XreadSubqueryBody(false,OpTypes.IN);
e=new Expression(OpTypes.TABLE_SUBQUERY,sq);
readThis(Tokens.CLOSEBRACKET);
break;
default :
rewind(position);
e=readAggregateExpression(tokenT);
if (e == null) {
throw Error.error("Unsupported aggregate expression " + Tokens.getKeyword(tokenT),"",0);
}
readThis(Tokens.CLOSEBRACKET);
}
ExpressionLogical r=new ExpressionLogical(exprType,l,e);
r.exprSubType=exprSubType;
return r;
}
