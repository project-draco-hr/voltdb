{
  Expression e=readRow();
  Expression[] list=e.nodes;
  boolean isTable=false;
  if (degree == 1) {
    if (e.getType() == OpTypes.ROW) {
      e.opType=OpTypes.TABLE;
      for (int i=0; i < list.length; i++) {
        if (list[i].getType() != OpTypes.ROW) {
          list[i]=new Expression(OpTypes.ROW,new Expression[]{list[i]});
        }
 else         if (list[i].nodes.length != degree) {
          throw Error.error(ErrorCode.X_42564);
        }
      }
      return e;
    }
 else {
      e=new Expression(OpTypes.ROW,new Expression[]{e});
      e=new Expression(OpTypes.TABLE,new Expression[]{e});
      return e;
    }
  }
  if (e.getType() != OpTypes.ROW) {
    throw Error.error(ErrorCode.X_42564);
  }
  for (int i=0; i < list.length; i++) {
    if (list[i].getType() == OpTypes.ROW) {
      isTable=true;
      break;
    }
  }
  if (isTable) {
    e.opType=OpTypes.TABLE;
    for (int i=0; i < list.length; i++) {
      if (list[i].getType() != OpTypes.ROW) {
        throw Error.error(ErrorCode.X_42564);
      }
      Expression[] args=list[i].nodes;
      if (args.length != degree) {
        throw Error.error(ErrorCode.X_42564);
      }
      for (int j=0; j < degree; j++) {
        if (args[j].getType() == OpTypes.ROW) {
          throw Error.error(ErrorCode.X_42564);
        }
      }
    }
  }
 else {
    if (list.length != degree) {
      throw Error.error(ErrorCode.X_42564);
    }
    e=new Expression(OpTypes.TABLE,new Expression[]{e});
  }
  return e;
}
