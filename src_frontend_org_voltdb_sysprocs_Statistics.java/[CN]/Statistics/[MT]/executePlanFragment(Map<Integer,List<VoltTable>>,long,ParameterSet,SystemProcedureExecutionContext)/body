{
  if (fragmentId == SysProcFragmentId.PF_tableData) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    CatalogMap<Table> tables=context.getDatabase().getTables();
    int[] tableGuids=new int[tables.size()];
    int ii=0;
    for (    Table table : tables) {
      tableGuids[ii++]=table.getRelativeIndex();
    }
    VoltTable result=context.getSiteProcedureConnection().getStats(SysProcSelector.TABLE,tableGuids,interval,now)[0];
    return new DependencyPair(DEP_tableData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_tableAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_tableData));
    return new DependencyPair(DEP_tableAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_indexData) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    CatalogMap<Table> tables=context.getDatabase().getTables();
    int[] tableGuids=new int[tables.size()];
    int ii=0;
    for (    Table table : tables) {
      tableGuids[ii++]=table.getRelativeIndex();
    }
    VoltTable result=context.getSiteProcedureConnection().getStats(SysProcSelector.INDEX,tableGuids,interval,now)[0];
    return new DependencyPair(DEP_indexData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_indexAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_indexData));
    return new DependencyPair(DEP_indexAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_procedureData) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    ArrayList<Long> catalogIds=new ArrayList<Long>();
    catalogIds.add(context.getSiteId());
    VoltTable result=VoltDB.instance().getStatsAgent().getStats(SysProcSelector.PROCEDURE,catalogIds,interval,now);
    return new DependencyPair(DEP_procedureData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_procedureAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_procedureData));
    return new DependencyPair(DEP_procedureAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_plannerData) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    VoltTable result=VoltDB.instance().getStatsAgent().getSiteAndHostStats(SysProcSelector.PLANNER,interval,now,context.getSiteId());
    return new DependencyPair(DEP_plannerData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_plannerAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_plannerData));
    return new DependencyPair(DEP_plannerAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_starvationData) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    ArrayList<Long> catalogIds=new ArrayList<Long>();
    catalogIds.add(context.getSiteId());
    VoltTable result=VoltDB.instance().getStatsAgent().getStats(SysProcSelector.STARVATION,catalogIds,interval,now);
    return new DependencyPair(DEP_starvationData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_starvationDataAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_starvationData));
    return new DependencyPair(DEP_starvationDataAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_initiatorData) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    ArrayList<Long> catalogIds=new ArrayList<Long>();
    catalogIds.add(0L);
    VoltTable result=VoltDB.instance().getStatsAgent().getStats(SysProcSelector.INITIATOR,catalogIds,interval,now);
    if (!context.isLowestSiteId()) {
      result.clearRowData();
    }
    return new DependencyPair(DEP_initiatorData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_initiatorAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_initiatorData));
    return new DependencyPair(DEP_initiatorAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_nodeMemory) {
    assert(params.toArray().length == 2);
    final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
    final Long now=(Long)params.toArray()[1];
    ArrayList<Long> catalogIds=new ArrayList<Long>();
    catalogIds.add(0L);
    VoltTable result=VoltDB.instance().getStatsAgent().getStats(SysProcSelector.MEMORY,catalogIds,interval,now);
    if (context.isLowestSiteId()) {
      assert(result.getRowCount() == 1);
    }
 else {
      result.clearRowData();
      assert(result.getRowCount() == 0);
    }
    return new DependencyPair(DEP_nodeMemory,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_nodeMemoryAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_nodeMemory));
    return new DependencyPair(DEP_nodeMemoryAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_partitionCount) {
    VoltTable result=new VoltTable(new VoltTable.ColumnInfo("PARTITION_COUNT",VoltType.INTEGER));
    result.addRow(context.getNumberOfPartitions());
    return new DependencyPair(DEP_partitionCount,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_ioData) {
    final VoltTable result=new VoltTable(ioColumnInfo);
    if (context.isLowestSiteId()) {
      assert(params.toArray() != null);
      assert(params.toArray().length == 2);
      final boolean interval=((Byte)params.toArray()[0]).byteValue() == 0 ? false : true;
      final Long now=(Long)params.toArray()[1];
      try {
        final Map<Long,Pair<String,long[]>> stats=VoltDB.instance().getHostMessenger().getNetwork().getIOStats(interval);
        final Integer hostId=VoltDB.instance().getHostMessenger().getHostId();
        final String hostname=VoltDB.instance().getHostMessenger().getHostname();
        for (        Map.Entry<Long,Pair<String,long[]>> e : stats.entrySet()) {
          final Long connectionId=e.getKey();
          final String remoteHostname=e.getValue().getFirst();
          final long counters[]=e.getValue().getSecond();
          result.addRow(now,hostId,hostname,connectionId,remoteHostname,counters[0],counters[1],counters[2],counters[3]);
        }
      }
 catch (      Exception e) {
        HOST_LOG.warn("Error retrieving stats",e);
      }
    }
    return new DependencyPair(DEP_ioData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_ioDataAggregator) {
    final VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_ioData));
    return new DependencyPair(DEP_ioDataAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_liveClientData) {
    VoltTable result=new VoltTable(LiveClientStats.liveClientColumnInfo);
    if (context.isLowestSiteId()) {
      assert(params.toArray().length == 2);
      final Long now=(Long)params.toArray()[1];
      Map<Long,Pair<String,long[]>> stats=new HashMap<Long,Pair<String,long[]>>();
      for (      ClientInterface ci : VoltDB.instance().getClientInterfaces()) {
        stats.putAll(ci.getLiveClientStats());
      }
      final String hostname=VoltDB.instance().getHostMessenger().getHostname();
      for (      Map.Entry<Long,Pair<String,long[]>> e : stats.entrySet()) {
        final Long connectionId=e.getKey();
        final String remoteHostname=e.getValue().getFirst();
        final long counters[]=e.getValue().getSecond();
        result.addRow(now,context.getHostId(),hostname,connectionId,remoteHostname,counters[0],counters[1],counters[2],counters[3]);
      }
    }
    return new DependencyPair(DEP_liveClientData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_liveClientDataAggregator) {
    VoltTable result=VoltTableUtil.unionTables(dependencies.get(DEP_liveClientData));
    return new DependencyPair(DEP_liveClientDataAggregator,result);
  }
  assert(false);
  return null;
}
