{
  if (fragmentId == SysProcFragmentId.PF_tableData) {
    CatalogMap<Table> tables=context.getDatabase().getTables();
    int[] tableGuids=new int[tables.size()];
    int ii=0;
    for (    Table table : tables) {
      tableGuids[ii++]=table.getRelativeIndex();
    }
    VoltTable result=context.getExecutionEngine().getStats(SysProcSelector.TABLE,tableGuids)[0];
    return new DependencyPair(DEP_tableData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_tableAggregator) {
    VoltTable result=null;
    List<VoltTable> dep=dependencies.get(DEP_tableData);
    VoltTable vt=dep.get(0);
    if (vt != null) {
      VoltTable.ColumnInfo[] columns=new VoltTable.ColumnInfo[vt.getColumnCount()];
      for (int ii=0; ii < vt.getColumnCount(); ii++) {
        columns[ii]=new VoltTable.ColumnInfo(vt.getColumnName(ii),vt.getColumnType(ii));
      }
      result=new VoltTable(columns);
      for (      Object d : dep) {
        vt=(VoltTable)(d);
        while (vt.advanceRow()) {
          result.add(vt);
        }
      }
    }
    return new DependencyPair(DEP_tableAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_procedureData) {
    ArrayList<Integer> catalogIds=new ArrayList<Integer>();
    catalogIds.add(Integer.parseInt(context.getSite().getTypeName()));
    VoltTable result=VoltDB.instance().getStatsAgent().getStats(SysProcSelector.PROCEDURE,catalogIds);
    return new DependencyPair(DEP_procedureData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_procedureAggregator) {
    VoltTable result=null;
    List<VoltTable> dep=dependencies.get(DEP_procedureData);
    VoltTable vt=dep.get(0);
    if (vt != null) {
      VoltTable.ColumnInfo[] columns=new VoltTable.ColumnInfo[vt.getColumnCount()];
      for (int ii=0; ii < vt.getColumnCount(); ii++) {
        columns[ii]=new VoltTable.ColumnInfo(vt.getColumnName(ii),vt.getColumnType(ii));
      }
      result=new VoltTable(columns);
      for (      Object d : dep) {
        vt=(VoltTable)(d);
        while (vt.advanceRow()) {
          result.add(vt);
        }
      }
    }
    return new DependencyPair(DEP_procedureAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_initiatorData) {
    ArrayList<Integer> catalogIds=new ArrayList<Integer>();
    for (int ii=0; ii < InitiatorStats.initiatorIndex.get(); ii++) {
      catalogIds.add(ii);
    }
    VoltTable result=VoltDB.instance().getStatsAgent().getStats(SysProcSelector.INITIATOR,catalogIds);
    return new DependencyPair(DEP_initiatorData,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_initiatorAggregator) {
    VoltTable result=null;
    List<VoltTable> dep=dependencies.get(DEP_initiatorData);
    VoltTable vt=dep.get(0);
    if (vt != null) {
      VoltTable.ColumnInfo[] columns=new VoltTable.ColumnInfo[vt.getColumnCount()];
      for (int ii=0; ii < vt.getColumnCount(); ii++) {
        columns[ii]=new VoltTable.ColumnInfo(vt.getColumnName(ii),vt.getColumnType(ii));
      }
      result=new VoltTable(columns);
      for (      Object d : dep) {
        vt=(VoltTable)(d);
        while (vt.advanceRow()) {
          result.add(vt);
        }
      }
    }
    return new DependencyPair(DEP_initiatorAggregator,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_partitionCount) {
    VoltTable result=new VoltTable(new VoltTable.ColumnInfo("Partition count",VoltType.INTEGER));
    result.addRow(context.getCluster().getPartitions().size());
    return new DependencyPair(DEP_partitionCount,result);
  }
  assert(false);
  return null;
}
