{
  Set<URI> uris=generateURIs(9);
  Set<URI> expected=uris;
  distributers.get(UNO).registerChannels(YO,uris);
  Set<URI> actual=getAdded(9);
  assertEquals(expected,actual);
  Set<URI> pruned=generateURIs(6);
  expected=Sets.difference(uris,pruned);
  distributers.get(DUE).registerChannels(YO,pruned);
  actual=getRemoved(3);
  assertEquals(expected,actual);
  distributers.get(ZERO).registerChannels(YO,pruned);
  assertNull(queue.poll(200,TimeUnit.MILLISECONDS));
  uris=generateURIs(8);
  expected=Sets.difference(uris,pruned);
  distributers.get(UNO).registerChannels(YO,uris);
  actual=getAdded(2);
  assertEquals(expected,actual);
  expected=uris;
  distributers.get(UNO).registerChannels(YO,ImmutableSet.<URI>of());
  actual=getRemoved(8);
  assertEquals(expected,actual);
  int leaderCount=0;
  for (  ChannelDistributer distributer : distributers.values()) {
    if (distributer.m_isLeader) {
      ++leaderCount;
    }
  }
  assertEquals(1,leaderCount);
}
