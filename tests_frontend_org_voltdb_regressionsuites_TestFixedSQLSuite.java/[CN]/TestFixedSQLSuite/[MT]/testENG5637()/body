{
  System.out.println("STARTING testing error message......");
  Client client=getClient();
  int THRESHOLD=100;
  String var1="Voltdb is a great database product";
  try {
    client.callProcedure("@AdHoc",String.format("Insert into VARLENGTH (id, var1) VALUES(%d, '%s')",2,var1));
    fail();
  }
 catch (  Exception ex) {
    assertTrue(ex.getMessage().contains("Value (" + var1 + ") is too wide for a constant varchar value of size 10"));
  }
  try {
    client.callProcedure("@AdHoc",String.format("Insert into VARLENGTH (id, var1) VALUES(%d, '%s' || 'abc')",2,var1));
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains("Value (" + var1 + "abc) is too wide for a constant varchar value of size 10"));
  }
  try {
    client.callProcedure("VARLENGTH.insert",1,var1,null,null,null);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value '%s' exceeds the size of the VARCHAR[\"%d\"] column.",var1.length(),var1,10)));
  }
  String var2="Voltdb is great | Voltdb is great " + "| Voltdb is great | Voltdb is great| Voltdb is great | Voltdb is great" + "| Voltdb is great | Voltdb is great| Voltdb is great | Voltdb is great";
  try {
    client.callProcedure("VARLENGTH.insert",2,null,var2,null,null);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value '%s...' exceeds the size of the VARCHAR[\"%d\"] column.",174,var2.substring(0,THRESHOLD),80)));
  }
  var2="Voltdb is great | Voltdb is great " + "| Voltdb is great | Voltdb is great| Voltdb is great";
  try {
    client.callProcedure("VARLENGTH.insert",21,null,var2,null,null);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value '%s' exceeds the size of the VARCHAR[\"%d\"] column.",86,var2,80)));
  }
  client.callProcedure("VARLENGTH.insert",1,"voltdb",null,null,null);
  try {
    client.callProcedure("VARLENGTH.update",1,var1,null,null,null,1);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value '%s' exceeds the size of the VARCHAR[\"%d\"] column.",var1.length(),var1,10)));
  }
  String bin1="1111111111111111111111000000";
  try {
    client.callProcedure("@AdHoc",String.format("Insert into VARLENGTH (id, bin1) VALUES(%d, '%s')",6,bin1));
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains("Value (" + bin1 + ") is too wide for a constant varbinary value of size 10"));
  }
  try {
    client.callProcedure("VARLENGTH.insert",7,null,null,bin1,null);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value exceeds the size of the VARBINARY[\"%d\"] column.",bin1.length() / 2,10)));
  }
  String bin2="111111111111111111111100000011111111111111111111110000001111111111111111111111000000" + "111111111111111111111100000011111111111111111111110000001111111111111111111111000000" + "111111111111111111111100000011111111111111111111110000001111111111111111111111000000";
  try {
    client.callProcedure("VARLENGTH.insert",2,null,null,null,bin2);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value exceeds the size of the VARBINARY[\"%d\"] column.",bin2.length() / 2,80)));
  }
  client.callProcedure("VARLENGTH.insert",7,null,null,"1010",null);
  try {
    client.callProcedure("VARLENGTH.update",7,null,null,bin1,null,7);
    fail();
  }
 catch (  Exception ex) {
    System.err.println(ex.getMessage());
    assertTrue(ex.getMessage().contains(String.format("The size %d of the value exceeds the size of the VARBINARY[\"%d\"] column.",bin1.length() / 2,10)));
  }
}
