{
  if (isHSQL())   return;
  Client client=getClient();
  for (int i=0; i < 10; ++i) {
    VoltTable vt=client.callProcedure("P1.insert",i,Integer.toString(i),i * 10,i * 100.0).getResults()[0];
    validateTableOfScalarLongs(vt,new long[]{1});
  }
  String[] stringArgs={"7","8"};
  String adHocQueryWithListParam="select id from P1 where desc in ?";
  String adHocQueryWithScalarParam="select id from P1 where desc in (?)";
  VoltTable vt;
  verifyProcFails(client,"Array / Scalar parameter mismatch","@AdHoc",adHocQueryWithListParam,stringArgs);
  verifyProcFails(client,"rhs of IN expression is of a non-list type varchar","@AdHoc",adHocQueryWithListParam,"scalar param");
  verifyProcFails(client,"Array / Scalar parameter mismatch","@AdHoc",adHocQueryWithScalarParam,stringArgs);
  vt=client.callProcedure("@AdHoc",adHocQueryWithScalarParam,"9").getResults()[0];
  validateTableOfScalarLongs(vt,new long[]{9});
  boolean b;
  SimpleCallback callback=new SimpleCallback();
  b=client.callProcedure(callback,"@AdHoc",adHocQueryWithScalarParam,stringArgs);
  assertTrue(b);
  client.drain();
  assertEquals(ClientResponse.GRACEFUL_FAILURE,callback.getClientResponse().getStatus());
  assertTrue(callback.getClientResponse().getStatusString().contains("Array / Scalar parameter mismatch"));
  b=client.callProcedure(callback,"@AdHoc",adHocQueryWithListParam,stringArgs);
  assertTrue(b);
  client.drain();
  assertEquals(ClientResponse.GRACEFUL_FAILURE,callback.getClientResponse().getStatus());
  assertTrue(callback.getClientResponse().getStatusString().contains("Array / Scalar parameter mismatch"));
}
