{
  System.out.println("STARTING testTicketENG1850_WhereOrderBy");
  ProcedureCallback callback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        throw new RuntimeException("Failed with response: " + clientResponse.getStatusString());
      }
    }
  }
;
  Client client=getClient();
  int cid=0;
  do {
    for (int aid=0; aid < 5; aid++) {
      int pid=cid % 10;
      client.callProcedure(callback,"ENG1850.insert",cid++,aid,pid,(pid + aid));
    }
  }
 while (cid < 1000);
  client.drain();
  VoltTable r1=client.callProcedure("@AdHoc","select count(*) from ENG1850;").getResults()[0];
  assertEquals(1000,r1.asScalarLong());
  VoltTable r2=client.callProcedure("@AdHoc","select count(*) from ENG1850 where pid =2;").getResults()[0];
  assertEquals(100,r2.asScalarLong());
  VoltTable r3=client.callProcedure("@AdHoc","select * from ENG1850 where pid = 2 limit 1;").getResults()[0];
  assertEquals(1,r3.getRowCount());
  VoltTable r4=client.callProcedure("@AdHoc","select * from ENG1850 where pid = 2 order by pid, aid").getResults()[0];
  assertEquals(100,r4.getRowCount());
  VoltTable r5=client.callProcedure("@AdHoc","select * from ENG1850 where pid = 2 order by pid, aid limit 1").getResults()[0];
  assertEquals(1,r5.getRowCount());
  truncateTables(client,"ENG1850");
}
