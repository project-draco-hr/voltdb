def deserialize(self, fser):
    self.length = fser.readInt32()
    if (self.length == 0):
        self.type = self.VOLTEXCEPTION_NONE
        return
    self.type = fser.readByte()
    if (self.type == self.VOLTEXCEPTION_NONE):
        return
    self.message = []
    self.message_len = fser.readInt32()
    for i in xrange(0, self.message_len):
        self.message.append(chr(fser.readByte()))
    self.message = ''.join(self.message)
    if (self.type == self.VOLTEXCEPTION_GENERIC):
        print 'Python client got a generic serializable exception:', self.message
    elif (self.type == self.VOLTEXCEPTION_EEEXCEPTION):
        self.error_code = fser.readInt32()
        print ('Exception was a Volt EE Exception, error code: %d' % self.error_code)
    elif ((self.type == self.VOLTEXCEPTION_SQLEXCEPTION) or (self.type == self.VOLTEXCEPTION_CONSTRAINTFAILURE)):
        self.sql_state_bytes = []
        for i in xrange(0, 5):
            self.sql_state_bytes.append(chr(fser.readByte()))
        self.sql_state_bytes = ''.join(self.sql_state_bytes)
        if (self.type == self.VOLTEXCEPTION_SQLEXCEPTION):
            print 'Exception was a Volt SQL Exception ', self.sql_state_bytes
        else:
            self.constraint_type = fser.readInt32()
            self.table_name = fser.readString()
            self.buffer_size = fser.readInt32()
            self.buffer = []
            for i in xrange(0, self.buffer_size):
                self.buffer.append(fser.readByte())
            print ('Exception was a Volt Constraint Failure Exception of type %d on table ID %s' % (self.constraint_type, self.table_name))
    else:
        for i in xrange(0, (((self.length - 3) - 2) - self.message_len)):
            fser.readByte()
        print 'Python client deserialized unknown VoltException.'
