def readDecimal(self):
    offset = (16 * struct.calcsize('b'))
    if (self.rbuf[:offset] == self.NULL_DECIMAL_INDICATOR):
        self.rbuf = self.rbuf[offset:]
        return None
    val = list(struct.unpack(self.ubyteType(16), self.rbuf[:offset]))
    self.rbuf = self.rbuf[offset:]
    mostSignificantBit = (1 << 7)
    isNegative = ((val[0] & mostSignificantBit) != 0)
    val[0] &= mostSignificantBit
    unscaledValue = 0
    for x in xrange(1, 16):
        unscaledValue += (val[x] << ((15 - x) * 8))
    unscaledValue = tuple(str(unscaledValue))
    unscaledValueDigits = []
    for x in unscaledValue:
        unscaledValueDigits.append(int(x))
    return decimal.Decimal((isNegative, tuple(unscaledValueDigits), (- self.__class__.DEFAULT_DECIMAL_SCALE)))
