{
  assert(costModel != null);
  assert(sql != null);
  assert(stmtName != null);
  assert(procName != null);
  m_recentErrorMsg=null;
  AbstractPlanNode.resetPlanNodeIds();
  VoltXMLElement xmlSQL=null;
  try {
    xmlSQL=m_HSQL.getXMLCompiledStatement(sql);
  }
 catch (  HSQLParseException e) {
    m_recentErrorMsg=e.getMessage();
    return null;
  }
  if (!m_quietPlanner && m_fullDebug) {
    outputCompiledStatement(stmtName,procName,xmlSQL);
  }
  if (parameterize) {
    VoltXMLElement parameterizedXmlSQL=xmlSQL.duplicate();
    Parameterizer pzer=new Parameterizer(parameterizedXmlSQL);
    int preExistingParams=pzer.countParams();
    if (preExistingParams == 0) {
      Object[] extractedParams=null;
      extractedParams=pzer.parameterize();
      if (!m_quietPlanner && m_fullDebug) {
        outputParameterizedCompiledStatement(stmtName,procName,xmlSQL);
      }
      try {
        CompiledPlan plan=compileFromXML(parameterizedXmlSQL,costModel,sql,joinOrder,stmtName,procName,maxTablesPerJoin,paramHints);
        for (int i=0; i < plan.parameters.length; i++) {
          extractedParams[i]=Parameterizer.valueForStringWithType((String)extractedParams[i],plan.parameters[i]);
        }
        plan.extractedParamValues.setParameters(extractedParams);
        if (m_partitioning.effectivePartitioningValue() == null) {
          AbstractExpression expr=m_partitioning.effectivePartitioningExpression();
          if (expr != null) {
            if (expr instanceof ParameterValueExpression) {
              ParameterValueExpression pve=(ParameterValueExpression)expr;
              Object partitionValue=plan.extractedParamValues.toArray()[pve.getParameterIndex()];
              plan.setPartitioningKey(partitionValue);
            }
          }
        }
        return plan;
      }
 catch (      Exception e) {
      }
    }
  }
  return compileFromXML(xmlSQL,costModel,sql,joinOrder,stmtName,procName,maxTablesPerJoin,paramHints);
}
