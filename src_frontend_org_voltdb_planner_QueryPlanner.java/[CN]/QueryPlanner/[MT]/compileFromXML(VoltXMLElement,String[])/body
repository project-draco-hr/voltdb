{
  AbstractParsedStmt parsedStmt=AbstractParsedStmt.parse(m_sql,xmlSQL,paramValues,m_db,m_joinOrder);
  if (parsedStmt == null) {
    m_recentErrorMsg="Failed to parse SQL statement: " + getOriginalSql();
    return null;
  }
  if (m_isUpsert) {
    if (parsedStmt.m_tableList.size() != 1) {
      m_recentErrorMsg="UPSERT is support only with one single table: " + getOriginalSql();
      return null;
    }
    Table tb=parsedStmt.m_tableList.get(0);
    Constraint pkey=null;
    for (    Constraint ct : tb.getConstraints()) {
      if (ct.getType() == ConstraintType.PRIMARY_KEY.getValue()) {
        pkey=ct;
        break;
      }
    }
    if (pkey == null) {
      m_recentErrorMsg="Unsupported UPSERT table without primary key: " + getOriginalSql();
      return null;
    }
  }
  m_planSelector.outputParsedStatement(parsedStmt);
  PlanAssembler assembler=new PlanAssembler(m_cluster,m_db,m_partitioning,(PlanSelector)m_planSelector.clone());
  CompiledPlan bestPlan=assembler.getBestCostPlan(parsedStmt);
  if (bestPlan == null) {
    if (m_debuggingStaticModeToRetryOnError) {
      assembler.getBestCostPlan(parsedStmt);
    }
    m_recentErrorMsg=assembler.getErrorMessage();
    if (m_recentErrorMsg == null) {
      m_recentErrorMsg="Unable to plan for statement. Error unknown.";
    }
    return null;
  }
  if (bestPlan.isReadOnly()) {
    SendPlanNode sendNode=new SendPlanNode();
    sendNode.addAndLinkChild(bestPlan.rootPlanGraph);
    bestPlan.rootPlanGraph=sendNode;
  }
  bestPlan.rootPlanGraph.generateOutputSchema(m_db);
  bestPlan.rootPlanGraph.resolveColumnIndexes();
  if (parsedStmt instanceof ParsedSelectStmt) {
    List<SchemaColumn> columns=bestPlan.rootPlanGraph.getOutputSchema().getColumns();
    ((ParsedSelectStmt)parsedStmt).checkPlanColumnMatch(columns);
  }
  assembler.finalizeBestCostPlan();
  bestPlan.resetPlanNodeIds(1);
  List<AbstractPlanNode> receives=bestPlan.rootPlanGraph.findAllNodesOfClass(AbstractReceivePlanNode.class);
  if (receives.size() > 1) {
    m_recentErrorMsg="This join of multiple partitioned tables is too complex. " + "Consider simplifying its subqueries: " + getOriginalSql();
    return null;
  }
  if (receives.size() == 1) {
    AbstractReceivePlanNode recvNode=(AbstractReceivePlanNode)receives.get(0);
    fragmentize(bestPlan,recvNode);
  }
  return bestPlan;
}
