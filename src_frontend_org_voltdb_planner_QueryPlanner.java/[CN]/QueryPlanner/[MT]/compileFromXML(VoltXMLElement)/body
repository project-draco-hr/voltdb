{
  AbstractParsedStmt parsedStmt=AbstractParsedStmt.parse(m_sql,xmlSQL,m_db,m_joinOrder);
  if (parsedStmt == null) {
    m_recentErrorMsg="Failed to parse SQL statement: " + m_sql;
    return null;
  }
  if ((parsedStmt.tableList.size() > m_maxTablesPerJoin) && (parsedStmt.joinOrder == null)) {
    m_recentErrorMsg="Failed to parse SQL statement: " + m_sql + " because a join of > 5 tables was requested"+ " without specifying a join order. See documentation for instructions on manually"+ " specifying a join order";
    return null;
  }
  if (!m_quietPlanner && m_fullDebug) {
    outputParsedStatement(parsedStmt);
  }
  CompiledPlan rawplan=null;
  CompiledPlan bestPlan=null;
  String bestFilename=null;
  double minCost=Double.MAX_VALUE;
  int planCounter=0;
  PlanStatistics stats=null;
  m_assembler.setupForNewPlans(parsedStmt);
  while (true) {
    try {
      rawplan=m_assembler.getNextPlan();
    }
 catch (    PlanningErrorException e) {
      m_recentErrorMsg=e.getMessage();
      return null;
    }
    if (rawplan == null)     break;
    List<CompiledPlan> optimizedPlans=MicroOptimizationRunner.applyAll(rawplan);
    for (    CompiledPlan plan : optimizedPlans) {
      plan.sql=m_sql;
      plan.rootPlanGraph.resolveColumnIndexes();
      stats=new PlanStatistics();
      AbstractPlanNode planGraph=plan.rootPlanGraph;
      boolean result=planGraph.computeEstimatesRecursively(stats,m_cluster,m_db,m_estimates,m_paramHints);
      assert(result);
      plan.cost=m_costModel.getPlanCost(stats);
      String filename=String.valueOf(planCounter++);
      if (plan.cost < minCost) {
        minCost=plan.cost;
        bestPlan=plan;
        bestFilename=filename;
      }
      if (!m_quietPlanner) {
        if (m_fullDebug) {
          outputPlanFullDebug(plan,planGraph,filename);
        }
        plan.explainedPlan=planGraph.toExplainPlanString();
        outputExplainedPlan(plan,filename);
      }
    }
  }
  if (bestPlan == null) {
    m_recentErrorMsg="Unable to plan for statement. Error unknown.";
    return null;
  }
  bestPlan.resetPlanNodeIds();
  if (!m_quietPlanner) {
    finalizeOutput(bestFilename,stats);
  }
  Fragmentizer.fragmentize(bestPlan,m_db);
  return bestPlan;
}
