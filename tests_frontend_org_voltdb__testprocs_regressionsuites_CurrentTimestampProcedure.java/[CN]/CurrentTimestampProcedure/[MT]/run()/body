{
  voltQueueSQL(insertStmt,1,1);
  voltQueueSQL(insertStmt,2,1);
  voltQueueSQL(insertStmt,3,1);
  voltQueueSQL(insertStmt,4,1);
  voltExecuteSQL();
  voltQueueSQL(selectStmt);
  VoltTable vt=voltExecuteSQL()[0];
  time=new Date();
  long timeValue=-1;
  long id=0;
  while (vt.advanceRow()) {
    if (vt.getRowCount() != 4) {
      throw new VoltAbortException("bad row count");
    }
    ++id;
    if (vt.getLong(0) != id) {
      throw new VoltAbortException("bad row ID " + id);
    }
    if (vt.getLong(1) != 1) {
      throw new VoltAbortException("bad row C1");
    }
    if (timeValue == -1) {
      timeValue=vt.getTimestampAsLong(2);
    }
    if (vt.getTimestampAsLong(2) != timeValue || vt.getTimestampAsLong(3) != timeValue || vt.getTimestampAsLong(4) != timeValue || vt.getTimestampAsLong(5) != timeValue) {
      throw new VoltAbortException("bad inconsistent current_timestamp value from different partitions");
    }
  }
  if (Math.abs(time.getTime() * 1000 - timeValue) > epsilonMicros || time.getTime() * 1000 < timeValue) {
    throw new VoltAbortException("bad current_timestamp value, off too much from current system time.");
  }
  voltQueueSQL(updateStmt,2,1);
  voltQueueSQL(groupbyStmt);
  vt=voltExecuteSQL()[1];
  time=new Date();
  assert(vt.advanceRow());
  if (vt.getRowCount() != 1) {
    throw new VoltAbortException("bad row count");
  }
  if (vt.getTimestampAsLong(0) != timeValue || vt.getTimestampAsLong(1) != timeValue) {
    throw new VoltAbortException("bad inconsistent current_timestamp value from different partitions");
  }
  if (vt.getLong(2) != 4) {
    throw new VoltAbortException("bad group by row count");
  }
  if (Math.abs(time.getTime() * 1000 - timeValue) > epsilonMicros || time.getTime() * 1000 < timeValue) {
    throw new VoltAbortException("bad current_timestamp value, off too much from current system time.");
  }
  return 1;
}
