{
  String tableName=null;
  VoltTable table=null;
  ByteBuffer buf=spi.getSerializedParams();
  spi.getParams();
  if (buf == null) {
    Object[] params=spi.getParams().toArray();
    tableName=(String)params[0];
    table=(VoltTable)params[1];
  }
 else {
    FastDeserializer fds=new FastDeserializer(buf);
    int paramLen=fds.readShort();
    if (paramLen != 2) {
      throw new Exception("@LoadSinglepartitionTable requres exactly two parameters.");
    }
    byte strType=fds.readByte();
    if (strType != VoltType.STRING.getValue()) {
      throw new Exception("@LoadSinglepartitionTable expects a String and a VoltTable for parameters (in order).");
    }
    tableName=fds.readString();
    byte tableType=fds.readByte();
    if (tableType != VoltType.VOLTTABLE.getValue()) {
      throw new Exception("@LoadSinglepartitionTable expects a String and a VoltTable for parameters (in order).");
    }
    int tableSize=fds.readInt();
    ByteBuffer tbuf=buf.slice();
    tbuf.limit(tableSize);
    table=PrivateVoltTableFactory.createVoltTableFromBuffer(tbuf,true);
  }
  Table catTable=tables.getIgnoreCase(tableName);
  if (catTable == null) {
    throw new Exception(String.format("Unable to find target table \"%s\" for LoadSinglepartitionTable.",tableName));
  }
  if (catTable.getIsreplicated()) {
    throw new Exception("Target table for LoadSinglepartitionTable is replicated.");
  }
  int colCount=catTable.getColumns().size();
  if (table.getColumnCount() != colCount) {
    throw new Exception("Input table has the wrong number of columns for bulk insert.");
  }
  Column pCol=catTable.getPartitioncolumn();
  int pIndex=pCol.getIndex();
  table.resetRowPosition();
  boolean hasRow=table.advanceRow();
  if (!hasRow) {
    return 0;
  }
  Object pvalue=table.get(pIndex,table.getColumnType(pIndex));
  return pvalue;
}
