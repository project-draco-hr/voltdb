{
  Client client=getClient();
  if (isHSQL()) {
    return;
  }
  for (  String tb : partitioned_tbs) {
    emptyTable(client,tb);
    ClientResponse cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, 1, 1, 1);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(2, 2, 2, 2);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    try {
      client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(2, 3, 3, 3);");
      fail("Shouldn't reach there");
    }
 catch (    ProcCallException e) {
      assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
    }
    cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, NULL, 4, 4);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(2, NULL, 5, 5);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    VoltTable vt=client.callProcedure("@AdHoc","select a, b from " + tb + " where a > 0 and b > 0 order by a").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{1,1},{2,2}});
    cr=client.callProcedure("@AdHoc","DELETE FROM " + tb + " WHERE A = 1;");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    String sql="select a, b from " + tb + " where a > 0 and b > 0 order by a, b";
    vt=client.callProcedure("@AdHoc",sql).getResults()[0];
    validateTableOfLongs(vt,new long[][]{{2,2}});
    VoltTable explain=client.callProcedure("@Explain",sql).getResults()[0];
    assertTrue(explain.toString().contains(tb + "_PIDX_1"));
    explain=client.callProcedure("@Explain","select a, b from " + tb + " where a > 0 and b > ? order by a, b",0).getResults()[0];
    assertTrue(explain.toString().contains(tb + "_PIDX_1"));
  }
  for (  String tb : partitioned_tbs) {
    emptyTable(client,tb);
    ClientResponse cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, NULL, 0, 4);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    try {
      client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, NULL, -1, 4);");
      fail("Shouldn't reach there");
    }
 catch (    ProcCallException e) {
      assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
    }
    cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, NULL, 0, 0);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(5, NULL, 10, 0);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    try {
      client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(5, NULL, 4, 0);");
      fail("Shouldn't reach there");
    }
 catch (    ProcCallException e) {
      assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
    }
    cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(10, NULL, 9, 4);");
    assertEquals(ClientResponse.SUCCESS,cr.getStatus());
    try {
      client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(10, NULL, 8, 4);");
      fail("Shouldn't reach there");
    }
 catch (    ProcCallException e) {
      assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
    }
    VoltTable vt=client.callProcedure("@AdHoc","select a, c, d from " + tb + " order by a, c, d").getResults()[0];
    validateTableOfLongs(vt,new long[][]{{1,0,0},{1,0,4},{5,10,0},{10,9,4}});
    String sql="select a, c, d from " + tb + " where a > 4 order by a, c, d";
    vt=client.callProcedure("@AdHoc",sql).getResults()[0];
    validateTableOfLongs(vt,new long[][]{{5,10,0},{10,9,4}});
    VoltTable explain=client.callProcedure("@Explain",sql).getResults()[0];
    assertTrue(explain.toString().contains(tb + "_PIDX_2"));
    sql="select a, c, d from " + tb + " where a > 0 and a > c and d > 3 order by a, c, d";
    vt=client.callProcedure("@AdHoc",sql).getResults()[0];
    validateTableOfLongs(vt,new long[][]{{1,0,4},{10,9,4}});
    explain=client.callProcedure("@Explain",sql).getResults()[0];
    assertTrue(explain.toString().contains(tb + "_PIDX_3"));
    explain=client.callProcedure("@Explain","select a, c, d from " + tb + " where a > 0 and a > c and d > ? order by a, c, d",3).getResults()[0];
    assertTrue(!explain.toString().contains(tb + "_PIDX_3"));
  }
}
