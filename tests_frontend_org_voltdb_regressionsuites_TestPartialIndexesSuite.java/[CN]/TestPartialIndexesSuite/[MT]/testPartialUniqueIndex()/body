{
  Client client=getClient();
  if (!isHSQL()) {
    for (    String tb : replicated_tbs) {
      emptyTable(client,tb);
      ClientResponse cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, 1, 1, 1, 1);");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(2, 2, 2, 2, 2);");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      try {
        client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(2, 3, 3, 3, 4);");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      try {
        client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(3, 3, 2, 3, 5);");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(1, NULL, 4, 4, 6);");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(2, NULL, 5, 5, 7);");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(5, NULL, 1, 4, 8);");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","INSERT INTO " + tb + " VALUES(6, NULL, 2, 5, 9);");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      VoltTable vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " where a > 0 and b > 0 order by a").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,1,1},{2,2,2}});
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " where c > 0 and b > 0 order by a").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,1,1},{2,2,2}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 4, B = 4 WHERE A = 2 AND B = 2;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      try {
        client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 4 WHERE A = 1 AND B = 1;");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET C = 4, B = 4 WHERE C = 2 AND B = 4;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      try {
        client.callProcedure("@AdHoc","UPDATE " + tb + " SET C = 4 WHERE C = 1 AND B = 1;");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " order by a,c").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,1,1},{1,Long.MIN_VALUE,4},{2,Long.MIN_VALUE,5},{4,4,4},{5,Long.MIN_VALUE,1},{6,Long.MIN_VALUE,2}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 5, B = 5, C = 5  WHERE A = 1 AND B IS NULL;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      try {
        client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 5, B = 5, C = 5 WHERE A = 2 AND B IS NULL;");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " order by a,c").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,1,1},{2,Long.MIN_VALUE,5},{4,4,4},{5,Long.MIN_VALUE,1},{5,5,5},{6,Long.MIN_VALUE,2}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 7, C = 7, B = 7  WHERE C = 1 AND B IS NULL;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      try {
        client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 7, C = 7, B = 7 WHERE C = 2 AND B IS NULL;");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " order by a, c").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,1,1},{2,Long.MIN_VALUE,5},{4,4,4},{5,5,5},{6,Long.MIN_VALUE,2},{7,7,7}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 1, B = NULL  WHERE A = 5 AND B = 5;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 1, B = NULL WHERE A = 4 AND B = 4;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " order by a, c").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,1,1},{1,Long.MIN_VALUE,4},{1,Long.MIN_VALUE,5},{2,Long.MIN_VALUE,5},{6,Long.MIN_VALUE,2},{7,7,7}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET C = 1, B = NULL  WHERE C = 1 AND B = 1;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET C = 1, B = NULL WHERE C = 7 AND B = 7;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " order by a,c;").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,Long.MIN_VALUE,1},{1,Long.MIN_VALUE,4},{1,Long.MIN_VALUE,5},{2,Long.MIN_VALUE,5},{6,Long.MIN_VALUE,2},{7,Long.MIN_VALUE,1}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET A = 6 WHERE A = 2 AND B is NULL;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET C = 5 WHERE C = 4 AND B is NULL;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " order by a,c;").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{1,Long.MIN_VALUE,1},{1,Long.MIN_VALUE,5},{1,Long.MIN_VALUE,5},{6,Long.MIN_VALUE,2},{6,Long.MIN_VALUE,5},{7,Long.MIN_VALUE,1}});
      cr=client.callProcedure("@AdHoc","UPDATE " + tb + " SET B = 7  WHERE A = 7;");
      cr=client.callProcedure("@AdHoc","DELETE FROM " + tb + " WHERE A = 7;");
      assertEquals(ClientResponse.SUCCESS,cr.getStatus());
      vt=client.callProcedure("@AdHoc","select a, b from " + tb + " where a = 7").getResults()[0];
      validateTableOfLongs(vt,new long[][]{});
      cr=client.callProcedure("@AdHoc","UPSERT INTO " + tb + " VALUES(6,NULL,3,3,10);");
      cr=client.callProcedure("@AdHoc","UPSERT INTO " + tb + " VALUES(6,1,3,3,11);");
      try {
        client.callProcedure("@AdHoc","UPSERT INTO " + tb + " VALUES(6,1,3,3,12);");
      }
 catch (      ProcCallException e) {
        assertTrue(e.getMessage().contains("Constraint Type UNIQUE"));
      }
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " where a > 0 and b > 0 order by a,c;").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{6,1,3}});
      vt=client.callProcedure("@AdHoc","select a, b, c from " + tb + " where c = 3 and b > 0 order by a,c;").getResults()[0];
      validateTableOfLongs(vt,new long[][]{{6,1,3}});
    }
  }
}
