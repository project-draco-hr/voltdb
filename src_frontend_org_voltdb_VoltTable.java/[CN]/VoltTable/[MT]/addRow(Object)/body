{
  if (m_readOnly) {
    throw new IllegalStateException("Table is read-only. Make a copy before changing.");
  }
  assert(verifyTableInvariants());
  if (m_colCount == 0) {
    throw new IllegalStateException("Table has no columns defined");
  }
  if (values.length != m_colCount) {
    throw new IllegalArgumentException(values.length + " arguments but table has " + m_colCount+ " columns");
  }
  final int pos=m_buffer.position();
  try {
    m_buffer.limit(m_buffer.capacity());
    m_buffer.position(pos + 4);
    int typePos=4 + 1 + 2;
    for (int col=0; col < m_colCount; col++) {
      Object value=values[col];
      VoltType columnType=VoltType.get(m_buffer.get(typePos + col));
      addColumnValue(value,columnType,col);
    }
    m_rowCount++;
    m_buffer.putInt(m_rowStart,m_rowCount);
    final int rowsize=m_buffer.position() - pos - 4;
    if (rowsize > VoltTableRow.MAX_TUPLE_LENGTH) {
      throw new VoltOverflowException("Table row total length larger than allowed max " + VoltTableRow.MAX_TUPLE_LENGTH_STR);
    }
    m_buffer.limit(m_buffer.position());
    assert(rowsize >= 0);
    m_buffer.putInt(pos,rowsize);
  }
 catch (  VoltTypeException vte) {
    m_buffer.position(pos);
    throw vte;
  }
catch (  BufferOverflowException e) {
    m_buffer.position(pos);
    expandBuffer();
    addRow(values);
  }
catch (  IllegalArgumentException e) {
    if (m_buffer.limit() - m_buffer.position() < 32) {
      m_buffer.position(pos);
      expandBuffer();
      addRow(values);
    }
 else     throw e;
  }
  assert(verifyTableInvariants());
}
