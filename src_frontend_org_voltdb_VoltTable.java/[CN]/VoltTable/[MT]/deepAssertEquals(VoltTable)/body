{
  if (getRowCount() != other.getRowCount()) {
    System.out.printf("Row count %d != %d\n",getRowCount(),other.getRowCount());
    assert(false);
  }
  if (getColumnCount() != other.getColumnCount()) {
    System.out.printf("Col count %d != %d\n",getColumnCount(),other.getColumnCount());
    assert(false);
  }
  for (int col=0; col < getColumnCount(); col++) {
    if (other.getColumnType(col) != getColumnType(col)) {
      System.out.printf("Col %d: type %s != %s\n",col,getColumnType(col).toString(),other.getColumnType(col).toString());
      assert(false);
    }
    if (other.getColumnName(col).equals(getColumnName(col)) == false) {
      System.out.printf("Col %d: name %s != %s\n",col,getColumnName(col),other.getColumnName(col));
      assert(false);
    }
  }
  resetRowPosition();
  other.resetRowPosition();
  for (int row=0; row < getRowCount(); row++) {
    advanceRow();
    other.advanceRow();
    for (int col=0; col < getColumnCount(); col++) {
      Object obj1=get(col,getColumnType(col));
      Object obj2=other.get(col,getColumnType(col));
      if ((obj1 == null) && (obj2 == null)) {
        continue;
      }
      if ((obj1 == null) || (obj2 == null)) {
        System.out.printf("Row,Col-%d,%d of type %s: %s != %s\n",row,col,getColumnType(col).toString(),String.valueOf(obj1),String.valueOf(obj2));
        assert(false);
      }
      if (getColumnType(col) == VoltType.VARBINARY) {
        byte[] array1=(byte[])obj1;
        byte[] array2=(byte[])obj2;
        if (Arrays.equals(array1,array2) == false) {
          System.out.printf("Row,Col-%d,%d of type %s: %s != %s\n",row,col,getColumnType(col).toString(),Encoder.hexEncode(array1),Encoder.hexEncode(array2));
          assert(false);
        }
      }
 else {
        if (obj1.equals(obj2) == false) {
          System.out.printf("Row,Col-%d,%d of type %s: %s != %s\n",row,col,getColumnType(col).toString(),obj1.toString(),obj2.toString());
          assert(false);
        }
      }
    }
  }
}
