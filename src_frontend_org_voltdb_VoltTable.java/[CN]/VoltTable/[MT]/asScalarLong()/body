{
  verifyTableInvariants();
  if (m_rowCount != 1) {
    throw new IllegalStateException("table must contain exactly 1 tuple; tuples = " + m_rowCount);
  }
  if (m_colCount != 1) {
    throw new IllegalStateException("table must contain exactly 1 column; columns = " + m_colCount);
  }
  final VoltType colType=getColumnType(0);
switch (colType) {
case TINYINT:
    final byte tinyInt=m_buffer.get(m_rowStart + 8);
  m_wasNull=(tinyInt == VoltType.NULL_TINYINT);
return tinyInt;
case SMALLINT:
final short smallInt=m_buffer.getShort(m_rowStart + 8);
m_wasNull=(smallInt == VoltType.NULL_SMALLINT);
return smallInt;
case INTEGER:
final int integer=m_buffer.getInt(m_rowStart + 8);
m_wasNull=(integer == VoltType.NULL_INTEGER);
return integer;
case BIGINT:
final long bigInt=m_buffer.getLong(m_rowStart + 8);
m_wasNull=(bigInt == VoltType.NULL_BIGINT);
return bigInt;
default :
throw new IllegalStateException("table must contain exactly 1 integral value; column 1 is type = " + colType.name());
}
}
