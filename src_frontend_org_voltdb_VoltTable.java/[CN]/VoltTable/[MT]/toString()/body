{
  assert(verifyTableInvariants());
  StringBuilder buffer=new StringBuilder();
  buffer.append(" header size: ").append(m_buffer.getInt(0)).append("\n");
  byte statusCode=m_buffer.get(4);
  buffer.append(" status code: ").append(statusCode);
  short colCount=m_buffer.getShort(5);
  buffer.append(" column count: ").append(colCount).append("\n");
  assert(colCount == m_colCount);
  buffer.append(" cols ");
  for (int i=0; i < colCount; i++)   buffer.append("(").append(getColumnName(i)).append(":").append(getColumnType(i).name()).append("), ");
  buffer.append("\n");
  buffer.append(" rows -\n");
  VoltTableRow r=cloneRow();
  r.resetRowPosition();
  while (r.advanceRow()) {
    buffer.append("  ");
    for (int i=0; i < m_colCount; i++) {
switch (getColumnType(i)) {
case TINYINT:
case SMALLINT:
case INTEGER:
case BIGINT:
        long lval=r.getLong(i);
      if (r.wasNull())       buffer.append("NULL, ");
 else       buffer.append(lval + ", ");
    break;
case FLOAT:
  double dval=r.getDouble(i);
if (r.wasNull()) buffer.append("NULL, ");
 else buffer.append(dval + ", ");
break;
case TIMESTAMP:
TimestampType tstamp=r.getTimestampAsTimestamp(i);
if (r.wasNull()) {
buffer.append("NULL, ");
assert(tstamp == null);
}
 else {
buffer.append(tstamp + ", ");
}
break;
case STRING:
String string=r.getString(i);
if (r.wasNull()) {
buffer.append("NULL, ");
assert(string == null);
}
 else {
buffer.append(string + ", ");
}
break;
case DECIMAL:
BigDecimal bd=r.getDecimalAsBigDecimal(i);
if (r.wasNull()) {
buffer.append("NULL, ");
assert(bd == null);
}
 else {
buffer.append(bd.toString() + ", ");
}
break;
}
}
buffer.append("\n");
}
assert(verifyTableInvariants());
return buffer.toString();
}
