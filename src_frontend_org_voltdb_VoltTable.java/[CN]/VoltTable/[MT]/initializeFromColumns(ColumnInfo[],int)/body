{
  int allocationSize=1024;
  m_buffer=ByteBuffer.allocate(allocationSize);
  m_originalColumnInfos=columns;
  boolean success=false;
  while (!success) {
    try {
      m_colCount=columnCount;
      m_rowCount=0;
      if (columns == null) {
        throw new RuntimeException("VoltTable(..) constructor passed null schema.");
      }
      if (columnCount <= 0) {
        throw new RuntimeException("VoltTable(..) constructor requires at least one column.");
      }
      if (columns.length < columnCount) {
        throw new RuntimeException("VoltTable(..) constructor passed truncated column schema array.");
      }
      m_buffer.putInt(0);
      m_buffer.put(Byte.MIN_VALUE);
      m_buffer.putShort((short)columnCount);
      for (int i=0; i < columnCount; i++)       m_buffer.put(columns[i].type.getValue());
      for (int i=0; i < columnCount; i++) {
        if (columns[i].name == null) {
          m_buffer.position(0);
          throw new IllegalArgumentException("VoltTable column names can not be null.");
        }
        writeStringToBuffer(columns[i].name,METADATA_ENCODING,m_buffer);
      }
      m_rowStart=m_buffer.position();
      m_buffer.putInt(0,m_rowStart - 4);
      m_buffer.putInt(0);
      m_buffer.limit(m_buffer.position());
      success=true;
    }
 catch (    BufferOverflowException e) {
      allocationSize*=4;
      m_buffer=ByteBuffer.allocate(allocationSize);
    }
  }
  assert(verifyTableInvariants());
}
