{
  if (param == null) {
    return nullValueForType(expectedClz);
  }
  Class<?> inputClz=param.getClass();
  Number numberParam=null;
  if (inputClz == Long.class) {
    if (expectedClz == long.class)     return param;
    if ((Long)param == VoltType.NULL_BIGINT)     return nullValueForType(expectedClz);
    numberParam=(Number)param;
  }
 else   if (inputClz == Integer.class) {
    if (expectedClz == int.class)     return param;
    if ((Integer)param == VoltType.NULL_INTEGER)     return nullValueForType(expectedClz);
    if (expectedClz == long.class)     return ((Integer)param).longValue();
    numberParam=(Number)param;
  }
 else   if (inputClz == Short.class) {
    if (expectedClz == short.class)     return param;
    if ((Short)param == VoltType.NULL_SMALLINT)     return nullValueForType(expectedClz);
    if (expectedClz == long.class)     return ((Short)param).longValue();
    if (expectedClz == int.class)     return ((Short)param).intValue();
    numberParam=(Number)param;
  }
 else   if (inputClz == Byte.class) {
    if (expectedClz == byte.class)     return param;
    if ((Byte)param == VoltType.NULL_TINYINT)     return nullValueForType(expectedClz);
    if (expectedClz == long.class)     return ((Byte)param).longValue();
    if (expectedClz == int.class)     return ((Byte)param).intValue();
    if (expectedClz == short.class)     return ((Byte)param).shortValue();
    numberParam=(Number)param;
  }
 else   if (inputClz == Double.class) {
    if (expectedClz == double.class)     return param;
    if ((Double)param == VoltType.NULL_FLOAT)     return nullValueForType(expectedClz);
  }
 else   if (inputClz == String.class) {
    if (((String)param).equals(Constants.CSV_NULL))     return nullValueForType(expectedClz);
 else     if (expectedClz == String.class)     return param;
 else     if (expectedClz == byte[].class) {
      return Encoder.hexDecode((String)param);
    }
    if (expectedClz.isPrimitive()) {
      return convertStringToPrimitive((String)param,expectedClz);
    }
  }
 else   if (inputClz == byte[].class) {
    if (expectedClz == byte[].class)     return param;
 else     if (expectedClz == String.class) {
      String value=new String((byte[])param,Constants.UTF8ENCODING);
      if (value.equals(Constants.CSV_NULL))       return nullValueForType(expectedClz);
 else       return value;
    }
  }
 else   if (param == VoltType.NULL_TIMESTAMP || param == VoltType.NULL_STRING_OR_VARBINARY || param == VoltType.NULL_DECIMAL) {
    return nullValueForType(expectedClz);
  }
  if (expectedClz.isArray() != inputClz.isArray()) {
    throw new VoltTypeException(String.format("Array / Scalar parameter mismatch (%s to %s)",inputClz.getName(),expectedClz.getName()));
  }
  if (expectedClz.isArray()) {
    return tryToMakeCompatibleArray(expectedClz.getComponentType(),inputClz.getComponentType(),param);
  }
  if ((expectedClz == int.class) && (numberParam != null)) {
    long val=numberParam.longValue();
    if (val == VoltType.NULL_INTEGER) {
      throw new VoltTypeException("tryToMakeCompatible: The provided long value: (" + param.toString() + ") might be interpreted as integer null. "+ "Try explicitly using a int parameter.");
    }
    if ((val <= Integer.MAX_VALUE) && (val >= Integer.MIN_VALUE))     return numberParam.intValue();
  }
 else   if ((expectedClz == short.class) && (numberParam != null)) {
    if ((inputClz == Long.class) || (inputClz == Integer.class)) {
      long val=numberParam.longValue();
      if (val == VoltType.NULL_SMALLINT) {
        throw new VoltTypeException("tryToMakeCompatible: The provided int or long value: (" + param.toString() + ") might be interpreted as smallint null. "+ "Try explicitly using a short parameter.");
      }
      if ((val <= Short.MAX_VALUE) && (val >= Short.MIN_VALUE))       return numberParam.shortValue();
    }
  }
 else   if ((expectedClz == byte.class) && (numberParam != null)) {
    if ((inputClz == Long.class) || (inputClz == Integer.class) || (inputClz == Short.class)) {
      long val=numberParam.longValue();
      if (val == VoltType.NULL_TINYINT) {
        throw new VoltTypeException("tryToMakeCompatible: The provided short, int or long value: (" + param.toString() + ") might be interpreted as tinyint null. "+ "Try explicitly using a byte parameter.");
      }
      if ((val <= Byte.MAX_VALUE) && (val >= Byte.MIN_VALUE))       return numberParam.byteValue();
    }
  }
 else   if ((expectedClz == double.class) && (numberParam != null)) {
    return numberParam.doubleValue();
  }
 else   if (expectedClz == TimestampType.class) {
    if (inputClz == Integer.class)     return new TimestampType((Integer)param);
    if (inputClz == Long.class)     return new TimestampType((Long)param);
    if (inputClz == TimestampType.class)     return param;
    if (inputClz == Date.class)     return new TimestampType((Date)param);
    if (inputClz == String.class) {
      String timestring=((String)param).trim();
      try {
        return new TimestampType(Long.parseLong(timestring));
      }
 catch (      IllegalArgumentException e) {
      }
      try {
        return new TimestampType(timestring);
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
 else   if (expectedClz == java.sql.Timestamp.class) {
    if (param instanceof java.sql.Timestamp)     return param;
    if (param instanceof java.util.Date)     return new java.sql.Timestamp(((java.util.Date)param).getTime());
    if (param instanceof TimestampType)     return ((TimestampType)param).asJavaTimestamp();
    if (inputClz == String.class) {
      String longtime=((String)param).trim();
      try {
        return new java.sql.Timestamp(Long.parseLong(longtime));
      }
 catch (      IllegalArgumentException e) {
      }
      try {
        return java.sql.Timestamp.valueOf(longtime);
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
 else   if (expectedClz == java.sql.Date.class) {
    if (param instanceof java.sql.Date)     return param;
    if (param instanceof java.util.Date)     return new java.sql.Date(((java.util.Date)param).getTime());
    if (param instanceof TimestampType)     return ((TimestampType)param).asExactJavaSqlDate();
    if (inputClz == String.class) {
      try {
        return new java.sql.Date(TimestampType.millisFromJDBCformat((String)param));
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
 else   if (expectedClz == java.util.Date.class) {
    if (param instanceof java.util.Date)     return param;
    if (param instanceof TimestampType)     return ((TimestampType)param).asExactJavaDate();
    if (inputClz == String.class) {
      try {
        return new java.util.Date(TimestampType.millisFromJDBCformat((String)param));
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
 else   if (expectedClz == BigDecimal.class) {
    if (numberParam != null) {
      BigInteger bi=new BigInteger(param.toString());
      BigDecimal bd=new BigDecimal(bi);
      bd=VoltDecimalHelper.setDefaultScale(bd);
      return bd;
    }
    if (inputClz == BigDecimal.class) {
      BigDecimal bd=(BigDecimal)param;
      bd=VoltDecimalHelper.setDefaultScale(bd);
      return bd;
    }
    if (inputClz == Float.class || inputClz == Double.class) {
      try {
        return VoltDecimalHelper.deserializeBigDecimalFromString(String.format("%.12f",param));
      }
 catch (      IOException ex) {
        throw new VoltTypeException(String.format("deserialize Float from string failed. (%s to %s)",inputClz.getName(),expectedClz.getName()));
      }
    }
    try {
      return VoltDecimalHelper.deserializeBigDecimalFromString(String.valueOf(param));
    }
 catch (    IOException ex) {
      throw new VoltTypeException(String.format("deserialize BigDecimal from string failed. (%s to %s)",inputClz.getName(),expectedClz.getName()));
    }
  }
 else   if (expectedClz == VoltTable.class && inputClz == VoltTable.class) {
    return param;
  }
 else   if (expectedClz == String.class) {
    if (!param.getClass().isArray()) {
      return String.valueOf(param);
    }
  }
  if (expectedClz.getSimpleName().equals("SystemProcedureExecutionContext")) {
    if (expectedClz.isAssignableFrom(inputClz)) {
      return param;
    }
  }
  throw new VoltTypeException("tryToMakeCompatible: The provided value: (" + param.toString() + ") of type: "+ inputClz.getName()+ " is not a match or is out of range for the target parameter type: "+ expectedClz.getName());
}
