{
  if (param == null || param == VoltType.NULL_STRING_OR_VARBINARY || param == VoltType.NULL_DECIMAL || (param instanceof String && ((String)param).equals("\\N"))) {
    if (isPrimitive) {
      VoltType type=VoltType.typeFromClass(paramType);
switch (type) {
case TINYINT:
case SMALLINT:
case INTEGER:
case BIGINT:
case FLOAT:
        return type.getNullValue();
    }
  }
  return null;
}
if (param instanceof SystemProcedureExecutionContext) {
  return param;
}
Class<?> pclass=param.getClass();
if ((paramType == String.class) && (pclass == byte[].class)) {
  String sparam=null;
  sparam=new String((byte[])param,"UTF-8");
  return sparam;
}
if ((paramType == byte[].class) && (pclass == String.class)) {
  return Encoder.hexDecode((String)param);
}
if (isArray != pclass.isArray()) {
  throw new Exception("Array / Scalar parameter mismatch");
}
if (isArray) {
  Class<?> pSubCls=pclass.getComponentType();
  Class<?> sSubCls=paramTypeComponentType;
  if (pSubCls == sSubCls) {
    return param;
  }
 else   if (Array.getLength(param) == 0) {
    return Array.newInstance(sSubCls,0);
  }
 else {
    throw new Exception("tryScalarMakeCompatible: Unable to match parameter array:" + sSubCls.getName() + " to provided "+ pSubCls.getName());
  }
}
final Class<?> slot=paramType;
if ((slot == long.class) && (pclass == Long.class || pclass == Integer.class || pclass == Short.class || pclass == Byte.class)) return param;
if ((slot == int.class) && (pclass == Integer.class || pclass == Short.class || pclass == Byte.class)) return param;
if ((slot == short.class) && (pclass == Short.class || pclass == Byte.class)) return param;
if ((slot == byte.class) && (pclass == Byte.class)) return param;
if ((slot == double.class) && (param instanceof Number)) return ((Number)param).doubleValue();
if ((slot == String.class) && (pclass == String.class)) return param;
if (slot == TimestampType.class) {
  if (pclass == Long.class)   return new TimestampType((Long)param);
  if (pclass == TimestampType.class)   return param;
  if (pclass == Date.class)   return new TimestampType((Date)param);
  if (pclass == String.class) {
    String longtime=((String)param).trim();
    try {
      return new TimestampType(Long.parseLong(longtime));
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      return new TimestampType(longtime);
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
 else if (slot == java.sql.Timestamp.class) {
  if (param instanceof java.sql.Timestamp)   return param;
  if (param instanceof java.util.Date)   return new java.sql.Timestamp(((java.util.Date)param).getTime());
  if (param instanceof TimestampType)   return ((TimestampType)param).asJavaTimestamp();
  if (pclass == String.class) {
    String longtime=((String)param).trim();
    try {
      return new java.sql.Timestamp(Long.parseLong(longtime));
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      return java.sql.Timestamp.valueOf(longtime);
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
 else if (slot == java.sql.Date.class) {
  if (param instanceof java.sql.Date)   return param;
  if (param instanceof java.util.Date)   return new java.sql.Date(((java.util.Date)param).getTime());
  if (param instanceof TimestampType)   return ((TimestampType)param).asExactJavaSqlDate();
  if (pclass == String.class) {
    try {
      return new java.sql.Date(TimestampType.millisFromJDBCformat((String)param));
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
 else if (slot == java.util.Date.class) {
  if (param instanceof java.util.Date)   return param;
  if (param instanceof TimestampType)   return ((TimestampType)param).asExactJavaDate();
  if (pclass == String.class) {
    try {
      return new java.util.Date(TimestampType.millisFromJDBCformat((String)param));
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
 else if (slot == BigDecimal.class) {
  if ((pclass == Long.class) || (pclass == Integer.class) || (pclass == Short.class)|| (pclass == Byte.class)) {
    BigInteger bi=new BigInteger(param.toString());
    BigDecimal bd=new BigDecimal(bi);
    bd.setScale(4,BigDecimal.ROUND_HALF_EVEN);
    return bd;
  }
  if (pclass == BigDecimal.class) {
    BigDecimal bd=(BigDecimal)param;
    bd.setScale(4,BigDecimal.ROUND_HALF_EVEN);
    return bd;
  }
  if (pclass == String.class) {
    BigDecimal bd=VoltDecimalHelper.deserializeBigDecimalFromString((String)param);
    return bd;
  }
}
 else if (slot == VoltTable.class && pclass == VoltTable.class) {
  return param;
}
 else if ((slot == int.class) && (pclass == Long.class)) {
  long val=((Number)param).longValue();
  if ((val <= Integer.MAX_VALUE) && (val >= Integer.MIN_VALUE) && (val != VoltType.NULL_INTEGER))   return ((Number)param).intValue();
}
 else if ((slot == short.class) && (pclass == Long.class || pclass == Integer.class)) {
  long val=((Number)param).longValue();
  if ((val <= Short.MAX_VALUE) && (val >= Short.MIN_VALUE) && (val != VoltType.NULL_SMALLINT))   return ((Number)param).shortValue();
}
 else if ((slot == byte.class) && (pclass == Long.class || pclass == Integer.class || pclass == Short.class)) {
  long val=((Number)param).longValue();
  if ((val <= Byte.MAX_VALUE) && (val >= Byte.MIN_VALUE) && (val != VoltType.NULL_TINYINT))   return ((Number)param).byteValue();
}
 else if (pclass == String.class) {
  try {
    String value=((String)param).trim();
    value=value.replaceAll("\\,","");
    if (slot == byte.class) {
      return Byte.parseByte(value);
    }
    if (slot == short.class) {
      return Short.parseShort(value);
    }
    if (slot == int.class) {
      return Integer.parseInt(value);
    }
    if (slot == long.class) {
      return Long.parseLong(value);
    }
    if (slot == double.class) {
      return Double.parseDouble(value);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new Exception("tryToMakeCompatible: Unable to convert string " + (String)param + " to "+ slot.getName()+ " value for target parameter "+ slot.getName());
  }
}
throw new Exception("tryToMakeCompatible: The provided value: (" + param.toString() + ") of type: "+ pclass.getName()+ " is not a match or is out of range for the target parameter type: "+ slot.getName());
}
