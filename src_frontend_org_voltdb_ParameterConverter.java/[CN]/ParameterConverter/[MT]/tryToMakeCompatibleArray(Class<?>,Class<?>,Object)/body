{
  int inputLength=Array.getLength(param);
  if (inputComponentClz == expectedComponentClz) {
    return param;
  }
 else   if (inputLength == 0) {
    return Array.newInstance(expectedComponentClz,0);
  }
 else   if ((inputComponentClz == byte[].class) && (expectedComponentClz == String.class)) {
    String[] values=new String[inputLength];
    for (int i=0; i < inputLength; i++) {
      try {
        values[i]=new String((byte[])Array.get(param,i),"UTF-8");
      }
 catch (      UnsupportedEncodingException ex) {
        throw new VoltTypeException("tryScalarMakeCompatible: Unsupported encoding:" + expectedComponentClz.getName() + " to provided "+ inputComponentClz.getName());
      }
    }
    return values;
  }
 else   if ((inputComponentClz == String.class) && (expectedComponentClz == byte[].class)) {
    byte[][] values=new byte[inputLength][];
    for (int i=0; i < inputLength; i++) {
      values[i]=Encoder.hexDecode((String)Array.get(param,i));
    }
    return values;
  }
 else {
    throw new VoltTypeException("tryScalarMakeCompatible: Unable to match parameter array:" + expectedComponentClz.getName() + " to provided "+ inputComponentClz.getName());
  }
}
