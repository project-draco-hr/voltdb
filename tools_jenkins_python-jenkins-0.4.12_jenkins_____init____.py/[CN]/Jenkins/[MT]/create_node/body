def create_node(self, name, numExecutors=2, nodeDescription=None, remoteFS='/var/lib/jenkins', labels=None, exclusive=False, launcher=LAUNCHER_COMMAND, launcher_params={}):
    'Create a node\n\n        :param name: name of node to create, ``str``\n        :param numExecutors: number of executors for node, ``int``\n        :param nodeDescription: Description of node, ``str``\n        :param remoteFS: Remote filesystem location to use, ``str``\n        :param labels: Labels to associate with node, ``str``\n        :param exclusive: Use this node for tied jobs only, ``bool``\n        :param launcher: The launch method for the slave, ``jenkins.LAUNCHER_COMMAND``, ``jenkins.LAUNCHER_SSH``, ``jenkins.LAUNCHER_JNLP``, ``jenkins.LAUNCHER_WINDOWS_SERVICE``\n        :param launcher_params: Additional parameters for the launcher, ``dict``\n        '
    if self.node_exists(name):
        raise JenkinsException(('node[%s] already exists' % name))
    mode = 'NORMAL'
    if exclusive:
        mode = 'EXCLUSIVE'
    launcher_params['stapler-class'] = launcher
    inner_params = {'name': name, 'nodeDescription': nodeDescription, 'numExecutors': numExecutors, 'remoteFS': remoteFS, 'labelString': labels, 'mode': mode, 'type': NODE_TYPE, 'retentionStrategy': {'stapler-class': 'hudson.slaves.RetentionStrategy$Always', }, 'nodeProperties': {'stapler-class-bag': 'true', }, 'launcher': launcher_params, }
    params = {'name': name, 'type': NODE_TYPE, 'json': json.dumps(inner_params), }
    self.jenkins_open(Request(self._build_url(CREATE_NODE, params), ''))
    self.assert_node_exists(name, 'create[%s] failed')
