def get_build_info(self, name, number, depth=0):
    "Get build information dictionary.\n\n        :param name: Job name, ``str``\n        :param name: Build number, ``int``\n        :param depth: JSON depth, ``int``\n        :returns: dictionary of build information, ``dict``\n\n        Example::\n\n            >>> next_build_number = server.get_job_info('build_name')['nextBuildNumber']\n            >>> output = server.build_job('build_name')\n            >>> from time import sleep; sleep(10)\n            >>> build_info = server.get_build_info('build_name', next_build_number)\n            >>> print(build_info)\n            {u'building': False, u'changeSet': {u'items': [{u'date': u'2011-12-19T18:01:52.540557Z', u'msg': u'test', u'revision': 66, u'user': u'unknown', u'paths': [{u'editType': u'edit', u'file': u'/branches/demo/index.html'}]}], u'kind': u'svn', u'revisions': [{u'module': u'http://eaas-svn01.i3.level3.com/eaas', u'revision': 66}]}, u'builtOn': u'', u'description': None, u'artifacts': [{u'relativePath': u'dist/eaas-87-2011-12-19_18-01-57.war', u'displayPath': u'eaas-87-2011-12-19_18-01-57.war', u'fileName': u'eaas-87-2011-12-19_18-01-57.war'}, {u'relativePath': u'dist/eaas-87-2011-12-19_18-01-57.war.zip', u'displayPath': u'eaas-87-2011-12-19_18-01-57.war.zip', u'fileName': u'eaas-87-2011-12-19_18-01-57.war.zip'}], u'timestamp': 1324317717000, u'number': 87, u'actions': [{u'parameters': [{u'name': u'SERVICE_NAME', u'value': u'eaas'}, {u'name': u'PROJECT_NAME', u'value': u'demo'}]}, {u'causes': [{u'userName': u'anonymous', u'shortDescription': u'Started by user anonymous'}]}, {}, {}, {}], u'id': u'2011-12-19_18-01-57', u'keepLog': False, u'url': u'http://eaas-jenkins01.i3.level3.com:9080/job/build_war/87/', u'culprits': [{u'absoluteUrl': u'http://eaas-jenkins01.i3.level3.com:9080/user/unknown', u'fullName': u'unknown'}], u'result': u'SUCCESS', u'duration': 8826, u'fullDisplayName': u'build_war #87'}\n        "
    (folder_url, short_name) = self._get_job_folder(name)
    try:
        response = self.jenkins_open(Request(self._build_url(BUILD_INFO, locals())))
        if response:
            return json.loads(response)
        else:
            raise JenkinsException(('job[%s] number[%d] does not exist' % (name, number)))
    except HTTPError:
        raise JenkinsException(('job[%s] number[%d] does not exist' % (name, number)))
    except ValueError:
        raise JenkinsException(('Could not parse JSON info for job[%s] number[%d]' % (name, number)))
