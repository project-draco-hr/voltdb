def get_plugin_info(self, name, depth=2):
    'Get an installed plugin information on this Master.\n\n        This method retrieves information about a specific plugin and returns\n        the raw plugin data in a JSON format.\n        The passed in plugin name (short or long) must be an exact match.\n\n        .. note:: Calling this method will query Jenkins fresh for the\n            information for all plugins on each call. If you need to retrieve\n            information for multiple plugins it\'s recommended to use\n            :func:`get_plugins` instead, which will return a multi key\n            dictionary that can be accessed via either the short or long name\n            of the plugin.\n\n        :param name: Name (short or long) of plugin, ``str``\n        :param depth: JSON depth, ``int``\n        :returns: a specific plugin ``dict``\n\n        Example::\n\n            >>> info = server.get_plugin_info("Gearman Plugin")\n            >>> print(info)\n            {u\'backupVersion\': None, u\'version\': u\'0.0.4\', u\'deleted\': False,\n            u\'supportsDynamicLoad\': u\'MAYBE\', u\'hasUpdate\': True,\n            u\'enabled\': True, u\'pinned\': False, u\'downgradable\': False,\n            u\'dependencies\': [], u\'url\':\n            u\'http://wiki.jenkins-ci.org/display/JENKINS/Gearman+Plugin\',\n            u\'longName\': u\'Gearman Plugin\', u\'active\': True, u\'shortName\':\n            u\'gearman-plugin\', u\'bundled\': False}\n\n        '
    plugins_info = self.get_plugins(depth)
    try:
        return plugins_info[name]
    except KeyError:
        pass
