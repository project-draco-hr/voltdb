def get_running_builds(self):
    "Return list of running builds.\n\n        Each build is a dict with keys 'name', 'number', 'url', 'node',\n        and 'executor'.\n\n        :returns: List of builds,\n          ``[ { str: str, str: int, str:str, str: str, str: int} ]``\n\n        Example::\n            >>> builds = server.get_running_builds()\n            >>> print(builds)\n            [{'node': 'foo-slave', 'url': 'https://localhost/job/test/15/',\n              'executor': 0, 'name': 'test', 'number': 15}]\n        "
    builds = []
    nodes = self.get_nodes()
    for node in nodes:
        if (node['name'] == 'master'):
            node_name = '(master)'
        else:
            node_name = node['name']
        try:
            info = self.get_node_info(node_name, depth=2)
        except JenkinsException as e:
            if (('[500]' in str(e)) and self.get_node_info(node_name, depth=0)):
                continue
            else:
                raise
        for executor in info['executors']:
            executable = executor['currentExecutable']
            if executable:
                executor_number = executor['number']
                build_number = executable['number']
                url = executable['url']
                m = re.match('/job/([^/]+)/.*', urlparse(url).path)
                job_name = m.group(1)
                builds.append({'name': job_name, 'number': build_number, 'url': url, 'node': node_name, 'executor': executor_number, })
    return builds
