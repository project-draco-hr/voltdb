{
  String msg;
  Client client=null;
  try {
    if (m_connections == null) {
      int port=VoltDB.instance().getConfig().m_port;
      m_connections=new AuthenticatedConnectionCache(10,"localhost",port);
    }
    String username=parms.getProperty("User");
    String password=parms.getProperty("Password");
    String hashedPassword=parms.getProperty("Hashedpassword");
    String procName=parms.getProperty("Procedure");
    String params=parms.getProperty("Parameters");
    byte[] hashedPasswordBytes=null;
    if (password != null) {
      try {
        hashedPasswordBytes=m_md.digest(password.getBytes("UTF-8"));
      }
 catch (      UnsupportedEncodingException e) {
        throw new RuntimeException("JVM doesn't support UTF-8. Please use a supported JVM",e);
      }
    }
    if (hashedPassword != null) {
      if (hashedPassword.length() != 40) {
        throw new Exception("Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded).");
      }
      try {
        hashedPasswordBytes=Encoder.hexDecode(hashedPassword);
      }
 catch (      Exception e) {
        throw new Exception("Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded).");
      }
    }
    assert((hashedPasswordBytes == null) || (hashedPasswordBytes.length == 20));
    client=m_connections.getClient(username,hashedPasswordBytes);
    SyncCallback scb=new SyncCallback();
    boolean success;
    if (params != null) {
      ParameterSet paramSet=ParameterSet.fromJSONString(params);
      success=client.callProcedure(scb,procName,paramSet.toArray());
    }
 else {
      success=client.callProcedure(scb,procName);
    }
    if (!success) {
      throw new Exception("Server is not accepting work at this time.");
    }
    scb.waitForResponse();
    ClientResponseImpl rimpl=(ClientResponseImpl)scb.getResponse();
    msg=rimpl.toJSONString();
  }
 catch (  Exception e) {
    msg=e.getMessage();
    ClientResponseImpl rimpl=new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[0],msg);
    msg=rimpl.toJSONString();
  }
 finally {
    if (client != null) {
      assert(m_connections != null);
      m_connections.releaseClient(client);
    }
  }
  return msg;
}
