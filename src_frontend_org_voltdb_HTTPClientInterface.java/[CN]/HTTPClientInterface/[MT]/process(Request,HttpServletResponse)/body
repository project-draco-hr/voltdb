{
  AuthenticationResult authResult=null;
  Continuation continuation=ContinuationSupport.getContinuation(request);
  continuation.suspend(response);
  String jsonp=null;
  try {
    jsonp=request.getParameter("jsonp");
    if (request.getMethod().equalsIgnoreCase("POST")) {
      int queryParamSize=request.getContentLength();
      if (queryParamSize > 150000) {
        throw new Exception("Query string too large: " + String.valueOf(request.getContentLength()));
      }
      if (queryParamSize == 0) {
        throw new Exception("Received POST with no parameters in the body.");
      }
    }
    String procName=request.getParameter("Procedure");
    String params=request.getParameter("Parameters");
    if (procName == null) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      continuation.complete();
      return;
    }
    String admin=request.getParameter(PARAM_ADMIN);
    authResult=getAuthenticationResult(request,admin);
    if (!authResult.isAuthenticated()) {
      String msg=authResult.m_message;
      m_rate_limited_log.log("JSON interface exception: " + msg,EstTime.currentTimeMillis());
      ClientResponseImpl rimpl=new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[0],msg);
      msg=rimpl.toJSONString();
      if (jsonp != null) {
        msg=String.format("%s( %s )",jsonp,msg);
      }
      response.setStatus(HttpServletResponse.SC_OK);
      request.setHandled(true);
      try {
        response.getWriter().print(msg);
        continuation.complete();
      }
 catch (      IOException e1) {
      }
      return;
    }
    JSONProcCallback cb=new JSONProcCallback(request,continuation,jsonp);
    boolean success;
    if (params != null) {
      ParameterSet paramSet=null;
      try {
        paramSet=ParameterSet.fromJSONString(params);
      }
 catch (      Exception e) {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        continuation.complete();
        return;
      }
      if (paramSet == null) {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        continuation.complete();
        return;
      }
      success=authResult.m_client.callProcedure(cb,procName,paramSet.toArray());
    }
 else {
      success=authResult.m_client.callProcedure(cb,procName);
    }
    if (!success) {
      throw new Exception("Server is not accepting work at this time.");
    }
    if (authResult.m_adminMode) {
      cb.waitForResponse();
    }
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    m_rate_limited_log.log("JSON interface exception: " + msg,EstTime.currentTimeMillis());
    ClientResponseImpl rimpl=new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[0],msg);
    msg=rimpl.toJSONString();
    if (jsonp != null) {
      msg=String.format("%s( %s )",jsonp,msg);
    }
    response.setStatus(HttpServletResponse.SC_OK);
    request.setHandled(true);
    try {
      response.getWriter().print(msg);
      continuation.complete();
    }
 catch (    IOException e1) {
    }
  }
 finally {
    if (authResult != null && authResult.m_client != null) {
      assert(m_connections != null);
      if (authResult.m_adminMode) {
        try {
          authResult.m_client.close();
        }
 catch (        InterruptedException e) {
          m_log.warn("JSON interface was interrupted while closing an internal admin client connection.");
        }
      }
 else {
        m_connections.releaseClient(authResult.m_client);
      }
    }
  }
}
