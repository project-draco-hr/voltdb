{
  AuthenticationResult authResult=null;
  Continuation continuation=ContinuationSupport.getContinuation(request);
  if (m_timeout > 0) {
    continuation.setTimeout(m_timeout);
  }
  String result=(String)request.getAttribute("result");
  if (result != null) {
    try {
      response.setStatus(HttpServletResponse.SC_OK);
      request.setHandled(true);
      response.getWriter().print(result);
    }
 catch (    IllegalStateException|IOException e) {
      m_log.warn("JSON failed to send response: ",e);
    }
    return;
  }
  if (Boolean.TRUE.equals(request.getAttribute("SQLSUBMITTED"))) {
    try {
      continuation.suspend(response);
    }
 catch (    IllegalStateException e) {
      m_log.warn("JSON request completion exception in process: ",e);
    }
    return;
  }
  String jsonp=null;
  try {
    jsonp=request.getParameter("jsonp");
    if (request.getMethod().equalsIgnoreCase("POST")) {
      int queryParamSize=request.getContentLength();
      if (queryParamSize > 150000) {
        throw new Exception("Query string too large: " + String.valueOf(request.getContentLength()));
      }
      if (queryParamSize == 0) {
        throw new Exception("Received POST with no parameters in the body.");
      }
    }
    String procName=request.getParameter("Procedure");
    String params=request.getParameter("Parameters");
    if (procName == null) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return;
    }
    authResult=authenticate(request);
    if (!authResult.isAuthenticated()) {
      String msg=authResult.m_message;
      ClientResponseImpl rimpl=new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[0],msg);
      msg=rimpl.toJSONString();
      if (jsonp != null) {
        msg=String.format("%s( %s )",jsonp,msg);
      }
      response.setStatus(HttpServletResponse.SC_OK);
      request.setHandled(true);
      try {
        response.getWriter().print(msg);
      }
 catch (      IOException e1) {
      }
      return;
    }
    if (!authResult.m_adminMode) {
      continuation.suspend(response);
    }
    JSONProcCallback cb=new JSONProcCallback(request,continuation,jsonp,authResult.m_adminMode);
    boolean success;
    if (params != null) {
      ParameterSet paramSet=null;
      try {
        paramSet=ParameterSet.fromJSONString(params);
      }
 catch (      Exception e) {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        continuation.complete();
        return;
      }
      if (paramSet == null) {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        continuation.complete();
        return;
      }
      success=authResult.m_client.callProcedure(cb,procName,paramSet.toArray());
    }
 else {
      success=authResult.m_client.callProcedure(cb,procName);
    }
    if (!success) {
      throw new Exception("Server is not accepting work at this time.");
    }
    if (jsonp != null) {
      request.setAttribute("jsonp",jsonp);
    }
    request.setAttribute("SQLSUBMITTED",Boolean.TRUE);
    if (authResult.m_adminMode) {
      result=null;
      try {
        if (!cb.waitForResponse(m_timeout,TimeUnit.MILLISECONDS)) {
          m_log.info("JSON failed to get response from client in time: " + m_timeout);
          result=m_timeoutResponse;
          if (jsonp != null) {
            result=String.format("%s( %s )",jsonp,result);
          }
        }
 else {
          result=(String)request.getAttribute("result");
        }
      }
 catch (      InterruptedException ex) {
        m_log.info("JSON failed to get response from client in time: " + m_timeout,ex);
        result=m_timeoutResponse;
        if (jsonp != null) {
          result=String.format("%s( %s )",jsonp,result);
        }
      }
      response.setStatus(HttpServletResponse.SC_OK);
      request.setHandled(true);
      if (result != null) {
        try {
          response.getWriter().print(result);
        }
 catch (        IllegalStateException|IOException e) {
          m_log.warn("JSON failed to send response: ",e);
        }
      }
    }
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    m_rate_limited_log.log("JSON interface exception: " + msg,EstTime.currentTimeMillis());
    ClientResponseImpl rimpl=new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[0],msg);
    msg=rimpl.toJSONString();
    if (jsonp != null) {
      msg=String.format("%s( %s )",jsonp,msg);
    }
    response.setStatus(HttpServletResponse.SC_OK);
    request.setHandled(true);
    try {
      response.getWriter().print(msg);
      continuation.complete();
    }
 catch (    IOException e1) {
    }
  }
 finally {
    releaseClient(authResult);
  }
}
