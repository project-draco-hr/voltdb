{
  Client client=null;
  boolean adminMode=false;
  Continuation continuation=ContinuationSupport.getContinuation(request);
  continuation.suspend(response);
  try {
    if (m_shouldUpdateCatalog.compareAndSet(true,false)) {
      m_connections.closeAll();
      m_connections=null;
    }
    if (m_connections == null) {
      int port=VoltDB.instance().getConfig().m_port;
      int adminPort=VoltDB.instance().getConfig().m_adminPort;
      String externalInterface=VoltDB.instance().getConfig().m_externalInterface;
      String adminInterface="localhost";
      String clientInterface="localhost";
      if (externalInterface != null && !externalInterface.isEmpty()) {
        clientInterface=externalInterface;
        adminInterface=externalInterface;
      }
      if (VoltDB.instance().getConfig().m_clientInterface.length() > 0) {
        clientInterface=VoltDB.instance().getConfig().m_clientInterface;
      }
      if (VoltDB.instance().getConfig().m_adminInterface.length() > 0) {
        adminInterface=VoltDB.instance().getConfig().m_adminInterface;
      }
      m_connections=new AuthenticatedConnectionCache(10,clientInterface,port,adminInterface,adminPort);
    }
    String username=request.getParameter("User");
    String password=request.getParameter("Password");
    String hashedPassword=request.getParameter("Hashedpassword");
    String procName=request.getParameter("Procedure");
    String params=request.getParameter("Parameters");
    String jsonp=request.getParameter("jsonp");
    String admin=request.getParameter("admin");
    if (admin != null) {
      if (admin.compareToIgnoreCase("true") == 0) {
        adminMode=true;
      }
    }
    if (procName == null) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      continuation.complete();
      return;
    }
    byte[] hashedPasswordBytes=null;
    if (password != null) {
      try {
        MessageDigest md=MessageDigest.getInstance("SHA-1");
        hashedPasswordBytes=md.digest(password.getBytes("UTF-8"));
      }
 catch (      NoSuchAlgorithmException e) {
        throw new RuntimeException("JVM doesn't support SHA-1 hashing. Please use a supported JVM",e);
      }
catch (      UnsupportedEncodingException e) {
        throw new RuntimeException("JVM doesn't support UTF-8. Please use a supported JVM",e);
      }
    }
    if (hashedPassword != null) {
      if (hashedPassword.length() != 40) {
        throw new Exception("Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded).");
      }
      try {
        hashedPasswordBytes=Encoder.hexDecode(hashedPassword);
      }
 catch (      Exception e) {
        throw new Exception("Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded).");
      }
    }
    assert((hashedPasswordBytes == null) || (hashedPasswordBytes.length == 20));
    client=m_connections.getClient(username,password,hashedPasswordBytes,adminMode);
    JSONProcCallback cb=new JSONProcCallback(request,continuation,jsonp);
    boolean success;
    if (params != null) {
      ParameterSet paramSet=null;
      try {
        paramSet=ParameterSet.fromJSONString(params);
      }
 catch (      Exception e) {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        continuation.complete();
        return;
      }
      if (paramSet == null) {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        continuation.complete();
        return;
      }
      success=client.callProcedure(cb,procName,paramSet.toArray());
    }
 else {
      success=client.callProcedure(cb,procName);
    }
    if (!success) {
      throw new Exception("Server is not accepting work at this time.");
    }
    if (adminMode) {
      cb.waitForResponse();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=e.getMessage();
    VoltLogger log=new VoltLogger("HOST");
    log.warn("JSON interface exception: " + msg,e);
    ClientResponseImpl rimpl=new ClientResponseImpl(ClientResponse.UNEXPECTED_FAILURE,new VoltTable[0],msg);
    msg=rimpl.toJSONString();
    response.setStatus(HttpServletResponse.SC_OK);
    request.setHandled(true);
    try {
      response.getWriter().print(msg);
      continuation.complete();
    }
 catch (    IOException e1) {
    }
  }
 finally {
    if (client != null) {
      assert(m_connections != null);
      if (adminMode) {
        if (client != null) {
          try {
            client.close();
          }
 catch (          InterruptedException e) {
            VoltLogger log=new VoltLogger("HOST");
            log.warn("JSON interface was interrupted while closing an internal admin client connection.");
          }
        }
      }
 else {
        m_connections.releaseClient(client);
      }
    }
  }
}
