{
  AuthenticationResult authResult=null;
  boolean suspended=false;
  boolean forceClose=false;
  String jsonp=request.getHeader(JSONP);
  if (jsonp != null && jsonp.trim().isEmpty()) {
    jsonp=null;
  }
  String authHeader=request.getHeader(HttpHeader.AUTHORIZATION.asString());
  if (m_spnegoEnabled && (authHeader == null || !authHeader.startsWith(HttpHeader.NEGOTIATE.asString()))) {
    m_log.debug("SpengoAuthenticator: sending challenge");
    response.setHeader(HttpHeader.WWW_AUTHENTICATE.asString(),HttpHeader.NEGOTIATE.asString());
    unauthorized(jsonp,"must initiate SPNEGO negotiation",response);
    request.setHandled(true);
    return;
  }
  final Continuation continuation=ContinuationSupport.getContinuation(request);
  String result=(String)continuation.getAttribute("result");
  if (result != null) {
    try {
      response.setStatus(HttpServletResponse.SC_OK);
      response.getWriter().print(result);
      request.setHandled(true);
    }
 catch (    IllegalStateException|IOException e) {
      m_log.warn("JSON failed to send response: ",e);
    }
    return;
  }
  if (Boolean.TRUE.equals(continuation.getAttribute("SQLSUBMITTED"))) {
    try {
      continuation.suspend(response);
    }
 catch (    IllegalStateException e) {
      m_log.warn("JSON request completion exception in process: ",e);
    }
    return;
  }
  if (m_timeout > 0 && continuation.isInitial()) {
    continuation.setTimeout(m_timeout);
  }
  try {
    if (request.getMethod().equalsIgnoreCase("POST")) {
      int queryParamSize=request.getContentLength();
      if (queryParamSize > MAX_QUERY_PARAM_SIZE) {
        ok(jsonp,"Query string too large: " + String.valueOf(request.getContentLength()),response);
        request.setHandled(true);
        return;
      }
      if (queryParamSize == 0) {
        ok(jsonp,"Received POST with no parameters in the body.",response);
        request.setHandled(true);
        return;
      }
    }
    if (jsonp == null) {
      jsonp=request.getParameter(JSONP);
    }
    String procName=request.getParameter("Procedure");
    String params=request.getParameter("Parameters");
    String timeoutStr=request.getParameter(QUERY_TIMEOUT_PARAM);
    if (procName == null) {
      badRequest(jsonp,"Procedure parameter is missing",response);
      request.setHandled(true);
      return;
    }
    int queryTimeout=-1;
    if (timeoutStr != null) {
      try {
        queryTimeout=Integer.parseInt(timeoutStr);
        if (queryTimeout <= 0) {
          throw new NumberFormatException();
        }
      }
 catch (      NumberFormatException e) {
        badRequest(jsonp,"invalid query timeout: " + timeoutStr,response);
        request.setHandled(true);
      }
      return;
    }
    authResult=authenticate(request);
    if (!authResult.isAuthenticated()) {
      ok(jsonp,authResult.m_message,response);
      request.setHandled(true);
      return;
    }
    continuation.suspend(response);
    suspended=true;
    JSONProcCallback cb=new JSONProcCallback(request,continuation,jsonp);
    boolean success;
    if (params != null) {
      ParameterSet paramSet=null;
      try {
        paramSet=ParameterSet.fromJSONString(params);
      }
 catch (      Exception e) {
        badRequest(jsonp,"failed to parse invocation parameters",response);
        request.setHandled(true);
        continuation.complete();
        return;
      }
      if (paramSet == null) {
        badRequest(jsonp,"failed to decode invocation parameters",response);
        request.setHandled(true);
        continuation.complete();
        return;
      }
      if (queryTimeout == -1) {
        success=authResult.m_client.callProcedure(cb,procName,paramSet.toArray());
      }
 else {
        success=authResult.m_client.callProcedureWithTimeout(cb,queryTimeout,procName,paramSet.toArray());
      }
    }
 else {
      if (queryTimeout == -1) {
        success=authResult.m_client.callProcedure(cb,procName);
      }
 else {
        success=authResult.m_client.callProcedureWithTimeout(cb,queryTimeout,procName);
      }
    }
    if (!success) {
      ok(jsonp,"Server is not accepting work at this time.",response);
      request.setHandled(true);
      continuation.complete();
      return;
    }
    if (jsonp != null) {
      request.setAttribute("jsonp",jsonp);
    }
    continuation.setAttribute("SQLSUBMITTED",Boolean.TRUE);
  }
 catch (  Exception e) {
    String msg=Throwables.getStackTraceAsString(e);
    if (e instanceof IOException || e instanceof NoConnectionsException) {
      forceClose=true;
    }
    m_rate_limited_log.log(EstTime.currentTimeMillis(),Level.WARN,e,"JSON interface exception");
    ok(jsonp,msg,response);
    if (suspended) {
      continuation.complete();
    }
    request.setHandled(true);
  }
 finally {
    releaseClient(authResult,forceClose);
  }
}
