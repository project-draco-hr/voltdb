{
  boolean adminMode=false;
  if (m_shouldUpdateCatalog.compareAndSet(true,false)) {
    m_connections.closeAll();
    m_connections=null;
  }
  if (m_connections == null) {
    int port=VoltDB.instance().getConfig().m_port;
    int adminPort=VoltDB.instance().getConfig().m_adminPort;
    String externalInterface=VoltDB.instance().getConfig().m_externalInterface;
    String adminInterface="localhost";
    String clientInterface="localhost";
    if (externalInterface != null && !externalInterface.isEmpty()) {
      clientInterface=externalInterface;
      adminInterface=externalInterface;
    }
    if (VoltDB.instance().getConfig().m_clientInterface.length() > 0) {
      clientInterface=VoltDB.instance().getConfig().m_clientInterface;
    }
    if (VoltDB.instance().getConfig().m_adminInterface.length() > 0) {
      adminInterface=VoltDB.instance().getConfig().m_adminInterface;
    }
    m_connections=new AuthenticatedConnectionCache(10,clientInterface,port,adminInterface,adminPort);
  }
  String username=request.getParameter("User");
  String password=request.getParameter("Password");
  String hashedPassword=request.getParameter("Hashedpassword");
  String admin=request.getParameter("admin");
  if (admin != null) {
    if (admin.compareToIgnoreCase("true") == 0) {
      adminMode=true;
    }
  }
  byte[] hashedPasswordBytes=null;
  if (password != null) {
    try {
      MessageDigest md=MessageDigest.getInstance("SHA-1");
      hashedPasswordBytes=md.digest(password.getBytes("UTF-8"));
    }
 catch (    NoSuchAlgorithmException e) {
      throw new RuntimeException("JVM doesn't support SHA-1 hashing. Please use a supported JVM",e);
    }
catch (    UnsupportedEncodingException e) {
      throw new RuntimeException("JVM doesn't support UTF-8. Please use a supported JVM",e);
    }
  }
  if (hashedPassword != null) {
    if (hashedPassword.length() != 40) {
      throw new Exception("Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded).");
    }
    try {
      hashedPasswordBytes=Encoder.hexDecode(hashedPassword);
    }
 catch (    Exception e) {
      throw new Exception("Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded).");
    }
  }
  assert((hashedPasswordBytes == null) || (hashedPasswordBytes.length == 20));
  return new ClientInfo(m_connections.getClient(username,password,hashedPasswordBytes,adminMode),adminMode);
}
