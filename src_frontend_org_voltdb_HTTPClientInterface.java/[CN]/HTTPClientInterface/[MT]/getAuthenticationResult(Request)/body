{
  boolean adminMode=false;
  String username=null;
  String hashedPassword=null;
  String password=null;
  String token=null;
  String auth=request.getHeader(HttpHeader.AUTHORIZATION.asString());
  boolean validAuthHeader=false;
  if (auth != null) {
    String schemeAndHandle[]=auth.split(" ");
    if (auth.startsWith(HttpHeader.NEGOTIATE.asString())) {
      token=(auth.length() >= 10 ? auth.substring(10) : "");
      validAuthHeader=true;
    }
 else     if (schemeAndHandle.length == 2) {
      if (schemeAndHandle[0].equalsIgnoreCase("hashed")) {
        String up[]=schemeAndHandle[1].split(":");
        if (up.length == 2) {
          username=up[0];
          hashedPassword=up[1];
          validAuthHeader=true;
        }
      }
 else       if (schemeAndHandle[0].equalsIgnoreCase("basic")) {
        String unpw=new String(Base64.decode(schemeAndHandle[1]));
        String up[]=unpw.split(":");
        if (up.length == 2) {
          username=up[0];
          password=up[1];
          validAuthHeader=true;
        }
      }
    }
  }
  if (!validAuthHeader) {
    username=request.getParameter(PARAM_USERNAME);
    hashedPassword=request.getParameter(PARAM_HASHEDPASSWORD);
    password=request.getParameter(PARAM_PASSWORD);
  }
  String admin=request.getParameter(PARAM_ADMIN);
  AuthenticatedConnectionCache connection_cache=m_connections.get();
  while (connection_cache == null) {
    if (m_oldCache != null) {
      closeAllAsync(m_oldCache);
    }
    final Configuration config=getVoltDBConfig();
    int port=config.m_port;
    int adminPort=config.m_adminPort;
    String externalInterface=config.m_externalInterface;
    String adminInterface="localhost";
    String clientInterface="localhost";
    if (externalInterface != null && !externalInterface.isEmpty()) {
      clientInterface=externalInterface;
      adminInterface=externalInterface;
    }
    if (config.m_clientInterface.length() > 0) {
      clientInterface=config.m_clientInterface;
    }
    if (config.m_adminInterface.length() > 0) {
      adminInterface=config.m_adminInterface;
    }
    AuthenticatedConnectionCache newCache=new AuthenticatedConnectionCache(10,clientInterface,port,adminInterface,adminPort);
    boolean setNewValue=m_connections.compareAndSet(null,newCache);
    if (setNewValue) {
      connection_cache=newCache;
    }
 else {
      connection_cache=m_connections.get();
    }
  }
  adminMode="true".equalsIgnoreCase(admin);
  byte[] hashedPasswordBytes=null;
  if (password != null) {
    try {
      MessageDigest md=MessageDigest.getInstance(ClientAuthScheme.getDigestScheme(ClientAuthScheme.HASH_SHA256));
      hashedPasswordBytes=md.digest(password.getBytes(StandardCharsets.UTF_8));
    }
 catch (    Exception e) {
      return new AuthenticationResult(null,null,null,adminMode,username,"JVM doesn't support SHA-256 hashing. Please use a supported JVM" + e);
    }
  }
  if (hashedPassword != null) {
    if (hashedPassword.length() != 40 && hashedPassword.length() != 64) {
      return new AuthenticationResult(null,null,null,adminMode,username,"Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded). " + "or 64-byte hex-encoded SHA-256 hash (32 bytes unencoded)");
    }
    try {
      hashedPasswordBytes=Encoder.hexDecode(hashedPassword);
    }
 catch (    Exception e) {
      return new AuthenticationResult(null,null,null,adminMode,username,"Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded). " + "or 64-byte hex-encoded SHA-256 hash (32 bytes unencoded)");
    }
  }
  assert((hashedPasswordBytes == null) || (hashedPasswordBytes.length == 20) || (hashedPasswordBytes.length == 32));
  AuthenticatedConnectionCache.ClientWithHashScheme clientWithScheme;
  try {
    if (m_spnegoEnabled) {
      clientWithScheme=connection_cache.getClient(spnegoLogin(token),adminMode);
      if (clientWithScheme == null) {
        return new AuthenticationResult(null,null,null,adminMode,username,"Failed to get SPNEGO authenticated client.");
      }
      return new AuthenticationResult(clientWithScheme.m_client,connection_cache,clientWithScheme.m_scheme,adminMode,username,"");
    }
 else {
      clientWithScheme=connection_cache.getClient(username,password,hashedPasswordBytes,adminMode);
      if (clientWithScheme != null && clientWithScheme.m_client != null && clientWithScheme.m_scheme != null) {
        return new AuthenticationResult(clientWithScheme.m_client,connection_cache,clientWithScheme.m_scheme,adminMode,username,"");
      }
      return new AuthenticationResult(null,null,null,adminMode,username,"Failed to get client.");
    }
  }
 catch (  IOException ex) {
    return new AuthenticationResult(null,null,null,adminMode,username,ex.getMessage());
  }
}
