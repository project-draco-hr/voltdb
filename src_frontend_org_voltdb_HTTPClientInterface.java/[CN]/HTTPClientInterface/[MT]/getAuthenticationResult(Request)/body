{
  boolean adminMode=false;
  String username=null;
  String hashedPassword=null;
  String password=null;
  String token=null;
  String auth=request.getHeader(HttpHeader.AUTHORIZATION.asString());
  boolean validAuthHeader=false;
  if (auth != null) {
    String schemeAndHandle[]=auth.split(" ");
    if (auth.startsWith(HttpHeader.NEGOTIATE.asString())) {
      token=(auth.length() >= 10 ? auth.substring(10) : "");
      validAuthHeader=true;
    }
 else     if (schemeAndHandle.length == 2) {
      if (schemeAndHandle[0].equalsIgnoreCase("hashed")) {
        String up[]=schemeAndHandle[1].split(":");
        if (up.length == 2) {
          username=up[0];
          hashedPassword=up[1];
          validAuthHeader=true;
        }
      }
 else       if (schemeAndHandle[0].equalsIgnoreCase("basic")) {
        String unpw=new String(Base64.decode(schemeAndHandle[1]));
        String up[]=unpw.split(":");
        if (up.length == 2) {
          username=up[0];
          password=up[1];
          validAuthHeader=true;
        }
      }
    }
  }
  if (!validAuthHeader) {
    username=request.getParameter(PARAM_USERNAME);
    hashedPassword=request.getParameter(PARAM_HASHEDPASSWORD);
    password=request.getParameter(PARAM_PASSWORD);
  }
  String admin=request.getParameter(PARAM_ADMIN);
  adminMode="true".equalsIgnoreCase(admin);
  byte[] hashedPasswordBytes=null;
  if (password != null) {
    try {
      MessageDigest md=MessageDigest.getInstance(ClientAuthScheme.getDigestScheme(ClientAuthScheme.HASH_SHA256));
      hashedPasswordBytes=md.digest(password.getBytes(StandardCharsets.UTF_8));
    }
 catch (    Exception e) {
      return new AuthenticationResult(false,null,adminMode,username,"JVM doesn't support SHA-256 hashing. Please use a supported JVM" + e);
    }
  }
  if (hashedPassword != null) {
    if (hashedPassword.length() != 40 && hashedPassword.length() != 64) {
      return new AuthenticationResult(false,null,adminMode,username,"Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded). " + "or 64-byte hex-encoded SHA-256 hash (32 bytes unencoded)");
    }
    try {
      hashedPasswordBytes=Encoder.hexDecode(hashedPassword);
    }
 catch (    Exception e) {
      return new AuthenticationResult(false,null,adminMode,username,"Hashedpassword must be a 40-byte hex-encoded SHA-1 hash (20 bytes unencoded). " + "or 64-byte hex-encoded SHA-256 hash (32 bytes unencoded)");
    }
  }
  assert((hashedPasswordBytes == null) || (hashedPasswordBytes.length == 20) || (hashedPasswordBytes.length == 32));
  if (m_spnegoEnabled) {
    final String principal=spnegoLogin(token);
    AuthenticationRequest authReq=getAuthSystem().new SpnegoPassthroughRequest(principal);
    if (!authReq.authenticate(ClientAuthScheme.SPNEGO)) {
      return new AuthenticationResult(false,null,adminMode,principal,"User " + principal + " failed to authorize");
    }
    return new AuthenticationResult(true,ClientAuthScheme.SPNEGO,adminMode,principal,"");
  }
 else {
    AuthenticationRequest authReq=getAuthSystem().new HashAuthenticationRequest(username,hashedPasswordBytes);
    ClientAuthScheme scheme=hashedPasswordBytes != null ? ClientAuthScheme.getByUnencodedLength(hashedPasswordBytes.length) : ClientAuthScheme.HASH_SHA256;
    if (!authReq.authenticate(scheme)) {
      return new AuthenticationResult(false,null,adminMode,username,"User " + username + " failed to authorize");
    }
    return new AuthenticationResult(true,scheme,adminMode,username,"");
  }
}
