{
  try {
    ListenableFuture<? extends I> localInputFuture=inputFuture;
    F localFunction=function;
    if (isCancelled() | localInputFuture == null | localFunction == null) {
      return;
    }
    inputFuture=null;
    function=null;
    I sourceResult;
    try {
      sourceResult=getUninterruptibly(localInputFuture);
    }
 catch (    CancellationException e) {
      cancel(false);
      return;
    }
catch (    ExecutionException e) {
      setException(e.getCause());
      return;
    }
    doTransform(localFunction,sourceResult);
  }
 catch (  UndeclaredThrowableException e) {
    setException(e.getCause());
  }
catch (  Throwable t) {
    setException(t);
  }
}
