{
  ListenableFuture<? extends V> localInputFuture=inputFuture;
  Class<X> localExceptionType=exceptionType;
  F localFallback=fallback;
  if (localInputFuture == null | localExceptionType == null | localFallback == null | isCancelled()) {
    return;
  }
  inputFuture=null;
  exceptionType=null;
  fallback=null;
  Throwable throwable;
  try {
    set(getUninterruptibly(localInputFuture));
    return;
  }
 catch (  ExecutionException e) {
    throwable=e.getCause();
  }
catch (  Throwable e) {
    throwable=e;
  }
  try {
    if (isInstanceOfThrowableClass(throwable,localExceptionType)) {
      @SuppressWarnings("unchecked") X castThrowable=(X)throwable;
      doFallback(localFallback,castThrowable);
    }
 else {
      setException(throwable);
    }
  }
 catch (  Throwable e) {
    setException(e);
  }
}
