{
  Maker<SiteFailureMessage> s2fail=a(SiteFailureMessage,with(sfmSurvivors,Longs.asList(1,3,4)),with(sfmSafeTxns,sfmSafe(2,22)),with(sfmFailures,sfmFailed(2)));
  s1.startSeekingFor(hsids,ImmutableMap.of(2L,true));
  s3.startSeekingFor(hsids,ImmutableMap.of(2L,true));
  s4.startSeekingFor(hsids,ImmutableMap.of(2L,true));
  s1.add(make(s2fail.but(with(sfmSource,1L))));
  s1.add(make(s2fail.but(with(sfmSource,3L))));
  s1.add(make(s2fail.but(with(sfmSource,4L))));
  s3.add(make(s2fail.but(with(sfmSource,1L))));
  s3.add(make(s2fail.but(with(sfmSource,3L))));
  s3.add(make(s2fail.but(with(sfmSource,4L))));
  s4.add(make(s2fail.but(with(sfmSource,1L))));
  s4.add(make(s2fail.but(with(sfmSource,3L))));
  s4.add(make(s2fail.but(with(sfmSource,4L))));
  assertThat(s1.nextKill(),contains(2L));
  assertThat(s3.nextKill(),contains(2L));
  assertThat(s4.nextKill(),contains(2L));
  assertThat(s1.needForward(),equalTo(false));
  assertThat(s3.needForward(),equalTo(false));
  assertThat(s4.needForward(),equalTo(false));
  assertThat(s1.forWhomSiteIsDead(2L),empty());
  assertThat(s3.forWhomSiteIsDead(2L),empty());
  assertThat(s4.forWhomSiteIsDead(2L),empty());
}
