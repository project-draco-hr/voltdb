{
  Maker<SiteFailureMessage> msg=a(SiteFailureMessage,with(sfmSurvivors,Longs.asList(1,2,3,4)),with(sfmSafeTxns,sfmSafe(3,33,4,44)),with(sfmFailures,sfmFailed(3,4)));
  s1.startSeekingFor(hsids,ImmutableMap.of(3L,false,4L,false));
  s2.startSeekingFor(hsids,ImmutableMap.of(3L,false,4L,false));
  s3.startSeekingFor(hsids,ImmutableMap.of(3L,false,4L,true));
  s4.startSeekingFor(hsids,ImmutableMap.of(3L,true,4L,false));
  s1.add(make(msg.but(with(sfmSource,1L))));
  s1.add(make(msg.but(with(sfmSource,2L))));
  s1.add(make(msg.but(with(sfmSource,3L),with(sfmSurvivors,Longs.asList(1,2,3)))));
  s1.add(make(msg.but(with(sfmSource,4L),with(sfmSurvivors,Longs.asList(1,2,4)))));
  s2.add(make(msg.but(with(sfmSource,1L))));
  s2.add(make(msg.but(with(sfmSource,2L))));
  s2.add(make(msg.but(with(sfmSource,3L),with(sfmSurvivors,Longs.asList(1,2,3)))));
  s2.add(make(msg.but(with(sfmSource,4L),with(sfmSurvivors,Longs.asList(1,2,4)))));
  s3.add(make(msg.but(with(sfmSource,1L))));
  s3.add(make(msg.but(with(sfmSource,2L))));
  s3.add(make(msg.but(with(sfmSource,3L),with(sfmSurvivors,Longs.asList(1,2,3)))));
  s4.add(make(msg.but(with(sfmSource,1L))));
  s4.add(make(msg.but(with(sfmSource,2L))));
  s4.add(make(msg.but(with(sfmSource,3L),with(sfmSurvivors,Longs.asList(1,2,4)))));
  assertThat(s1.needForward(),equalTo(false));
  assertThat(s2.needForward(),equalTo(false));
  assertThat(s3.needForward(),equalTo(true));
  assertThat(s4.needForward(),equalTo(true));
  assertThat(s1.forWhomSiteIsDead(4L),contains(3L));
  assertThat(s1.forWhomSiteIsDead(3L),contains(4L));
  assertThat(s2.forWhomSiteIsDead(4L),contains(3L));
  assertThat(s2.forWhomSiteIsDead(3L),contains(4L));
  assertThat(s2.forWhomSiteIsDead(2L),empty());
  assertThat(s3.forWhomSiteIsDead(4L),empty());
  assertThat(s4.forWhomSiteIsDead(3L),empty());
  assertThat(s4.forWhomSiteIsDead(4L),empty());
  s3.add(make(a(FailureSiteForwardMessage,with(fsfmMsg,msg.but(with(sfmSource,4L),with(sfmSurvivors,Longs.asList(1,2,4)))))));
  s4.add(make(a(FailureSiteForwardMessage,with(fsfmMsg,msg.but(with(sfmSource,3L),with(sfmSurvivors,Longs.asList(1,2,3)))))));
  assertThat(s3.needForward(),equalTo(false));
  assertThat(s4.needForward(),equalTo(false));
  assertThat(s1.nextKill(),contains(4L));
  assertThat(s2.nextKill(),contains(4L));
  assertThat(s3.nextKill(),contains(4L));
  assertThat(s4.nextKill(),contains(3L));
}
