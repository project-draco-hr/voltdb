{
  checkNotNull(elements);
  checkNonnegative(k,"k");
  if (k == 0 || !elements.hasNext()) {
    return ImmutableList.of();
  }
 else   if (k >= Integer.MAX_VALUE / 2) {
    ArrayList<E> list=Lists.newArrayList(elements);
    Collections.sort(list,this);
    if (list.size() > k) {
      list.subList(k,list.size()).clear();
    }
    list.trimToSize();
    return Collections.unmodifiableList(list);
  }
  int bufferCap=k * 2;
  @SuppressWarnings("unchecked") E[] buffer=(E[])new Object[bufferCap];
  E threshold=elements.next();
  buffer[0]=threshold;
  int bufferSize=1;
  while (bufferSize < k && elements.hasNext()) {
    E e=elements.next();
    buffer[bufferSize++]=e;
    threshold=max(threshold,e);
  }
  while (elements.hasNext()) {
    E e=elements.next();
    if (compare(e,threshold) >= 0) {
      continue;
    }
    buffer[bufferSize++]=e;
    if (bufferSize == bufferCap) {
      int left=0;
      int right=bufferCap - 1;
      int minThresholdPosition=0;
      while (left < right) {
        int pivotIndex=(left + right + 1) >>> 1;
        int pivotNewIndex=partition(buffer,left,right,pivotIndex);
        if (pivotNewIndex > k) {
          right=pivotNewIndex - 1;
        }
 else         if (pivotNewIndex < k) {
          left=Math.max(pivotNewIndex,left + 1);
          minThresholdPosition=pivotNewIndex;
        }
 else {
          break;
        }
      }
      bufferSize=k;
      threshold=buffer[minThresholdPosition];
      for (int i=minThresholdPosition + 1; i < bufferSize; i++) {
        threshold=max(threshold,buffer[i]);
      }
    }
  }
  Arrays.sort(buffer,0,bufferSize,this);
  bufferSize=Math.min(bufferSize,k);
  return Collections.unmodifiableList(Arrays.asList(ObjectArrays.arraysCopyOf(buffer,bufferSize)));
}
