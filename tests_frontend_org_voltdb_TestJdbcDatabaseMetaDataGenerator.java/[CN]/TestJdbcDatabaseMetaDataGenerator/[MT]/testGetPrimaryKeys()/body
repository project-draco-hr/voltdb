{
  String schema="create table Table1 (Column1 smallint not null, constraint primary1 primary key (Column1));" + "partition table Table1 on column Column1;" + "create table Table2 (Column2 smallint not null, Column3 smallint not null, Column4 smallint not null, "+ "  constraint primary2 primary key (Column2, Column3, Column4));"+ "create procedure sample as select * from Table1;";
  VoltCompiler c=compileForDDLTest2(schema);
  System.out.println(c.getCatalog().serialize());
  JdbcDatabaseMetaDataGenerator dut=new JdbcDatabaseMetaDataGenerator(c.getCatalog(),new InMemoryJarfile(testout_jar));
  VoltTable pkeys=dut.getMetaData("PrimaryKeys");
  System.out.println(pkeys);
  assertEquals(6,pkeys.getColumnCount());
  assertEquals(4,pkeys.getRowCount());
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(pkeys,"COLUMN_NAME","Column1"));
  assertEquals("TABLE1",pkeys.get("TABLE_NAME",VoltType.STRING));
  assertEquals((short)1,pkeys.get("KEY_SEQ",VoltType.SMALLINT));
  assertEquals("PRIMARY1",pkeys.get("PK_NAME",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(pkeys,"COLUMN_NAME","Column2"));
  assertEquals("TABLE2",pkeys.get("TABLE_NAME",VoltType.STRING));
  assertEquals((short)1,pkeys.get("KEY_SEQ",VoltType.SMALLINT));
  assertEquals("PRIMARY2",pkeys.get("PK_NAME",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(pkeys,"COLUMN_NAME","Column3"));
  assertEquals("TABLE2",pkeys.get("TABLE_NAME",VoltType.STRING));
  assertEquals((short)2,pkeys.get("KEY_SEQ",VoltType.SMALLINT));
  assertEquals("PRIMARY2",pkeys.get("PK_NAME",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(pkeys,"COLUMN_NAME","Column4"));
  assertEquals("TABLE2",pkeys.get("TABLE_NAME",VoltType.STRING));
  assertEquals((short)3,pkeys.get("KEY_SEQ",VoltType.SMALLINT));
  assertEquals("PRIMARY2",pkeys.get("PK_NAME",VoltType.STRING));
}
