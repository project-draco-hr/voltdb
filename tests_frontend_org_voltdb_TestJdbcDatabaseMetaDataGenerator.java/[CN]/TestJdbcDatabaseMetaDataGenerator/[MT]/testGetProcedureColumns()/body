{
  String schema="create table Table1 (Column1 varchar(200) not null, Column2 integer);";
  String project="<?xml version=\"1.0\"?>\n" + "<project>" + "  <database name='database'>"+ "    <schemas><schema path='" + getPathForSchema(schema) + "' /></schemas>"+ "    <procedures>"+ "      <procedure class='proc1' partitioninfo=\"Table1.Column1:0\"><sql>select * from Table1 where Column1=?</sql></procedure>"+ "      <procedure class='proc2'><sql>select * from Table1 where Column2=?</sql></procedure>"+ "    </procedures>"+ "    <partitions><partition table='Table1' column='Column1'/></partitions>"+ "  </database>"+ "</project>";
  VoltCompiler c=compileForDDLTest(project);
  System.out.println(c.getCatalog().serialize());
  JdbcDatabaseMetaDataGenerator dut=new JdbcDatabaseMetaDataGenerator(c.getCatalog());
  VoltTable params=dut.getMetaData("ProcedureColumns");
  System.out.println(params);
  assertEquals(20,params.getColumnCount());
  assertEquals(2,params.getRowCount());
  assertTrue(moveToMatchingRow(params,"PROCEDURE_NAME","proc1"));
  assertEquals("param0",params.get("COLUMN_NAME",VoltType.STRING));
  assertEquals(VoltType.MAX_VALUE_LENGTH,params.get("PRECISION",VoltType.INTEGER));
  assertEquals(VoltType.MAX_VALUE_LENGTH,params.get("LENGTH",VoltType.INTEGER));
  assertEquals(VoltType.MAX_VALUE_LENGTH,params.get("CHAR_OCTET_LENGTH",VoltType.INTEGER));
  assertEquals("PARTITION_PARAMETER",params.get("REMARKS",VoltType.STRING));
  assertTrue(moveToMatchingRow(params,"PROCEDURE_NAME","proc2"));
  assertEquals("param0",params.get("COLUMN_NAME",VoltType.STRING));
  assertEquals(VoltType.INTEGER.getLengthInBytesForFixedTypes() * 8 - 1,params.get("PRECISION",VoltType.INTEGER));
  assertEquals(VoltType.INTEGER.getLengthInBytesForFixedTypes(),params.get("LENGTH",VoltType.INTEGER));
  assertWithNullCheck(null,params.get("CHAR_OCTET_LENGTH",VoltType.INTEGER),params);
  assertWithNullCheck(null,params.get("REMARKS",VoltType.STRING),params);
}
