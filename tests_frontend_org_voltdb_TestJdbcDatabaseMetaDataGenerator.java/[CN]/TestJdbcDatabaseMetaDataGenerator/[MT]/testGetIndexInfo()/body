{
  String schema="create table Table1 (Column1 smallint ASSUMEUNIQUE, Column2 integer, Column3 bigint not null, Column4 integer, Column5 integer, " + "  constraint pk_tree primary key (Column1, Column3));" + "partition table Table1 on column Column3;"+ "create index Index1_tree on Table1 (Column2, Column3);"+ "create index Index2_hash on Table1 (Column4, Column5);"+ "create procedure sample as select * from Table1;";
  VoltCompiler c=compileForDDLTest2(schema);
  System.out.println(c.getCatalog().serialize());
  JdbcDatabaseMetaDataGenerator dut=new JdbcDatabaseMetaDataGenerator(c.getCatalog(),new InMemoryJarfile(testout_jar));
  VoltTable indexes=dut.getMetaData("IndexInfo");
  System.out.println(indexes);
  assertEquals(13,indexes.getColumnCount());
  assertEquals(7,indexes.getRowCount());
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME","INDEX1_TREE","COLUMN_NAME","Column2"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME","INDEX1_TREE","COLUMN_NAME","Column3"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)2,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME","INDEX2_HASH","COLUMN_NAME","Column4"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexHashed,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals(null,indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME","INDEX2_HASH","COLUMN_NAME","Column5"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexHashed,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)2,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals(null,indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME",HSQLInterface.AUTO_GEN_CONSTRAINT_WRAPPER_PREFIX + "PK_TREE","COLUMN_NAME","Column1"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)0,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME",HSQLInterface.AUTO_GEN_CONSTRAINT_WRAPPER_PREFIX + "PK_TREE","COLUMN_NAME","Column3"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)0,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)2,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingTupleRow(indexes,"INDEX_NAME",HSQLInterface.AUTO_GEN_CONSTRAINT_PREFIX + "TABLE1_COLUMN1","COLUMN_NAME","Column1"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)0,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertFalse(VoltTableTestHelpers.moveToMatchingRow(indexes,"COLUMN_NAME","NotAColumn"));
}
