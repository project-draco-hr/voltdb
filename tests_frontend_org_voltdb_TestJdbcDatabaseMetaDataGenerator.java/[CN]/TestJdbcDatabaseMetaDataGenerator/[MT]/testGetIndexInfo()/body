{
  String schema="create table Table1 (Column1 smallint ASSUMEUNIQUE, Column2 integer, Column3 bigint not null, Column4 integer, Column5 integer, " + "  constraint pk_tree primary key (Column1, Column3));" + "create index Index1_tree on Table1 (Column2, Column3);"+ "create index Index2_hash on Table1 (Column4, Column5);";
  String project="<?xml version=\"1.0\"?>\n" + "<project>" + "  <database name='database'>"+ "    <schemas><schema path='" + getPathForSchema(schema) + "' /></schemas>"+ "    <procedures><procedure class='sample'><sql>select * from Table1</sql></procedure></procedures>"+ "    <partitions><partition table='Table1' column='Column3'/></partitions>"+ "  </database>"+ "</project>";
  VoltCompiler c=compileForDDLTest(project);
  System.out.println(c.getCatalog().serialize());
  JdbcDatabaseMetaDataGenerator dut=new JdbcDatabaseMetaDataGenerator(c.getCatalog());
  VoltTable indexes=dut.getMetaData("IndexInfo");
  System.out.println(indexes);
  assertEquals(13,indexes.getColumnCount());
  assertEquals(7,indexes.getRowCount());
  assertTrue(moveToMatchingRow(indexes,"COLUMN_NAME","Column2"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals("INDEX1_TREE",indexes.get("INDEX_NAME",VoltType.STRING));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(moveToMatchingRow(indexes,"COLUMN_NAME","Column3"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals("INDEX1_TREE",indexes.get("INDEX_NAME",VoltType.STRING));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)2,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(moveToMatchingRow(indexes,"COLUMN_NAME","Column4"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals("INDEX2_HASH",indexes.get("INDEX_NAME",VoltType.STRING));
  assertEquals(java.sql.DatabaseMetaData.tableIndexHashed,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals(null,indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(moveToMatchingRow(indexes,"COLUMN_NAME","Column5"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)1,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertEquals("INDEX2_HASH",indexes.get("INDEX_NAME",VoltType.STRING));
  assertEquals(java.sql.DatabaseMetaData.tableIndexHashed,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)2,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals(null,indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertTrue(moveToMatchingRow(indexes,"COLUMN_NAME","Column1"));
  assertEquals("TABLE1",indexes.get("TABLE_NAME",VoltType.STRING));
  assertEquals((byte)0,indexes.get("NON_UNIQUE",VoltType.TINYINT));
  assertTrue(((String)indexes.get("INDEX_NAME",VoltType.STRING)).contains("PK_TREE"));
  assertEquals(java.sql.DatabaseMetaData.tableIndexOther,indexes.get("TYPE",VoltType.SMALLINT));
  assertEquals((short)1,indexes.get("ORDINAL_POSITION",VoltType.SMALLINT));
  assertEquals("A",indexes.get("ASC_OR_DESC",VoltType.STRING));
  assertFalse(moveToMatchingRow(indexes,"COLUMN_NAME","NotAColumn"));
}
