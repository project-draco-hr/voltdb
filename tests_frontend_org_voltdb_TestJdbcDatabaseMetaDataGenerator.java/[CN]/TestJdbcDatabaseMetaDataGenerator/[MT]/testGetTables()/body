{
  String schema="create table Table1 (Column1 varchar(10) not null, Column2 integer);" + "partition table Table1 on column Column1;" + "create table Table2 (Column1 integer);"+ "create view View1 (Column1, num) as select Column1, count(*) from Table1 group by Column1;"+ "create view View2 (Column2, num) as select Column2, count(*) from Table1 group by Column2;"+ "create table Export1 (Column1 integer);"+ "export table Export1;"+ "create table Export2 (Column1 integer);"+ "export table Export2 to stream foo;"+ "create procedure sample as select * from Table1;";
  VoltCompiler c=compileForDDLTest2(schema);
  System.out.println(c.getCatalog().serialize());
  JdbcDatabaseMetaDataGenerator dut=new JdbcDatabaseMetaDataGenerator(c.getCatalog(),null,new InMemoryJarfile(testout_jar));
  VoltTable tables=dut.getMetaData("tables");
  System.out.println(tables);
  assertEquals(10,tables.getColumnCount());
  assertEquals(6,tables.getRowCount());
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","Table1"));
  assertTrue(tables.get("TABLE_TYPE",VoltType.STRING).equals("TABLE"));
  assertTrue(tables.get("REMARKS",VoltType.STRING).equals("{\"partitionColumn\":\"COLUMN1\"}"));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","Table2"));
  assertTrue(tables.get("TABLE_TYPE",VoltType.STRING).equals("TABLE"));
  assertEquals(null,tables.get("REMARKS",VoltType.STRING));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","View1"));
  assertTrue(tables.get("TABLE_TYPE",VoltType.STRING).equals("VIEW"));
  assertTrue(tables.get("REMARKS",VoltType.STRING).equals(new JSONObject("{\"partitionColumn\":\"COLUMN1\",\"sourceTable\":\"TABLE1\"}").toString()));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","View2"));
  assertTrue(tables.get("TABLE_TYPE",VoltType.STRING).equals("VIEW"));
  assertTrue(tables.get("REMARKS",VoltType.STRING).equals(new JSONObject("{\"partitionColumn\":\"COLUMN1\",\"sourceTable\":\"TABLE1\"}").toString()));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","Export1"));
  assertTrue(tables.get("TABLE_TYPE",VoltType.STRING).equals("EXPORT"));
  assertTrue(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","Export2"));
  assertTrue(tables.get("TABLE_TYPE",VoltType.STRING).equals("EXPORT"));
  assertFalse(VoltTableTestHelpers.moveToMatchingRow(tables,"TABLE_NAME","NotATable"));
}
