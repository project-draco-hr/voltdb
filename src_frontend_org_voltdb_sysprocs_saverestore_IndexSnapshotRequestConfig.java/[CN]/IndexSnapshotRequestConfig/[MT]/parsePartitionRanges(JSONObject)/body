{
  if (jsData != null) {
    try {
      JSONObject partitionObj=jsData.getJSONObject("partitionRanges");
      Iterator partitionKey=partitionObj.keys();
      ImmutableList.Builder<PartitionRanges> partitionRangesBuilder=ImmutableList.builder();
      while (partitionKey.hasNext()) {
        String pidStr=(String)partitionKey.next();
        JSONObject rangeObj=partitionObj.getJSONObject(pidStr);
        Iterator rangeKey=rangeObj.keys();
        ImmutableSortedMap.Builder<Integer,Integer> rangeBuilder=ImmutableSortedMap.naturalOrder();
        while (rangeKey.hasNext()) {
          String rangeStartStr=(String)rangeKey.next();
          int rangeStart=Integer.parseInt(rangeStartStr);
          int rangeEnd=rangeObj.getInt(rangeStartStr);
          rangeBuilder.put(rangeStart,rangeEnd);
        }
        partitionRangesBuilder.add(new PartitionRanges(Integer.parseInt(pidStr),rangeBuilder.build()));
      }
      return partitionRangesBuilder.build();
    }
 catch (    JSONException e) {
      SNAP_LOG.warn("Failed to parse partition ranges",e);
    }
  }
  return null;
}
