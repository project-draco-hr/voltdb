{
  assert(invocation != null);
  assert(cb != null);
  NodeConnection cxn=null;
  boolean backpressure=true;
synchronized (this) {
    final int totalConnections=m_connections.size();
    if (totalConnections == 0) {
      throw new NoConnectionsException("No connections.");
    }
    if (m_useClientAffinity && m_hashinatorInitialized) {
      final Procedure procedureInfo=m_procedureInfo.get(invocation.getProcName());
      if (procedureInfo != null) {
        Integer hashedPartition=MpInitiator.MP_INIT_PID;
        if (!procedureInfo.multiPart) {
          hashedPartition=invocation.getHashinatedParam(procedureInfo.partitionParameter);
        }
        if (procedureInfo.readOnly) {
          NodeConnection partitionReplicas[]=m_partitionReplicas.get(hashedPartition);
          if (partitionReplicas != null && partitionReplicas.length > 0) {
            cxn=partitionReplicas[ThreadLocalRandom.current().nextInt(partitionReplicas.length)];
            if (cxn.hadBackPressure()) {
              for (              NodeConnection nc : partitionReplicas) {
                if (!nc.hadBackPressure()) {
                  cxn=nc;
                  break;
                }
              }
            }
            if (!cxn.hadBackPressure() || ignoreBackpressure) {
              backpressure=false;
            }
          }
        }
 else {
          cxn=m_partitionMasters.get(hashedPartition);
          if (cxn != null && !cxn.hadBackPressure() || ignoreBackpressure) {
            backpressure=false;
          }
        }
      }
    }
    if (cxn == null) {
      for (int i=0; i < totalConnections; ++i) {
        cxn=m_connections.get(Math.abs(++m_nextConnection % totalConnections));
        if (!cxn.hadBackPressure() || ignoreBackpressure) {
          backpressure=false;
          break;
        }
      }
    }
    if (backpressure) {
      cxn=null;
      for (      ClientStatusListenerExt s : m_listeners) {
        s.backpressure(true);
      }
    }
  }
  if (cxn != null) {
    ByteBuffer buf=ByteBuffer.allocate(4 + invocation.getSerializedSize());
    buf.putInt(buf.capacity() - 4);
    try {
      invocation.flattenToBuffer(buf);
      buf.flip();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    cxn.createWork(invocation.getHandle(),invocation.getProcName(),buf,cb,ignoreBackpressure);
  }
  return !backpressure;
}
