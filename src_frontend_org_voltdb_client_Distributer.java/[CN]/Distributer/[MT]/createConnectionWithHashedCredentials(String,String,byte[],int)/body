{
  final Object socketChannelAndInstanceIdAndBuildString[]=ConnectionUtil.getAuthenticatedConnection(host,program,hashedPassword,port);
  InetSocketAddress address=new InetSocketAddress(host,port);
  final SocketChannel aChannel=(SocketChannel)socketChannelAndInstanceIdAndBuildString[0];
  final long instanceIdWhichIsTimestampAndLeaderIp[]=(long[])socketChannelAndInstanceIdAndBuildString[1];
  final int hostId=(int)instanceIdWhichIsTimestampAndLeaderIp[0];
synchronized (this) {
    if (m_clusterInstanceId == null) {
      long timestamp=instanceIdWhichIsTimestampAndLeaderIp[2];
      int addr=(int)instanceIdWhichIsTimestampAndLeaderIp[3];
      m_clusterInstanceId=new Object[]{timestamp,addr};
    }
 else {
      if (!(((Long)m_clusterInstanceId[0]).longValue() == instanceIdWhichIsTimestampAndLeaderIp[2]) || !(((Integer)m_clusterInstanceId[1]).longValue() == instanceIdWhichIsTimestampAndLeaderIp[3])) {
        aChannel.close();
        throw new IOException("Cluster instance id mismatch. Current is " + m_clusterInstanceId[0] + ","+ m_clusterInstanceId[1]+ " and server's was "+ instanceIdWhichIsTimestampAndLeaderIp[2]+ ","+ instanceIdWhichIsTimestampAndLeaderIp[3]);
      }
    }
    m_buildString=(String)socketChannelAndInstanceIdAndBuildString[2];
  }
  NodeConnection cxn=new NodeConnection(instanceIdWhichIsTimestampAndLeaderIp,address);
  Connection c=m_network.registerChannel(aChannel,cxn);
  cxn.m_hostname=c.getHostnameOrIP();
  cxn.m_port=port;
  cxn.m_connection=c;
  m_connections.add(cxn);
synchronized (this) {
    if (m_useClientAffinity) {
      ProcedureInvocation spi=new ProcedureInvocation(TOPOLOGY_HANDLE,"@Statistics","TOPO",0);
      queue(spi,new NullCallback(),true);
      spi=new ProcedureInvocation(PROCEDURE_HANDLE,"@SystemCatalog","PROCEDURES");
      queue(spi,new NullCallback(),true);
      m_hostIdToConnection.put(hostId,cxn);
    }
  }
}
