{
  try {
    ArrayList<NodeConnection> connections=new ArrayList<>();
synchronized (Distributer.this) {
      connections.addAll(m_connections);
    }
    final long nowNanos=System.nanoTime();
    for (    final NodeConnection c : connections) {
      final long sinceLastResponse=Math.max(1,nowNanos - c.m_lastResponseTimeNanos);
      if (c.m_outstandingPing && (sinceLastResponse > m_connectionResponseTimeoutNanos)) {
        c.m_closeCause=DisconnectCause.TIMEOUT;
        c.m_connection.unregister();
      }
      if ((!c.m_outstandingPing) && (sinceLastResponse > (m_connectionResponseTimeoutNanos / 3))) {
        c.sendPing();
      }
      for (      final Map.Entry<Long,CallbackBookeeping> e : c.m_callbacks.entrySet()) {
        final long handle=e.getKey();
        final CallbackBookeeping cb=e.getValue();
        final long deltaNanos=Math.max(1,nowNanos - cb.timestampNanos);
        if (deltaNanos > cb.procedureTimeoutNanos) {
          final boolean isLongOp=isLongOp(cb.name);
          if (isLongOp && (deltaNanos < TimeUnit.MILLISECONDS.toNanos(MINIMUM_LONG_RUNNING_SYSTEM_CALL_TIMEOUT_MS))) {
            continue;
          }
          c.handleTimedoutCallback(handle,nowNanos);
        }
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
