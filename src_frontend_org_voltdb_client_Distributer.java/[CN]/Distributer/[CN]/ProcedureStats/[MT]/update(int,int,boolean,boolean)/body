{
  m_maxRoundTripTime=Math.max(roundTripTime,m_maxRoundTripTime);
  m_lastMaxRoundTripTime=Math.max(roundTripTime,m_lastMaxRoundTripTime);
  m_minRoundTripTime=Math.min(roundTripTime,m_minRoundTripTime);
  m_lastMinRoundTripTime=Math.max(roundTripTime,m_lastMinRoundTripTime);
  m_maxClusterRoundTripTime=Math.max(clusterRoundTripTime,m_maxClusterRoundTripTime);
  m_lastMaxClusterRoundTripTime=Math.max(clusterRoundTripTime,m_lastMaxClusterRoundTripTime);
  m_minClusterRoundTripTime=Math.min(clusterRoundTripTime,m_minClusterRoundTripTime);
  m_lastMinClusterRoundTripTime=Math.min(clusterRoundTripTime,m_lastMinClusterRoundTripTime);
  m_invocationsCompleted++;
  if (abort) {
    m_invocationAborts++;
  }
  if (error) {
    m_invocationErrors++;
  }
  m_roundTripTime+=roundTripTime;
  m_clusterRoundTripTime+=clusterRoundTripTime;
  int rttBucket=(int)(Math.floor(roundTripTime / 10));
  if (rttBucket >= m_roundTripTimeBuckets.length) {
    rttBucket=m_roundTripTimeBuckets.length - 1;
  }
  m_roundTripTimeBuckets[rttBucket]+=1;
  int rttClusterBucket=(int)(Math.floor(clusterRoundTripTime / 10));
  if (rttClusterBucket >= m_clusterRoundTripTimeBuckets.length) {
    rttClusterBucket=m_clusterRoundTripTimeBuckets.length - 1;
  }
  m_clusterRoundTripTimeBuckets[rttClusterBucket]+=1;
}
