{
  long now=System.currentTimeMillis();
  ClientResponseImpl response=null;
  FastDeserializer fds=new FastDeserializer(buf);
  try {
    response=fds.readObject(ClientResponseImpl.class);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  ProcedureCallback cb=null;
  long callTime=0;
  int delta=0;
synchronized (this) {
    m_lastResponseTime=now;
    if (response.getClientHandle() == PING_HANDLE) {
      m_outstandingPing=false;
      return;
    }
    CallbackBookeeping stuff=m_callbacks.remove(response.getClientHandle());
    if (stuff == null) {
      for (      ClientStatusListenerExt listener : m_listeners) {
        listener.lateProcedureResponse(response,m_hostname,m_port);
      }
    }
 else {
      callTime=stuff.timestamp;
      delta=(int)(now - callTime);
      cb=stuff.callback;
      final byte status=response.getStatus();
      boolean abort=false;
      boolean error=false;
      if (status == ClientResponse.USER_ABORT || status == ClientResponse.GRACEFUL_FAILURE) {
        abort=true;
      }
 else       if (status != ClientResponse.SUCCESS) {
        error=true;
      }
      int clusterRoundTrip=response.getClusterRoundtrip();
      m_rateLimiter.transactionResponseReceived(now,clusterRoundTrip);
      updateStats(stuff.name,delta,clusterRoundTrip,abort,error);
    }
  }
  if (cb != null) {
    response.setClientRoundtrip(delta);
    try {
      cb.clientCallback(response);
    }
 catch (    Exception e) {
      uncaughtException(cb,response,e);
    }
    m_callbacksToInvoke.decrementAndGet();
  }
}
