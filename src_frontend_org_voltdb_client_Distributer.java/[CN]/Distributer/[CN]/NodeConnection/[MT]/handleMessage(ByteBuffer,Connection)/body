{
  long nowNanos=System.nanoTime();
  ClientResponseImpl response=new ClientResponseImpl();
  try {
    response.initFromBuffer(buf);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  final long handle=response.getClientHandle();
  if (handle == PING_HANDLE) {
    m_outstandingPing=false;
    return;
  }
 else   if (handle == ASYNC_TOPO_HANDLE) {
    ProcedureCallback cb=new TopoUpdateCallback();
    try {
      cb.clientCallback(response);
    }
 catch (    Exception e) {
      uncaughtException(cb,response,e);
    }
    final int remainingToInvoke=m_callbacksToInvoke.decrementAndGet();
    assert(remainingToInvoke >= 0);
    return;
  }
  m_lastResponseTimeNanos=nowNanos;
  final CallbackBookeeping stuff=m_callbacks.remove(response.getClientHandle());
  if (stuff == null) {
    if (handle >= 0) {
      for (      ClientStatusListenerExt listener : m_listeners) {
        listener.lateProcedureResponse(response,m_connection.getHostnameOrIP(),m_connection.getRemotePort());
      }
    }
  }
 else {
    final long callTimeNanos=stuff.timestampNanos;
    final long deltaNanos=Math.max(1,nowNanos - callTimeNanos);
    final ProcedureCallback cb=stuff.callback;
    assert(cb != null);
    final byte status=response.getStatus();
    boolean abort=false;
    boolean error=false;
    if (status == ClientResponse.USER_ABORT || status == ClientResponse.GRACEFUL_FAILURE) {
      abort=true;
    }
 else     if (status != ClientResponse.SUCCESS) {
      error=true;
    }
    int clusterRoundTrip=response.getClusterRoundtrip();
    if (!stuff.ignoreBackpressure) {
      m_rateLimiter.transactionResponseReceived(nowNanos,clusterRoundTrip);
    }
    updateStats(stuff.name,deltaNanos,clusterRoundTrip,abort,error);
    response.setClientRoundtrip(deltaNanos);
    assert(response.getHash() == null);
    try {
      cb.clientCallback(response);
    }
 catch (    Exception e) {
      uncaughtException(cb,response,e);
    }
    final int remainingToInvoke=m_callbacksToInvoke.decrementAndGet();
    assert(remainingToInvoke >= 0);
  }
}
