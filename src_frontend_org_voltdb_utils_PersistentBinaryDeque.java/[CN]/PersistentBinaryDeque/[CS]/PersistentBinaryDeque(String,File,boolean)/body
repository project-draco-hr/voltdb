{
  EELibraryLoader.loadExecutionEngineLibrary(true);
  m_path=path;
  m_nonce=nonce;
  if (!path.exists() || !path.canRead() || !path.canWrite()|| !path.canExecute()|| !path.isDirectory()) {
    throw new IOException(path + " is not usable ( !exists || !readable " + "|| !writable || !executable || !directory)");
  }
  final TreeMap<Long,PBDSegment> segments=new TreeMap<Long,PBDSegment>();
  try {
    path.listFiles(new FileFilter(){
      @Override public boolean accept(      File pathname){
        String[] parts=pathname.getName().split("\\.");
        String parsedNonce=null;
        String seqNum=null;
        String extension=null;
        if (parts.length > 3) {
          Joiner joiner=Joiner.on('.').skipNulls();
          parsedNonce=joiner.join(Arrays.asList(parts).subList(0,parts.length - 2));
          seqNum=parts[parts.length - 2];
          extension=parts[parts.length - 1];
        }
 else         if (parts.length == 3) {
          parsedNonce=parts[0];
          seqNum=parts[1];
          extension=parts[2];
        }
        if (nonce.equals(parsedNonce) && "pbd".equals(extension)) {
          if (pathname.length() == 4) {
            pathname.delete();
            return false;
          }
          Long index=Long.valueOf(seqNum);
          PBDSegment qs=new PBDSegment(index,pathname);
          try {
            qs.open(false);
            if (deleteEmpty) {
              if (qs.getNumEntries() == 0) {
                LOG.info("Found Empty Segment with entries: " + qs.getNumEntries() + " For: "+ pathname.getName());
                qs.closeAndDelete();
                return false;
              }
            }
            m_numObjects+=qs.getNumEntries();
            segments.put(index,qs);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
        return false;
      }
    }
);
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof IOException) {
      throw new IOException(e);
    }
    Throwables.propagate(e);
  }
  Long lastKey=null;
  for (  Map.Entry<Long,PBDSegment> e : segments.entrySet()) {
    final Long key=e.getKey();
    if (lastKey == null) {
      lastKey=key;
    }
 else {
      if (lastKey + 1 != key) {
        try {
          for (          PBDSegment pbds : segments.values()) {
            pbds.close();
          }
        }
 catch (        Exception ex) {
        }
        throw new IOException("Missing " + nonce + " pbd segments between "+ lastKey+ " and "+ key+ " in directory "+ path+ ". The data files found in the export overflow directory were inconsistent.");
      }
      lastKey=key;
    }
    m_segments.offer(e.getValue());
  }
  Long writeSegmentIndex=0L;
  try {
    writeSegmentIndex=segments.lastKey() + 1;
  }
 catch (  NoSuchElementException e) {
  }
  PBDSegment writeSegment=new PBDSegment(writeSegmentIndex,new VoltFile(m_path,m_nonce + "." + writeSegmentIndex+ ".pbd"));
  m_segments.offer(writeSegment);
  writeSegment.open(true);
  assertions();
}
