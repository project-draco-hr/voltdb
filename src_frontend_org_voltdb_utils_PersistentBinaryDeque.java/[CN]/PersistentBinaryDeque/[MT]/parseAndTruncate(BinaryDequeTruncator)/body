{
  if (m_closed) {
    throw new IOException("PBD has been closed");
  }
  assertions();
  if (m_segments.isEmpty()) {
    m_usageSpecificLog.debug("PBD " + m_nonce + " has no finished segments");
    return;
  }
  peekLastSegment().close();
  Long lastSegmentIndex=null;
  for (  PBDSegment segment : m_segments.values()) {
    final long segmentIndex=segment.segmentId();
    final int truncatedEntries=segment.parseAndTruncate(truncator);
    if (truncatedEntries == -1) {
      lastSegmentIndex=segmentIndex - 1;
      break;
    }
 else     if (truncatedEntries > 0) {
      m_numObjects-=truncatedEntries;
      lastSegmentIndex=segmentIndex;
      break;
    }
  }
  if (lastSegmentIndex == null) {
    peekLastSegment().openForWrite(true);
    return;
  }
  Iterator<Long> iterator=m_segments.descendingKeySet().iterator();
  while (iterator.hasNext()) {
    Long segmentId=iterator.next();
    if (segmentId <= lastSegmentIndex) {
      break;
    }
    PBDSegment segment=m_segments.get(segmentId);
    m_numObjects-=segment.getNumEntries();
    iterator.remove();
    m_usageSpecificLog.debug("Segment " + segment.file() + " has been closed and deleted by truncator");
    segment.closeAndDelete();
  }
  Long newSegmentIndex=0L;
  if (peekLastSegment() != null)   newSegmentIndex=peekLastSegment().segmentId() + 1;
  PBDSegment newSegment=newSegment(newSegmentIndex,new VoltFile(m_path,m_nonce + "." + newSegmentIndex+ ".pbd"));
  newSegment.openForWrite(true);
  if (m_usageSpecificLog.isDebugEnabled()) {
    m_usageSpecificLog.debug("Segment " + newSegment.file() + " has been created by PBD truncator");
  }
  m_segments.put(newSegment.segmentId(),newSegment);
  assertions();
}
