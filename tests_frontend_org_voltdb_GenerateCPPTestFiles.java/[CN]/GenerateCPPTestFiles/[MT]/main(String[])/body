{
  boolean generateGeoMessages=true;
  String clientDataDirName=".";
  long clusterStartTime=CLUSTER_START_TIME;
  int clusterRoundTripTime=CLUSTER_ROUND_TRIP_TIME;
  long clientData=CLIENT_DATA;
  int leaderIPAddr=LEADER_IP_ADDR;
  String buildString=BUILD_STRING;
  for (int idx=0; idx < args.length; idx+=1) {
    if ("--client-dir".equals(args[idx])) {
      idx+=1;
      clientDataDirName=args[idx];
    }
 else     if ("--clusterStartTime".equals(args[idx])) {
      idx+=1;
      clusterStartTime=Long.valueOf(args[idx]);
    }
 else     if ("--clientData".equals(args[idx])) {
      idx+=1;
      clientData=Long.valueOf(args[idx]);
    }
 else     if ("--leaderIPAddr".equals(args[idx])) {
      idx+=1;
      leaderIPAddr=Integer.valueOf(args[idx]);
    }
 else     if ("--clusterRoundTripTime".equals(args[idx])) {
      idx+=1;
      clusterRoundTripTime=Integer.valueOf(args[idx]);
    }
 else     if ("--no-geo-messages".equals(args[idx])) {
      generateGeoMessages=false;
    }
 else {
      abend("Unknown command line argument \"%s\"\n",args[idx]);
    }
  }
  File clientDataDir=new File(clientDataDirName);
  if (clientDataDir.exists() && !clientDataDir.isDirectory()) {
    if (!clientDataDir.isDirectory()) {
      abend("Client data dir \"%s\" exists but is not a directory.\n",clientDataDirName);
    }
  }
 else {
    clientDataDir.mkdirs();
  }
  ServerSocketChannel ssc=ServerSocketChannel.open();
  ssc.socket().bind(new InetSocketAddress("localhost",FAKE_SERVER_PORT));
  ClientConfig config=new ClientConfig("hello","world",(ClientStatusListenerExt)null,ClientAuthScheme.HASH_SHA256);
  final org.voltdb.client.Client client=ClientFactory.createClient(config);
  Thread clientThread=new Thread(){
    @Override public void run(){
      try {
        client.createConnection("localhost",FAKE_SERVER_PORT);
        client.close();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  clientThread.setDaemon(true);
  clientThread.start();
  SocketChannel sc=ssc.accept();
  sc.socket().setTcpNoDelay(true);
  ByteBuffer authReqSHA256=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  sc.configureBlocking(true);
  readMessage(authReqSHA256,sc);
  writeDataFile(clientDataDir,"authentication_request_sha256.msg",authReqSHA256);
  writeServerAuthenticationResponse(sc,true);
  ssc.close();
  clientThread.join(0);
  ssc=ServerSocketChannel.open();
  ssc.socket().bind(new InetSocketAddress("localhost",FAKE_SERVER_PORT));
  config=new ClientConfig("hello","world",(ClientStatusListenerExt)null,ClientAuthScheme.HASH_SHA1);
  final org.voltdb.client.Client oclient=ClientFactory.createClient(config);
  Thread oclientThread=new Thread(){
    @Override public void run(){
      NullCallback ncb=new NullCallback();
      try {
        oclient.createConnection("localhost",FAKE_SERVER_PORT);
        oclient.callProcedure("Insert","Hello","World","English");
        try {
          oclient.callProcedure("Insert","Hello","World","English");
        }
 catch (        Exception e) {
        }
        oclient.callProcedure("Select","English");
        oclient.callProcedure("InsertGeo",200,GeographyValue.fromWKT(smallPolyTxt),GeographyPointValue.fromWKT(smallPointTxt));
        oclient.callProcedure("InsertGeo",201,null,null);
        oclient.callProcedure("SelectGeo",100);
        oclient.callProcedure("SelectGeo",101);
        oclient.callProcedure("SelectGeo",102);
        oclient.callProcedure("SelectGeo",103);
        oclient.callProcedure("SelectGeo",104);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  oclientThread.setDaemon(true);
  oclientThread.start();
  sc=ssc.accept();
  sc.socket().setTcpNoDelay(true);
  ByteBuffer authReqSHA1=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  sc.configureBlocking(true);
  readMessage(authReqSHA1,sc);
  writeDataFile(clientDataDir,"authentication_request.msg",authReqSHA1);
  writeServerAuthenticationResponse(sc,true);
  ByteBuffer subscription_request=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  readMessage(subscription_request,sc);
  writeServerCallResponse(sc,getRequestClientData(subscription_request));
  ByteBuffer stats_request=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  readMessage(stats_request,sc);
  writeServerCallResponse(sc,getRequestClientData(stats_request));
  ByteBuffer syscat_request=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  readMessage(syscat_request,sc);
  writeServerCallResponse(sc,getRequestClientData(stats_request));
  String[] vanillaFileNames=new String[]{"invocation_request_success.msg","invocation_request_fail_cv.msg","invocation_request_select.msg"};
  Map<String,ByteBuffer> vanillaMessages=new HashMap<String,ByteBuffer>();
  for (  String fileName : vanillaFileNames) {
    ByteBuffer responseMessage=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
    vanillaMessages.put(fileName,responseMessage);
    readMessage(responseMessage,sc);
    writeServerCallResponse(sc,getRequestClientData(responseMessage));
    setRequestClientData(responseMessage,clientData);
    writeDataFile(clientDataDir,fileName,responseMessage);
  }
  String[] geoFileNames=new String[]{"invocation_request_insert_geo.msg","invocation_request_insert_geo_nulls.msg","invocation_request_select_geo_both.msg","invocation_request_select_geo_both_mid.msg","invocation_request_select_geo_polynull.msg","invocation_request_select_geo_ptnull.msg","invocation_request_select_geo_bothnull.msg"};
  Map<String,ByteBuffer> geoMessages=new HashMap<String,ByteBuffer>();
  for (  String filename : geoFileNames) {
    ByteBuffer requestMessage=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
    geoMessages.put(filename,requestMessage);
    readMessage(requestMessage,sc);
    writeServerCallResponse(sc,getRequestClientData(requestMessage));
    setRequestClientData(requestMessage,clientData);
    if (generateGeoMessages) {
      writeDataFile(clientDataDir,filename,requestMessage);
    }
  }
  oclient.close();
  ssc.close();
  oclientThread.join();
  SocketChannel voltsc=null;
  try {
    voltsc=SocketChannel.open(new InetSocketAddress("localhost",TRUE_SERVER_PORT));
    voltsc.socket().setTcpNoDelay(true);
    voltsc.configureBlocking(true);
    System.err.printf("Connected.\n");
  }
 catch (  IOException ex) {
    abend("Can't connect to a server.  Is there a VoltDB server running?.\n");
  }
  ByteBuffer scratch=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  voltsc.write(authReqSHA1);
  readMessage(scratch,voltsc);
  setClusterStartTimestamp(scratch,clusterStartTime);
  setLeaderIPAddr(scratch,leaderIPAddr);
  setBuildString(scratch,buildString);
  writeDataFile(clientDataDir,"authentication_response.msg",scratch);
  for (  String filename : vanillaFileNames) {
    ByteBuffer requestMessage=vanillaMessages.get(filename);
    if (requestMessage == null) {
      abend("Cannot find request message for file name \"%s\"\n",filename);
    }
    voltsc.write(requestMessage);
    readMessage(scratch,voltsc);
    setResponseClientData(scratch,clientData);
    setClusterRoundTripTime(scratch,clusterRoundTripTime);
    String responseFileName=filename.replaceAll("_request_","_response_");
    writeDataFile(clientDataDir,responseFileName,scratch);
  }
  if (generateGeoMessages) {
    for (    String filename : geoFileNames) {
      ByteBuffer requestMessage=geoMessages.get(filename);
      if (requestMessage == null) {
        abend("Cannot find request message for file name \"%s\"\n",filename);
      }
      voltsc.write(requestMessage);
      readMessage(scratch,voltsc);
      setResponseClientData(scratch,clientData);
      setClusterRoundTripTime(scratch,clusterRoundTripTime);
      String responseFileName=filename.replaceAll("_request_","_response_");
      System.out.printf("Writing Response file \"%s\".\n",responseFileName);
      writeDataFile(clientDataDir,responseFileName,scratch);
    }
  }
  voltsc.close();
  clientThread.join();
  Thread.sleep(3000);
  ssc=ServerSocketChannel.open();
  ssc.socket().bind(new InetSocketAddress("localhost",FAKE_SERVER_PORT));
  clientThread=new Thread(){
    @Override public void run(){
      try {
        org.voltdb.client.Client newClient=ClientFactory.createClient();
        newClient.createConnection("localhost",FAKE_SERVER_PORT);
        String strings[]=new String[]{"oh","noes"};
        byte bytes[]=new byte[]{22,33,44};
        short shorts[]=new short[]{22,33,44};
        int ints[]=new int[]{22,33,44};
        long longs[]=new long[]{22,33,44};
        double doubles[]=new double[]{3,3.1,3.14,3.1459};
        TimestampType timestamps[]=new TimestampType[]{new TimestampType(33),new TimestampType(44)};
        BigDecimal bds[]=new BigDecimal[]{new BigDecimal("3"),new BigDecimal("3.14"),new BigDecimal("3.1459")};
        try {
          newClient.callProcedure("foo",strings,bytes,shorts,ints,longs,doubles,timestamps,bds,null,"ohnoes!",(byte)22,(short)22,22,(long)22,3.1459,new TimestampType(33),new BigDecimal("3.1459"));
        }
 catch (        Exception e) {
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  clientThread.setDaemon(true);
  clientThread.start();
  voltsc=ssc.accept();
  readMessage(scratch,voltsc);
  writeServerAuthenticationResponse(voltsc,true);
  subscription_request=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  readMessage(subscription_request,voltsc);
  writeServerCallResponse(voltsc,getRequestClientData(subscription_request));
  stats_request=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  readMessage(stats_request,voltsc);
  writeServerCallResponse(voltsc,getRequestClientData(stats_request));
  syscat_request=ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);
  readMessage(syscat_request,voltsc);
  writeServerCallResponse(voltsc,getRequestClientData(stats_request));
  readMessage(scratch,voltsc);
  writeServerCallResponse(voltsc,getRequestClientData(scratch));
  setRequestClientData(scratch,clientData);
  writeDataFile(clientDataDir,"invocation_request_all_params.msg",scratch);
  voltsc.close();
  clientThread.join();
  ColumnInfo columns[]=new ColumnInfo[]{new ColumnInfo("column1",VoltType.TINYINT),new ColumnInfo("column2",VoltType.STRING),new ColumnInfo("column3",VoltType.SMALLINT),new ColumnInfo("column4",VoltType.INTEGER),new ColumnInfo("column5",VoltType.BIGINT),new ColumnInfo("column6",VoltType.TIMESTAMP),new ColumnInfo("column7",VoltType.DECIMAL),new ColumnInfo("column8",VoltType.GEOGRAPHY),new ColumnInfo("column9",VoltType.GEOGRAPHY_POINT)};
  VoltTable vt=new VoltTable(columns);
  GeographyValue poly=GeographyValue.fromWKT(smallPolyTxt);
  GeographyPointValue pt=GeographyPointValue.fromWKT(smallPointTxt);
  vt.addRow(null,null,null,null,null,null,null,poly,pt);
  vt.addRow(0,"",2,4,5,new TimestampType(44),new BigDecimal("3.1459"),poly,pt);
  vt.addRow(0,null,2,4,5,null,null,poly,pt);
  vt.addRow(null,"woobie",null,null,null,new TimestampType(44),new BigDecimal("3.1459"),poly,pt);
  ByteBuffer bb=ByteBuffer.allocate(vt.getSerializedSize());
  vt.flattenToBuffer(bb);
  FastSerializer fs=new FastSerializer(vt.getSerializedSize());
  fs.write(bb);
  bb.flip();
  writeDataFile(clientDataDir,"serialized_table.bin",bb);
  clientThread.join();
}
