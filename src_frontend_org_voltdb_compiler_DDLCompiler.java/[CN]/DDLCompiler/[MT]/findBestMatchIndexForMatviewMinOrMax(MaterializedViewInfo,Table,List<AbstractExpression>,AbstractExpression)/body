{
  CatalogMap<Index> allIndexes=srcTable.getIndexes();
  StmtTableScan tableScan=new StmtTargetTableScan(srcTable,srcTable.getTypeName());
  Index candidate=null;
  for (  Index index : allIndexes) {
    boolean indexOptimalForMinMax=false;
    final int diffAllowance=minMaxAggExpr == null ? 0 : 1;
    String expressionjson=index.getExpressionsjson();
    List<AbstractExpression> indexedExprs=null;
    if (!expressionjson.isEmpty()) {
      try {
        indexedExprs=AbstractExpression.fromJSONArrayString(expressionjson,tableScan);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        assert(false);
        return null;
      }
    }
    List<Column> srcColumnArray=CatalogUtil.getSortedCatalogItems(srcTable.getColumns(),"index");
    MatViewIndexMatchingGroupby matchingCase=null;
    if (groupbyExprs == null) {
      List<ColumnRef> groupbyColRefs=CatalogUtil.getSortedCatalogItems(matviewinfo.getGroupbycols(),"index");
      if (indexedExprs == null) {
        matchingCase=MatViewIndexMatchingGroupby.GB_COL_IDX_COL;
        List<ColumnRef> indexedColRefs=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
        if (isInvalidIndexCandidate(indexedColRefs.size(),groupbyColRefs.size(),diffAllowance)) {
          continue;
        }
        if (!isGroupbyMatchingIndex(matchingCase,groupbyColRefs,null,indexedColRefs,null,null)) {
          continue;
        }
        if (isValidIndexCandidateForMinMax(indexedColRefs.size(),groupbyColRefs.size(),diffAllowance)) {
          if (!isIndexOptimalForMinMax(matchingCase,minMaxAggExpr,indexedColRefs,null,srcColumnArray)) {
            continue;
          }
          indexOptimalForMinMax=true;
        }
      }
 else {
        matchingCase=MatViewIndexMatchingGroupby.GB_COL_IDX_EXP;
        if (isInvalidIndexCandidate(indexedExprs.size(),groupbyColRefs.size(),diffAllowance)) {
          continue;
        }
        if (!isGroupbyMatchingIndex(matchingCase,groupbyColRefs,null,null,indexedExprs,srcColumnArray)) {
          continue;
        }
        if (isValidIndexCandidateForMinMax(indexedExprs.size(),groupbyColRefs.size(),diffAllowance)) {
          if (!isIndexOptimalForMinMax(matchingCase,minMaxAggExpr,null,indexedExprs,null)) {
            continue;
          }
          indexOptimalForMinMax=true;
        }
      }
    }
 else {
      matchingCase=MatViewIndexMatchingGroupby.GB_EXP_IDX_EXP;
      if (indexedExprs == null) {
        continue;
      }
      if (isInvalidIndexCandidate(indexedExprs.size(),groupbyExprs.size(),diffAllowance)) {
        continue;
      }
      if (!isGroupbyMatchingIndex(matchingCase,null,groupbyExprs,null,indexedExprs,null)) {
        continue;
      }
      if (isValidIndexCandidateForMinMax(indexedExprs.size(),groupbyExprs.size(),diffAllowance)) {
        if (!isIndexOptimalForMinMax(matchingCase,minMaxAggExpr,null,indexedExprs,null)) {
          continue;
        }
        indexOptimalForMinMax=true;
      }
    }
    if (!index.getPredicatejson().isEmpty()) {
      List<AbstractExpression> coveringExprs=new ArrayList<AbstractExpression>();
      List<AbstractExpression> exactMatchCoveringExprs=new ArrayList<AbstractExpression>();
      try {
        String encodedPredicate=matviewinfo.getPredicate();
        if (!encodedPredicate.isEmpty()) {
          String predicate=Encoder.hexDecodeToString(encodedPredicate);
          AbstractExpression matViewPredicate=AbstractExpression.fromJSONString(predicate,tableScan);
          coveringExprs.addAll(ExpressionUtil.uncombineAny(matViewPredicate));
        }
      }
 catch (      JSONException e) {
        e.printStackTrace();
        assert(false);
        return null;
      }
      if (!SubPlanAssembler.isPartialIndexPredicateCovered(tableScan,coveringExprs,index,exactMatchCoveringExprs)) {
        continue;
      }
    }
    if (indexOptimalForMinMax) {
      return index;
    }
    candidate=index;
  }
  return candidate;
}
