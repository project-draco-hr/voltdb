{
  int state=kStateInvalid;
  char[] nchar=new char[1];
  @SuppressWarnings("synthetic-access") DDLStatement retval=new DDLStatement();
  retval.lineNo=m_currLineNo;
  try {
    do {
      if (reader.read(nchar) == -1) {
        return null;
      }
      if (nchar[0] == '\n') {
        m_currLineNo++;
      }
 else       if (nchar[0] == '\r') {
      }
 else       if (nchar[0] == ' ') {
      }
 else       if (nchar[0] == '-') {
        if (reader.read(nchar) == -1) {
          return null;
        }
        if (nchar[0] != '-') {
          String msg="Invalid content before or between DDL statements.";
          throw compiler.new VoltCompilerException(msg,m_currLineNo);
        }
 else {
          do {
            if (reader.read(nchar) == -1) {
              return null;
            }
          }
 while (nchar[0] != '\n');
          m_currLineNo++;
        }
      }
 else {
        retval.statement+=nchar[0];
        state=kStateReading;
        retval.lineNo=m_currLineNo;
        break;
      }
    }
 while (true);
    while (state != kStateCompleteStatement) {
      if (reader.read(nchar) == -1) {
        String msg="Schema file ended mid-statement (no semicolon found).";
        throw compiler.new VoltCompilerException(msg,retval.lineNo);
      }
      if (state == kStateReading) {
        state=readingState(nchar,retval);
      }
 else       if (state == kStateReadingCommentDelim) {
        state=readingCommentDelimState(nchar,retval);
      }
 else       if (state == kStateReadingComment) {
        state=readingCommentState(nchar,retval);
      }
 else       if (state == kStateReadingStringLiteral) {
        state=readingStringLiteralState(nchar,retval);
      }
 else       if (state == kStateReadingStringLiteralSpecialChar) {
        state=readingStringLiteralSpecialChar(nchar,retval);
      }
 else       if (state == kStateReadingCodeBlockDelim) {
        state=readingCodeBlockStateDelim(nchar,retval);
      }
 else       if (state == kStateReadingCodeBlockNextDelim) {
        state=readingCodeBlockStateNextDelim(nchar,retval);
      }
 else       if (state == kStateReadingCodeBlock) {
        state=readingCodeBlock(nchar,retval);
      }
 else       if (state == kStateReadingEndCodeBlockDelim) {
        state=readingEndCodeBlockStateDelim(nchar,retval);
      }
 else       if (state == kStateReadingEndCodeBlockNextDelim) {
        state=readingEndCodeBlockStateNextDelim(nchar,retval);
      }
 else {
        throw compiler.new VoltCompilerException("Unrecoverable error parsing DDL.");
      }
    }
    return retval;
  }
 catch (  IOException e) {
    throw compiler.new VoltCompilerException("Unable to read from file");
  }
}
