{
  String msg="In database, ";
  final CatalogMap<Table> tables=db.getTables();
  for (  Table table : tables) {
    String tableName=table.getTypeName();
    if (m_tracker.m_partitionMap.containsKey(tableName.toLowerCase())) {
      String colName=m_tracker.m_partitionMap.get(tableName.toLowerCase());
      if (colName != null) {
        assert(tables.getIgnoreCase(tableName) != null);
        if (m_matViewMap.containsKey(table)) {
          msg+="the materialized view is automatically partitioned based on its source table. " + "Invalid PARTITION statement on view table " + tableName + ".";
          throw m_compiler.new VoltCompilerException(msg);
        }
        final Column partitionCol=table.getColumns().getIgnoreCase(colName);
        if (partitionCol == null) {
          msg+="PARTITION has unknown COLUMN '" + colName + "'";
          throw m_compiler.new VoltCompilerException(msg);
        }
        if (partitionCol.getNullable() == true) {
          msg+="Partition column '" + tableName + "."+ colName+ "' is nullable. "+ "Partition columns must be constrained \"NOT NULL\".";
          throw m_compiler.new VoltCompilerException(msg);
        }
        VoltType pcolType=VoltType.get((byte)partitionCol.getType());
switch (pcolType) {
case TINYINT:
case SMALLINT:
case INTEGER:
case BIGINT:
case STRING:
case VARBINARY:
          break;
default :
        msg+="Partition column '" + tableName + "."+ colName+ "' is not a valid type. "+ "Partition columns must be an integer, varchar or varbinary type.";
      throw m_compiler.new VoltCompilerException(msg);
  }
  table.setPartitioncolumn(partitionCol);
  table.setIsreplicated(false);
  for (  Index index : table.getIndexes()) {
    checkValidPartitionTableIndex(index,partitionCol,tableName);
  }
}
}
}
}
