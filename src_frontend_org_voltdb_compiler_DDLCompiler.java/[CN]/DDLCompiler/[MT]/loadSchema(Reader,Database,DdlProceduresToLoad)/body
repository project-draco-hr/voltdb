{
  m_currLineNo=1;
  DDLStatement stmt=getNextStatement(reader,m_compiler);
  while (stmt != null) {
    boolean processed=false;
    try {
      processed=processVoltDBStatement(stmt,db,whichProcs);
    }
 catch (    VoltCompilerException e) {
      String msg="VoltDB DDL Error: \"" + e.getMessage() + "\" in statement starting on lineno: "+ stmt.lineNo;
      throw m_compiler.new VoltCompilerException(msg);
    }
    if (!processed) {
      try {
        String oneLinerStmt=stmt.statement.replace("\n"," ");
        Matcher tableMatcher=createTablePattern.matcher(oneLinerStmt);
        if (tableMatcher.find()) {
          String tableName=tableMatcher.group(2);
          m_tableNameToDDL.put(tableName.toUpperCase(),stmt.statement);
        }
 else {
          Matcher atableMatcher=alterOrDropTablePattern.matcher(oneLinerStmt);
          if (atableMatcher.find()) {
            String op=atableMatcher.group(1);
            String tableName=atableMatcher.group(3);
            if (op.equalsIgnoreCase("DROP")) {
              m_tableNameToDDL.remove(tableName.toUpperCase());
            }
 else {
              String prevStmt=m_tableNameToDDL.get(tableName.toUpperCase());
              if (prevStmt != null) {
                m_tableNameToDDL.put(tableName.toUpperCase(),prevStmt + "\n" + stmt.statement);
              }
            }
          }
        }
        m_fullDDL+=Encoder.hexEncode(stmt.statement) + "\n";
        m_hsql.runDDLCommand(stmt.statement);
      }
 catch (      HSQLParseException e) {
        String msg="DDL Error: \"" + e.getMessage() + "\" in statement starting on lineno: "+ stmt.lineNo;
        throw m_compiler.new VoltCompilerException(msg,stmt.lineNo);
      }
    }
    stmt=getNextStatement(reader,m_compiler);
  }
  try {
    reader.close();
  }
 catch (  IOException e) {
    throw m_compiler.new VoltCompilerException("Error closing schema file");
  }
  m_tracker.addExtraClasses(m_classMatcher.getMatchedClassList());
  m_classMatcher.clear();
}
