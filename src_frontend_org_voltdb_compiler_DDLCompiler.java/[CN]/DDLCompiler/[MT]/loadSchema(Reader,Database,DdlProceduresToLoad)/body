{
  m_currLineNo=1;
  DDLStatement stmt=getNextStatement(reader,m_compiler);
  while (stmt != null) {
    boolean processed=false;
    try {
      processed=processVoltDBStatement(stmt,db,whichProcs);
    }
 catch (    VoltCompilerException e) {
      String msg="VoltDB DDL Error: \"" + e.getMessage() + "\" in statement starting on lineno: "+ stmt.lineNo;
      throw m_compiler.new VoltCompilerException(msg);
    }
    if (!processed) {
      try {
        m_fullDDL+=Encoder.hexEncode(stmt.statement) + "\n";
        SQLLexer.HSQLDDLInfo ddlStmtInfo=SQLLexer.preprocessHSQLDDL(stmt.statement);
        String expectedTableAffected=null;
        String expectedIndexAffected=null;
        if (ddlStmtInfo.noun == HSQLDDLNoun.INDEX) {
          expectedIndexAffected=ddlStmtInfo.name;
        }
 else {
          expectedTableAffected=ddlStmtInfo.name;
        }
        VoltXMLDiff thisStmtDiff=m_hsql.runDDLCommandAndDiff(expectedTableAffected,expectedIndexAffected,stmt.statement);
        applyDiff(thisStmtDiff);
      }
 catch (      HSQLParseException e) {
        String msg="DDL Error: \"" + e.getMessage() + "\" in statement starting on lineno: "+ stmt.lineNo;
        throw m_compiler.new VoltCompilerException(msg,stmt.lineNo);
      }
    }
    stmt=getNextStatement(reader,m_compiler);
  }
  try {
    reader.close();
  }
 catch (  IOException e) {
    throw m_compiler.new VoltCompilerException("Error closing schema file");
  }
  m_tracker.addExtraClasses(m_classMatcher.getMatchedClassList());
  m_classMatcher.clear();
}
