{
  String tableName=table.getTypeName();
  assert(tableName != null);
  String msg="Partial index \"" + indexName + "\" ";
  List<VoltXMLElement> columnRefs=predicateXML.findChildrenRecursively("columnref");
  for (  VoltXMLElement columnRef : columnRefs) {
    String columnRefTableName=columnRef.attributes.get("table");
    if (columnRefTableName != null && !tableName.equals(columnRefTableName)) {
      msg+="with expression(s) involving other tables is not supported.";
      throw compiler.new VoltCompilerException(msg);
    }
  }
  AbstractExpression predicate=dummy.parseExpressionTree(predicateXML);
  if (predicate.hasAnySubexpressionOfClass(AggregateExpression.class)) {
    msg+="with aggregate expression(s) is not supported.";
    throw compiler.new VoltCompilerException(msg);
  }
  if (predicate.hasAnySubexpressionOfClass(AbstractSubqueryExpression.class)) {
    msg+="with subquery expression(s) is not supported.";
    throw compiler.new VoltCompilerException(msg);
  }
  return predicate;
}
