{
  String statement=ddlStatement.statement;
  if (statement == null || statement.trim().isEmpty()) {
    return false;
  }
  statement=statement.trim();
  Matcher statementMatcher=voltdbStatementPrefixPattern.matcher(statement);
  if (!statementMatcher.find()) {
    return false;
  }
  String commandPrefix=statementMatcher.group(1).toUpperCase();
  statementMatcher=procedureClassPattern.matcher(statement);
  if (statementMatcher.matches()) {
    if (whichProcs != DdlProceduresToLoad.ALL_DDL_PROCEDURES) {
      return true;
    }
    String className=checkIdentifierStart(statementMatcher.group(2),statement);
    Class<?> clazz;
    try {
      clazz=Class.forName(className,true,m_classLoader);
    }
 catch (    ClassNotFoundException e) {
      throw m_compiler.new VoltCompilerException(String.format("Cannot load class for procedure: %s",className));
    }
    ProcedureDescriptor descriptor=m_compiler.new ProcedureDescriptor(new ArrayList<String>(),Language.JAVA,clazz);
    if (statementMatcher.group(1) != null) {
      for (      String roleName : StringUtils.split(statementMatcher.group(1),',')) {
        String roleNameFixed=roleName.trim().toLowerCase();
        if (!descriptor.m_authGroups.contains(roleNameFixed)) {
          descriptor.m_authGroups.add(roleNameFixed);
        }
      }
    }
    m_tracker.add(descriptor);
    return true;
  }
  statementMatcher=procedureSingleStatementPattern.matcher(statement);
  if (statementMatcher.matches()) {
    String clazz=checkIdentifierStart(statementMatcher.group(1),statement);
    String sqlStatement=statementMatcher.group(3);
    ProcedureDescriptor descriptor=m_compiler.new ProcedureDescriptor(new ArrayList<String>(),clazz,sqlStatement,null,null,false,null,null);
    if (statementMatcher.group(2) != null) {
      for (      String roleName : StringUtils.split(statementMatcher.group(2),',')) {
        descriptor.m_authGroups.add(roleName.trim().toLowerCase());
      }
    }
    m_tracker.add(descriptor);
    return true;
  }
  statementMatcher=procedureWithScriptPattern.matcher(statement);
  if (statementMatcher.matches()) {
    String className=checkIdentifierStart(statementMatcher.group(1),statement);
    String codeBlock=statementMatcher.group(3);
    Language language=Language.valueOf(statementMatcher.group(4).toUpperCase());
    Class<?> scriptClass=null;
    if (language == Language.GROOVY) {
      try {
        scriptClass=GroovyCodeBlockCompiler.instance().parseCodeBlock(codeBlock,className);
      }
 catch (      CodeBlockCompilerException ex) {
        throw m_compiler.new VoltCompilerException(String.format("Procedure \"%s\" code block has syntax errors:\n%s",className,ex.getMessage()));
      }
catch (      Exception ex) {
        throw m_compiler.new VoltCompilerException(ex);
      }
    }
 else {
      throw m_compiler.new VoltCompilerException(String.format("Language \"%s\" is not a supported",language.name()));
    }
    ProcedureDescriptor descriptor=m_compiler.new ProcedureDescriptor(new ArrayList<String>(),language,scriptClass);
    if (statementMatcher.group(2) != null) {
      for (      String roleName : StringUtils.split(statementMatcher.group(2),',')) {
        descriptor.m_authGroups.add(roleName.trim().toLowerCase());
      }
    }
    m_tracker.add(descriptor);
    return true;
  }
  statementMatcher=prePartitionPattern.matcher(statement);
  if (statementMatcher.matches()) {
    String partitionee=statementMatcher.group(1).toUpperCase();
    if (TABLE.equals(partitionee)) {
      statementMatcher=partitionTablePattern.matcher(statement);
      if (!statementMatcher.matches()) {
        throw m_compiler.new VoltCompilerException(String.format("Invalid PARTITION statement: \"%s\", " + "expected syntax: PARTITION TABLE <table> ON COLUMN <column>",statement.substring(0,statement.length() - 1)));
      }
      m_tracker.put(checkIdentifierStart(statementMatcher.group(1),statement),checkIdentifierStart(statementMatcher.group(2),statement));
      return true;
    }
 else     if (PROCEDURE.equals(partitionee)) {
      if (whichProcs != DdlProceduresToLoad.ALL_DDL_PROCEDURES) {
        return true;
      }
      statementMatcher=partitionProcedurePattern.matcher(statement);
      if (!statementMatcher.matches()) {
        throw m_compiler.new VoltCompilerException(String.format("Invalid PARTITION statement: \"%s\", " + "expected syntax: PARTITION PROCEDURE <procedure> ON " + "TABLE <table> COLUMN <column> [PARAMETER <parameter-index-no>]",statement.substring(0,statement.length() - 1)));
      }
      String tableName=checkIdentifierStart(statementMatcher.group(2),statement);
      String columnName=checkIdentifierStart(statementMatcher.group(3),statement);
      String parameterNo=statementMatcher.group(4);
      if (parameterNo == null) {
        parameterNo="0";
      }
      String partitionInfo=String.format("%s.%s: %s",tableName,columnName,parameterNo);
      m_tracker.addProcedurePartitionInfoTo(checkIdentifierStart(statementMatcher.group(1),statement),partitionInfo);
      return true;
    }
  }
  statementMatcher=replicatePattern.matcher(statement);
  if (statementMatcher.matches()) {
    m_tracker.put(checkIdentifierStart(statementMatcher.group(1),statement),null);
    return true;
  }
  statementMatcher=importClassPattern.matcher(statement);
  if (statementMatcher.matches()) {
    String classNameStr=statementMatcher.group(1);
    Matcher wildcardMatcher=validClassMatcherWildcardPattern.matcher(classNameStr);
    if (!wildcardMatcher.matches()) {
      throw m_compiler.new VoltCompilerException(String.format("Invalid IMPORT CLASS match expression: '%s'",classNameStr));
    }
    ClassNameMatchStatus matchStatus=m_classMatcher.addPattern(classNameStr);
    if (matchStatus == ClassNameMatchStatus.NO_EXACT_MATCH) {
      throw m_compiler.new VoltCompilerException(String.format("IMPORT CLASS not found: '%s'",classNameStr));
    }
 else     if (matchStatus == ClassNameMatchStatus.NO_WILDCARD_MATCH) {
      m_compiler.addWarn(String.format("IMPORT CLASS no match for wildcarded class: '%s'",classNameStr),ddlStatement.lineNo);
    }
    return true;
  }
  statementMatcher=createRolePattern.matcher(statement);
  if (statementMatcher.matches()) {
    String roleName=statementMatcher.group(1);
    CatalogMap<Group> groupMap=db.getGroups();
    if (groupMap.get(roleName) != null) {
      throw m_compiler.new VoltCompilerException(String.format("Role name \"%s\" in CREATE ROLE statement already exists.",roleName));
    }
    org.voltdb.catalog.Group catGroup=groupMap.add(roleName);
    if (statementMatcher.group(2) != null) {
      for (      String tokenRaw : StringUtils.split(statementMatcher.group(2),',')) {
        String token=tokenRaw.trim().toLowerCase();
        Permission permission;
        try {
          permission=Permission.valueOf(token);
        }
 catch (        IllegalArgumentException iaex) {
          throw m_compiler.new VoltCompilerException(String.format("Invalid permission \"%s\" in CREATE ROLE statement: \"%s\", " + "available permissions: %s",token,statement.substring(0,statement.length() - 1),Permission.toListString()));
        }
switch (permission) {
case adhoc:
          catGroup.setAdhoc(true);
        break;
case sysproc:
      catGroup.setSysproc(true);
    break;
case defaultproc:
  catGroup.setDefaultproc(true);
break;
}
}
}
return true;
}
statementMatcher=exportPattern.matcher(statement);
if (statementMatcher.matches()) {
String tableName=checkIdentifierStart(statementMatcher.group(1),statement);
m_tracker.addExportedTable(tableName);
return true;
}
if (PARTITION.equals(commandPrefix)) {
throw m_compiler.new VoltCompilerException(String.format("Invalid PARTITION statement: \"%s\", " + "expected syntax: \"PARTITION TABLE <table> ON COLUMN <column>\" or " + "\"PARTITION PROCEDURE <procedure> ON "+ "TABLE <table> COLUMN <column> [PARAMETER <parameter-index-no>]\"",statement.substring(0,statement.length() - 1)));
}
if (REPLICATE.equals(commandPrefix)) {
throw m_compiler.new VoltCompilerException(String.format("Invalid REPLICATE statement: \"%s\", " + "expected syntax: REPLICATE TABLE <table>",statement.substring(0,statement.length() - 1)));
}
if (PROCEDURE.equals(commandPrefix)) {
throw m_compiler.new VoltCompilerException(String.format("Invalid CREATE PROCEDURE statement: \"%s\", " + "expected syntax: \"CREATE PROCEDURE [ALLOW <role> [, <role> ...] FROM CLASS <class-name>\" " + "or: \"CREATE PROCEDURE <name> [ALLOW <role> [, <role> ...] AS <single-select-or-dml-statement>\" "+ "or: \"CREATE PROCEDURE <proc-name> [ALLOW <role> ...] AS ### <code-block> ### LANGUAGE GROOVY\"",statement.substring(0,statement.length() - 1)));
}
if (ROLE.equals(commandPrefix)) {
throw m_compiler.new VoltCompilerException(String.format("Invalid CREATE ROLE statement: \"%s\", " + "expected syntax: CREATE ROLE <role>",statement.substring(0,statement.length() - 1)));
}
if (EXPORT.equals(commandPrefix)) {
throw m_compiler.new VoltCompilerException(String.format("Invalid EXPORT TABLE statement: \"%s\", " + "expected syntax: EXPORT TABLE <table>",statement.substring(0,statement.length() - 1)));
}
return false;
}
