{
  CatalogMap<Index> allIndexes=srcTable.getIndexes();
  ArrayList<Index> candidates=new ArrayList<Index>();
  for (  Index index : allIndexes) {
    String expressionjson=index.getExpressionsjson();
    if (groupbyExprs == null && !expressionjson.isEmpty() || groupbyExprs != null && expressionjson.isEmpty()) {
      continue;
    }
    List<AbstractExpression> indexedExprs=null;
    List<ColumnRef> indexedColRefs=null;
    if (groupbyExprs != null) {
      try {
        indexedExprs=AbstractExpression.fromJSONArrayString(expressionjson,null);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        assert(false);
        return null;
      }
      if (!prefixCompatibleExprs(indexedExprs,groupbyExprs)) {
        continue;
      }
 else {
        candidates.add(index);
      }
    }
 else {
      indexedColRefs=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
      List<ColumnRef> groupbyColRefs=CatalogUtil.getSortedCatalogItems(matviewinfo.getGroupbycols(),"index");
      if (indexedColRefs.size() > groupbyColRefs.size()) {
        continue;
      }
      List<Integer> indexedColIds=new ArrayList<Integer>();
      List<Integer> groupbyColIds=new ArrayList<Integer>();
      for (      ColumnRef cr : indexedColRefs) {
        indexedColIds.add(cr.getColumn().getIndex());
      }
      for (      ColumnRef cr : groupbyColRefs) {
        groupbyColIds.add(cr.getColumn().getIndex());
      }
      boolean found=true;
      for (int i=0; i < indexedColIds.size(); i++) {
        if (!indexedColIds.contains(groupbyColIds.get(i))) {
          found=false;
          break;
        }
      }
      if (found) {
        candidates.add(index);
      }
    }
  }
  Index ret=null;
  for (  Index index : candidates) {
    if (ret == null) {
      ret=index;
    }
 else     if (CatalogUtil.getCatalogIndexSize(index) > CatalogUtil.getCatalogIndexSize(ret)) {
      ret=index;
    }
  }
  return ret;
}
