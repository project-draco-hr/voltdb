{
  CatalogMap<Index> allIndexes=srcTable.getIndexes();
  if (groupbyExprs == null) {
    for (    Index index : allIndexes) {
      String expressionjson=index.getExpressionsjson();
      if (!expressionjson.isEmpty()) {
        continue;
      }
      List<ColumnRef> indexedColRefs=CatalogUtil.getSortedCatalogItems(index.getColumns(),"index");
      List<ColumnRef> groupbyColRefs=CatalogUtil.getSortedCatalogItems(matviewinfo.getGroupbycols(),"index");
      if (indexedColRefs.size() != groupbyColRefs.size()) {
        continue;
      }
      boolean matchedAll=true;
      for (int i=0; i < indexedColRefs.size(); ++i) {
        int groupbyColIndex=groupbyColRefs.get(i).getColumn().getIndex();
        int indexedColIndex=indexedColRefs.get(i).getColumn().getIndex();
        if (groupbyColIndex != indexedColIndex) {
          matchedAll=false;
          break;
        }
      }
      if (matchedAll) {
        return index;
      }
    }
  }
 else {
    for (    Index index : allIndexes) {
      String expressionjson=index.getExpressionsjson();
      if (expressionjson.isEmpty()) {
        continue;
      }
      List<AbstractExpression> indexedExprs=null;
      StmtTableScan tableScan=StmtTableScan.getStmtTableScan(srcTable);
      try {
        indexedExprs=AbstractExpression.fromJSONArrayString(expressionjson,tableScan);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        assert(false);
        return null;
      }
      if (indexedExprs.size() != groupbyExprs.size()) {
        continue;
      }
      boolean matchedAll=true;
      for (int i=0; i < indexedExprs.size(); ++i) {
        if (!indexedExprs.get(i).equals(groupbyExprs.get(i))) {
          matchedAll=false;
          break;
        }
      }
      if (matchedAll) {
        return index;
      }
    }
  }
  return null;
}
