{
  CatalogCreatorTestHelper catalog_creator=new CatalogCreatorTestHelper(CLUSTER_NAME,DATABASE_NAME);
  catalog_creator.addTable(TABLE_NAME,true);
  int number_of_sites=4;
  for (int i=0; i < number_of_sites; ++i) {
    addHostToTestData(i);
    catalog_creator.addPartition(i);
    catalog_creator.addHost(i);
    catalog_creator.addSite(i,i,i,true);
  }
  catalog_creator.addSite(number_of_sites,0,0,false);
  catalog_creator.addSite(number_of_sites + 1,1,0,false);
  m_siteInput.resetRowPosition();
  while (m_siteInput.advanceRow()) {
    try {
      m_state.addHostData(m_siteInput);
    }
 catch (    IOException e) {
      e.printStackTrace();
      assertTrue(false);
    }
  }
  Table test_table=catalog_creator.getTable(TABLE_NAME);
  SynthesizedPlanFragment[] test_plan=m_state.generateRestorePlan(test_table,catalog_creator.getCluster().getSites());
  assertEquals(test_plan.length,number_of_sites + 1);
  for (int i=0; i < number_of_sites - 1; ++i) {
    assertEquals(test_plan[i].fragmentId,SysProcFragmentId.PF_restoreLoadReplicatedTable);
    assertFalse(test_plan[i].multipartition);
    assertEquals(test_plan[i].siteId,i);
    assertEquals(test_plan[i].parameters.toArray()[0],TABLE_NAME);
  }
  assertEquals(test_plan[number_of_sites].fragmentId,SysProcFragmentId.PF_restoreLoadReplicatedTableResults);
  assertFalse(test_plan[number_of_sites].multipartition);
  checkPlanDependencies(test_plan);
  assertEquals(test_plan[number_of_sites].parameters.toArray()[0],m_state.getRootDependencyId());
}
