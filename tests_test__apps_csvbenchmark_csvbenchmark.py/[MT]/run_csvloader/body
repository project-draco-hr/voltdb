def run_csvloader(schema, data_file):
    rowcount = options.ROW_COUNT
    elapsed_results = []
    parsing_results = []
    loading_results = []
    for I in range(0, options.TRIES):
        home = os.getenv('VOLTDB_HOME')
        before_row_count = get_table_row_count(schema)
        cmd = ('%s --servers=%s' % (os.path.join(home, CSVLOADER), ','.join(options.servers)))
        if options.csvoptions:
            cmd += (' -o ' + ','.join(options.csvoptions))
        cmd += (' %s -f %s' % (schema, data_file))
        if options.VERBOSE:
            print ('starting csvloader with command: ' + cmd)
        start_time = time.time()
        p = Popen(shlex.split(cmd), stdout=PIPE, stderr=PIPE)
        (stdout, stderr) = p.communicate()
        run_time = (time.time() - start_time)
        stdout_lines = stdout.split('\n')
        if options.VERBOSE:
            for l in stdout_lines:
                print ('[csvloader stdout] ' + l)
        rc = p.returncode
        actual_row_count = get_table_row_count(schema)
        if (rc != 0):
            print ('CSVLoader failed with rc %d' % rc)
            for l in stderr.split('\n'):
                print ('[csvloader stderr] ' + l)
            raise RuntimeError('CSV Loader failed')
        m = re.search('^Read (\\d+) rows from file and successfully inserted (\\d+) rows \\(final\\)$', stdout, flags=re.M)
        if ((m is None) or (int(m.group(1)) != rowcount) or (m.group(1) != m.group(2))):
            raise RuntimeError('CSV Loader failed to load all rows')
        if ((int(before_row_count) + rowcount) != int(actual_row_count)):
            raise RuntimeError(('Actual table row count was not as expected exp:%d act:%d' % (rowcount, actual_row_count)))
        elapsed_results.append(float(run_time))

    def analyze_results(perf_results):
        pr = sorted(perf_results)[1:(-1)]
        if (len(pr) == 0):
            pr = perf_results
        return (average(pr), std(pr))
    (avg, stddev) = analyze_results(elapsed_results)
    print ('statistics for %s execution time avg: %f stddev: %f rows/sec: %f rows: %d file size: %d tries: %d' % (schema, avg, stddev, (rowcount / avg), rowcount, os.path.getsize(data_file), options.TRIES))
    if options.statsfile:
        with open(options.statsfile, 'a') as sf:
            print  >> sf, ('%s,%d,%d,0,0,0,0' % (schema, int(round((avg * 1000.0))), rowcount))
    return (rowcount, avg, stddev)
