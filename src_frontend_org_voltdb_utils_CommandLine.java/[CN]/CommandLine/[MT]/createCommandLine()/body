{
  List<String> cmdline=new ArrayList<String>(50);
  cmdline.add(javaExecutable);
  cmdline.add("-XX:+HeapDumpOnOutOfMemoryError");
  cmdline.add("-Djava.library.path=" + java_library_path);
  if (rmi_host_name != null)   cmdline.add("-Djava.rmi.server.hostname=" + rmi_host_name);
  cmdline.add("-Dlog4j.configuration=" + log4j);
  if (m_vemTag != null) {
    cmdline.add("-D" + VEM_TAG_PROPERTY + "="+ m_vemTag);
  }
  if (gcRollover) {
    cmdline.add("-Xloggc:" + volt_root + "/"+ VEM_GC_ROLLOVER_FILE_NAME+ " -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles="+ VEM_GC_ROLLOVER_FILE_COUNT+ " -XX:GCLogFileSize="+ VEM_GC_ROLLOVER_FILE_SIZE);
  }
  cmdline.add(maxHeap);
  cmdline.add("-XX:+UseParNewGC");
  cmdline.add("-XX:+UseConcMarkSweepGC");
  cmdline.add("-XX:+CMSParallelRemarkEnabled");
  cmdline.add("-XX:+UseTLAB");
  cmdline.add("-XX:CMSInitiatingOccupancyFraction=75");
  cmdline.add("-XX:+UseCMSInitiatingOccupancyOnly");
  cmdline.add("-XX:+UseLargePages");
  if (conditionalCardMark) {
    cmdline.add("-XX:+UseCondCardMark");
  }
  cmdline.add("-classpath");
  cmdline.add(classPath);
  if (includeTestOpts) {
    cmdline.add("-DLOG_SEGMENT_SIZE=8");
    cmdline.add("-DVoltFilePrefix=" + voltFilePrefix);
    cmdline.add("-ea");
    cmdline.add("-XX:MaxDirectMemorySize=2g");
  }
 else {
    cmdline.add("-server");
    cmdline.add("-XX:HeapDumpPath=/tmp");
    cmdline.add(initialHeap);
  }
  if (m_isEnterprise) {
    cmdline.add("-Dvolt.rmi.agent.port=" + jmxPort);
    cmdline.add("-Dvolt.rmi.server.hostname=" + jmxHost);
  }
  if (javaProperties != null) {
    for (    Entry<String,String> e : javaProperties.entrySet()) {
      if (e.getValue() != null) {
        cmdline.add("-D" + e.getKey() + "="+ e.getValue());
      }
 else {
        cmdline.add("-D" + e.getKey());
      }
    }
  }
  if (debugPort > -1) {
    cmdline.add("-Xdebug");
    cmdline.add("-agentlib:jdwp=transport=dt_socket,address=" + debugPort + ",server=y,suspend=n");
  }
  List<String> additionalJvmOptions=new ArrayList<String>();
  String nonJvmOptions=AdditionalJvmOptionsProcessor.getJvmOptionsFromVoltDbOptsEnvironmentVariable(additionalJvmOptions);
  cmdline.addAll(additionalJvmOptions);
  cmdline.add("org.voltdb.VoltDB");
  if (m_startAction == START_ACTION.LIVE_REJOIN) {
    cmdline.add("live rejoin");
  }
 else {
    cmdline.add(m_startAction.toString().toLowerCase());
  }
  cmdline.add("host");
  cmdline.add(m_leader);
  cmdline.add("catalog");
  cmdline.add(jarFileName());
  cmdline.add("deployment");
  cmdline.add(pathToDeployment());
  if (m_startAction != START_ACTION.REJOIN && m_startAction != START_ACTION.LIVE_REJOIN) {
    if (m_replicationRole == ReplicationRole.REPLICA) {
      cmdline.add("replica");
    }
  }
  if (includeTestOpts) {
    cmdline.add("timestampsalt");
    cmdline.add(Long.toString(m_timestampTestingSalt));
  }
  cmdline.add("port");
  cmdline.add(Integer.toString(m_port));
  cmdline.add("internalport");
  cmdline.add(Integer.toString(m_internalPort));
  if (m_adminPort != -1) {
    cmdline.add("adminport");
    cmdline.add(Integer.toString(m_adminPort));
  }
  if (zkport != -1) {
    cmdline.add("zkport");
    cmdline.add(Integer.toString(zkport));
  }
  if (m_drAgentPortStart != -1) {
    cmdline.add("replicationport");
    cmdline.add(Integer.toString(m_drAgentPortStart));
  }
  if (target() == BackendTarget.NATIVE_EE_VALGRIND_IPC) {
    cmdline.add("valgrind");
  }
  if (m_internalInterface != null && !m_internalInterface.isEmpty()) {
    cmdline.add("internalinterface");
    cmdline.add(m_internalInterface);
  }
  if (m_internalInterface != null && !m_externalInterface.isEmpty()) {
    cmdline.add("externalinterface");
    cmdline.add(m_externalInterface);
  }
  if (m_enableIV2) {
    cmdline.add("enableiv2");
  }
  if (m_isEnterprise) {
    cmdline.add("license");
    cmdline.add(m_pathToLicense);
  }
  if (customCmdLn != null && !customCmdLn.trim().isEmpty()) {
    cmdline.add(customCmdLn);
  }
  if (nonJvmOptions != null && !nonJvmOptions.trim().isEmpty()) {
    cmdline.add(nonJvmOptions);
  }
  if ((m_ipcPorts != null) && (m_ipcPorts.size() > 0)) {
    cmdline.add("ipcports");
    cmdline.add(org.apache.commons.lang3.StringUtils.join(m_ipcPorts,","));
  }
  if (target() == BackendTarget.NATIVE_EE_IPC) {
    cmdline.add("ipc");
  }
  if (m_tag != null) {
    cmdline.add("tag");
    cmdline.add(m_tag);
  }
  return cmdline;
}
