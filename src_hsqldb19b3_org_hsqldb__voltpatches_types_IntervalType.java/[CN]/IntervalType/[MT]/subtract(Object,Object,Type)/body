{
  if (a == null || b == null) {
    return null;
  }
switch (typeCode) {
case Types.SQL_INTERVAL_YEAR:
case Types.SQL_INTERVAL_YEAR_TO_MONTH:
case Types.SQL_INTERVAL_MONTH:
    if (a instanceof IntervalMonthData && b instanceof IntervalMonthData) {
      long months=((IntervalMonthData)a).units - ((IntervalMonthData)b).units;
      return new IntervalMonthData(months,this);
    }
 else     if (a instanceof TimestampData && b instanceof TimestampData) {
      boolean isYear=typeCode == Types.SQL_INTERVAL_YEAR;
      long months=DateTimeType.subtractMonths((TimestampData)a,(TimestampData)b,isYear);
      return new IntervalMonthData(months,this);
    }
  throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");
case Types.SQL_INTERVAL_DAY:
case Types.SQL_INTERVAL_DAY_TO_HOUR:
case Types.SQL_INTERVAL_DAY_TO_MINUTE:
case Types.SQL_INTERVAL_DAY_TO_SECOND:
case Types.SQL_INTERVAL_HOUR:
case Types.SQL_INTERVAL_HOUR_TO_MINUTE:
case Types.SQL_INTERVAL_HOUR_TO_SECOND:
case Types.SQL_INTERVAL_MINUTE:
case Types.SQL_INTERVAL_MINUTE_TO_SECOND:
case Types.SQL_INTERVAL_SECOND:
if (a instanceof IntervalSecondData && b instanceof IntervalSecondData) {
  long seconds=((IntervalSecondData)a).units - ((IntervalSecondData)b).units;
  long nanos=((IntervalSecondData)a).nanos - ((IntervalSecondData)b).nanos;
  return new IntervalSecondData(seconds,nanos,this,true);
}
 else if (a instanceof TimeData && b instanceof TimeData) {
  long seconds=((TimeData)a).getSeconds() - ((TimeData)b).getSeconds();
  long nanos=((TimeData)a).getNanos() - ((TimeData)b).getNanos();
  return new IntervalSecondData(seconds,nanos,this,true);
}
 else if (a instanceof TimestampData && b instanceof TimestampData) {
  long seconds=(((TimestampData)a).getSeconds() - ((TimestampData)b).getSeconds());
  long nanos=((TimestampData)a).getNanos() - ((TimestampData)b).getNanos();
  return new IntervalSecondData(seconds,nanos,this,true);
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");
}
}
