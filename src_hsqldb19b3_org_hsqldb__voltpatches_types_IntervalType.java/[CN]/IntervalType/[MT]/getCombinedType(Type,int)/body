{
switch (operation) {
case OpTypes.MULTIPLY:
    if (other.isNumberType()) {
      return getIntervalType(this,maxIntervalPrecision,scale);
    }
  break;
case OpTypes.DIVIDE:
if (other.isNumberType()) {
  return this;
}
break;
case OpTypes.ADD:
if (other.isDateTimeType()) {
return other.getCombinedType(this,operation);
}
 else if (other.isIntervalType()) {
IntervalType newType=(IntervalType)getAggregateType(other);
return getIntervalType(newType,maxIntervalPrecision,0);
}
break;
case OpTypes.SUBTRACT:
default :
return getAggregateType(other);
}
throw Error.error(ErrorCode.X_42562);
}
