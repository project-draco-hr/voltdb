@VOLT.Command(description='Compile schema and stored procedures to build an application catalog.', description2='At least one DDL file is required unless a project file is provided.', options=(VOLT.StringOption('-c', '--classpath', 'classpath', 'additional colon-separated Java CLASSPATH directories'), VOLT.StringOption('-o', '--output', 'catalog', 'the output application catalog jar file', default='catalog.jar'), VOLT.StringOption('-p', '--project', 'project', 'the project file, e.g. project.xml (deprecated)')), arguments=VOLT.PathArgument('ddl', 'DDL file(s)', exists=True, min_count=0, max_count=None))
def compile(runner):
    if ((not runner.opts.project) and (not runner.opts.ddl)):
        runner.abort_with_help('Either project or DDL files must be specified.')
    if (not runner.opts.catalog.lower().endswith('.jar')):
        runner.abort(('Output catalog file "%s" does not have a ".jar" extension.' % runner.opts.catalog))
    if (runner.opts.project and (not runner.opts.project.lower().endswith('.xml'))):
        runner.abort(('Project file "%s" does not have a ".xml" extension.' % runner.opts.project))
    if runner.is_verbose():
        params = [('Output catalog file: %s' % runner.opts.catalog)]
        if runner.opts.project:
            params.append(('Project file: %s' % runner.opts.project))
        if runner.opts.ddl:
            params.append('DDL files:')
            params.append(runner.opts.ddl)
        runner.verbose_info('Compilation parameters:', params)
    args = []
    if runner.opts.project:
        args.append(runner.opts.project)
    args.append(runner.opts.catalog)
    if runner.opts.ddl:
        args.extend(runner.opts.ddl)
    cpath = 'procedures'
    if runner.opts.classpath:
        cpath = ('procedures:' + runner.opts.classpath)
    kwargs = dict(classpath=cpath)
    runner.java_execute(VoltCompiler, None, *args, **kwargs)
