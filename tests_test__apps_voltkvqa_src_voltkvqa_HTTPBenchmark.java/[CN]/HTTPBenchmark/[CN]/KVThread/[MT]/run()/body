{
  while (warmupComplete.get() == false) {
    if (rand.nextDouble() < config.getputratio) {
      try {
        HTTPUtils.callProcedure("Get",processor.generateRandomKeyForRetrieval(),m_httpClient,m_httpPost);
      }
 catch (      Exception e) {
        e.printStackTrace(System.out);
      }
    }
 else {
      final PayloadProcessor.Pair pair=processor.generateForStore();
      try {
        HTTPUtils.callProcedure("Put",pair.Key,pair.getStoreValue(),m_httpClient,m_httpPost);
      }
 catch (      Exception e) {
        e.printStackTrace(System.out);
      }
    }
  }
  while (benchmarkComplete.get() == false) {
    if (rand.nextDouble() < config.getputratio) {
      try {
        HTTPUtils.Response response=HTTPUtils.callProcedure("Get",processor.generateRandomKeyForRetrieval(),m_httpClient,m_httpPost);
        if (response.results[0].advanceRow()) {
          final VoltTable pairData=response.results[0];
          if (pairData.getRowCount() == 0) {
            missedGets.incrementAndGet();
          }
 else {
            final PayloadProcessor.Pair pair=processor.retrieveFromStore(pairData.fetchRow(0).getString(0),pairData.fetchRow(0).getVarbinary(1));
            successfulGets.incrementAndGet();
            networkGetData.addAndGet(pair.getStoreValueLength());
            rawGetData.addAndGet(pair.getRawValueLength());
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace(System.out);
        failedGets.incrementAndGet();
      }
    }
 else {
      final PayloadProcessor.Pair pair=processor.generateForStore();
      try {
        HTTPUtils.callProcedure("Put",pair.Key,pair.getStoreValue(),m_httpClient,m_httpPost);
        successfulPuts.incrementAndGet();
      }
 catch (      Exception e) {
        e.printStackTrace(System.out);
        failedPuts.incrementAndGet();
      }
      networkPutData.addAndGet(pair.getStoreValueLength());
      rawPutData.addAndGet(pair.getRawValueLength());
    }
  }
}
