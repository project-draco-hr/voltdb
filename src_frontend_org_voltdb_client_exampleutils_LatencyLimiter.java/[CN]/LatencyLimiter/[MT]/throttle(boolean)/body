{
  if (System.currentTimeMillis() - this.LastCheck > 5000l) {
    if (this.End.getExecutionCount() - this.Start.getExecutionCount() > 0) {
      double observedLatency=(double)(this.End.getTotalExecutionDuration() - this.Start.getTotalExecutionDuration()) / (double)(this.End.getExecutionCount() - this.Start.getExecutionCount());
      double tuningLatency=observedLatency;
      long[] el=this.End.getLatencyBuckets();
      long[] sl=this.Start.getLatencyBuckets();
      long ec=this.End.getExecutionCount() - this.Start.getExecutionCount();
      if (((double)(el[0] - sl[0]) / (double)ec) > 0.97) {
        long outlierExecutionDuration=0;
        long outlierExecutionCount=0;
        for (int i=1; i < 9; i++) {
          outlierExecutionCount+=(el[i] - sl[i]);
          outlierExecutionDuration+=(el[i] - sl[i]) * 25l;
        }
        tuningLatency=(double)(this.End.getTotalExecutionDuration() - this.Start.getTotalExecutionDuration() - outlierExecutionDuration) / (double)(this.End.getExecutionCount() - this.Start.getExecutionCount() - outlierExecutionCount);
      }
      long oldRate=this.Rate;
      if (tuningLatency > this.TargetLatency * 2.0)       this.Rate=(long)(this.Rate * 0.8);
 else       if (tuningLatency > this.TargetLatency * 1.25)       this.Rate=(long)(this.Rate * 0.95);
 else       if (tuningLatency > this.TargetLatency * 1.1)       this.Rate=(long)(this.Rate * 0.999);
 else       if (tuningLatency < this.TargetLatency * 0.5)       this.Rate=(long)(this.Rate * 1.1);
 else       if (tuningLatency < this.TargetLatency * 0.75)       this.Rate=(long)(this.Rate * 1.01);
 else       if (tuningLatency < this.TargetLatency * 0.9)       this.Rate=(long)(this.Rate * 1.001);
      if (showTuningMessages && oldRate != this.Rate)       System.out.printf("Observed Latency (ms): %8.2f | Adjusting TPS %s to: %,d\n",tuningLatency,(oldRate < this.Rate ? "Up" : "Down"),this.Rate);
    }
    this.Start=(PerfCounter)this.End.clone();
    this.End=ClientConnectionPool.getStatistics(this.Connection).get(this.Procedure);
    this.LastCheck=System.currentTimeMillis();
  }
  this.Limiter.throttle(this.Rate);
}
