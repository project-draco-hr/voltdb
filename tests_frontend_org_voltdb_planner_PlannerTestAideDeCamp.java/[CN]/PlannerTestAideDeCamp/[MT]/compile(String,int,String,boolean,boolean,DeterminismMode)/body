{
  String stmtLabel="stmt-" + String.valueOf(compileCounter++);
  Statement catalogStmt=proc.getStatements().add(stmtLabel);
  catalogStmt.setSqltext(sql);
  catalogStmt.setSinglepartition(forceSingle);
  QueryType qtype=QueryType.SELECT;
  catalogStmt.setReadonly(true);
  if (sql.toLowerCase().startsWith("insert")) {
    qtype=QueryType.INSERT;
    catalogStmt.setReadonly(false);
  }
  if (sql.toLowerCase().startsWith("update")) {
    qtype=QueryType.UPDATE;
    catalogStmt.setReadonly(false);
  }
  if (sql.toLowerCase().startsWith("delete")) {
    qtype=QueryType.DELETE;
    catalogStmt.setReadonly(false);
  }
  catalogStmt.setQuerytype(qtype.getValue());
  String name=catalogStmt.getParent().getTypeName() + "-" + catalogStmt.getTypeName();
  DatabaseEstimates estimates=new DatabaseEstimates();
  TrivialCostModel costModel=new TrivialCostModel();
  StatementPartitioning partitioning;
  if (inferPartitioning) {
    partitioning=StatementPartitioning.inferPartitioning();
  }
 else   if (forceSingle) {
    partitioning=StatementPartitioning.forceSP();
  }
 else {
    partitioning=StatementPartitioning.forceMP();
  }
  String procName=catalogStmt.getParent().getTypeName();
  Cluster catalogCluster=catalog.getClusters().get("cluster");
  QueryPlanner planner=new QueryPlanner(sql,stmtLabel,procName,catalogCluster,db,partitioning,hsql,estimates,false,StatementCompiler.DEFAULT_MAX_JOIN_TABLES,costModel,null,joinOrder,detMode);
  CompiledPlan plan=null;
  planner.parse();
  plan=planner.plan();
  assert(plan != null);
  if (partitioning.isInferred()) {
    catalogStmt.setSinglepartition(partitioning.isInferredSingle());
  }
  for (int i=0; i < plan.parameters.length; ++i) {
    StmtParameter catalogParam=catalogStmt.getParameters().add(String.valueOf(i));
    ParameterValueExpression pve=plan.parameters[i];
    catalogParam.setJavatype(pve.getValueType().getValue());
    catalogParam.setIsarray(pve.getParamIsVector());
    catalogParam.setIndex(i);
  }
  List<PlanNodeList> nodeLists=new ArrayList<PlanNodeList>();
  nodeLists.add(new PlanNodeList(plan.rootPlanGraph));
  if (plan.subPlanGraph != null) {
    nodeLists.add(new PlanNodeList(plan.subPlanGraph));
  }
  List<Pair<Integer,VoltType>> parameters=nodeLists.get(0).getParameters();
  for (int i=0; i < plan.parameters.length; ++i) {
    ParameterValueExpression pve=plan.parameters[i];
    Pair<Integer,VoltType> parameter=new Pair<Integer,VoltType>(i,pve.getValueType());
    parameters.add(parameter);
  }
  String json=null;
  try {
    JSONObject jobj=new JSONObject(nodeLists.get(0).toJSONString());
    json=jobj.toString(4);
  }
 catch (  JSONException e2) {
    e2.printStackTrace();
    System.exit(-1);
  }
  try {
    BuildDirectoryUtils.writeFile("statement-plans",name + "_json.txt",json,true);
    BuildDirectoryUtils.writeFile("statement-plans",name + ".dot",nodeLists.get(0).toDOTString("name"),true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  List<AbstractPlanNode> plannodes=new ArrayList<AbstractPlanNode>();
  for (  PlanNodeList nodeList : nodeLists) {
    plannodes.add(nodeList.getRootPlanNode());
  }
  m_currentPlan=plan;
  return plannodes;
}
