def runTests(CTX):
    failedTests = []
    retval = os.system(('make --directory=%s test -j4' % CTX.OUTPUT_PREFIX))
    if (retval != 0):
        return (-1)
    TESTOBJECTS_DIR = os.environ['TEST_DIR']
    TEST_PREFIX = CTX.TEST_PREFIX.rstrip('/')
    OUTPUT_PREFIX = CTX.OUTPUT_PREFIX.rstrip('/')
    tests = []
    for dir in CTX.TESTS.keys():
        input = CTX.TESTS[dir].split()
        tests += [(dir, ((((TEST_PREFIX + '/') + dir) + '/') + x)) for x in input]
    successes = 0
    failures = 0
    noValgrindTests = ['CompactionTest', 'CopyOnWriteTest', 'harness_test', 'serializeio_test']
    for (dir, test) in tests:
        expectNoMemLeaks = (not (dir == 'memleaktests'))
        (binname, objectname, sourcename) = namesForTestCode(test)
        targetpath = ((OUTPUT_PREFIX + '/') + binname)
        retval = 0
        if (test.endswith('CopyOnWriteTest') and (CTX.LEVEL == 'MEMCHECK_NOFREELIST')):
            continue
        if os.path.exists((targetpath + '.py')):
            retval = os.system((('/usr/bin/env python ' + targetpath) + '.py'))
        else:
            isValgrindTest = True
            for test in noValgrindTests:
                if (targetpath.find(test) != (-1)):
                    isValgrindTest = False
            if ((CTX.PLATFORM == 'Linux') and isValgrindTest):
                process = Popen(executable='valgrind', args=['valgrind', '--leak-check=full', '--show-reachable=yes', '--error-exitcode=-1', ('--suppressions=' + os.path.join(TEST_PREFIX, 'test_utils/vdbsuppressions.supp')), targetpath], stderr=PIPE, bufsize=(-1))
                out_err = process.stderr.readlines()
                retval = process.wait()
                errorState = ErrorState(expectNoMemLeaks)
                for line in out_err:
                    errorState.processErrorString(line)
                if (not errorState.isExpectedState()):
                    print errorState.errorMessage()
                    retval = (-1)
                if (retval == (-1)):
                    for str in out_err:
                        print str.rstrip('\n')
                sys.stdout.flush()
            else:
                retval = os.system(targetpath)
        if (retval == 0):
            successes += 1
        else:
            failedTests += [binname]
            failures += 1
    print '==============================================================================='
    print ('TESTING COMPLETE (PASSED: %d, FAILED: %d)' % (successes, failures))
    for test in failedTests:
        print (((('TEST: ' + test) + ' in DIRECTORY: ') + CTX.OUTPUT_PREFIX) + ' FAILED')
    if (failures == 0):
        print '*** SUCCESS ***'
    else:
        print '!!! FAILURE !!!'
    print '==============================================================================='
    return failures
