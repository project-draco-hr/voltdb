def buildThirdPartyTools(CTX, makefile):
    makefile.write('########################################################################\n')
    makefile.write('#\n')
    makefile.write('# Third Party Tools Section Start\n')
    makefile.write('#\n')
    makefile.write('########################################################################\n')
    makefile.write('#\n# Force all third party libraries and tools to be\n')
    makefile.write('# configured and built and built here.\n#\n')
    makefile.write('#   openssl - We use this only to get the Bignum from libcrypto.\n')
    makefile.write('#             Note that this has to be before S2.\n')
    makefile.write('#   s2      - We use this for geospatial computations.\n')
    makefile.write('#   pcre2   - We use this for regular expressions.\n')
    makefile.write('.PHONY: build-third-party-tools\n')
    makefile.write('build-third-party-tools: build-openssl build-s2-geometry build-pcre2\n')
    makefile.write('\n')
    makefile.write('#\n')
    makefile.write("# These are the openssl library's source and install directories.\n")
    makefile.write('# Note that we only use the BIGNUM functions from openssl.\n#\n')
    makefile.write(('OPENSSL_VERSION=%s\n' % CTX.OPENSSL_VERSION))
    makefile.write('OPENSSL_SRC=${THIRD_PARTY_SRC}/openssl/openssl-${OPENSSL_VERSION}\n')
    makefile.write('OPENSSL_INSTALL=${INSTALL_DIR}\n')
    makefile.write('#\n')
    makefile.write("# These are google S2 library's source and object directories.\n")
    makefile.write('#\n')
    makefile.write('GOOGLE_S2_SRC=${THIRD_PARTY_SRC}/google-s2-geometry\n')
    makefile.write('GOOGLE_S2_INSTALL=${INSTALL_DIR}\n')
    makefile.write('#\n')
    makefile.write('# We keep tarballs of third party sources here.\n')
    makefile.write('#\n')
    makefile.write('TARBALLS_DIR=${THIRD_PARTY_SRC}/tarballs\n')
    makefile.write('#\n')
    makefile.write("# These are the PCRE2 library's source, build and install directories,\n")
    makefile.write('# and the location of the source tarball\n')
    makefile.write('PCRE2_VERSION=10.10\n')
    makefile.write('PCRE2_NAME=pcre2-${PCRE2_VERSION}\n')
    makefile.write('PCRE2_SRC=${THIRD_PARTY_SRC}/${PCRE2_NAME}\n')
    makefile.write('PCRE2_OBJ=${OBJDIR}/${PCRE2_NAME}\n')
    makefile.write('PCRE2_INSTALL=${INSTALL_DIR}\n')
    makefile.write('PCRE2_TARBALL=${TARBALLS_DIR}/${PCRE2_NAME}.tar.bz2\n')
    makefile.write('#\n# This target lets us print makefile variables, for debugging\n')
    makefile.write('#\n# the makefile.\n#\n')
    makefile.write('echo_makefile_config:\n')
    makefile.write('\t@echo "ROOTDIR           = $(ROOTDIR)"\n')
    makefile.write('\t@echo "OBJDIR            = $(OBJDIR)"\n')
    makefile.write('\t@echo "SRCDIR            = $(SRCDIR)"\n')
    makefile.write('\t@echo "THIRD_PARTY_SRC   = $(THIRD_PARTY_SRC)"\n')
    makefile.write('\t@echo "GOOGLE_S2_SRC     = $(GOOGLE_S2_SRC)"\n')
    makefile.write('\t@echo "GOOGLE_S2_INSTALL = $(GOOGLE_S2_INSTALL)"\n')
    makefile.write('\t@echo "OPENSSL_SRC       = $(OPENSSL_SRC)"\n')
    makefile.write('\t@echo "OPENSSL_INSTALL   = $(OPENSSL_INSTALL)"\n')
    makefile.write('\t@echo "OPENSSL_VERSION   = $(OPENSSL_VERSION)"\n')
    makefile.write('########################################################################\n')
    makefile.write('# OpenSSL.\n')
    makefile.write('########################################################################\n')
    makefile.write('.PHONY: build-openssl configure-openssl compile-openssl install-openssl clean-openssl\n')
    makefile.write('\n')
    makefile.write('# OpenSSL\n')
    makefile.write('build-openssl: configure-openssl compile-openssl install-openssl\n')
    makefile.write('\n')
    makefile.write('# If we have to configure openssl, first delete any.\n')
    makefile.write('# existing installation.  It confuses the configuration\n')
    makefile.write('# and installation procedure.\n')
    makefile.write('configure-openssl:\n')
    makefile.write('\t(cd "${OPENSSL_SRC}"; \\\n')
    makefile.write('\t if [ ! -f Makefile ] || [ Makefile -ot Makefile.org ] || [ ! -f "${INSTALL_DIR}/lib/libcrypto.a" ] || [ ! -f "${OPENSSL_SRC}/libcrypto.a" ] || [ ! -d "${INSTALL_DIR}/include/openssl" ] ; then \\\n')
    makefile.write('\t   rm -rf "${INSTALL_DIR}/include/openssl" "${INSTALL_DIR}/lib/libcrypto.a"; \\\n')
    makefile.write(('\t   ./Configure "%s"; \\\n' % CTX.getOpenSSLToken()))
    makefile.write('\t fi )\n')
    makefile.write('\n')
    makefile.write('compile-openssl: | configure-openssl\n')
    makefile.write('\t(cd "$(OPENSSL_SRC)"; $(MAKE))\n')
    makefile.write('\n')
    makefile.write('install-openssl: | compile-openssl\n')
    makefile.write('\tif [ ! -f "$(OPENSSL_INSTALL)/lib/libcrypto.a" ] ; then \\\n')
    makefile.write('\t  (cd "$(OPENSSL_SRC)"; $(MAKE) INSTALLTOP="$(OPENSSL_INSTALL)" OPENSSLDIR="$(OPENSSL_INSTALL)" install ) ; \\\n')
    makefile.write('\tfi\n')
    makefile.write('\n')
    makefile.write('clean-openssl:\n')
    makefile.write('\t(cd "${OPENSSL_SRC}"; $(MAKE) clean; mv Makefile Makefile.last)\n')
    makefile.write('########################################################################\n')
    makefile.write('# Google S2.\n')
    makefile.write('########################################################################\n')
    makefile.write('#\n# Google S2 uses cmake, which has different names for the\n')
    makefile.write("# build types.  It's easier to translate them here than to\n")
    makefile.write('# reconfigure cmake.\n#\n')
    makefile.write('ifeq (${BUILD},debug)\n')
    makefile.write('S2_BUILD_TYPE=Debug\n')
    makefile.write('else ifeq (${BUILD},memcheck)\n')
    makefile.write('S2_BUILD_TYPE=Debug\n')
    makefile.write('else ifeq (${BUILD},memcheck_nofreelist)\n')
    makefile.write('S2_BUILD_TYPE=Debug\n')
    makefile.write('else ifeq (${BUILD},release)\n')
    makefile.write('S2_BUILD_TYPE=Release\n')
    makefile.write('endif\n')
    makefile.write('ifeq (${S2_BUILD_TYPE},)\n')
    makefile.write('$(error "Unknown build type for S2 ($BUILD should be debug, release, memcheck, memcheck_nofreelist")\n')
    makefile.write('endif\n')
    makefile.write('\n')
    makefile.write('.PHONY: build-s2-geometry configure-s2-geometry clean-s2-geometry\n')
    makefile.write('build-s2-geometry: configure-s2-geometry | build-openssl \n')
    makefile.write('\t@echo Building the S2 Library\n')
    makefile.write('\tcd google-s2-geometry; ${MAKE} all install\n')
    makefile.write('\n')
    makefile.write('#\n# Sometimes cmake fails to configure.  If the makefile is not there,\n')
    makefile.write('# We need to remove all of it and start over again.\n#\n')
    makefile.write('configure-s2-geometry:\n')
    makefile.write('\t@echo Configuring The S2 Library for building.\n')
    makefile.write('\tif [ ! -f google-s2-geometry/Makefile ] ; then \\\n')
    makefile.write('\t    rm -rf google-s2-geometry; \\\n')
    makefile.write('\t    mkdir google-s2-geometry; \\\n')
    makefile.write('\t    cd google-s2-geometry; \\\n')
    makefile.write(('\t\tcmake -DCXX_VERSION_FLAG="%s" -DVOLTDB_THIRD_PARTY_CPP_DIR="${THIRD_PARTY_SRC}" -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" -DCMAKE_BUILD_TYPE="${S2_BUILD_TYPE}" "${GOOGLE_S2_SRC}"; \\\n' % CTX.CXX_VERSION_FLAG))
    makefile.write('\tfi\n')
    makefile.write('\n')
    makefile.write('clean-s2-geometry:\n')
    makefile.write("\t@echo Deleting the S2 library\\'s object files\n")
    makefile.write('\trm -rf google-s2-geometry\n')
    makefile.write('\n')
    makefile.write('########################################################################\n')
    makefile.write('# pcre2 - regular expressions.\n')
    makefile.write('########################################################################\n')
    makefile.write('.PHONY: build-pcre2 configure-pcre2 unpack-pcre2\n')
    makefile.write('build-pcre2: configure-pcre2\n')
    makefile.write('\tif [ ! -f "${PCRE2_INSTALL}/lib/libpcre2-8.a" ] ; then \\\n')
    makefile.write('\t  @echo Building PCRE2 ; \\\n')
    makefile.write('\t  (cd "$(PCRE2_OBJ)"; ${MAKE} install); \\\n')
    makefile.write('\tfi\n')
    makefile.write('configure-pcre2: unpack-pcre2\n')
    makefile.write('\tif [ ! -d "${PCRE2_OBJ}" ] ; then \\\n')
    makefile.write('\t  @echo Configuring PCRE2; \\\n')
    makefile.write('\t  /bin/rm -rf "${PCRE2_OBJ}"; \\\n')
    makefile.write('\t  mkdir -p "${PCRE2_OBJ}"; \\\n')
    makefile.write('\t  cd "${PCRE2_OBJ}"; \\\n')
    makefile.write('\t  "${PCRE2_SRC}/configure" --disable-shared --with-pic --prefix="${PCRE2_INSTALL}" ; \\\n')
    makefile.write('\tfi\n')
    makefile.write('unpack-pcre2:\n')
    makefile.write('\tif [ ! -d "$PCRE2_SRC" ] ; then \\\n')
    makefile.write('\t  tar -x -j -f "${PCRE2_TARBALL}" -C "${THIRD_PARTY_SRC}" ; \\\n')
    makefile.write('fi\n')
    makefile.write('########################################################################\n')
    makefile.write('# Testing of third party tools.  We do not run this usually, but\n')
    makefile.write('# it is convenient to put it in the makefile.\n')
    makefile.write('# Note that these will not be run by Jenkins.\n')
    makefile.write('########################################################################\n')
    makefile.write('.PHONY: test-third-party-tools test-pcre2\n')
    makefile.write('test-third-party-tools: test-pcre2\n')
    makefile.write('test-pcre2: build-pcre2\n')
    makefile.write('\t@echo Testing PCRE2 in ${PCRE2_OBJ}\n')
    makefile.write('\t(cd "${PCRE2_OBJ}"; ${MAKE} check)\n')
    makefile.write('\n')
    makefile.write('########################################################################\n')
    makefile.write('#\n')
    makefile.write('# Third Party Tools Section End\n')
    makefile.write('#\n')
    makefile.write('########################################################################\n')
    return None
