def buildMakefile(CTX):
    global version
    CPPFLAGS = ' '.join(CTX.CPPFLAGS.split())
    MAKECPPFLAGS = CPPFLAGS
    for dir in CTX.SYSTEM_DIRS:
        MAKECPPFLAGS += (' -isystem $(ROOTDIR)/%s' % dir)
    for dir in CTX.SRC_INCLUDE_DIRS:
        MAKECPPFLAGS += (' -I$(ROOTDIR)/%s' % dir)
    for dir in CTX.OBJ_INCLUDE_DIRS:
        MAKECPPFLAGS += (' -I${OBJDIR}/%s' % dir)
    MAKECPPFLAGS += ' -I${OBJDIR}'
    JNILIBFLAGS = ' '.join(CTX.JNILIBFLAGS.split())
    JNIBINFLAGS = ' '.join(CTX.JNIBINFLAGS.split())
    INPUT_PREFIX = CTX.INPUT_PREFIX.rstrip('/')
    THIRD_PARTY_INPUT_PREFIX = CTX.THIRD_PARTY_INPUT_PREFIX.rstrip('/')
    OUTPUT_PREFIX = CTX.OUTPUT_PREFIX.rstrip('/')
    TEST_PREFIX = CTX.TEST_PREFIX.rstrip('/')
    IGNORE_SYS_PREFIXES = CTX.IGNORE_SYS_PREFIXES
    JNIEXT = CTX.JNIEXT.strip()
    NM = CTX.NM
    NMFLAGS = CTX.NMFLAGS
    os.system(('mkdir -p %s' % OUTPUT_PREFIX))
    os.system(('mkdir -p %s' % (OUTPUT_PREFIX + '/nativelibs')))
    os.system(('mkdir -p %s' % (OUTPUT_PREFIX + '/objects')))
    os.system(('mkdir -p %s' % (OUTPUT_PREFIX + '/static_objects')))
    os.system(('mkdir -p %s' % (OUTPUT_PREFIX + '/cpptests')))
    os.system(('mkdir -p %s' % (OUTPUT_PREFIX + '/prod')))
    input_paths = []
    for dir in CTX.INPUT.keys():
        input = CTX.INPUT[dir].split()
        input_paths += [((((INPUT_PREFIX + '/') + dir) + '/') + x) for x in input]
    third_party_input_paths = []
    for dir in CTX.THIRD_PARTY_INPUT.keys():
        input = CTX.THIRD_PARTY_INPUT[dir].split()
        third_party_input_paths += [((((THIRD_PARTY_INPUT_PREFIX + '/') + dir) + '/') + x) for x in input]
    tests = []
    for dir in CTX.TESTS.keys():
        input = CTX.TESTS[dir].split()
        tests += [((((TEST_PREFIX + '/') + dir) + '/') + x) for x in input]
    makefile = file((OUTPUT_PREFIX + '/makefile'), 'w')
    makefile.write(('BUILD=%s\n' % CTX.LEVEL.lower()))
    makefile.write(('CC = %s\n' % CTX.CC))
    makefile.write(('CXX = %s\n' % CTX.CXX))
    makefile.write(('CPPFLAGS += %s\n' % formatList(MAKECPPFLAGS.split(' '))))
    makefile.write(('LDFLAGS += %s\n' % CTX.LDFLAGS))
    makefile.write(('JNILIBFLAGS += %s\n' % JNILIBFLAGS))
    makefile.write(('JNIBINFLAGS += %s\n' % JNIBINFLAGS))
    makefile.write(('JNIEXT = %s\n' % JNIEXT))
    makefile.write(('NM = %s\n' % NM))
    makefile.write(('NMFLAGS = %s\n' % NMFLAGS))
    makefile.write('#\n# Capture the (relative) name of the root directory.\n')
    makefile.write('# Also, remember the obj directory,\n')
    makefile.write('# which should be the directory we are currently in.\n#\n')
    makefile.write('ROOTDIR=../..\n')
    makefile.write('OBJDIR=$(ROOTDIR)/obj/${BUILD}\n')
    makefile.write('#\n# This is the root of the cpp sources.\n#\n')
    makefile.write('SRCDIR = $(ROOTDIR)/src/ee\n')
    makefile.write('#\n# This is the root of the third party sources.\n#\n')
    makefile.write('THIRD_PARTY_SRC = $(ROOTDIR)/third_party/cpp\n')
    makefile.write('\n')
    if (CTX.TARGET == 'CLEAN'):
        makefile.write('.PHONY: clean\n')
        makefile.write('clean: \n')
        makefile.write('\trm -rf *\n')
        makefile.close()
        return
    makefile.write('.PHONY: main\n\n')
    if (CTX.TARGET == 'VOLTRUN'):
        makefile.write('main: prod/voltrun\n')
    elif (CTX.TARGET == 'TEST'):
        makefile.write('main:\n')
    else:
        makefile.write(('main: nativelibs/libvoltdb-%s.$(JNIEXT)\n' % version))
    makefile.write('\n')
    jni_objects = []
    static_objects = []
    for filename in input_paths:
        (jni, static) = outputNamesForSource(filename)
        jni_objects.append(jni)
        static_objects.append(static)
    for filename in third_party_input_paths:
        (jni, static) = outputNamesForSource(filename)
        jni_objects.append(jni)
        static_objects.append(static)
    cleanobjs = []
    makefile.write(('# create symbols by running nm against libvoltdb-%s\n' % version))
    nmfilename = ('nativelibs/libvoltdb-%s.sym' % version)
    jnilibname = ('nativelibs/libvoltdb-%s.$(JNIEXT)' % version)
    cleanobjs += [nmfilename]
    makefile.write(('%s: %s\n' % (nmfilename, jnilibname)))
    makefile.write(('\t$(NM) $(NMFLAGS) %s > $@\n' % jnilibname))
    makefile.write('\n')
    makefile.write('# main jnilib target\n')
    makefile.write(('%s: %s\n' % (jnilibname, formatList(jni_objects))))
    makefile.write(('\t$(LINK.cpp) $(JNILIBFLAGS) -o $@ $^ %s \n' % CTX.LASTLDFLAGS))
    makefile.write('\n')
    cleanobjs += [jnilibname]
    makefile.write('# voltdb instance that loads the jvm from C++\n')
    makefile.write((('prod/voltrun: $(SRCDIR)/voltrun.cpp ' + formatList(static_objects)) + '\n'))
    makefile.write(('\t$(LINK.cpp) $(JNIBINFLAGS) -o $@ $^ %s\n' % CTX.LASTLDFLAGS))
    makefile.write('\n')
    cleanobjs += ['prod/voltrun']
    makefile.write('# voltdb execution engine that accepts work on a tcp socket (vs. jni)\n')
    makefile.write(('prod/voltdbipc: $(SRCDIR)/voltdbipc.cpp ' + ' objects/volt.a\n'))
    makefile.write(('\t$(LINK.cpp) -o $@ $^ %s %s\n' % (CTX.LASTLDFLAGS, CTX.LASTIPCLDFLAGS)))
    makefile.write('\n')
    cleanobjs += ['prod/voltdbipc']
    IPC_EXENAME = ''
    if ((CTX.LEVEL == 'MEMCHECK') or (CTX.LEVEL == 'MEMCHECK_NOFREELIST')):
        IPC_EXENAME = 'prod/voltdbipc '
    makefile.write('.PHONY: test\n')
    makefile.write(('test: %s%s\n' % (IPC_EXENAME, formatList((namesForTestCode(test)[0] for test in tests)))))
    makefile.write(('objects/volt.a: objects/harness.o %s\n' % formatList(jni_objects)))
    makefile.write('\t$(AR) $(ARFLAGS) $@ $?\n')
    harness_source = (TEST_PREFIX + '/harness.cpp')
    makefile.write((('objects/harness.o: $(ROOTDIR)/' + harness_source) + '\n'))
    makefile.write('\t$(CCACHE) $(COMPILE.cpp) -MMD -MP -o $@ $^\n')
    makefile.write(('-include %s\n' % 'objects/harness.d'))
    makefile.write('\n')
    cleanobjs += ['objects/volt.a', 'objects/harness.o', 'objects/harness.d']
    makefile.write('########################################################################\n')
    makefile.write(('#\n# %s\n#\n' % 'Volt Files'))
    makefile.write('########################################################################\n')
    for filename in input_paths:
        (jni_objname, static_objname) = outputNamesForSource(filename)
        filename = os.path.normpath(filename.replace(INPUT_PREFIX, '$(SRCDIR)'))
        jni_targetpath = ((OUTPUT_PREFIX + '/') + '/'.join(jni_objname.split('/')[:(-1)]))
        static_targetpath = ((OUTPUT_PREFIX + '/') + '/'.join(static_objname.split('/')[:(-1)]))
        os.system(('mkdir -p %s' % jni_targetpath))
        os.system(('mkdir -p %s' % static_targetpath))
        makefile.write('########################################################################\n')
        makefile.write(('#\n# %s\n#\n' % filename))
        makefile.write('########################################################################\n')
        makefile.write(('%s: %s \n' % (jni_objname, filename)))
        makefile.write(('\t$(CCACHE) $(COMPILE.cpp) %s -MMD -MP -o $@ %s\n' % (CTX.EXTRAFLAGS, filename)))
        makefile.write(('%s: %s \n' % (static_objname, filename)))
        makefile.write(('\t$(CCACHE) $(COMPILE.cpp) %s -MMD -MP -o $@ %s\n' % (CTX.EXTRAFLAGS, filename)))
        makefile.write(('-include %s\n' % replaceExtension(jni_objname, '.d')))
        makefile.write(('-include %s\n' % replaceExtension(static_objname, '.d')))
        cleanobjs += [jni_objname, static_objname, replaceExtension(jni_objname, '.d'), replaceExtension(jni_objname, '.d')]
        makefile.write('\n')
    makefile.write('\n')
    makefile.write('########################################################################\n')
    makefile.write(('#\n# %s\n#\n' % 'Third Party Files'))
    makefile.write('########################################################################\n')
    for filename in third_party_input_paths:
        (jni_objname, static_objname) = outputNamesForSource(filename)
        filename = filename.replace(THIRD_PARTY_INPUT_PREFIX, '$(THIRD_PARTY_SRC)')
        jni_targetpath = ((OUTPUT_PREFIX + '/') + '/'.join(jni_objname.split('/')[:(-1)]))
        static_targetpath = ((OUTPUT_PREFIX + '/') + '/'.join(static_objname.split('/')[:(-1)]))
        os.system(('mkdir -p %s' % jni_targetpath))
        os.system(('mkdir -p %s' % static_targetpath))
        makefile.write('########################################################################\n')
        makefile.write(('#\n# %s\n#\n' % filename))
        makefile.write('########################################################################\n')
        makefile.write(('%s: %s \n' % (jni_objname, filename)))
        makefile.write(('\t$(CCACHE) $(COMPILE.cpp) %s -MMD -MP -o $@ %s\n' % (CTX.EXTRAFLAGS, filename)))
        makefile.write(('%s: %s \n' % (static_objname, filename)))
        makefile.write(('\t$(CCACHE) $(COMPILE.cpp) %s -MMD -MP -o $@ %s\n' % (CTX.EXTRAFLAGS, filename)))
        makefile.write(('-include %s\n' % replaceExtension(jni_objname, '.d')))
        makefile.write(('-include %s\n' % replaceExtension(static_objname, '.d')))
        cleanobjs += [jni_objname, static_objname, replaceExtension(jni_objname, '.d'), replaceExtension(jni_objname, '.d')]
        makefile.write('\n')
    makefile.write('\n')
    makefile.write('########################################################################\n')
    makefile.write('#\n# This target lets us print makefile variables, for debugging\n')
    makefile.write('########################################################################\n')
    makefile.write('echo_makefile_config:\n')
    makefile.write('\t@echo "ROOTDIR = $(ROOTDIR)"\n')
    makefile.write('\t@echo "OBJDIR = $(OBJDIR)"\n')
    makefile.write('\t@echo "SRCDIR = $(SRCDIR)"\n')
    makefile.write('\t@echo "THIRD_PARTY_SRC = $(THIRD_PARTY_SRC)"\n\n')
    makefile.write('########################################################################\n')
    makefile.write(('#\n# %s\n#\n' % 'Tests'))
    makefile.write('########################################################################\n')
    for test in tests:
        (binname, objectname, sourcename) = namesForTestCode(test)
        makefile.write('########################################################################\n')
        makefile.write(('#\n# %s\n#\n' % sourcename))
        makefile.write('########################################################################\n')
        makefile.write(('%s: $(ROOTDIR)/%s \n' % (objectname, sourcename)))
        makefile.write(('\t$(CCACHE) $(COMPILE.cpp) -I$(ROOTDIR)/%s -MMD -MP -o $@ $(ROOTDIR)/%s\n' % (TEST_PREFIX, sourcename)))
        makefile.write(('-include %s\n' % replaceExtension(objectname, '.d')))
        makefile.write(('%s: %s objects/volt.a \n' % (binname, objectname)))
        makefile.write(('\t$(LINK.cpp) -o %s %s objects/volt.a %s\n' % (binname, objectname, CTX.LASTLDFLAGS)))
        makefile.write('\n')
        targetpath = ((OUTPUT_PREFIX + '/') + '/'.join(binname.split('/')[:(-1)]))
        os.system(('mkdir -p %s' % targetpath))
        pysourcename = (sourcename[:(-3)] + 'py')
        cleanobjs += [objectname, replaceExtension(objectname, '.d'), binname]
        if os.path.exists(pysourcename):
            shutil.copy(pysourcename, targetpath)
            cleanobjs += [targetpath]
    makefile.write('########################################################################\n')
    makefile.write(('#\n# %s\n#\n' % 'Cleaning'))
    makefile.write('########################################################################\n')
    makefile.write('\n')
    makefile.write('clean: \n')
    makefile.write('\t@echo Deleting all derived files.\n')
    makefile.write(('\t@${RM} %s\n' % formatList(cleanobjs)))
    makefile.close()
    return True
