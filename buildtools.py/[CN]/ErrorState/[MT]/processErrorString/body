def processErrorString(self, line):
    m = self.memLossPattern.match(line)
    if m:
        bytes = int(m.group('byteCount'))
        if (bytes > 0):
            blocks = int(m.group('blockCount'))
            errtype = m.group('errorType')
            self.errorLines += [MemLeakError(bytes, blocks, (('Memory ' + errtype) + ' Lost.'), line)]
        return
    m = self.stillReachablePattern.match(line)
    if m:
        bytes = int(m.group('byteCount'))
        if (bytes > 0):
            blocks = int(m.group('blockCount'))
            errType = 'Memory still reachable'
            self.errorLines += [MemLeakError(bytes, blocks, (('Memory ' + errType) + ' Lost.'), line)]
        return
    m = self.errorPattern.match(line)
    if m:
        errors = int(m.group('errorCount'))
        if (errors > 0):
            contexts = int(m.group('errorContexts'))
            errtype = 'other'
            self.errorLines += [ValgrindError(errors, contexts, errtype, line)]
