def getCompilerVersion(self):
    if self.COMPILER_CONFIGURED:
        return
    self.COMPILER_CONFIGURED = True
    vinfo = output = Popen([self.CXX, '-v'], stderr=PIPE).communicate()[1]
    self.MAJORVERSION = 0
    self.MINORVERSION = 0
    self.PATCHLEVEL = 0
    vvector = [0, 0, 0]
    patterns = [['based on LLVM ([.0-9]*)[^.0-9]', 'clang'], ['Apple LLVM version ([.0-9]*)[^.0-9]', 'clang'], ['clang version ([.0-9]*)[^.0-9]', 'clang'], ['gcc version ([.0-9]*)[^.0-9]', 'gcc']]
    for pattern in patterns:
        m = re.search(pattern[0], vinfo)
        if m:
            self.COMPILER_NAME = pattern[1]
            vinfo = m.group(1)
            vvector = vinfo.split('.')
            break
    if (self.COMPILER_NAME == 'Unknown'):
        print ('Cannot find compiler version by running "%s"' % self.CXX)
    else:
        vlen = len(vvector)
        if (vlen > 0):
            self.MAJORVERSION = int(vvector[0])
            if (vlen > 1):
                self.MINORVERSION = int(vvector[1])
                if (vlen > 2):
                    self.PATCHLEVEL = int(vvector[2])
