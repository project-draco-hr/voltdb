{
  BBContainer tupleDataTemp;
  try {
    tupleDataTemp=tupleDataC.call();
    if (tupleDataTemp == null) {
      return Futures.immediateFuture(null);
    }
  }
 catch (  Throwable t) {
    return Futures.immediateFailedFuture(t);
  }
  final BBContainer tupleData=tupleDataTemp;
  if (m_writeFailed) {
    tupleData.discard();
    return null;
  }
  m_outstandingWriteTasks.incrementAndGet();
  Future<BBContainer> compressionTask=null;
  if (prependLength) {
    BBContainer cont=DBBPool.allocateDirectAndPool(CompressionService.maxCompressedLength(SnapshotSiteProcessor.m_snapshotBufferLength));
    tupleData.b.position(tupleData.b.position() + 4);
    cont.b.position(12);
    compressionTask=CompressionService.compressAndCRC32cBufferAsync(tupleData.b,cont);
  }
  final Future<BBContainer> compressionTaskFinal=compressionTask;
  ListenableFuture<?> writeTask=m_es.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        if (m_acceptOneWrite) {
          m_acceptOneWrite=false;
        }
 else {
          if (m_simulateBlockedWrite != null) {
            m_simulateBlockedWrite.await();
          }
          if (m_simulateFullDiskWritingChunk) {
            throw new IOException("Disk full");
          }
        }
        int totalWritten=0;
        if (prependLength) {
          BBContainer payloadContainer=compressionTaskFinal.get();
          try {
            final ByteBuffer payloadBuffer=payloadContainer.b;
            payloadBuffer.position(0);
            ByteBuffer lengthPrefix=ByteBuffer.allocate(12);
            m_bytesAllowedBeforeSync.acquire(payloadBuffer.remaining());
            lengthPrefix.putInt(payloadBuffer.remaining() - 16);
            lengthPrefix.putInt(tupleData.b.getInt(0));
            PureJavaCrc32C crc=new PureJavaCrc32C();
            crc.update(lengthPrefix.array(),0,8);
            lengthPrefix.putInt((int)crc.getValue());
            lengthPrefix.flip();
            payloadBuffer.put(lengthPrefix);
            payloadBuffer.position(0);
            while (payloadBuffer.hasRemaining()) {
              totalWritten+=m_channel.write(payloadBuffer);
            }
          }
  finally {
            payloadContainer.discard();
          }
        }
 else {
          while (tupleData.b.hasRemaining()) {
            totalWritten+=m_channel.write(tupleData.b);
          }
        }
        m_bytesWritten+=totalWritten;
        m_bytesWrittenSinceLastSync.addAndGet(totalWritten);
      }
 catch (      IOException e) {
        m_writeException=e;
        hostLog.error("Error while attempting to write snapshot data to file " + m_file,e);
        m_writeFailed=true;
        throw e;
      }
 finally {
        try {
          tupleData.discard();
        }
  finally {
          m_outstandingWriteTasksLock.lock();
          try {
            if (m_outstandingWriteTasks.decrementAndGet() == 0) {
              m_noMoreOutstandingWriteTasksCondition.signalAll();
            }
          }
  finally {
            m_outstandingWriteTasksLock.unlock();
          }
        }
      }
      return null;
    }
  }
);
  return writeTask;
}
