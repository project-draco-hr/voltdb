{
  if (m_writeFailed) {
    tupleData.discard();
    return null;
  }
  if (prependLength) {
    tupleData.b.putInt(tupleData.b.remaining() - 4);
    tupleData.b.position(0);
  }
  m_outstandingWriteTasks.incrementAndGet();
  Future<?> writeTask=m_es.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        if (m_acceptOneWrite) {
          m_acceptOneWrite=false;
        }
 else {
          if (m_simulateFullDiskWritingChunk) {
            throw new IOException("Disk full");
          }
        }
        m_bytesAllowedBeforeSync.acquire(tupleData.b.remaining());
        int totalWritten=0;
        while (tupleData.b.hasRemaining()) {
          totalWritten+=m_channel.write(tupleData.b);
        }
        m_bytesWritten+=totalWritten;
        m_bytesWrittenSinceLastSync.addAndGet(totalWritten);
      }
 catch (      IOException e) {
        m_writeException=e;
        hostLog.error("Error while attempting to write snapshot data to file " + m_file,e);
        m_writeFailed=true;
        throw e;
      }
 finally {
        tupleData.discard();
synchronized (m_outstandingWriteTasks) {
          if (m_outstandingWriteTasks.decrementAndGet() == 0) {
            m_outstandingWriteTasks.notify();
          }
        }
      }
      return null;
    }
  }
);
  return writeTask;
}
