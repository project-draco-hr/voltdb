{
  if (m_writeFailed) {
    tupleData.discard();
    return null;
  }
  if (prependLength) {
    tupleData.b.putInt(tupleData.b.remaining() - 4);
    tupleData.b.position(0);
  }
  return m_es.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        if (m_acceptOneWrite) {
          m_acceptOneWrite=false;
        }
 else {
          if (m_simulateFullDiskWritingChunk) {
            throw new IOException("Disk full");
          }
        }
        while (tupleData.b.hasRemaining()) {
          final long written=m_channel.write(tupleData.b);
          m_bytesWritten+=written;
          m_bytesWrittenSinceLastSync+=written;
        }
        if (m_bytesWrittenSinceLastSync >= m_maxBytesWrittenBetweenSync) {
          m_fos.getFD().sync();
          m_bytesWrittenSinceLastSync=0;
          m_lastSyncTime=System.currentTimeMillis();
        }
      }
 catch (      IOException e) {
        m_writeException=e;
        hostLog.error("Error while attempting to write snapshot data to file " + m_file,e);
        m_writeFailed=true;
        throw e;
      }
 finally {
        tupleData.discard();
      }
      return null;
    }
  }
);
}
