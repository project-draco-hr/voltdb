{
  String hostname=CoreUtils.getHostnameOrAddress();
  m_file=file;
  m_tableName=tableName;
  m_fos=new FileOutputStream(file);
  m_channel=m_fos.getChannel();
  final FastSerializer fs=new FastSerializer();
  fs.writeInt(0);
  fs.writeInt(0);
  fs.writeByte(1);
  for (int ii=0; ii < 4; ii++) {
    fs.writeInt(version[ii]);
  }
  JSONStringer stringer=new JSONStringer();
  byte jsonBytes[]=null;
  try {
    stringer.object();
    stringer.key("txnId").value(txnId);
    stringer.key("hostId").value(hostId);
    stringer.key("hostname").value(hostname);
    stringer.key("clusterName").value(clusterName);
    stringer.key("databaseName").value(databaseName);
    stringer.key("tableName").value(tableName.toUpperCase());
    stringer.key("isReplicated").value(isReplicated);
    stringer.key("isCompressed").value(true);
    if (!isReplicated) {
      stringer.key("partitionIds").array();
      for (      int partitionId : partitionIds) {
        stringer.value(partitionId);
      }
      stringer.endArray();
      stringer.key("numPartitions").value(numPartitions);
    }
    stringer.endObject();
    String jsonString=stringer.toString();
    JSONObject jsonObj=new JSONObject(jsonString);
    jsonString=jsonObj.toString(4);
    jsonBytes=jsonString.getBytes("UTF-8");
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  fs.writeInt(jsonBytes.length);
  fs.write(jsonBytes);
  final BBContainer container=fs.getBBContainer();
  container.b.position(4);
  container.b.putInt(container.b.remaining() - 4);
  container.b.position(0);
  final byte schemaBytes[]=schemaTable.getSchemaBytes();
  final CRC32 crc=new CRC32();
  ByteBuffer aggregateBuffer=ByteBuffer.allocate(container.b.remaining() + schemaBytes.length);
  aggregateBuffer.put(container.b);
  aggregateBuffer.put(schemaBytes);
  aggregateBuffer.flip();
  crc.update(aggregateBuffer.array(),4,aggregateBuffer.capacity() - 4);
  final int crcValue=(int)crc.getValue();
  aggregateBuffer.putInt(crcValue).position(8);
  aggregateBuffer.put((byte)0).position(0);
  if (m_simulateFullDiskWritingHeader) {
    m_writeException=new IOException("Disk full");
    m_writeFailed=true;
    m_fos.close();
    throw m_writeException;
  }
  m_acceptOneWrite=true;
  ListenableFuture<?> writeFuture=write(Callables.returning((BBContainer)DBBPool.wrapBB(aggregateBuffer)),false);
  try {
    writeFuture.get();
  }
 catch (  InterruptedException e) {
    m_fos.close();
    throw new java.io.InterruptedIOException();
  }
catch (  ExecutionException e) {
    m_fos.close();
    throw m_writeException;
  }
  if (m_writeFailed) {
    m_fos.close();
    throw m_writeException;
  }
  ScheduledFuture<?> syncTask=null;
  syncTask=m_syncService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      int bytesSinceLastSync=0;
      while ((bytesSinceLastSync=m_bytesWrittenSinceLastSync.getAndSet(0)) > 0) {
        try {
          m_channel.force(false);
        }
 catch (        IOException e) {
          hostLog.error("Error syncing snapshot",e);
        }
        m_bytesAllowedBeforeSync.release(bytesSinceLastSync);
      }
    }
  }
,1,1,TimeUnit.SECONDS);
  m_syncTask=syncTask;
}
