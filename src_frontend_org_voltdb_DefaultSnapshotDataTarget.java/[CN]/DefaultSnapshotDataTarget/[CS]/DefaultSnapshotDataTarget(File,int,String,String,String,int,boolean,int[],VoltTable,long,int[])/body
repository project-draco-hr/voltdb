{
  String hostname=ConnectionUtil.getHostnameOrAddress();
  m_file=file;
  m_tableName=tableName;
  m_fos=new FileOutputStream(file);
  m_channel=m_fos.getChannel();
  m_es=Executors.newScheduledThreadPool(1,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      return new Thread(Thread.currentThread().getThreadGroup(),r,"Snapshot target for " + file.getName() + " host "+ hostId,131072);
    }
  }
);
  final FastSerializer fs=new FastSerializer();
  fs.writeInt(0);
  fs.writeInt(0);
  fs.writeByte(1);
  for (int ii=0; ii < 4; ii++) {
    fs.writeInt(version[ii]);
  }
  fs.writeLong(createTime);
  fs.writeInt(hostId);
  fs.writeString(hostname);
  fs.writeString(clusterName);
  fs.writeString(databaseName);
  fs.writeString(tableName.toUpperCase());
  fs.writeBoolean(isReplicated);
  if (!isReplicated) {
    fs.writeArray(partitionIds);
    fs.writeInt(numPartitions);
  }
  final BBContainer container=fs.getBBContainer();
  container.b.position(4);
  container.b.putInt(container.b.remaining() - 4);
  container.b.position(0);
  FastSerializer schemaSerializer=new FastSerializer();
  schemaTable.writeExternal(schemaSerializer);
  final BBContainer schemaContainer=schemaSerializer.getBBContainer();
  schemaContainer.b.limit(schemaContainer.b.limit() - 4);
  schemaContainer.b.position(schemaContainer.b.position() + 4);
  final CRC32 crc=new CRC32();
  ByteBuffer aggregateBuffer=ByteBuffer.allocate(container.b.remaining() + schemaContainer.b.remaining());
  aggregateBuffer.put(container.b);
  aggregateBuffer.put(schemaContainer.b);
  aggregateBuffer.flip();
  crc.update(aggregateBuffer.array(),4,aggregateBuffer.capacity() - 4);
  final int crcValue=(int)crc.getValue();
  aggregateBuffer.putInt(crcValue).position(8);
  aggregateBuffer.put((byte)0).position(0);
  if (m_simulateFullDiskWritingHeader) {
    m_writeException=new IOException("Disk full");
    m_writeFailed=true;
    m_fos.close();
    m_es.shutdown();
    throw m_writeException;
  }
  m_acceptOneWrite=true;
  Future<?> writeFuture=write(DBBPool.wrapBB(aggregateBuffer),false);
  try {
    writeFuture.get();
  }
 catch (  InterruptedException e) {
    m_fos.close();
    m_es.shutdown();
    return;
  }
catch (  ExecutionException e) {
    m_fos.close();
    m_es.shutdown();
    throw m_writeException;
  }
  if (m_writeFailed) {
    m_fos.close();
    m_es.shutdown();
    throw m_writeException;
  }
  m_es.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        m_fos.getFD().sync();
      }
 catch (      IOException e) {
        m_writeException=e;
        hostLog.error("Error while attempting to sync snapshot data for file ",e);
        m_writeFailed=true;
        throw new RuntimeException(e);
      }
    }
  }
,10000,10,TimeUnit.SECONDS);
}
