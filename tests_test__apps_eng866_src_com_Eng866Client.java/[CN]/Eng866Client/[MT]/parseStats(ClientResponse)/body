{
  VoltTable memory_stats=resp.getResults()[0];
  long rss=memory_stats.fetchRow(0).getLong("RSS");
  if (rss > m_highRss) {
    m_highRss=rss;
    m_highRssTime=System.currentTimeMillis();
  }
  long alloc_mem=0;
  long used_mem=0;
  alloc_mem+=memory_stats.fetchRow(0).getLong("JAVAUSED");
  alloc_mem+=memory_stats.fetchRow(0).getLong("TUPLEALLOCATED");
  alloc_mem+=memory_stats.fetchRow(0).getLong("INDEXMEMORY");
  alloc_mem+=memory_stats.fetchRow(0).getLong("POOLEDMEMORY");
  used_mem+=memory_stats.fetchRow(0).getLong("JAVAUSED");
  used_mem+=memory_stats.fetchRow(0).getLong("TUPLEDATA");
  used_mem+=memory_stats.fetchRow(0).getLong("INDEXMEMORY");
  used_mem+=memory_stats.fetchRow(0).getLong("STRINGMEMORY");
  if (alloc_mem > m_highAllocMem) {
    m_highAllocMem=alloc_mem;
    m_highAllocMemTime=System.currentTimeMillis();
  }
  if (used_mem > m_highUsedMem) {
    m_highUsedMem=used_mem;
    m_highUsedMemTime=System.currentTimeMillis();
  }
  System.out.println("CURRENT MEMORY TOTALS (USED, ALLOCATED, RSS):");
  System.out.println("CURRENT," + used_mem * 1000 + "," + alloc_mem * 1000 + "," + rss * 1000);
  Date blah=new Date(m_highUsedMemTime);
  System.out.println("LARGEST MEMORY USED: " + m_highUsedMem * 1000 + " at " + blah.toString());
  blah=new Date(m_highAllocMemTime);
  System.out.println("LARGEST MEMORY ALLOCATED: " + m_highAllocMem * 1000 + " at " + blah.toString());
  blah=new Date(m_highRssTime);
  System.out.println("LARGEST RSS: " + m_highRss * 1000 + " at " + blah.toString());
}
