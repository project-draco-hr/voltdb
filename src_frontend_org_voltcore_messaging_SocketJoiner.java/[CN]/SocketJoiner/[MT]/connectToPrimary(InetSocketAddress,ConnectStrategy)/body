{
  List<Long> skews=new ArrayList<Long>();
  Set<String> activeVersions=new TreeSet<String>();
  SocketChannel socket=null;
  try {
    LOG.debug("Non-Primary Starting & Connecting to Primary");
    int connectAttempts=0;
    while (socket == null) {
      try {
        socket=SocketChannel.open(coordIp);
      }
 catch (      java.net.ConnectException|java.nio.channels.UnresolvedAddressException|java.net.NoRouteToHostException|java.net.PortUnreachableException e) {
        if (mode == ConnectStrategy.PROBE) {
          return;
        }
        if (connectAttempts >= 8) {
          LOG.warn("Joining primary failed: " + e.getMessage() + " retrying..");
        }
        try {
          Thread.sleep(250);
        }
 catch (        InterruptedException ex) {
        }
      }
      ++connectAttempts;
    }
    if (!coordIp.equals(m_coordIp)) {
      m_coordIp=coordIp;
    }
    socket.socket().setTcpNoDelay(true);
    socket.socket().setPerformancePreferences(0,2,1);
    final String primaryAddress=socket.socket().getRemoteSocketAddress().toString();
    ByteBuffer currentTimeBuf=ByteBuffer.allocate(8);
    while (currentTimeBuf.hasRemaining()) {
      socket.read(currentTimeBuf);
    }
    currentTimeBuf.flip();
    long skew=System.currentTimeMillis() - currentTimeBuf.getLong();
    skews.add(skew);
    VersionChecker versionChecker=m_acceptor.getVersionChecker();
    activeVersions.add(versionChecker.getVersionString());
    JSONObject jsObj=new JSONObject();
    jsObj.put(TYPE,REQUEST_HOSTID);
    jsObj.put(VERSION_STRING,versionChecker.getVersionString());
    jsObj.put(PORT,m_internalPort);
    if (!m_internalInterface.isEmpty()) {
      jsObj.put(ADDRESS,m_internalInterface);
    }
    m_acceptor.decorate(jsObj,Optional.empty());
    jsObj.put(MAY_EXCHANGE_TS,true);
    byte jsBytes[]=jsObj.toString(4).getBytes(StandardCharsets.UTF_8);
    ByteBuffer requestHostIdBuffer=ByteBuffer.allocate(4 + jsBytes.length);
    requestHostIdBuffer.putInt(jsBytes.length);
    requestHostIdBuffer.put(jsBytes).flip();
    while (requestHostIdBuffer.hasRemaining()) {
      socket.write(requestHostIdBuffer);
    }
    ImmutableMap.Builder<Integer,JSONObject> cmbld=ImmutableMap.builder();
    JSONObject leaderInfo=processJSONResponse(socket,primaryAddress,activeVersions);
    JSONObject jsonObj=readJSONObjFromWire(socket,primaryAddress);
    if (!jsonObj.optBoolean(ACCEPTED,true)) {
      socket.close();
      if (!jsonObj.optBoolean(MAY_RETRY,false)) {
        org.voltdb.VoltDB.crashLocalVoltDB("Request to join cluster is rejected: " + jsonObj.optString(REASON,"rejection reason is not available"));
      }
      throw new CoreUtils.RetryException(jsonObj.optString(REASON,"rejection reason is not available"));
    }
    m_localHostId=jsonObj.getInt(NEW_HOST_ID);
    m_reportedInternalInterface=jsonObj.getString(REPORTED_ADDRESS);
    cmbld.put(m_localHostId,m_acceptor.decorate(jsonObj,Optional.<Boolean>empty()));
    JSONArray otherHosts=jsonObj.getJSONArray(HOSTS);
    int hostIds[]=new int[otherHosts.length()];
    SocketChannel hostSockets[]=new SocketChannel[hostIds.length];
    InetSocketAddress listeningAddresses[]=new InetSocketAddress[hostIds.length];
    for (int ii=0; ii < otherHosts.length(); ii++) {
      JSONObject host=otherHosts.getJSONObject(ii);
      String address=host.getString(ADDRESS);
      int port=host.getInt(PORT);
      final int hostId=host.getInt(HOST_ID);
      LOG.info("Leader provided address " + address + ":"+ port);
      InetSocketAddress hostAddr=new InetSocketAddress(address,port);
      if (ii == 0) {
        hostIds[ii]=hostId;
        listeningAddresses[ii]=hostAddr;
        hostSockets[ii]=socket;
        cmbld.put(ii,leaderInfo);
        continue;
      }
      SocketChannel hostSocket=null;
      while (hostSocket == null) {
        try {
          hostSocket=SocketChannel.open(hostAddr);
        }
 catch (        java.net.ConnectException e) {
          LOG.warn("Joining host failed: " + e.getMessage() + " retrying..");
          try {
            Thread.sleep(250);
          }
 catch (          InterruptedException ex) {
          }
        }
      }
      final String remoteAddress=hostSocket.socket().getRemoteSocketAddress().toString();
      currentTimeBuf.clear();
      while (currentTimeBuf.hasRemaining()) {
        hostSocket.read(currentTimeBuf);
      }
      currentTimeBuf.flip();
      skew=System.currentTimeMillis() - currentTimeBuf.getLong();
      assert(currentTimeBuf.remaining() == 0);
      skews.add(skew);
      jsObj=new JSONObject();
      jsObj.put(TYPE,PUBLISH_HOSTID);
      jsObj.put(HOST_ID,m_localHostId);
      jsObj.put(PORT,m_internalPort);
      jsObj.put(ADDRESS,m_internalInterface.isEmpty() ? m_reportedInternalInterface : m_internalInterface);
      jsObj.put(VERSION_STRING,versionChecker.getVersionString());
      m_acceptor.decorate(jsObj,Optional.empty());
      jsObj.put(MAY_EXCHANGE_TS,true);
      jsBytes=jsObj.toString(4).getBytes(StandardCharsets.UTF_8);
      ByteBuffer pushHostId=ByteBuffer.allocate(4 + jsBytes.length);
      pushHostId.putInt(jsBytes.length);
      pushHostId.put(jsBytes).flip();
      while (pushHostId.hasRemaining()) {
        hostSocket.write(pushHostId);
      }
      hostIds[ii]=hostId;
      hostSockets[ii]=hostSocket;
      listeningAddresses[ii]=hostAddr;
      JSONObject hostInfo=processJSONResponse(hostSocket,remoteAddress,activeVersions);
      cmbld.put(ii,hostInfo);
    }
    checkClockSkew(skews);
    if (activeVersions.size() > 2) {
      String versions="";
      for (      String version : activeVersions) {
        if (!version.equals(versionChecker.getVersionString())) {
          versions+=version + ", ";
        }
      }
      versions=versions.substring(0,versions.length() - 2);
      org.voltdb.VoltDB.crashLocalVoltDB("Cluster already is running mixed voltdb versions (" + versions + ").\n"+ "Adding version "+ versionChecker.getVersionString()+ " would add a third version.\n"+ "VoltDB hotfix support supports only two unique versions simulaniously.",false,null);
    }
    ByteBuffer joinCompleteBuffer=ByteBuffer.allocate(1);
    while (joinCompleteBuffer.hasRemaining()) {
      hostSockets[0].write(joinCompleteBuffer);
    }
    m_joinHandler.notifyOfHosts(m_localHostId,hostIds,hostSockets,listeningAddresses,cmbld.build());
  }
 catch (  ClosedByInterruptException e) {
  }
}
