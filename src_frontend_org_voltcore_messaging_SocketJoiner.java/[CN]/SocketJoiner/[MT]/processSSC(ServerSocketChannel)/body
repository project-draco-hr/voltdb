{
  LOG.info("CALLING processSSC");
  SocketChannel sc=null;
  while ((sc=ssc.accept()) != null) {
    sc.socket().setTcpNoDelay(true);
    sc.socket().setPerformancePreferences(0,2,1);
    final String remoteAddress=sc.socket().getRemoteSocketAddress().toString();
    LOG.info("Primary sending clock skew to connector.");
    ByteBuffer currentTimeBuf=ByteBuffer.allocate(8);
    currentTimeBuf.putLong(System.currentTimeMillis());
    currentTimeBuf.flip();
    while (currentTimeBuf.hasRemaining()) {
      sc.write(currentTimeBuf);
    }
    LOG.info("Primary reading address info from connector.");
    JSONObject jsObj=readJSONObjFromWire(sc,remoteAddress);
    LOG.info(jsObj.toString(2));
    String remoteBuildString=jsObj.getString("versionString");
    JSONObject returnJs=new JSONObject();
    returnJs.put("versionString",VoltDB.instance().getVersionString());
    returnJs.put("buildString",VoltDB.instance().getBuildString());
    returnJs.put("versionCompatible",VoltDB.instance().isCompatibleVersionString(remoteBuildString));
    byte jsBytes[]=returnJs.toString(4).getBytes(Constants.UTF8ENCODING);
    ByteBuffer returnJsBuffer=ByteBuffer.allocate(4 + jsBytes.length);
    returnJsBuffer.putInt(jsBytes.length);
    returnJsBuffer.put(jsBytes).flip();
    LOG.info("Primary sending version info to connector.");
    while (returnJsBuffer.hasRemaining()) {
      sc.write(returnJsBuffer);
    }
    String type=jsObj.getString("type");
    InetSocketAddress listeningAddress;
    if (jsObj.has("address")) {
      listeningAddress=new InetSocketAddress(InetAddress.getByName(jsObj.getString("address")),jsObj.getInt("port"));
    }
 else {
      listeningAddress=new InetSocketAddress(((InetSocketAddress)sc.socket().getRemoteSocketAddress()).getAddress().getHostAddress(),jsObj.getInt("port"));
    }
    hostLog.info("Received request type " + type);
    if (type.equals("REQUEST_HOSTID")) {
      m_joinHandler.requestJoin(sc,listeningAddress);
    }
 else     if (type.equals("PUBLISH_HOSTID")) {
      m_joinHandler.notifyOfJoin(jsObj.getInt("hostId"),sc,listeningAddress);
    }
 else {
      throw new RuntimeException("Unexpected message type " + type + " from "+ remoteAddress);
    }
  }
}
