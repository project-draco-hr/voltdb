{
  SocketChannel sc=null;
  while ((sc=ssc.accept()) != null) {
    sc.socket().setTcpNoDelay(true);
    sc.socket().setPerformancePreferences(0,2,1);
    final String remoteAddress=sc.socket().getRemoteSocketAddress().toString();
    ByteBuffer currentTimeBuf=ByteBuffer.allocate(8);
    currentTimeBuf.putLong(System.currentTimeMillis());
    currentTimeBuf.flip();
    while (currentTimeBuf.hasRemaining()) {
      sc.write(currentTimeBuf);
    }
    JSONObject jsObj=readJSONObjFromWire(sc,remoteAddress);
    LOG.info(jsObj.toString(2));
    String remoteBuildString=jsObj.getString(VERSION_STRING);
    VersionChecker versionChecker=m_acceptor.getVersionChecker();
    JSONObject returnJs=new JSONObject();
    returnJs.put(VERSION_STRING,versionChecker.getVersionString());
    returnJs.put(BUILD_STRING,versionChecker.getBuildString());
    returnJs.put(VERSION_COMPATIBLE,versionChecker.isCompatibleVersionString(remoteBuildString));
    m_acceptor.decorate(returnJs,Optional.of(m_paused.get()));
    byte jsBytes[]=returnJs.toString(4).getBytes(StandardCharsets.UTF_8);
    ByteBuffer returnJsBuffer=ByteBuffer.allocate(4 + jsBytes.length);
    returnJsBuffer.putInt(jsBytes.length);
    returnJsBuffer.put(jsBytes).flip();
    while (returnJsBuffer.hasRemaining()) {
      sc.write(returnJsBuffer);
    }
    String type=jsObj.getString(TYPE);
    InetSocketAddress listeningAddress;
    if (jsObj.has(ADDRESS)) {
      listeningAddress=new InetSocketAddress(InetAddress.getByName(jsObj.getString(ADDRESS)),jsObj.getInt(PORT));
    }
 else {
      listeningAddress=new InetSocketAddress(((InetSocketAddress)sc.socket().getRemoteSocketAddress()).getAddress().getHostAddress(),jsObj.getInt(PORT));
    }
    hostLog.info("Received request type " + type);
    if (type.equals(REQUEST_HOSTID)) {
      m_joinHandler.requestJoin(sc,listeningAddress,jsObj);
    }
 else     if (type.equals(PUBLISH_HOSTID)) {
      m_joinHandler.notifyOfJoin(jsObj.getInt(HOST_ID),sc,listeningAddress,jsObj);
    }
 else {
      throw new RuntimeException("Unexpected message type " + type + " from "+ remoteAddress);
    }
  }
}
