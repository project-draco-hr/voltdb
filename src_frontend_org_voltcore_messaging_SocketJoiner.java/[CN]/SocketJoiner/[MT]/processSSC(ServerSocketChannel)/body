{
  SocketChannel sc=null;
  while ((sc=ssc.accept()) != null) {
    sc.socket().setTcpNoDelay(true);
    sc.socket().setPerformancePreferences(0,2,1);
    final String remoteAddress=sc.socket().getRemoteSocketAddress().toString();
    ByteBuffer currentTime=ByteBuffer.allocate(8);
    currentTime.putLong(System.currentTimeMillis());
    currentTime.flip();
    while (currentTime.hasRemaining()) {
      sc.write(currentTime);
    }
    ByteBuffer lengthBuffer=ByteBuffer.allocate(4);
    while (lengthBuffer.remaining() > 0) {
      int read=sc.read(lengthBuffer);
      if (read == -1) {
        throw new EOFException(remoteAddress);
      }
    }
    lengthBuffer.flip();
    ByteBuffer messageBytes=ByteBuffer.allocate(lengthBuffer.getInt());
    while (messageBytes.hasRemaining()) {
      int read=sc.read(messageBytes);
      if (read == -1) {
        throw new EOFException(remoteAddress);
      }
    }
    messageBytes.flip();
    JSONObject jsObj=new JSONObject(new String(messageBytes.array(),"UTF-8"));
    String type=jsObj.getString("type");
    InetSocketAddress listeningAddress;
    if (jsObj.has("address")) {
      listeningAddress=new InetSocketAddress(InetAddress.getByName(jsObj.getString("address")),jsObj.getInt("port"));
    }
 else {
      listeningAddress=new InetSocketAddress(((InetSocketAddress)sc.socket().getRemoteSocketAddress()).getAddress().getHostAddress(),jsObj.getInt("port"));
    }
    hostLog.info("Received request type " + type);
    if (type.equals("REQUEST_HOSTID")) {
      m_joinHandler.requestJoin(sc,listeningAddress);
    }
 else     if (type.equals("PUBLISH_HOSTID")) {
      m_joinHandler.notifyOfJoin(jsObj.getInt("hostId"),sc,listeningAddress);
    }
 else {
      throw new RuntimeException("Unexpected message type " + type + " from "+ remoteAddress);
    }
  }
}
