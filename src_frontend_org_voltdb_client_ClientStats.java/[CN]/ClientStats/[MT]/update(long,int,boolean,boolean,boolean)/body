{
  m_invocationsCompleted++;
  if (abort)   m_invocationAborts++;
  if (error)   m_invocationErrors++;
  if (timeout)   m_invocationTimeouts++;
  m_roundTripTimeNanos+=roundTripTimeNanos;
  m_clusterRoundTripTime+=clusterRoundTripTime;
  final long roundTripMicros=Math.max(LOWEST_TRACKABLE,TimeUnit.NANOSECONDS.toMicros(roundTripTimeNanos));
  if (roundTripMicros > HIGHEST_TRACKABLE) {
    m_latencyHistogram.recordValue(roundTripMicros % HIGHEST_TRACKABLE);
    int count=(int)(roundTripMicros / HIGHEST_TRACKABLE);
    for (int ii=0; ii < count; ii++) {
      m_latencyHistogram.recordValue(HIGHEST_TRACKABLE);
    }
  }
 else {
    m_latencyHistogram.recordValue(roundTripMicros);
  }
}
