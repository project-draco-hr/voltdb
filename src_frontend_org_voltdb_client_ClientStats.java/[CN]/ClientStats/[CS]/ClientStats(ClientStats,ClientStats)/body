{
  if (ps1.name.equals(ps2.name))   name=ps1.name;
 else   name="";
  if (ps1.connectionId == ps2.connectionId)   connectionId=ps1.connectionId;
 else   connectionId=-1;
  if (ps1.hostname.equals(ps2.hostname))   hostname=ps1.hostname;
 else   hostname="";
  if (ps1.port == ps2.port)   port=ps1.port;
 else   port=-1;
  since=Math.min(ps1.since,ps2.since);
  invocationsCompleted=ps1.invocationsCompleted + ps2.invocationsCompleted;
  invocationAborts=ps1.invocationAborts + ps2.invocationAborts;
  invocationErrors=ps1.invocationErrors + ps2.invocationErrors;
  roundTripTime=ps1.roundTripTime + ps2.roundTripTime;
  clusterRoundTripTime=ps1.clusterRoundTripTime + ps2.clusterRoundTripTime;
  maxRoundTripTime=Math.max(ps1.maxRoundTripTime,ps2.maxRoundTripTime);
  maxClusterRoundTripTime=Math.max(ps1.maxClusterRoundTripTime,ps2.maxClusterRoundTripTime);
  for (int i=0; i < NUMBER_OF_BUCKETS; ++i) {
    latencyBy1ms[i]=ps1.latencyBy1ms[i] + ps2.latencyBy1ms[i];
    latencyBy10ms[i]=ps1.latencyBy10ms[i] + ps2.latencyBy10ms[i];
    latencyBy100ms[i]=ps1.latencyBy100ms[i] + ps2.latencyBy100ms[i];
  }
}
