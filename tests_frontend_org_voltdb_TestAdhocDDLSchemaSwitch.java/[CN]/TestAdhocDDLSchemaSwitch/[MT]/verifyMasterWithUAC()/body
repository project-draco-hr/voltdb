{
  assertFalse(findTableInSystemCatalogResults("FOO"));
  ClientResponse results=m_client.updateApplicationCatalog(new File(m_pathToCatalog),null);
  assertEquals(ClientResponse.SUCCESS,results.getStatus());
  assertTrue(findTableInSystemCatalogResults("FOO"));
  verifyDeploymentOnlyUAC();
  assertFalse(findTableInSystemCatalogResults("BAR"));
  boolean threw=false;
  try {
    results=m_client.callProcedure("@AdHoc","create table BAR (ID integer, VAL varchar(50));");
  }
 catch (  ProcCallException pce) {
    threw=true;
    assertTrue(pce.getMessage().contains("AdHoc DDL is forbidden"));
  }
  assertTrue("Adhoc DDL should have failed",threw);
  assertFalse(findTableInSystemCatalogResults("BAR"));
  assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.fullddlfeatures.testImportProc"));
  threw=false;
  try {
    InMemoryJarfile jarfile=new InMemoryJarfile();
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,org.voltdb_testprocs.fullddlfeatures.testImportProc.class);
    m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
  }
 catch (  ProcCallException pce) {
    threw=true;
    assertTrue(pce.getMessage().contains("@UpdateClasses is forbidden"));
  }
  assertTrue("@UpdateClasses should have failed",threw);
  assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.fullddlfeatures.testImportProc"));
  verifyAdhocQuery();
}
