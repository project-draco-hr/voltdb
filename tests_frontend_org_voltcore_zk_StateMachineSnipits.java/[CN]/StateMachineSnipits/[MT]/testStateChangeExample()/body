{
  byte[] byteStates=new byte[]{5,23,54,92,118,122};
  short[] shortStates=new short[]{5000,6000,7000,8000,9000,10000};
  SynchronizedStatesManager ssmC1M1=addStateMachineManagerFor(0,"COMMUNITY1","manager1",2);
  SynchronizedStatesManager ssmC2M1=addStateMachineManagerFor(1,"COMMUNITY2","manager1",1);
  SynchronizedStatesManager ssmC2M2=addStateMachineManagerFor(0,"COMMUNITY2","manager2",1);
  SynchronizedStatesManager ssmC1M2=addStateMachineManagerFor(2,"COMMUNITY1","manager2",2);
  try {
    ByteStateChanger bC1M1=new ByteStateChanger(ssmC1M1,"byteMachine",byteStates[0]);
    ShortStateChanger sC1M1=new ShortStateChanger(ssmC1M1,"shortMachine",shortStates[2]);
    bC1M1.start();
    sC1M1.start();
    while (!bC1M1.isInitialized() && !sC1M1.isInitialized()) {
      Thread.yield();
    }
    assertTrue(bC1M1.m_currentState == byteStates[0]);
    assertTrue(sC1M1.m_currentState == shortStates[2]);
    ShortStateChanger sC2M1=new ShortStateChanger(ssmC2M1,"shortMachine",shortStates[1]);
    sC2M1.start();
    while (!sC2M1.isInitialized()) {
      Thread.yield();
    }
    assertTrue(sC2M1.m_currentState == shortStates[1]);
    ShortStateChanger sC2M2=new ShortStateChanger(ssmC2M2,"shortMachine",shortStates[3]);
    sC2M2.start();
    while (!sC2M2.isInitialized()) {
      Thread.yield();
    }
    assertTrue(sC2M2.m_currentState == sC2M1.m_currentState && sC2M2.m_currentState == shortStates[1]);
    sC2M2.changeState(shortStates[0]);
    while (sC2M2.changeStillPending() && sC2M2.getState() != sC2M1.getState()) {
      Thread.yield();
    }
    assertFalse(sC2M2.getState() == sC1M1.getState());
    ByteStateChanger bC1M2=new ByteStateChanger(ssmC1M2,"byteMachine",byteStates[4]);
    ShortStateChanger sC1M3=new ShortStateChanger(ssmC1M2,"shortMachine",shortStates[4]);
    bC1M2.start();
    sC1M3.start();
    while (!bC1M2.isInitialized() && !sC1M3.isInitialized()) {
      Thread.yield();
    }
    assertTrue(bC1M2.getState() == byteStates[0] && sC1M3.getState() == shortStates[2]);
    bC1M2.changeState(byteStates[0]);
    bC1M1.changeState(byteStates[4]);
    while (bC1M1.changeStillPending() && bC1M1.getState() == bC1M2.getState()) {
      Thread.yield();
    }
  }
 catch (  InterruptedException e) {
    fail();
  }
}
