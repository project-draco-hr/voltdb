{
  String error=null;
  ClientResponse cr=null;
  try {
    cr=client.callProcedure("@AdHoc",ddl);
  }
 catch (  NoConnectionsException e) {
    error=e.getLocalizedMessage();
  }
catch (  ProcCallException e) {
    error=_F("Procedure @AdHoc call exception: %s",e.getLocalizedMessage());
    cr=e.getClientResponse();
  }
  if (error == null && cr != null) {
switch (cr.getStatus()) {
case ClientResponse.SUCCESS:
      log.info("Live DDL execution was reported to be successful");
    break;
case ClientResponse.CONNECTION_LOST:
case ClientResponse.CONNECTION_TIMEOUT:
case ClientResponse.RESPONSE_UNKNOWN:
case ClientResponse.SERVER_UNAVAILABLE:
  error=String.format("Communication error: %s",cr.getStatusString());
break;
case ClientResponse.UNEXPECTED_FAILURE:
case ClientResponse.GRACEFUL_FAILURE:
case ClientResponse.USER_ABORT:
SchemaChangeUtility.die(false,"USER_ABORT in procedure call for live DDL: %s",((ClientResponseImpl)cr).toJSONString());
}
}
if (error != null) {
log.error(error);
if (hardFail) {
String msg=(cr != null ? ((ClientResponseImpl)cr).toJSONString() : _F("Unknown @AdHoc failure"));
throw new IOException(msg);
}
}
return error;
}
