{
  VoltTable t2=null;
  String currentName=t1 == null ? "B" : TableHelper.getTableName(t1);
  String newName=currentName;
  VoltTable versionT=TableHelper.quickTable(_F("V%d (BIGINT)",schemaVersionNo + 1));
  if (newTable) {
    newName=currentName.equals("A") ? "B" : "A";
    t2=TableHelper.getTotallyRandomTable(newName,rand,false);
  }
 else {
    t2=TableHelper.mutateTable(t1,true,rand);
  }
  log.info(_F("New Schema:\n%s",TableHelper.ddlForTable(t2)));
  TableHelper.ViewRep newViewRep=viewIn;
  if (newViewRep == null) {
    newViewRep=TableHelper.ViewRep.viewRepForTable("MV",t2,rand);
  }
 else {
    if (!newViewRep.compatibleWithTable(t2)) {
      newViewRep=null;
    }
  }
  if (newViewRep != null) {
    log.info(_F("New View:\n%s",newViewRep.ddlForView()));
  }
 else {
    log.info("New View: NULL");
  }
  schemaChanger.beginUpdate();
  try {
    schemaChanger.dropTables(_F("V%d",schemaVersionNo));
    if (viewRep != null) {
      schemaChanger.dropViews(viewRep.viewName);
      viewRep=null;
    }
    viewRep=newViewRep;
    if (verifyProc != null) {
      schemaChanger.dropProcedures(verifyProc.getName());
      verifyProc=null;
    }
    schemaChanger.createTable(versionT);
    boolean partitioned=newName.equalsIgnoreCase("A");
    if (newTable) {
      schemaChanger.createTable(t2);
    }
 else {
      schemaChanger.updateTable(t1,t2);
    }
    if (partitioned) {
      schemaChanger.addTablePartitionInfo(t2,newName);
      verifyProc=VerifySchemaChangedA.class;
    }
 else {
      verifyProc=VerifySchemaChangedB.class;
    }
    schemaChanger.createProcedures(client,verifyProc);
    if (viewRep != null) {
      schemaChanger.createView(viewRep);
    }
    schemaChanger.prepare();
  }
 catch (  IOException e) {
    return null;
  }
  long count=tupleCount(t1);
  long start=System.nanoTime();
  if (newTable) {
    log.info(_F("Starting %s to swap tables.",schemaChanger.getActionName()));
  }
 else {
    log.info(_F("Starting %s to change schema.",schemaChanger.getActionName()));
  }
  if (!schemaChanger.perform(this.client)) {
    return null;
  }
  schemaChanger.endUpdate();
  int obsCatVersion=verifyAndGetSchemaVersion();
  if (obsCatVersion == schemaVersionNo) {
    log.error(_F("Catalog update was reported to be successful but did not pass " + "verification: expected V%d, observed V%d",schemaVersionNo + 1,obsCatVersion));
    assert(false);
    System.exit(-1);
  }
  if (obsCatVersion == schemaVersionNo + 1) {
    schemaVersionNo++;
  }
 else {
    assert(false);
    System.exit(-1);
  }
  long end=System.nanoTime();
  double seconds=(end - start) / 1000000000.0;
  if (newTable) {
    log.info(_F("Completed %s that swapped tables in %.4f seconds",schemaChanger.getActionName(),seconds));
  }
 else {
    log.info(_F("Completed %s of %d tuples in %.4f seconds (%d tuples/sec)",schemaChanger.getActionName(),count,seconds,(long)(count / seconds)));
  }
  return new Pair<VoltTable,TableHelper.ViewRep>(t2,newViewRep,false);
}
