def main(command_name, command_dir, version, description, *args, **kwargs):
    '\n    Called by running script to execute command with command line arguments.\n    '
    package = utility.kwargs_get_boolean(kwargs, 'package', default=False)
    standalone = utility.kwargs_get_boolean(kwargs, 'standalone', default=False)
    state_directory = utility.kwargs_get_string(kwargs, 'state_directory', default=None)
    try:
        opts = cli.preprocess_options(base_cli_spec.options, args)
        utility.set_verbose(opts.verbose)
        utility.set_debug(opts.debug)
        permanent_path = os.path.join(os.getcwd(), environment.config_name)
        local_path = os.path.join(os.getcwd(), environment.config_name_local)
        config = VoltConfig(permanent_path, local_path)
        environment.initialize(standalone, command_name, command_dir, version)
        if (state_directory is None):
            state_directory = ('~/.%s' % environment.command_name)
        state_directory = os.path.expandvars(os.path.expanduser(state_directory))
        utility.set_state_directory(state_directory)
        verbspace = load_verbspace(command_name, command_dir, config, version, description, package, environment.pro_version)
        internal_verbspaces = {}
        if (command_name not in internal_commands):
            for internal_command in internal_commands:
                internal_verbspace = load_verbspace(internal_command, None, config, version, ('Internal "%s" command' % internal_command), package)
                internal_verbspaces[internal_command] = internal_verbspace
        run_command(verbspace, internal_verbspaces, config, *args)
    except KeyboardInterrupt:
        sys.stderr.write('\n')
        utility.abort('break')
