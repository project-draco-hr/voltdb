{
  m_siteId=siteId;
  String txnlog_name=ExecutionSite.class.getName() + "." + m_siteId;
  m_txnlog=Logger.getLogger(txnlog_name,VoltLoggerFactory.instance());
  hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_Initializing.name(),new Object[]{String.valueOf(siteId)},null);
  m_context=voltdb.getCatalogContext();
  VoltDB.instance().getFaultDistributor().registerFaultHandler(FaultType.NODE_FAILURE,new ExecutionSiteNodeFailureFaultHandler(),NodeFailureFault.NODE_FAILURE_EXECUTION_SITE);
  if (voltdb.getBackendTargetType() == BackendTarget.NONE) {
    ee=new MockExecutionEngine();
    hsql=null;
  }
 else   if (voltdb.getBackendTargetType() == BackendTarget.HSQLDB_BACKEND) {
    hsql=initializeHSQLBackend();
    ee=new MockExecutionEngine();
  }
 else {
    if (serializedCatalog == null) {
      serializedCatalog=voltdb.getCatalogContext().catalog.serialize();
    }
    hsql=null;
    ee=initializeEE(voltdb.getBackendTargetType(),serializedCatalog);
  }
  m_watchdog=new Watchdog(siteId,siteIndex);
  m_dumpId="ExecutionSite." + String.valueOf(getSiteId());
  DumpManager.register(m_dumpId,this);
  m_systemProcedureContext=new SystemProcedureContext();
  m_mailbox=mailbox;
  m_transactionQueue=(transactionQueue != null) ? transactionQueue : initializeTransactionQueue(siteId);
  loadProceduresFromCatalog(voltdb.getBackendTargetType());
  m_snapshotter=new SnapshotSiteProcessor();
  m_starvationTracker=new StarvationTracker(String.valueOf(getCorrespondingSiteId()),getCorrespondingSiteId());
  VoltDB.instance().getStatsAgent().registerStatsSource(SysProcSelector.STARVATION,Integer.parseInt(getCorrespondingCatalogSite().getTypeName()),m_starvationTracker);
}
