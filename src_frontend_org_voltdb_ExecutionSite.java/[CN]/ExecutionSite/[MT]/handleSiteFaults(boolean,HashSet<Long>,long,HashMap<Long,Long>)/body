{
  HashSet<Long> failedInitiators=new HashSet<Long>();
  HashSet<Integer> failedHosts=new HashSet<Integer>();
  for (  Long siteId : failedSites) {
    failedHosts.add(SiteTracker.getHostForSite(siteId));
  }
  StringBuilder sb=new StringBuilder();
  for (  Integer hostId : failedHosts) {
    sb.append(hostId).append(' ');
  }
  final String failedHostsString=sb.toString();
  if (m_txnlog.isTraceEnabled()) {
    m_txnlog.trace("FUZZTEST handleNodeFault " + failedHostsString + " with globalMultiPartCommitPoint "+ globalMultiPartCommitPoint+ " and safeInitiationPoints "+ initiatorSafeInitiationPoint);
  }
 else {
    m_rejoinLog.info("Handling node faults " + failedHostsString + " with globalMultiPartCommitPoint "+ globalMultiPartCommitPoint+ " and safeInitiationPoints "+ CoreUtils.hsIdKeyMapToString(initiatorSafeInitiationPoint));
  }
  lastKnownGloballyCommitedMultiPartTxnId=globalMultiPartCommitPoint;
  if (partitionDetected) {
    Long globalInitiationPoint=Long.MIN_VALUE;
    for (    Long initiationPoint : initiatorSafeInitiationPoint.values()) {
      globalInitiationPoint=Math.max(initiationPoint,globalInitiationPoint);
    }
    m_rejoinLog.info("Scheduling snapshot after txnId " + globalInitiationPoint + " for cluster partition fault. Current commit point: "+ this.lastCommittedTxnId);
  }
  for (  Long i : failedSites) {
    failedInitiators.add(i);
  }
  Set<Long> faultedTxns=new HashSet<Long>();
  Iterator<Long> it=m_transactionsById.keySet().iterator();
  while (it.hasNext()) {
    final long tid=it.next();
    TransactionState ts=m_transactionsById.get(tid);
    if (initiatorSafeInitiationPoint.containsKey(ts.initiatorHSId) && ts.txnId > initiatorSafeInitiationPoint.get(ts.initiatorHSId) && failedSites.contains(ts.initiatorHSId)) {
      m_rejoinLog.info("Site " + m_siteId + " faulting non-globally initiated transaction "+ ts.txnId);
      it.remove();
      if (!ts.isReadOnly()) {
        faultedTxns.add(ts.txnId);
      }
    }
  }
  if (m_recoveryProcessor != null) {
    m_recoveryProcessor.handleSiteFaults(failedSites,m_tracker);
  }
}
