{
  assert(fragmentPlan != null);
  currentFragResponse.setStatus(FragmentResponseMessage.SUCCESS,null);
  try {
    int inputDepId=-1;
    if ((dependencies != null) && (dependencies.size() > 00)) {
      assert(dependencies.size() <= 1);
      for (      int x : dependencies.keySet()) {
        inputDepId=x;
        break;
      }
      stashWorkUnitDependencies(dependencies);
    }
    VoltTable table=null;
    table=executeCustomPlanFragment(fragmentPlan,inputDepId,txnState.txnId);
    DependencyPair dep=new DependencyPair(outputDepId,table);
    sendDependency(currentFragResponse,dep.depId,dep.dependency);
  }
 catch (  final EEException e) {
    hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),e);
    currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
  }
catch (  final SQLException e) {
    hostLog.l7dlog(Level.TRACE,LogKeys.host_ExecutionSite_ExceptionExecutingPF.name(),e);
    currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,e);
  }
catch (  final Exception e) {
    currentFragResponse.setStatus(FragmentResponseMessage.UNEXPECTED_ERROR,new SerializableException(e));
  }
  return currentFragResponse;
}
