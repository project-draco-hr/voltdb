{
  if (m_recovering) {
    VoltDB.crashLocalVoltDB("Aborting recovery due to a remote node failure. Retry again.",false,null);
  }
  SiteTracker newTracker=VoltDB.instance().getSiteTracker();
  HashSet<SiteFailureFault> failures=message.m_failedSites;
  m_context=VoltDB.instance().getCatalogContext();
  for (  SiteFailureFault fault : failures) {
    for (    Long siteId : fault.getSiteIds()) {
      if (!m_pendingFailedSites.add(siteId)) {
        VoltDB.crashLocalVoltDB("A site id shouldn't be distributed as a fault twice",true,null);
      }
    }
  }
  HashSet<Long> delta=new HashSet<Long>(m_tracker.m_allSitesImmutable);
  delta.removeAll(newTracker.m_allSitesImmutable);
  System.out.println("Failure delta is " + MiscUtils.hsIdCollectionToString(delta) + " with failures "+ MiscUtils.hsIdCollectionToString(m_pendingFailedSites));
  if (!delta.equals(m_pendingFailedSites)) {
    return;
  }
  HashMap<Long,Long> initiatorSafeInitPoint=new HashMap<Long,Long>();
  discoverGlobalFaultData_send(newTracker);
  Long multiPartitionCommitPoint=null;
  if (discoverGlobalFaultData_rcv(newTracker)) {
    multiPartitionCommitPoint=extractGlobalFaultData(newTracker,initiatorSafeInitPoint);
  }
 else {
    return;
  }
  PPDPolicyDecision makePPDPolicyDecisions=VoltDB.instance().getFaultDistributor().makePPDPolicyDecisions(m_pendingFailedSites,newTracker);
  if (makePPDPolicyDecisions == PPDPolicyDecision.NodeFailure) {
    handleSiteFaults(false,m_pendingFailedSites,multiPartitionCommitPoint,initiatorSafeInitPoint);
  }
 else   if (makePPDPolicyDecisions == PPDPolicyDecision.PartitionDetection) {
    handleSiteFaults(true,m_pendingFailedSites,multiPartitionCommitPoint,initiatorSafeInitPoint);
  }
  m_tracker=newTracker;
  m_pendingFailedSites.clear();
}
