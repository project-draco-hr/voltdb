{
  Set<Entry<String,Config>> entrySet=SystemProcedureCatalog.listing.entrySet();
  for (  Entry<String,Config> entry : entrySet) {
    Config sysProc=entry.getValue();
    Procedure proc=sysProc.asCatalogProcedure();
    VoltSystemProcedure procedure=null;
    ProcedureRunner runner=null;
    final String className=sysProc.getClassname();
    Class<?> procClass=null;
    try {
      procClass=m_context.classForProcedure(className);
    }
 catch (    final ClassNotFoundException e) {
      if (sysProc.commercial) {
        continue;
      }
      hostLog.l7dlog(Level.WARN,LogKeys.host_ExecutionSite_GenericException.name(),new Object[]{getSiteId(),siteIndex},e);
      VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
    }
    try {
      procedure=(VoltSystemProcedure)procClass.newInstance();
    }
 catch (    final InstantiationException e) {
      hostLog.l7dlog(Level.WARN,LogKeys.host_ExecutionSite_GenericException.name(),new Object[]{getSiteId(),siteIndex},e);
    }
catch (    final IllegalAccessException e) {
      hostLog.l7dlog(Level.WARN,LogKeys.host_ExecutionSite_GenericException.name(),new Object[]{getSiteId(),siteIndex},e);
    }
    runner=m_runnerFactory.create(procedure,m_context.cluster.getPartitions().size(),this,proc,hsql);
    procedure.initSysProc(m_context.cluster.getPartitions().size(),this,proc,m_context.cluster);
    procs.put(entry.getKey(),runner);
  }
}
