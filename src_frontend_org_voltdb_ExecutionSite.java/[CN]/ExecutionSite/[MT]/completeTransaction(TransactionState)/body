{
  if (m_txnlog.isTraceEnabled()) {
    m_txnlog.trace("FUZZTEST completeTransaction " + txnState.txnId);
  }
  if (!txnState.isReadOnly()) {
    assert(latestUndoToken != kInvalidUndoToken);
    assert(latestUndoToken >= txnState.getBeginUndoToken());
    if (txnState.getBeginUndoToken() == kInvalidUndoToken) {
      if (m_rejoining == false) {
        throw new AssertionError("Non-recovering write txn has invalid undo state.");
      }
    }
 else     if (latestUndoToken > txnState.getBeginUndoToken()) {
      ee.releaseUndoToken(latestUndoToken);
    }
    StoredProcedureInvocation invocation=txnState.getInvocation();
    long ts=TransactionIdManager.getTimestampFromTransactionId(txnState.txnId);
    if ((invocation != null) && (m_rejoining == false) && (ts > m_startupTime)) {
      if (!txnState.needsRollback()) {
        m_partitionDRGateway.onSuccessfulProcedureCall(txnState.txnId,invocation,txnState.getResults());
      }
    }
    if (m_rejoining && txnState.shouldSendResponse() && m_rejoinTaskLog != null && !txnState.needsRollback()) {
      try {
        m_rejoinTaskLog.logTask(txnState.getNotice());
        m_loggedTxnCount++;
      }
 catch (      IOException e) {
        VoltDB.crashLocalVoltDB("Failed to log task message",true,e);
      }
    }
    txnState.setBeginUndoToken(kInvalidUndoToken);
  }
  if (!txnState.needsRollback()) {
    if (txnState.txnId > lastCommittedTxnId) {
      lastCommittedTxnId=txnState.txnId;
      lastCommittedTxnTime=EstTime.currentTimeMillis();
      if (!txnState.isSinglePartition() && !txnState.isReadOnly()) {
        lastKnownGloballyCommitedMultiPartTxnId=Math.max(txnState.txnId,lastKnownGloballyCommitedMultiPartTxnId);
      }
    }
  }
}
