{
  System.out.println("\n\n-----\n testInnerClasses \n-----\n\n");
  String pathToCatalog=Configuration.getPathToCatalogForTest("updateclasses.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("updateclasses.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("-- Don't care");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  try {
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=pathToCatalog;
    config.m_pathToDeployment=pathToDeployment;
    startSystem(config);
    ClientResponse resp;
    InMemoryJarfile boom=new InMemoryJarfile();
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(boom,org.voltdb_testprocs.updateclasses.InnerClassesTestProc.class);
    try {
      resp=m_client.callProcedure("@UpdateClasses",boom.getFullJarBytes(),null);
      System.out.println(((ClientResponseImpl)resp).toJSONString());
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Loading proc with inner classes should succeed");
    }
    boolean threw=false;
    boom=new InMemoryJarfile();
    comp=new VoltCompiler();
    comp.addClassToJar(boom,org.voltdb_testprocs.updateclasses.BadInnerClassesTestProc.class);
    try {
      resp=m_client.callProcedure("@UpdateClasses",boom.getFullJarBytes(),null);
      System.out.println(((ClientResponseImpl)resp).toJSONString());
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      threw=true;
    }
    assertTrue("Bad inner class should have failed",threw);
  }
  finally {
    teardownSystem();
  }
}
