{
  System.out.println("\n\n-----\n testBasic \n-----\n\n");
  String pathToCatalog=Configuration.getPathToCatalogForTest("updateclasses.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("updateclasses.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("-- Don't care");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  try {
    LocalCluster cluster=new LocalCluster("updateclasses.jar",2,1,0,BackendTarget.NATIVE_EE_JNI);
    cluster.compile(builder);
    cluster.setHasLocalServer(false);
    cluster.startUp();
    m_client=ClientFactory.createClient();
    m_client.createConnection(cluster.getListenerAddress(0));
    ClientResponse resp;
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    System.out.println("CLASSES: " + resp.getResults()[0]);
    boolean threw=false;
    try {
      resp=m_client.callProcedure("@AdHoc","create procedure from class org.voltdb_testprocs.updateclasses.testImportProc");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      threw=true;
    }
    assertTrue("Shouldn't be able to create a procedure backed by no class",threw);
    assertFalse(findProcedureInSystemCatalog("testImportProc"));
    InMemoryJarfile jarfile=new InMemoryJarfile();
    VoltCompiler comp=new VoltCompiler();
    comp.addClassToJar(jarfile,org.voltdb_testprocs.updateclasses.testImportProc.class);
    resp=m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    try {
      resp=m_client.callProcedure("@AdHoc","create procedure from class org.voltdb_testprocs.updateclasses.testImportProc");
    }
 catch (    ProcCallException pce) {
      fail("We allow procedures to be created with unsatisfied dependencies");
    }
    assertTrue(findProcedureInSystemCatalog("testImportProc"));
    threw=false;
    try {
      resp=m_client.callProcedure("testImportProc");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      assertTrue(pce.getMessage().contains("ClassNotFoundException"));
      threw=true;
    }
    assertTrue("Should return an error and not crash calling procedure w/ bad dependencies",threw);
    jarfile=new InMemoryJarfile();
    comp=new VoltCompiler();
    comp.addClassToJar(jarfile,org.voltdb_testprocs.updateclasses.NoMeaningClass.class);
    resp=m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    try {
      resp=m_client.callProcedure("testImportProc");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to call fully consistent procedure");
    }
    assertEquals(10L,resp.getResults()[0].asScalarLong());
    threw=false;
    try {
      resp=m_client.callProcedure("@UpdateClasses",null,"org.voltdb_testprocs.updateclasses.*");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      assertTrue(pce.getMessage().contains("modifying classes from catalog"));
      threw=true;
    }
    assertTrue("Shouldn't be able to rip a class out from under an active proc",threw);
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(2,resp.getResults()[0].getRowCount());
    try {
      resp=m_client.callProcedure("@AdHoc","drop procedure testImportProc");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to drop a stored procedure");
    }
    assertFalse(findProcedureInSystemCatalog("testImportProc"));
    try {
      resp=m_client.callProcedure("@UpdateClasses",null,"org.voltdb_testprocs.updateclasses.*");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to remove the classes for an inactive procedure");
    }
    resp=m_client.callProcedure("@SystemCatalog","CLASSES");
    assertEquals(0,resp.getResults()[0].getRowCount());
    m_client.close();
    cluster.shutDown();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
