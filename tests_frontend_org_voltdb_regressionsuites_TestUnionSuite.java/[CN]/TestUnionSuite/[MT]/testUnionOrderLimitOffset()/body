{
  Client client=this.getClient();
  client.callProcedure("InsertA",0,1);
  client.callProcedure("InsertB",1,1);
  client.callProcedure("InsertB",2,1);
  client.callProcedure("InsertC",1,2);
  client.callProcedure("InsertC",2,3);
  VoltTable result=client.callProcedure("@AdHoc","SELECT PKEY FROM A WHERE PKEY = 0 UNION ALL SELECT I FROM B WHERE I = 1 UNION ALL SELECT I FROM C WHERE PKEY > 0;").getResults()[0];
  assertEquals(5,result.getRowCount());
  result=client.callProcedure("@AdHoc","SELECT PKEY FROM A WHERE PKEY = 0 UNION ALL SELECT I FROM B WHERE I = 1 UNION ALL SELECT I FROM C WHERE PKEY > 0 ORDER BY PKEY DESC;").getResults()[0];
  assertEquals(5,result.getRowCount());
  assertEquals(3,result.fetchRow(0).getLong(0));
  assertEquals(0,result.fetchRow(4).getLong(0));
  result=client.callProcedure("@AdHoc","SELECT ABS(PKEY) as AP FROM A WHERE PKEY = 0 UNION ALL SELECT I FROM B WHERE I = 1 UNION ALL SELECT I FROM C WHERE PKEY > 0 ORDER BY AP DESC;").getResults()[0];
  System.out.println(result.toString());
  assertEquals(5,result.getRowCount());
  assertEquals(3,result.fetchRow(0).getLong(0));
  assertEquals(0,result.fetchRow(4).getLong(0));
  if (!isHSQL()) {
    result=client.callProcedure("@AdHoc","(SELECT PKEY FROM A WHERE PKEY = 0 UNION ALL SELECT I FROM B WHERE I = 1 UNION ALL SELECT I FROM C WHERE PKEY > 0) LIMIT 3;").getResults()[0];
    assertEquals(3,result.getRowCount());
    result=client.callProcedure("@AdHoc","SELECT PKEY FROM A UNION ALL SELECT I FROM B UNION ALL SELECT I FROM C LIMIT ?;",3).getResults()[0];
    assertEquals(3,result.getRowCount());
    result=client.callProcedure("@AdHoc","SELECT PKEY FROM A UNION ALL SELECT I FROM B UNION ALL SELECT I FROM C ORDER BY PKEY OFFSET 3;").getResults()[0];
    assertEquals(2,result.getRowCount());
    assertEquals(2,result.fetchRow(0).getLong(0));
    assertEquals(3,result.fetchRow(1).getLong(0));
    result=client.callProcedure("@AdHoc","SELECT PKEY FROM A WHERE PKEY = 0 UNION ALL SELECT I FROM B WHERE I = 1 UNION ALL SELECT I FROM C WHERE PKEY > 0 ORDER BY PKEY LIMIT 2 OFFSET 2;").getResults()[0];
    assertEquals(2,result.getRowCount());
    assertEquals(1,result.fetchRow(0).getLong(0));
    assertEquals(2,result.fetchRow(1).getLong(0));
    result=client.callProcedure("@AdHoc","SELECT PKEY FROM A UNION ALL SELECT I FROM B UNION ALL SELECT I FROM C LIMIT ? OFFSET ?;",2,2).getResults()[0];
    assertEquals(2,result.getRowCount());
    result=client.callProcedure("@AdHoc","(SELECT PKEY FROM A UNION ALL SELECT I FROM B LIMIT 1) UNION ALL SELECT I FROM C;").getResults()[0];
    assertEquals(3,result.getRowCount());
    result=client.callProcedure("@AdHoc","SELECT PKEY FROM A UNION ALL (SELECT I FROM B UNION ALL SELECT I FROM C LIMIT 1);").getResults()[0];
    assertEquals(2,result.getRowCount());
    result=client.callProcedure("@AdHoc","(SELECT PKEY FROM A UNION ALL SELECT I FROM B ORDER BY PKEY) UNION ALL SELECT I FROM C;").getResults()[0];
    assertEquals(5,result.getRowCount());
    result=client.callProcedure("@AdHoc","SELECT PKEY FROM A UNION ALL (SELECT I FROM B UNION ALL SELECT I FROM C ORDER BY I);").getResults()[0];
    assertEquals(5,result.getRowCount());
  }
  result=client.callProcedure("@Explain","SELECT PKEY FROM A WHERE PKEY = 0 UNION ALL SELECT I FROM B WHERE I = 1 UNION ALL SELECT I FROM C WHERE PKEY > 0 LIMIT 2 OFFSET 2;").getResults()[0];
  String explainPlan=result.toString();
  assertTrue(explainPlan.contains("LIMIT with parameter"));
  assertTrue(explainPlan.contains("uniquely match (PKEY = ?0)"));
  assertTrue(explainPlan.contains("filter by (column#1 = ?1)"));
  assertTrue(explainPlan.contains("range-scan covering from (PKEY > ?2)"));
}
