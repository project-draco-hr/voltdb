{
  Client client=this.getClient();
  VoltTable vt;
  client.callProcedure("InsertA",0,0);
  client.callProcedure("InsertA",1,1);
  client.callProcedure("InsertA",2,1);
  client.callProcedure("InsertB",1,0);
  client.callProcedure("InsertB",2,1);
  client.callProcedure("InsertB",3,2);
  client.callProcedure("InsertC",1,1);
  client.callProcedure("InsertC",2,2);
  client.callProcedure("InsertC",3,0);
  vt=client.callProcedure("@AdHoc","SELECT I FROM A INTERSECT SELECT I FROM B " + "INTERSECT SELECT I FROM C order by i;").getResults()[0];
  assertEquals(2,vt.getRowCount());
  validateTableOfScalarLongs(vt,new long[]{0,1});
  vt=client.callProcedure("@AdHoc","(SELECT I FROM A INTERSECT SELECT I FROM B) " + "INTERSECT SELECT I FROM C order by i;").getResults()[0];
  assertEquals(2,vt.getRowCount());
  validateTableOfScalarLongs(vt,new long[]{0,1});
  vt=client.callProcedure("@AdHoc","SELECT I FROM A INTERSECT " + "(SELECT I FROM B INTERSECT SELECT I FROM C) order by i;").getResults()[0];
  assertEquals(2,vt.getRowCount());
  validateTableOfScalarLongs(vt,new long[]{0,1});
}
