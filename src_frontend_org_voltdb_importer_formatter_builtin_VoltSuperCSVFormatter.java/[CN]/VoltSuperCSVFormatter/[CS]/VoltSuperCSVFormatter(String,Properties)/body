{
  if (!("csv".equalsIgnoreCase(formatName) || "tsv".equalsIgnoreCase(formatName))) {
    throw new IllegalArgumentException("Invalid format " + formatName + ", choices are either \"csv\" or \"tsv\".");
  }
  m_separator="csv".equalsIgnoreCase(formatName) ? ',' : '\t';
  String separatorProp=prop.getProperty("separator","").trim();
  if (!separatorProp.isEmpty() && separatorProp.length() == 1) {
    m_separator=separatorProp.charAt(0);
  }
  char quotechar=DEFAULT_QUOTE_CHAR;
  String quoteCharProp=prop.getProperty("quotechar","").trim();
  if (!quoteCharProp.isEmpty() && quoteCharProp.length() == 1) {
    quotechar=quoteCharProp.charAt(0);
  }
  m_escape=DEFAULT_ESCAPE_CHAR;
  String escapeProp=prop.getProperty("escape","").trim();
  if (!escapeProp.isEmpty() && escapeProp.length() == 1) {
    m_escape=escapeProp.charAt(0);
  }
  m_strictquotes="true".equalsIgnoreCase(prop.getProperty("strictquotes",""));
  m_surroundingSpacesNeedQuotes="true".equalsIgnoreCase(prop.getProperty("trimunquoted",""));
  m_blank=prop.getProperty("blank","").trim();
  m_customNullString=prop.getProperty("nullstring","").trim();
  if (!m_customNullString.isEmpty() && !"error".equals(m_blank)) {
    m_blank="empty";
  }
  m_nowhitespace="true".equalsIgnoreCase(prop.getProperty("nowhitespace",""));
  CsvPreference.Builder builder=new CsvPreference.Builder(quotechar,m_separator,"\n");
  if (m_surroundingSpacesNeedQuotes) {
    builder.surroundingSpacesNeedQuotes(true);
  }
  CsvPreference csvPreference=builder.build();
  m_tokenizer=new VoltCVSTokenizer(new StringReader(""),csvPreference,m_strictquotes,m_escape,DEFAULT_COLUMN_LIMIT_SIZE,0);
  m_csvReader=new CsvListReader(m_tokenizer,csvPreference);
}
