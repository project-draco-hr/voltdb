{
switch (funcType) {
case FUNC_EXTRACT:
case FUNC_TRIM_CHAR:
case FUNC_OVERLAY_CHAR:
    return super.getSQL();
case FUNC_DATABASE:
case FUNC_ISAUTOCOMMIT:
case FUNC_ISREADONLYSESSION:
case FUNC_ISREADONLYDATABASE:
case FUNC_ISREADONLYDATABASEFILES:
  return new StringBuffer(name).append(Tokens.T_OPENBRACKET).append(Tokens.T_CLOSEBRACKET).toString();
case FUNC_IDENTITY:
return new StringBuffer(Tokens.T_IDENTITY).append(Tokens.T_OPENBRACKET).append(Tokens.T_CLOSEBRACKET).toString();
case FUNC_TIMESTAMPADD:
return new StringBuffer(Tokens.T_TIMESTAMPADD).append(Tokens.T_OPENBRACKET).append(nodes[0].getSQL()).append(Tokens.T_COMMA).append(nodes[1].getSQL()).append(Tokens.T_COMMA).append(nodes[2].getSQL()).append(Tokens.T_CLOSEBRACKET).toString();
case FUNC_TIMESTAMPDIFF:
return new StringBuffer(Tokens.T_TIMESTAMPDIFF).append(Tokens.T_OPENBRACKET).append(nodes[0].getSQL()).append(Tokens.T_COMMA).append(nodes[1].getSQL()).append(Tokens.T_COMMA).append(nodes[2].getSQL()).append(Tokens.T_CLOSEBRACKET).toString();
case FUNC_TRUNCATE:
{
return new StringBuffer(Tokens.T_TRUNCATE).append('(').append(nodes[0].getSQL()).append(Tokens.T_COMMA).append(nodes[1].getSQL()).append(')').toString();
}
case FUNC_TO_CHAR:
{
return new StringBuffer(Tokens.T_TO_CHAR).append('(').append(nodes[0].getSQL()).append(Tokens.T_COMMA).append(nodes[1].getSQL()).append(')').toString();
}
case FUNC_PI:
case FUNC_RAND:
{
return new StringBuffer(name).append('(').append(')').toString();
}
case FUNC_ACOS:
case FUNC_ASIN:
case FUNC_ATAN:
case FUNC_ATAN2:
case FUNC_COS:
case FUNC_COT:
case FUNC_DEGREES:
case FUNC_SIN:
case FUNC_TAN:
case FUNC_LOG10:
case FUNC_RADIANS:
case FUNC_ROUNDMAGIC:
case FUNC_SIGN:
{
return new StringBuffer(name).append('(').append(nodes[0].getSQL()).append(')').toString();
}
case FUNC_ROUND:
{
return new StringBuffer(Tokens.ROUND).append('(').append(nodes[0].getSQL()).append(Tokens.T_COMMA).append(nodes[1].getSQL()).append(')').toString();
}
default :
return super.getSQL();
}
}
