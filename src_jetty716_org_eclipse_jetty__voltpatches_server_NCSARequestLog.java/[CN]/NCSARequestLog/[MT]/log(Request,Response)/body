{
  if (!isStarted())   return;
  try {
    if (_ignorePathMap != null && _ignorePathMap.getMatch(request.getRequestURI()) != null)     return;
    if (_fileOut == null)     return;
    Utf8StringBuilder u8buf;
    StringBuilder buf;
synchronized (_writer) {
      int size=_buffers.size();
      u8buf=size == 0 ? new Utf8StringBuilder(160) : (Utf8StringBuilder)_buffers.remove(size - 1);
      buf=u8buf.getStringBuilder();
    }
    if (_logServer) {
      buf.append(request.getServerName());
      buf.append(' ');
    }
    String addr=null;
    if (_preferProxiedForAddress) {
      addr=request.getHeader(HttpHeaders.X_FORWARDED_FOR);
    }
    if (addr == null)     addr=request.getRemoteAddr();
    buf.append(addr);
    buf.append(" - ");
    Authentication authentication=request.getAuthentication();
    if (authentication instanceof Authentication.User)     buf.append(((Authentication.User)authentication).getUserIdentity().getUserPrincipal().getName());
 else     buf.append(" - ");
    buf.append(" [");
    if (_logDateCache != null)     buf.append(_logDateCache.format(request.getTimeStamp()));
 else     buf.append(request.getTimeStampBuffer().toString());
    buf.append("] \"");
    buf.append(request.getMethod());
    buf.append(' ');
    request.getUri().writeTo(u8buf);
    buf.append(' ');
    buf.append(request.getProtocol());
    buf.append("\" ");
    if (request.getAsyncContinuation().isInitial()) {
      int status=response.getStatus();
      if (status <= 0)       status=404;
      buf.append((char)('0' + ((status / 100) % 10)));
      buf.append((char)('0' + ((status / 10) % 10)));
      buf.append((char)('0' + (status % 10)));
    }
 else     buf.append("Async");
    long responseLength=response.getContentCount();
    if (responseLength >= 0) {
      buf.append(' ');
      if (responseLength > 99999)       buf.append(responseLength);
 else {
        if (responseLength > 9999)         buf.append((char)('0' + ((responseLength / 10000) % 10)));
        if (responseLength > 999)         buf.append((char)('0' + ((responseLength / 1000) % 10)));
        if (responseLength > 99)         buf.append((char)('0' + ((responseLength / 100) % 10)));
        if (responseLength > 9)         buf.append((char)('0' + ((responseLength / 10) % 10)));
        buf.append((char)('0' + (responseLength) % 10));
      }
      buf.append(' ');
    }
 else     buf.append(" - ");
    if (!_extended && !_logCookies && !_logLatency) {
synchronized (_writer) {
        buf.append(StringUtil.__LINE_SEPARATOR);
        int l=buf.length();
        if (l > _copy.length)         l=_copy.length;
        buf.getChars(0,l,_copy,0);
        _writer.write(_copy,0,l);
        _writer.flush();
        u8buf.reset();
        _buffers.add(u8buf);
      }
    }
 else {
synchronized (_writer) {
        int l=buf.length();
        if (l > _copy.length)         l=_copy.length;
        buf.getChars(0,l,_copy,0);
        _writer.write(_copy,0,l);
        u8buf.reset();
        _buffers.add(u8buf);
        if (_extended)         logExtended(request,response,_writer);
        if (_logCookies) {
          Cookie[] cookies=request.getCookies();
          if (cookies == null || cookies.length == 0)           _writer.write(" -");
 else {
            _writer.write(" \"");
            for (int i=0; i < cookies.length; i++) {
              if (i != 0)               _writer.write(';');
              _writer.write(cookies[i].getName());
              _writer.write('=');
              _writer.write(cookies[i].getValue());
            }
            _writer.write('\"');
          }
        }
        final long now=System.currentTimeMillis();
        final long start=request.getTimeStamp();
        final long dispatch=request.getDispatchTime();
        if (_logDispatch) {
          _writer.write(' ');
          _writer.write(Long.toString(now - (dispatch == 0 ? start : dispatch)));
        }
        if (_logLatency) {
          _writer.write(' ');
          _writer.write(Long.toString(now - start));
        }
        _writer.write(StringUtil.__LINE_SEPARATOR);
        _writer.flush();
      }
    }
  }
 catch (  IOException e) {
    Log.warn(e);
  }
}
