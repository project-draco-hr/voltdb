def test_update_deployment(self):
    'ensure update deployment is working properly'
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        dep_url = ((__db_url__ + str(last_db_id)) + '/deployment/')
        json_data = {'cluster': {'hostcount': 1, 'sitesperhost': 8, 'kfactor': 0, 'elastic': 'enabled', 'schema': 'DDL', }, 'paths': {'voltdbroot': {'path': 'voltdbroot', }, 'snapshots': {'path': 'snapshots', }, 'exportoverflow': {'path': 'export_overflow', }, 'commandlog': {'path': 'command_log', }, 'commandlogsnapshot': {'path': 'command_log_snapshot', }, }, 'partition-detection': {'snapshot': {'prefix': 'voltdb_partition_detection', }, 'enabled': True, }, 'admin-mode': {'port': 21211, 'adminstartup': False, }, 'heartbeat': {'timeout': 90, }, 'httpd': {'jsonapi': {'enabled': True, }, 'port': 8080, 'enabled': True, }, 'snapshot': {'frequency': '24h', 'retain': 2, 'prefix': 'AUTOSNAP', 'enabled': False, }, 'commandlog': {'frequency': {'time': 200, 'transactions': 2147483647, }, 'synchronous': False, 'enabled': False, 'logsize': 1024, }, 'systemsettings': {'temptables': {'maxsize': 100, }, 'snapshot': {'priority': 6, }, 'elastic': {'duration': 50, 'throughput': 2, }, 'query': {'timeout': 0, }, 'resourcemonitor': {'memorylimit': {'size': '1', }, 'disklimit': {'feature': [{'name': 'SNAPSHOTS', 'size': '2', }, {'name': 'COMMANDLOG', 'size': '2', }], 'size': '10', }, 'frequency': 5, }, }, 'security': {'enabled': False, 'provider': 'HASH', }, 'export': {'configuration': [{'enabled': False, 'type': 'kafka', 'exportconnectorclass': 'test', 'stream': 'test', 'property': [{'name': 'test', 'value': 'test', }], }], }, 'import': {'configuration': [{'enabled': False, 'type': 'kafka', 'module': 'test', 'format': 'test', 'property': [{'name': 'test', 'value': 'test', }], }], }, }
        headers = {'Content-Type': 'application/json; charset=UTF-8', }
        response = requests.put(dep_url, json=json_data, headers=headers)
        value = response.json()
        self.assertEqual(value['status'], 1)
        self.assertEqual(response.status_code, 200)
