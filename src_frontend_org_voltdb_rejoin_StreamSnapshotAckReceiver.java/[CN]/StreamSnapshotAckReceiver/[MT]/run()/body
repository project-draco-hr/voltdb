{
  rejoinLog.trace("Starting ack receiver thread");
  try {
    while (true) {
      rejoinLog.trace("Blocking on receiving mailbox");
      VoltMessage msg=m_mb.recvBlocking(10 * 60 * 1000);
      if (msg == null) {
        rejoinLog.warn("No stream snapshot ack message was received in the past 10 minutes" + " or the thread was interrupted (expected eofs: " + m_expectedEOFs.get() + ")");
        continue;
      }
      if (StreamSnapshotDataTarget.m_rejoinDeathTestMode && (m_msgFactory.getAckTargetId(msg) == 1)) {
        continue;
      }
      SerializableException se=m_msgFactory.getException(msg);
      if (se != null) {
        m_lastException=se;
        rejoinLog.error("Received exception in ack receiver",se);
        return;
      }
      AckCallback ackCallback=m_callbacks.get(m_msgFactory.getAckTargetId(msg));
      if (ackCallback == null) {
        rejoinLog.error("Unknown target ID " + m_msgFactory.getAckTargetId(msg) + " in stream snapshot ack message");
      }
 else       if (m_msgFactory.getAckBlockIndex(msg) != -1) {
        ackCallback.receiveAck(m_msgFactory.getAckBlockIndex(msg));
      }
      if (m_msgFactory.isAckEOS(msg)) {
        if (m_expectedEOFs.decrementAndGet() == 0) {
          return;
        }
      }
    }
  }
 catch (  Exception e) {
    m_lastException=e;
    rejoinLog.error("Error reading a message from a recovery stream",e);
  }
 finally {
    rejoinLog.trace("Ack receiver thread exiting");
  }
}
