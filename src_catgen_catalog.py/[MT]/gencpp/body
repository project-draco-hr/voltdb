def gencpp(classes, javaOnlyClasses, prepath, postpath):
    os.system(interp('rm -rf $postpath/*', locals()))
    os.system(interp('mkdir -p $postpath/', locals()))
    os.system(interp('cp $prepath/catalog.h $postpath', locals()))
    os.system(interp('cp $prepath/catalogtype.h $postpath', locals()))
    os.system(interp('cp $prepath/catalogmap.h $postpath', locals()))
    os.system(interp('cp $prepath/catalog.cpp $postpath', locals()))
    os.system(interp('cp $prepath/catalogtype.cpp $postpath', locals()))
    for cls in reversed(classes):
        if (not cls.hasEE):
            continue
        clsname = cls.name
        actualFields = []
        for field in cls.fields:
            classType = field.type[:(-1)]
            if ((field.type[(-1)] == '*') or (field.type[(-1)] == '?')):
                if (classType in javaOnlyClasses):
                    continue
            actualFields.append(field)
        referencedClasses = []
        for field in actualFields:
            classType = field.type[:(-1)]
            if ((field.type[(-1)] == '*') or (field.type[(-1)] == '?')):
                if (classType not in referencedClasses):
                    referencedClasses.append(classType)
        if (cls.name in referencedClasses):
            referencedClasses.remove(cls.name)
        f = file((((postpath + '/') + clsname.lower()) + '.h'), 'w')
        write = writer(f)
        write(gpl_header)
        write(auto_gen_warning)
        pp_unique_str = (('CATALOG_' + clsname.upper()) + '_H_')
        write('#ifndef', pp_unique_str)
        write('#define', pp_unique_str)
        write('')
        write('#include <string>')
        write('#include "catalogtype.h"')
        write('#include "catalogmap.h"\n')
        write('namespace catalog {\n')
        for classType in referencedClasses:
            write((('class ' + classType) + ';'))
        if cls.has_comment():
            write('/**\n *', cls.comment)
            write(' */')
        write(interp('class $clsname : public CatalogType {', locals()))
        write('    friend class Catalog;')
        write(interp('    friend class CatalogMap<$clsname>;', locals()))
        write('\nprotected:')
        write((('    ' + clsname) + '(Catalog * catalog, CatalogType * parent, const std::string &path, const std::string &name);'))
        for field in actualFields:
            ftype = cpptypify(field.type)
            privname = ('m_' + field.name)
            write(interp('    $ftype $privname;', locals()))
        write('\n    virtual void update();\n')
        write('    virtual CatalogType * addChild(const std::string &collectionName, const std::string &name);')
        write('    virtual CatalogType * getChild(const std::string &collectionName, const std::string &childName) const;')
        write('    virtual bool removeChild(const std::string &collectionName, const std::string &childName);')
        write('\npublic:')
        write((('    ~' + clsname) + '();\n'))
        for field in actualFields:
            ftype = cpptypify(field.type)
            privname = ('m_' + field.name)
            pubname = field.name
            Pubname = pubname.capitalize()
            if field.has_comment():
                write('    /** GETTER:', field.comment, '*/')
            if (field.type == 'string'):
                write(interp('    const std::string & $pubname() const;', locals()))
            elif (field.type[(-1)] == '?'):
                write((((('    const ' + field.type[:(-1)]) + ' * ') + pubname) + '() const;'))
            elif (field.type[(-1)] == '*'):
                write(interp('    const $ftype & $pubname() const;', locals()))
            else:
                write(interp('    $ftype $pubname() const;', locals()))
        write('};\n')
        write('} // namespace catalog\n')
        write('#endif // ', pp_unique_str)
        f = file((((postpath + '/') + clsname.lower()) + '.cpp'), 'w')
        write = writer(f)
        write(gpl_header)
        write(auto_gen_warning)
        filename = clsname.lower()
        write('#include <cassert>')
        write(interp('#include "$filename.h"', locals()))
        write('#include "catalog.h"')
        otherhdrs = [('#include "%s.h"' % field.type[:(-1)].lower()) for field in actualFields if (field.type[(-1)] in ['*', '?'])]
        uniques = {}
        for hdr in otherhdrs:
            uniques[hdr] = hdr
        for hdr in uniques.keys():
            write(hdr)
        write('\nusing namespace catalog;')
        write('using namespace std;\n')
        mapcons = [('m_%s(catalog)' % field.name) for field in actualFields if (field.type[(-1)] == '*')]
        write(interp('$clsname::$clsname(Catalog *catalog, CatalogType *parent, const string &path, const string &name)', locals()))
        comma = ''
        if len(mapcons):
            comma = ','
        write(interp(': CatalogType(catalog, parent, path, name)$comma', locals()))
        mapcons = [('m_%s(catalog, this, path + "/" + "%s")' % (field.name, field.name)) for field in actualFields if (field.type[(-1)] == '*')]
        if (len(mapcons) > 0):
            write(('  ' + ', '.join(mapcons)))
        write('{')
        write('    CatalogValue value;')
        for field in actualFields:
            ftype = cpptypify(field.type)
            privname = ('m_' + field.name)
            pubname = field.name
            if (field.type[(-1)] == '*'):
                write(interp('    m_childCollections["$pubname"] = &$privname;', locals()))
            else:
                write(interp('    m_fields["$pubname"] = value;', locals()))
        write('}\n')
        write((((clsname + '::~') + clsname) + '() {'))
        for field in actualFields:
            if (field.type[(-1)] == '*'):
                ftype = field.type.rstrip('*')
                itr = (field.name.lower() + '_iter')
                privname = ('m_' + field.name)
                tab = '   '
                write(interp('$tab std::map<std::string, $ftype*>::const_iterator $itr = $privname.begin();', locals()))
                write(interp('$tab while ($itr != $privname.end()) {', locals()))
                write(interp('$tab $tab delete $itr->second;', locals()))
                write(interp('$tab $tab $itr++;', locals()))
                write(interp('$tab }', locals()))
                write(interp('$tab $privname.clear();\n', locals()))
        write('}\n')
        write(interp('void $clsname::update() {', locals()))
        for field in actualFields:
            ftype = cpptypify(field.type)
            privname = ('m_' + field.name)
            pubname = field.name
            if (field.type[(-1)] == '?'):
                ext = 'typeValue'
                write(interp('    $privname = m_fields["$pubname"].$ext;', locals()))
            elif (field.type[(-1)] != '*'):
                ext = 'intValue'
                if (ftype == 'std::string'):
                    ext = 'strValue.c_str()'
                write(interp('    $privname = m_fields["$pubname"].$ext;', locals()))
        write('}\n')
        write(interp('CatalogType * $clsname::addChild(const std::string &collectionName, const std::string &childName) {', locals()))
        for field in actualFields:
            if (field.type[(-1)] == '*'):
                privname = ('m_' + field.name)
                pubname = field.name
                write(interp('    if (collectionName.compare("$pubname") == 0) {', locals()))
                write(interp('        CatalogType *exists = $privname.get(childName);', locals()))
                write('        if (exists)\n            return NULL;')
                write(interp('        return $privname.add(childName);\n    }', locals()))
        write('    return NULL;\n}\n')
        write(interp('CatalogType * $clsname::getChild(const std::string &collectionName, const std::string &childName) const {', locals()))
        for field in actualFields:
            if (field.type[(-1)] == '*'):
                privname = ('m_' + field.name)
                pubname = field.name
                write(interp('    if (collectionName.compare("$pubname") == 0)', locals()))
                write(interp('        return $privname.get(childName);', locals()))
        write('    return NULL;\n}\n')
        write(interp('bool $clsname::removeChild(const std::string &collectionName, const std::string &childName) {', locals()))
        for field in actualFields:
            if (field.type[(-1)] == '*'):
                privname = ('m_' + field.name)
                pubname = field.name
                write(interp('    if (collectionName.compare("$pubname") == 0) {', locals()))
                write(interp('        return $privname.remove(childName);', locals()))
                write(interp('    }', locals()))
        write(interp('    return false;', locals()))
        write('}\n')
        for field in actualFields:
            ftype = cpptypify(field.type)
            privname = ('m_' + field.name)
            pubname = field.name
            outertype = field.type[:(-1)]
            if (field.type == 'string'):
                write(interp('const string & $clsname::$pubname() const {\n    return $privname;\n}\n', locals()))
            elif (field.type[(-1)] == '?'):
                write(interp('const $outertype * $clsname::$pubname() const {', locals()))
                write(interp('    return dynamic_cast<$outertype*>($privname);\n}\n', locals()))
            elif (field.type[(-1)] == '*'):
                write(interp('const $ftype & $clsname::$pubname() const {\n    return $privname;\n}\n', locals()))
            else:
                write(interp('$ftype $clsname::$pubname() const {\n    return $privname;\n}\n', locals()))
