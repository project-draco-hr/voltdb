{
  List<HostMessenger.Config> configs=getConfigs(2);
  HostMessenger msg1=new HostMessenger(configs.get(0),null);
  msg1.start();
  HostMessenger msg2=new HostMessenger(configs.get(1),null);
  msg2.start();
  System.out.println("Waiting for socketjoiners...");
  msg1.waitForGroupJoin(2);
  System.out.println("Finished socket joiner for msg1");
  msg2.waitForGroupJoin(2);
  System.out.println("Finished socket joiner for msg2");
  assertEquals(msg1.getHostId(),0);
  assertEquals(msg2.getHostId(),1);
  Mailbox mb1=msg1.createMailbox();
  Mailbox mb2=msg2.createMailbox();
  long siteId2=mb2.getHSId();
  MsgTest.initWithSize(16);
  MsgTest mt=new MsgTest();
  mt.setValues();
  mb1.send(siteId2,mt);
  MsgTest mt2=null;
  while (mt2 == null) {
    mt2=(MsgTest)mb2.recv();
  }
  assertTrue(mt2.verify());
  MsgTest.initWithSize(32);
  mt=new MsgTest();
  mt.setValues();
  mb1.send(siteId2,mt);
  mt2=null;
  while (mt2 == null) {
    mt2=(MsgTest)mb2.recv();
  }
  assertTrue(mt2.verify());
  for (int i=0; i < 3; ++i) {
    MsgTest.initWithSize(4280034);
    mt=new MsgTest();
    mt.setValues();
    mb1.send(siteId2,mt);
    mt2=null;
    while (mt2 == null) {
      mt2=(MsgTest)mb2.recv();
    }
    assertTrue(mt.verify());
  }
  msg1.shutdown();
  msg2.shutdown();
}
