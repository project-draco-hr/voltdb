import os
import random
import re
import subprocess
import sys
import unittest
from optparse import OptionParser
random.seed()
volt_support_version = [1, 2]
volt_verbs = {'create': 1, 'recover': 1, 'rejoin': 1, 'add': 1, 'init': 2, 'start': 2, }
volt_verbs_mapping = {'create': 'create', 'recover': 'recover', 'rejoin': 'live rejoin', 'add': 'add', 'init': 'initialize', 'start': 'probe', }
admin = Opt('admin', 'adminport', str, 1)
client = Opt('client', 'port', str, 1)
externalinterface = Opt('externalinterface', 'externalinterface', str, 1)
http = Opt('http', 'httpport', str, 1)
internal = Opt('internal', 'internalport', str, 1)
internalinterface = Opt('internalinterface', 'internalinterface', str, 1)
publicinterface = Opt('publicinterface', 'publicinterface', str, 1)
replication = Opt('replication', 'replicationport', str, 1)
zookeeper = Opt('zookeeper', 'zkport', str, 1)
deployment = Opt('deployment', 'deployment', str, 1)
force = Opt('force', 'force', None, 1)
placementgroup = Opt('placement-group', 'placementgroup', str, 1)
host = Opt('host', 'host', str, 1)
licensefile = Opt('license', 'license', str, 1)
pause = Opt('pause', 'paused', None, 1)
replica = Opt('replica', 'replica', None, 1)
blocking = Opt('blocking', '', None, 1)
mesh = Opt('host', 'mesh', str, 2)
config = Opt('config', 'deployment', str, 2)
voltdbroot = Opt('dir', 'voltdbroot', str, 2)
hostcount = Opt('count', 'hostcount', int, 2)
unknown = Opt('unknown', None, None, 0)
volt_opts = {'create': [admin, client, externalinterface, http, internal, internalinterface, publicinterface, replication, zookeeper, deployment, force, placementgroup, host, licensefile, pause, replica], 'recover': [admin, client, externalinterface, http, internal, internalinterface, publicinterface, replication, zookeeper, deployment, placementgroup, host, licensefile, pause, replica], 'rejoin': [admin, client, externalinterface, http, internal, internalinterface, publicinterface, replication, zookeeper, deployment, placementgroup, licensefile], 'add': [admin, client, externalinterface, http, internal, internalinterface, publicinterface, replication, zookeeper, deployment, placementgroup, licensefile], 'init': [config, voltdbroot, force], 'start': [admin, client, externalinterface, http, internal, internalinterface, publicinterface, replication, zookeeper, hostcount, voltdbroot, placementgroup, mesh, licensefile, pause, replica], }
volt_opts_mandatory = {'create': [], 'recover': [], 'rejoin': [host], 'add': [host], 'init': [], 'start': [], }
volt_opts_negative = [unknown]
volt_verbs_output = {'create': ' [ CATALOG ]', 'recover': '', 'rejoin': '', 'add': '', 'init': '', 'start': '', }
volt_opts_default = {'create': {placementgroup.javaname: '0', host.javaname: 'localhost:3021', }, 'recover': {placementgroup.javaname: '0', host.javaname: 'localhost:3021', }, 'rejoin': {placementgroup.javaname: '0', }, 'add': {placementgroup.javaname: '0', }, 'init': {}, 'start': {placementgroup.javaname: '0', mesh.javaname: '""', hostcount.javaname: '1', }, }
ignore = '^(Exec:|Run:) (?P<java_path>.+?)(java) (?P<java_opts>.+?) (-classpath) (?P<classpath>.+?) (org.voltdb.VoltDB)'
ignore_re = re.compile(ignore, (re.X | re.M))
volt_override = {'VOLTDB_HEAPMAX': '3072', 'VOLTDB_OPTS': '-XX:disableGCHeuristics', }
option_name = '--([\\-a-z]+)'
option_name_re = re.compile(option_name)
option_ignore = ['version', 'help', 'verbose', 'background', 'ignore', 'blocking']
if (__name__ == '__main__'):
    do_main()
