def compare_result(stdout, stderr, verb, opts, reportout, expectedOut=None, expectedErr=None):
    output_str = sanitize(stdout).strip()
    description = (('Generate java command line:\n\t' + output_str) + '\nTest Passed!\n\n')
    if expectedOut:
        haddiff = False
        if (expectedOut != stdout):
            description = ((((('Generate stdout:\n' + stdout) + '\n') + 'doest not match expected:\n') + expectedOut) + (+ '\nTest Failed!\n\n'))
            haddiff = True
        else:
            description = (('Generate expected stdout:\n' + stdout) + 'Test Passed!\n\n')
        reportout.write(description)
        return (haddiff, description)
    if expectedErr:
        haddiff = False
        if (stderr != expectedErr):
            haddiff = True
            description = ((((('Generate stderr:\n' + stderr) + '\n') + 'doest not match expected:\n') + expectedErr) + '\nTest Failed!\n\n')
        else:
            description = (('Generate expected stderr:\n' + stderr) + 'Test Passed!\n\n')
        reportout.write(description)
        return (haddiff, description)
    if (output_str.find(verb) != 0):
        description = ((((('Generate java command line:\n\t' + output_str) + '\n') + 'does not contain expected verb:\n') + verb) + '\nTest Failed!\n\n')
        reportout.write(description)
        return (True, description)
    output_tokens = output_str.lstrip(verb).split()
    expected_tokens = []
    for (k, v) in opts.items():
        if v:
            expected_tokens.extend([k, v])
        else:
            expected_tokens.append(k)
    if (set(output_tokens) != set(expected_tokens)):
        description = ((((('Generate java command line:\n\t' + output_str) + '\n') + 'does not match expected options:\n') + ' '.join(expected_tokens)) + '\nTest Failed!\n\n')
        reportout.write(description)
        return (True, description)
    reportout.write(description)
    return (False, description)
