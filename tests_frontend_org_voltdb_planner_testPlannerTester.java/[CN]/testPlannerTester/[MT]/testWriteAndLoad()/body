{
  AbstractPlanNode pn=null;
  plannerTester.setUpForTest(m_currentDir + "tests/frontend/org/voltdb/planner/testplans-plannerTester-ddl.sql","testplans-plannerTester-ddl");
  List<AbstractPlanNode> pnList=plannerTester.testCompile("select * from l, t where t.a=l.a limit ?;");
  System.out.println(pnList.size());
  assert(pnList.get(1) instanceof SendPlanNode);
  pnList.get(0).reattachFragment((SendPlanNode)pnList.get(1));
  pn=pnList.get(0);
  System.out.println(pn.toJSONString());
  System.out.println(pn.toExplainPlanString());
  plannerTester.writePlanToFile(pn,m_homeDir,"prettyJson.txt","");
  ArrayList<String> getsql=new ArrayList<String>();
  AbstractPlanNode pn2=plannerTester.loadPlanFromFile(m_homeDir + "prettyJson.txt",getsql);
  System.out.println(pn2.toExplainPlanString());
  ArrayList<AbstractPlanNode> list1=pn.getPlanNodeList();
  ArrayList<AbstractPlanNode> list2=pn2.getPlanNodeList();
  assertTrue(list1.size() == list2.size());
  for (int i=0; i < list1.size(); i++) {
    Map<PlanNodeType,AbstractPlanNode> inlineNodes1=list1.get(i).getInlinePlanNodes();
    Map<PlanNodeType,AbstractPlanNode> inlineNodes2=list2.get(i).getInlinePlanNodes();
    if (inlineNodes1 != null) {
      assertTrue(inlineNodes1.size() == inlineNodes2.size());
    }
  }
}
