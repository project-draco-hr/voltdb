{
  int[] rowCounts;
  DefaultMutableTreeNode propertiesNode;
  DefaultMutableTreeNode tableNode;
  DecimalFormat DECFMT=new DecimalFormat(" ( ####,###,####,##0 )");
  while (treeModel.getChildCount(rootNode) > 0) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)treeModel.getChild(rootNode,0);
    treeModel.removeNodeFromParent(child);
    child.removeAllChildren();
    child.removeFromParent();
  }
  treeModel.nodeStructureChanged(rootNode);
  treeModel.reload();
  tScrollPane.repaint();
  ResultSet result=null;
  try {
    rootNode.setUserObject(dMeta.getURL());
    result=dMeta.getTables(null,null,null,(showSys ? usertables : nonSystables));
    Vector tables=new Vector();
    Vector schemas=new Vector();
    Vector remarks=new Vector();
    String schema;
    while (result.next()) {
      schema=result.getString(2);
      if ((!showSys) && isOracle && oracleSysUsers.contains(schema)) {
        continue;
      }
      if (schemaFilter == null || schema.equals(schemaFilter)) {
        schemas.addElement(schema);
        tables.addElement(result.getString(3));
        remarks.addElement(result.getString(5));
        continue;
      }
    }
    result.close();
    result=null;
    rowCounts=new int[tables.size()];
    try {
      rowCounts=getRowCounts(tables,schemas);
    }
 catch (    Exception e) {
      CommonSwing.errorMessage(e);
    }
    ResultSet col;
    for (int i=0; i < tables.size(); i++) {
      col=null;
      String name;
      try {
        name=(String)tables.elementAt(i);
        if (isOracle && name.startsWith("BIN$")) {
          continue;
        }
        schema=(String)schemas.elementAt(i);
        String schemaname="";
        if (schema != null && showSchemas) {
          schemaname=schema + '.';
        }
        String rowcount=displayRowCounts ? (" " + DECFMT.format(rowCounts[i])) : "";
        String displayedName=schemaname + name + rowcount;
        tableNode=makeNode(displayedName,rootNode);
        col=dMeta.getColumns(null,schema,name,null);
        if ((schema != null) && !schema.trim().equals("")) {
          makeNode(schema,tableNode);
        }
        String remark=(String)remarks.elementAt(i);
        if ((remark != null) && !remark.trim().equals("")) {
          makeNode(remark,tableNode);
        }
        while (col.next()) {
          String c=col.getString(4);
          DefaultMutableTreeNode columnNode=makeNode(c,tableNode);
          String type=col.getString(6);
          makeNode("Type: " + type,columnNode);
          boolean nullable=col.getInt(11) != DatabaseMetaData.columnNoNulls;
          makeNode("Nullable: " + nullable,columnNode);
        }
      }
  finally {
        if (col != null) {
          try {
            col.close();
          }
 catch (          SQLException se) {
          }
        }
      }
      DefaultMutableTreeNode indexesNode=makeNode("Indices",tableNode);
      if (showIndexDetails) {
        ResultSet ind=null;
        try {
          ind=dMeta.getIndexInfo(null,schema,name,false,false);
          String oldiname=null;
          DefaultMutableTreeNode indexNode=null;
          while (ind.next()) {
            boolean nonunique=ind.getBoolean(4);
            String iname=ind.getString(6);
            if ((oldiname == null || !oldiname.equals(iname))) {
              indexNode=makeNode(iname,indexesNode);
              makeNode("Unique: " + !nonunique,indexNode);
              oldiname=iname;
            }
            makeNode(ind.getString(9),indexNode);
          }
        }
 catch (        SQLException se) {
          if (se.getMessage() == null || ((!se.getMessage().startsWith("ORA-25191:")) && (!se.getMessage().startsWith("ORA-01702:")) && !se.getMessage().startsWith("ORA-01031:"))) {
            throw se;
          }
        }
 finally {
          if (ind != null) {
            ind.close();
            ind=null;
          }
        }
      }
    }
    propertiesNode=makeNode("Properties",rootNode);
    makeNode("User: " + dMeta.getUserName(),propertiesNode);
    makeNode("ReadOnly: " + cConn.isReadOnly(),propertiesNode);
    makeNode("AutoCommit: " + cConn.getAutoCommit(),propertiesNode);
    makeNode("Driver: " + dMeta.getDriverName(),propertiesNode);
    makeNode("Product: " + dMeta.getDatabaseProductName(),propertiesNode);
    makeNode("Version: " + dMeta.getDatabaseProductVersion(),propertiesNode);
  }
 catch (  SQLException se) {
    propertiesNode=makeNode("Error getting metadata:",rootNode);
    makeNode(se.getMessage(),propertiesNode);
    makeNode(se.getSQLState(),propertiesNode);
    CommonSwing.errorMessage(se);
  }
 finally {
    if (result != null) {
      try {
        result.close();
      }
 catch (      SQLException se) {
      }
    }
  }
  treeModel.nodeStructureChanged(rootNode);
  treeModel.reload();
  tScrollPane.repaint();
  updateSchemaList();
}
