{
  JMenu jmenu;
  JMenuItem mitem;
  try {
    prefs=new DBMPrefs(fMain instanceof JApplet);
  }
 catch (  Exception e) {
    System.err.println("Failed to load preferences.  Proceeding with defaults:\n");
  }
  if (prefs == null) {
    setLF(CommonSwing.Native);
  }
 else {
    autoRefresh=prefs.autoRefresh;
    displayRowCounts=prefs.showRowCounts;
    showSys=prefs.showSysTables;
    showSchemas=prefs.showSchemas;
    gridFormat=prefs.resultGrid;
    showTooltips=prefs.showTooltips;
    setLF(prefs.laf);
  }
  fMain.getContentPane().add(createToolBar(),"North");
  if (fMain instanceof java.awt.Frame) {
    ((java.awt.Frame)fMain).setIconImage(CommonSwing.getIcon("Frame"));
  }
  if (fMain instanceof java.awt.Window) {
    ((java.awt.Window)fMain).addWindowListener(this);
  }
  JMenuBar bar=new JMenuBar();
  String[] fitems={"-Connect...","--","OOpen Script...","-Save Script...","-Save Result...","--","-Exit"};
  jmenu=addMenu(bar,"File",fitems);
  for (int i=2; i < jmenu.getItemCount(); i++) {
    mitem=jmenu.getItem(i);
    if (mitem != null) {
      localActionList.add(mitem);
    }
  }
  Object[] vitems={"RRefresh Tree",boxAutoRefresh,"--",boxRowCounts,boxShowSys,boxShowSchemas,boxShowGrid};
  addMenu(bar,"View",vitems);
  String[] sitems={"SSELECT","IINSERT","UUPDATE","DDELETE","EEXECUTE","---","-CREATE TABLE","-DROP TABLE","-CREATE INDEX","-DROP INDEX","--","CCOMMIT*","LROLLBACK*","-CHECKPOINT*","-SCRIPT","-SET","-SHUTDOWN","--","-Test Script"};
  addMenu(bar,"Command",sitems);
  mRecent=new JMenu("Recent");
  mRecent.setMnemonic(KeyEvent.VK_R);
  bar.add(mRecent);
  ButtonGroup lfGroup=new ButtonGroup();
  lfGroup.add(rbNativeLF);
  lfGroup.add(rbJavaLF);
  lfGroup.add(rbMotifLF);
  boxShowSchemas.setSelected(showSchemas);
  boxShowGrid.setSelected(gridFormat);
  boxTooltips.setSelected(showTooltips);
  boxShowGrid.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G,Event.CTRL_MASK));
  boxAutoRefresh.setSelected(autoRefresh);
  boxRowCounts.setSelected(displayRowCounts);
  boxShowSys.setSelected(showSys);
  rbNativeLF.setActionCommand("LFMODE:" + CommonSwing.Native);
  rbJavaLF.setActionCommand("LFMODE:" + CommonSwing.Java);
  rbMotifLF.setActionCommand("LFMODE:" + CommonSwing.Motif);
  tipMap.put(mitemUpdateSchemas,"Refresh the schema list in this menu");
  tipMap.put(rbAllSchemas,"Display items in all schemas");
  tipMap.put(mitemAbout,"Display product information");
  tipMap.put(mitemHelp,"Display advice for obtaining help");
  tipMap.put(boxAutoRefresh,"Refresh tree (and schema list) automatically" + "when YOU modify database objects");
  tipMap.put(boxShowSchemas,"Display object names in tree like schemaname.basename");
  tipMap.put(rbNativeLF,"Set Look and Feel to Native for your platform");
  tipMap.put(rbJavaLF,"Set Look and Feel to Java");
  tipMap.put(rbMotifLF,"Set Look and Feel to Motif");
  boxTooltips.setToolTipText("Display tooltips (hover text), like this");
  tipMap.put(boxAutoCommit,"Shows current Auto-commit mode.  Click to change");
  tipMap.put(boxLogging,"Shows current JDBC DriverManager logging mode.  Click to change");
  tipMap.put(boxShowSys,"Show system tables in table tree to the left");
  tipMap.put(boxShowGrid,"Show query results in grid (in text if off)");
  tipMap.put(boxRowCounts,"Show row counts with table names in tree");
  boxAutoRefresh.setMnemonic(KeyEvent.VK_C);
  boxShowSchemas.setMnemonic(KeyEvent.VK_Y);
  boxAutoCommit.setMnemonic(KeyEvent.VK_A);
  boxShowSys.setMnemonic(KeyEvent.VK_Y);
  boxShowGrid.setMnemonic(KeyEvent.VK_G);
  boxRowCounts.setMnemonic(KeyEvent.VK_C);
  boxLogging.setMnemonic(KeyEvent.VK_L);
  rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);
  rbNativeLF.setMnemonic(KeyEvent.VK_N);
  rbJavaLF.setMnemonic(KeyEvent.VK_J);
  rbMotifLF.setMnemonic(KeyEvent.VK_M);
  mitemUpdateSchemas.setMnemonic(KeyEvent.VK_U);
  Object[] soptions={rbNativeLF,rbJavaLF,rbMotifLF,"--","-Set Fonts","--",boxAutoCommit,"--","-Disable MaxRows","-Set MaxRows to 100","--",boxLogging,"--","-Insert test data"};
  addMenu(bar,"Options",soptions);
  String[] stools={"-Dump","-Restore","-Transfer"};
  jmenu=addMenu(bar,"Tools",stools);
  jmenu.setEnabled(TT_AVAILABLE);
  localActionList.add(jmenu);
  for (int i=0; i < jmenu.getItemCount(); i++) {
    mitem=jmenu.getItem(i);
    if (mitem != null) {
      localActionList.add(mitem);
    }
  }
  mnuSchemas.setMnemonic(KeyEvent.VK_S);
  bar.add(mnuSchemas);
  JMenu mnuHelp=new JMenu("Help");
  mnuHelp.setMnemonic(KeyEvent.VK_H);
  mnuHelp.add(mitemAbout);
  mnuHelp.add(mitemHelp);
  mnuHelp.add(boxTooltips);
  rbAllSchemas.addActionListener(schemaListListener);
  mitemUpdateSchemas.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionevent){
      updateSchemaList();
    }
  }
);
  mitemHelp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionevent){
      JOptionPane.showMessageDialog(fMain.getContentPane(),HELP_TEXT,"HELP",JOptionPane.INFORMATION_MESSAGE);
    }
  }
);
  mitemAbout.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionevent){
      JOptionPane.showMessageDialog(fMain.getContentPane(),ABOUT_TEXT,"About",JOptionPane.INFORMATION_MESSAGE);
    }
  }
);
  boxTooltips.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionevent){
      showTooltips=boxTooltips.isSelected();
      resetTooltips();
    }
  }
);
  bar.add(mnuHelp);
  if (fMain instanceof JApplet) {
    ((JApplet)fMain).setJMenuBar(bar);
  }
 else   if (fMain instanceof JFrame) {
    ((JFrame)fMain).setJMenuBar(bar);
  }
  initGUI();
  sRecent=new String[iMaxRecent];
  if (!(fMain instanceof JApplet)) {
    CommonSwing.setFramePositon((JFrame)fMain);
  }
  ((Component)fMain).setVisible(true);
  if (defScript != null) {
    if (defDirectory != null) {
      defScript=defDirectory + File.separator + defScript;
    }
    sqlScriptBuffer=DatabaseManagerCommon.readFile(defScript);
    if (4096 <= sqlScriptBuffer.length()) {
      int eoThirdLine=sqlScriptBuffer.indexOf('\n');
      if (eoThirdLine > 0) {
        eoThirdLine=sqlScriptBuffer.indexOf('\n',eoThirdLine + 1);
      }
      if (eoThirdLine > 0) {
        eoThirdLine=sqlScriptBuffer.indexOf('\n',eoThirdLine + 1);
      }
      if (eoThirdLine < 1) {
        eoThirdLine=100;
      }
      txtCommand.setText("............... Script File loaded: " + defScript + " ..................... \n"+ "............... Click Execute or Clear "+ "...................\n"+ sqlScriptBuffer.substring(0,eoThirdLine + 1)+ "..........................................."+ "..............................\n"+ "............................................."+ "............................\n");
      txtCommand.setEnabled(false);
    }
 else {
      txtCommand.setText(sqlScriptBuffer);
      sqlScriptBuffer=null;
      txtCommand.setEnabled(true);
    }
  }
  resetTooltips();
  txtCommand.requestFocus();
}
