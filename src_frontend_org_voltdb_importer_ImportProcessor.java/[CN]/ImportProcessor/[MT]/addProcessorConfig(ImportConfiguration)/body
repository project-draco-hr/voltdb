{
  Properties properties=config.getmoduleProperties();
  String module=properties.getProperty(ImportDataProcessor.IMPORT_MODULE);
  String attrs[]=module.split("\\|");
  String bundleJar=attrs[1];
  String moduleType=attrs[0];
  Formatter<?> formatter=config.getFormatter();
  try {
    BundleWrapper wrapper=m_bundles.get(bundleJar);
    if (wrapper == null) {
      if (moduleType.equalsIgnoreCase("osgi")) {
        Bundle bundle=m_framework.getBundleContext().installBundle(bundleJar);
        bundle.start();
        ServiceReference refs[]=bundle.getRegisteredServices();
        ServiceReference reference=refs[0];
        if (reference == null) {
          m_logger.error("Failed to initialize importer from: " + bundleJar);
          bundle.stop();
          return;
        }
        Object o=bundle.getBundleContext().getService(reference);
        wrapper=new BundleWrapper(o,bundle);
      }
 else {
        Class reference=this.getClass().getClassLoader().loadClass(bundleJar);
        if (reference == null) {
          m_logger.error("Failed to initialize importer from: " + bundleJar);
          return;
        }
        wrapper=new BundleWrapper(reference.newInstance(),null);
      }
      String name=wrapper.getImporterType();
      if (name == null || name.trim().length() == 0) {
        throw new RuntimeException("Importer must implement and return a valid unique name.");
      }
      Preconditions.checkState(!m_bundlesByName.containsKey(name),"Importer must implement and return a valid unique name: " + name);
      wrapper.configure(properties,formatter);
      m_bundlesByName.put(name,wrapper);
      m_bundles.put(bundleJar,wrapper);
    }
 else {
      wrapper.configure(properties,formatter);
    }
  }
 catch (  Throwable t) {
    m_logger.error("Failed to configure import handler for " + bundleJar,t);
    Throwables.propagate(t);
  }
}
