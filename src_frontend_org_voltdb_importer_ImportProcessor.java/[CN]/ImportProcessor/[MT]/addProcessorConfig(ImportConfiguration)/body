{
  Properties properties=config.getmoduleProperties();
  String module=properties.getProperty(ImportDataProcessor.IMPORT_MODULE);
  String attrs[]=module.split("\\|");
  String bundleJar=attrs[1];
  String moduleType=attrs[0];
  FormatterBuilder formatterBuilder=config.getFormatterBuilder();
  try {
    ModuleWrapper wrapper=m_bundles.get(bundleJar);
    if (wrapper == null) {
      if (moduleType.equalsIgnoreCase("osgi")) {
        URI bundleURI=URI.create(bundleJar);
        AbstractImporterFactory importerFactory=m_moduleManager.getService(bundleURI,AbstractImporterFactory.class);
        if (importerFactory == null) {
          m_logger.error("Failed to initialize importer from: " + bundleJar);
          return;
        }
        wrapper=new ModuleWrapper(importerFactory,bundleURI);
      }
 else {
        Class<?> reference=this.getClass().getClassLoader().loadClass(bundleJar);
        if (reference == null) {
          m_logger.error("Failed to initialize importer from: " + bundleJar);
          return;
        }
        AbstractImporterFactory importerFactory=(AbstractImporterFactory)reference.newInstance();
        wrapper=new ModuleWrapper(importerFactory,null);
      }
      String name=wrapper.getImporterType();
      if (name == null || name.trim().length() == 0) {
        throw new RuntimeException("Importer must implement and return a valid unique name.");
      }
      Preconditions.checkState(!m_bundlesByName.containsKey(name),"Importer must implement and return a valid unique name: " + name);
      m_bundlesByName.put(name,wrapper);
      m_bundles.put(bundleJar,wrapper);
    }
    wrapper.configure(properties,formatterBuilder);
  }
 catch (  Throwable t) {
    m_logger.error("Failed to configure import handler for " + bundleJar,t);
    Throwables.propagate(t);
  }
}
