{
  int good_rows=10;
  int null_rows=5;
  String[] aggs={"sum","min","max","avg"};
  long[] expected_int_results={(0 + 1 + 2+ 3+ 4) * 2,0,4,2};
  double[] expected_float_results={(0 + 0.5 + 1+ 1.5+ 2+ 2.5+ 3+ 3.5+ 4+ 4.5),0.0,4.5,2.25};
  String[] tables={"P1","R1"};
  for (  String table : tables) {
    Client client=getClient();
    for (int i=0; i < good_rows; ++i) {
      client.callProcedure("Insert",table,i,"desc",new BigDecimal(i / 2.0),i / 2,i / 2.0);
    }
    for (int i=good_rows; i < good_rows + null_rows; ++i) {
      client.callProcedure("Insert",table,i,VoltType.NULL_STRING,VoltType.NULL_DECIMAL,VoltType.NULL_INTEGER,VoltType.NULL_FLOAT);
    }
    String query=String.format("select count(%s.CASH) from %s",table,table);
    VoltTable[] results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(good_rows,results[0].asScalarLong());
    query=String.format("select count(%s.NUM) from %s",table,table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(good_rows,results[0].asScalarLong());
    query=String.format("select count(%s.RATIO) from %s",table,table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(good_rows,results[0].asScalarLong());
    for (int i=0; i < aggs.length; ++i) {
      query=String.format("select %s(%s.CASH) from %s",aggs[i],table,table);
      results=client.callProcedure("@AdHoc",query).getResults();
      results[0].advanceRow();
      assertEquals(expected_float_results[i],results[0].getDecimalAsBigDecimal(0).doubleValue());
      query=String.format("select %s(%s.NUM) from %s",aggs[i],table,table);
      results=client.callProcedure("@AdHoc",query).getResults();
      assertEquals(expected_int_results[i],results[0].asScalarLong());
      query=String.format("select %s(%s.RATIO) from %s",aggs[i],table,table);
      results=client.callProcedure("@AdHoc",query).getResults();
      results[0].advanceRow();
      assertEquals(expected_float_results[i],results[0].getDouble(0));
    }
    query=String.format("select count(*) from %s",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    results[0].advanceRow();
    assertEquals(good_rows + null_rows,results[0].asScalarLong());
  }
}
