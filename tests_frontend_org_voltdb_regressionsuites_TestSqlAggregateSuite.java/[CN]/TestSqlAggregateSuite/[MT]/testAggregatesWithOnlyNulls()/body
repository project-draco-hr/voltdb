{
  int null_rows=5;
  String[] aggs={"sum","min","max","avg"};
  String[] tables={"P1","R1"};
  for (  String table : tables) {
    Client client=getClient();
    for (int i=0; i < null_rows; ++i) {
      client.callProcedure("Insert",table,i,VoltType.NULL_STRING_OR_VARBINARY,VoltType.NULL_DECIMAL,VoltType.NULL_INTEGER,VoltType.NULL_FLOAT);
    }
    String query=String.format("select count(%s.CASH) from %s",table,table);
    VoltTable[] results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(0,results[0].asScalarLong());
    query=String.format("select count(%s.NUM) from %s",table,table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(0,results[0].asScalarLong());
    query=String.format("select count(%s.RATIO) from %s",table,table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(0,results[0].asScalarLong());
    for (int i=0; i < aggs.length; ++i) {
      query=String.format("select %s(%s.CASH) from %s",aggs[i],table,table);
      results=client.callProcedure("@AdHoc",query).getResults();
      results[0].advanceRow();
      @SuppressWarnings("unused") BigDecimal dec_val=results[0].getDecimalAsBigDecimal(0);
      assert(results[0].wasNull());
      query=String.format("select %s(%s.NUM) from %s",aggs[i],table,table);
      results=client.callProcedure("@AdHoc",query).getResults();
      results[0].advanceRow();
      @SuppressWarnings("unused") long long_val=results[0].getLong(0);
      assert(results[0].wasNull());
      query=String.format("select %s(%s.RATIO) from %s",aggs[i],table,table);
      results=client.callProcedure("@AdHoc",query).getResults();
      results[0].advanceRow();
      @SuppressWarnings("unused") double doub_val=results[0].getDouble(0);
      assert(results[0].wasNull());
    }
    query=String.format("select count(*) from %s",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    results[0].advanceRow();
    assertEquals(null_rows,results[0].asScalarLong());
  }
}
