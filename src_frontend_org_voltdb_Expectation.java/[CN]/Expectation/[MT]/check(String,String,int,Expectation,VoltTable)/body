{
  if (expectation == null)   return;
  assert(table != null);
  int rowCount=table.getRowCount();
switch (expectation.m_type) {
case EXPECT_EMPTY:
    if (rowCount != 0) {
      fail(procedureName,stmtName,batchIndex,String.format("Expected one row, but got %d",rowCount));
    }
  return;
case EXPECT_ONE_ROW:
if (rowCount != 1) {
  fail(procedureName,stmtName,batchIndex,String.format("Expected one row, but got %d",rowCount));
}
return;
case EXPECT_ZERO_OR_ONE_ROW:
if (rowCount > 1) {
fail(procedureName,stmtName,batchIndex,String.format("Expected zero or one rows, but got %d",rowCount));
}
return;
case EXPECT_NON_EMPTY:
if (rowCount == 0) {
fail(procedureName,stmtName,batchIndex,String.format("Expected zero rows, but got %d",rowCount));
}
return;
case EXPECT_SCALAR:
if (checkScalar(table) == false) {
fail(procedureName,stmtName,batchIndex,"Expected scalar value");
}
return;
case EXPECT_SCALAR_LONG:
if (checkScalarLong(table) == false) {
fail(procedureName,stmtName,batchIndex,"Expected scalar long value");
}
return;
case EXPECT_SCALAR_MATCH:
if (checkScalarLong(table) == false) {
fail(procedureName,stmtName,batchIndex,"Expected scalar long value");
}
if (table.asScalarLong() != expectation.m_scalar) {
fail(procedureName,stmtName,batchIndex,String.format("Expected scalar %d, but got %d",expectation.m_scalar,table.asScalarLong()));
}
return;
}
}
