{
  PartitionByPlanNode pn=new PartitionByPlanNode();
  addPartitionByExpressions(pn);
  addSortExpressions(pn);
  JSONStringer stringer=new JSONStringer();
  stringer.object();
  try {
    pn.toJSONString(stringer);
    stringer.endObject();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
  String json=stringer.toString();
  JSONObject jobj=new JSONObject(new JSONTokener(json));
  PartitionByPlanNode pn2=new PartitionByPlanNode();
  pn2.loadFromJSONObject(jobj,m_voltdb.getDatabase());
  assertEquals(pn.numberSortExpressions(),pn2.numberSortExpressions());
  for (int idx=0; idx < pn2.numberSortExpressions(); idx+=1) {
    assertEquals(pn2.getSortExpression(idx),pn.getSortExpression(idx));
    assertEquals(pn2.getSortDirection(idx),pn.getSortDirection(idx));
  }
  assertEquals(SortDirectionType.ASC,pn.getSortDirection(0));
  assertEquals(SortDirectionType.DESC,pn.getSortDirection(1));
  assertEquals(VoltType.FLOAT,pn.getSortExpression(0).getValueType());
  assertEquals(8,pn.getSortExpression(0).getValueSize());
  assertEquals(ExpressionType.VALUE_TUPLE,pn.getSortExpression(0).getExpressionType());
  assertEquals(VoltType.INTEGER,pn.getSortExpression(1).getValueType());
  assertEquals(4,pn.getSortExpression(1).getValueSize());
  assertEquals(ExpressionType.VALUE_TUPLE,pn.getSortExpression(1).getExpressionType());
}
