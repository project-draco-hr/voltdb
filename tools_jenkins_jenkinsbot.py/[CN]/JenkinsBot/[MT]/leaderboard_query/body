def leaderboard_query(self, jobs, days=30):
    "\n        This constructs a completed leaderboard query which doesn't need parameters. Returns () for parameters\n        :param jobs: The jobs to coalesce into a leaderboard\n        :param days: Number of days to go back in query\n        :return: A completed leaderboard query for the jobs and empty params\n        "
    jobs_filter = map((lambda j: ((('job=' + '"') + j) + '"')), jobs)
    job_params = ' OR '.join(jobs_filter)
    job_params = (('(' + job_params) + ')')
    junit_leaderboard_query = (((("\n          SELECT job AS 'Job name',\n                 name AS 'Test name',\n                 fails AS 'Fails',\n                 total AS 'Total',\n                 fails/total*100. AS 'Fail %',\n                 latest AS 'Latest failure'\n            FROM\n                (\n                   SELECT job,\n                          name,\n                          COUNT(*) AS fails,\n                          (\n                           SELECT COUNT(*)\n                             FROM `junit-builds` AS jb\n                            WHERE jb.name = tf.job AND\n                                  NOW() - INTERVAL 30 DAY <= jb.stamp\n                          ) AS total,\n                          MAX(tf.stamp) AS latest\n                     FROM `junit-test-failures` AS tf\n                    WHERE NOT status='FIXED' AND\n                          " + job_params) + ' AND\n                          NOW() - INTERVAL ') + str(days)) + ' DAY <= tf.stamp\n                 GROUP BY job,\n                          name,\n                          total\n                ) AS intermediate\n        ORDER BY 6 DESC\n        ')
    return junit_leaderboard_query
