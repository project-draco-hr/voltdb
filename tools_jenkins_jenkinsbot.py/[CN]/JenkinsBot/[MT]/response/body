def response(self, tables, channels, filename, vertical=False, edit=False, log=''):
    '\n        Respond to a file to a channel\n        :param tables: List of (header, rows) tuples i.e. tables to construct leaderboards from\n        :param channels: The channels to post this file to\n        :param filename: The filename to respond with\n        :param vertical: Whether a vertical version of the table should be included\n        :param edit: Whether the row entries should be edited\n        :param log: Message prepended to the response\n        '
    filecontent = ''
    for (i, table) in enumerate(tables):
        if (len(table) != 2):
            continue
        headers = table[0]
        rows = table[1]
        content = ''
        if vertical:
            content = ('\n\n*Vertical Leaderboard*:\n\n' + self.vertical_leaderboard(rows, headers))
        if edit:
            n = (i + 1)
            suffix = {1: 'st', 2: 'nd', 3: 'rd', }.get((n if (n < 20) else (n % 10)), 'th')
            log += ('\n*Names in %d%s table might be shortened to fit on screen*' % (n, suffix))
            self.edit_rows(rows)
        content = (tabulate(rows, headers) + content)
        filecontent = (filecontent + content)
    filecontent = ((log + '\n\n') + filecontent)
    self.client.api_call('files.upload', channels=channels, content=filecontent, filetype='text', filename=filename)
