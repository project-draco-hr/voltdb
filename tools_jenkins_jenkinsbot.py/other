import logging
import os
import sys
import time
import mysql.connector
from jira import JIRA
from logging import handlers
from mysql.connector.errors import Error as MySQLError
from slackclient import SlackClient
from tabulate import tabulate
COMMUNITY = os.environ.get('community', None)
PRO = os.environ.get('pro', None)
VDM = os.environ.get('vdm', None)
MEMVALDEBUG = os.environ.get('memvaldebug', None)
DEBUG = os.environ.get('debug', None)
MEMVAL = os.environ.get('memval', None)
FULLMEMCHECK = os.environ.get('fullmemcheck', None)
ADMIN_CHANNEL = os.environ.get('admin', None)
GENERAL_CHANNEL = os.environ.get('general', None)
RANDOM_CHANNEL = os.environ.get('random', None)
JUNIT = os.environ.get('junit', None)
JIRA_USER = os.environ.get('jirauser', None)
JIRA_PASS = os.environ.get('jirapass', None)
JIRA_PROJECT = os.environ.get('jiraproject', None)
TL_QUERY = "\n  SELECT tf.name AS 'Test name',\n         COUNT(*) AS 'Failures'\n    FROM `junit-test-failures` AS tf\n   WHERE NOT tf.status='FIXED' AND\n         tf.build >= %(beginning)s AND\n         tf.job=%(job)s\nGROUP BY tf.name\nORDER BY 2 DESC\n"
D_QUERY = "\n  SELECT tf.name AS 'Test name',\n         COUNT(*) AS 'Failures'\n    FROM `junit-test-failures` AS tf\n   WHERE NOT tf.status='FIXED' AND\n         NOW() - INTERVAL %(days)s DAY <= tf.stamp AND\n         tf.job=%(job)s\nGROUP BY tf.name\nORDER BY 2 DESC\n"
BR_QUERY = "\n    SELECT tf.name AS 'Test name',\n           COUNT(*) AS 'Number of failures in this build range'\n      FROM `junit-test-failures` AS tf\nINNER JOIN `junit-builds` AS jr\n        ON NOT tf.status='FIXED' AND\n           jr.name=tf.job AND\n           jr.build=tf.build AND\n           jr.name=%(job)s AND\n           %(build_low)s <= jr.build AND\n           jr.build <= %(build_high)s\n  GROUP BY tf.name,\n           tf.job\n  ORDER BY 2 DESC\n"
TOM_QUERY = "\n    SELECT MAX(tf.build) AS 'Most recent failure on master',\n           MAX(jr.build) AS 'Most recent build on master'\n      FROM `junit-test-failures` AS tf\nINNER JOIN `junit-builds` AS jr\n        ON NOT tf.status='FIXED' AND\n           jr.name=tf.job AND\n           tf.name=%(test)s AND\n           jr.name=%(job)s\n"
AF_QUERY = "\n  SELECT tf.name AS 'Test name',\n         tf.build AS 'Build',\n         tf.stamp AS 'Time'\n    FROM `junit-test-failures` AS tf\n   WHERE NOT STATUS='FIXED' AND\n         tf.job=%(job)s\nORDER BY 2 DESC\n"
AA_QUERY = '\n    INSERT INTO `jenkinsbot-user-aliases`\n                (slack_user_id, command, alias)\n         VALUES (%(slack_user_id)s, %(command)s, %(alias)s)\n'
GA_QUERY = '\n    SELECT command\n      FROM `jenkinsbot-user-aliases`\n     WHERE alias=%(alias)s AND\n           slack_user_id=%(slack_user_id)s\n'
SL_QUERY = "\n  SELECT job_name AS 'Job name',\n         workload AS 'Workload',\n         fails AS 'Fails',\n         total AS 'Total',\n         fails/total*100. AS 'Fail %',\n         latest AS 'Latest'\n    FROM\n        (\n           SELECT job_name,\n                  workload,\n                  COUNT(*) AS fails,\n                  (\n                   SELECT COUNT(*)\n                     FROM `apprunnerfailures` AS run\n                    WHERE NOW() - INTERVAL 30 DAY <= run.datetime AND\n                          run.job_name=failure.job_name AND\n                          run.workload=failure.workload AND\n                          run.branch_name=failure.branch_name\n                  ) AS total,\n                  MAX(failure.datetime) AS latest\n            FROM `apprunnerfailures` AS failure\n            WHERE NOW() - INTERVAL 30 DAY <= datetime AND\n                  result='FAIL' AND\n                  failure.branch_name='master'\n         GROUP BY job_name,\n                  workload\n        ) AS intermediate\nGROUP BY 6 DESC\n"
if (__name__ == '__main__'):
    jenkinsbot = JenkinsBot()
    help_text = '\n            usage: jenkinsbot <listen|master|core|system>\n                   listen - bring jenkinsbot online (do not use if already running)\n                   master - post the master branch junit leaderboard on Slack\n                   core - post the core extended junit leaderboard on Slack\n                   system - post the master systems test leaderboard on Slack\n            '
    if (jenkinsbot.connect_to_slack() and (len(sys.argv) == 2)):
        if (sys.argv[1] == 'listen'):
            jenkinsbot.listen()
        elif (sys.argv[1] == 'master'):
            jobs = [PRO, COMMUNITY, VDM]
            (query, params) = jenkinsbot.leaderboard_query(jobs, days=30)
            jenkinsbot.query_and_response(query, params, [JUNIT], 'master-past30days.txt', vertical=True, edit=True)
        elif (sys.argv[1] == 'core'):
            jobs = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]
            (query, params) = jenkinsbot.leaderboard_query(jobs, days=2)
            jenkinsbot.query_and_response(query, params, [JUNIT], 'coreextended-past2days.txt', vertical=True, edit=True)
        elif (sys.argv[1] == 'system'):
            jenkinsbot.query_and_response(SL_QUERY, (), [JUNIT], 'systems-master-past30days.txt', vertical=True)
        else:
            print help_text
    else:
        print help_text
