{
  System.out.println("STARTING testAbs");
  Client client=getClient();
  ProcedureCallback callback=new ProcedureCallback(){
    @Override public void clientCallback(    ClientResponse clientResponse) throws Exception {
      if (clientResponse.getStatus() != ClientResponse.SUCCESS) {
        throw new RuntimeException("Failed with response: " + clientResponse.getStatusString());
      }
    }
  }
;
  for (int id=8; id < 11; id++) {
  }
  client.callProcedure(callback,"P1.insert",1,"??????V"," NB",10);
  client.callProcedure(callback,"P1.insert",2,"Xin"," @Volt",10);
  ClientResponse cr=null;
  VoltTable r=null;
  cr=client.callProcedure("RIGHT",0,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[RIGHT- 0] result:\n" + r);
  cr=client.callProcedure("RIGHT",1,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[RIGHT- 1] result:\n" + r);
  cr=client.callProcedure("RIGHT",2,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[RIGHT- 2] result:\n" + r);
  cr=client.callProcedure("RIGHT",3,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[RIGHT- 3] result:\n" + r);
  cr=client.callProcedure("LEFT",-10,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT- -1] result:\n" + r);
  cr=client.callProcedure("LEFT",0,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-0] result:\n" + r);
  cr=client.callProcedure("LEFT",1,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-1] result:\n" + r);
  cr=client.callProcedure("LEFT",2,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-2] result:\n" + r);
  cr=client.callProcedure("LEFT",3,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-3] result:\n" + r);
  cr=client.callProcedure("LEFT",4,1);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-4] result:\n" + r);
  cr=client.callProcedure("LEFT",0,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-0] result:\n" + r);
  cr=client.callProcedure("LEFT",1,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-1] result:\n" + r);
  cr=client.callProcedure("LEFT",2,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-2] result:\n" + r);
  cr=client.callProcedure("LEFT",3,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-3] result:\n" + r);
  cr=client.callProcedure("LEFT",4,2);
  assertEquals(ClientResponse.SUCCESS,cr.getStatus());
  r=cr.getResults()[0];
  System.err.println("[LEFT-4] result:\n" + r);
}
