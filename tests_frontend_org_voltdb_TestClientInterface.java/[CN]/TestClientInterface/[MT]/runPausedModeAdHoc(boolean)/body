{
  when(m_volt.getMode()).thenReturn(OperationMode.PAUSED);
  responses.clear();
  String query="select * from A";
  ByteBuffer msg=createMsg("@AdHoc",query);
  ClientResponseImpl resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNull(resp);
  AdHocPlannedStmtBatch plannedStmt=AdHocPlannedStmtBatch.mockStatementBatch(0,query,null,new VoltType[]{},null,-1,m_context.getCatalogHash());
  plannedStmt.clientData=m_cxn;
  m_ci.getDispatcher().processFinishedCompilerWork(plannedStmt).run();
  assertEquals(0,responses.size());
  query="insert into A values (10)";
  msg=createMsg("@AdHoc",query);
  resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNull(resp);
  plannedStmt=AdHocPlannedStmtBatch.mockStatementBatch(0,query,null,new VoltType[]{},null,-1,m_context.getCatalogHash(),false,isAdmin);
  plannedStmt.clientData=m_cxn;
  m_ci.getDispatcher().processFinishedCompilerWork(plannedStmt).run();
  if (isAdmin) {
    assertEquals(0,responses.size());
  }
 else {
    assertEquals(1,responses.size());
    ByteBuffer buf=responses.remove();
    resp=new ClientResponseImpl();
    buf.position(4);
    resp.initFromBuffer(buf);
    assertEquals(ClientResponse.SERVER_UNAVAILABLE,resp.getStatus());
  }
  when(m_volt.getMode()).thenReturn(OperationMode.RUNNING);
}
