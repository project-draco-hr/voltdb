{
  ByteBuffer msg=createMsg("@GetPartitionKeys",99);
  ClientResponseImpl resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNotNull(resp);
  assertEquals(ClientResponse.GRACEFUL_FAILURE,resp.getStatus());
  msg=createMsg("@GetPartitionKeys");
  resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNotNull(resp);
  assertEquals(ClientResponse.GRACEFUL_FAILURE,resp.getStatus());
  msg=createMsg("@GetPartitionKeys",99,99);
  resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNotNull(resp);
  assertEquals(ClientResponse.GRACEFUL_FAILURE,resp.getStatus());
  msg=createMsg("@GetPartitionKeys",6);
  resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNotNull(resp);
  assertEquals(ClientResponse.GRACEFUL_FAILURE,resp.getStatus());
  msg=createMsg("@GetPartitionKeys",5);
  resp=m_ci.handleRead(msg,m_handler,m_cxn);
  assertNotNull(resp);
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  VoltTable vt=resp.getResults()[0];
  assertEquals(3,vt.getRowCount());
  assertEquals(VoltType.INTEGER,vt.getColumnType(1));
  Set<Integer> partitions=new HashSet<Integer>(Arrays.asList(0,1,2));
  while (vt.advanceRow()) {
    int partition=TheHashinator.getPartitionForParameter(VoltType.INTEGER.getValue(),vt.getLong(1));
    assertTrue(partitions.remove(partition));
  }
  assertTrue(partitions.isEmpty());
}
