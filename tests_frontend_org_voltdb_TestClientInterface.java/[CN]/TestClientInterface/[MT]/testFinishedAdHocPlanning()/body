{
  when(m_initiator.createTransaction(anyLong(),anyString(),anyBoolean(),any(StoredProcedureInvocation.class),anyBoolean(),anyBoolean(),anyBoolean(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong())).thenReturn(true);
  AdHocPlannedStmtBatch plannedStmtBatch=new AdHocPlannedStmtBatch("select * from a",null,0,0,0,"localhost",false,null);
  plannedStmtBatch.addStatement("select * from a",null,null,false);
  m_mb.deliver(new LocalObjectMessage(plannedStmtBatch));
  m_ci.checkForFinishedCompilerWork();
  ArgumentCaptor<Boolean> boolCaptor=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<StoredProcedureInvocation> invocationCaptor=ArgumentCaptor.forClass(StoredProcedureInvocation.class);
  verify(m_initiator).createTransaction(anyLong(),anyString(),boolCaptor.capture(),invocationCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong());
  List<Boolean> boolValues=boolCaptor.getAllValues();
  assertFalse(boolValues.get(0));
  assertFalse(boolValues.get(1));
  assertFalse(boolValues.get(2));
  assertFalse(boolValues.get(3));
  assertEquals("@AdHocReadOnly",invocationCaptor.getValue().getProcName());
  String[] sqlStatements=(String[])invocationCaptor.getValue().getParameterAtIndex(2);
  assertNotNull(sqlStatements);
  assertEquals(1,sqlStatements.length);
  assertEquals("select * from a",sqlStatements[0]);
}
