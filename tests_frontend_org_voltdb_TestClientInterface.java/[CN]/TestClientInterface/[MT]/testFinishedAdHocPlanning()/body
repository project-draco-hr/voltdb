{
  when(m_initiator.createTransaction(anyLong(),anyString(),anyBoolean(),any(StoredProcedureInvocation.class),anyBoolean(),anyBoolean(),anyBoolean(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong(),anyBoolean())).thenReturn(true);
  AdHocPlannedStmtBatch plannedStmtBatch=new AdHocPlannedStmtBatch("select * from a",null,0,0,"localhost",false,null);
  AdHocPlannedStatement s=new AdHocPlannedStatement("select * from a".getBytes(VoltDB.UTF8ENCODING),new CorePlan(new byte[0],new byte[0],false,false,true,new VoltType[0],0),new ParameterSet(),null);
  plannedStmtBatch.addStatement(s);
  m_ci.processFinishedCompilerWork(plannedStmtBatch).run();
  ArgumentCaptor<Boolean> boolCaptor=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<StoredProcedureInvocation> invocationCaptor=ArgumentCaptor.forClass(StoredProcedureInvocation.class);
  verify(m_initiator).createTransaction(anyLong(),anyString(),boolCaptor.capture(),invocationCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong(),boolCaptor.capture());
  List<Boolean> boolValues=boolCaptor.getAllValues();
  assertFalse(boolValues.get(0));
  assertTrue(boolValues.get(1));
  assertFalse(boolValues.get(2));
  assertFalse(boolValues.get(3));
  assertEquals("@AdHoc_RO_MP",invocationCaptor.getValue().getProcName());
  byte[] serializedData=(byte[])invocationCaptor.getValue().getParameterAtIndex(0);
  AdHocPlannedStatement[] statements=AdHocPlannedStmtBatch.planArrayFromBuffer(ByteBuffer.wrap(serializedData));
  assertEquals(1,statements.length);
  String sql=new String(statements[0].sql,VoltDB.UTF8ENCODING);
  assertEquals("select * from a",sql);
}
