{
  when(m_initiator.createTransaction(anyLong(),anyString(),anyBoolean(),any(StoredProcedureInvocation.class),anyBoolean(),anyBoolean(),anyBoolean(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong())).thenReturn(true);
  AdHocPlannedStmt plannedStmt=new AdHocPlannedStmt();
  plannedStmt.catalogVersion=0;
  plannedStmt.clientHandle=0;
  plannedStmt.connectionId=0;
  plannedStmt.hostname="localhost";
  plannedStmt.adminConnection=false;
  plannedStmt.clientData=null;
  plannedStmt.aggregatorFragment=null;
  plannedStmt.collectorFragment=null;
  plannedStmt.isReplicatedTableDML=false;
  plannedStmt.sql="select * from a";
  plannedStmt.partitionParam=null;
  m_mb.deliver(new LocalObjectMessage(plannedStmt));
  m_ci.checkForFinishedCompilerWork();
  ArgumentCaptor<Boolean> boolCaptor=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<StoredProcedureInvocation> invocationCaptor=ArgumentCaptor.forClass(StoredProcedureInvocation.class);
  verify(m_initiator).createTransaction(anyLong(),anyString(),boolCaptor.capture(),invocationCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong());
  List<Boolean> boolValues=boolCaptor.getAllValues();
  assertFalse(boolValues.get(0));
  assertFalse(boolValues.get(1));
  assertFalse(boolValues.get(2));
  assertFalse(boolValues.get(3));
  assertEquals("@AdHoc",invocationCaptor.getValue().getProcName());
  assertEquals("select * from a",invocationCaptor.getValue().getParameterAtIndex(2));
}
