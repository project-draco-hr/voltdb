{
  when(m_initiator.createTransaction(anyLong(),anyString(),anyBoolean(),any(StoredProcedureInvocation.class),anyBoolean(),anyBoolean(),anyBoolean(),any(int[].class),anyInt(),anyObject(),anyInt(),anyLong())).thenReturn(true);
  ClientResponseImpl resp=m_ci.handleRead(msg,m_handler,null);
  assertNull(resp);
  ArgumentCaptor<Boolean> boolCaptor=ArgumentCaptor.forClass(Boolean.class);
  ArgumentCaptor<StoredProcedureInvocation> invocationCaptor=ArgumentCaptor.forClass(StoredProcedureInvocation.class);
  ArgumentCaptor<int[]> partitionCaptor=ArgumentCaptor.forClass(int[].class);
  verify(m_initiator).createTransaction(anyLong(),anyString(),boolCaptor.capture(),invocationCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),boolCaptor.capture(),partitionCaptor.capture(),anyInt(),anyObject(),anyInt(),anyLong());
  List<Boolean> boolValues=boolCaptor.getAllValues();
  assertEquals(isAdmin,boolValues.get(0));
  assertEquals(isReadonly,boolValues.get(1));
  assertEquals(isSinglePart,boolValues.get(2));
  assertEquals(isEverySite,boolValues.get(3));
  assertEquals(procName,invocationCaptor.getValue().getProcName());
  if (isSinglePart) {
    int expected=TheHashinator.hashToPartition(partitionParam);
    assertEquals(1,partitionCaptor.getValue().length);
    assertEquals(expected,partitionCaptor.getValue()[0]);
  }
 else {
    assertEquals(m_allPartitions,partitionCaptor.getValue());
  }
  return invocationCaptor.getValue();
}
