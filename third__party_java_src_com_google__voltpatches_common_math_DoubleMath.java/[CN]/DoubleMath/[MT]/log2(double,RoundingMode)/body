{
  checkArgument(x > 0.0 && isFinite(x),"x must be positive and finite");
  int exponent=getExponent(x);
  if (!isNormal(x)) {
    return log2(x * IMPLICIT_BIT,mode) - SIGNIFICAND_BITS;
  }
  boolean increment;
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(isPowerOfTwo(x));
case FLOOR:
  increment=false;
break;
case CEILING:
increment=!isPowerOfTwo(x);
break;
case DOWN:
increment=exponent < 0 & !isPowerOfTwo(x);
break;
case UP:
increment=exponent >= 0 & !isPowerOfTwo(x);
break;
case HALF_DOWN:
case HALF_EVEN:
case HALF_UP:
double xScaled=scaleNormalize(x);
increment=(xScaled * xScaled) > 2.0;
break;
default :
throw new AssertionError();
}
return increment ? exponent + 1 : exponent;
}
