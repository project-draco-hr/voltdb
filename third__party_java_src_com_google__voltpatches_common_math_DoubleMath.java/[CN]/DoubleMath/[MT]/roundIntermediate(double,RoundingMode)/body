{
  if (!isFinite(x)) {
    throw new ArithmeticException("input is infinite or NaN");
  }
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(isMathematicalInteger(x));
  return x;
case FLOOR:
if (x >= 0.0 || isMathematicalInteger(x)) {
  return x;
}
 else {
  return x - 1.0;
}
case CEILING:
if (x <= 0.0 || isMathematicalInteger(x)) {
return x;
}
 else {
return x + 1.0;
}
case DOWN:
return x;
case UP:
if (isMathematicalInteger(x)) {
return x;
}
 else {
return x + Math.copySign(1.0,x);
}
case HALF_EVEN:
return rint(x);
case HALF_UP:
{
double z=rint(x);
if (abs(x - z) == 0.5) {
return x + copySign(0.5,x);
}
 else {
return z;
}
}
case HALF_DOWN:
{
double z=rint(x);
if (abs(x - z) == 0.5) {
return x;
}
 else {
return z;
}
}
default :
throw new AssertionError();
}
}
