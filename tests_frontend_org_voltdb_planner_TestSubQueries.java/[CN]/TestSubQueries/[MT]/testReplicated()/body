{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  AbstractPlanNode nlpn;
  planNodes=compileToFragments("select T1.A, P1.C FROM (SELECT A FROM R1) T1, P1 " + "WHERE T1.A = P1.C AND P1.A = 3 ");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"R1","A");
  pn=nlpn.getChild(1);
  checkPrimaryKeySubSelect(pn,"P1","A","C");
  planNodes=compileToFragments("select T1.A FROM (SELECT A FROM R1) T1, P1 " + "WHERE T1.A = P1.A AND P1.A = 3 ");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"R1","A");
  pn=nlpn.getChild(1);
  checkPrimaryKeySubSelect(pn,"P1","A");
  planNodes=compileToFragments("select T1.A FROM (SELECT A FROM R1) T1, P1 " + "WHERE T1.A = P1.A AND T1.A = 3 ");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"R1","A");
  pn=nlpn.getChild(1);
  checkPrimaryKeySubSelect(pn,"P1","A");
  planNodes=compileToFragments("select T1.A, P1.C FROM (SELECT A FROM R1) T1, P1 " + "WHERE T1.A = P1.C ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  System.out.println(pn.toExplainPlanString());
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"R1","A");
  pn=nlpn.getChild(1);
  assertTrue(pn instanceof SeqScanPlanNode);
  planNodes=compileToFragments("select T1.A, P1.A FROM (SELECT A FROM R1) T1, P1, P2 " + "WHERE P2.A = P1.A and T1.A = P1.C ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  pn=nlpn.getChild(1);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"R1","A");
  nlpn=nlpn.getChild(0);
  assertTrue(nlpn instanceof NestLoopIndexPlanNode);
  pn=nlpn.getChild(0);
  checkSeqScanSubSelects(pn,"P1","A","C");
  assertEquals(nlpn.getInlinePlanNodes().size(),1);
  pn=nlpn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  checkPrimaryKeySubSelect(pn,"P2","A");
}
