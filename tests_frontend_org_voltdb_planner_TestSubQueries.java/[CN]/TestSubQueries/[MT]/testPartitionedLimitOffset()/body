{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  AbstractPlanNode nlpn;
  planNodes=compileToFragments("SELECT -8, T1.NUM " + "FROM SR4 T0, (select RATIO, NUM, DESC from SP4 order by DESC, NUM, RATIO limit 1 offset 1) T1 " + "WHERE (T1.NUM + 5 ) > 44");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.INNER,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"SR4");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T1","NUM");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"SP4");
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 LIMIT 3) T1 " + "where T1.A = 1 ");
  assertEquals(2,planNodes.size());
}
