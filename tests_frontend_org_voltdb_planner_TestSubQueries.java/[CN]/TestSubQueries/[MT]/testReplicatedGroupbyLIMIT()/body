{
  AbstractPlanNode pn;
  pn=compile("select A, C FROM (SELECT * FROM R1 WHERE A > 3 Limit 3) T1 ");
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","A","C");
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A","C","D");
  checkPredicateComparisonExpression(pn,"R1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),2);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.LIMIT));
  pn=compile("select A, SUM(D) FROM (SELECT A, D FROM R1 WHERE A > 3 Limit 3 ) T1 Group by A");
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A","D");
  checkPredicateComparisonExpression(pn,"R1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),2);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.LIMIT));
  pn=compile("select A, SUM(D) FROM (SELECT A, D FROM R1 WHERE A > 3 ORDER BY D Limit 3 ) T1 Group by A");
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A","D");
  checkPredicateComparisonExpression(pn,"R1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  AbstractPlanNode aggNode;
  pn=compile("select A, SUM(D) FROM (SELECT A, D FROM R1 WHERE A > 3 ORDER BY D Limit 3 ) T1 Group by A HAVING SUM(D) < 3");
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  aggNode=pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE);
  assertNotNull(((HashAggregatePlanNode)aggNode).getPostPredicate());
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A","D");
  checkPredicateComparisonExpression(pn,"R1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=compile("select A, SUM(D)*COUNT(*) FROM (SELECT A, D FROM R1 WHERE A > 3 ORDER BY D Limit 3 ) T1 Group by A HAVING SUM(D) < 3");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  aggNode=pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE);
  assertNotNull(((HashAggregatePlanNode)aggNode).getPostPredicate());
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A","D");
  checkPredicateComparisonExpression(pn,"R1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=compile("select A, SUM(D) FROM (SELECT A, D FROM R1 WHERE A > 3 ORDER BY D Limit 3 ) T1 Group by A HAVING AVG(D) < 3");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  aggNode=pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE);
  assertNotNull(((HashAggregatePlanNode)aggNode).getPostPredicate());
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A","D");
  checkPredicateComparisonExpression(pn,"R1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=compile("select A FROM (SELECT A, SUM(C) FROM R1 WHERE A > 3 GROUP BY A ORDER BY A Limit 3) T1 ");
  pn=pn.getChild(0);
  assertTrue(pn instanceof SeqScanPlanNode);
  checkSeqScan(pn,"T1","A");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  assertTrue(pn instanceof SeqScanPlanNode);
  checkSeqScan(pn,"R1");
  pn=compile("select SC, SUM(A) as SA FROM (SELECT A, SUM(C) as SC, MAX(D) as MD FROM R1 " + "WHERE A > 3 GROUP BY A ORDER BY A Limit 3) T1  " + "Group by SC");
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  assertTrue(pn instanceof SeqScanPlanNode);
  checkSeqScan(pn,"T1");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof LimitPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof OrderByPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE) != null);
  assertTrue(pn instanceof SeqScanPlanNode);
  checkSeqScan(pn,"R1");
}
