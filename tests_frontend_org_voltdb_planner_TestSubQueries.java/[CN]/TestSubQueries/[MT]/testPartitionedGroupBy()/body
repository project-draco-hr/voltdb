{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  AbstractPlanNode nlpn;
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 GROUP BY A, C) T1 " + "where T1.A = 1 ");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","A","C");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 WHERE A = 1 GROUP BY A, C) T1");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","A","C");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM R1 GROUP BY A, C) T1, P1 " + "where T1.A = P1.A ");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopIndexPlanNode);
  assertEquals(JoinType.INNER,((NestLoopIndexPlanNode)nlpn).getJoinType());
  pn=nlpn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  checkPrimaryKeyIndexScan(pn,"P1");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  planNodes=compileToFragments("SELECT -8, T1.NUM FROM SR4 T0, " + "(select max(RATIO) RATIO, sum(NUM) NUM, DESC from SP4 group by DESC) T1 " + "WHERE (T1.NUM + 5 ) > 44");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.INNER,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"SR4");
  pn=nlpn.getChild(1);
  checkSeqScan(pn,"T1","NUM");
  pn=pn.getChild(0);
  assertTrue(pn instanceof AggregatePlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  checkPrimaryKeyIndexScan(pn,"SP4");
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopIndexPlanNode);
  assertEquals(JoinType.INNER,((NestLoopIndexPlanNode)nlpn).getJoinType());
  pn=nlpn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  checkPrimaryKeyIndexScan(pn,"P2");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  planNodes=compileToFragments("SELECT * FROM (SELECT A, COUNT(*) CT FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A");
  assertEquals(2,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1);
  assertTrue(pn instanceof SendPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopIndexPlanNode);
  assertEquals(JoinType.INNER,((NestLoopIndexPlanNode)nlpn).getJoinType());
  pn=nlpn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  checkPrimaryKeyIndexScan(pn,"P2");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 WHERE A = 3 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A ");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopIndexPlanNode);
  assertEquals(JoinType.INNER,((NestLoopIndexPlanNode)nlpn).getJoinType());
  pn=nlpn.getInlinePlanNode(PlanNodeType.INDEXSCAN);
  checkPrimaryKeyIndexScan(pn,"P2");
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.HASHAGGREGATE));
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A and P2.A = 3");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.INNER,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  pn=nlpn.getChild(1);
  checkPrimaryKeyIndexScan(pn,"P2");
  planNodes=compileToFragments("SELECT * FROM (SELECT A, C FROM P1 GROUP BY A, C) T1, P2 " + "where T1.A = P2.A and T1.A = 3");
  assertEquals(1,planNodes.size());
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  nlpn=pn.getChild(0);
  assertTrue(nlpn instanceof NestLoopPlanNode);
  assertEquals(JoinType.INNER,((NestLoopPlanNode)nlpn).getJoinType());
  pn=nlpn.getChild(0);
  checkSeqScan(pn,"T1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  pn=pn.getChild(0);
  checkPrimaryKeyIndexScan(pn,"P1");
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PROJECTION));
  assertNotNull(pn.getInlinePlanNode(PlanNodeType.PARTIALAGGREGATE));
  pn=nlpn.getChild(1);
  checkPrimaryKeyIndexScan(pn,"P2");
}
