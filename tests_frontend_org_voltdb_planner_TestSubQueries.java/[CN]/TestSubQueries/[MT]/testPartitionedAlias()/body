{
  List<AbstractPlanNode> planNodes;
  planNodes=compileToFragments("SELECT * FROM P1 X, P2 Y where X.A = Y.A");
  assertEquals(2,planNodes.size());
  planNodes=compileToFragments("SELECT * FROM " + "   (select P1.A P1A, P2.A P2A from P1, P2 where p1.a=p2.a and p1.a = 1) T1," + "   P3, P4 "+ "WHERE P3.A = P4.A and T1.P1A = P3.A");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("SELECT * FROM " + "   (select P1.A P1A, P2.A P2A from P1, P2 where p1.a=p2.a and p1.a = 1) T1," + "   P3, P4 "+ "WHERE P3.A = P4.A and T1.P1A = P4.A");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("SELECT * FROM " + "   (select P1.A P1A, P2.A P2A from P1, P2 where p1.a=p2.a and p1.a = 1) T1," + "   P3, P4 "+ "WHERE T1.P1A = P4.A and T1.P1A = P3.A");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("SELECT * FROM " + "   (select P1.A P1A, P2.A P2A from P1, P2 where p1.a=p2.a and p1.a = 1) T1," + "   P3, P4 "+ "WHERE T1.P2A = P4.A and T1.P2A = P3.A");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("SELECT * FROM " + "   (select P1.A P1A, P2.A P2A from P1, P2 where p1.a=p2.a and p1.a = 1) T1," + "   P3, P4 "+ "WHERE P3.A = P4.A and T1.P2A = P3.A");
  assertEquals(1,planNodes.size());
  planNodes=compileToFragments("SELECT * FROM " + "   (select P1.A P1A, P2.A P2A from P1, P2 where p1.a=p2.a and p1.a = 1) T1," + "   P3 X, P4 Y "+ "WHERE X.A = Y.A and T1.P1A = X.A");
  assertEquals(1,planNodes.size());
}
