{
  AbstractPlanNode pn;
  String tbName="T1";
  pn=compile("select A, C FROM (SELECT A, C FROM R1) T1");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A","C");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C");
  pn=compile("select A, C FROM (SELECT A, C FROM R1) T1 WHERE A > 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A","C");
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C");
  pn=compile("select A, C FROM (SELECT A, C FROM R1) T1 WHERE T1.A < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A","C");
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C");
  pn=compile("select A1, C1 FROM (SELECT A A1, C C1 FROM R1) T1 WHERE T1.A1 < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A1","C1");
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C");
  pn=compile("select C1 FROM (SELECT A A1, C C1 FROM R1) T1 WHERE T1.A1 < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"C1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C");
  pn=compile("select C1 FROM (SELECT A+3 A1, C C1 FROM R1) T1 WHERE T1.A1 < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"C1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A1","C");
  pn=compile("select C1 FROM (SELECT A+3, C C1 FROM R1) T1 WHERE T1.C1 < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"C1");
  assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((SeqScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","C1","C");
  pn=compile("select A, C FROM (SELECT * FROM R1) T1 WHERE T1.A < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A","C");
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C","D");
  pn=compile("select * FROM (SELECT A, D FROM R1) T1 WHERE T1.A < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A","D");
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","D");
  pn=compile("select A, C FROM (SELECT * FROM R1 where D > 3) T1 WHERE T1.A < 0");
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,tbName,"A","C");
  checkPredicateComparisonExpression(pn,tbName);
  pn=pn.getChild(0);
  checkSimpleSubSelects(pn,"R1","A","C","D");
}
