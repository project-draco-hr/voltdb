{
  AbstractPlanNode pn;
  for (int i=0; i < tableAliases.length; i++) {
    String alias=tableAliases[i];
    String colRef=columnRefs[i];
    String tbName=fromTables[i];
    pn=compile("select A, C FROM (SELECT A, C FROM R1) " + alias);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"A","C");
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","C");
    pn=compile("select A, C FROM (SELECT A, C FROM R1) " + alias + " WHERE A > 0");
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"A","C");
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","C");
    pn=compile(String.format("select A, C FROM (SELECT A, C FROM R1) %s WHERE %sA < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"A","C");
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","C");
    pn=compile(String.format("select A1, C1 FROM (SELECT A A1, C C1 FROM R1) %s WHERE %sA1 < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"A1","C1");
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","C");
    pn=compile(String.format("select C1 FROM (SELECT A A1, C C1 FROM R1) %s WHERE %sA1 < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"C1");
    assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","C");
    pn=compile(String.format("select C1 FROM (SELECT A+3 A1, C C1 FROM R1) %s WHERE %sA1 < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"C1");
    assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A1","C");
    pn=compile(String.format("select C1 FROM (SELECT A+3, C C1 FROM R1) %s WHERE %sC1 < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"C1");
    assertEquals(((SeqScanPlanNode)pn).getInlinePlanNodes().size(),1);
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","C1","C");
    pn=compile(String.format("select A, C FROM (SELECT * FROM R1) %s WHERE %sA < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"A","C");
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","C","D");
    pn=compile(String.format("select * FROM (SELECT A, D FROM R1) %s WHERE %sA < 0",alias,colRef));
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,tbName,"A","D");
    checkPredicateComparisonExpression(pn,tbName);
    pn=pn.getChild(0);
    checkSimpleSubSelects(pn,"R1","A","D");
  }
}
