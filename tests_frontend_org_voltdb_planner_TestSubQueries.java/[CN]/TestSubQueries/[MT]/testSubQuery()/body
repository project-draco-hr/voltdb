{
{
    AbstractPlanNode pn=compile("select A, C FROM (SELECT A, C FROM R1) TEMP WHERE TEMP.A > 0");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertTrue(p != null);
    assertTrue(p instanceof ComparisonExpression);
    p=p.getLeft();
    assertTrue(p instanceof TupleValueExpression);
    assertEquals("TEMP",((TupleValueExpression)p).getTableAlias());
    assertTrue(pn.getChildCount() == 1);
    assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
    NodeSchema ns=pn.getOutputSchema();
    String columns[]={"A","C"};
    List<SchemaColumn> scs=ns.getColumns();
    for (int i=0; i < scs.size(); ++i) {
      SchemaColumn col=scs.get(i);
      assertEquals(columns[i],col.getColumnName());
      assertEquals(4,col.getSize());
      assertEquals(VoltType.INTEGER,col.getType());
      assertTrue(col.getExpression() instanceof TupleValueExpression);
      assertTrue(((TupleValueExpression)col.getExpression()).getColumnIndex() != -1);
    }
  }
{
    AbstractPlanNode pn=compile("select A1, C1 FROM (SELECT A A1, C C1 FROM R1) TEMP WHERE TEMP.A1 > 0");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    NodeSchema ns=pn.getOutputSchema();
    String columns[]={"A1","C1"};
    List<SchemaColumn> scs=ns.getColumns();
    for (int i=0; i < scs.size(); ++i) {
      SchemaColumn col=scs.get(i);
      assertEquals(columns[i],col.getColumnName());
      assertEquals(4,col.getSize());
      assertEquals(VoltType.INTEGER,col.getType());
      assertTrue(col.getExpression() instanceof TupleValueExpression);
      assertTrue(((TupleValueExpression)col.getExpression()).getColumnIndex() != -1);
    }
  }
{
    AbstractPlanNode pn=compile("select A2 FROM (SELECT A1 AS A2 FROM (SELECT A AS A1 FROM R1) TEMP1 WHERE TEMP1.A1 > 0) TEMP2 WHERE TEMP2.A2 = 3");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    NodeSchema ns=pn.getOutputSchema();
    String columns[]={"A2"};
    List<SchemaColumn> scs=ns.getColumns();
    for (int i=0; i < scs.size(); ++i) {
      SchemaColumn col=scs.get(i);
      assertEquals(columns[i],col.getColumnName());
      assertEquals(4,col.getSize());
      assertEquals(VoltType.INTEGER,col.getType());
      assertTrue(col.getExpression() instanceof TupleValueExpression);
      assertTrue(((TupleValueExpression)col.getExpression()).getColumnIndex() != -1);
    }
  }
}
