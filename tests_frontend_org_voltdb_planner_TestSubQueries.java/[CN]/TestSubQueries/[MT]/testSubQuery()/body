{
{
    AbstractPlanNode pn=compile("select A, C FROM (SELECT A, C FROM R1) TEMP WHERE TEMP.A > 0");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertTrue(p != null);
    assertTrue(p instanceof ComparisonExpression);
    p=p.getLeft();
    assertTrue(p instanceof TupleValueExpression);
    assertEquals("TEMP",((TupleValueExpression)p).getTableAlias());
    assertTrue(pn.getChildCount() == 1);
    assertTrue(pn.getChild(0) instanceof SeqScanPlanNode);
    verifyOutputSchema(pn,"A","C");
  }
{
    AbstractPlanNode pn=compile("select A1, C1 FROM (SELECT A A1, C C1 FROM R1) TEMP WHERE TEMP.A1 > 0");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    verifyOutputSchema(pn,"A1","C1");
  }
{
    AbstractPlanNode pn=compile("select A2 FROM (SELECT A1 AS A2 FROM (SELECT A AS A1 FROM R1) TEMP1 WHERE TEMP1.A1 > 0) TEMP2 WHERE TEMP2.A2 = 3");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    verifyOutputSchema(pn,"A2");
  }
{
    AbstractPlanNode pn=compile("select A, C FROM (SELECT A FROM R1) TEMP1, (SELECT C FROM R2) TEMP2 WHERE A = C");
    pn=pn.getChild(0).getChild(0);
    assertTrue(pn instanceof NestLoopPlanNode);
    verifyOutputSchema(pn,"A","C");
  }
{
    AbstractPlanNode pn=compile("select ABS(C1) FROM (SELECT A A1, C C1 FROM R1) TEMP WHERE ABS(TEMP.A1) > 3");
    pn=pn.getChild(0);
    assertTrue(pn instanceof SeqScanPlanNode);
    SchemaColumn col=pn.getOutputSchema().getColumns().get(0);
    assertEquals(4,col.getSize());
    assertEquals(VoltType.INTEGER,col.getType());
    verifyFunctionExpr(col.getExpression());
    AbstractExpression p=((SeqScanPlanNode)pn).getPredicate();
    assertTrue(p != null);
    assertTrue(p instanceof ComparisonExpression);
    p=p.getLeft();
    verifyFunctionExpr(p);
  }
}
