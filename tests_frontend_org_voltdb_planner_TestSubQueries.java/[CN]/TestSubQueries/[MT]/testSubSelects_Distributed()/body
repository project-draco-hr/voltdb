{
  AbstractPlanNode pn;
  pn=compileForSinglePartition("select A FROM (SELECT A, C FROM P1 WHERE A > 3) T1");
  System.out.println(pn.toExplainPlanString());
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkIndexedSubSelects(pn,"P1","SYS_IDX_P1_PK_TREE","A","C");
  List<AbstractPlanNode> planNodes;
  planNodes=compileToFragments("select A, C FROM (SELECT A, C FROM P1) T1 ");
  assertTrue(planNodes.size() == 2);
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1).getChild(0);
  checkSeqScanSubSelects(pn,"T1","A","C");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"P1","A","C");
  planNodes=compileToFragments("select A FROM (SELECT A, C FROM P1 WHERE A > 3) T1 ");
  assertTrue(planNodes.size() == 2);
  pn=planNodes.get(0).getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  assertTrue(pn instanceof ReceivePlanNode);
  pn=planNodes.get(1).getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  assertTrue(pn instanceof ProjectionPlanNode);
  pn=pn.getChild(0);
  checkIndexedSubSelects(pn,"P1","SYS_IDX_P1_PK_TREE","A","C");
  planNodes=compileToFragments("select A FROM (SELECT A FROM P1 WHERE A = 3) T1 ");
  assertTrue(planNodes.size() == 1);
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A");
  pn=pn.getChild(0);
  checkIndexedSubSelects(pn,"P1","SYS_IDX_P1_PK_TREE","A");
  assertEquals(((IndexScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((IndexScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  planNodes=compileToFragments("select A, C FROM (SELECT A, C FROM P1 WHERE A = 3) T1 ");
  assertTrue(planNodes.size() == 1);
  pn=planNodes.get(0);
  assertTrue(pn instanceof SendPlanNode);
  pn=pn.getChild(0);
  checkSeqScanSubSelects(pn,"T1","A","C");
  pn=pn.getChild(0);
  checkIndexedSubSelects(pn,"P1","SYS_IDX_P1_PK_TREE","A","C");
  assertEquals(((IndexScanPlanNode)pn).getInlinePlanNodes().size(),1);
  assertNotNull(((IndexScanPlanNode)pn).getInlinePlanNode(PlanNodeType.PROJECTION));
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C) T1 ");
  assertTrue(planNodes.size() == 2);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C) T1, R1 Where T1.C = R1.C ");
  assertTrue(planNodes.size() == 2);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT A, C, SUM(D) as SD FROM P1 WHERE A > 3 GROUP BY A, C) T1 ");
  assertTrue(planNodes.size() == 2);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT A, C, SUM(D) as SD FROM P1 WHERE A = 3 GROUP BY A, C) T1 ");
  assertTrue(planNodes.size() == 1);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT A, C, SUM(D) as SD FROM P1 WHERE A = 3 GROUP BY A, C) T1, R1 WHERE T1.C = R1.C ");
  assertTrue(planNodes.size() == 1);
  planNodes=compileToFragments("select C FROM (SELECT C FROM P1 WHERE A > 3 ORDER BY C LIMIT 5) T1 ");
  assertTrue(planNodes.size() == 2);
  planNodes=compileToFragments("select T1.C FROM (SELECT C FROM P1 WHERE A > 3 ORDER BY C LIMIT 5) T1, " + "R1 WHERE T1.C > R1.C ");
  assertTrue(planNodes.size() == 2);
  planNodes=compileToFragments("select C FROM (SELECT C FROM P1 WHERE A = 3 ORDER BY C LIMIT 5) T1 ");
  assertTrue(planNodes.size() == 1);
  planNodes=compileToFragments("select T1.C FROM (SELECT C FROM P1 WHERE A = 3 ORDER BY C LIMIT 5) T1, " + "R1 WHERE T1.C > R1.C ");
  assertTrue(planNodes.size() == 1);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 GROUP BY C ORDER BY C LIMIT 5) T1 ");
  assertTrue(planNodes.size() == 2);
  planNodes=compileToFragments("select C, SD FROM " + "(SELECT C, SUM(D) as SD FROM P1 WHERE A = 3 GROUP BY C ORDER BY C LIMIT 5) T1 ");
  assertTrue(planNodes.size() == 1);
}
