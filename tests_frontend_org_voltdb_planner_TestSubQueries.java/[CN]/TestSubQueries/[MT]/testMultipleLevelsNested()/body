{
  AbstractPlanNode pn;
  List<AbstractPlanNode> planNodes;
  pn=compile("select A2 FROM " + "(SELECT A1 AS A2 FROM (SELECT A AS A1 FROM R1 WHERE A < 3) T1 WHERE T1.A1 > 0) T2  WHERE T2.A2 = 3");
  pn=pn.getChild(0);
  checkSeqScan(pn,"T2","A2");
  checkPredicateComparisonExpression(pn,"T2");
  pn=pn.getChild(0);
  checkSeqScan(pn,"T1","A1");
  checkPredicateComparisonExpression(pn,"T1");
  pn=pn.getChild(0);
  checkSeqScan(pn,"R1","A");
  checkPredicateComparisonExpression(pn,"R1");
  planNodes=compileToFragments("select P3.A, T3.C " + "FROM (select * from " + "               (select T1.A, P1.C from P1, "+ "                             (select P2.A from R1, P2 "+ "                               where p2.A = R1.C and R1.D = 3) T1 "+ "               where P1.A = T1.A ) T2 ) T3, "+ "     P3 "+ "where P3.A = T3.A ");
  assertEquals(2,planNodes.size());
  planNodes=compileToFragments("select P3.A, T3.C " + "FROM (select * from " + "               (select T1.A, P1.C from P1, "+ "                             (select P2.A from R1, P2 "+ "                               where p2.A = R1.C and p2.A = 3) T1 "+ "               where P1.A = T1.A ) T2 ) T3, "+ "     P3 "+ "where P3.A = T3.A ");
  assertEquals(1,planNodes.size());
}
