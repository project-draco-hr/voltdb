{
  for (  String node : nodes) {
    new KillStragglers(remoteUser,node,remotePath).run();
  }
  for (  String node : nodes) {
    Runtime.getRuntime().addShutdownHook(new KillStragglers(remoteUser,node,remotePath));
  }
  SSHTools ssh=new SSHTools(remoteUser);
  ArrayList<String[]> startCommands=new ArrayList<String[]>();
  for (  String node : nodes) {
    startCommands.add(ssh.convert(node,remotePath,startCommand));
  }
  ProcessSetManager psm=new ProcessSetManager();
  int ii=0;
  for (  String startCommand[] : startCommands) {
    psm.startProcess(nodes[ii++],startCommand);
  }
  String readyMsg="Server completed initialization.";
  ProcessData.OutputLine line=psm.nextBlocking();
  while (line.message.equals(readyMsg) == false) {
    System.err.printf("(%s): \"%s\"\n",line.processName,line.message);
    line=psm.nextBlocking();
  }
  String retryRejoinNode=null;
  java.util.Random r=new java.util.Random(0);
  while (true) {
    Thread.sleep(15000);
    String forWhomTheBellTolls=retryRejoinNode;
    if (forWhomTheBellTolls == null) {
      forWhomTheBellTolls=nodes[r.nextInt(nodes.length)];
      while (forWhomTheBellTolls.equals(safeNode)) {
        forWhomTheBellTolls=nodes[r.nextInt(nodes.length)];
      }
      psm.killProcess(forWhomTheBellTolls);
      new KillStragglers(remoteUser,forWhomTheBellTolls,remotePath).run();
      System.out.printf("****************** killing process %s\n",forWhomTheBellTolls);
      String failureDetectionComplete=new String("Handling node faults");
      int detectionCompleteCount=0;
      while (detectionCompleteCount != ((nodes.length - 1) * 2)) {
        line=psm.nextBlocking();
        if (line.message.contains(failureDetectionComplete)) {
          detectionCompleteCount++;
          System.out.printf("****************** detectionCompleteCount %d\n",detectionCompleteCount);
        }
        System.err.printf("(%s): \"%s\"\n",line.processName,line.message);
      }
      Thread.sleep(1000);
    }
    String recoverConnectTo=safeNode;
    String recoverCommand[]=ssh.convert(forWhomTheBellTolls,remotePath,rejoinCommand + recoverConnectTo);
    psm.startProcess(forWhomTheBellTolls,recoverCommand);
    String recoverMessage="Node recovery completed after";
    String retryMessage="Timed out waiting for other nodes to connect";
    line=psm.nextBlocking();
    System.err.printf("(%s): \"%s\"\n",line.processName,line.message);
    boolean recovered=line.message.contains(recoverMessage);
    boolean retry=line.message.contains(retryMessage);
    while (!recovered && !retry) {
      System.err.printf("(%s): \"%s\"\n",line.processName,line.message);
      line=psm.nextBlocking();
      recovered=line.message.contains(recoverMessage);
      retry=line.message.contains(retryMessage);
    }
    if (!recovered) {
      assert(retry);
      retryRejoinNode=forWhomTheBellTolls;
    }
 else {
      retryRejoinNode=null;
    }
  }
}
