{
  for (  String node : nodes) {
    new KillStragglers(remoteUser,node,remotePath).run();
  }
  for (  String node : nodes) {
    Runtime.getRuntime().addShutdownHook(new KillStragglers(remoteUser,node,remotePath));
  }
  SSHTools ssh=new SSHTools(remoteUser);
  ArrayList<String[]> startCommands=new ArrayList<String[]>();
  for (  String node : nodes) {
    startCommands.add(ssh.convert(node,remotePath,startCommand));
  }
  ProcessSetManager psm=new ProcessSetManager();
  int ii=0;
  for (  String startCommand[] : startCommands) {
    psm.startProcess(nodes[ii++],startCommand);
  }
  String readyMsg="Server completed initialization.";
  ProcessData.OutputLine line=psm.nextBlocking();
  System.err.printf("(%s): \"%s\"\n",line.processName,line.message);
  while (line.message.contains(readyMsg) == false) {
    line=psm.nextBlocking();
    System.err.printf("(%s): \"%s\"\n",line.processName,line.message);
  }
  String retryRejoinNode=null;
  java.util.Random r=new java.util.Random(0);
  while (true) {
    Thread.sleep(15000);
    String forWhomTheBellTolls=retryRejoinNode;
    if (forWhomTheBellTolls == null) {
      forWhomTheBellTolls=nodes[r.nextInt(nodes.length)];
      while (forWhomTheBellTolls.equals(safeNode)) {
        forWhomTheBellTolls=nodes[r.nextInt(nodes.length)];
      }
      killNode(forWhomTheBellTolls,psm);
      Thread.sleep(1000);
    }
    String recoverConnectTo=safeNode;
    retryRejoinNode=rejoinNodeFull(forWhomTheBellTolls,recoverConnectTo,ssh,psm);
  }
}
