{
  if (m_verboseExplainForDebugging && m_hasSignificantOutputSchema) {
    sb.append(indent + "Detailed Output Schema: ");
    JSONStringer stringer=new JSONStringer();
    try {
      stringer.object();
      outputSchemaToJSON(stringer);
      stringer.endObject();
      sb.append(stringer.toString());
    }
 catch (    Exception e) {
      sb.append(indent + "CORRUPTED beyond the ability to format? " + e);
      e.printStackTrace();
    }
    sb.append(indent + "from\n");
  }
  String extraIndent=" ";
  if ((!m_verboseExplainForDebugging) && (getPlanNodeType() == PlanNodeType.PROJECTION)) {
    extraIndent="";
  }
 else {
    String nodePlan=explainPlanForNode(indent);
    if (m_skipInitalIndentationForExplain) {
      sb.append(" " + nodePlan + "\n");
    }
 else {
      sb.append(indent + nodePlan + "\n");
    }
  }
  for (  AbstractPlanNode inlineNode : m_inlineNodes.values()) {
    if ((!m_verboseExplainForDebugging) && (inlineNode.getPlanNodeType() == PlanNodeType.PROJECTION)) {
      continue;
    }
    inlineNode.setSkipInitalIndentationForExplain(true);
    sb.append(indent + extraIndent + "inline");
    inlineNode.explainPlan_recurse(sb,indent + extraIndent);
  }
  for (  AbstractPlanNode node : m_children) {
    assert(m_isInline == false);
    node.explainPlan_recurse(sb,indent + extraIndent);
  }
}
