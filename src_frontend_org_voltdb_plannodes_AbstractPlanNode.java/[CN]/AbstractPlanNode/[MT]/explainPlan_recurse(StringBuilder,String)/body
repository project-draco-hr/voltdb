{
  if (m_verboseExplainForDebugging && m_hasSignificantOutputSchema) {
    sb.append(indent + "Detailed Output Schema: ");
    JSONStringer stringer=new JSONStringer();
    try {
      outputSchemaToJSON(stringer);
      sb.append(stringer.toString());
    }
 catch (    Exception e) {
      sb.append(indent + "CORRUPTED beyond the ability to format? " + e);
      e.printStackTrace();
    }
    sb.append(indent + "from\n");
  }
  String extraIndent=" ";
  if (getPlanNodeType() == PlanNodeType.PROJECTION) {
    if (m_verboseExplainForDebugging) {
      sb.append(indent + "PROJECTION\n");
    }
    extraIndent="";
  }
 else {
    String nodePlan=explainPlanForNode(indent);
    sb.append(indent + nodePlan + "\n");
  }
  for (  AbstractPlanNode inlineNode : m_inlineNodes.values()) {
    if (inlineNode.getPlanNodeType() == PlanNodeType.PROJECTION)     continue;
    sb.append(indent + "inline ");
    sb.append(inlineNode.explainPlanForNode(indent));
    sb.append("\n");
  }
  for (  AbstractPlanNode node : m_children) {
    assert(m_isInline == false);
    node.explainPlan_recurse(sb,indent + extraIndent);
  }
}
