{
  String extraIndent=" ";
  if ((!m_verboseExplainForDebugging) && (getPlanNodeType() == PlanNodeType.PROJECTION)) {
    extraIndent="";
  }
 else {
    if (!m_skipInitalIndentationForExplain) {
      sb.append(indent);
    }
    String nodePlan=explainPlanForNode(indent);
    sb.append(nodePlan);
    if (m_verboseExplainForDebugging && m_outputSchema != null) {
      sb.append(indent + " " + m_outputSchema.toExplainPlanString());
    }
    sb.append("\n");
  }
  TreeMap<Integer,AbstractPlanNode> sort_inlineNodes=new TreeMap<Integer,AbstractPlanNode>();
  int ii=4;
  for (  AbstractPlanNode inlineNode : m_inlineNodes.values()) {
    if (inlineNode instanceof AggregatePlanNode) {
      sort_inlineNodes.put(0,inlineNode);
    }
 else     if (inlineNode instanceof ProjectionPlanNode) {
      sort_inlineNodes.put(1,inlineNode);
    }
 else     if (inlineNode instanceof LimitPlanNode) {
      sort_inlineNodes.put(2,inlineNode);
    }
 else     if (inlineNode instanceof AbstractScanPlanNode) {
      sort_inlineNodes.put(3,inlineNode);
    }
 else {
      sort_inlineNodes.put(ii++,inlineNode);
    }
  }
  for (  AbstractPlanNode inlineNode : sort_inlineNodes.values()) {
    if ((!m_verboseExplainForDebugging) && (inlineNode.getPlanNodeType() == PlanNodeType.PROJECTION)) {
      continue;
    }
    inlineNode.setSkipInitalIndentationForExplain(true);
    sb.append(indent + extraIndent + "inline ");
    inlineNode.explainPlan_recurse(sb,indent + extraIndent);
  }
  for (  AbstractPlanNode node : m_children) {
    assert(m_isInline == false);
    node.explainPlan_recurse(sb,indent + extraIndent);
  }
}
