{
  stringer.key(Members.ID.name()).value(m_id);
  stringer.key(Members.PLAN_NODE_TYPE.name()).value(getPlanNodeType().toString());
  stringer.key(Members.INLINE_NODES.name()).array();
  PlanNodeType types[]=new PlanNodeType[m_inlineNodes.size()];
  int i=0;
  for (  PlanNodeType type : m_inlineNodes.keySet()) {
    types[i++]=type;
  }
  Arrays.sort(types);
  for (  PlanNodeType type : types) {
    AbstractPlanNode node=m_inlineNodes.get(type);
    assert(node != null);
    assert(node instanceof JSONString);
    stringer.value(node);
  }
  stringer.endArray();
  stringer.key(Members.CHILDREN_IDS.name()).array();
  for (  AbstractPlanNode node : m_children) {
    stringer.value(node.getPlanNodeId().intValue());
  }
  stringer.endArray();
  outputSchemaToJSON(stringer);
}
