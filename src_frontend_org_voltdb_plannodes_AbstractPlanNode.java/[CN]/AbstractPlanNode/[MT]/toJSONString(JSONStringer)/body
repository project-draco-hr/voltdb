{
  stringer.key(Members.ID.name()).value(m_id);
  stringer.key(Members.PLAN_NODE_TYPE.name()).value(getPlanNodeType().toString());
  if (m_inlineNodes.size() > 0) {
    PlanNodeType types[]=new PlanNodeType[m_inlineNodes.size()];
    int i=0;
    for (    PlanNodeType type : m_inlineNodes.keySet()) {
      types[i++]=type;
    }
    Arrays.sort(types);
    stringer.key(Members.INLINE_NODES.name()).array();
    for (    PlanNodeType type : types) {
      AbstractPlanNode node=m_inlineNodes.get(type);
      assert(node != null);
      stringer.value(node);
    }
    stringer.endArray();
  }
  if (m_children.size() > 0) {
    stringer.key(Members.CHILDREN_IDS.name()).array();
    for (    AbstractPlanNode node : m_children) {
      stringer.value(node.getPlanNodeId().intValue());
    }
    stringer.endArray();
  }
  outputSchemaToJSON(stringer);
}
