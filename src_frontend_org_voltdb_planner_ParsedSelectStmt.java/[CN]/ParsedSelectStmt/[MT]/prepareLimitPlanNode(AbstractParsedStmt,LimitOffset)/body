{
  int limitParamIndex=stmt.parameterCountIndexById(limitOffset.m_limitParameterId);
  int offsetParamIndex=stmt.parameterCountIndexById(limitOffset.m_offsetParameterId);
  limitOffset.m_limitNodeTop=new LimitPlanNode();
  limitOffset.m_limitNodeTop.setLimit((int)limitOffset.m_limit);
  limitOffset.m_limitNodeTop.setOffset((int)limitOffset.m_offset);
  limitOffset.m_limitNodeTop.setLimitParameterIndex(limitParamIndex);
  limitOffset.m_limitNodeTop.setOffsetParameterIndex(offsetParamIndex);
  if (limitOffset.m_limitCanPushdown) {
    limitOffset.m_limitNodeDist=new LimitPlanNode();
    if (limitOffset.m_limit != -1) {
      limitOffset.m_limitNodeDist.setLimit((int)(limitOffset.m_limit + limitOffset.m_offset));
    }
    if (limitOffset.hasLimitOrOffsetParameters()) {
      AbstractExpression left=stmt.getParameterOrConstantAsExpression(limitOffset.m_offsetParameterId,limitOffset.m_offset);
      assert(left != null);
      AbstractExpression right=stmt.getParameterOrConstantAsExpression(limitOffset.m_limitParameterId,limitOffset.m_limit);
      assert(right != null);
      OperatorExpression expr=new OperatorExpression(ExpressionType.OPERATOR_PLUS,left,right);
      expr.setValueType(VoltType.INTEGER);
      expr.setValueSize(VoltType.INTEGER.getLengthInBytesForFixedTypes());
      limitOffset.m_limitNodeDist.setLimitExpression(expr);
    }
  }
}
