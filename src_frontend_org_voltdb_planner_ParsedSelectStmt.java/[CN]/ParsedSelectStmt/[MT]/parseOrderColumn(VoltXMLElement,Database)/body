{
  assert(orderByNode.name.equalsIgnoreCase("operation"));
  String operationType=orderByNode.attributes.get("type");
  assert(operationType != null);
  assert(operationType.equalsIgnoreCase("orderby"));
  String desc=orderByNode.attributes.get("desc");
  boolean descending=(desc != null) && (desc.equalsIgnoreCase("true"));
  VoltXMLElement child=orderByNode.children.get(0);
  assert(child != null);
  if (child.name.equals("columnref")) {
    String alias=child.attributes.get("alias");
    ParsedColInfo col=new ParsedColInfo();
    col.alias=alias;
    col.expression=parseExpressionTree(child,db);
    ExpressionUtil.assignLiteralConstantTypesRecursively(col.expression);
    ExpressionUtil.assignOutputValueTypesRecursively(col.expression);
    col.columnName=child.attributes.get("column");
    col.tableName=child.attributes.get("table");
    col.orderBy=true;
    col.ascending=!descending;
    orderColumns.add(col);
  }
 else   if (child.name.equals("operation")) {
    ParsedColInfo order_col=new ParsedColInfo();
    order_col.columnName="";
    order_col.orderBy=true;
    order_col.ascending=!descending;
    order_col.tableName="VOLT_TEMP_TABLE";
    AbstractExpression order_exp=parseExpressionTree(child,db);
    if (order_exp instanceof TupleValueExpression) {
      String alias=child.attributes.get("alias");
      ParsedColInfo orig_col=null;
      for (      ParsedColInfo col : displayColumns) {
        if (col.alias.equals(alias)) {
          orig_col=col;
        }
      }
      if (orig_col == null) {
        throw new PlanningErrorException("Unable to find source " + "column for simplecolumn: " + alias);
      }
      assert(orig_col.tableName.equals("VOLT_TEMP_TABLE"));
      TupleValueExpression tve=(TupleValueExpression)order_exp;
      tve.setColumnAlias(alias);
      tve.setColumnName("");
      tve.setColumnIndex(-1);
      tve.setTableName("VOLT_TEMP_TABLE");
      tve.setValueSize(orig_col.expression.getValueSize());
      tve.setValueType(orig_col.expression.getValueType());
      order_col.alias=alias;
      order_col.expression=tve;
    }
 else {
      ExpressionUtil.assignLiteralConstantTypesRecursively(order_exp);
      ExpressionUtil.assignOutputValueTypesRecursively(order_exp);
      order_col.expression=order_exp;
    }
    orderColumns.add(order_col);
  }
 else {
    throw new RuntimeException("ORDER BY parsed with strange child node type: " + child.name);
  }
}
