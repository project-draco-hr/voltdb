{
  if (!m_hasAggregateExpression && !isGrouped()) {
    m_hasComplexAgg=false;
    return false;
  }
  if (hasComplexAgg()) {
    return true;
  }
  int numDisplayCols=m_displayColumns.size();
  if (m_aggResultColumns.size() > numDisplayCols) {
    m_hasComplexAgg=true;
    return true;
  }
  HashSet<ParsedColInfo> tmpContainer=new HashSet<>();
  for (  ParsedColInfo col : m_displayColumns) {
    if (!tmpContainer.add(col)) {
      m_hasComplexAgg=true;
      return true;
    }
    AbstractExpression expr=col.expression;
    boolean isNewAgg=true;
    for (    ParsedColInfo existingAggCol : m_aggResultColumns) {
      AbstractExpression existingExpr=existingAggCol.expression;
      if (expr.equals(existingExpr)) {
        isNewAgg=false;
        break;
      }
    }
    if (!isNewAgg) {
      continue;
    }
    if (!(col.expression instanceof TupleValueExpression)) {
      m_hasComplexAgg=true;
      return true;
    }
    m_aggResultColumns.add(col);
  }
  if (m_aggResultColumns.size() != numDisplayCols) {
    m_hasComplexAgg=true;
    return true;
  }
  return false;
}
