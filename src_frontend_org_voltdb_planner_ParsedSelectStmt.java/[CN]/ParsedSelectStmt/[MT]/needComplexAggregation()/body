{
  if (!m_hasAggregateExpression && !isGrouped()) {
    m_hasComplexAgg=false;
    return false;
  }
  if (hasComplexAgg())   return true;
  int numDisplayCols=m_displayColumns.size();
  if (m_aggResultColumns.size() > numDisplayCols) {
    m_hasComplexAgg=true;
    return true;
  }
  for (  ParsedColInfo col : m_displayColumns) {
    if (!m_aggResultColumns.contains(col)) {
      if (col.expression instanceof TupleValueExpression) {
        m_aggResultColumns.add(col);
      }
 else {
        m_hasComplexAgg=true;
        return true;
      }
    }
  }
  if (m_aggResultColumns.size() != numDisplayCols) {
    m_hasComplexAgg=true;
    return true;
  }
  HashSet<ParsedColInfo> tmpContainer=new HashSet<ParsedColInfo>();
  for (int i=0; i < numDisplayCols; i++) {
    ParsedColInfo icol=m_displayColumns.get(i);
    if (tmpContainer.contains(icol)) {
      m_hasComplexAgg=true;
      return true;
    }
 else {
      tmpContainer.add(icol);
    }
  }
  return false;
}
