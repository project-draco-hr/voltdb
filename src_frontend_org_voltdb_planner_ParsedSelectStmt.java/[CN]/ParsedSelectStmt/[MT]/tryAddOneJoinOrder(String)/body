{
  ArrayList<String> tableAliases=new ArrayList<String>();
  HashSet<String> dupCheck=new HashSet<String>();
  for (  String element : joinOrder.trim().split(",")) {
    String alias=element.trim().toUpperCase();
    tableAliases.add(alias);
    if (!dupCheck.add(alias)) {
      if (m_hasLargeNumberOfTableJoins) {
        return false;
      }
      StringBuilder sb=new StringBuilder();
      sb.append("The specified join order \"").append(joinOrder);
      sb.append("\" contains a duplicate element \"").append(alias).append("\".");
      throw new PlanningErrorException(sb.toString());
    }
  }
  if (m_tableAliasMap.size() != tableAliases.size()) {
    if (m_hasLargeNumberOfTableJoins) {
      return false;
    }
    StringBuilder sb=new StringBuilder();
    sb.append("The specified join order \"");
    sb.append(joinOrder).append("\" does not contain the correct number of elements\n");
    sb.append("Expected ").append(m_tableList.size());
    sb.append(" but found ").append(tableAliases.size()).append(" elements.");
    throw new PlanningErrorException(sb.toString());
  }
  Set<String> aliasSet=m_tableAliasMap.keySet();
  Set<String> specifiedNames=new HashSet<String>(tableAliases);
  specifiedNames.removeAll(aliasSet);
  if (specifiedNames.isEmpty() == false) {
    if (m_hasLargeNumberOfTableJoins) {
      return false;
    }
    StringBuilder sb=new StringBuilder();
    sb.append("The specified join order \"");
    sb.append(joinOrder).append("\" contains ");
    int i=0;
    for (    String name : specifiedNames) {
      sb.append(name);
      if (++i != specifiedNames.size()) {
        sb.append(',');
      }
    }
    sb.append(" which ");
    if (specifiedNames.size() == 1) {
      sb.append("doesn't ");
    }
 else {
      sb.append("don't ");
    }
    sb.append("exist in the FROM clause");
    throw new PlanningErrorException(sb.toString());
  }
  if (!isValidJoinOrder(tableAliases)) {
    if (m_hasLargeNumberOfTableJoins)     return false;
    throw new PlanningErrorException("The specified join order is invalid for the given query");
  }
  assert(m_joinOrderList.size() > 0);
  m_joinTree=m_joinOrderList.get(0);
  return true;
}
