{
  assert(orderByNode.getNodeType() == Node.ELEMENT_NODE);
  assert(orderByNode.getNodeName().equalsIgnoreCase("operation"));
  NamedNodeMap attrs=orderByNode.getAttributes();
  Node operationTypeNode=attrs.getNamedItem("type");
  assert(operationTypeNode != null);
  assert(operationTypeNode.getNodeValue().equalsIgnoreCase("orderby"));
  Node descNode=attrs.getNamedItem("desc");
  boolean descending=descNode.getNodeValue().equalsIgnoreCase("true");
  Node child=orderByNode.getFirstChild();
  while (child.getNodeType() != Node.ELEMENT_NODE)   child=child.getNextSibling();
  assert(child != null);
  NamedNodeMap childAttrs=child.getAttributes();
  if (child.getNodeName().equals("columnref")) {
    String alias=childAttrs.getNamedItem("alias").getNodeValue();
    ParsedColInfo col=new ParsedColInfo();
    col.alias=alias;
    col.expression=parseExpressionTree(child,db);
    ExpressionUtil.assignLiteralConstantTypesRecursively(col.expression);
    ExpressionUtil.assignOutputValueTypesRecursively(col.expression);
    col.columnName=childAttrs.getNamedItem("column").getNodeValue();
    col.tableName=childAttrs.getNamedItem("table").getNodeValue();
    col.orderBy=true;
    col.ascending=!descending;
    orderColumns.add(col);
  }
 else   if (child.getNodeName().equals("operation")) {
    ParsedColInfo order_col=new ParsedColInfo();
    order_col.columnName="";
    order_col.orderBy=true;
    order_col.ascending=!descending;
    order_col.tableName="VOLT_TEMP_TABLE";
    AbstractExpression order_exp=parseExpressionTree(child,db);
    if (order_exp instanceof TupleValueExpression) {
      String alias=childAttrs.getNamedItem("alias").getNodeValue();
      ParsedColInfo orig_col=null;
      for (      ParsedColInfo col : displayColumns) {
        if (col.alias.equals(alias)) {
          orig_col=col;
        }
      }
      if (orig_col == null) {
        throw new PlanningErrorException("Unable to find source " + "column for simplecolumn: " + alias);
      }
      assert(orig_col.tableName.equals("VOLT_TEMP_TABLE"));
      TupleValueExpression tve=(TupleValueExpression)order_exp;
      tve.setColumnAlias(alias);
      tve.setColumnName("");
      tve.setColumnIndex(-1);
      tve.setTableName("VOLT_TEMP_TABLE");
      tve.setValueSize(orig_col.expression.getValueSize());
      tve.setValueType(orig_col.expression.getValueType());
      order_col.alias=alias;
      order_col.expression=tve;
    }
 else {
      ExpressionUtil.assignLiteralConstantTypesRecursively(order_exp);
      ExpressionUtil.assignOutputValueTypesRecursively(order_exp);
      order_col.expression=order_exp;
    }
    orderColumns.add(order_col);
  }
 else {
    throw new RuntimeException("ORDER BY parsed with strange child node type: " + child.getNodeName());
  }
}
