{
  ParsedColInfo col=new ParsedColInfo();
  m_aggregationList.clear();
  col.index=index;
  AbstractExpression colExpr=parseExpressionTree(child);
  if (colExpr instanceof ConstantValueExpression) {
    assert(colExpr.getValueType() != VoltType.NUMERIC);
  }
  assert(colExpr != null);
  if (isDistributed) {
    colExpr=colExpr.replaceAVG();
    updateAvgExpressions();
  }
  ExpressionUtil.finalizeValueTypes(colExpr);
  if (colExpr.getValueType() == VoltType.BOOLEAN) {
    throw new PlanningErrorException("A SELECT clause does not allow a BOOLEAN expression. " + "consider using CASE WHEN to decode the BOOLEAN expression " + "into a value of some other type.");
  }
  if (isParentUnionClause() && AbstractExpression.hasInlineVarType(colExpr)) {
    AbstractExpression expr=new OperatorExpression();
    ;
    expr.setExpressionType(ExpressionType.OPERATOR_CAST);
    VoltType voltType=colExpr.getValueType();
    expr.setValueType(voltType);
    expr.setInBytes(colExpr.getInBytes());
    int size=expr.getInBytes() ? voltType.getMaxLengthInBytes() : VoltType.MAX_VALUE_LENGTH_IN_CHARACTERS;
    expr.setValueSize(size);
    expr.setLeft(colExpr);
    colExpr=expr;
  }
  calculateColumnNames(child,col,colExpr);
  col.expression=colExpr;
  insertAggExpressionsToAggResultColumns(m_aggregationList,col);
  if (m_aggregationList.size() >= 1) {
    m_hasAggregateExpression=true;
    for (    AbstractExpression agg : m_aggregationList) {
      assert(agg instanceof AggregateExpression);
      if (!m_hasAggregateDistinct && ((AggregateExpression)agg).isDistinct()) {
        m_hasAggregateDistinct=true;
        break;
      }
    }
  }
  col.differentiator=index;
  m_displayColumns.add(col);
}
