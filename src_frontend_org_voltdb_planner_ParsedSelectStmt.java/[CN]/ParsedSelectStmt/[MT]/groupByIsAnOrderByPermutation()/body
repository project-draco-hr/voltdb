{
  if (groupAndOrderByPermutationWasTested) {
    return groupAndOrderByPermutationResult;
  }
  groupAndOrderByPermutationWasTested=true;
  int size=groupByColumns.size();
  if (size != orderColumns.size()) {
    return false;
  }
  Set<AbstractExpression> orderPrefixExprs=new HashSet<>(size);
  Set<AbstractExpression> groupExprs=new HashSet<>(size);
  int ii=0;
  for (  ParsedColInfo gb : groupByColumns) {
    AbstractExpression gexpr=gb.expression;
    if (gb.expression == null) {
      return false;
    }
    AbstractExpression oexpr=orderColumns.get(ii).expression;
    ++ii;
    if (gb.expression.equals(oexpr)) {
      continue;
    }
    groupExprs.add(gexpr);
    orderPrefixExprs.add(oexpr);
  }
  groupAndOrderByPermutationResult=groupExprs.equals(orderPrefixExprs);
  return groupAndOrderByPermutationResult;
}
