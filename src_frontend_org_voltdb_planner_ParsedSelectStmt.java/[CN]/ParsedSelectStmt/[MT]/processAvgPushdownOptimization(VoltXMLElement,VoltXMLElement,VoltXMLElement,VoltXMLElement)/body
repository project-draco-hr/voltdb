{
  ArrayList<ParsedColInfo> tmpDisplayColumns=m_displayColumns;
  m_displayColumns=new ArrayList<ParsedColInfo>();
  ArrayList<ParsedColInfo> tmpAggResultColumns=m_aggResultColumns;
  m_aggResultColumns=new ArrayList<ParsedColInfo>();
  ArrayList<ParsedColInfo> tmpOrderColumns=m_orderColumns;
  m_orderColumns=new ArrayList<ParsedColInfo>();
  AbstractExpression tmpHaving=m_having;
  boolean tmpHasComplexAgg=hasComplexAgg();
  NodeSchema tmpNodeSchema=m_projectSchema;
  m_projectSchema=null;
  m_aggregationList=new ArrayList<AbstractExpression>();
  assert(displayElement != null);
  parseDisplayColumns(displayElement,true);
  if (groupbyElement != null) {
    insertToColumnList(m_aggResultColumns,m_groupByColumns);
  }
  if (orderbyElement != null) {
    parseOrderColumns(orderbyElement,true);
  }
  if (havingElement != null) {
    parseHavingExpression(havingElement,true);
  }
  m_aggregationList=null;
  fillUpAggResultColumns();
  placeTVEsinColumns();
  m_avgPushdownDisplayColumns=m_displayColumns;
  m_avgPushdownAggResultColumns=m_aggResultColumns;
  m_avgPushdownOrderColumns=m_orderColumns;
  m_avgPushdownNewAggSchema=m_projectSchema;
  m_avgPushdownHaving=m_having;
  m_displayColumns=tmpDisplayColumns;
  m_aggResultColumns=tmpAggResultColumns;
  m_orderColumns=tmpOrderColumns;
  m_projectSchema=tmpNodeSchema;
  m_hasComplexAgg=tmpHasComplexAgg;
  m_having=tmpHaving;
}
