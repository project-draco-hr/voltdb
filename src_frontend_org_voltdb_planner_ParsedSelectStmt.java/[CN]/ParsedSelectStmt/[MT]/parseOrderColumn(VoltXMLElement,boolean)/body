{
  m_aggregationList.clear();
  ParsedColInfo.ExpressionAdjuster adjuster=new ParsedColInfo.ExpressionAdjuster(){
    @Override public AbstractExpression adjust(    AbstractExpression expr){
      if (isDistributed) {
        expr=expr.replaceAVG();
        updateAvgExpressions();
      }
      ExpressionUtil.finalizeValueTypes(expr);
      return expr;
    }
  }
;
  ParsedColInfo order_col=ParsedColInfo.fromOrderByXml(this,orderByNode,adjuster);
  AbstractExpression order_exp=order_col.expression;
  assert(order_exp != null);
  for (  ParsedColInfo col : m_displayColumns) {
    if (col.alias.equals(order_col.alias) || col.expression.equals(order_exp)) {
      col.orderBy=true;
      col.ascending=order_col.ascending;
      order_col.alias=col.alias;
      order_col.columnName=col.columnName;
      order_col.tableName=col.tableName;
      break;
    }
  }
  assert(!(order_exp instanceof ConstantValueExpression));
  assert(!(order_exp instanceof ParameterValueExpression));
  insertAggExpressionsToAggResultColumns(m_aggregationList,order_col);
  if (m_aggregationList.size() >= 1) {
    m_hasAggregateExpression=true;
  }
  List<TupleValueExpression> tveList=new ArrayList<TupleValueExpression>();
  findAllTVEs(order_col.expression,tveList);
  insertTVEsToAggResultColumns(tveList);
  m_orderColumns.add(order_col);
}
