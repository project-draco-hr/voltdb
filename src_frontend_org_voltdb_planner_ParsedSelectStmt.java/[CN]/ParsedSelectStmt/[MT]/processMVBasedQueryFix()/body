{
  String mvTableName=mvFixInfo.mvTable.getTypeName();
  mvFixInfo.mvDDLGroupbyColumnsList=new ArrayList<ParsedColInfo>();
  mvFixInfo.mvAggResultColumns=new ArrayList<ParsedColInfo>();
  mvFixInfo.mvColumnAggType=new HashMap<String,ExpressionType>();
  List<Column> mvColumnArray=CatalogUtil.getSortedCatalogItems(mvFixInfo.mvTable.getColumns(),"index");
  for (  Column mvCol : mvColumnArray) {
    ExpressionType reAggType=ExpressionType.get(mvCol.getAggregatetype());
    if (reAggType == ExpressionType.AGGREGATE_COUNT_STAR || reAggType == ExpressionType.AGGREGATE_COUNT) {
      reAggType=ExpressionType.AGGREGATE_SUM;
    }
    mvFixInfo.mvColumnAggType.put(mvCol.getName(),reAggType);
  }
  assert(mvFixInfo.numOfGroupByColumns > 0);
  for (int i=0; i < mvFixInfo.numOfGroupByColumns; i++) {
    ParsedColInfo col=new ParsedColInfo();
    Column mvCol=mvColumnArray.get(i);
    col.columnName=mvCol.getName();
    col.tableName=mvTableName;
    col.alias=mvCol.getName();
    TupleValueExpression tve=new TupleValueExpression();
    tve.setColumnIndex(i);
    tve.setColumnName(mvCol.getName());
    tve.setTableName(mvTableName);
    tve.setColumnAlias(mvCol.getName());
    tve.setValueType(VoltType.get((byte)mvCol.getType()));
    tve.setValueSize(mvCol.getSize());
    col.expression=tve;
    mvFixInfo.mvDDLGroupbyColumnsList.add(col);
  }
  mvFixInfo.inlineProjSchema=new NodeSchema();
  ArrayList<SchemaColumn> orignalGroupbyColumnsList=new ArrayList<SchemaColumn>();
  for (  ParsedColInfo col : mvFixInfo.mvDDLGroupbyColumnsList) {
    assert(col.expression instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.expression;
    SchemaColumn scol=new SchemaColumn(tve.getTableName(),tve.getColumnName(),tve.getColumnAlias(),tve);
    orignalGroupbyColumnsList.add(scol);
  }
  ArrayList<SchemaColumn> newValue=new ArrayList<SchemaColumn>();
  assert(scanColumns.keySet().size() == 1);
  for (  String tbName : scanColumns.keySet()) {
    assert(tbName.equals(mvTableName));
    ArrayList<SchemaColumn> columns=scanColumns.get(tbName);
    newValue.addAll(columns);
    Set<SchemaColumn> valueSet=new HashSet<SchemaColumn>(columns);
    for (    SchemaColumn scol : orignalGroupbyColumnsList) {
      if (!valueSet.contains(scol)) {
        valueSet.add(scol);
        newValue.add(scol);
      }
    }
  }
  if (newValue.size() == 0) {
    newValue=orignalGroupbyColumnsList;
  }
  for (  SchemaColumn scol : newValue) {
    mvFixInfo.inlineProjSchema.addColumn(scol);
  }
  for (  SchemaColumn scol : newValue) {
    ParsedColInfo col=new ParsedColInfo();
    col.expression=scol.getExpression();
    col.alias=scol.getColumnAlias();
    col.columnName=scol.getColumnName();
    col.tableName=scol.getTableName();
    mvFixInfo.mvAggResultColumns.add(col);
  }
}
