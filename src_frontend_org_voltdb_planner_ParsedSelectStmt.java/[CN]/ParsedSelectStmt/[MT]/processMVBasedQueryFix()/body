{
  String mvTableName=mvFixInfo.mvTable.getTypeName();
  ArrayList<ParsedColInfo> tmpDisplayColumns=new ArrayList<ParsedColInfo>(displayColumns);
  ArrayList<ParsedColInfo> tmpAggResultColumns=new ArrayList<ParsedColInfo>(aggResultColumns);
  ArrayList<ParsedColInfo> tmpGroupbyColumns=new ArrayList<ParsedColInfo>(groupByColumns);
  mvFixInfo.mvDDLGroupbyColumnsList=new ArrayList<ParsedColInfo>();
  List<Column> mvColumnArray=CatalogUtil.getSortedCatalogItems(mvFixInfo.mvTable.getColumns(),"index");
  assert(mvFixInfo.numOfGroupByColumns > 0);
  for (int i=0; i < mvFixInfo.numOfGroupByColumns; i++) {
    ParsedColInfo col=new ParsedColInfo();
    Column mvCol=mvColumnArray.get(i);
    col.columnName=mvCol.getName();
    col.tableName=mvTableName;
    col.alias=mvCol.getName();
    TupleValueExpression tve=new TupleValueExpression();
    tve.setColumnIndex(i);
    tve.setColumnName(mvCol.getName());
    tve.setTableName(mvTableName);
    tve.setColumnAlias(mvCol.getName());
    tve.setValueType(VoltType.get((byte)mvCol.getType()));
    tve.setValueSize(mvCol.getSize());
    col.expression=tve;
    mvFixInfo.mvDDLGroupbyColumnsList.add(col);
    if (ParsedColInfo.isNewtoColumnList(aggResultColumns,col)) {
      aggResultColumns.add(col);
    }
    if (ParsedColInfo.isNewtoColumnList(displayColumns,col)) {
      displayColumns.add(col);
    }
    if (ParsedColInfo.isNewtoColumnList(groupByColumns,col)) {
      groupByColumns.add(col);
    }
  }
  assert(projectSchema != null);
  placeTVEsinColumns();
  mvFixInfo.originalDisplayColumns=displayColumns;
  mvFixInfo.originalAggResultColumns=aggResultColumns;
  mvFixInfo.originalGroupByColumns=groupByColumns;
  displayColumns=tmpDisplayColumns;
  aggResultColumns=tmpAggResultColumns;
  groupByColumns=tmpGroupbyColumns;
  mvFixInfo.inlineProjSchema=new NodeSchema();
  ArrayList<SchemaColumn> orignalGroupbyColumnsList=new ArrayList<SchemaColumn>();
  for (  ParsedColInfo col : mvFixInfo.mvDDLGroupbyColumnsList) {
    assert(col.expression instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)col.expression;
    SchemaColumn scol=new SchemaColumn(tve.getTableName(),tve.getColumnName(),tve.getColumnAlias(),tve);
    orignalGroupbyColumnsList.add(scol);
  }
  ArrayList<SchemaColumn> newValue=new ArrayList<SchemaColumn>();
  for (  String key : scanColumns.keySet()) {
    ArrayList<SchemaColumn> value=scanColumns.get(key);
    if (key.equals(mvTableName)) {
      newValue.addAll(value);
      Set<SchemaColumn> valueSet=new HashSet<SchemaColumn>(value);
      for (      SchemaColumn scol : orignalGroupbyColumnsList) {
        if (!valueSet.contains(scol)) {
          valueSet.add(scol);
          newValue.add(scol);
        }
      }
      break;
    }
  }
  if (newValue.size() == 0) {
    newValue=orignalGroupbyColumnsList;
  }
  for (  SchemaColumn scol : newValue) {
    mvFixInfo.inlineProjSchema.addColumn(scol);
  }
}
