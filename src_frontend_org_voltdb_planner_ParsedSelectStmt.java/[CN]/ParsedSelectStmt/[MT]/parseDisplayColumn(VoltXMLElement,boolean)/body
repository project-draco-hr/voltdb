{
  ParsedColInfo col=new ParsedColInfo();
  m_aggregationList.clear();
  AbstractExpression colExpr=parseExpressionTree(child);
  ;
  if (colExpr instanceof ConstantValueExpression) {
    assert(colExpr.getValueType() != VoltType.NUMERIC);
  }
  assert(colExpr != null);
  if (isDistributed) {
    colExpr=colExpr.replaceAVG();
    updateAvgExpressions();
  }
  ExpressionUtil.finalizeValueTypes(colExpr);
  if (isParentUnionClause() && VoltType.isInlineVarType(colExpr.getValueType(),colExpr.getValueSize(),colExpr.getInBytes())) {
    AbstractExpression expr=null;
    try {
      expr=ExpressionType.OPERATOR_CAST.getExpressionClass().newInstance();
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage(),e);
    }
    expr.setExpressionType(ExpressionType.OPERATOR_CAST);
    VoltType voltType=colExpr.getValueType();
    expr.setValueType(voltType);
    expr.setInBytes(colExpr.getInBytes());
    expr.setValueSize(voltType.getMaxLengthInBytes());
    expr.setLeft(colExpr);
    colExpr=expr;
  }
  if (child.name.equals("columnref")) {
    col.expression=colExpr;
    col.columnName=child.attributes.get("column");
    col.tableName=child.attributes.get("table");
    col.tableAlias=child.attributes.get("tablealias");
    if (col.tableAlias == null) {
      col.tableAlias=col.tableName;
    }
  }
 else   if (child.name.equals("tablesubquery")) {
    ScalarValueExpression sve=(ScalarValueExpression)colExpr;
    col.columnName=child.attributes.get("alias");
    col.tableName=sve.getSubqueryScan().getTableName();
    col.tableAlias=sve.getSubqueryScan().getTableAlias();
    col.expression=colExpr;
  }
 else {
    col.expression=colExpr;
    col.tableName="VOLT_TEMP_TABLE";
    col.tableAlias="VOLT_TEMP_TABLE";
    col.columnName="";
  }
  col.alias=child.attributes.get("alias");
  if (col.alias == null) {
    col.alias=col.columnName;
  }
  col.index=m_displayColumns.size();
  insertAggExpressionsToAggResultColumns(m_aggregationList,col);
  if (m_aggregationList.size() >= 1) {
    m_hasAggregateExpression=true;
    for (    AbstractExpression agg : m_aggregationList) {
      assert(agg instanceof AggregateExpression);
      if (!m_hasAggregateDistinct && ((AggregateExpression)agg).isDistinct()) {
        m_hasAggregateDistinct=true;
        break;
      }
    }
  }
  m_displayColumns.add(col);
}
