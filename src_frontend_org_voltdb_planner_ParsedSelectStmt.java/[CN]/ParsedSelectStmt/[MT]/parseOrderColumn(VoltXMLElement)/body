{
  assert(orderByNode.name.equalsIgnoreCase("orderby"));
  String desc=orderByNode.attributes.get("desc");
  boolean descending=(desc != null) && (desc.equalsIgnoreCase("true"));
  VoltXMLElement child=orderByNode.children.get(0);
  assert(child != null);
  ParsedColInfo order_col=new ParsedColInfo();
  order_col.orderBy=true;
  order_col.ascending=!descending;
  aggregationList.clear();
  AbstractExpression order_exp=parseExpressionTree(child);
  assert(order_exp != null);
  if (isDistributed) {
    order_exp=order_exp.replaceAVG();
    updateAvgExprresions();
  }
  order_col.expression=order_exp;
  ExpressionUtil.finalizeValueTypes(order_col.expression);
  if (child.name.equals("columnref")) {
    assert(order_exp instanceof TupleValueExpression);
    TupleValueExpression tve=(TupleValueExpression)order_exp;
    order_col.columnName=tve.getColumnName();
    order_col.tableName=tve.getTableName();
    order_col.alias=tve.getColumnAlias();
  }
 else {
    String alias=child.attributes.get("alias");
    order_col.alias=alias;
    order_col.tableName="VOLT_TEMP_TABLE";
    order_col.columnName="";
    if ((child.name.equals("operation") == false) && (child.name.equals("aggregation") == false) && (child.name.equals("function") == false)) {
      throw new RuntimeException("ORDER BY parsed with strange child node type: " + child.name);
    }
  }
  ParsedColInfo orig_col=null;
  for (  ParsedColInfo col : displayColumns) {
    if (col.alias.equals(order_col.alias) || col.expression.equals(order_exp)) {
      orig_col=col;
      break;
    }
  }
  if (orig_col != null) {
    orig_col.orderBy=true;
    orig_col.ascending=order_col.ascending;
    order_col.alias=orig_col.alias;
    order_col.columnName=orig_col.columnName;
    order_col.tableName=orig_col.tableName;
  }
  assert(!(order_exp instanceof ConstantValueExpression));
  assert(!(order_exp instanceof ParameterValueExpression));
  insertAggExpressionsToAggResultColumns(aggregationList,order_col);
  if (aggregationList.size() >= 1) {
    hasAggregateExpression=true;
  }
  List<TupleValueExpression> tveList=new ArrayList<TupleValueExpression>();
  findAllTVEs(order_col.expression,tveList);
  insertTVEsToAggResultColumns(tveList);
  orderColumns.add(order_col);
}
