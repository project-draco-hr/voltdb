{
  if (m_windowedExpressions.size() > 0) {
    if (m_windowedExpressions.size() > 1) {
      throw new PlanningErrorException("Only one windowed function call may appear in a selection list.");
    }
    WindowedExpression windowedExpression=m_windowedExpressions.get(0);
    List<AbstractExpression> orderByExpressions=windowedExpression.getOrderByExpressions();
    ExpressionType exprType=windowedExpression.getExpressionType();
switch (exprType) {
case AGGREGATE_WINDOWED_RANK:
case AGGREGATE_WINDOWED_DENSE_RANK:
      if (orderByExpressions.size() == 0) {
        String aggName=exprType.symbol().toUpperCase();
        throw new PlanningErrorException(String.format("Windowed %s function call expressions require an ORDER BY specification.",aggName));
      }
    if (orderByExpressions.size() > 1) {
      throw new PlanningErrorException("Windowed function call expressions can have only one ORDER BY expression in their window.");
    }
  VoltType valType=orderByExpressions.get(0).getValueType();
if (!valType.isAnyIntegerType() && (valType != VoltType.TIMESTAMP)) {
  throw new PlanningErrorException("Windowed function call expressions can have only integer or TIMESTAMP value types in the ORDER BY expression of their window.");
}
break;
default :
{
String opName=(exprType == null) ? "NULL" : exprType.symbol();
throw new PlanningErrorException("Unknown windowed aggregate function type: " + opName);
}
}
}
}
