{
  Set<AbstractExpression> exprs=super.findAllSubexpressionsOfClass(aeClass);
  if (m_having != null) {
    Collection<AbstractExpression> found=m_having.findAllSubexpressionsOfClass(aeClass);
    if (!found.isEmpty()) {
      exprs.addAll(found);
    }
  }
  addAllSubexpressionsOfClassFromColList(exprs,aeClass,m_groupByColumns);
  if (m_projectSchema != null) {
    addAllSubexpressionsOfClassFromNodeSchema(exprs,aeClass,m_projectSchema);
  }
  addAllSubexpressionsOfClassFromColList(exprs,aeClass,m_aggResultColumns);
  if (m_avgPushdownHaving != null && m_avgPushdownHaving != m_having) {
    Collection<AbstractExpression> found=m_avgPushdownHaving.findAllSubexpressionsOfClass(aeClass);
    if (!found.isEmpty()) {
      exprs.addAll(found);
    }
  }
  if (m_avgPushdownGroupByColumns != null && m_avgPushdownGroupByColumns != m_groupByColumns) {
    addAllSubexpressionsOfClassFromColList(exprs,aeClass,m_avgPushdownGroupByColumns);
  }
  if (m_avgPushdownProjectSchema != null && m_avgPushdownProjectSchema != m_projectSchema) {
    addAllSubexpressionsOfClassFromNodeSchema(exprs,aeClass,m_avgPushdownProjectSchema);
  }
  if (m_avgPushdownAggResultColumns != null && m_avgPushdownAggResultColumns != m_aggResultColumns) {
    addAllSubexpressionsOfClassFromColList(exprs,aeClass,m_avgPushdownAggResultColumns);
  }
  return exprs;
}
