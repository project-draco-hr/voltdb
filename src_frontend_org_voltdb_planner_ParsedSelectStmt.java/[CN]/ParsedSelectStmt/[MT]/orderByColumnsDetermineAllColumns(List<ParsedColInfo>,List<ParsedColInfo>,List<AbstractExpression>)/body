{
  HashSet<AbstractExpression> orderByExprs=null;
  ArrayList<AbstractExpression> candidateExprHardCases=null;
  for (  ParsedColInfo candidateCol : candidateColumns) {
    AbstractExpression candidateExpr=candidateCol.expression;
    if (orderByExprs == null) {
      orderByExprs=new HashSet<AbstractExpression>();
      for (      ParsedColInfo orderByCol : orderColumns) {
        orderByExprs.add(orderByCol.expression);
      }
      addHonoraryOrderByExpressions(orderByExprs,candidateColumns);
    }
    if (orderByExprs.contains(candidateExpr)) {
      continue;
    }
    if (candidateExpr instanceof TupleValueExpression) {
      return false;
    }
    if (candidateExprHardCases == null) {
      candidateExprHardCases=new ArrayList<AbstractExpression>();
    }
    candidateExprHardCases.add(candidateExpr);
  }
  if (candidateExprHardCases == null) {
    return true;
  }
  HashSet<AbstractExpression> orderByTVEs=new HashSet<AbstractExpression>();
  ArrayList<AbstractExpression> orderByNonTVEs=new ArrayList<AbstractExpression>();
  ArrayList<List<AbstractExpression>> orderByNonTVEBaseTVEs=new ArrayList<List<AbstractExpression>>();
  HashSet<AbstractExpression> orderByAllBaseTVEs=new HashSet<AbstractExpression>();
  for (  AbstractExpression orderByExpr : orderByExprs) {
    if (orderByExpr instanceof TupleValueExpression) {
      orderByTVEs.add(orderByExpr);
      orderByAllBaseTVEs.add(orderByExpr);
    }
 else {
      orderByNonTVEs.add(orderByExpr);
      List<AbstractExpression> baseTVEs=orderByExpr.findAllTupleValueSubexpressions();
      orderByNonTVEBaseTVEs.add(baseTVEs);
      orderByAllBaseTVEs.addAll(baseTVEs);
    }
  }
  boolean result=true;
  for (  AbstractExpression candidateExpr : candidateExprHardCases) {
    Collection<AbstractExpression> candidateBases=candidateExpr.findAllTupleValueSubexpressions();
    if (orderByTVEs.containsAll(candidateBases)) {
      continue;
    }
    if (orderByAllBaseTVEs.containsAll(candidateBases) == false) {
      if (outNonOrdered == null) {
        return false;
      }
      result=false;
      outNonOrdered.add(candidateExpr);
      continue;
    }
    if (outNonOrdered == null) {
      return false;
    }
    outNonOrdered.add(candidateExpr);
    result=false;
  }
  return result;
}
