{
  detectComplexOrderby();
  if (isComplexOrderBy()) {
    boolean replaceAll=hasComplexAgg() || hasComplexGroupby();
    for (    ParsedColInfo orderCol : m_orderColumns) {
      AbstractExpression expr=orderCol.expression;
      if (replaceAll || expr.hasAnySubexpressionOfClass(AggregateExpression.class)) {
        orderCol.expression=expr.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
      }
    }
  }
 else   if (hasAggregateOrGroupby()) {
    Map<AbstractExpression,Integer> displayIndexMap=new HashMap<>();
    Map<Integer,ParsedColInfo> displayIndexToColumnMap=new HashMap<>();
    int orderByIndex=0;
    for (    ParsedColInfo col : m_displayColumns) {
      displayIndexMap.put(col.expression,orderByIndex);
      assert(col.alias != null);
      displayIndexToColumnMap.put(orderByIndex,col);
      orderByIndex++;
    }
    for (    ParsedColInfo orderCol : m_orderColumns) {
      AbstractExpression expr=orderCol.expression;
      expr=expr.replaceWithTVE(displayIndexMap,displayIndexToColumnMap);
      orderCol.expression=expr;
    }
  }
}
