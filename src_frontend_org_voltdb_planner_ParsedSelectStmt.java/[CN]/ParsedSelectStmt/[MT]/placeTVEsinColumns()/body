{
  Map<AbstractExpression,Integer> aggTableIndexMap=new HashMap<AbstractExpression,Integer>();
  Map<Integer,ParsedColInfo> indexToColumnMap=new HashMap<Integer,ParsedColInfo>();
  int index=0;
  for (  ParsedColInfo col : aggResultColumns) {
    aggTableIndexMap.put(col.expression,index);
    if (col.alias == null) {
      col.alias="$$_" + col.expression.getExpressionType().symbol() + "_$$_"+ index;
    }
    indexToColumnMap.put(index,col);
    index++;
  }
  newAggSchema=new NodeSchema();
  for (  ParsedColInfo col : displayColumns) {
    AbstractExpression expr=col.expression.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
    SchemaColumn schema_col=new SchemaColumn(col.tableName,col.columnName,col.alias,expr);
    newAggSchema.addColumn(schema_col);
  }
  for (  ParsedColInfo col : orderColumns) {
    AbstractExpression expr=col.expression.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
    col.expression=expr;
  }
  if (hasComplexGroupby()) {
    topGroupByExpressions=new HashMap<String,AbstractExpression>();
    for (    ParsedColInfo col : groupByColumns) {
      AbstractExpression expr=col.expression.replaceWithTVE(aggTableIndexMap,indexToColumnMap);
      topGroupByExpressions.put(col.alias,expr);
    }
  }
}
