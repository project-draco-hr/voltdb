{
  Table mvTable=tableList.get(0);
  String mvTableName=mvTable.getTypeName();
  Table srcTable=mvTable.getMaterializer();
  if (srcTable == null) {
    return false;
  }
  Column partitionCol=srcTable.getPartitioncolumn();
  if (partitionCol == null) {
    return false;
  }
  String partitionColName=partitionCol.getName();
  MaterializedViewInfo mvInfo=srcTable.getViews().get(mvTableName);
  if (displayColumns.size() == 1 && !isGrouped()) {
    AbstractExpression expr=displayColumns.get(0).expression;
    if (expr.getExpressionType() == ExpressionType.AGGREGATE_COUNT_STAR) {
      return false;
    }
  }
  boolean partitionColInGroupbyCols=false;
  String complexGroupbyJson=mvInfo.getGroupbyexpressionsjson();
  if (complexGroupbyJson.length() > 0) {
    List<AbstractExpression> mvComplexGroupbyCols=null;
    try {
      mvComplexGroupbyCols=AbstractExpression.fromJSONArrayString(complexGroupbyJson,m_db);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    mvFixInfo.numOfGroupByColumns=mvComplexGroupbyCols.size();
    for (    AbstractExpression expr : mvComplexGroupbyCols) {
      if (expr instanceof TupleValueExpression) {
        TupleValueExpression tve=(TupleValueExpression)expr;
        if (tve.getColumnName().equals(partitionColName)) {
          partitionColInGroupbyCols=true;
          break;
        }
      }
    }
  }
 else {
    CatalogMap<ColumnRef> mvSimpleGroupbyCols=mvInfo.getGroupbycols();
    mvFixInfo.numOfGroupByColumns=mvSimpleGroupbyCols.size();
    for (    ColumnRef colRef : mvSimpleGroupbyCols) {
      if (colRef.getColumn().getName().equals(partitionColName)) {
        partitionColInGroupbyCols=true;
        break;
      }
    }
  }
  if (partitionColInGroupbyCols) {
    return false;
  }
  mvFixInfo.mvTable=mvTable;
  mvFixInfo.mayNeedFixMVBasedDistributedQuery=true;
  if (isGrouped() || hasAggregateExpression()) {
    mvFixInfo.disableGroupbyAndAggQuery=true;
  }
  return true;
}
