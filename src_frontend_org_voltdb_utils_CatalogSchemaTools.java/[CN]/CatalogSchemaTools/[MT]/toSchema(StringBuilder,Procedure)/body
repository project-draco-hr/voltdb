{
  if (proc.getDefaultproc()) {
    return;
  }
  CatalogMap<GroupRef> roleList=proc.getAuthgroups();
  String add;
  String allowClause=new String();
  if (roleList.size() > 0) {
    add="\n" + spacer + "ALLOW ";
    for (    GroupRef role : roleList) {
      allowClause+=add + role.getGroup().getTypeName();
      add=", ";
    }
  }
  StringBuilder partitionClause=new StringBuilder();
  ProcedureAnnotation annot=(ProcedureAnnotation)proc.getAnnotation();
  if (proc.getSinglepartition()) {
    if (annot != null && annot.classAnnotated) {
      partitionClause.append("--Annotated Partitioning Takes Precedence Over DDL Procedure Partitioning Statement\n--");
    }
 else {
      partitionClause.append("\n");
    }
    partitionClause.append(spacer);
    partitionClause.append(String.format("PARTITION ON TABLE %s COLUMN %s",proc.getPartitiontable().getTypeName(),proc.getPartitioncolumn().getTypeName()));
    if (proc.getPartitionparameter() != 0) {
      partitionClause.append(String.format(" PARAMETER %s",String.valueOf(proc.getPartitionparameter())));
    }
  }
  if (!proc.getHasjava()) {
    sb.append(String.format("CREATE PROCEDURE %s%s%s\n%sAS\n%s%s",proc.getClassname(),allowClause,partitionClause.toString(),spacer,spacer,proc.getStatements().get("SQL").getSqltext().trim()));
  }
 else   if (proc.getLanguage().equals("JAVA")) {
    sb.append(String.format("CREATE PROCEDURE %s%s\n%sFROM CLASS %s",allowClause,partitionClause.toString(),spacer,proc.getClassname()));
  }
 else {
    sb.append(String.format("CREATE PROCEDURE %s%s%s\n%sAS ###%s### LANGUAGE GROOVY",proc.getClassname(),allowClause,partitionClause.toString(),spacer,annot.scriptImpl));
  }
  if (!sb.toString().endsWith(";")) {
    sb.append(";");
  }
  sb.append("\n\n");
}
