{
  String ret=null;
  CatalogMap<GroupRef> roleList=proc.getAuthgroups();
  String spacer="   ";
  String add;
  String roleNames=new String();
  if (roleList.size() > 0) {
    add="\n" + spacer + "ALLOW ";
    for (    GroupRef role : roleList) {
      roleNames+=add + role.getGroup().getTypeName();
      add=", ";
    }
  }
  if (proc.getDefaultproc()) {
    return "";
  }
  ProcedureAnnotation annot=(ProcedureAnnotation)proc.getAnnotation();
  if (!proc.getHasjava()) {
    ret="CREATE PROCEDURE " + proc.getTypeName() + roleNames+ "\n"+ spacer+ "AS\n";
    String sqlStmt=proc.getStatements().get("SQL").getSqltext().trim();
    if (sqlStmt.endsWith(";")) {
      ret+=spacer + sqlStmt + "\n";
    }
 else {
      ret+=spacer + sqlStmt + ";\n";
    }
  }
 else   if (proc.getLanguage().equals("JAVA")) {
    ret="CREATE PROCEDURE " + roleNames + "\n"+ spacer+ "FROM CLASS "+ proc.getClassname()+ ";\n";
  }
 else {
    ret="CREATE PROCEDURE " + proc.getTypeName() + roleNames+ "\n"+ spacer+ "AS ###";
    ret+=annot.scriptImpl + "### LANGUAGE GROOVY;\n";
  }
  if (proc.getSinglepartition()) {
    if (annot != null && annot.classAnnotated) {
      ret+="--Annotated Partitioning Takes Precedence Over DDL Procedure Partitioning Statement\n--";
    }
    ret+="PARTITION PROCEDURE " + proc.getTypeName() + " ON TABLE "+ proc.getPartitiontable().getTypeName()+ " COLUMN "+ proc.getPartitioncolumn().getTypeName();
    if (proc.getPartitionparameter() != 0)     ret+=" PARAMETER " + String.valueOf(proc.getPartitionparameter());
    ret+=";\n\n";
  }
 else {
    ret+="\n";
  }
  return ret;
}
