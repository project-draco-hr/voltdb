{
  String path=PACKAGE_NAME.replaceAll("\\.","/");
  File pkgdir=new File(outputDir,path);
  if (!pkgdir.exists()) {
    boolean ret=pkgdir.mkdirs();
    if (!ret) {
      System.out.println("Cannnot create directory: " + path);
      System.exit(1);
    }
  }
 else   if (!pkgdir.isDirectory()) {
    System.out.println(path + " is not a directory.");
    System.exit(1);
  }
  File file=new File(pkgdir,TYPE_NAME + ".java");
  FileWriter w=null;
  try {
    w=new FileWriter(file);
    w.write("// Do not edit!\n// File generated by org.apache.zookeeper" + ".version.util.VerGen.\n");
    w.write("/**\n");
    w.write("* Licensed to the Apache Software Foundation (ASF) under one\n");
    w.write("* or more contributor license agreements.  See the NOTICE file\n");
    w.write("* distributed with this work for additional information\n");
    w.write("* regarding copyright ownership.  The ASF licenses this file\n");
    w.write("* to you under the Apache License, Version 2.0 (the\n");
    w.write("* \"License\"); you may not use this file except in compliance\n");
    w.write("* with the License.  You may obtain a copy of the License at\n");
    w.write("*\n");
    w.write("*     http://www.apache.org/licenses/LICENSE-2.0\n");
    w.write("*\n");
    w.write("* Unless required by applicable law or agreed to in writing, software\n");
    w.write("* distributed under the License is distributed on an \"AS IS\" BASIS,\n");
    w.write("* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");
    w.write("* See the License for the specific language governing permissions and\n");
    w.write("* limitations under the License.\n");
    w.write("*/\n");
    w.write("\n");
    w.write("package " + PACKAGE_NAME + ";\n\n");
    w.write("public interface " + TYPE_NAME + " {\n");
    w.write("    public static final int MAJOR=" + version.maj + ";\n");
    w.write("    public static final int MINOR=" + version.min + ";\n");
    w.write("    public static final int MICRO=" + version.micro + ";\n");
    w.write("    public static final String QUALIFIER=" + (version.qualifier == null ? null : "\"" + version.qualifier + "\"") + ";\n");
    if (rev < 0) {
      System.out.println("Unknown REVISION number, using " + rev);
    }
    w.write("    public static final int REVISION=" + rev + ";\n");
    w.write("    public static final String BUILD_DATE=\"" + buildDate + "\";\n");
    w.write("}\n");
  }
 catch (  IOException e) {
    System.out.println("Unable to generate version.Info file: " + e.getMessage());
    System.exit(1);
  }
 finally {
    if (w != null) {
      try {
        w.close();
      }
 catch (      IOException e) {
        System.out.println("Unable to close file writer" + e.getMessage());
      }
    }
  }
}
