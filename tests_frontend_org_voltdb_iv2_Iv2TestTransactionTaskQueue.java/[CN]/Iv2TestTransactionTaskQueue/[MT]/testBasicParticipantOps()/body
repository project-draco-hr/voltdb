{
  long localTxnId=0;
  long mpTxnId=0;
  SiteTaskerQueue task_queue=new SiteTaskerQueue();
  TransactionTaskQueue dut=new TransactionTaskQueue(task_queue);
  Deque<TransactionTask> expected_order=new ArrayDeque<TransactionTask>();
  TransactionTask next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  assertEquals(0,dut.size());
  long blocking_mp_txnid=mpTxnId;
  next=createFrag(localTxnId++,mpTxnId++,dut);
  TransactionTask block=next;
  addTask(next,dut,expected_order);
  assertEquals(1,dut.size());
  ArrayDeque<TransactionTask> blocked=new ArrayDeque<TransactionTask>();
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,blocked);
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,blocked);
  next=createFrag(localTxnId++,mpTxnId++,dut);
  addTask(next,dut,blocked);
  assertEquals(blocked.size() + 1,dut.size());
  next=createComplete(next.getTransactionState(),next.getTxnId(),dut);
  addTask(next,dut,blocked);
  assertEquals(blocked.size() + 1,dut.size());
  System.out.println("blocked: " + blocked);
  next=createFrag(block.getTransactionState(),blocking_mp_txnid,dut);
  addTask(next,dut,expected_order);
  assertEquals(blocked.size() + 1,dut.size());
  next=createComplete(block.getTransactionState(),blocking_mp_txnid,dut);
  addTask(next,dut,expected_order);
  assertEquals(blocked.size() + 1,dut.size());
  block.getTransactionState().setDone();
  int offered=dut.flush();
  assertEquals(blocked.size(),offered);
  assertEquals(1,dut.size());
  expected_order.addAll(blocked);
  while (!expected_order.isEmpty()) {
    TransactionTask next_poll=(TransactionTask)task_queue.poll();
    TransactionTask expected=expected_order.removeFirst();
    assertEquals(expected.getSpHandle(),next_poll.getSpHandle());
    assertEquals(expected.getTxnId(),next_poll.getTxnId());
  }
}
