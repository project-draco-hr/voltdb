{
  long localTxnId=0;
  long mpTxnId=0;
  SiteTaskerQueue task_queue=new SiteTaskerQueue();
  TransactionTaskQueue dut=new TransactionTaskQueue(task_queue);
  Deque<TransactionTask> expected_order=new ArrayDeque<TransactionTask>();
  TransactionTask next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  assertEquals(0,dut.size());
  long blocking_mp_txnid=mpTxnId;
  next=createFrag(localTxnId + 3,mpTxnId++,dut,true);
  TransactionTask block=next;
  addTask(next,dut,null);
  assertEquals(0,dut.size());
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  next=createSpProc(localTxnId++,dut);
  addTask(next,dut,expected_order);
  localTxnId++;
  expected_order.addLast(block);
  assertEquals(0,dut.size());
  dut.offerMPSentinel(blocking_mp_txnid);
  assertEquals(1,dut.size());
  while (!expected_order.isEmpty() || !task_queue.isEmpty()) {
    TransactionTask next_poll=(TransactionTask)task_queue.poll();
    TransactionTask expected=expected_order.removeFirst();
    assertEquals(expected.getSpHandle(),next_poll.getSpHandle());
    assertEquals(expected.getTxnId(),next_poll.getTxnId());
  }
}
