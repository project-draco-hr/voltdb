{
  try {
    if (_state == STATE_HEADER)     throw new IllegalStateException("State==HEADER");
    prepareBuffers();
    if (_endp == null) {
      if (_needCRLF && _buffer != null)       _buffer.put(HttpTokens.CRLF);
      if (_needEOC && _buffer != null && !_head)       _buffer.put(LAST_CHUNK);
      _needCRLF=false;
      _needEOC=false;
      return 0;
    }
    int total=0;
    int len=-1;
    int to_flush=((_header != null && _header.length() > 0) ? 4 : 0) | ((_buffer != null && _buffer.length() > 0) ? 2 : 0) | ((_bypass && _content != null && _content.length() > 0) ? 1 : 0);
switch (to_flush) {
case 7:
      throw new IllegalStateException();
case 6:
    len=_endp.flush(_header,_buffer,null);
  break;
case 5:
len=_endp.flush(_header,_content,null);
break;
case 4:
len=_endp.flush(_header);
break;
case 3:
throw new IllegalStateException();
case 2:
len=_endp.flush(_buffer);
break;
case 1:
len=_endp.flush(_content);
break;
case 0:
{
if (_header != null) _header.clear();
_bypass=false;
_bufferChunked=false;
if (_buffer != null) {
_buffer.clear();
if (_contentLength == HttpTokens.CHUNKED_CONTENT) {
_buffer.setPutIndex(CHUNK_SPACE);
_buffer.setGetIndex(CHUNK_SPACE);
if (_content != null && _content.length() < _buffer.space() && _state != STATE_FLUSHING) {
_buffer.put(_content);
_content.clear();
_content=null;
}
}
}
if (!_needCRLF && !_needEOC && (_content == null || _content.length() == 0)) {
if (_state == STATE_FLUSHING) _state=STATE_END;
if (_state == STATE_END && _persistent != null && !_persistent && _status != 100 && _method == null) _endp.shutdownOutput();
}
 else prepareBuffers();
}
}
if (len > 0) total+=len;
return total;
}
 catch (IOException e) {
Log.ignore(e);
throw (e instanceof EofException) ? e : new EofException(e);
}
}
