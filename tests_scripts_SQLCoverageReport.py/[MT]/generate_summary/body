def generate_summary(output_dir, statistics):
    fd = open(os.path.join(output_dir, 'index.html'), 'w')
    topLine = getTopSummaryLine()
    content = ('\n<html>\n<head>\n<title>SQL Coverage Test Report</title>\n<style>\nh2 {text-transform: uppercase}\n</style>\n</head>\n\n<body>\n<h2>SQL Coverage Test Summary Grouped By Suites:</h2>\n<h3>Random Seed: %d</h3>\n<table border=1>\n<tr>\n<td rowspan=2 align=center>Test Suite</td>\n<td colspan=5 align=center>Statements</td>\n<td colspan=2 align=center>Test Failures</td>\n<td rowspan=2 align=center>Time<br>(min:sec)</td>\n</tr>\n<tr>%s</tr>\n' % (statistics['seed'], topLine))

    def bullets(name, stats):
        return ('<tr><td><a href="%s/index.html">%s</a></td>%s</tr>' % (name, name, stats))
    for suiteName in sorted(statistics.iterkeys()):
        if ((suiteName != 'seed') and (suiteName != 'totals') and (not suiteName.startswith('time_for_'))):
            content += bullets(suiteName, statistics[suiteName])
    content += ('<tr><td>Totals</td>%s</tr>\n</table>' % statistics['totals'])
    content += ('\n<p>Time: %s for generating all SQL statements' % statistics['time_for_gensql'])
    content += ('\n<br>Time: %s for running all VoltDB (JNI) statements' % statistics['time_for_voltdb'])
    content += ('\n<br>Time: %s for running all HSqlDB statements' % statistics['time_for_hsqldb'])
    content += ('\n<br>Time: %s for comparing all DB results</p>' % statistics['time_for_compare'])
    content += '\n</body>\n</html>\n'
    fd.write(content)
    fd.close()
