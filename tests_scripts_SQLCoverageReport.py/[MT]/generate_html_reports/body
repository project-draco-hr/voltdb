def generate_html_reports(suite, seed, statements_path, cmpdb_path, jni_path, output_dir, report_invalid, report_all, extra_stats='', cmpdb='HSqlDB', modified_sql_path=None, cntonly=False):
    if ((output_dir != None) and (not os.path.exists(output_dir))):
        os.makedirs(output_dir)
    statements_file = open(statements_path, 'rb')
    cmpdb_file = open(cmpdb_path, 'rb')
    jni_file = open(jni_path, 'rb')
    if modified_sql_path:
        modified_sql_file = open(modified_sql_path, 'rb')
    else:
        modified_sql_file = None
    modified_sql = {}
    failures = 0
    count = 0
    mismatches = []
    crashed = []
    voltdb_npes = []
    cmpdb_npes = []
    invalid = []
    all_results = []
    try:
        while True:
            try:
                statement = cPickle.load(statements_file)
            except EOFError:
                break
            notFound = False
            try:
                jni = cPickle.load(jni_file)
            except EOFError as e:
                notFound = True
                jni = {'Status': (-99), 'Exception': 'None', 'Result': None, 'Info': '<p style="color:red">RESULT NOT FOUND! Probably due to a VoltDB crash!</p>', }
            try:
                cdb = cPickle.load(cmpdb_file)
            except EOFError as e:
                notFound = True
                cdb = {'Status': (-98), 'Exception': 'None', 'Result': None, 'Info': (('<p style="color:red">RESULT NOT FOUND! Probably due to a ' + cmpdb) + ' backend crash!</p>'), }
            count += 1
            if (int(jni['Status']) != 1):
                failures += 1
                if report_invalid:
                    invalid.append(statement)
            statement['jni'] = jni
            statement['cmp'] = cdb
            if notFound:
                crashed.append(statement)
            elif is_different(statement, cntonly):
                mismatches.append(statement)
            if ('NullPointerException' in str(jni)):
                voltdb_npes.append(statement)
            if ('NullPointerException' in str(cdb)):
                cmpdb_npes.append(statement)
            if report_all:
                all_results.append(statement)
    except EOFError as e:
        raise IOError(('Not enough results for generated statements: %s' % str(e)))
    statements_file.close()
    cmpdb_file.close()
    jni_file.close()
    if modified_sql_file:
        try:
            while True:
                try:
                    orig_sql = modified_sql_file.readline().rstrip('\n').replace('original SQL: ', '')
                    mod_sql = modified_sql_file.readline().rstrip('\n').replace('modified SQL: ', '')
                    if (orig_sql and mod_sql):
                        modified_sql[orig_sql] = mod_sql
                    else:
                        break
                except EOFError as e:
                    break
        except Error as e:
            raise IOError(('Unable to read modified SQL file: %s\n  %s' % (modified_sql_path, str(e))))
    topLines = getTopSummaryLines(cmpdb, False)
    currentTime = datetime.datetime.now().strftime('%A, %B %d, %I:%M:%S %p')
    keyStats = createSummaryInHTML(count, failures, len(mismatches), len(voltdb_npes), len(cmpdb_npes), extra_stats, seed)
    report = ('\n<html>\n<head>\n<title>SQL Coverage Test Report</title>\n<style>\nh2 {text-transform: uppercase}\n</style>\n</head>\n\n<body>\n    <h2>Test Suite Name: %s</h2>\n    <h4>Random Seed: <b>%d</b></h4>\n    <p>This report was generated on <b>%s</b></p>\n    <table border=1>\n    %s\n' % (suite, seed, currentTime, topLines))
    report += ('\n<tr>%s</tr>\n</table>\n' % keyStats)

    def key(x):
        return int(x['id'])
    if (len(mismatches) > 0):
        sorted(mismatches, cmp=cmp, key=key)
        report += print_section('Mismatched Statements', mismatches, output_dir, cmpdb, modified_sql)
    if (len(crashed) > 0):
        sorted(crashed, cmp=cmp, key=key)
        report += print_section('Statements Missing Results, due to a Crash<br>(the first one probably caused the crash)', crashed, output_dir, cmpdb, modified_sql)
    if (len(voltdb_npes) > 0):
        sorted(voltdb_npes, cmp=cmp, key=key)
        report += print_section('Statements That Cause a NullPointerException (NPE) in VoltDB', voltdb_npes, output_dir, cmpdb, modified_sql)
    if (len(cmpdb_npes) > 0):
        sorted(cmpdb_npes, cmp=cmp, key=key)
        report += print_section(('Statements That Cause a NullPointerException (NPE) in ' + cmpdb), cmpdb_npes, output_dir, cmpdb, modified_sql)
    if (report_invalid and (len(invalid) > 0)):
        report += print_section('Invalid Statements', invalid, output_dir, cmpdb, modified_sql)
    if report_all:
        report += print_section('Total Statements', all_results, output_dir, cmpdb, modified_sql)
    report += '\n</body>\n</html>\n'
    if (output_dir != None):
        summary = open(os.path.join(output_dir, 'index.html'), 'w')
        summary.write(report.encode('utf-8'))
        summary.close()
    results = {}
    results['mis'] = len(mismatches)
    results['keyStats'] = keyStats
    return results
