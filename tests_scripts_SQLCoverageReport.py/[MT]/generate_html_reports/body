def generate_html_reports(report, output_dir, report_all, is_matching=False):
    'report: It can be the filename of the XML report, or the actual Python\n    object of the report.\n    '
    if isinstance(report, basestring):
        parser = XMLParser(report)
        result = parser.get_data()
    else:
        result = report
    map(deserialize, result['Statements'])
    if ((output_dir != None) and (not os.path.exists(output_dir))):
        os.makedirs(output_dir)
    failures = 0
    for r in result['Statements']:
        if (int(r['jni']['Status']) != 1):
            failures += 1
    report = ('\n<html>\n<head>\n<title>SQL Coverage Test Report</title>\n<style>\nh2 {text-transform: uppercase}\n</style>\n</head>\n\n<body>\nRandom seed: %s\n<br/>\nTotal statements: %d\n<br/>\nFailed (*not* necessarily mismatched) statements: %d\n' % (result['Seed'], len(result['Statements']), failures))
    is_same = (lambda x: (not is_different(x)))
    if is_matching:
        mismatches = filter(is_same, result['Statements'])
    else:
        mismatches = filter(is_different, result['Statements'])

    def key(x):
        return int(x['id'])
    sorted(mismatches, cmp=cmp, key=key)
    report += print_section('Mismatched Statements', mismatches, output_dir)
    if report_all:
        report += print_section('Total Statements', result['Statements'], output_dir)
    report += '\n</body>\n</html>\n'
    if (output_dir != None):
        summary = open(os.path.join(output_dir, 'index.html'), 'w')
        summary.write(report.encode('utf-8'))
        summary.close()
    return (failures, len(mismatches))
