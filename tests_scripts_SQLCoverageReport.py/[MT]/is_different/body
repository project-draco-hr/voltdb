def is_different(x, cntonly):
    'Notes the attributes that are different. Since the whole table will be\n    printed out as a single string.\n    the first line is column count,\n    the second line is row count,\n    the third line is column names and types,\n    followed by rows.\n    '
    jni = x['jni']
    hsql = x['hsqldb']
    if (jni['Status'] != hsql['Status']):
        if ((int(jni['Status']) > 0) or (int(hsql['Status']) > 0)):
            x['highlight'] = 'Status'
            return True
        return False
    if (int(jni['Status']) <= 0):
        return False
    jniResult = jni['Result']
    hsqlResult = hsql['Result']
    if ((not jniResult) or (not hsqlResult)):
        x['highlight'] = 'Result'
        return True
    jniColumns = jniResult.columns
    hsqlColumns = hsqlResult.columns
    nColumns = len(jniColumns)
    if (nColumns != len(hsqlColumns)):
        x['highlight'] = 'Columns'
        return True
    jniTuples = jniResult.tuples
    hsqlTuples = hsqlResult.tuples
    if (len(jniTuples) != len(hsqlTuples)):
        x['highlight'] = 'Tuples'
        return True
    if cntonly:
        return False
    for ii in xrange(len(jniTuples)):
        if (jniTuples[ii] == hsqlTuples[ii]):
            continue
        column_problem = False
        for jj in xrange(nColumns):
            if (jniTuples[ii][jj] == hsqlTuples[ii][jj]):
                continue
            if ((jniColumns[jj].type == FastSerializer.VOLTTYPE_FLOAT) and (hsqlColumns[jj].type == FastSerializer.VOLTTYPE_DECIMAL)):
                if (decimal.Decimal(str(jniTuples[ii][jj])) == hsqlTuples[ii][jj]):
                    continue
                print 'INFO is_different -- float-to-decimal conversion did not help convert between values:', 'jni:(', jniTuples[ii][jj], ') and hsql:(', hsqlTuples[ii][jj], ').'
                print 'INFO is_different -- float-to-decimal conversion stages:', ' from jniTuples[ii][jj] of type:', type(jniTuples[ii][jj]), ' to hsqlTuples[ii][jj] of type:', type(hsqlTuples[ii][jj]), ' via str(jniTuples[ii][jj]):', str(jniTuples[ii][jj]), ' of type: ', type(str(jniTuples[ii][jj])), ' via decimal.Decimal(str(jniTuples[ii][jj])):', decimal.Decimal(str(jniTuples[ii][jj])), ' of type: ', type(decimal.Decimal(str(jniTuples[ii][jj])))
            column_problem = True
        if column_problem:
            if (not x.get('highlight')):
                x['highlight'] = []
            x['highlight'].append(ii)
    if x.get('highlight'):
        return True
    return False
