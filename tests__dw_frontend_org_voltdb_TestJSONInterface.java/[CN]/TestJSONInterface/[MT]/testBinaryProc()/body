{
  try {
    String simpleSchema="CREATE TABLE foo (\n" + "    bar BIGINT NOT NULL,\n" + "    b VARBINARY(256) DEFAULT NULL,\n"+ "    PRIMARY KEY (bar)\n"+ ");";
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addLiteralSchema(simpleSchema);
    builder.addPartitionInfo("foo","bar");
    builder.addStmtProcedure("Insert","insert into foo values (?, ?);");
    builder.setHTTPDPort(8095);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"));
    assertTrue(success);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    String varString="Procedure=Insert&Parameters=[5,\"aa\"]";
    String response=callProcOverJSONRaw(varString,200);
    System.out.println(response);
    Response r=responseFromJSON(response);
    assertEquals(ClientResponse.SUCCESS,r.status);
    varString="Procedure=Insert&Parameters=[6,\"aaa\"]";
    response=callProcOverJSONRaw(varString,200);
    System.out.println(response);
    r=responseFromJSON(response);
    assertEquals(ClientResponse.GRACEFUL_FAILURE,r.status);
    varString="Procedure=Insert&Parameters=[7,\"aaay\"]";
    response=callProcOverJSONRaw(varString,200);
    System.out.println(response);
    r=responseFromJSON(response);
    assertEquals(ClientResponse.GRACEFUL_FAILURE,r.status);
    varString="Procedure=Insert&Parameters=[8,NULL]";
    response=callProcOverJSONRaw(varString,200);
    System.out.println(response);
    r=responseFromJSON(response);
    assertEquals(ClientResponse.SUCCESS,r.status);
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
  }
}
