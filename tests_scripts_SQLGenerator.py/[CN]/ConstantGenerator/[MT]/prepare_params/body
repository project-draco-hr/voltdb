def prepare_params(self, attribute_groups):
    self.__type = attribute_groups[BaseGenerator.TYPE_PATTERN_GROUP]
    if (not self.__type):
        print 'Generator parse error -- invalid type:', self.__type
        assert self.__type
    min = attribute_groups[BaseGenerator.MIN_VALUE_PATTERN_GROUP]
    max = attribute_groups[BaseGenerator.MAX_VALUE_PATTERN_GROUP]
    latmin = attribute_groups[BaseGenerator.MIN_LAT_PATTERN_GROUP]
    latmax = attribute_groups[BaseGenerator.MAX_LAT_PATTERN_GROUP]
    numholes = attribute_groups[BaseGenerator.NUM_HOLES_PATTERN_GROUP]
    self.__value_generator = ConstantGenerator.TYPES[self.__type]()
    if ((min is not None) and (max is not None)):
        if (latmin is not None):
            if (latmax is not None):
                self.__value_generator.set_min_max(min, max, latmin, latmax)
            else:
                self.__value_generator.set_min_max(min, max, latmin)
        else:
            self.__value_generator.set_min_max(min, max)
    if (numholes is not None):
        self.__value_generator.set_count(numholes)
    nullpct = attribute_groups[BaseGenerator.NULL_PCT_PATTERN_GROUP]
    if nullpct:
        self.__value_generator.set_nullpct(int(nullpct))
