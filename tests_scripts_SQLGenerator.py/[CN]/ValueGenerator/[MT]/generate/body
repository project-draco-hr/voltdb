def generate(self, statement, params):
    'params is a place holder here, not used.\n        '
    assert (self.__type != None)
    if (self.__type in self.__class__.TYPES):
        type = self.__class__.TYPES
    else:
        type = self.__class__.UNIQUE_TYPES
    if ((self.__range != None) and (None not in self.__range)):
        values = type[self.__type](int(self.__range[0]), int(self.__range[1]))
    else:
        values = type[self.__type]()
    for i in values.generate(COUNT):
        if (IS_VOLT and (self.__type == 'date')):
            i = (i * 1000)
        if isinstance(i, basestring):
            i = (u"'%s'" % i)
        elif isinstance(i, float):
            i = (u'%.20e' % i)
        yield statement.replace(self.__fn, unicode(i), 1)
