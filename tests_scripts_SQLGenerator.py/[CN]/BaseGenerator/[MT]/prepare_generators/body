@classmethod
def prepare_generators(cls, statement, schema, generator_types):
    'prepare fields and generators for each generator pattern in statement.\n        '
    new_generators = []
    field_map = {}
    prior_generators = {}
    for ctor in generator_types:
        substitute_for_geo_types = False
        if ((str(ctor) == 'SQLGenerator.ColumnGenerator') and statement.startswith('SELECT') and (('WHERE' not in statement) or ('B9' in statement))):
            substitute_for_geo_types = True
        while True:
            another_gen = ctor()
            (rewrite, field_name) = another_gen.prepare_fields(statement)
            if rewrite:
                if substitute_for_geo_types:
                    prior_generators = another_gen.configure_from_schema(schema, prior_generators, True)
                else:
                    prior_generators = another_gen.configure_from_schema(schema, prior_generators)
                field_map[field_name] = another_gen
                new_generators.append(another_gen)
                statement = rewrite
            else:
                break
    return (statement, new_generators, field_map)
