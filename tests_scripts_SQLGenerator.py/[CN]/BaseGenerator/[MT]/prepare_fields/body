def prepare_fields(self, statement):
    "replace with a unique field name a definition with the generator's token and any\n           (like-labeled) occurrences.\n           Call prepare_params to initialize the generator with parameters from its definition.\n           Return the modified statement, or None if there is no matching token in the statement.\n        "
    definition = self._expr_builder(self.__token)
    match = definition.search(statement)
    if (not match):
        return (None, None)
    self.__label = match.group(BaseGenerator.LABEL_PATTERN_GROUP)
    self.__fn = self.fn_gen.next()
    rewrite = definition.sub(self.__fn, statement, 1)
    self.prepare_params(match.groupdict())
    if self.__label:
        recurrence = self._recurrence_builder(self.__token, self.__label)
        rewrite = recurrence.sub(self.__fn, rewrite, 0)
    return (rewrite, self.__fn)
