def pick_columns(self, table_count, count, tables, type=None):
    'Returns count number of column names of the same column type.\n\n        If no column type has at least count number of columns, None is returned.\n        '
    col_per_table = (count / (((table_count == 0) and 1) or table_count))
    if (len(self.__schema) < table_count):
        return
    if (not tables):
        table_space = filter((lambda x: self.__filter(x, type, col_per_table)), self.__schema.keys())
        try:
            tables.extend(random.sample(table_space, table_count))
        except:
            return
    for t in self.__types:
        candidates = []
        for table in tables:
            tmp = list(map((lambda x: '.'.join((table, x[0]))), filter((lambda x: (((x[1] == t) and True) or False)), self.__schema[table]['columns'])))
            if (not tmp):
                candidates = []
                break
            candidates.extend(tmp)
        for result in permutations(candidates, count):
            yield result
