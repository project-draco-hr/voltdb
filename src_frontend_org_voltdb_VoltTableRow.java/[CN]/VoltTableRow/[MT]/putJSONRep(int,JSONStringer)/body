{
  long value;
  double dvalue;
  VoltType columnType=getColumnType(columnIndex);
switch (columnType) {
case TINYINT:
    value=getLong(columnIndex);
  if (wasNull())   js.value(null);
 else   js.value(value);
break;
case SMALLINT:
value=getLong(columnIndex);
if (wasNull()) js.value(null);
 else js.value(value);
break;
case INTEGER:
value=getLong(columnIndex);
if (wasNull()) js.value(null);
 else js.value(value);
break;
case BIGINT:
value=getLong(columnIndex);
if (wasNull()) js.value(null);
 else js.value(value);
break;
case TIMESTAMP:
value=getTimestampAsLong(columnIndex);
if (wasNull()) js.value(null);
 else js.value(value);
break;
case FLOAT:
dvalue=getDouble(columnIndex);
if (wasNull()) js.value(null);
 else js.value(dvalue);
break;
case STRING:
js.value(getString(columnIndex));
break;
case VARBINARY:
byte[] bin=getVarbinary(columnIndex);
js.value(Encoder.hexEncode(bin));
break;
case DECIMAL:
Object dec=getDecimalAsBigDecimal(columnIndex);
if (wasNull()) js.value(null);
 else js.value(dec.toString());
break;
case POINT:
case GEOGRAPHY:
throw new IllegalArgumentException("Instances of GEOGRAPHY and POINT are not yet serializable to JSON");
case INVALID:
break;
case NULL:
break;
case NUMERIC:
break;
case BOOLEAN:
break;
case VOLTTABLE:
break;
}
}
