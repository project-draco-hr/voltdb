'Unit test for the gtest_xml_output module'
__author__ = 'eefacm@gmail.com (Sean Mcafee)'
import datetime
import errno
import os
import re
import sys
from xml.dom import minidom, Node
import gtest_test_utils
import gtest_xml_test_utils
GTEST_FILTER_FLAG = '--gtest_filter'
GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'
GTEST_OUTPUT_FLAG = '--gtest_output'
GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'
GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'
SUPPORTS_STACK_TRACES = False
if SUPPORTS_STACK_TRACES:
    STACK_TRACE_TEMPLATE = '\nStack trace:\n*'
else:
    STACK_TRACE_TEMPLATE = ''
EXPECTED_NON_EMPTY_XML = ('<?xml version="1.0" encoding="UTF-8"?>\n<testsuites tests="23" failures="4" disabled="2" errors="0" time="*" timestamp="*" name="AllTests" ad_hoc_property="42">\n  <testsuite name="SuccessfulTest" tests="1" failures="0" disabled="0" errors="0" time="*">\n    <testcase name="Succeeds" status="run" time="*" classname="SuccessfulTest"/>\n  </testsuite>\n  <testsuite name="FailedTest" tests="1" failures="1" disabled="0" errors="0" time="*">\n    <testcase name="Fails" status="run" time="*" classname="FailedTest">\n      <failure message="gtest_xml_output_unittest_.cc:*&#x0A;Value of: 2&#x0A;Expected: 1" type=""><![CDATA[gtest_xml_output_unittest_.cc:*\nValue of: 2\nExpected: 1%(stack)s]]></failure>\n    </testcase>\n  </testsuite>\n  <testsuite name="MixedResultTest" tests="3" failures="1" disabled="1" errors="0" time="*">\n    <testcase name="Succeeds" status="run" time="*" classname="MixedResultTest"/>\n    <testcase name="Fails" status="run" time="*" classname="MixedResultTest">\n      <failure message="gtest_xml_output_unittest_.cc:*&#x0A;Value of: 2&#x0A;Expected: 1" type=""><![CDATA[gtest_xml_output_unittest_.cc:*\nValue of: 2\nExpected: 1%(stack)s]]></failure>\n      <failure message="gtest_xml_output_unittest_.cc:*&#x0A;Value of: 3&#x0A;Expected: 2" type=""><![CDATA[gtest_xml_output_unittest_.cc:*\nValue of: 3\nExpected: 2%(stack)s]]></failure>\n    </testcase>\n    <testcase name="DISABLED_test" status="notrun" time="*" classname="MixedResultTest"/>\n  </testsuite>\n  <testsuite name="XmlQuotingTest" tests="1" failures="1" disabled="0" errors="0" time="*">\n    <testcase name="OutputsCData" status="run" time="*" classname="XmlQuotingTest">\n      <failure message="gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;XML output: &lt;?xml encoding=&quot;utf-8&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;" type=""><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed\nXML output: <?xml encoding="utf-8"><top><![CDATA[cdata text]]>]]&gt;<![CDATA[</top>%(stack)s]]></failure>\n    </testcase>\n  </testsuite>\n  <testsuite name="InvalidCharactersTest" tests="1" failures="1" disabled="0" errors="0" time="*">\n    <testcase name="InvalidCharactersInMessage" status="run" time="*" classname="InvalidCharactersTest">\n      <failure message="gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []" type=""><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed\nInvalid characters in brackets []%(stack)s]]></failure>\n    </testcase>\n  </testsuite>\n  <testsuite name="DisabledTest" tests="1" failures="0" disabled="1" errors="0" time="*">\n    <testcase name="DISABLED_test_not_run" status="notrun" time="*" classname="DisabledTest"/>\n  </testsuite>\n  <testsuite name="PropertyRecordingTest" tests="4" failures="0" disabled="0" errors="0" time="*" SetUpTestCase="yes" TearDownTestCase="aye">\n    <testcase name="OneProperty" status="run" time="*" classname="PropertyRecordingTest" key_1="1"/>\n    <testcase name="IntValuedProperty" status="run" time="*" classname="PropertyRecordingTest" key_int="1"/>\n    <testcase name="ThreeProperties" status="run" time="*" classname="PropertyRecordingTest" key_1="1" key_2="2" key_3="3"/>\n    <testcase name="TwoValuesForOneKeyUsesLastValue" status="run" time="*" classname="PropertyRecordingTest" key_1="2"/>\n  </testsuite>\n  <testsuite name="NoFixtureTest" tests="3" failures="0" disabled="0" errors="0" time="*">\n     <testcase name="RecordProperty" status="run" time="*" classname="NoFixtureTest" key="1"/>\n     <testcase name="ExternalUtilityThatCallsRecordIntValuedProperty" status="run" time="*" classname="NoFixtureTest" key_for_utility_int="1"/>\n     <testcase name="ExternalUtilityThatCallsRecordStringValuedProperty" status="run" time="*" classname="NoFixtureTest" key_for_utility_string="1"/>\n  </testsuite>\n  <testsuite name="Single/ValueParamTest" tests="4" failures="0" disabled="0" errors="0" time="*">\n    <testcase name="HasValueParamAttribute/0" value_param="33" status="run" time="*" classname="Single/ValueParamTest" />\n    <testcase name="HasValueParamAttribute/1" value_param="42" status="run" time="*" classname="Single/ValueParamTest" />\n    <testcase name="AnotherTestThatHasValueParamAttribute/0" value_param="33" status="run" time="*" classname="Single/ValueParamTest" />\n    <testcase name="AnotherTestThatHasValueParamAttribute/1" value_param="42" status="run" time="*" classname="Single/ValueParamTest" />\n  </testsuite>\n  <testsuite name="TypedTest/0" tests="1" failures="0" disabled="0" errors="0" time="*">\n    <testcase name="HasTypeParamAttribute" type_param="*" status="run" time="*" classname="TypedTest/0" />\n  </testsuite>\n  <testsuite name="TypedTest/1" tests="1" failures="0" disabled="0" errors="0" time="*">\n    <testcase name="HasTypeParamAttribute" type_param="*" status="run" time="*" classname="TypedTest/1" />\n  </testsuite>\n  <testsuite name="Single/TypeParameterizedTestCase/0" tests="1" failures="0" disabled="0" errors="0" time="*">\n    <testcase name="HasTypeParamAttribute" type_param="*" status="run" time="*" classname="Single/TypeParameterizedTestCase/0" />\n  </testsuite>\n  <testsuite name="Single/TypeParameterizedTestCase/1" tests="1" failures="0" disabled="0" errors="0" time="*">\n    <testcase name="HasTypeParamAttribute" type_param="*" status="run" time="*" classname="Single/TypeParameterizedTestCase/1" />\n  </testsuite>\n</testsuites>' % {'stack': STACK_TRACE_TEMPLATE, })
EXPECTED_FILTERED_TEST_XML = '<?xml version="1.0" encoding="UTF-8"?>\n<testsuites tests="1" failures="0" disabled="0" errors="0" time="*"\n            timestamp="*" name="AllTests" ad_hoc_property="42">\n  <testsuite name="SuccessfulTest" tests="1" failures="0" disabled="0"\n             errors="0" time="*">\n    <testcase name="Succeeds" status="run" time="*" classname="SuccessfulTest"/>\n  </testsuite>\n</testsuites>'
EXPECTED_EMPTY_XML = '<?xml version="1.0" encoding="UTF-8"?>\n<testsuites tests="0" failures="0" disabled="0" errors="0" time="*"\n            timestamp="*" name="AllTests">\n</testsuites>'
GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)
SUPPORTS_TYPED_TESTS = ('TypedTest' in gtest_test_utils.Subprocess([GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output)
if (__name__ == '__main__'):
    os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'
    gtest_test_utils.Main()
