{
  MiscUtils.deleteRecursively(m_tempRoot);
  m_dataDirectory=new File(m_tempRoot,Long.toString(System.identityHashCode(this),Character.MAX_RADIX));
  m_mockVoltDB=new MockVoltDB();
  m_mockVoltDB.addSite(CoreUtils.getHSIdFromHostAndSite(m_host,m_site),m_part);
  VoltDB.replaceVoltDBInstanceForTest(m_mockVoltDB);
  m_exportGeneration=new ExportGeneration(0L,m_doOnDrain,m_dataDirectory);
  m_exportGeneration.initializeGenerationFromCatalog(m_connector,m_mockVoltDB.m_hostId,m_mockVoltDB.getHostMessenger(),(List)ImmutableList.of(Pair.of(m_part,CoreUtils.getHSIdFromHostAndSite(m_host,m_site))));
  m_mbox=new LocalMailbox(m_mockVoltDB.getHostMessenger()){
    @Override public void deliver(    VoltMessage message){
      assertThat(message,m_ackMatcherRef.get());
      m_mbxNotifyCdlRef.get().countDown();
    }
  }
;
  m_mockVoltDB.getHostMessenger().createMailbox(null,m_mbox);
  m_mockVoltDB.getHostMessenger().registerMailbox(m_mbox);
  m_zk=m_mockVoltDB.getHostMessenger().getZK();
  SiteTracker siteTracker=m_mockVoltDB.getSiteTrackerForSnapshot();
  List<ZKUtil.StringCallback> cbs=new ArrayList<ZKUtil.StringCallback>();
  for (  Long site : siteTracker.getSitesForHost(m_mockVoltDB.m_hostId)) {
    Integer partition=siteTracker.getPartitionForSite(site);
    String zkPath=VoltZK.exportGenerations + "/0/mailboxes" + "/"+ partition+ "/"+ m_mbox.getHSId();
    cbs.add(ZKUtil.asyncMkdirs(m_zk,zkPath));
  }
  for (  ZKUtil.StringCallback cb : cbs) {
    cb.get();
  }
  m_expDs=m_exportGeneration.m_dataSourcesByPartition.get(m_part).get(m_tableSignature);
  m_zkPartitionDN=VoltZK.exportGenerations + "/0/mailboxes" + "/"+ m_part;
}
