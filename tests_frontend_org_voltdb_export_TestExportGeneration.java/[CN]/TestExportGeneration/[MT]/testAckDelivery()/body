{
  ByteBuffer foo=ByteBuffer.allocate(20);
  int retries=4000;
  long size=m_expDs.sizeInBytes();
  m_exportGeneration.pushExportBuffer(m_part,m_tableSignature,0,0,foo.duplicate(),false,false);
  while (--retries >= 0 && size == m_expDs.sizeInBytes()) {
    try {
      Thread.sleep(2);
    }
 catch (    InterruptedException iex) {
      Throwables.propagate(iex);
    }
  }
  assertTrue("timeout on data source size poll",retries >= 0);
  assertEquals("unexpected data sources size",foo.capacity(),m_expDs.sizeInBytes());
  retries=4000;
  size=m_expDs.sizeInBytes();
  Long hsid=getOtherMailboxHsid();
  assertNotNull("other mailbox not listed in zookeeper",hsid);
  m_mbox.send(hsid,new AckPayloadMessage(m_part,m_tableSignature,foo.capacity()).asVoltMessage());
  while (--retries >= 0 && size == m_expDs.sizeInBytes()) {
    try {
      Thread.sleep(2);
    }
 catch (    InterruptedException iex) {
      Throwables.propagate(iex);
    }
  }
  assertTrue("timeout on data source size poll",retries >= 0);
  assertEquals("unexpected data sources size",0,m_expDs.sizeInBytes());
}
