{
  errorString=null;
  String hostname=CoreUtils.getHostnameOrAddress();
  if (fragmentId == SysProcFragmentId.PF_snapshotScan) {
    final VoltTable results=constructFragmentResultsTable();
    if (context.isLowestSiteId()) {
      assert(params.toArray()[0] != null);
      assert(params.toArray()[0] instanceof String);
      final String path=(String)params.toArray()[0];
      List<File> relevantFiles=retrieveRelevantFiles(path);
      if (relevantFiles == null) {
        results.addRow(context.getHostId(),hostname,"","",0,0,"","FALSE",0,"","",0,"","FAILURE",errorString);
      }
 else {
        for (        final File f : relevantFiles) {
          if (f.getName().endsWith(".digest")) {
            continue;
          }
          if (f.canRead()) {
            try {
              FileInputStream savefile_input=new FileInputStream(f);
              try {
                TableSaveFile savefile=new TableSaveFile(savefile_input.getChannel(),1,null);
                String partitions="";
                for (                int partition : savefile.getPartitionIds()) {
                  partitions=partitions + "," + partition;
                }
                if (partitions.startsWith(",")) {
                  partitions=partitions.substring(1);
                }
                results.addRow(context.getHostId(),hostname,f.getParent(),f.getName(),savefile.getTxnId(),org.voltdb.TransactionIdManager.getTimestampFromTransactionId(savefile.getTxnId()),savefile.getTableName(),savefile.getCompleted() ? "TRUE" : "FALSE",f.length(),savefile.isReplicated() ? "TRUE" : "FALSE",partitions,savefile.getTotalPartitions(),f.canRead() ? "TRUE" : "FALSE","SUCCESS","");
              }
 catch (              IOException e) {
                SNAP_LOG.warn(e);
              }
 finally {
                savefile_input.close();
              }
            }
 catch (            IOException e) {
              SNAP_LOG.warn(e);
            }
          }
 else {
            results.addRow(context.getHostId(),hostname,f.getParent(),f.getName(),0L,f.lastModified(),"","FALSE",f.length(),"FALSE","",-1,f.canRead() ? "TRUE" : "FALSE","SUCCESS","");
          }
        }
      }
    }
    return new DependencyPair(DEP_snapshotScan,results);
  }
 else   if (fragmentId == SysProcFragmentId.PF_snapshotScanResults) {
    TRACE_LOG.trace("Aggregating Snapshot Scan  results");
    assert(dependencies.size() > 0);
    final VoltTable results=VoltTableUtil.unionTables(dependencies.get(DEP_snapshotScan));
    return new DependencyPair(DEP_snapshotScanResults,results);
  }
 else   if (fragmentId == SysProcFragmentId.PF_snapshotDigestScan) {
    final VoltTable results=constructDigestResultsTable();
    if (context.isLowestSiteId()) {
      assert(params.toArray()[0] != null);
      assert(params.toArray()[0] instanceof String);
      final String path=(String)params.toArray()[0];
      List<File> relevantFiles=retrieveRelevantFiles(path);
      if (relevantFiles == null) {
        results.addRow(context.getHostId(),"","","","FAILURE",errorString);
      }
 else {
        for (        final File f : relevantFiles) {
          if (f.getName().endsWith(".vpt")) {
            continue;
          }
          if (f.canRead()) {
            try {
              HashSet<String> tableNames=new HashSet<String>();
              JSONObject digest=SnapshotUtil.CRCCheck(f,SNAP_LOG);
              if (digest == null)               continue;
              JSONArray tables=digest.getJSONArray("tables");
              for (int ii=0; ii < tables.length(); ii++) {
                tableNames.add(tables.getString(ii));
              }
              final StringWriter sw=new StringWriter();
              int ii=0;
              for (              String name : tableNames) {
                sw.append(name);
                if (ii != tableNames.size() - 1) {
                  sw.append(',');
                }
                ii++;
              }
              results.addRow(context.getHostId(),path,f.getName(),sw.toString(),"SUCCESS","");
            }
 catch (            Exception e) {
              SNAP_LOG.warn(e);
            }
          }
        }
      }
    }
    return new DependencyPair(DEP_snapshotDigestScan,results);
  }
 else   if (fragmentId == SysProcFragmentId.PF_snapshotDigestScanResults) {
    TRACE_LOG.trace("Aggregating Snapshot Digest Scan  results");
    assert(dependencies.size() > 0);
    final VoltTable results=VoltTableUtil.unionTables(dependencies.get(DEP_snapshotDigestScan));
    return new DependencyPair(DEP_snapshotDigestScanResults,results);
  }
 else   if (fragmentId == SysProcFragmentId.PF_hostDiskFreeScan) {
    final VoltTable results=constructDiskFreeResultsTable();
    if (context.isLowestSiteId()) {
      assert(params.toArray()[0] != null);
      assert(params.toArray()[0] instanceof String);
      final String path=(String)params.toArray()[0];
      File dir=new VoltFile(path);
      if (dir.isDirectory()) {
        final long free=dir.getUsableSpace();
        final long total=dir.getTotalSpace();
        final long used=total - free;
        results.addRow(context.getHostId(),hostname,path,total,free,used,"SUCCESS","");
      }
 else {
        results.addRow(context.getHostId(),hostname,path,0,0,0,"FAILURE","Path is not a directory");
      }
    }
    return new DependencyPair(DEP_hostDiskFreeScan,results);
  }
 else   if (fragmentId == SysProcFragmentId.PF_hostDiskFreeScanResults) {
    TRACE_LOG.trace("Aggregating disk free results");
    assert(dependencies.size() > 0);
    final VoltTable results=VoltTableUtil.unionTables(dependencies.get(DEP_hostDiskFreeScan));
    return new DependencyPair(DEP_hostDiskFreeScanResults,results);
  }
  assert(false);
  return null;
}
