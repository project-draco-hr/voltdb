{
  assertTrue(pn.size() > 0);
  AbstractPlanNode p=pn.get(0).getChild(0);
  for (  AbstractPlanNode nd : pn) {
    System.out.println("PlanNode Explanined:\n" + nd.toDOTString() + "\n"+ nd.toExplainPlanString());
  }
  ArrayList<AbstractPlanNode> children=new ArrayList<AbstractPlanNode>();
  for (int i=0; i < p.getChildCount(); i++) {
    children.add(p.getChild(i));
    System.out.println("Child " + i + " :"+ p.getChild(i).toExplainPlanString());
    System.out.println("Parent " + i + " :"+ p.getParent(i).toExplainPlanString());
  }
  assertTrue(p instanceof IndexCountPlanNode);
  if (pushDownTypes != null) {
    for (    ExpressionType type : pushDownTypes) {
      assertTrue(p.toJSONString().contains("\"AGGREGATE_TYPE\":\"" + type.toString() + "\""));
    }
  }
 else {
    for (    ExpressionType type : aggTypes) {
      assertTrue(p.toJSONString().contains("\"AGGREGATE_TYPE\":\"" + type.toString() + "\""));
    }
  }
  if (isMultiPart) {
    assertTrue(pn.size() == 2);
    p=pn.get(1).getChild(0);
  }
 else {
    p=p.getChild(0);
  }
  if (pushDownTypes != null) {
    assertTrue(p instanceof HashAggregatePlanNode);
    for (    ExpressionType type : aggTypes) {
      assertTrue(p.toJSONString().contains("\"AGGREGATE_TYPE\":\"" + type.toString() + "\""));
    }
  }
 else {
    assertTrue(p instanceof AbstractScanPlanNode);
  }
}
