{
  m_file=file;
  m_tempFile=new File(m_file.getParentFile(),m_file.getName() + ".incomplete");
  m_ras=new RandomAccessFile(m_tempFile,"rw");
  m_fc=m_ras.getChannel();
  m_needsFinalClose=needsFinalClose;
  m_es=CoreUtils.getListeningSingleThreadExecutor("Snapshot write thread for " + m_file);
  ScheduledFuture<?> syncTask=null;
  syncTask=DefaultSnapshotDataTarget.m_syncService.scheduleAtFixedRate(new Runnable(){
    private long syncedBytes=0;
    @Override public void run(){
      while (m_bytesSinceLastSync.get() > 1024 * 1024 * 4) {
        try {
          final long syncStart=syncedBytes;
          syncedBytes=((m_fc.position() / Bits.pageSize()) - 1) * Bits.pageSize();
          if (PosixAdvise.SYNC_FILE_RANGE_SUPPORTED) {
            final long retval=PosixAdvise.sync_file_range(m_ras.getFD(),syncStart,syncedBytes - syncStart,PosixAdvise.SYNC_FILE_RANGE_SYNC);
            if (retval != 0) {
              SNAP_LOG.error("Error sync_file_range snapshot data: " + retval);
              SNAP_LOG.error("Params offset " + syncedBytes + " length "+ (syncedBytes - syncStart)+ " flags "+ PosixAdvise.SYNC_FILE_RANGE_SYNC);
              m_fc.force(false);
            }
          }
 else {
            m_fc.force(false);
          }
        }
 catch (        IOException e) {
          if (!(e instanceof java.nio.channels.AsynchronousCloseException)) {
            SNAP_LOG.error("Error syncing snapshot",e);
          }
 else {
            SNAP_LOG.debug("Asynchronous close syncing snapshot data, presumably graceful",e);
          }
        }
        m_bytesSinceLastSync.set(0);
      }
    }
  }
,DefaultSnapshotDataTarget.SNAPSHOT_SYNC_FREQUENCY,DefaultSnapshotDataTarget.SNAPSHOT_SYNC_FREQUENCY,TimeUnit.MILLISECONDS);
  m_syncTask=syncTask;
}
