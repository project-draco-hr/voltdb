{
  if (m_joinCoordinator != null) {
    m_joinCoordinator.close();
  }
  m_joinCoordinator=null;
  m_rejoinDataPending=false;
  try {
    m_testBlockRecoveryCompletion.acquire();
  }
 catch (  InterruptedException e) {
  }
  final long delta=((m_executionSiteRecoveryFinish - m_recoveryStartTime) / 1000);
  final long megabytes=m_executionSiteRecoveryTransferred / (1024 * 1024);
  final double megabytesPerSecond=megabytes / ((m_executionSiteRecoveryFinish - m_recoveryStartTime) / 1000.0);
  if (m_clientInterface != null) {
    m_clientInterface.mayActivateSnapshotDaemon();
    try {
      m_clientInterface.startAcceptingConnections();
    }
 catch (    IOException e) {
      hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_ErrorStartAcceptingConnections.name(),e);
      VoltDB.crashLocalVoltDB("Error starting client interface.",true,e);
    }
    if (m_nodeDRGateway != null && !m_nodeDRGateway.isStarted()) {
      prepareReplication();
    }
  }
  if (m_config.m_startAction == StartAction.REJOIN) {
    consoleLog.info("Node data recovery completed after " + delta + " seconds with "+ megabytes+ " megabytes transferred at a rate of "+ megabytesPerSecond+ " megabytes/sec");
  }
  try {
    final ZooKeeper zk=m_messenger.getZK();
    boolean logRecoveryCompleted=false;
    if (getCommandLog().getClass().getName().equals("org.voltdb.CommandLogImpl")) {
      String requestNode=zk.create(VoltZK.request_truncation_snapshot_node,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);
      if (m_rejoinTruncationReqId == null) {
        m_rejoinTruncationReqId=requestNode;
      }
    }
 else {
      logRecoveryCompleted=true;
    }
    if (logRecoveryCompleted || m_joining) {
      String actionName=m_joining ? "join" : "rejoin";
      m_rejoining=false;
      m_joining=false;
      consoleLog.info(String.format("Node %s completed",actionName));
    }
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB("Unable to log host rejoin completion to ZK",true,e);
  }
  hostLog.info("Logging host rejoin completion to ZK");
}
