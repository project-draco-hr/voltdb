{
synchronized (m_catalogUpdateLock) {
    if (currentTxnId <= m_catalogContext.m_transactionId && !m_txnIdToContextTracker.isEmpty()) {
      ContextTracker contextTracker=m_txnIdToContextTracker.get(currentTxnId);
      contextTracker.m_dispensedSites++;
      int ttlsites=VoltDB.instance().getSiteTrackerForSnapshot().getSitesForHost(m_messenger.getHostId()).size();
      if (contextTracker.m_dispensedSites == ttlsites) {
        m_txnIdToContextTracker.remove(currentTxnId);
      }
      return Pair.of(contextTracker.m_context,contextTracker.m_csp);
    }
 else     if (m_catalogContext.catalogVersion != expectedCatalogVersion) {
      hostLog.fatal("Failed catalog update." + " expectedCatalogVersion: " + expectedCatalogVersion + " currentTxnId: "+ currentTxnId+ " currentTxnUniqueId: "+ currentTxnUniqueId+ " m_catalogContext.catalogVersion "+ m_catalogContext.catalogVersion);
      throw new RuntimeException("Trying to update main catalog context with diff " + "commands generated for an out-of date catalog. Expected catalog version: " + expectedCatalogVersion + " does not match actual version: "+ m_catalogContext.catalogVersion);
    }
    hostLog.info(String.format("Globally updating the current application catalog (new hash %s).",Encoder.hexEncode(catalogBytesHash).substring(0,10)));
    SortedMap<String,String> oldDbgMap=m_catalogContext.getDebuggingInfoFromCatalog();
    m_catalogContext=m_catalogContext.update(currentTxnId,currentTxnUniqueId,newCatalogBytes,diffCommands,true,deploymentHash);
    final CatalogSpecificPlanner csp=new CatalogSpecificPlanner(m_asyncCompilerAgent,m_catalogContext);
    m_txnIdToContextTracker.put(currentTxnId,new ContextTracker(m_catalogContext,csp));
    SortedMap<String,String> newDbgMap=m_catalogContext.getDebuggingInfoFromCatalog();
    for (    Entry<String,String> e : newDbgMap.entrySet()) {
      if (oldDbgMap.containsKey(e.getKey()) && oldDbgMap.get(e.getKey()).equals(e.getValue())) {
        continue;
      }
      hostLog.info(e.getValue());
    }
    SiteTracker siteTracker=VoltDB.instance().getSiteTrackerForSnapshot();
    List<Long> sites=siteTracker.getSitesForHost(m_messenger.getHostId());
    List<Integer> partitions=new ArrayList<Integer>();
    for (    Long site : sites) {
      Integer partition=siteTracker.getPartitionForSite(site);
      partitions.add(partition);
    }
    ExportManager.instance().updateCatalog(m_catalogContext,partitions);
    if (m_elasticJoinService != null)     m_elasticJoinService.updateConfig(m_catalogContext);
    if (m_catalogContext.cluster.getHeartbeattimeout() * 1000 != m_config.m_deadHostTimeoutMS) {
      m_config.m_deadHostTimeoutMS=m_catalogContext.cluster.getHeartbeattimeout() * 1000;
      m_messenger.setDeadHostTimeout(m_config.m_deadHostTimeoutMS);
    }
    if (m_clientInterface != null) {
      m_clientInterface.notifyOfCatalogUpdate();
    }
    if (m_adminListener != null) {
      m_adminListener.notifyOfCatalogUpdate();
    }
    getStatsAgent().notifyOfCatalogUpdate();
    if (m_MPI != null) {
      m_MPI.updateCatalog(diffCommands,m_catalogContext,csp);
    }
    if (m_consumerDRGateway != null) {
      m_consumerDRGateway.updateCatalog(m_catalogContext);
    }
    if (m_nodeDRGateway != null) {
      m_nodeDRGateway.calculateTableSignature(m_catalogContext.database);
    }
    new ConfigLogging().logCatalogAndDeployment();
    logSystemSettingFromCatalogContext();
    return Pair.of(m_catalogContext,csp);
  }
}
