{
synchronized (m_startAndStopLock) {
    consoleLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_StartupString.name(),null);
    if (config.m_pathToDeployment == null) {
      try {
        config.m_pathToDeployment=setupDefaultDeployment();
      }
 catch (      IOException e) {
        VoltDB.crashLocalVoltDB("Failed to write default deployment.",false,null);
      }
    }
    m_mode=OperationMode.INITIALIZING;
    m_config=config;
    m_startMode=null;
    m_clientInterfaces.clear();
    m_dtxns.clear();
    m_adminListener=null;
    m_commandLog=new DummyCommandLog();
    m_deployment=null;
    m_messenger=null;
    m_startMode=null;
    m_statsAgent=new StatsAgent();
    m_asyncCompilerAgent=new AsyncCompilerAgent();
    m_faultManager=null;
    m_validateConfiguredNumberOfPartitionsOnMailboxUpdate=false;
    m_snapshotCompletionMonitor=null;
    m_catalogContext=null;
    m_partitionCountStats=null;
    m_ioStats=null;
    m_memoryStats=null;
    m_statsManager=null;
    m_restoreAgent=null;
    m_siteTracker=null;
    m_mailboxTracker=null;
    m_recoveryStartTime=System.currentTimeMillis();
    m_hostIdWithStartupCatalog=0;
    m_pathToStartupCatalog=m_config.m_pathToCatalog;
    m_replicationActive=false;
    m_localSites=new COWMap<Long,ExecutionSite>();
    m_siteThreads=new HashMap<Long,Thread>();
    m_runners=new ArrayList<ExecutionSiteRunner>();
    m_computationService=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(),new ThreadFactory(){
      private int threadIndex=0;
      @Override public synchronized Thread newThread(      Runnable r){
        Thread t=new Thread(null,r,"Computation service thread - " + threadIndex++,131072);
        t.setDaemon(true);
        return t;
      }
    }
));
    boolean isRejoin=config.m_rejoinToHostAndPort != null;
    m_rejoining=isRejoin;
    try {
      System.setOut(new PrintStream(System.out,true,"UTF-8"));
      System.setErr(new PrintStream(System.err,true,"UTF-8"));
    }
 catch (    UnsupportedEncodingException e) {
      hostLog.fatal("Support for the UTF-8 encoding is required for VoltDB. This means you are likely running an unsupported JVM. Exiting.");
      System.exit(-1);
    }
    if (System.getProperty("java.vm.name").contains("64") == false) {
      hostLog.fatal("You are running on an unsupported (probably 32 bit) JVM. Exiting.");
      System.exit(-1);
    }
    m_snapshotCompletionMonitor=new SnapshotCompletionMonitor();
    readBuildInfo(config.m_isEnterprise ? "Enterprise Edition" : "Community Edition");
    ResponseSampler.initializeIfEnabled();
    buildClusterMesh(isRejoin);
    m_mailboxPublisher=new MailboxPublisher(VoltZK.mailboxes + "/" + m_messenger.getHostId());
    final int numberOfNodes=readDeploymentAndCreateStarterCatalogContext();
    if (!isRejoin) {
      m_messenger.waitForGroupJoin(numberOfNodes);
    }
    m_faultManager=new FaultDistributor(this);
    m_faultManager.registerFaultHandler(SiteFailureFault.SITE_FAILURE_CATALOG,m_faultHandler,FaultType.SITE_FAILURE);
    if (!m_faultManager.testPartitionDetectionDirectory(m_catalogContext.cluster.getFaultsnapshots().get("CLUSTER_PARTITION"))) {
      VoltDB.crashLocalVoltDB("Unalbe to create partition detection snapshot directory at" + m_catalogContext.cluster.getFaultsnapshots().get("CLUSTER_PARTITION"),false,null);
    }
    final int availableProcessors=Runtime.getRuntime().availableProcessors();
    int poolSize=1;
    if (availableProcessors > 4) {
      poolSize=2;
    }
    m_periodicWorkThread=CoreUtils.getScheduledThreadPoolExecutor("Periodic Work",poolSize,1024 * 128);
    m_licenseApi=MiscUtils.licenseApiFactory(m_config.m_pathToLicense);
    if (m_licenseApi == null) {
      VoltDB.crashLocalVoltDB("Failed to initialize license verifier. " + "See previous log message for details.",false,null);
    }
    ArrayDeque<Mailbox> siteMailboxes=null;
    ClusterConfig clusterConfig=null;
    DtxnInitiatorMailbox initiatorMailbox=null;
    long initiatorHSId=0;
    try {
      m_mailboxTracker=new MailboxTracker(m_messenger.getZK(),this);
      m_mailboxTracker.start();
      CountDownLatch rejoinCompleteLatch=new CountDownLatch(1);
      Pair<ArrayDeque<Mailbox>,ClusterConfig> p;
      if (isRejoin) {
        createRejoinBarrierAndWatchdog(rejoinCompleteLatch);
        p=createMailboxesForSitesRejoin();
        ExecutionSite.recoveringSiteCount.set(p.getFirst().size());
        hostLog.info("Set recovering site count to " + p.getFirst().size());
      }
 else {
        p=createMailboxesForSitesStartup();
      }
      siteMailboxes=p.getFirst();
      clusterConfig=p.getSecond();
      initiatorHSId=registerInitiatorMailbox();
      final long statsHSId=m_messenger.getHSIdForLocalSite(HostMessenger.STATS_SITE_ID);
      m_messenger.generateMailboxId(statsHSId);
      hostLog.info("Registering stats mailbox id " + CoreUtils.hsIdToString(statsHSId));
      m_mailboxPublisher.registerMailbox(MailboxType.StatsAgent,new MailboxNodeContent(statsHSId,null));
      if (isRejoin && m_config.m_newRejoin) {
        ArrayList<Long> sites=new ArrayList<Long>();
        for (        Mailbox siteMailbox : siteMailboxes) {
          sites.add(siteMailbox.getHSId());
        }
        Class<?> klass=MiscUtils.loadProClass("org.voltdb.rejoin.SequentialRejoinCoordinator","Rejoin",false);
        Constructor<?> constructor;
        try {
          constructor=klass.getConstructor(HostMessenger.class,List.class);
          m_rejoinCoordinator=(RejoinCoordinator)constructor.newInstance(m_messenger,sites);
          m_messenger.registerMailbox(m_rejoinCoordinator);
          m_mailboxPublisher.registerMailbox(MailboxType.OTHER,new MailboxNodeContent(m_rejoinCoordinator.getHSId(),null));
          hostLog.info("Using pauseless rejoin");
        }
 catch (        Exception e) {
          VoltDB.crashLocalVoltDB("Unable to construct rejoin coordinator",true,e);
        }
      }
      m_mailboxPublisher.publish(m_messenger.getZK());
      rejoinCompleteLatch.countDown();
      if (isRejoin) {
        m_messenger.getZK().delete(VoltZK.rejoinLock,-1,new ZKUtil.VoidCallback(),null);
      }
    }
 catch (    Exception e) {
      VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
    }
    boolean siteTrackerInit=false;
    for (int ii=0; ii < 4000; ii++) {
      boolean predicate=true;
      if (isRejoin) {
        predicate=!m_siteTracker.getAllHosts().contains(m_messenger.getHostId());
      }
 else {
        predicate=m_siteTracker.getAllHosts().size() < m_deployment.getCluster().getHostcount();
      }
      if (predicate) {
        try {
          Thread.sleep(5);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
 else {
        siteTrackerInit=true;
        break;
      }
    }
    if (!siteTrackerInit) {
      VoltDB.crashLocalVoltDB("Failed to initialize site tracker with all hosts before timeout",true,null);
    }
    initiatorMailbox=createInitiatorMailbox(initiatorHSId);
    Inits inits=new Inits(this,1);
    inits.doInitializationWork();
    if (config.m_backend.isIPC) {
      int eeCount=m_siteTracker.getLocalSites().length;
      if (config.m_ipcPorts.size() != eeCount) {
        hostLog.fatal("Specified an IPC backend but only supplied " + config.m_ipcPorts.size() + " backend ports when "+ eeCount+ " are required");
        System.exit(-1);
      }
    }
    collectLocalNetworkMetadata();
    Mailbox localThreadMailbox=siteMailboxes.poll();
    ((org.voltcore.messaging.SiteMailbox)localThreadMailbox).setCommandLog(m_commandLog);
    m_currentThreadSite=null;
    for (    Mailbox mailbox : siteMailboxes) {
      long site=mailbox.getHSId();
      int sitesHostId=SiteTracker.getHostForSite(site);
      if (sitesHostId == m_myHostId) {
        ((org.voltcore.messaging.SiteMailbox)mailbox).setCommandLog(m_commandLog);
        ExecutionSiteRunner runner=new ExecutionSiteRunner(mailbox,m_catalogContext,m_serializedCatalog,m_rejoining,m_replicationActive,hostLog,m_configuredNumberOfPartitions);
        m_runners.add(runner);
        Thread runnerThread=new Thread(runner,"Site " + org.voltcore.utils.CoreUtils.hsIdToString(site));
        runnerThread.start();
        log.l7dlog(Level.TRACE,LogKeys.org_voltdb_VoltDB_CreatingThreadForSite.name(),new Object[]{site},null);
        m_siteThreads.put(site,runnerThread);
      }
    }
    try {
      ExecutionSite siteObj=new ExecutionSite(VoltDB.instance(),localThreadMailbox,m_serializedCatalog,null,m_rejoining,m_replicationActive,m_catalogContext.m_transactionId,m_configuredNumberOfPartitions);
      m_localSites.put(localThreadMailbox.getHSId(),siteObj);
      m_currentThreadSite=siteObj;
    }
 catch (    Exception e) {
      VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
    }
    for (    ExecutionSiteRunner runner : m_runners) {
      try {
        runner.m_siteIsLoaded.await();
      }
 catch (      InterruptedException e) {
        VoltDB.crashLocalVoltDB("Unable to wait on starting execution site.",true,e);
      }
      assert(runner.m_siteObj != null);
      m_localSites.put(runner.m_siteId,runner.m_siteObj);
    }
    try {
      m_mailboxTracker.executeTask(new Runnable(){
        @Override public void run(){
          for (          ExecutionSite es : m_localSites.values()) {
            es.notifySitesAdded(m_siteTracker);
          }
        }
      }
).get();
    }
 catch (    InterruptedException e) {
      VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
    }
catch (    ExecutionException e) {
      VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
    }
    int portOffset=0;
    for (int i=0; i < 1; i++) {
      SimpleDtxnInitiator initiator=new SimpleDtxnInitiator(initiatorMailbox,m_catalogContext,m_messenger,m_myHostId,m_myHostId,m_config.m_timestampTestingSalt);
      try {
        ClientInterface ci=ClientInterface.create(m_messenger,m_catalogContext,m_config.m_replicationRole,initiator,clusterConfig.getPartitionCount(),config.m_port + portOffset,config.m_adminPort + portOffset,m_config.m_timestampTestingSalt);
        portOffset+=2;
        m_clientInterfaces.add(ci);
      }
 catch (      Exception e) {
        VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
      }
      portOffset+=2;
      m_dtxns.add(initiator);
    }
    m_partitionCountStats=new PartitionCountStats(clusterConfig.getPartitionCount());
    m_statsAgent.registerStatsSource(SysProcSelector.PARTITIONCOUNT,0,m_partitionCountStats);
    m_ioStats=new IOStats();
    m_statsAgent.registerStatsSource(SysProcSelector.IOSTATS,0,m_ioStats);
    m_memoryStats=new MemoryStats();
    m_statsAgent.registerStatsSource(SysProcSelector.MEMORY,0,m_memoryStats);
    m_statsManager=null;
    try {
      final Class<?> statsManagerClass=Class.forName("org.voltdb.management.JMXStatsManager");
      m_statsManager=(StatsManager)statsManagerClass.newInstance();
      m_statsManager.initialize(new ArrayList<Long>(m_localSites.keySet()));
    }
 catch (    Exception e) {
    }
    try {
      m_snapshotCompletionMonitor.init(m_messenger.getZK());
    }
 catch (    Exception e) {
      hostLog.fatal("Error initializing snapshot completion monitor",e);
      VoltDB.crashLocalVoltDB("Error initializing snapshot completion monitor",true,e);
    }
    if (m_commandLog != null && isRejoin) {
      m_commandLog.initForRejoin(m_catalogContext,Long.MIN_VALUE,true);
    }
    if (!isRejoin) {
      try {
        m_messenger.waitForAllHostsToBeReady(m_deployment.getCluster().getHostcount());
      }
 catch (      Exception e) {
        hostLog.fatal("Failed to announce ready state.");
        VoltDB.crashLocalVoltDB("Failed to announce ready state.",false,null);
      }
    }
    m_validateConfiguredNumberOfPartitionsOnMailboxUpdate=true;
    if (m_siteTracker.m_numberOfPartitions != m_configuredNumberOfPartitions) {
      for (      Map.Entry<Integer,ImmutableList<Long>> entry : m_siteTracker.m_partitionsToSitesImmutable.entrySet()) {
        hostLog.info(entry.getKey() + " -- " + CoreUtils.hsIdCollectionToString(entry.getValue()));
      }
      VoltDB.crashGlobalVoltDB("Mismatch between configured number of partitions (" + m_configuredNumberOfPartitions + ") and actual ("+ m_siteTracker.m_numberOfPartitions+ ")",true,null);
    }
    heartbeatThread=new HeartbeatThread(m_clientInterfaces);
    heartbeatThread.start();
    schedulePeriodicWorks();
    logDebuggingInfo(m_config.m_adminPort,m_config.m_httpPort,m_httpPortExtraLogMessage,m_jsonEnabled);
    if (clusterConfig.getReplicationFactor() == 0) {
      hostLog.warn("Running without redundancy (k=0) is not recommended for production use.");
    }
    assert(m_clientInterfaces.size() > 0);
    ClientInterface ci=m_clientInterfaces.get(0);
    ci.initializeSnapshotDaemon(m_messenger.getZK());
    TransactionInitiator initiator=m_dtxns.get(0);
    if (m_restoreAgent != null) {
      m_restoreAgent.setCatalogContext(m_catalogContext);
      m_restoreAgent.setSiteTracker(m_siteTracker);
      m_restoreAgent.setInitiator(initiator);
    }
  }
}
