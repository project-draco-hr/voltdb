{
  hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_StartupString.name(),null);
  if (config.listenForDumpRequests)   DumpManager.init();
  readBuildInfo();
  m_config=config;
  int port;
  for (port=8080; true; port++) {
    try {
      m_adminListener=new HTTPAdminListener(port);
      break;
    }
 catch (    IOException e1) {
    }
  }
  if (port == 8081)   hostLog.info("HTTP admin console unable to bind to port 8080");
 else   if (port > 8081)   hostLog.info("HTTP admin console unable to bind to ports 8080 through " + (port - 1));
  hostLog.info("HTTP admin console listening on port " + port);
  if (m_config.m_pathToCatalog.startsWith("http")) {
    hostLog.info("Loading application catalog jarfile from " + m_config.m_pathToCatalog);
  }
 else {
    File f=new File(m_config.m_pathToCatalog);
    hostLog.info("Loading application catalog jarfile from " + f.getAbsolutePath());
  }
  String serializedCatalog=CatalogUtil.loadCatalogFromJar(m_config.m_pathToCatalog,hostLog);
  if (serializedCatalog == null)   VoltDB.crashVoltDB();
  m_catalog=new Catalog();
  m_catalog.execute(serializedCatalog);
  m_cluster=m_catalog.getClusters().get("cluster");
  final org.voltdb.catalog.Database db=m_cluster.getDatabases().get("database");
  m_procedures=db.getProcedures();
  final SnapshotSchedule schedule=db.getSnapshotschedule().get("default");
  m_authSystem=new AuthSystem(m_cluster.getDatabases().get("database"),m_cluster.getSecurityenabled());
  m_sites=m_cluster.getSites();
  m_siteTracker=new SiteTracker(m_sites);
  int hostCount=m_cluster.getHosts().size();
  int lowestNonExecSiteId=-1;
  for (  Site site : m_sites) {
    if (!site.getIsexec()) {
      if (lowestNonExecSiteId == -1) {
        lowestNonExecSiteId=Integer.parseInt(site.getTypeName());
      }
 else {
        lowestNonExecSiteId=Math.min(lowestNonExecSiteId,Integer.parseInt(site.getTypeName()));
      }
    }
  }
  m_catalogClassLoader=new JarClassLoader(m_config.m_pathToCatalog);
  TheHashinator.initialize(m_catalog);
  m_network=new VoltNetwork(new Runnable[]{new Runnable(){
    @Override public void run(){
      for (      final ClientInterface ci : m_clientInterfaces) {
        ci.processPeriodicWork();
      }
    }
  }
});
  try {
    ELTManager.initialize(m_catalog);
  }
 catch (  ELTManager.SetupException e) {
    hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_ELTInitFailure.name(),e);
    System.exit(-1);
  }
  InetAddress leader=null;
  try {
    leader=InetAddress.getByName(m_cluster.getLeaderaddress());
  }
 catch (  UnknownHostException ex) {
    hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_CouldNotRetrieveLeaderAddress.name(),new Object[]{m_cluster.getLeaderaddress()},ex);
    throw new RuntimeException(ex);
  }
  if (hostCount <= 0) {
    hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_InvalidHostCount.name(),new Object[]{hostCount},null);
    VoltDB.crashVoltDB();
  }
  hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_CreatingVoltDB.name(),new Object[]{hostCount,leader},null);
  m_messenger=new HostMessenger(m_network,leader,hostCount,hostLog);
  m_messenger.waitForGroupJoin();
  int myHostId=m_messenger.getHostId();
  m_localSites=new Hashtable<Integer,ExecutionSite>();
  m_siteThreads=new Hashtable<Integer,Thread>();
  m_runners=new ArrayList<ExecutionSiteRunner>();
  m_numberOfExecSites=0;
  m_numberOfNodes=hostCount;
  Site siteForThisThread=null;
  m_currentThreadSite=null;
  for (  Site site : m_sites) {
    int sitesHostId=Integer.parseInt(site.getHost().getTypeName());
    int siteId=Integer.parseInt(site.getTypeName());
    if (site.getPartition() != null) {
      assert(site.getIsexec());
      m_numberOfExecSites++;
    }
    if (sitesHostId == myHostId) {
      log.l7dlog(Level.TRACE,LogKeys.org_voltdb_VoltDB_CreatingLocalSite.name(),new Object[]{siteId},null);
      m_messenger.createLocalSite(siteId);
      if (site.getIsexec()) {
        if (siteForThisThread == null) {
          siteForThisThread=site;
        }
 else {
          ExecutionSiteRunner runner=new ExecutionSiteRunner(siteId,m_catalog);
          m_runners.add(runner);
          Thread runnerThread=new Thread(runner,"Site " + siteId);
          runnerThread.start();
          log.l7dlog(Level.TRACE,LogKeys.org_voltdb_VoltDB_CreatingThreadForSite.name(),new Object[]{siteId},null);
          m_siteThreads.put(siteId,runnerThread);
        }
      }
    }
  }
  ExecutionSite siteObj=new ExecutionSite(Integer.parseInt(siteForThisThread.getTypeName()),m_catalog);
  m_localSites.put(Integer.parseInt(siteForThisThread.getTypeName()),siteObj);
  m_currentThreadSite=siteObj;
  for (  ExecutionSiteRunner runner : m_runners) {
synchronized (runner) {
      if (!runner.m_isSiteCreated) {
        try {
          runner.wait();
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
      m_localSites.put(runner.m_siteId,runner.m_siteObj);
    }
  }
  if (m_localSites.size() == 1) {
    if (m_config.m_profilingLevel != ProcedureProfiler.Level.DISABLED)     hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_ProfileLevelIs.name(),new Object[]{m_config.m_profilingLevel},null);
    ProcedureProfiler.profilingLevel=m_config.m_profilingLevel;
  }
 else {
    hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_InternalProfilingDisabledOnMultipartitionHosts.name(),null);
  }
  ProcedureProfiler.initializeWorkloadTrace(m_catalog);
  int portOffset=0;
  for (  Site site : m_sites) {
    int sitesHostId=Integer.parseInt(site.getHost().getTypeName());
    int siteId=Integer.parseInt(site.getTypeName());
    if ((sitesHostId == myHostId) && (site.getIsexec() == false)) {
      ClientInterface ci=ClientInterface.create(m_network,m_messenger,hostCount,siteId,site.getInitiatorid(),config.m_port + portOffset++,siteId == lowestNonExecSiteId ? schedule : null);
      m_clientInterfaces.add(ci);
      try {
        ci.startAcceptingConnections();
      }
 catch (      IOException e) {
        hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_ErrorStartAcceptingConnections.name(),e);
        VoltDB.crashVoltDB();
      }
    }
  }
  hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_StartingNetwork.name(),null);
  m_network.start();
  m_messenger.sendReadyMessage();
  m_messenger.waitForAllHostsToBeReady();
  hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_ServerCompletedInitialization.name(),null);
}
