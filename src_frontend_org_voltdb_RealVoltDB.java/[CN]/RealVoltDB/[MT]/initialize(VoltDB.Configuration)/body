{
  m_mode=OperationMode.INITIALIZING;
synchronized (m_startAndStopLock) {
    hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_StartupString.name(),null);
    m_config=config;
    m_clientInterfaces.clear();
    m_agreementSite=null;
    m_adminListener=null;
    m_commandLog=new DummyCommandLog();
    m_deployment=null;
    m_messenger=null;
    m_statsAgent=new StatsAgent();
    m_faultManager=null;
    m_instanceId=null;
    m_zk=null;
    m_snapshotCompletionMonitor=null;
    m_catalogContext=null;
    m_partitionCountStats=null;
    m_ioStats=null;
    m_memoryStats=null;
    m_statsManager=null;
    m_restoreAgent=null;
    m_hasCatalog=new CountDownLatch(1);
    m_hostIdWithStartupCatalog=0;
    m_pathToStartupCatalog=m_config.m_pathToCatalog;
    boolean isRejoin=config.m_rejoinToHostAndPort != null;
    try {
      System.setOut(new PrintStream(System.out,true,"UTF-8"));
      System.setErr(new PrintStream(System.err,true,"UTF-8"));
    }
 catch (    UnsupportedEncodingException e) {
      hostLog.fatal("Support for the UTF-8 encoding is required for VoltDB. This means you are likely running an unsupported JVM. Exiting.");
      System.exit(-1);
    }
    if (System.getProperty("java.vm.name").contains("64") == false) {
      hostLog.fatal("You are running on an unsupported (probably 32 bit) JVM. Exiting.");
      System.exit(-1);
    }
    m_snapshotCompletionMonitor=new SnapshotCompletionMonitor();
    readBuildInfo(config.m_isEnterprise ? "Enterprise Edition" : "Community Edition");
    ResponseSampler.initializeIfEnabled();
    readDeploymentAndCreateStarterCatalogContext();
    final int availableProcessors=Runtime.getRuntime().availableProcessors();
    int poolSize=1;
    if (availableProcessors > 4) {
      poolSize=2;
    }
    m_periodicWorkThread=new ScheduledThreadPoolExecutor(poolSize,new ThreadFactory(){
      @Override public Thread newThread(      Runnable r){
        return new Thread(r,"Periodic Work");
      }
    }
);
    buildClusterMesh(isRejoin);
    Inits inits=new Inits(this,1);
    inits.doInitializationWork();
    m_localSites=Collections.synchronizedMap(new HashMap<Integer,ExecutionSite>());
    m_siteThreads=Collections.synchronizedMap(new HashMap<Integer,Thread>());
    m_runners=new ArrayList<ExecutionSiteRunner>();
    if (config.m_backend.isIPC) {
      int eeCount=0;
      for (      Site site : m_catalogContext.siteTracker.getUpSites()) {
        if (site.getIsexec() && m_myHostId == Integer.parseInt(site.getHost().getTypeName())) {
          eeCount++;
        }
      }
      if (config.m_ipcPorts.size() != eeCount) {
        hostLog.fatal("Specified an IPC backend but only supplied " + config.m_ipcPorts.size() + " backend ports when "+ eeCount+ " are required");
        System.exit(-1);
      }
    }
    Site siteForThisThread=null;
    m_currentThreadSite=null;
    for (    Site site : m_catalogContext.siteTracker.getUpSites()) {
      int sitesHostId=Integer.parseInt(site.getHost().getTypeName());
      int siteId=Integer.parseInt(site.getTypeName());
      if (sitesHostId == m_myHostId) {
        if (site.getIsexec()) {
          if (siteForThisThread == null) {
            siteForThisThread=site;
          }
 else {
            ExecutionSiteRunner runner=new ExecutionSiteRunner(siteId,m_catalogContext,m_serializedCatalog,m_recovering,m_downHosts,hostLog);
            m_runners.add(runner);
            Thread runnerThread=new Thread(runner,"Site " + siteId);
            runnerThread.start();
            log.l7dlog(Level.TRACE,LogKeys.org_voltdb_VoltDB_CreatingThreadForSite.name(),new Object[]{siteId},null);
            m_siteThreads.put(siteId,runnerThread);
          }
        }
      }
    }
    int siteId=Integer.parseInt(siteForThisThread.getTypeName());
    ExecutionSite siteObj=new ExecutionSite(VoltDB.instance(),VoltDB.instance().getMessenger().createMailbox(siteId,VoltDB.DTXN_MAILBOX_ID,true),siteId,m_serializedCatalog,null,m_recovering,m_downHosts,m_catalogContext.m_transactionId);
    m_localSites.put(Integer.parseInt(siteForThisThread.getTypeName()),siteObj);
    m_currentThreadSite=siteObj;
    for (    ExecutionSiteRunner runner : m_runners) {
synchronized (runner) {
        if (!runner.m_isSiteCreated) {
          try {
            runner.wait();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
        m_localSites.put(runner.m_siteId,runner.m_siteObj);
      }
    }
    int portOffset=0;
    for (    Site site : m_catalogContext.siteTracker.getUpSites()) {
      int sitesHostId=Integer.parseInt(site.getHost().getTypeName());
      int currSiteId=Integer.parseInt(site.getTypeName());
      if ((sitesHostId == m_myHostId) && (site.getIsexec() == false)) {
        ClientInterface ci=ClientInterface.create(m_network,m_messenger,m_catalogContext,m_replicationRole,m_catalogContext.numberOfNodes,currSiteId,site.getInitiatorid(),config.m_port + portOffset,config.m_adminPort + portOffset,m_config.m_timestampTestingSalt);
        portOffset+=2;
        m_clientInterfaces.add(ci);
        m_compilerThread=ci.getCompilerThread();
      }
    }
    m_partitionCountStats=new PartitionCountStats("Partition Count Stats",m_catalogContext.numberOfPartitions);
    m_statsAgent.registerStatsSource(SysProcSelector.PARTITIONCOUNT,0,m_partitionCountStats);
    m_ioStats=new IOStats("IO Stats");
    m_statsAgent.registerStatsSource(SysProcSelector.IOSTATS,0,m_ioStats);
    m_memoryStats=new MemoryStats("Memory Stats");
    m_statsAgent.registerStatsSource(SysProcSelector.MEMORY,0,m_memoryStats);
    m_statsManager=null;
    try {
      final Class<?> statsManagerClass=Class.forName("org.voltdb.management.JMXStatsManager");
      m_statsManager=(StatsManager)statsManagerClass.newInstance();
      m_statsManager.initialize(new ArrayList<Integer>(m_localSites.keySet()));
    }
 catch (    Exception e) {
    }
    startNetworkAndCreateZKClient();
    try {
      m_snapshotCompletionMonitor.init(m_zk);
    }
 catch (    Exception e) {
      hostLog.fatal("Error initializing snapshot completion monitor",e);
      VoltDB.crashVoltDB();
    }
    if (m_commandLog != null && isRejoin) {
      m_commandLog.initForRejoin(m_catalogContext,Long.MIN_VALUE,m_messenger.getDiscoveredFaultSequenceNumber(),m_downSites);
    }
    m_messenger.sendReadyMessage();
    if (config.m_rejoinToHostAndPort == null) {
      m_messenger.waitForAllHostsToBeReady();
    }
    heartbeatThread=new HeartbeatThread(m_clientInterfaces);
    heartbeatThread.start();
    schedulePeriodicWorks();
    logDebuggingInfo(m_config.m_adminPort,m_config.m_httpPort,m_httpPortExtraLogMessage,m_jsonEnabled);
    int k=m_catalogContext.numberOfExecSites / m_catalogContext.numberOfPartitions;
    if (k == 1) {
      hostLog.warn("Running without redundancy (k=0) is not recommended for production use.");
    }
    assert(m_clientInterfaces.size() > 0);
    ClientInterface ci=m_clientInterfaces.get(0);
    ci.initializeSnapshotDaemon();
    TransactionInitiator initiator=ci.getInitiator();
    if (m_restoreAgent != null) {
      m_restoreAgent.setCatalogContext(m_catalogContext);
      m_restoreAgent.setInitiator(initiator);
    }
  }
}
