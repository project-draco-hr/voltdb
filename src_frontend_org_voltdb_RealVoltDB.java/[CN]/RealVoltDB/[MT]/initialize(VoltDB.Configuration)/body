{
synchronized (m_startAndStopLock) {
    if (config.m_port != VoltDB.DEFAULT_PORT) {
      RejoinLog.setPortNo(config.m_port);
    }
    hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_StartupString.name(),null);
    m_faultManager=new FaultDistributor();
    m_faultManager.registerFaultHandler(FaultType.NODE_FAILURE,new VoltDBNodeFailureFaultHandler(),NodeFailureFault.NODE_FAILURE_CATALOG);
    if (config.listenForDumpRequests)     DumpManager.init();
    readBuildInfo();
    m_config=config;
    int port;
    for (port=config.m_httpAdminPort; true; port++) {
      try {
        m_adminListener=new HTTPAdminListener(port);
        break;
      }
 catch (      IOException e1) {
      }
    }
    if (port == 8081)     hostLog.info("HTTP admin console unable to bind to port 8080");
 else     if (port > 8081)     hostLog.info("HTTP admin console unable to bind to ports 8080 through " + (port - 1));
    hostLog.info("HTTP admin console listening on port " + port);
    if (m_config.m_pathToCatalog.startsWith("http")) {
      hostLog.info("Loading application catalog jarfile from " + m_config.m_pathToCatalog);
    }
 else {
      File f=new File(m_config.m_pathToCatalog);
      hostLog.info("Loading application catalog jarfile from " + f.getAbsolutePath());
    }
    String serializedCatalog=CatalogUtil.loadCatalogFromJar(m_config.m_pathToCatalog,hostLog);
    if ((serializedCatalog == null) || (serializedCatalog.length() == 0))     VoltDB.crashVoltDB();
    long catalogCRC=0;
    try {
      catalogCRC=JarReader.crcForJar(m_config.m_pathToCatalog);
    }
 catch (    IOException e1) {
      VoltDB.crashVoltDB();
    }
    final int catalogVersion=0;
    Catalog catalog=new Catalog();
    catalog.execute(serializedCatalog);
    if (!CatalogUtil.compileDeployment(catalog,m_config.m_pathToDeployment))     System.exit(-1);
    serializedCatalog=catalog.serialize();
    m_catalogContext=new CatalogContext(catalog,m_config.m_pathToCatalog,catalogVersion);
    final SnapshotSchedule schedule=m_catalogContext.database.getSnapshotschedule().get("default");
    TheHashinator.initialize(catalog);
    m_network=new VoltNetwork();
    if (config.m_rejoinToHostAndPort == null) {
      InetAddress leader=null;
      try {
        leader=InetAddress.getByName(m_catalogContext.cluster.getLeaderaddress());
      }
 catch (      UnknownHostException ex) {
        hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_CouldNotRetrieveLeaderAddress.name(),new Object[]{m_catalogContext.cluster.getLeaderaddress()},null);
        VoltDB.crashVoltDB();
      }
      if (m_catalogContext.numberOfNodes <= 0) {
        hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_InvalidHostCount.name(),new Object[]{m_catalogContext.numberOfNodes},null);
        VoltDB.crashVoltDB();
      }
      hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_CreatingVoltDB.name(),new Object[]{m_catalogContext.numberOfNodes,leader},null);
      m_messenger=new HostMessenger(m_network,leader,m_catalogContext.numberOfNodes,catalogCRC,hostLog);
      m_instanceId=m_messenger.waitForGroupJoin();
    }
 else {
      int rejoinPort=config.m_internalPort;
      String rejoinHost="localhost";
      m_recovering=true;
      int colonIndex=config.m_rejoinToHostAndPort.indexOf(':');
      if (colonIndex == -1) {
        rejoinHost=config.m_rejoinToHostAndPort.trim();
      }
 else {
        rejoinHost=config.m_rejoinToHostAndPort.substring(0,colonIndex).trim();
        rejoinPort=Integer.parseInt(config.m_rejoinToHostAndPort.substring(colonIndex + 1).trim());
      }
      ServerSocketChannel listener=null;
      try {
        listener=ServerSocketChannel.open();
        listener.socket().bind(new InetSocketAddress(config.m_internalPort));
      }
 catch (      IOException e) {
        e.printStackTrace();
        System.exit(-1);
      }
      m_messenger=new HostMessenger(m_network,listener,m_catalogContext.numberOfNodes,catalogCRC,hostLog);
      Client client=ClientFactory.createClient();
      ClientResponse response=null;
      SyncCallback scb=new SyncCallback();
      try {
        client.createConnection(rejoinHost,rejoinPort,null,null);
        boolean success=false;
        while (!success) {
          success=client.callProcedure(scb,"@Rejoin","localhost",config.m_internalPort);
          if (!success)           Thread.sleep(100);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        System.exit(-1);
      }
      m_messenger.waitForGroupJoin();
      try {
        scb.waitForResponse();
        response=scb.getResponse();
        client.close();
      }
 catch (      Exception e) {
        e.printStackTrace();
        System.exit(-1);
      }
      System.out.println("response:");
      System.out.println(response);
    }
    int myHostId=m_messenger.getHostId();
    try {
      ELTManager.initialize(myHostId,m_catalogContext);
    }
 catch (    ELTManager.SetupException e) {
      hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_ELTInitFailure.name(),e);
      System.exit(-1);
    }
    m_localSites=new Hashtable<Integer,ExecutionSite>();
    m_siteThreads=new Hashtable<Integer,Thread>();
    m_runners=new ArrayList<ExecutionSiteRunner>();
    Site siteForThisThread=null;
    m_currentThreadSite=null;
    for (    Site site : m_catalogContext.siteTracker.getUpSites()) {
      int sitesHostId=Integer.parseInt(site.getHost().getTypeName());
      int siteId=Integer.parseInt(site.getTypeName());
      if (sitesHostId == myHostId) {
        log.l7dlog(Level.TRACE,LogKeys.org_voltdb_VoltDB_CreatingLocalSite.name(),new Object[]{siteId},null);
        m_messenger.createLocalSite(siteId);
        if (site.getIsexec()) {
          if (siteForThisThread == null) {
            siteForThisThread=site;
          }
 else {
            ExecutionSiteRunner runner=new ExecutionSiteRunner(siteId,m_catalogContext,serializedCatalog,m_recovering);
            m_runners.add(runner);
            Thread runnerThread=new Thread(runner,"Site " + siteId);
            runnerThread.start();
            log.l7dlog(Level.TRACE,LogKeys.org_voltdb_VoltDB_CreatingThreadForSite.name(),new Object[]{siteId},null);
            m_siteThreads.put(siteId,runnerThread);
          }
        }
      }
    }
    int siteId=Integer.parseInt(siteForThisThread.getTypeName());
    ExecutionSite siteObj=new ExecutionSite(VoltDB.instance(),VoltDB.instance().getMessenger().createMailbox(siteId,VoltDB.DTXN_MAILBOX_ID),siteId,serializedCatalog,null,m_recovering);
    m_localSites.put(Integer.parseInt(siteForThisThread.getTypeName()),siteObj);
    m_currentThreadSite=siteObj;
    for (    ExecutionSiteRunner runner : m_runners) {
synchronized (runner) {
        if (!runner.m_isSiteCreated) {
          try {
            runner.wait();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
        m_localSites.put(runner.m_siteId,runner.m_siteObj);
      }
    }
    if (m_localSites.size() == 1) {
      if (m_config.m_profilingLevel != ProcedureProfiler.Level.DISABLED)       hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_ProfileLevelIs.name(),new Object[]{m_config.m_profilingLevel},null);
      ProcedureProfiler.profilingLevel=m_config.m_profilingLevel;
    }
 else {
      hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_InternalProfilingDisabledOnMultipartitionHosts.name(),null);
    }
    ProcedureProfiler.initializeWorkloadTrace(catalog);
    int portOffset=0;
    for (    Site site : m_catalogContext.siteTracker.getUpSites()) {
      int sitesHostId=Integer.parseInt(site.getHost().getTypeName());
      int currSiteId=Integer.parseInt(site.getTypeName());
      if ((sitesHostId == myHostId) && (site.getIsexec() == false)) {
        ClientInterface ci=ClientInterface.create(m_network,m_messenger,m_catalogContext,m_catalogContext.numberOfNodes,currSiteId,site.getInitiatorid(),config.m_port + portOffset++,schedule);
        m_clientInterfaces.add(ci);
        try {
          ci.startAcceptingConnections();
        }
 catch (        IOException e) {
          hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_ErrorStartAcceptingConnections.name(),e);
          VoltDB.crashVoltDB();
        }
      }
    }
    m_partitionCountStats=new PartitionCountStats("Partition Count Stats",m_catalogContext.numberOfPartitions);
    m_statsAgent.registerStatsSource(SysProcSelector.PARTITIONCOUNT,0,m_partitionCountStats);
    m_ioStats=new IOStats("IO Stats");
    m_statsAgent.registerStatsSource(SysProcSelector.IOSTATS,0,m_ioStats);
    m_statsManager=null;
    try {
      final Class<?> statsManagerClass=Class.forName("org.voltdb.management.JMXStatsManager");
      m_statsManager=(StatsManager)statsManagerClass.newInstance();
      m_statsManager.initialize(new ArrayList<Integer>(m_localSites.keySet()));
    }
 catch (    Exception e) {
    }
    hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_StartingNetwork.name(),null);
    m_network.start();
    if (config.m_rejoinToHostAndPort == null) {
      m_messenger.sendReadyMessage();
      m_messenger.waitForAllHostsToBeReady();
    }
    fivems=new PeriodicWorkTimerThread(m_clientInterfaces,m_statsManager);
    fivems.start();
    hostLog.l7dlog(Level.INFO,LogKeys.host_VoltDB_ServerCompletedInitialization.name(),null);
  }
}
