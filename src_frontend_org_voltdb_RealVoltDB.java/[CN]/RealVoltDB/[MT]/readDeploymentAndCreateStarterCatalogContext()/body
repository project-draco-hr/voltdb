{
  try {
    ZooKeeper zk=m_messenger.getZK();
    byte deploymentBytes[]=org.voltcore.utils.CoreUtils.urlToBytes(m_config.m_pathToDeployment);
    try {
      if (deploymentBytes != null) {
        zk.create(VoltZK.deploymentBytes,deploymentBytes,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
        hostLog.info("URL of deployment info: " + m_config.m_pathToDeployment);
      }
 else {
        throw new KeeperException.NodeExistsException();
      }
    }
 catch (    KeeperException.NodeExistsException e) {
      byte deploymentBytesTemp[]=zk.getData(VoltZK.deploymentBytes,false,null);
      if (deploymentBytesTemp == null) {
        throw new RuntimeException("Deployment file could not be found locally or remotely at " + m_config.m_pathToDeployment);
      }
      PureJavaCrc32 crc=new PureJavaCrc32();
      crc.update(deploymentBytes);
      final long checksumHere=crc.getValue();
      crc.reset();
      crc.update(deploymentBytesTemp);
      if (checksumHere != crc.getValue()) {
        hostLog.info("Deployment configuration was pulled from ZK, and the checksum did not match " + "the locally supplied file");
      }
 else {
        hostLog.info("Deployment configuration pulled from ZK");
      }
      deploymentBytes=deploymentBytesTemp;
    }
    m_deployment=CatalogUtil.getDeployment(new ByteArrayInputStream(deploymentBytes));
    if (m_deployment == null) {
      hostLog.error("Not a valid XML deployment file at URL: " + m_config.m_pathToDeployment);
      VoltDB.crashLocalVoltDB("Not a valid XML deployment file at URL: " + m_config.m_pathToDeployment,false,null);
    }
    if (!m_config.m_isEnterprise) {
      boolean shutdown=false;
      if ((m_deployment.getCluster() != null) && (m_deployment.getCluster().getKfactor() > 0)) {
        consoleLog.error("K-Saftey (intra-cluster redundancy) is not supported " + "in the community edition of VoltDB.");
        shutdown=true;
      }
      if ((m_deployment.getSnapshot() != null) && (m_deployment.getSnapshot().isEnabled())) {
        consoleLog.error("Snapshots (periodic and on-demand) are not supported " + "in the community edition of VoltDB.");
        shutdown=true;
      }
      if ((m_deployment.getCommandlog() != null) && (m_deployment.getCommandlog().isEnabled())) {
        consoleLog.error("Command logging is not supported " + "in the community edition of VoltDB.");
        shutdown=true;
      }
      if ((m_deployment.getExport() != null) && (m_deployment.getExport().isEnabled())) {
        consoleLog.error("Export is not supported " + "in the community edition of VoltDB.");
        shutdown=true;
      }
      if (shutdown) {
        VoltDB.crashLocalVoltDB("This process will exit. " + "Please re-try with VoltDB a community edition-compatible deployment file.",false,null);
      }
      if (m_config.m_startAction != StartAction.CREATE) {
        consoleLog.error("Start action \"" + m_config.m_startAction.getClass().getSimpleName() + "\" is not supported in the community edition of VoltDB.");
        VoltDB.crashLocalVoltDB("This process will exit. " + "Please re-try with the enterprise edition or with the CREATE start action.",false,null);
      }
    }
    HeartbeatType hbt=m_deployment.getHeartbeat();
    if (hbt != null) {
      m_config.m_deadHostTimeoutMS=hbt.getTimeout() * 1000;
      m_messenger.setDeadHostTimeout(m_config.m_deadHostTimeoutMS);
    }
 else {
      hostLog.info("Dead host timeout set to " + m_config.m_deadHostTimeoutMS + " milliseconds");
    }
    final String elasticSetting=m_deployment.getCluster().getElastic().trim().toUpperCase();
    if (elasticSetting.equals("ENABLED")) {
      TheHashinator.setConfiguredHashinatorType(HashinatorType.ELASTIC);
    }
 else     if (!elasticSetting.equals("DISABLED")) {
      VoltDB.crashLocalVoltDB("Error in deployment file,  elastic attribute of " + "cluster element must be " + "'enabled' or 'disabled' but was '" + elasticSetting + "'",false,null);
    }
    Catalog catalog=new Catalog();
    Cluster cluster=catalog.getClusters().add("cluster");
    Database db=cluster.getDatabases().add("database");
    SecurityType security=m_deployment.getSecurity();
    if (security != null) {
      cluster.setSecurityenabled(security.isEnabled());
    }
    if (m_deployment.getUsers() != null) {
      for (      UsersType.User user : m_deployment.getUsers().getUser()) {
        Set<String> roles=CatalogUtil.mergeUserRoles(user);
        if (roles.isEmpty()) {
          continue;
        }
        for (        String role : roles) {
          if (db.getGroups().get(role) == null) {
            db.getGroups().add(role);
          }
        }
      }
    }
    long depCRC=CatalogUtil.compileDeploymentAndGetCRC(catalog,m_deployment,true);
    assert(depCRC != -1);
    m_catalogContext=new CatalogContext(isIV2Enabled() ? TxnEgo.makeZero(MpInitiator.MP_INIT_PID).getTxnId() : 0,0,catalog,null,depCRC,0,-1);
    int numberOfNodes=m_deployment.getCluster().getHostcount();
    if (numberOfNodes <= 0) {
      hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_InvalidHostCount.name(),new Object[]{numberOfNodes},null);
      VoltDB.crashLocalVoltDB("Invalid cluster size: " + numberOfNodes,false,null);
    }
    return numberOfNodes;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
