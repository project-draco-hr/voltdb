{
  try {
    ZooKeeper zk=m_messenger.getZK();
    byte deploymentBytes[]=null;
    try {
      deploymentBytes=org.voltcore.utils.CoreUtils.urlToBytes(m_config.m_pathToDeployment);
    }
 catch (    Exception ex) {
    }
    try {
      if (deploymentBytes != null) {
        CatalogUtil.writeCatalogToZK(zk,0,0L,0L,new byte[]{},deploymentBytes);
        hostLog.info("URL of deployment: " + m_config.m_pathToDeployment);
      }
 else {
        CatalogAndIds catalogStuff=CatalogUtil.getCatalogFromZK(zk);
        deploymentBytes=catalogStuff.deploymentBytes;
      }
    }
 catch (    KeeperException.NodeExistsException e) {
      CatalogAndIds catalogStuff=CatalogUtil.getCatalogFromZK(zk);
      byte[] deploymentBytesTemp=catalogStuff.deploymentBytes;
      if (deploymentBytesTemp != null) {
        if (deploymentBytes != null && !m_config.m_deploymentDefault) {
          byte[] deploymentHashHere=CatalogUtil.makeCatalogOrDeploymentHash(deploymentBytes);
          if (!(Arrays.equals(deploymentHashHere,catalogStuff.getDeploymentHash()))) {
            hostLog.warn("The locally provided deployment configuration did not " + " match the configuration information found in the cluster.");
          }
 else {
            hostLog.info("Deployment configuration pulled from other cluster node.");
          }
        }
        deploymentBytes=deploymentBytesTemp;
      }
 else {
        hostLog.error("Deployment file could not be loaded locally or remotely, " + "local supplied path: " + m_config.m_pathToDeployment);
        deploymentBytes=null;
      }
    }
    if (deploymentBytes == null) {
      hostLog.error("Deployment could not be obtained from cluster node or locally");
      VoltDB.crashLocalVoltDB("No such deployment file: " + m_config.m_pathToDeployment,false,null);
    }
    m_deployment=CatalogUtil.getDeployment(new ByteArrayInputStream(deploymentBytes));
    if (m_deployment == null) {
      hostLog.error("Not a valid XML deployment file at URL: " + m_config.m_pathToDeployment);
      VoltDB.crashLocalVoltDB("Not a valid XML deployment file at URL: " + m_config.m_pathToDeployment,false,null);
    }
    if (!m_config.m_isEnterprise) {
      boolean shutdownDeployment=false;
      boolean shutdownAction=false;
      if ((m_deployment.getCluster() != null) && (m_deployment.getCluster().getKfactor() > 0)) {
        consoleLog.error("K-Safety is not supported " + "in the community edition of VoltDB.");
        shutdownDeployment=true;
      }
      if ((m_deployment.getSnapshot() != null) && (m_deployment.getSnapshot().isEnabled())) {
        consoleLog.error("Snapshots are not supported " + "in the community edition of VoltDB.");
        shutdownDeployment=true;
      }
      if ((m_deployment.getCommandlog() != null) && (m_deployment.getCommandlog().isEnabled())) {
        consoleLog.error("Command logging is not supported " + "in the community edition of VoltDB.");
        shutdownDeployment=true;
      }
      if ((m_deployment.getExport() != null) && (m_deployment.getExport().isEnabled())) {
        consoleLog.error("Export is not supported " + "in the community edition of VoltDB.");
        shutdownDeployment=true;
      }
      if (m_config.m_startAction != StartAction.CREATE) {
        consoleLog.error("Start action \"" + m_config.m_startAction.getClass().getSimpleName() + "\" is not supported in the community edition of VoltDB.");
        shutdownAction=true;
      }
      if (shutdownAction || shutdownDeployment) {
        String msg="This process will exit. Please run VoltDB with ";
        if (shutdownDeployment) {
          msg+="a deployment file compatible with the community edition";
        }
        if (shutdownDeployment && shutdownAction) {
          msg+=" and ";
        }
        if (shutdownAction && !shutdownDeployment) {
          msg+="the CREATE start action";
        }
        msg+=".";
        VoltDB.crashLocalVoltDB(msg,false,null);
      }
    }
    HeartbeatType hbt=m_deployment.getHeartbeat();
    if (hbt != null) {
      m_config.m_deadHostTimeoutMS=hbt.getTimeout() * 1000;
      m_messenger.setDeadHostTimeout(m_config.m_deadHostTimeoutMS);
    }
 else {
      hostLog.info("Dead host timeout set to " + m_config.m_deadHostTimeoutMS + " milliseconds");
    }
    final String elasticSetting=m_deployment.getCluster().getElastic().trim().toUpperCase();
    if (elasticSetting.equals("ENABLED")) {
      TheHashinator.setConfiguredHashinatorType(HashinatorType.ELASTIC);
    }
 else     if (!elasticSetting.equals("DISABLED")) {
      VoltDB.crashLocalVoltDB("Error in deployment file,  elastic attribute of " + "cluster element must be " + "'enabled' or 'disabled' but was '" + elasticSetting + "'",false,null);
    }
 else {
      TheHashinator.setConfiguredHashinatorType(HashinatorType.LEGACY);
    }
    SystemSettingsType sysType=m_deployment.getSystemsettings();
    if (sysType != null) {
      hostLog.info("Host query timeout set to " + sysType.getQuery().getTimeout() + " milliseconds");
    }
    Catalog catalog=new Catalog();
    Cluster cluster=catalog.getClusters().add("cluster");
    Database db=cluster.getDatabases().add("database");
    if (m_deployment.getUsers() != null) {
      for (      UsersType.User user : m_deployment.getUsers().getUser()) {
        Set<String> roles=CatalogUtil.mergeUserRoles(user);
        if (roles.isEmpty()) {
          continue;
        }
        for (        String role : roles) {
          if (db.getGroups().get(role) == null) {
            db.getGroups().add(role);
          }
        }
      }
    }
    long result=CatalogUtil.compileDeployment(catalog,m_deployment,true,true);
    if (result < 0) {
      hostLog.fatal("Error validating deployment file");
      VoltDB.crashLocalVoltDB("Error validating deployment file");
    }
    byte[] deploymentHash=CatalogUtil.makeCatalogOrDeploymentHash(deploymentBytes);
    m_catalogContext=new CatalogContext(TxnEgo.makeZero(MpInitiator.MP_INIT_PID).getTxnId(),0,catalog,null,deploymentHash,0,-1);
    int numberOfNodes=m_deployment.getCluster().getHostcount();
    if (numberOfNodes <= 0) {
      hostLog.l7dlog(Level.FATAL,LogKeys.host_VoltDB_InvalidHostCount.name(),new Object[]{numberOfNodes},null);
      VoltDB.crashLocalVoltDB("Invalid cluster size: " + numberOfNodes,false,null);
    }
    return numberOfNodes;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
