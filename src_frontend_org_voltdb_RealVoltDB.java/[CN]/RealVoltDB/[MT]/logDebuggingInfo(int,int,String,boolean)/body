{
  hostLog.info(String.format("Listening for native wire protocol clients on port %d.",m_config.m_port));
  if (m_catalogContext.cluster.getAdminenabled()) {
    hostLog.info(String.format("Listening for admin wire protocol clients on port %d.",adminPort));
  }
 else {
    hostLog.info("The admin client port is disabled.");
  }
  if (m_inAdminMode) {
    hostLog.info(String.format("Started in admin mode. Clients on port %d will be rejected in admin mode.",m_config.m_port));
  }
  if (httpPortExtraLogMessage != null)   hostLog.info(httpPortExtraLogMessage);
  if (httpPort != -1) {
    hostLog.info(String.format("Local machine HTTP monitoring is listening on port %d.",httpPort));
  }
 else {
    hostLog.info(String.format("Local machine HTTP monitoring is disabled."));
  }
  if (jsonEnabled) {
    hostLog.info(String.format("Json API over HTTP enabled at path /api/1.0/, listening on port %d.",httpPort));
  }
 else {
    hostLog.info("Json API disabled.");
  }
  if (m_catalogContext.cluster.getSecurityenabled()) {
    hostLog.info("Client authentication is enabled.");
  }
 else {
    hostLog.info("Client authentication is not enabled. Anonymous clients accepted.");
  }
  List<String> iargs=ManagementFactory.getRuntimeMXBean().getInputArguments();
  StringBuilder sb=new StringBuilder("Available JVM arguments:");
  for (  String iarg : iargs)   sb.append(" ").append(iarg);
  if (iargs.size() > 0)   hostLog.info(sb.toString());
 else   hostLog.info("No JVM command line args known.");
  long javamaxheapmem=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  javamaxheapmem/=(1024 * 1024);
  hostLog.info(String.format("Maximum usable Java heap set to %d mb.",javamaxheapmem));
  SnapshotSchedule sshed=m_catalogContext.database.getSnapshotschedule().get("default");
  if (sshed == null) {
    hostLog.info("No schedule set for automated snapshots.");
  }
 else {
    final String frequencyUnitString=sshed.getFrequencyunit().toLowerCase();
    final char frequencyUnit=frequencyUnitString.charAt(0);
    String msg="[unknown frequency]";
switch (frequencyUnit) {
case 's':
      msg=String.valueOf(sshed.getFrequencyvalue()) + " seconds";
    break;
case 'm':
  msg=String.valueOf(sshed.getFrequencyvalue()) + " minutes";
break;
case 'h':
msg=String.valueOf(sshed.getFrequencyvalue()) + " hours";
break;
}
hostLog.info("Automatic snapshots enabled every " + msg + " to "+ sshed.getPath());
}
PlatformProperties pp=PlatformProperties.getPlatformProperties();
String[] lines=pp.toLogLines().split("\n");
for (String line : lines) {
hostLog.info(line.trim());
}
}
