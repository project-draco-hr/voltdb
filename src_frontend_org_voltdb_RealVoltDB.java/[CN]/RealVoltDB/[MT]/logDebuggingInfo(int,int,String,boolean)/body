{
  String startAction=m_config.m_startAction.toString();
  String startActionLog="Database start action is " + (startAction.substring(0,1).toUpperCase() + startAction.substring(1).toLowerCase()) + ".";
  if (!m_rejoining) {
    hostLog.info(startActionLog);
  }
  hostLog.info(String.format("Listening for native wire protocol clients on port %d.",m_config.m_port));
  hostLog.info(String.format("Listening for admin wire protocol clients on port %d.",adminPort));
  if (m_startMode == OperationMode.PAUSED) {
    hostLog.info(String.format("Started in admin mode. Clients on port %d will be rejected in admin mode.",m_config.m_port));
  }
  if (m_config.m_replicationRole == ReplicationRole.REPLICA) {
    consoleLog.info("Started as " + m_config.m_replicationRole.toString().toLowerCase() + " cluster. "+ "Clients can only call read-only procedures.");
  }
  if (httpPortExtraLogMessage != null) {
    hostLog.info(httpPortExtraLogMessage);
  }
  if (httpPort != -1) {
    hostLog.info(String.format("Local machine HTTP monitoring is listening on port %d.",httpPort));
  }
 else {
    hostLog.info(String.format("Local machine HTTP monitoring is disabled."));
  }
  if (jsonEnabled) {
    hostLog.info(String.format("Json API over HTTP enabled at path /api/1.0/, listening on port %d.",httpPort));
  }
 else {
    hostLog.info("Json API disabled.");
  }
  List<String> iargs=ManagementFactory.getRuntimeMXBean().getInputArguments();
  StringBuilder sb=new StringBuilder(2048).append("Available JVM arguments:");
  for (  String iarg : iargs)   sb.append(" ").append(iarg);
  if (iargs.size() > 0)   hostLog.info(sb.toString());
 else   hostLog.info("No JVM command line args known.");
  sb.delete(0,sb.length()).append("JVM class path: ");
  sb.append(System.getProperty("java.class.path","[not available]"));
  hostLog.info(sb.toString());
  long javamaxheapmem=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  javamaxheapmem/=(1024 * 1024);
  hostLog.info(String.format("Maximum usable Java heap set to %d mb.",javamaxheapmem));
  SortedMap<String,String> dbgMap=m_catalogContext.getDebuggingInfoFromCatalog();
  for (  String line : dbgMap.values()) {
    hostLog.info(line);
  }
  PlatformProperties pp=PlatformProperties.getPlatformProperties();
  String[] lines=pp.toLogLines().split("\n");
  for (  String line : lines) {
    hostLog.info(line.trim());
  }
  final ZooKeeper zk=m_messenger.getZK();
  ZKUtil.ByteArrayCallback operationModeFuture=new ZKUtil.ByteArrayCallback();
  try {
    zk.create(VoltZK.cluster_metadata + "/" + m_messenger.getHostId(),getLocalMetadata().getBytes("UTF-8"),Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL,new ZKUtil.StringCallback(),null);
    zk.getData(VoltZK.operationMode,false,operationModeFuture,null);
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB("Error creating \"/cluster_metadata\" node in ZK",true,e);
  }
  Map<Integer,String> clusterMetadata=new HashMap<Integer,String>(0);
  Set<Integer> metadataToRetrieve=new HashSet<Integer>(m_messenger.getLiveHostIds());
  metadataToRetrieve.remove(m_messenger.getHostId());
  while (!metadataToRetrieve.isEmpty()) {
    Map<Integer,ZKUtil.ByteArrayCallback> callbacks=new HashMap<Integer,ZKUtil.ByteArrayCallback>();
    for (    Integer hostId : metadataToRetrieve) {
      ZKUtil.ByteArrayCallback cb=new ZKUtil.ByteArrayCallback();
      zk.getData(VoltZK.cluster_metadata + "/" + hostId,false,cb,null);
      callbacks.put(hostId,cb);
    }
    for (    Map.Entry<Integer,ZKUtil.ByteArrayCallback> entry : callbacks.entrySet()) {
      try {
        ZKUtil.ByteArrayCallback cb=entry.getValue();
        Integer hostId=entry.getKey();
        clusterMetadata.put(hostId,new String(cb.getData(),"UTF-8"));
        metadataToRetrieve.remove(hostId);
      }
 catch (      KeeperException.NoNodeException e) {
      }
catch (      Exception e) {
        VoltDB.crashLocalVoltDB("Error retrieving cluster metadata",true,e);
      }
    }
  }
  hostLog.info("About to list cluster interfaces for all nodes with format [ip1 ip2 ... ipN] client-port:admin-port:http-port");
  for (  int hostId : m_messenger.getLiveHostIds()) {
    if (hostId == m_messenger.getHostId()) {
      hostLog.info(String.format("  Host id: %d with interfaces: %s [SELF]",hostId,MiscUtils.formatHostMetadataFromJSON(getLocalMetadata())));
    }
 else {
      String hostMeta=clusterMetadata.get(hostId);
      hostLog.info(String.format("  Host id: %d with interfaces: %s [PEER]",hostId,MiscUtils.formatHostMetadataFromJSON(hostMeta)));
    }
  }
  try {
    if (operationModeFuture.getData() != null) {
      String operationModeStr=new String(operationModeFuture.getData(),"UTF-8");
      m_startMode=OperationMode.valueOf(operationModeStr);
    }
  }
 catch (  KeeperException.NoNodeException e) {
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
