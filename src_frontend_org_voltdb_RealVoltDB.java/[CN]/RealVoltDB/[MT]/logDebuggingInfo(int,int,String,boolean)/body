{
  String startAction=m_config.m_startAction.toString();
  String startActionLog="Database start action is " + (startAction.substring(0,1).toUpperCase() + startAction.substring(1).toLowerCase()) + ".";
  if (m_config.m_startAction == START_ACTION.START) {
    startActionLog+=" Will create a new database if there is nothing to recover from.";
  }
  hostLog.info(startActionLog);
  hostLog.info(String.format("Listening for native wire protocol clients on port %d.",m_config.m_port));
  hostLog.info(String.format("Listening for admin wire protocol clients on port %d.",adminPort));
  if (m_startMode == OperationMode.PAUSED) {
    hostLog.info(String.format("Started in admin mode. Clients on port %d will be rejected in admin mode.",m_config.m_port));
  }
  if (httpPortExtraLogMessage != null)   hostLog.info(httpPortExtraLogMessage);
  if (httpPort != -1) {
    hostLog.info(String.format("Local machine HTTP monitoring is listening on port %d.",httpPort));
  }
 else {
    hostLog.info(String.format("Local machine HTTP monitoring is disabled."));
  }
  if (jsonEnabled) {
    hostLog.info(String.format("Json API over HTTP enabled at path /api/1.0/, listening on port %d.",httpPort));
  }
 else {
    hostLog.info("Json API disabled.");
  }
  List<String> iargs=ManagementFactory.getRuntimeMXBean().getInputArguments();
  StringBuilder sb=new StringBuilder("Available JVM arguments:");
  for (  String iarg : iargs)   sb.append(" ").append(iarg);
  if (iargs.size() > 0)   hostLog.info(sb.toString());
 else   hostLog.info("No JVM command line args known.");
  long javamaxheapmem=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  javamaxheapmem/=(1024 * 1024);
  hostLog.info(String.format("Maximum usable Java heap set to %d mb.",javamaxheapmem));
  m_catalogContext.logDebuggingInfoFromCatalog();
  PlatformProperties pp=PlatformProperties.getPlatformProperties();
  String[] lines=pp.toLogLines().split("\n");
  for (  String line : lines) {
    hostLog.info(line.trim());
  }
  hostLog.info("About to list cluster interfaces for all nodes with format ip:client-port:admin-port:http-port");
  for (  int hostId : m_catalogContext.siteTracker.getAllLiveHosts()) {
    if (hostId == m_messenger.getHostId()) {
      hostLog.info(String.format("  Host id: %d with interfaces: %s [SELF]",hostId,getLocalMetadata()));
    }
 else {
      String hostMeta=m_clusterMetadata.get(hostId);
      hostLog.info(String.format("  Host id: %d with interfaces: %s [PEER]",hostId,hostMeta));
    }
  }
}
