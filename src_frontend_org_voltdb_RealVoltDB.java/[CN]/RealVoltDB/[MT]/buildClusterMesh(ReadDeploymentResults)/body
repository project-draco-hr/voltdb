{
  final boolean bareAtStartup=m_config.m_forceVoltdbCreate || pathsWithRecoverableArtifacts(readDepl.deployment).isEmpty();
  setBare(bareAtStartup);
  final Supplier<Integer> hostCountSupplier=new Supplier<Integer>(){
    @Override public Integer get(){
      return m_clusterSettings.get().hostcount();
    }
  }
;
  ClusterType clusterType=readDepl.deployment.getCluster();
  MeshProber criteria=MeshProber.builder().coordinators(m_config.m_coordinators).versionChecker(m_versionChecker).enterprise(m_config.m_isEnterprise).startAction(m_config.m_startAction).bare(bareAtStartup).configHash(CatalogUtil.makeDeploymentHashForConfig(readDepl.deploymentBytes)).hostCountSupplier(hostCountSupplier).kfactor(clusterType.getKfactor()).paused(m_config.m_isPaused).nodeStateSupplier(m_statusTracker.getNodeStateSupplier()).addAllowed(m_config.m_enableAdd).safeMode(m_config.m_safeMode).build();
  HostAndPort hostAndPort=criteria.getLeader();
  String hostname=hostAndPort.getHostText();
  int port=hostAndPort.getPort();
  org.voltcore.messaging.HostMessenger.Config hmconfig;
  hmconfig=new org.voltcore.messaging.HostMessenger.Config(hostname,port);
  if (m_config.m_placementGroup != null) {
    hmconfig.group=m_config.m_placementGroup;
  }
  hmconfig.internalPort=m_config.m_internalPort;
  hmconfig.internalInterface=m_config.m_internalInterface;
  hmconfig.zkInterface=m_config.m_zkInterface;
  hmconfig.deadHostTimeout=m_config.m_deadHostTimeoutMS;
  hmconfig.factory=new VoltDbMessageFactory();
  hmconfig.coreBindIds=m_config.m_networkCoreBindings;
  hmconfig.acceptor=criteria;
  m_messenger=new org.voltcore.messaging.HostMessenger(hmconfig,this);
  hostLog.info(String.format("Beginning inter-node communication on port %d.",m_config.m_internalPort));
  try {
    m_messenger.start();
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB(e.getMessage(),true,e);
  }
  VoltZK.createPersistentZKNodes(m_messenger.getZK());
  m_myHostId=m_messenger.getHostId();
  hostLog.info(String.format("Host id of this node is: %d",m_myHostId));
  consoleLog.info(String.format("Host id of this node is: %d",m_myHostId));
  MeshProber.Determination determination=criteria.waitForDetermination();
  if (determination.paused) {
    m_messenger.pause();
  }
 else {
    m_messenger.unpause();
  }
  if (m_myHostId == 0 && determination.startAction.doesJoin()) {
    VoltDB.crashLocalVoltDB("Unable to rejoin a node to itself.  " + "Please check your command line and start action and try again.",false,null);
  }
  if (determination.startAction.doesJoin()) {
    m_clusterSettings.load(m_messenger.getZK());
    m_clusterSettings.get().store();
  }
 else   if (m_myHostId == 0) {
    m_clusterSettings.store(m_messenger.getZK());
  }
  m_clusterCreateTime=m_messenger.getInstanceId().getTimestamp();
  return determination;
}
