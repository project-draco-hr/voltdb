{
  String rejoinHostCredentialString=null;
  String rejoinHostAddressString=null;
  int rejoinPort=config.m_port;
  String rejoinHost=null;
  String rejoinUser=null;
  String rejoinPass=null;
  m_recovering=true;
  int atSignIndex=config.m_rejoinToHostAndPort.indexOf('@');
  if (atSignIndex == -1) {
    rejoinHostAddressString=config.m_rejoinToHostAndPort;
  }
 else {
    rejoinHostCredentialString=config.m_rejoinToHostAndPort.substring(0,atSignIndex).trim();
    rejoinHostAddressString=config.m_rejoinToHostAndPort.substring(atSignIndex + 1).trim();
  }
  int colonIndex=-1;
  if (rejoinHostCredentialString != null) {
    colonIndex=rejoinHostCredentialString.indexOf(':');
    if (colonIndex == -1) {
      rejoinUser=rejoinHostCredentialString.trim();
      System.out.print("password: ");
      BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
      try {
        rejoinPass=br.readLine();
      }
 catch (      IOException e) {
        hostLog.error("Unable to read passord for rejoining credentials from console.");
        System.exit(-1);
      }
    }
 else {
      rejoinUser=rejoinHostCredentialString.substring(0,colonIndex).trim();
      rejoinPass=rejoinHostCredentialString.substring(colonIndex + 1).trim();
    }
  }
  colonIndex=rejoinHostAddressString.indexOf(':');
  if (colonIndex == -1) {
    rejoinHost=rejoinHostAddressString.trim();
  }
 else {
    rejoinHost=rejoinHostAddressString.substring(0,colonIndex).trim();
    rejoinPort=Integer.parseInt(rejoinHostAddressString.substring(colonIndex + 1).trim());
  }
  hostLog.info(String.format("Inter-node communicaton will use port %d.",config.m_internalPort));
  ServerSocketChannel listener=null;
  try {
    listener=ServerSocketChannel.open();
    listener.socket().bind(new InetSocketAddress(config.m_internalPort));
  }
 catch (  IOException e) {
    hostLog.error("Problem opening listening rejoin socket: " + e.getMessage());
    System.exit(-1);
  }
  m_messenger=new HostMessenger(m_network,listener,m_catalogContext.numberOfNodes,catalogCRC,deploymentCRC,hostLog);
  if ((rejoinUser != null) && (rejoinUser.length() == 0))   rejoinUser=null;
  if ((rejoinPass != null) && (rejoinPass.length() == 0))   rejoinPass=null;
  try {
    if (rejoinUser != null)     rejoinUser=URLDecoder.decode(rejoinUser,"UTF-8");
    if (rejoinPass != null)     rejoinPass=URLDecoder.decode(rejoinPass,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    hostLog.error("Problem URL-decoding credentials for rejoin authentication: " + e.getMessage());
    System.exit(-1);
  }
  ClientConfig clientConfig=new ClientConfig(rejoinUser,rejoinPass);
  Client client=ClientFactory.createClient(clientConfig);
  ClientResponse response=null;
  RejoinCallback rcb=new RejoinCallback(){
  }
;
  try {
    client.createConnection(rejoinHost,rejoinPort);
    InetSocketAddress inetsockaddr=new InetSocketAddress(rejoinHost,rejoinPort);
    SocketChannel socket=SocketChannel.open(inetsockaddr);
    String ip_addr=socket.socket().getLocalAddress().getHostAddress();
    socket.close();
    config.m_selectedRejoinInterface=config.m_internalInterface.isEmpty() ? ip_addr : config.m_internalInterface;
    client.callProcedure(rcb,"@Rejoin",config.m_selectedRejoinInterface,config.m_internalPort);
  }
 catch (  Exception e) {
    recoveryLog.fatal("Problem connecting client: " + e.getMessage());
    VoltDB.crashVoltDB();
  }
  Object retval[]=m_messenger.waitForGroupJoin(60 * 1000);
  m_catalogContext=new CatalogContext(TransactionIdManager.makeIdFromComponents(System.currentTimeMillis(),0,0),m_catalogContext.catalog,m_catalogContext.pathToCatalogJar,deploymentCRC,m_messenger.getDiscoveredCatalogVersion(),0);
  m_instanceId=new Object[]{retval[0],retval[1]};
  @SuppressWarnings("unchecked") HashSet<Integer> downHosts=(HashSet<Integer>)retval[2];
  recoveryLog.info("Down hosts are " + downHosts.toString());
  try {
    response=rcb.waitForResponse(3000);
    if (response == null) {
      recoveryLog.fatal("Recovering node timed out rejoining");
      VoltDB.crashVoltDB();
    }
  }
 catch (  InterruptedException e) {
    recoveryLog.fatal("Interrupted while attempting to rejoin cluster");
    VoltDB.crashVoltDB();
  }
  return downHosts;
}
