{
synchronized (m_catalogUpdateLock) {
    if (currentTxnId <= lastCatalogUpdate_txnId) {
      ContextTracker contextTracker=m_txnIdToContextTracker.get(currentTxnId);
      contextTracker.m_dispensedSites++;
      int ttlsites=m_catalogContext.siteTracker.getLiveExecutionSitesForHost(m_messenger.getHostId()).size();
      if (contextTracker.m_dispensedSites == ttlsites) {
        m_txnIdToContextTracker.remove(currentTxnId);
      }
      return contextTracker.m_context;
    }
 else     if (m_catalogContext.catalogVersion != expectedCatalogVersion) {
      throw new RuntimeException("Trying to update main catalog context with diff " + "commands generated for an out-of date catalog. Expected catalog version: " + expectedCatalogVersion + " does not match actual version: "+ m_catalogContext.catalogVersion);
    }
    lastCatalogUpdate_txnId=currentTxnId;
    m_catalogContext=m_catalogContext.update(currentTxnId,newCatalogURL,diffCommands,true,deploymentCRC);
    m_txnIdToContextTracker.put(currentTxnId,new ContextTracker(m_catalogContext));
    ExportManager.instance().updateCatalog(m_catalogContext);
    for (    ClientInterface ci : m_clientInterfaces) {
      ci.notifyOfCatalogUpdate();
    }
    return m_catalogContext;
  }
}
