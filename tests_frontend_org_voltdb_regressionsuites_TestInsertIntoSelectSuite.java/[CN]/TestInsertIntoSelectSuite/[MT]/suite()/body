{
  VoltServerConfig config=null;
  final MultiConfigSuiteBuilder builder=new MultiConfigSuiteBuilder(TestInsertIntoSelectSuite.class);
  final VoltProjectBuilder project=new VoltProjectBuilder();
  try {
    project.addLiteralSchema("CREATE TABLE p1(b1 INTEGER NOT NULL, a2 VARCHAR(10) NOT NULL, PRIMARY KEY (b1));" + "PARTITION TABLE p1 ON COLUMN b1;" + "CREATE TABLE p2(a1 INTEGER NOT NULL, a2 VARCHAR(10) NOT NULL); "+ "PARTITION TABLE p2 ON COLUMN a1;"+ "CREATE UNIQUE INDEX p2_tree_idx ON p2(a1);"+ "CREATE TABLE r1(b1 INTEGER NOT NULL, a2 VARCHAR(10) NOT NULL, PRIMARY KEY (b1));"+ "CREATE TABLE r2(a1 INTEGER NOT NULL, a2 VARCHAR(10) NOT NULL, PRIMARY KEY (a1));"+ "CREATE PROCEDURE CountP1 AS select count(*) from p1;"+ "CREATE PROCEDURE CountP2 AS select count(*) from p2;"+ "CREATE PROCEDURE CountR1 AS select count(*) from r1;"+ "CREATE PROCEDURE CountR2 AS select count(*) from r2;"+ "");
  }
 catch (  IOException error) {
    fail(error.getMessage());
  }
  config=new LocalCluster("iisf-onesite.jar",1,1,0,BackendTarget.NATIVE_EE_JNI);
  boolean t1=config.compile(project);
  assertTrue(t1);
  builder.addServerConfig(config);
  config=new LocalCluster("iisf-cluster.jar",2,3,1,BackendTarget.NATIVE_EE_JNI);
  boolean t2=config.compile(project);
  assertTrue(t2);
  builder.addServerConfig(config);
  return builder;
}
