{
  ClientResponse resp=client.callProcedure("@AdHoc","delete from source_p1");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  resp=client.callProcedure("@AdHoc","delete from source_p2");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  resp=client.callProcedure("@AdHoc","delete from target_p");
  assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  for (int i=0; i < 10; i++) {
    resp=client.callProcedure("SOURCE_P1.insert",i,Integer.toHexString(i),i,i);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=client.callProcedure("SOURCE_P1.insert",i,Integer.toHexString(-i),-i,-i);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=client.callProcedure("SOURCE_P1.insert",i,Integer.toHexString(i * 11),i * 11,i * 11);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=client.callProcedure("SOURCE_P1.insert",i,Integer.toHexString(i * -11),i * -11,i * -11);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    int j=i + 5;
    resp=client.callProcedure("SOURCE_P2.insert",j,Integer.toHexString(j),j,j);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=client.callProcedure("SOURCE_P2.insert",j,Integer.toHexString(-j),-j,-j);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=client.callProcedure("SOURCE_P2.insert",j,Integer.toHexString(j * 11),j * 11,(j * 11) % 128);
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
    resp=client.callProcedure("SOURCE_P2.insert",j,Integer.toHexString(j * -11),j * -11,-((j * 11) % 128));
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  }
}
