{
  VoltTable digestScanResults=request.aggregateTables[0];
  VoltTable scanResults=request.aggregateTables[2];
  Map<String,Snapshot> aggregates=new HashMap<String,Snapshot>();
  while (scanResults.advanceRow()) {
    if (scanResults.getString("RESULT").equals("SUCCESS") && scanResults.getString("READABLE").equals("TRUE") && scanResults.getString("COMPLETED").equals("TRUE")) {
      hashToSnapshot(scanResults,aggregates);
    }
  }
  while (digestScanResults.advanceRow()) {
    if (digestScanResults.getString("RESULT").equals("SUCCESS")) {
      hashDigestToSnapshot(digestScanResults,aggregates);
    }
  }
  List<ClientResultRow> clientResults=new ArrayList<ClientResultRow>();
  for (  Snapshot s : aggregates.values()) {
    clientResults.add(new ClientResultRow((String)s.asRow()[0],(String)s.asRow()[1],(long)s.asRow()[2],(long)s.asRow()[3],(long)s.asRow()[4],(String)s.asRow()[5],(String)s.asRow()[6],(String)s.asRow()[7],(String)s.asRow()[8]));
  }
  Collections.sort(clientResults,new Comparator<ClientResultRow>(){
    @Override public int compare(    ClientResultRow r1,    ClientResultRow r2){
      return r1.compareTo(r2);
    }
  }
);
  VoltTable clientSortedResults=constructClientResultsTable();
  for (  ClientResultRow row : clientResults) {
    clientSortedResults.addRow(row.path,row.nonce,row.txnid,row.created,row.size,row.tablesRequired,row.tablesMissing,row.tablesIncomplete,row.complete);
  }
  request.aggregateTables[0]=clientSortedResults;
}
