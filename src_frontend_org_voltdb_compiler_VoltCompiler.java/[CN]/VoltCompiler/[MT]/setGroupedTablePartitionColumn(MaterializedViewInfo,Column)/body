{
  Table destTable=mvi.getDest();
  List<Column> destColumnArray=CatalogUtil.getSortedCatalogItems(destTable.getColumns(),"index");
  String partitionColName=partitionColumn.getTypeName();
  if (mvi.getGroupbycols().size() > 0) {
    int index=0;
    for (    ColumnRef cref : CatalogUtil.getSortedCatalogItems(mvi.getGroupbycols(),"index")) {
      Column srcCol=cref.getColumn();
      if (srcCol.getName().equals(partitionColName)) {
        Column destCol=destColumnArray.get(index);
        destTable.setPartitioncolumn(destCol);
        return;
      }
      ++index;
    }
  }
 else {
    String complexGroupbyJson=mvi.getGroupbyexpressionsjson();
    assert(complexGroupbyJson != null && complexGroupbyJson.length() > 0);
    if (complexGroupbyJson.length() > 0) {
      int partitionColIndex=partitionColumn.getIndex();
      List<AbstractExpression> mvComplexGroupbyCols=null;
      try {
        mvComplexGroupbyCols=AbstractExpression.fromJSONArrayString(complexGroupbyJson,null);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      int index=0;
      for (      AbstractExpression expr : mvComplexGroupbyCols) {
        if (expr instanceof TupleValueExpression) {
          TupleValueExpression tve=(TupleValueExpression)expr;
          if (tve.getColumnIndex() == partitionColIndex) {
            Column destCol=destColumnArray.get(index);
            destTable.setPartitioncolumn(destCol);
            return;
          }
        }
        ++index;
      }
    }
  }
}
