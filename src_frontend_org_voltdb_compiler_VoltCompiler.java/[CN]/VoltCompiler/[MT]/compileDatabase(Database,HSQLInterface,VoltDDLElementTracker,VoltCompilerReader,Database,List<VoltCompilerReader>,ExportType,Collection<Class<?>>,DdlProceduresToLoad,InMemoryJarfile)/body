{
  final DDLCompiler ddlcompiler=new DDLCompiler(this,hsql,voltDdlTracker,m_classLoader);
  if (cannonicalDDLIfAny != null) {
    m_ddlFilePaths.put(cannonicalDDLIfAny.getName(),cannonicalDDLIfAny.getPath());
    ddlcompiler.loadSchema(cannonicalDDLIfAny,db,whichProcs);
  }
  m_dirtyTables.clear();
  for (  final VoltCompilerReader schemaReader : schemaReaders) {
    String origFilename=m_currentFilename;
    try {
      if (m_currentFilename == null || m_currentFilename.equals(NO_FILENAME))       m_currentFilename=schemaReader.getName();
      m_ddlFilePaths.put(schemaReader.getName(),schemaReader.getPath());
      ddlcompiler.loadSchema(schemaReader,db,whichProcs);
    }
  finally {
      m_currentFilename=origFilename;
    }
  }
  ddlcompiler.loadAutogenExportTableSchema(db,previousDBIfAny,whichProcs);
  ddlcompiler.compileToCatalog(db);
  addDatabaseEstimatesInfo(m_estimates,db);
  NavigableMap<String,NavigableSet<String>> exportTables=voltDdlTracker.getExportedTables();
  for (  Entry<String,NavigableSet<String>> e : exportTables.entrySet()) {
    String targetName=e.getKey();
    for (    String tableName : e.getValue()) {
      addExportTableToConnector(targetName,tableName,db);
    }
  }
  ddlcompiler.processMaterializedViewWarnings(db);
  if (export != null) {
    compileExport(export,db);
  }
  for (  Entry<String,String> drNode : voltDdlTracker.getDRedTables().entrySet()) {
    compileDRTable(drNode,db);
  }
  if (whichProcs != DdlProceduresToLoad.NO_DDL_PROCEDURES) {
    Collection<ProcedureDescriptor> allProcs=voltDdlTracker.getProcedureDescriptors();
    CatalogMap<Procedure> previousProcsIfAny=null;
    if (previousDBIfAny != null) {
      previousProcsIfAny=previousDBIfAny.getProcedures();
    }
    compileProcedures(db,hsql,allProcs,classDependencies,whichProcs,previousProcsIfAny,jarOutput);
  }
  m_addedClasses=voltDdlTracker.m_extraClassses.toArray(new String[0]);
  m_importLines=ImmutableSet.copyOf(voltDdlTracker.m_importLines);
  addExtraClasses(jarOutput);
  compileRowLimitDeleteStmts(db,hsql,ddlcompiler.getLimitDeleteStmtToXmlEntries());
}
