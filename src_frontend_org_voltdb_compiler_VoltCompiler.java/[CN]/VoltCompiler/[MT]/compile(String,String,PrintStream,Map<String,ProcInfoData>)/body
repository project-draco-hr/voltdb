{
  m_hsql=null;
  m_projectFileURL=projectFileURL;
  m_jarOutputPath=jarOutputPath;
  m_outputStream=output;
  m_procInfoOverrides=procInfoOverrides;
  m_warnings.clear();
  m_infos.clear();
  m_errors.clear();
  final Catalog catalog=compileCatalog(projectFileURL);
  if (catalog == null) {
    compilerLog.error("Catalog compilation failed.");
    summarizeErrors();
    return false;
  }
  HashMap<String,byte[]> explainPlans=getExplainPlans(catalog);
  final String catalogCommands=catalog.serialize();
  byte[] catalogBytes=null;
  try {
    catalogBytes=catalogCommands.getBytes("UTF-8");
  }
 catch (  final UnsupportedEncodingException e1) {
    addErr("Can't encode the compiled catalog file correctly");
    summarizeErrors();
    return false;
  }
  StringBuilder buildinfo=new StringBuilder();
  String info[]=RealVoltDB.extractBuildInfo();
  buildinfo.append(info[0]).append('\n');
  buildinfo.append(info[1]).append('\n');
  buildinfo.append(System.getProperty("user.name")).append('\n');
  buildinfo.append(System.getProperty("user.dir")).append('\n');
  buildinfo.append(Long.toString(System.currentTimeMillis())).append('\n');
  try {
    byte buildinfoBytes[]=buildinfo.toString().getBytes("UTF-8");
    m_jarOutput.put("buildinfo.txt",buildinfoBytes);
    m_jarOutput.put("catalog.txt",catalogBytes);
    m_jarOutput.put("project.xml",new File(projectFileURL));
    for (    final Entry<String,String> e : m_ddlFilePaths.entrySet())     m_jarOutput.put(e.getKey(),new File(e.getValue()));
    for (    final Entry<String,byte[]> e : explainPlans.entrySet())     m_jarOutput.put("plans/" + e.getKey(),e.getValue());
    m_jarOutput.writeToFile(new File(jarOutputPath)).run();
  }
 catch (  final Exception e) {
    e.printStackTrace();
    summarizeErrors();
    return false;
  }
  assert(!hasErrors());
  if (hasErrors()) {
    summarizeErrors();
    return false;
  }
  summarizeSuccess();
  return true;
}
