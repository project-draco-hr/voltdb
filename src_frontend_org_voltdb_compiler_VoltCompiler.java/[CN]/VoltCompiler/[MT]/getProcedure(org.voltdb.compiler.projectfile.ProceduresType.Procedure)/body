{
  final ArrayList<String> groups=new ArrayList<String>();
  if (xmlproc.getGroups() != null) {
    for (    String group : xmlproc.getGroups().split(",")) {
      groups.add(group);
    }
  }
  System.out.println("In getProcedure");
  String classattr=xmlproc.getClazz();
  if (xmlproc.getSql() != null) {
    String partattr=xmlproc.getPartitioninfo();
    if (partattr != null && partattr.length() == 0)     partattr=null;
    return new ProcedureDescriptor(groups,classattr,xmlproc.getSql().getValue(),xmlproc.getSql().getJoinorder(),partattr,false,null,null,null);
  }
 else {
    String partattr=xmlproc.getPartitioninfo();
    if (partattr != null) {
      String msg="Java procedures must specify partition info using " + "@ProcInfo annotation in the Java class implementation " + "and may not use the @partitioninfo project file procedure attribute.";
      throw new VoltCompilerException(msg);
    }
    Class<?> clazz;
    try {
      System.out.println("Calling forName");
      clazz=Class.forName(classattr,true,m_classLoader);
    }
 catch (    ClassNotFoundException e) {
      System.out.println("Fell into ClassNotFoundException");
      throw new VoltCompilerException(String.format("Cannot load class for procedure: %s",classattr));
    }
catch (    Throwable cause) {
      System.out.println("Fell into catch-all");
      throw new VoltCompilerException(String.format("Cannot load class for procedure: %s",classattr),cause);
    }
    System.out.println("Finished forName");
    return new ProcedureDescriptor(groups,Language.JAVA,null,clazz);
  }
}
