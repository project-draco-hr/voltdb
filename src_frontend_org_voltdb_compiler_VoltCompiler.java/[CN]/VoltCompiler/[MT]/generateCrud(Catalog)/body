{
  final LinkedList<ProcedureDescriptor> crudprocs=new LinkedList<ProcedureDescriptor>();
  final Database db=catalog.getClusters().get("cluster").getDatabases().get("database");
  for (  Table table : db.getTables()) {
    if (table.getIsreplicated()) {
      compilerLog.debug("Creating multi-partition insert procedure for replicated table " + table.getTypeName());
      generateCrudReplicatedInsert(table);
      continue;
    }
    if (CatalogUtil.isTableExportOnly(db,table)) {
      compilerLog.debug("Skipping creation of CRUD procedures for export-only table " + table.getTypeName());
      continue;
    }
    if (table.getMaterializer() != null) {
      compilerLog.debug("Skipping creation of CRUD procedures for view " + table.getTypeName());
      continue;
    }
    final Column partitioncolumn=table.getPartitioncolumn();
    crudprocs.add(generateCrudInsert(table,partitioncolumn));
    final CatalogMap<Constraint> constraints=table.getConstraints();
    final Iterator<Constraint> it=constraints.iterator();
    Constraint pkey=null;
    while (it.hasNext()) {
      Constraint constraint=it.next();
      if (constraint.getType() == ConstraintType.PRIMARY_KEY.getValue()) {
        pkey=constraint;
        break;
      }
    }
    if (pkey == null) {
      compilerLog.debug("Skipping creation of CRUD select/delete/update for partitioned table " + table.getTypeName() + " because no primary key is declared.");
      continue;
    }
    boolean pkeyHasPartitionColumn=false;
    CatalogMap<ColumnRef> pkeycols=pkey.getIndex().getColumns();
    Iterator<ColumnRef> pkeycolsit=pkeycols.iterator();
    while (pkeycolsit.hasNext()) {
      ColumnRef colref=pkeycolsit.next();
      if (colref.getColumn().equals(partitioncolumn)) {
        pkeyHasPartitionColumn=true;
        break;
      }
    }
    if (!pkeyHasPartitionColumn) {
      compilerLog.debug("Skipping creation of CRUD select/delete/update for partitioned table " + table.getTypeName() + " because primary key does not include the partitioning column.");
      continue;
    }
    crudprocs.add(generateCrudSelect(table,partitioncolumn,pkey));
    crudprocs.add(generateCrudDelete(table,partitioncolumn,pkey));
    crudprocs.add(generateCrudUpdate(table,partitioncolumn,pkey));
  }
  return crudprocs;
}
