{
  if (outputStream != null) {
    Database database=m_catalog.getClusters().get("cluster").getDatabases().get("database");
    outputStream.println("------------------------------------------");
    outputStream.println("Successfully created " + m_jarOutputPath);
    for (    String ddl : m_ddlFilePaths.keySet()) {
      outputStream.println("Includes schema: " + m_ddlFilePaths.get(ddl));
    }
    outputStream.println();
    ArrayList<Procedure> nonDetProcs=new ArrayList<Procedure>();
    int countSinglePartition=0;
    int countMultiPartition=0;
    int countDefaultProcs=0;
    int countTableScans=0;
    for (    Procedure p : database.getProcedures()) {
      if (p.getSystemproc()) {
        continue;
      }
      if (!p.getDefaultproc()) {
        if (p.getSinglepartition()) {
          countSinglePartition++;
        }
 else {
          countMultiPartition++;
        }
      }
 else {
        countDefaultProcs++;
      }
      if (p.getHasseqscans()) {
        countTableScans++;
      }
      outputStream.printf("[%s][%s]%s %s\n",p.getSinglepartition() ? "SP" : "MP",p.getReadonly() ? "READ" : "WRITE",p.getHasseqscans() ? "[TABLE SCAN]" : "",p.getTypeName());
      for (      Statement s : p.getStatements()) {
        String seqScanTag="";
        if (s.getSeqscancount() > 0) {
          seqScanTag="[TABLE SCAN] ";
        }
        String determinismTag="";
        if (p.getHasjava() && (!p.getReadonly())) {
          if (s.getIscontentdeterministic() == false) {
            determinismTag="[NON-DETERMINISTIC CONTENT] ";
            nonDetProcs.add(p);
          }
 else           if (s.getIsorderdeterministic() == false) {
            determinismTag="[NON-DETERMINISTIC ORDER] ";
            nonDetProcs.add(p);
          }
        }
        String statementLine;
        String sqlText=s.getSqltext();
        sqlText=squeezeWhitespace(sqlText);
        if (seqScanTag.length() + determinismTag.length() + sqlText.length() > 80) {
          statementLine="  " + (seqScanTag + determinismTag + sqlText).substring(0,80) + "...";
        }
 else {
          statementLine="  " + seqScanTag + determinismTag+ sqlText;
        }
        outputStream.println(statementLine);
      }
      outputStream.println();
    }
    outputStream.println("------------------------------------------");
    if (countSinglePartition > 0) {
      outputStream.printf("[SP] Catalog contains %d single partition procedures.\n",countSinglePartition,countSinglePartition);
    }
    if (countMultiPartition > 0) {
      outputStream.printf("[MP] Catalog contains %d multi-partition procedures.\n",countMultiPartition,countMultiPartition);
    }
    if (countTableScans > 0) {
      outputStream.printf("[TABLE SCAN] Catalog contains %d procedures that use a table scan.\n",countTableScans,countTableScans);
    }
    outputStream.printf("Catalog contains %d built-in CRUD procedures.\n",countDefaultProcs);
    outputStream.println("------------------------------------------");
    if (countSinglePartition == 0 && countMultiPartition > 0) {
      outputStream.printf("\nALL MULTI-PARTITION WARNING:\n\n" + "All of the user procedures are multi-partition. This often\n" + "indicates that the application is not utilizing VoltDB partitioning\n"+ "for best performance.\n"+ "\nPlease see %s\nfor information on VoltDB partitioning.\n\n","http://voltdb.com/docs/UsingVoltDB/ChapAppDesign.php");
      outputStream.println("------------------------------------------");
    }
    if (!nonDetProcs.isEmpty()) {
      outputStream.println("\nNON-DETERMINISM WARNING:\n\n" + "The procedures listed below contain non-deterministic queries.\n");
      for (      Procedure p : nonDetProcs) {
        outputStream.println("    " + p.getClassname());
      }
      outputStream.println("\nUsing the output of these queries as input to subsequent\n" + "write queries can result in differences between replicated\n" + "partitions at runtime, forcing VoltDB to shutdown the cluster.\n"+ "Review the compiler messages above to identify the offending\n"+ "SQL statements (marked as \"[NDO] or [NDC]\").  Add a unique\n"+ "index to the schema or an explicit ORDER BY clause to the\n"+ "query to make these queries deterministic.\n");
      outputStream.println("------------------------------------------");
    }
  }
  if (feedbackStream != null) {
    for (    Feedback fb : m_warnings) {
      feedbackStream.println(fb.getLogString());
    }
    for (    Feedback fb : m_infos) {
      feedbackStream.println(fb.getLogString());
    }
  }
}
