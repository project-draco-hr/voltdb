{
  if (outputStream != null) {
    Database database=m_catalog.getClusters().get("cluster").getDatabases().get("database");
    outputStream.println("------------------------------------------");
    outputStream.println("Successfully created " + m_jarOutputPath);
    for (    String ddl : m_ddlFilePaths.keySet()) {
      outputStream.println("Includes schema: " + m_ddlFilePaths.get(ddl));
    }
    outputStream.println();
    ArrayList<Procedure> nonDetProcs=new ArrayList<Procedure>();
    for (    Procedure p : database.getProcedures()) {
      if (p.getSystemproc()) {
        continue;
      }
      outputStream.printf("[%s][%s]%s %s\n",p.getSinglepartition() ? "SP" : "MP",p.getReadonly() ? "RO" : "RW",p.getHasseqscans() ? "[Seq]" : "",p.getTypeName());
      for (      Statement s : p.getStatements()) {
        String seqScanTag="";
        if (s.getSeqscancount() > 0) {
          seqScanTag="[Seq] ";
        }
        String determinismTag="";
        if (p.getHasjava() && (!p.getReadonly())) {
          if (s.getIscontentdeterministic() == false) {
            determinismTag="[NDC] ";
            nonDetProcs.add(p);
          }
 else           if (s.getIsorderdeterministic() == false) {
            determinismTag="[NDO] ";
            nonDetProcs.add(p);
          }
        }
        String statementLine;
        String sqlText=s.getSqltext();
        sqlText=squeezeWhitespace(sqlText);
        if (seqScanTag.length() + determinismTag.length() + sqlText.length() > 80) {
          statementLine="  " + (seqScanTag + determinismTag + sqlText).substring(0,80) + "...";
        }
 else {
          statementLine="  " + seqScanTag + determinismTag+ sqlText;
        }
        outputStream.println(statementLine);
      }
      outputStream.println();
    }
    outputStream.println("------------------------------------------");
    if (!nonDetProcs.isEmpty()) {
      outputStream.println("\nNON-DETERMINISM WARNING:\n\n" + "The procedures listed below contain a mix of non-deterministic\n" + "reads as well as writes. If the output of the reads is used as\n"+ "input to the writes, VoltDB could be forced to stop the cluster\n"+ "to preserve consistency among replicas.\n");
      for (      Procedure p : nonDetProcs) {
        outputStream.println("    " + p.getClassname());
      }
      outputStream.println("\nTo avoid this warning, use the output above to determine non-\n" + "deterministic SQL statements and make them deterministic. If the\n" + "statement is doing a sequential scan, try adding a non-hash primary\n"+ "key index. If the statement is scanning non-unique tree index, an\n"+ "explicit order-by statement may be required.\n");
      outputStream.println("------------------------------------------");
    }
  }
  if (feedbackStream != null) {
    for (    Feedback fb : m_warnings) {
      feedbackStream.println(fb.getLogString());
    }
    for (    Feedback fb : m_infos) {
      feedbackStream.println(fb.getLogString());
    }
  }
}
