{
  cachedAddedClasses.clear();
  m_currentFilename=(projectFileURL != null ? new File(projectFileURL).getName() : "null");
  m_jarOutput=new InMemoryJarfile();
  ProjectType project=null;
  if (projectFileURL != null && !projectFileURL.isEmpty()) {
    try {
      JAXBContext jc=JAXBContext.newInstance("org.voltdb.compiler.projectfile");
      SchemaFactory sf=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);
      Schema schema=sf.newSchema(this.getClass().getResource("ProjectFileSchema.xsd"));
      Unmarshaller unmarshaller=jc.createUnmarshaller();
      unmarshaller.setSchema(schema);
      JAXBElement<ProjectType> result=(JAXBElement<ProjectType>)unmarshaller.unmarshal(new File(projectFileURL));
      project=result.getValue();
    }
 catch (    JAXBException e) {
      if (e.getLinkedException() instanceof java.io.FileNotFoundException) {
        addErr(e.getLinkedException().getMessage());
        compilerLog.error(e.getLinkedException().getMessage());
        return null;
      }
      DeprecatedProjectElement deprecated=DeprecatedProjectElement.valueOf(e);
      if (deprecated != null) {
        addErr("Found deprecated XML element \"" + deprecated.name() + "\" in project.xml file, "+ deprecated.getSuggestion());
        addErr("Error schema validating project.xml file. " + e.getLinkedException().getMessage());
        compilerLog.error("Found deprecated XML element \"" + deprecated.name() + "\" in project.xml file");
        compilerLog.error(e.getMessage());
        compilerLog.error(projectFileURL);
        return null;
      }
      if (e.getLinkedException() instanceof org.xml.sax.SAXParseException) {
        addErr("Error schema validating project.xml file. " + e.getLinkedException().getMessage());
        compilerLog.error("Error schema validating project.xml file: " + e.getLinkedException().getMessage());
        compilerLog.error(e.getMessage());
        compilerLog.error(projectFileURL);
        return null;
      }
      throw new RuntimeException(e);
    }
catch (    SAXException e) {
      addErr("Error schema validating project.xml file. " + e.getMessage());
      compilerLog.error("Error schema validating project.xml file. " + e.getMessage());
      return null;
    }
  }
 else {
    project=new ProjectType();
    project.setInfo(new InfoType());
    project.setDatabase(new DatabaseType());
  }
  m_catalog=new Catalog();
  m_catalog.execute("add / clusters cluster");
  m_catalog.getClusters().get("cluster").setSecurityenabled(false);
  DatabaseType database=project.getDatabase();
  if (database != null) {
    final String databaseName=database.getName();
    if (databaseName.equals("database") == false) {
      compilerLog.l7dlog(Level.ERROR,LogKeys.compiler_VoltCompiler_FailedToCompileXML.name(),null);
      return null;
    }
    try {
      compileDatabaseNode(database,ddlFilePaths);
    }
 catch (    final VoltCompilerException e) {
      compilerLog.l7dlog(Level.ERROR,LogKeys.compiler_VoltCompiler_FailedToCompileXML.name(),null);
      return null;
    }
  }
  assert(m_catalog != null);
  final int epoch=(int)(TransactionIdManager.getEpoch() / 1000);
  m_catalog.getClusters().get("cluster").setLocalepoch(epoch);
  try {
    m_report=ReportMaker.report(m_catalog,m_warnings);
    File file=new File("catalog-report.html");
    FileWriter fw=new FileWriter(file);
    fw.write(m_report);
    fw.close();
    m_reportPath=file.getAbsolutePath();
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  return m_catalog;
}
