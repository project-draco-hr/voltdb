{
  m_projectFileURL=(projectReader != null ? projectReader.getPath() : null);
  m_jarOutputPath=jarOutputPath;
  if (m_projectFileURL == null && (ddlReaderList == null || ddlReaderList.isEmpty())) {
    addErr("One or more DDL files are required.");
    return false;
  }
  if (m_jarOutputPath == null) {
    addErr("The output jar path is null.");
    return false;
  }
  m_warnings.clear();
  m_infos.clear();
  m_errors.clear();
  DatabaseType database=getProjectDatabase(projectReader);
  if (database == null) {
    compilerLog.error("Failed to create catalog database object.");
    return false;
  }
  final Catalog catalog=compileCatalogInternal(database,ddlReaderList);
  if (catalog == null) {
    compilerLog.error("Catalog compilation failed.");
    return false;
  }
  final String catalogCommands=catalog.serialize();
  byte[] catalogBytes=null;
  try {
    catalogBytes=catalogCommands.getBytes("UTF-8");
  }
 catch (  final UnsupportedEncodingException e1) {
    addErr("Can't encode the compiled catalog file correctly");
    return false;
  }
  StringBuilder buildinfo=new StringBuilder();
  String info[]=RealVoltDB.extractBuildInfo();
  buildinfo.append(info[0]).append('\n');
  buildinfo.append(info[1]).append('\n');
  buildinfo.append(System.getProperty("user.name")).append('\n');
  buildinfo.append(System.getProperty("user.dir")).append('\n');
  buildinfo.append(Long.toString(System.currentTimeMillis())).append('\n');
  try {
    byte buildinfoBytes[]=buildinfo.toString().getBytes("UTF-8");
    m_jarOutput.put("buildinfo.txt",buildinfoBytes);
    m_jarOutput.put("catalog.txt",catalogBytes);
    if (projectReader != null) {
      projectReader.addToJar(m_jarOutput);
    }
    for (    final Entry<String,String> e : m_ddlFilePaths.entrySet())     m_jarOutput.put(e.getKey(),new File(e.getValue()));
    m_jarOutput.put("catalog-report.html",m_report.getBytes(Constants.UTF8ENCODING));
    m_jarOutput.writeToFile(new File(jarOutputPath)).run();
  }
 catch (  final Exception e) {
    e.printStackTrace();
    return false;
  }
  assert(!hasErrors());
  if (hasErrors()) {
    return false;
  }
  return true;
}
