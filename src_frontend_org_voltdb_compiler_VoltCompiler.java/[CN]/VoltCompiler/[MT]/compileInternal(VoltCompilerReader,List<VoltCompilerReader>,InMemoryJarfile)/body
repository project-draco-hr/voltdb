{
  assert(ddlReaderList.size() > 0 || projectReader != null);
  final InMemoryJarfile jarOutput=(jarOutputRet != null ? jarOutputRet : new InMemoryJarfile());
  m_projectFileURL=(projectReader != null ? projectReader.getPath() : null);
  if (m_projectFileURL == null && (ddlReaderList == null || ddlReaderList.isEmpty())) {
    addErr("One or more DDL files are required.");
    return null;
  }
  m_warnings.clear();
  m_infos.clear();
  m_errors.clear();
  DatabaseType database=getProjectDatabase(projectReader);
  if (database == null) {
    return null;
  }
  final Catalog catalog=compileCatalogInternal(database,ddlReaderList,jarOutput);
  if (catalog == null) {
    return null;
  }
  m_canonicalDDL=CatalogSchemaTools.toSchema(catalog,m_importLines);
  try {
    m_report=ReportMaker.report(m_catalog,m_warnings,m_canonicalDDL);
    File file=new File("catalog-report.html");
    FileWriter fw=new FileWriter(file);
    fw.write(m_report);
    fw.close();
    m_reportPath=file.getAbsolutePath();
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  jarOutput.put(AUTOGEN_DDL_FILE_NAME,m_canonicalDDL.getBytes(Constants.UTF8ENCODING));
  if (DEBUG_VERIFY_CATALOG) {
    debugVerifyCatalog(jarOutput,catalog);
  }
  final String catalogCommands=catalog.serialize();
  byte[] catalogBytes=catalogCommands.getBytes(Constants.UTF8ENCODING);
  try {
    if (!jarOutput.containsKey(CatalogUtil.CATALOG_BUILDINFO_FILENAME)) {
      addBuildInfo(jarOutput);
    }
    jarOutput.put(CatalogUtil.CATALOG_FILENAME,catalogBytes);
    jarOutput.put("catalog-report.html",m_report.getBytes(Constants.UTF8ENCODING));
  }
 catch (  final Exception e) {
    e.printStackTrace();
    return null;
  }
  assert(!hasErrors());
  if (hasErrors()) {
    return null;
  }
  return jarOutput;
}
