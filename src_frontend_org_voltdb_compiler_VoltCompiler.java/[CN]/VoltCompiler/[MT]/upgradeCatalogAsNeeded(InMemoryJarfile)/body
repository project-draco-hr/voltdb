{
  String[] buildInfoLines=CatalogUtil.getBuildInfoFromJar(outputJar);
  String versionFromCatalog=buildInfoLines[0];
  String upgradedFromVersion=null;
  if (VoltDB.Configuration.m_forceCatalogUpgrade || !versionFromCatalog.equals(VoltDB.instance().getVersionString())) {
    VoltCompilerReader projectReader=(outputJar.containsKey("project.xml") ? new VoltCompilerJarFileReader(outputJar,"project.xml") : null);
    String versionFromVoltDB=VoltDB.instance().getVersionString();
    buildInfoLines[0]=versionFromVoltDB;
    buildInfoLines[1]=String.format("voltdb-auto-upgrade-to-%s",versionFromVoltDB);
    byte[] buildInfoBytes=StringUtils.join(buildInfoLines,"\n").getBytes();
    outputJar.put(CatalogUtil.CATALOG_BUILDINFO_FILENAME,buildInfoBytes);
    List<VoltCompilerReader> ddlReaderList=new ArrayList<VoltCompilerReader>();
    if (projectReader == null) {
      Entry<String,byte[]> entry=outputJar.firstEntry();
      while (entry != null) {
        String path=entry.getKey();
        if (path.toLowerCase().endsWith(".sql")) {
          ddlReaderList.add(new VoltCompilerJarFileReader(outputJar,path));
        }
        entry=outputJar.higherEntry(entry.getKey());
      }
    }
    ClassLoader originalClassLoader=m_classLoader;
    String jarName=String.format("catalog-%s.jar",versionFromVoltDB);
    String textName=String.format("catalog-%s.out",versionFromVoltDB);
    CatalogContext catalogContext=VoltDB.instance().getCatalogContext();
    final String outputJarPath=(catalogContext != null ? new File(catalogContext.cluster.getVoltroot(),jarName).getPath() : VoltDB.Configuration.getPathToCatalogForTest(jarName));
    final String outputTextPath=(catalogContext != null ? new File(catalogContext.cluster.getVoltroot(),textName).getPath() : VoltDB.Configuration.getPathToCatalogForTest(textName));
    try {
      m_classLoader=outputJar.getLoader();
      consoleLog.info(String.format("Version %s catalog will be automatically upgraded to version %s.",versionFromCatalog,versionFromVoltDB));
      boolean success=compileInternalToFile(projectReader,outputJarPath,ddlReaderList,outputJar);
      if (success) {
        upgradedFromVersion=versionFromCatalog;
      }
      PrintStream outputStream=new PrintStream(outputTextPath);
      try {
        if (success) {
          summarizeSuccess(outputStream,outputStream,outputJarPath);
          consoleLog.info(String.format("The catalog was automatically upgraded from " + "version %s to %s and saved to \"%s\". " + "Compiler output is available in \"%s\".",versionFromCatalog,versionFromVoltDB,outputJarPath,outputTextPath));
        }
 else {
          summarizeErrors(outputStream,outputStream);
          outputStream.close();
          compilerLog.error("Catalog upgrade failed.");
          compilerLog.info(String.format("Had attempted to perform an automatic version upgrade of a " + "catalog that was compiled by an older %s version of VoltDB, " + "but the automatic upgrade failed. The cluster  will not be "+ "able to start until the incompatibility is fixed. "+ "Try re-compiling the catalog with the newer %s version "+ "of the VoltDB compiler. Compiler output from the failed "+ "upgrade is available in \"%s\".",versionFromCatalog,versionFromVoltDB,outputTextPath));
          throw new IOException(String.format("Catalog upgrade failed. You will need to recompile using voltdb compile."));
        }
      }
  finally {
        outputStream.close();
      }
    }
 catch (    IOException ioe) {
      throw ioe;
    }
catch (    Exception e) {
      compilerLog.error("Catalog upgrade failed with error:");
      compilerLog.error(e.getMessage());
      compilerLog.info(String.format("Had attempted to perform an automatic version upgrade of a " + "catalog that was compiled by an older %s version of VoltDB, " + "but the automatic upgrade failed. The cluster  will not be "+ "able to start until the incompatibility is fixed. "+ "Try re-compiling the catalog with the newer %s version "+ "of the VoltDB compiler. Compiler output from the failed "+ "upgrade is available in \"%s\".",versionFromCatalog,versionFromVoltDB,outputTextPath));
      throw new IOException(String.format("Catalog upgrade failed. You will need to recompile using voltdb compile."));
    }
 finally {
      m_classLoader=originalClassLoader;
    }
  }
  return upgradedFromVersion;
}
