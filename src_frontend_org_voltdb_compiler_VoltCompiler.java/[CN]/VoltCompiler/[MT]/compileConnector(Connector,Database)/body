{
  if (conn == null) {
    return;
  }
  boolean adminstate=conn.isEnabled();
  if (!conn.isEnabled()) {
    compilerLog.info("Export configuration is present and is " + "configured to be disabled. Export will be disabled.");
  }
  org.voltdb.catalog.Connector catconn=catdb.getConnectors().add("0");
  catconn.setEnabled(adminstate);
  catconn.setLoaderclass(conn.getClazz());
  final ArrayList<String> userslist=new ArrayList<String>();
  final ArrayList<String> groupslist=new ArrayList<String>();
  if (conn.getUsers() != null) {
    for (    String user : conn.getUsers().split(",")) {
      userslist.add(user);
    }
  }
  if (conn.getGroups() != null) {
    for (    String group : conn.getGroups().split(",")) {
      groupslist.add(group);
    }
  }
  for (  String userName : userslist) {
    final User user=catdb.getUsers().get(userName);
    if (user == null) {
      throw new VoltCompilerException("Export connector " + conn.getClazz() + " has a user "+ userName+ " that does not exist");
    }
    final UserRef userRef=catconn.getAuthusers().add(userName);
    userRef.setUser(user);
  }
  for (  String groupName : groupslist) {
    final Group group=catdb.getGroups().get(groupName);
    if (group == null) {
      throw new VoltCompilerException("Export connector " + conn.getClazz() + " has a group "+ groupName+ " that does not exist");
    }
    final GroupRef groupRef=catconn.getAuthgroups().add(groupName);
    groupRef.setGroup(group);
  }
  Integer i=0;
  if (conn.getTables() != null) {
    for (    Tables.Table xmltable : conn.getTables().getTable()) {
      String tablename=xmltable.getName();
      org.voltdb.catalog.Table tableref=catdb.getTables().getIgnoreCase(tablename);
      if (tableref == null) {
        throw new VoltCompilerException("While configuring export, table " + tablename + " was not present in "+ "the catalog.");
      }
      if (xmltable.isExportonly() && CatalogUtil.isTableMaterializeViewSource(catdb,tableref)) {
        compilerLog.error("While configuring export, table " + tablename + " is a source table "+ "for a materialized view. Export only tables do not support views.");
        throw new VoltCompilerException("Export-only table configured with materialized view.");
      }
      if (xmltable.isExportonly() && tableref.getMaterializer() != null) {
        compilerLog.error("While configuring export, table " + tablename + " is a "+ "materialized view.  A view cannot be an export-only table.");
        throw new VoltCompilerException("View configured as an export-only table");
      }
      org.voltdb.catalog.ConnectorTableInfo connTableInfo=catconn.getTableinfo().add(i.toString());
      connTableInfo.setAppendonly(xmltable.isExportonly());
      connTableInfo.setTable(tableref);
      ++i;
    }
  }
}
