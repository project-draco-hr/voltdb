{
  assert(catalog != null);
  assert(database != null);
  final String[] procedures=new String[]{"org.voltdb.sysprocs.AdHoc","org.voltdb.sysprocs.InstanceId","org.voltdb.sysprocs.LastCommittedTransaction","org.voltdb.sysprocs.LoadMultipartitionTable","org.voltdb.sysprocs.Quiesce","org.voltdb.sysprocs.SnapshotSave","org.voltdb.sysprocs.SnapshotRestore","org.voltdb.sysprocs.SnapshotStatus","org.voltdb.sysprocs.SnapshotScan","org.voltdb.sysprocs.SnapshotDelete","org.voltdb.sysprocs.Shutdown","org.voltdb.sysprocs.StartSampler","org.voltdb.sysprocs.Statistics","org.voltdb.sysprocs.SystemInformation","org.voltdb.sysprocs.UpdateApplicationCatalog","org.voltdb.sysprocs.UpdateLogging"};
  for (  final String className : procedures) {
    Class<?> procClass=null;
    try {
      procClass=Class.forName(className);
    }
 catch (    final ClassNotFoundException e) {
      final String msg="Cannot load sysproc " + className;
      throw new VoltCompilerException(msg);
    }
    final String[] parts=className.split("\\.");
    final String shortName="@" + parts[parts.length - 1];
    final Procedure procedure=database.getProcedures().add(shortName);
    procedure.setClassname(className);
    procedure.setSystemproc(true);
    procedure.setReadonly(false);
    procedure.setHasjava(true);
    final ProcInfo info=procClass.getAnnotation(ProcInfo.class);
    if (info == null) {
      throw new VoltCompilerException("Sysproc " + shortName + " is missing annotation.");
    }
    procedure.setSinglepartition(info.singlePartition());
  }
}
