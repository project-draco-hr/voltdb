{
  assert(catalog != null);
  assert(database != null);
  final String[][] procedures={{"org.voltdb.sysprocs.AdHoc","false","false"},{"org.voltdb.sysprocs.LoadMultipartitionTable","false","false"},{"org.voltdb.sysprocs.Quiesce","false","false"},{"org.voltdb.sysprocs.Rejoin","false","false"},{"org.voltdb.sysprocs.SnapshotSave","false","false"},{"org.voltdb.sysprocs.SnapshotRestore","false","false"},{"org.voltdb.sysprocs.SnapshotStatus","false","false"},{"org.voltdb.sysprocs.SnapshotScan","false","false"},{"org.voltdb.sysprocs.SnapshotDelete","false","false"},{"org.voltdb.sysprocs.Shutdown","false","false"},{"org.voltdb.sysprocs.Statistics","true","false"},{"org.voltdb.sysprocs.SystemInformation","true","false"},{"org.voltdb.sysprocs.UpdateApplicationCatalog","false","true"},{"org.voltdb.sysprocs.UpdateLogging","false","true"}};
  for (int ii=0; ii < procedures.length; ++ii) {
    String classname=procedures[ii][0];
    boolean readonly=Boolean.parseBoolean(procedures[ii][1]);
    boolean everysite=Boolean.parseBoolean(procedures[ii][2]);
    Class<?> procClass=null;
    try {
      procClass=Class.forName(classname);
    }
 catch (    final ClassNotFoundException e) {
      final String msg="Cannot load sysproc " + classname;
      throw new VoltCompilerException(msg);
    }
    final String[] parts=classname.split("\\.");
    final String shortName="@" + parts[parts.length - 1];
    final ProcInfo info=procClass.getAnnotation(ProcInfo.class);
    if (info == null) {
      throw new VoltCompilerException("Sysproc " + shortName + " is missing annotation.");
    }
    final Procedure procedure=database.getProcedures().add(shortName);
    procedure.setClassname(classname);
    procedure.setReadonly(readonly);
    procedure.setSystemproc(true);
    procedure.setHasjava(true);
    procedure.setSinglepartition(info.singlePartition());
    procedure.setEverysite(everysite);
  }
}
