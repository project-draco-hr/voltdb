{
  assert(ddlReaderList.size() > 0 || projectReader != null);
  final InMemoryJarfile jarOutput=(jarOutputRet != null ? jarOutputRet : new InMemoryJarfile());
  m_projectFileURL=(projectReader != null ? projectReader.getPath() : null);
  if (m_projectFileURL == null && (ddlReaderList == null || ddlReaderList.isEmpty())) {
    addErr("One or more DDL files are required.");
    return false;
  }
  if (jarOutputPath == null) {
    addErr("The output jar path is null.");
    return false;
  }
  m_warnings.clear();
  m_infos.clear();
  m_errors.clear();
  DatabaseType database=getProjectDatabase(projectReader);
  if (database == null) {
    return false;
  }
  final Catalog catalog=compileCatalogInternal(database,ddlReaderList,jarOutput);
  if (catalog == null) {
    return false;
  }
  final String catalogCommands=catalog.serialize();
  byte[] catalogBytes=catalogCommands.getBytes(Constants.UTF8ENCODING);
  try {
    if (!jarOutput.containsKey(CatalogUtil.CATALOG_BUILDINFO_FILENAME)) {
      addBuildInfo(jarOutput);
    }
    jarOutput.put(CatalogUtil.CATALOG_FILENAME,catalogBytes);
    if (projectReader != null) {
      projectReader.putInJar(jarOutput,"project.xml");
    }
    for (    final Entry<String,String> e : m_ddlFilePaths.entrySet()) {
      String key=e.getKey();
      if (!jarOutput.containsKey(key)) {
        jarOutput.put(e.getKey(),new File(e.getValue()));
      }
    }
    jarOutput.put("catalog-report.html",m_report.getBytes(Constants.UTF8ENCODING));
    jarOutput.writeToFile(new File(jarOutputPath)).run();
  }
 catch (  final Exception e) {
    e.printStackTrace();
    return false;
  }
  assert(!hasErrors());
  if (hasErrors()) {
    return false;
  }
  return true;
}
