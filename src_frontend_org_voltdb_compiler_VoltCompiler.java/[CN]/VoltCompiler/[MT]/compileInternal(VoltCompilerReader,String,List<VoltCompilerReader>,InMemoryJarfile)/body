{
  assert(ddlReaderList.size() > 0 || projectReader != null);
  final InMemoryJarfile jarOutput=(jarOutputRet != null ? jarOutputRet : new InMemoryJarfile());
  m_projectFileURL=(projectReader != null ? projectReader.getPath() : null);
  if (m_projectFileURL == null && (ddlReaderList == null || ddlReaderList.isEmpty())) {
    addErr("One or more DDL files are required.");
    return false;
  }
  if (jarOutputPath == null) {
    addErr("The output jar path is null.");
    return false;
  }
  m_warnings.clear();
  m_infos.clear();
  m_errors.clear();
  DatabaseType database=getProjectDatabase(projectReader);
  if (database == null) {
    return false;
  }
  final Catalog catalog=compileCatalogInternal(database,ddlReaderList,jarOutput);
  if (catalog == null) {
    return false;
  }
  String binDDL=new String();
  for (  Cluster cluster : catalog.getClusters()) {
    for (    Database db : cluster.getDatabases()) {
      binDDL+=CatalogSchemaTools.toSchema(db,m_addedClasses);
    }
  }
  jarOutput.put("autogen-ddl.sql",binDDL.getBytes(Constants.UTF8ENCODING));
  final String catalogCommands=catalog.serialize();
  byte[] catalogBytes=catalogCommands.getBytes(Constants.UTF8ENCODING);
  try {
    if (!jarOutput.containsKey(CatalogUtil.CATALOG_BUILDINFO_FILENAME)) {
      StringBuilder buildinfo=new StringBuilder();
      String info[]=RealVoltDB.extractBuildInfo();
      buildinfo.append(info[0]).append('\n');
      buildinfo.append(info[1]).append('\n');
      buildinfo.append(System.getProperty("user.name")).append('\n');
      buildinfo.append(System.getProperty("user.dir")).append('\n');
      buildinfo.append(Long.toString(System.currentTimeMillis())).append('\n');
      byte buildinfoBytes[]=buildinfo.toString().getBytes(Constants.UTF8ENCODING);
      jarOutput.put(CatalogUtil.CATALOG_BUILDINFO_FILENAME,buildinfoBytes);
    }
    jarOutput.put(CatalogUtil.CATALOG_FILENAME,catalogBytes);
    jarOutput.put("catalog-report.html",m_report.getBytes(Constants.UTF8ENCODING));
    jarOutput.writeToFile(new File(jarOutputPath)).run();
  }
 catch (  final Exception e) {
    e.printStackTrace();
    return false;
  }
  assert(!hasErrors());
  if (hasErrors()) {
    return false;
  }
  return true;
}
