{
  if (cachedAddedClasses.contains(cls)) {
    return;
  }
 else {
    cachedAddedClasses.add(cls);
  }
  for (  final Class<?> nested : cls.getDeclaredClasses()) {
    addClassToJar(nested,compiler);
  }
  String packagePath=cls.getName();
  packagePath=packagePath.replace('.','/');
  packagePath+=".class";
  String realName=cls.getName();
  realName=realName.substring(realName.lastIndexOf('.') + 1);
  realName+=".class";
  final URL absolutePath=cls.getResource(realName);
  File file=null;
  InputStream fis=null;
  int fileSize=0;
  try {
    file=new File(URLDecoder.decode(absolutePath.getFile(),"UTF-8"));
    fis=new FileInputStream(file);
    assert(file.canRead());
    assert(file.isFile());
    fileSize=(int)file.length();
  }
 catch (  final FileNotFoundException e) {
    try {
      final String contents=readFileFromJarfile(absolutePath.getPath());
      fis=new StringInputStream(contents);
      fileSize=contents.length();
    }
 catch (    final Exception e2) {
      final String msg="Unable to locate classfile for " + realName;
      throw compiler.new VoltCompilerException(msg);
    }
  }
catch (  final UnsupportedEncodingException e) {
    e.printStackTrace();
    System.exit(-1);
  }
  assert(fileSize > 0);
  int readSize=0;
  final byte[] fileBytes=new byte[fileSize];
  try {
    while (readSize < fileSize) {
      readSize=fis.read(fileBytes,readSize,fileSize - readSize);
    }
  }
 catch (  final IOException e) {
    final String msg="Unable to read (or completely read) classfile for " + realName;
    throw compiler.new VoltCompilerException(msg);
  }
  compiler.m_jarOutput.put(packagePath,fileBytes);
}
