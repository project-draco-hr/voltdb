{
  cachedAddedClasses.clear();
  m_currentFilename=new File(projectFileURL).getName();
  m_jarOutput=new InMemoryJarfile();
  ProjectType project=null;
  try {
    JAXBContext jc=JAXBContext.newInstance("org.voltdb.compiler.projectfile");
    SchemaFactory sf=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);
    Schema schema=sf.newSchema(this.getClass().getResource("ProjectFileSchema.xsd"));
    Unmarshaller unmarshaller=jc.createUnmarshaller();
    unmarshaller.setSchema(schema);
    JAXBElement<ProjectType> result=(JAXBElement<ProjectType>)unmarshaller.unmarshal(new File(projectFileURL));
    project=result.getValue();
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof java.io.FileNotFoundException) {
      addErr(e.getLinkedException().getMessage());
      compilerLog.error(e.getLinkedException().getMessage());
      return null;
    }
    if (e.getLinkedException() instanceof org.xml.sax.SAXParseException) {
      addErr("Error schema validating project.xml file. " + e.getLinkedException().getMessage());
      compilerLog.error("Error schema validating project.xml file: " + e.getLinkedException().getMessage());
      compilerLog.error(e.getMessage());
      compilerLog.error(projectFileURL);
      return null;
    }
    throw new RuntimeException(e);
  }
catch (  SAXException e) {
    addErr("Error schema validating project.xml file. " + e.getMessage());
    compilerLog.error("Error schema validating project.xml file. " + e.getMessage());
    return null;
  }
  try {
    compileXMLRootNode(project);
  }
 catch (  final VoltCompilerException e) {
    compilerLog.l7dlog(Level.ERROR,LogKeys.compiler_VoltCompiler_FailedToCompileXML.name(),null);
    compilerLog.error(e.getMessage());
    return null;
  }
  assert(m_catalog != null);
  final int epoch=(int)(TransactionIdManager.getEpoch() / 1000);
  m_catalog.getClusters().get("cluster").setLocalepoch(epoch);
  m_currentFilename=null;
  return m_catalog;
}
