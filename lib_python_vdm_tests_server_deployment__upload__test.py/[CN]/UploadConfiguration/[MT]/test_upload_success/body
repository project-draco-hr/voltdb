def test_upload_success(self):
    '\n        Test to upload file and check the result.\n        '
    response = requests.get(__db_url__)
    value = response.json()
    if value:
        db_length = len(value['databases'])
        last_db_id = value['databases'][(db_length - 1)]['id']
        res = requests.put(((__db_url__ + str(last_db_id)) + '/deployment/'), files={'file': open('test-files/deployment.xml', 'rb'), })
        assert (res.status_code == 200)
        result = json.loads(res.content)
        self.assertEqual(result['status'], 'success')
        response = requests.get(((__db_url__ + str(last_db_id)) + '/deployment/'))
        value = response.json()
        if value:
            self.assertEqual(value['deployment']['admin-mode']['adminstartup'], False)
            self.assertEqual(value['deployment']['admin-mode']['port'], 21211)
            self.assertEqual(value['deployment']['dr']['id'], 6)
            self.assertEqual(value['deployment']['dr']['listen'], True)
            self.assertEqual(value['deployment']['dr']['port'], 12112)
            self.assertEqual(value['deployment']['snapshot']['enabled'], True)
            self.assertEqual(value['deployment']['snapshot']['frequency'], '24h')
            self.assertEqual(value['deployment']['snapshot']['retain'], 2)
            self.assertEqual(value['deployment']['snapshot']['prefix'], 'AUTOSNAP')
            self.assertEqual(value['deployment']['partition-detection']['enabled'], True)
            self.assertEqual(value['deployment']['security']['enabled'], True)
            self.assertEqual(value['deployment']['security']['provider'], 'hash')
            self.assertEqual(value['deployment']['export']['configuration'][0]['enabled'], True)
            self.assertEqual(value['deployment']['export']['configuration'][0]['stream'], 'test')
            self.assertEqual(value['deployment']['export']['configuration'][0]['type'], 'kafka')
            self.assertEqual(value['deployment']['export']['configuration'][0]['exportconnectorclass'], '')
            self.assertEqual(value['deployment']['export']['configuration'][0]['property'][0]['name'], 'metadata.broker.list')
            self.assertEqual(value['deployment']['export']['configuration'][0]['property'][0]['value'], '1')
            self.assertEqual(value['deployment']['cluster']['elastic'], 'enabled')
            self.assertEqual(value['deployment']['cluster']['hostcount'], 1)
            self.assertEqual(value['deployment']['cluster']['kfactor'], 2)
            self.assertEqual(value['deployment']['cluster']['schema'], 'ddl')
            self.assertEqual(value['deployment']['cluster']['sitesperhost'], 1)
            self.assertEqual(value['deployment']['commandlog']['enabled'], True)
            self.assertEqual(value['deployment']['commandlog']['logsize'], 1024)
            self.assertEqual(value['deployment']['commandlog']['synchronous'], False)
            self.assertEqual(value['deployment']['commandlog']['frequency']['time'], 200)
            self.assertEqual(value['deployment']['commandlog']['frequency']['transactions'], 2147483647)
            self.assertEqual(value['deployment']['systemsettings']['query']['timeout'], 10000)
            self.assertEqual(value['deployment']['systemsettings']['temptables']['maxsize'], 100)
            self.assertEqual(value['deployment']['systemsettings']['snapshot']['priority'], 6)
            self.assertEqual(value['deployment']['systemsettings']['elastic']['duration'], 50)
            self.assertEqual(value['deployment']['systemsettings']['elastic']['throughput'], 2)
            self.assertEqual(value['deployment']['systemsettings']['resourcemonitor']['memorylimit']['size'], '80%')
            self.assertEqual(value['deployment']['systemsettings']['resourcemonitor']['disklimit']['feature'][0]['name'], 'snapshots')
            self.assertEqual(value['deployment']['systemsettings']['resourcemonitor']['disklimit']['feature'][0]['size'], '66')
            self.assertEqual(value['deployment']['httpd']['enabled'], True)
            self.assertEqual(value['deployment']['httpd']['port'], 8080)
            self.assertEqual(value['deployment']['httpd']['jsonapi']['enabled'], True)
            self.assertEqual(value['deployment']['paths']['snapshots']['path'], 'snapshots1')
            self.assertEqual(value['deployment']['paths']['commandlogsnapshot']['path'], 'command_log_snapshot2')
            self.assertEqual(value['deployment']['paths']['voltdbroot']['path'], 'voltdbroot3')
            self.assertEqual(value['deployment']['paths']['exportoverflow']['path'], 'export_overflow3')
            self.assertEqual(value['deployment']['paths']['droverflow']['path'], 'dr_overflow4')
            self.assertEqual(value['deployment']['paths']['commandlog']['path'], 'command_log')
            self.assertEqual(value['deployment']['heartbeat']['timeout'], 90)
            self.assertEqual(value['deployment']['users']['user'][0]['name'], 'abc')
            self.assertEqual(value['deployment']['users']['user'][0]['plaintext'], True)
            self.assertEqual(value['deployment']['users']['user'][0]['roles'], 'User')
        else:
            print 'Deployment is not available.'
    else:
        print 'The database list is empty.'
