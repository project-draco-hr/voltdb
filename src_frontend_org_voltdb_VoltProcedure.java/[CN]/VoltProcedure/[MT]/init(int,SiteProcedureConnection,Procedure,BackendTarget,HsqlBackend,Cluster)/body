{
  if (m_initialized) {
    throw new IllegalStateException("VoltProcedure has already been initialized");
  }
 else {
    m_initialized=true;
  }
  m_catProc=catProc;
  m_site=site;
  m_isNative=(eeType != BackendTarget.HSQLDB_BACKEND);
  m_hsql=hsql;
  m_cluster=cluster;
  m_numberOfPartitions=numberOfPartitions;
  m_statsCollector=new ProcedureStatsCollector();
  VoltDB.instance().getStatsAgent().registerStatsSource(SysProcSelector.PROCEDURE,Integer.parseInt(site.getCorrespondingCatalogSite().getTypeName()),m_statsCollector);
  for (int i=0; i < m_expectedDeps.length; i++)   m_expectedDeps[i]=1;
  if (catProc.getHasjava()) {
    int tempParamTypesLength=0;
    Method tempProcMethod=null;
    Method[] methods=getClass().getDeclaredMethods();
    Class<?> tempParamTypes[]=null;
    boolean tempParamTypeIsPrimitive[]=null;
    boolean tempParamTypeIsArray[]=null;
    Class<?> tempParamTypeComponentType[]=null;
    for (    final Method m : methods) {
      String name=m.getName();
      if (name.equals("run")) {
        if (Modifier.isPublic(m.getModifiers()) == false)         continue;
        tempProcMethod=m;
        tempParamTypes=tempProcMethod.getParameterTypes();
        tempParamTypesLength=tempParamTypes.length;
        tempParamTypeIsPrimitive=new boolean[tempParamTypesLength];
        tempParamTypeIsArray=new boolean[tempParamTypesLength];
        tempParamTypeComponentType=new Class<?>[tempParamTypesLength];
        for (int ii=0; ii < tempParamTypesLength; ii++) {
          tempParamTypeIsPrimitive[ii]=tempParamTypes[ii].isPrimitive();
          tempParamTypeIsArray[ii]=tempParamTypes[ii].isArray();
          tempParamTypeComponentType[ii]=tempParamTypes[ii].getComponentType();
        }
      }
    }
    m_paramTypesLength=tempParamTypesLength;
    m_procMethod=tempProcMethod;
    m_paramTypes=tempParamTypes;
    m_paramTypeIsPrimitive=tempParamTypeIsPrimitive;
    m_paramTypeIsArray=tempParamTypeIsArray;
    m_paramTypeComponentType=tempParamTypeComponentType;
    if (m_procMethod == null) {
      log.debug("No good method found in: " + getClass().getName());
    }
    Map<String,Field> stmtMap=null;
    try {
      stmtMap=ProcedureCompiler.getValidSQLStmts(null,getClass().getSimpleName(),getClass(),true);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    Field[] fields=new Field[stmtMap.size()];
    int index=0;
    for (    Field f : stmtMap.values()) {
      fields[index++]=f;
    }
    for (    final Field f : fields) {
      String name=f.getName();
      Statement s=catProc.getStatements().get(name);
      if (s != null) {
        try {
          SQLStmt stmt=(SQLStmt)f.get(this);
          stmt.catStmt=s;
          initSQLStmt(stmt);
        }
 catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else {
    Statement catStmt=catProc.getStatements().get(ANON_STMT_NAME);
    SQLStmt stmt=new SQLStmt(catStmt.getSqltext());
    stmt.catStmt=catStmt;
    initSQLStmt(stmt);
    m_cachedSingleStmt[0]=stmt;
    m_procMethod=null;
    m_paramTypesLength=catProc.getParameters().size();
    m_paramTypes=new Class<?>[m_paramTypesLength];
    m_paramTypeIsPrimitive=new boolean[m_paramTypesLength];
    m_paramTypeIsArray=new boolean[m_paramTypesLength];
    m_paramTypeComponentType=new Class<?>[m_paramTypesLength];
    for (    ProcParameter param : catProc.getParameters()) {
      VoltType type=VoltType.get((byte)param.getType());
      if (type == VoltType.INTEGER)       type=VoltType.BIGINT;
      if (type == VoltType.SMALLINT)       type=VoltType.BIGINT;
      if (type == VoltType.TINYINT)       type=VoltType.BIGINT;
      m_paramTypes[param.getIndex()]=type.classFromType();
      m_paramTypeIsPrimitive[param.getIndex()]=m_paramTypes[param.getIndex()].isPrimitive();
      m_paramTypeIsArray[param.getIndex()]=param.getIsarray();
      assert(m_paramTypeIsArray[param.getIndex()] == false);
      m_paramTypeComponentType[param.getIndex()]=null;
    }
  }
}
