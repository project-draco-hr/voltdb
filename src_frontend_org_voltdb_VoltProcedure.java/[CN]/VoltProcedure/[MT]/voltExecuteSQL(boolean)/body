{
  if (!m_isNative) {
    VoltTable[] batch_results=m_queryResults.toArray(new VoltTable[m_queryResults.size()]);
    m_queryResults.clear();
    return batch_results;
  }
  assert(m_batchQueryStmtIndex == m_batchQueryArgsIndex);
  if (ProcedureProfiler.profilingLevel == ProcedureProfiler.Level.INTRUSIVE) {
    if (ProcedureProfiler.workloadTrace != null && m_workloadXactHandle != null) {
      m_workloadBatchId=ProcedureProfiler.workloadTrace.getNextBatchId(m_workloadXactHandle);
      for (int i=0; i < m_batchQueryStmtIndex; i++) {
        Object queryHandle=ProcedureProfiler.workloadTrace.startQuery(m_workloadXactHandle,m_batchQueryStmts[i].catStmt,m_batchQueryArgs[i],m_workloadBatchId);
        m_workloadQueryHandles.add(queryHandle);
      }
    }
  }
  VoltTable[] retval=null;
  if (ProcedureProfiler.profilingLevel == ProcedureProfiler.Level.INTRUSIVE) {
    retval=executeQueriesInIndividualBatches(m_batchQueryStmtIndex,m_batchQueryStmts,m_batchQueryArgs,isFinalSQL);
  }
 else {
    retval=executeQueriesInABatch(m_batchQueryStmtIndex,m_batchQueryStmts,m_batchQueryArgs,isFinalSQL);
  }
  if (ProcedureProfiler.profilingLevel == ProcedureProfiler.Level.INTRUSIVE) {
    if (ProcedureProfiler.workloadTrace != null) {
      for (      Object handle : m_workloadQueryHandles) {
        if (handle != null)         ProcedureProfiler.workloadTrace.stopQuery(handle);
      }
      m_workloadQueryHandles.clear();
    }
  }
  m_batchQueryStmtIndex=0;
  m_batchQueryArgsIndex=0;
  return retval;
}
