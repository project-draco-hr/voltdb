{
  CacheUse cacheUse=CacheUse.FAIL;
  if (m_plannerStats != null) {
    m_plannerStats.startStatsCollection();
  }
  try {
    if ((sqlIn == null) || (sqlIn.length() == 0)) {
      throw new RuntimeException("Can't plan empty or null SQL.");
    }
    String sql=sqlIn.trim();
    hostLog.debug("received sql stmt: " + sql);
    if (partitioning.isInferred()) {
      AdHocPlannedStatement cachedPlan=m_cache.getWithSQL(sqlIn);
      if (cachedPlan != null) {
        cacheUse=CacheUse.HIT1;
        return cachedPlan;
      }
 else {
        cacheUse=CacheUse.MISS;
      }
    }
    AbstractPlanNode.resetPlanNodeIds();
    TrivialCostModel costModel=new TrivialCostModel();
    DatabaseEstimates estimates=new DatabaseEstimates();
    QueryPlanner planner=new QueryPlanner(sql,"PlannerTool","PlannerToolProc",m_cluster,m_database,partitioning,m_hsql,estimates,true,AD_HOC_JOINED_TABLE_LIMIT,costModel,null,null,DeterminismMode.FASTER);
    CompiledPlan plan=null;
    String[] extractedLiterals=null;
    String parsedToken=null;
    try {
      planner.parse();
      parsedToken=planner.parameterize();
      if (partitioning.isInferred()) {
        assert(parsedToken != null);
        extractedLiterals=planner.extractedParamLiteralValues();
        List<BoundPlan> boundVariants=m_cache.getWithParsedToken(parsedToken);
        if (boundVariants != null) {
          assert(!boundVariants.isEmpty());
          BoundPlan matched=null;
          for (          BoundPlan boundPlan : boundVariants) {
            if (boundPlan.allowsParams(extractedLiterals)) {
              matched=boundPlan;
              break;
            }
          }
          if (matched != null) {
            CorePlan core=matched.core;
            ParameterSet params=planner.extractedParamValues(core.parameterTypes);
            AdHocPlannedStatement ahps=new AdHocPlannedStatement(sql.getBytes(Constants.UTF8ENCODING),core,params,null);
            ahps.setBoundConstants(matched.constants);
            m_cache.put(sql,parsedToken,ahps,extractedLiterals);
            cacheUse=CacheUse.HIT2;
            return ahps;
          }
        }
      }
      plan=planner.plan();
      assert(plan != null);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error compiling query: " + e.toString(),e);
    }
    if (plan == null) {
      throw new RuntimeException("Null plan received in PlannerTool.planSql");
    }
    CorePlan core=new CorePlan(plan,m_catalogVersion);
    AdHocPlannedStatement ahps=new AdHocPlannedStatement(plan,core);
    if (partitioning.isInferred()) {
      if (planner.compiledAsParameterizedPlan()) {
        assert(parsedToken != null);
        core.setPartitioningParamIndex(partitioning.getInferredParameterIndex());
        m_cache.put(sqlIn,parsedToken,ahps,extractedLiterals);
      }
 else {
        core.setPartitioningParamIndex(partitioning.getInferredParameterIndex());
        core.setPartitioningParamValue(partitioning.getInferredPartitioningValue());
      }
    }
    return ahps;
  }
  finally {
    if (m_plannerStats != null) {
      m_plannerStats.endStatsCollection(m_cache.getLiteralCacheSize(),m_cache.getCoreCacheSize(),cacheUse,-1);
    }
  }
}
