{
  if (args.length != 1) {
    return;
  }
  String pathToCatalog=args[0];
  final String serializedCatalog=CatalogUtil.loadCatalogFromJar(pathToCatalog,null);
  if ((serializedCatalog == null) || (serializedCatalog.length() == 0)) {
    return;
  }
  Catalog catalog=new Catalog();
  catalog.execute(serializedCatalog);
  Cluster cluster=catalog.getClusters().get("cluster");
  Database db=cluster.getDatabases().get("database");
  HSQLInterface hsql=HSQLInterface.loadHsqldb();
  String hexDDL=db.getSchema();
  String ddl=Encoder.hexDecodeToString(hexDDL);
  String[] commands=ddl.split(";");
  for (  String command : commands) {
    command=command.trim();
    if (command.length() == 0)     continue;
    try {
      hsql.runDDLCommand(command);
    }
 catch (    HSQLParseException e) {
      e.printStackTrace();
      return;
    }
  }
  String inputLine="";
  InputStreamReader isr=new InputStreamReader(System.in);
  BufferedReader in=new BufferedReader(isr);
  while (true) {
    try {
      inputLine=in.readLine();
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
    if (inputLine.length() == 0) {
      continue;
    }
    inputLine=inputLine.trim();
    TrivialCostModel costModel=new TrivialCostModel();
    QueryPlanner planner=new QueryPlanner(cluster,db,hsql,new DatabaseEstimates(),false,true);
    CompiledPlan plan=null;
    try {
      plan=planner.compilePlan(costModel,inputLine,"PlannerTool","PlannerToolProc",false,null);
    }
 catch (    Exception e) {
      e.printStackTrace();
      return;
    }
    if (plan == null) {
      String plannerMsg=planner.getErrorMessage();
      if (plannerMsg != null) {
        System.out.println("ERROR: " + plannerMsg + "\n");
      }
 else {
        System.out.println("ERROR: UNKNOWN PLANNING ERROR\n");
      }
      continue;
    }
    assert(plan.fragments.size() <= 2);
    boolean found=false;
    for (int i=0; i < plan.fragments.size(); i++) {
      Fragment frag=plan.fragments.get(i);
      if (frag.multiPartition) {
        PlanNodeList planList=new PlanNodeList(frag.planGraph);
        String serializedPlan=planList.toJSONString();
        System.out.println("PLAN-ALL: " + serializedPlan);
        found=true;
        break;
      }
    }
    if (plan.fragments.size() > 1)     assert(found == true);
    found=false;
    for (int i=0; i < plan.fragments.size(); i++) {
      Fragment frag=plan.fragments.get(i);
      if (frag.multiPartition == false) {
        PlanNodeList planList=new PlanNodeList(frag.planGraph);
        String serializedPlan=planList.toJSONString();
        System.out.println("PLAN-ONE: " + serializedPlan);
        found=true;
        break;
      }
    }
    assert(found == true);
  }
}
