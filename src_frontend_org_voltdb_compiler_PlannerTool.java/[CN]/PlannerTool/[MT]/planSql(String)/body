{
  Result retval=new Result();
  retval.errors="";
  if (m_timeOfLastPlannerCall.compareAndSet(0,System.currentTimeMillis()) == false) {
    retval.errors="Multiple simultanious calls to out of process planner are not allowed";
    return retval;
  }
  if ((sql == null) || (sql.length() == 0)) {
    m_timeOfLastPlannerCall.set(0);
    retval.errors="Can't plan empty or null SQL.";
    return retval;
  }
  sql=sql.trim();
  try {
    m_in.write(sql + "\n");
    m_in.flush();
  }
 catch (  IOException e) {
    m_timeOfLastPlannerCall.set(0);
    retval.errors=e.getMessage();
    return retval;
  }
  BufferedReader r=new BufferedReader(new InputStreamReader(m_process.getInputStream()));
  ArrayList<String> output=new ArrayList<String>();
  while (true) {
    String line=null;
    try {
      line=r.readLine();
    }
 catch (    Exception e) {
      m_timeOfLastPlannerCall.set(0);
      retval.errors=e.getMessage();
      return retval;
    }
    if (line == null)     continue;
    line=line.trim();
    if (line.length() == 0)     break;
    output.add(line);
  }
  for (  String line : output) {
    if (line.equals("No logging configuration supplied via -Dlog4j.configuration. Supplying default config that logs INFO or higher to STDOUT")) {
      continue;
    }
    if (line.startsWith("PLAN-ONE: ")) {
      assert(retval.onePlan == null);
      retval.onePlan=line.substring(10);
    }
 else     if (line.startsWith("PLAN-ALL: ")) {
      assert(retval.allPlan == null);
      retval.allPlan=line.substring(10);
    }
 else     if (line.startsWith("REPLICATED-DML: ")) {
      retval.replicatedDML=true;
    }
 else {
      retval.errors+=line.substring(7) + "\n";
    }
  }
  retval.errors=retval.errors.trim();
  if (retval.errors.length() == 0)   retval.errors=null;
  m_timeOfLastPlannerCall.set(0);
  return retval;
}
