{
  if ((sqlIn == null) || (sqlIn.length() == 0)) {
    throw new RuntimeException("Can't plan empty or null SQL.");
  }
  String sql=sqlIn.trim();
  hostLog.debug("received sql stmt: " + sql);
  TrivialCostModel costModel=new TrivialCostModel();
  PartitioningForStatement partitioning=new PartitioningForStatement(partitionParam,inferSP,inferSP);
  QueryPlanner planner=new QueryPlanner(m_context.cluster,m_context.database,partitioning,m_hsql,new DatabaseEstimates(),false,true);
  CompiledPlan plan=null;
  try {
    plan=planner.compilePlan(costModel,sql,null,"PlannerTool","PlannerToolProc",AD_HOC_JOINED_TABLE_LIMIT,null);
  }
 catch (  Exception e) {
    throw new RuntimeException("Error compiling query: " + e.getMessage(),e);
  }
  if (plan == null) {
    String plannerMsg=planner.getErrorMessage();
    if (plannerMsg != null) {
      throw new RuntimeException("ERROR: " + plannerMsg + "\n");
    }
 else {
      throw new RuntimeException("ERROR: UNKNOWN PLANNING ERROR\n");
    }
  }
  if (plan.parameters.size() > 0) {
    throw new RuntimeException("ERROR: PARAMETERIZATION IN AD HOC QUERY");
  }
  if (plan.isContentDeterministic() == false) {
    String potentialErrMsg="Statement has a non-deterministic result - statement: \"" + sql + "\" , reason: "+ plan.nondeterminismDetail();
    hostLog.warn(potentialErrMsg);
  }
  assert(plan.fragments.size() <= 2);
  Result retval=new Result();
  for (  Fragment frag : plan.fragments) {
    PlanNodeList planList=new PlanNodeList(frag.planGraph);
    String serializedPlan=planList.toJSONString();
    String encodedPlan=serializedPlan;
    if (frag.multiPartition) {
      assert(retval.allPlan == null);
      retval.allPlan=encodedPlan;
    }
 else {
      assert(retval.onePlan == null);
      retval.onePlan=encodedPlan;
    }
  }
  retval.replicatedDML=plan.replicatedTableDML;
  retval.partitionParam=partitioning.effectivePartitioningValue();
  return retval;
}
