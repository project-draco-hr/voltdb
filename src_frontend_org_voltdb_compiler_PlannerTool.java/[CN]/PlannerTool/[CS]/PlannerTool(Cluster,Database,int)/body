{
  assert(cluster != null);
  assert(database != null);
  m_database=database;
  m_cluster=cluster;
  m_catalogVersion=catalogVersion;
  m_cache=AdHocCompilerCache.getCacheForCatalogVersion(catalogVersion);
  m_hsql=HSQLInterface.loadHsqldb();
  String hexDDL=m_database.getSchema();
  String ddl=Encoder.hexDecodeToString(hexDDL);
  String[] commands=ddl.split("\n");
  for (  String command : commands) {
    String decoded_cmd=Encoder.hexDecodeToString(command);
    decoded_cmd=decoded_cmd.trim();
    if (decoded_cmd.length() == 0)     continue;
    try {
      m_hsql.runDDLCommand(decoded_cmd);
    }
 catch (    HSQLParseException e) {
      throw new RuntimeException("Error creating hsql: " + e.getMessage() + " in DDL statement: "+ decoded_cmd);
    }
  }
  hostLog.info("hsql loaded");
synchronized (this) {
    if (m_plannerStats == null) {
      final StatsAgent statsAgent=VoltDB.instance().getStatsAgent();
      if (statsAgent != null) {
        m_plannerStats=new PlannerStatsCollector(-1);
        statsAgent.registerStatsSource(SysProcSelector.PLANNER,-1,m_plannerStats);
      }
    }
  }
}
