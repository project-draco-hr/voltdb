{
  List<AbstractPlanNode> pn=compileToFragments("SELECT desc as modid, approx_count_distinct(num) " + "from P1 " + "group by desc");
  assertEquals(2,pn.size());
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG);
  pn=compileToFragments("SELECT desc, approx_count_distinct(num), count(ratio) " + "from P1 " + "group by desc");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_SUM);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_COUNT);
  pn=compileToFragments("SELECT desc, approx_count_distinct(num), max(ratio) " + "from P1 " + "group by desc");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_MAX);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_MAX);
  pn=compileToFragments("SELECT ratio, approx_count_distinct(num), count(distinct id) " + "from P1 " + "group by ratio");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_SUM);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_COUNT);
  pn=compileToFragments("SELECT desc, approx_count_distinct(id), count(distinct id) " + "from P1 " + "group by desc");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_SUM);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_COUNT);
  pn=compileToFragments("SELECT id, sum(distinct ratio), approx_count_distinct(num) " + "from P1 " + "group by id");
  assertFragContainsNoAggPlanNodes(pn.get(COORDINATOR_FRAG));
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_SUM,AGGREGATE_APPROX_COUNT_DISTINCT);
}
