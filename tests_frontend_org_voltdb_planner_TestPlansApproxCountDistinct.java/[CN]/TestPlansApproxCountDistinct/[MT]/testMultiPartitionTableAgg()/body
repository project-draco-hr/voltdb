{
  List<AbstractPlanNode> pn=compileToFragments("SELECT approx_count_distinct(num) from P1");
  assertEquals(2,pn.size());
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG);
  pn=compileToFragments("SELECT approx_count_distinct(num), count(ratio) from P1");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_SUM);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_COUNT);
  pn=compileToFragments("SELECT approx_count_distinct(num), min(desc), max(ratio) from P1");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_MIN,AGGREGATE_MAX);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_MIN,AGGREGATE_MAX);
  pn=compileToFragments("SELECT approx_count_distinct(num), count(distinct id) from P1");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_SUM);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_COUNT);
  pn=compileToFragments("SELECT approx_count_distinct(id), count(distinct id) from P1");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_HYPERLOGLOGS_TO_CARD,AGGREGATE_SUM);
  assertFragContainsAggWithFunctions(pn.get(PARTITION_FRAG),AGGREGATE_VALS_TO_HYPERLOGLOG,AGGREGATE_COUNT);
  pn=compileToFragments("SELECT sum(distinct ratio), approx_count_distinct(num) from P1");
  assertFragContainsAggWithFunctions(pn.get(COORDINATOR_FRAG),AGGREGATE_SUM,AGGREGATE_APPROX_COUNT_DISTINCT);
  assertFragContainsNoAggPlanNodes(pn.get(PARTITION_FRAG));
}
