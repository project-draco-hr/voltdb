def start_virtual_environment(arr, verbose=False):
    path_result = create_data_config_path(arr[0]['filepath'], arr[0]['configpath'])
    if ('Error' in path_result):
        sys.stderr.write(path_result['Error'])
        sys.exit(1)
    else:
        G.verbose = verbose
        start_logging()
        output_dir = os.path.join(G.config_path, 'voltdeploy')
        if (not os.path.isdir(output_dir)):
            if os.path.exists(output_dir):
                abort(('Output path "%s" exists, but is not a directory.' % output_dir), 'Please move or delete it before running this command again.')
            try:
                os.makedirs(output_dir)
            except (IOError, OSError) as e:
                abort(('Output path "%s" exists, but is not a directory.' % output_dir), 'Please move or delete it before running this command again.', e)
        venv_base = os.path.join(output_dir, 'venv')
        venv_dir = os.path.join(venv_base, sys.platform)
        venv_complete = False
        version = get_version(os.path.dirname(G.script_dir))
        try:
            try:
                build_venv = (not os.path.isdir(venv_dir))
                if (not build_venv):
                    venv_version = get_version(venv_dir, error_abort=False)
                    if (venv_version is None):
                        warning('Unable to read the version file:', [os.path.join(venv_dir, 'version.txt')], 'Assuming that the virtual environment is current.', 'To force a rebuild delete the virtual environment base directory:', [venv_base])
                    else:
                        build_venv = (venv_version != version)
                if (sys.version_info[:2] >= (2, 7)):
                    packages = os.path.join(G.base_dir, 'lib/python/vdm/requirements.txt')
                else:
                    packages = os.path.join(G.base_dir, 'lib/python/vdm/requirements_python_2.6.txt')
                if build_venv:
                    _build_virtual_environment(venv_dir, version, packages)
                else:
                    run_cmd(os.path.join(venv_dir, 'bin', 'pip'), '--quiet', 'install', '-r', packages)
                venv_complete = True
                python = os.path.join(venv_dir, 'bin', 'python')
                args = [python, os.path.join(G.base_dir, 'lib/python/vdm/vdmrunner.py')]
                args.append(('-p' + G.data_path))
                args.append(('-c' + G.config_path))
                if (arr[0]['server'] is not None):
                    args.append(('-s' + str(arr[0]['server'])))
                os.execvp(python, args)
            except KeyboardInterrupt:
                sys.stderr.write('\n<break>\n')
        finally:
            stop_logging()
            if ((not venv_complete) and os.path.exists(venv_dir)):
                warning('Removing incomplete virtual environment after installation failure ...')
                shutil.rmtree(venv_dir, True)
                return {'status': 'error', 'path_venv_python': '', }
            else:
                return {'status': 'success', 'path_venv_python': python, }
