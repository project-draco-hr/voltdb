{
  Date date=new Date();
  System.out.println(date.toString() + "\n\tCounting batch: " + batch);
  m_expectedCounts=1;
  long start_time=System.currentTimeMillis();
  for (int i=0; i < 1; i++) {
    try {
      while (!client.callProcedure(new ProcedureCallback(){
        @Override public void clientCallback(        ClientResponse response){
          if (response.getStatus() != ClientResponse.SUCCESS) {
            System.out.println("failed count batch");
            System.out.println(response.getStatusString());
          }
 else {
            System.out.println("\tBatch has " + response.getResults()[0].asScalarLong() + " items");
          }
          m_expectedCounts--;
        }
      }
,"CountBatchSize","",batch)) {
        try {
          client.backpressureBarrier();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    NoConnectionsException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  while (m_expectedCounts != 0) {
    Thread.yield();
  }
  long elapsed=System.currentTimeMillis() - start_time;
}
