{
  int name_idx=m_rand.nextInt(NUM_NAMES);
  long age=m_rand.nextInt(100);
  long weight=m_rand.nextInt(200);
  long ts=batchNumber;
  String desc1=null;
  String desc2=null;
  String addr1=null;
  String addr2=null;
  String addr3=null;
  String text1=null;
  String text2=null;
  String sig=null;
  String company=null;
  String co_addr=null;
  if (m_smallStrings) {
    desc1=randomString(60);
    desc2=randomString(60);
    addr1=randomString(30);
    addr2=randomString(60);
    addr3=randomString(60);
    text1=randomString(60);
    text2=randomString(32);
    sig=randomString(16);
    company=randomString(60);
    co_addr=randomString(60);
  }
 else {
    desc1=randomString(250);
    desc2=randomString(250);
    addr1=randomString(30);
    addr2=randomString(120);
    addr3=randomString(60);
    text1=randomString(120);
    text2=randomString(32);
    sig=randomString(16);
    company=randomString(60);
    co_addr=randomString(250);
  }
  byte deceased=(byte)(m_rand.nextBoolean() ? 1 : 0);
  try {
    while (!client.callProcedure(new ProcedureCallback(){
      @Override public void clientCallback(      ClientResponse response){
        if (response.getStatus() != ClientResponse.SUCCESS) {
          System.out.println("failed insert");
          System.out.println(response.getStatusString());
        }
        m_expectedInserts--;
      }
    }
,Insert.class.getSimpleName(),m_names[name_idx],age,weight,desc1,desc2,addr1,addr2,addr3,text1,text2,sig,ts,company,co_addr,deceased)) {
      try {
        client.backpressureBarrier();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  NoConnectionsException e) {
    System.err.println("Lost connection to database, terminating");
    System.exit(-1);
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
