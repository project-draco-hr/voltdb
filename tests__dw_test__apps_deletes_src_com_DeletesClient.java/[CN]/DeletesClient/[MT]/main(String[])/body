{
  AppHelper apph=new AppHelper(DeletesClient.class.getCanonicalName()).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",240).add("average-batch-size","average_batch_size","Average batch size",150000).add("batches","num_batches_to_keep","Number of batches to keep",5).add("cleanup-freq","cleanup_frequency","Cleanup frequency, in seconds.",6).add("snapshot-freq","cycles_between_snapshots","Snapshot frequency, in seconds. -1 to turn off snapshots",-1).add("block-snapshots","use_blocking_snapshots_snapshots","Blocking snapshots (true|false)","false").add("small-strings","use_inline_strings","Forces all the strings to be inlined strings (true|false)","false").add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").setArguments(args);
  m_averageBatchSize=apph.intValue("average-batch-size");
  m_batchesToKeep=apph.intValue("batches");
  m_deceasedCleanupFreq=apph.intValue("cleanup-freq");
  m_snapshotFreq=apph.intValue("snapshot-freq");
  m_blockingSnapshots=apph.booleanValue("block-snapshots");
  m_smallStrings=apph.booleanValue("small-strings");
  long duration=apph.longValue("duration");
  String commaSeparatedServers=apph.stringValue("servers");
  apph.validate("average-batch-size",(m_averageBatchSize > 0));
  apph.validate("batches",(m_batchesToKeep >= 0));
  apph.validate("duration",(duration >= 0));
  apph.validate("cleanup-freq",(m_deceasedCleanupFreq > 0));
  apph.printActualUsage();
  System.out.println("Starting Deletes app with:");
  System.out.printf("\tAverage batch size of %d\n",m_averageBatchSize);
  System.out.printf("\tKeeping %d batches\n",m_batchesToKeep);
  System.out.printf("\tCleaning up deceased every %d batches\n",m_deceasedCleanupFreq);
  System.out.printf("\tSnapshotting every %d batches\n",m_snapshotFreq);
  List<String> servers=new LinkedList<String>();
  String[] commaSeparatedServersParts=commaSeparatedServers.split(",");
  for (  String server : commaSeparatedServersParts) {
    servers.add(server.trim());
  }
  File tmpdir=new File(m_snapshotDir);
  tmpdir.mkdir();
  generateNames(16);
  Client client=null;
  ClientConfig config=new ClientConfig("program","none");
  config.setProcedureCallTimeout(Long.MAX_VALUE);
  client=ClientFactory.createClient(config);
  for (  String server : servers) {
    try {
      client.createConnection(server);
    }
 catch (    UnknownHostException e) {
      e.printStackTrace();
      System.exit(-1);
    }
catch (    IOException e) {
      System.err.println("Could not connect to database, terminating: (" + server + ")");
      System.exit(-1);
    }
  }
  for (int i=0; i < m_batchesToKeep; i++) {
    insertBatch(client,true);
  }
  long deceased_counter=0;
  long snapshot_counter=0;
  long max_batch_counter=0;
  boolean fill_max=false;
  long max_batch_remaining=0;
  final long endTime=System.currentTimeMillis() + (1000l * duration);
  final long startTime=System.currentTimeMillis();
  while (endTime > System.currentTimeMillis()) {
    insertBatch(client,fill_max);
    collectStats(client);
    snapshot_counter++;
    if (snapshot_counter == m_snapshotFreq) {
      performSnapshot(client);
      snapshot_counter=0;
    }
    deceased_counter++;
    if (deceased_counter == m_deceasedCleanupFreq) {
      deleteDeceased(client);
      deceased_counter=0;
    }
    countBatch(client,m_batchNumber - m_batchesToKeep - 1);
    deleteBatch(client,m_batchesToKeep);
  }
  System.out.printf("\tTotal runtime: %d seconds\n",(System.currentTimeMillis() - startTime) / 1000l);
}
