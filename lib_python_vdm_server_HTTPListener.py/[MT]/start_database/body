def start_database(database_id, recover=False):
    sync_configuration()
    members = []
    current_database = [database for database in Global.DATABASES if (database['id'] == database_id)]
    if (not current_database):
        abort(404)
    else:
        members = current_database[0]['members']
    if (not members):
        return make_response(jsonify({'statusstring': 'No servers configured for the database', }), 500)
    for server_id in members:
        server = [server for server in Global.SERVERS if (server['id'] == server_id)]
        if (not server):
            return make_response(jsonify({'statusstring': ('Server details not found for id ' + server_id), }), 500)
    failed = False
    server_status = {}
    action = 'start'
    if recover:
        action = 'recover'
    for server_id in members:
        server = [server for server in Global.SERVERS if (server['id'] == server_id)]
        curr = server[0]
        try:
            url = ('http://%s:%u/api/1.0/databases/%u/servers/%u/%s' % (curr['hostname'], __PORT__, database_id, server_id, action))
            response = requests.put(url)
            if (response.status_code != requests.codes.ok):
                failed = True
            server_status[curr['hostname']] = json.loads(response.text)['statusstring']
        except Exception as err:
            failed = True
            print traceback.format_exc()
            server_status[curr['hostname']] = str(err)
    if failed:
        return make_response(jsonify({'statusstring': ('There were errors starting servers: ' + str(server_status)), }), 500)
    else:
        return make_response(jsonify({'statusstring': ('Start request sent successfully to servers: ' + str(server_status)), }), 200)
