def validate_server_ports(database_id):
    arr = ['http-listener', 'admin-listener', 'internal-listener', 'replication-listener', 'zookeeper-listener', 'client-listener']
    specified_port_values = {'http-listener': get_port(request.json.get('http-listener', '')), 'admin-listener': get_port(request.json.get('admin-listener', '')), 'replication-listener': get_port(request.json.get('replication-listener', '')), 'client-listener': get_port(request.json.get('client-listener', '')), 'zookeeper-listener': get_port(request.json.get('zookeeper-listener', '')), 'internal-listener': get_port(request.json.get('internal-listener', '')), }
    for option in arr:
        value = specified_port_values[option]
        for port_key in specified_port_values.keys():
            if ((option != port_key) and (value is not None) and (specified_port_values[port_key] == value)):
                return jsonify(success=False, errors='Duplicate port')
    database_servers = get_servers_from_database_id(database_id)
    for server in database_servers:
        if (server['hostname'] == request.json['hostname']):
            for option in arr:
                result = check_port_valid(option, server)
                if (result is not None):
                    return result
