@staticmethod
def put(database_id):
    '\n        Stops VoltDB database server on the local server\n        Args:\n            database_id (int): The id of the database that should be stopped\n        Returns:\n            Status string indicating if the stop request was sent successfully\n        '
    if ('force' in request.args):
        is_force = request.args.get('force').lower()
    else:
        is_force = 'false'
    if ('id' in request.args):
        sid = int(request.args.get('id'))
    if (is_force == 'false'):
        try:
            server = voltdbserver.VoltDatabase(database_id)
            response = server.kill_server(sid)
            if ('Connection broken' in response.data):
                return make_response(jsonify({'status': 200, 'statusString': 'SUCCESS: Server shutdown successfully.', }))
            else:
                return make_response(jsonify({'status': 200, 'statusString': response.data, }))
        except Exception as err:
            print traceback.format_exc()
            return make_response(jsonify({'status': 500, 'statusString': str(err), }), 500)
    else:
        try:
            server = voltdbserver.VoltDatabase(database_id)
            response = server.stop_db_server(sid)
            if ('Connection broken' in response):
                return make_response(jsonify({'status': 200, 'statusString': 'SUCCESS: Server shutdown successfully.', }))
            else:
                return make_response(jsonify({'status': 200, 'statusString': response, }))
        except Exception as err:
            print traceback.format_exc()
            return make_response(jsonify({'status': 500, 'statusString': str(err), }), 500)
