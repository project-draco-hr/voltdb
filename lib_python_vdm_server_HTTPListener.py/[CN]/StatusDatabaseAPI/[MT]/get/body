@staticmethod
def get(database_id):
    serverDetails = []
    status = []
    database = [database for database in Global.DATABASES if (database['id'] == database_id)]
    has_stalled = False
    has_run = False
    if (not database):
        return make_response(jsonify({'error': 'Not found', }), 404)
    else:
        if (len(database[0]['members']) == 0):
            return jsonify({'status': 'errorNoMembers', })
        for server_id in database[0]['members']:
            server = [server for server in Global.SERVERS if (server['id'] == server_id)]
            url = ('http://%s:%u/api/1.0/databases/%u/servers/%u/status/' % (server[0]['hostname'], __PORT__, database_id, server[0]['id']))
            try:
                response = requests.get(url)
            except Exception as err:
                return jsonify({'status': 'error', 'errorDetails': err, 'hostname': server[0]['hostname'], })
            if (response.json()['status'] == 'stalled'):
                has_stalled = True
            elif (response.json()['status'] == 'running'):
                has_run = True
            serverDetails.append({server[0]['hostname']: response.json(), })
        if (has_run == True):
            status.append({'status': 'running', })
        elif (has_stalled == True):
            status.append({'status': 'stalled', })
        elif ((not has_run) and (not has_stalled)):
            status.append({'status': 'stopped', })
        isFreshStart = voltdbserver.check_snapshot_folder(database_id)
        return jsonify({'status': status, 'serverDetails': serverDetails, 'isFreshStart': isFreshStart, })
