@staticmethod
def get(database_id):
    serverDetails = []
    status = []
    database = [database for database in Global.DATABASES if (database['id'] == database_id)]
    has_stalled = False
    has_stopped = False
    has_run = False
    if (len(database[0]['members']) == 0):
        return jsonify({'status': 'errorNoMembers', })
    for server_id in database[0]['members']:
        server = [server for server in Global.SERVERS if (server['id'] == server_id)]
        url = ('http://%s:%u/api/1.0/databases/%u/servers/%u/status/' % (server[0]['hostname'], __PORT__, database_id, server[0]['id']))
        try:
            response = requests.get(url)
        except:
            return jsonify({'status': 'error', 'hostname': server[0]['hostname'], })
        if (response.json()['status'] == 'stalled'):
            if (not has_stalled):
                has_stalled = True
        elif (response.json()['status'] == 'running'):
            if (not has_run):
                has_run = True
        elif (response.json()['status'] == 'stopped'):
            if (not has_stopped):
                has_stopped = True
        serverDetails.append({server[0]['hostname']: response.json(), })
    if has_stalled:
        status.append({'status': 'stalled', })
    elif ((has_run == True) and has_stopped):
        status.append({'status': 'stalled', })
    elif ((not has_stalled) and (not has_stopped) and has_run):
        status.append({'status': 'running', })
    elif (has_stopped and (not has_stalled) and (not has_run)):
        status.append({'status': 'stopped', })
    return jsonify({'status': status, 'serverDetails': serverDetails, })
