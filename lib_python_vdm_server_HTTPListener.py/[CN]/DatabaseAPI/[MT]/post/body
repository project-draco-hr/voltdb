@staticmethod
def post():
    '\n        Saves the database.\n        Returns:\n            Information and the status of database if it is saved otherwise the error message.\n        '
    if (('id' in request.json) or ('members' in request.json)):
        return make_response(jsonify({'error': "You cannot specify 'Id' or 'Members' while creating database.", }), 404)
    db_type_error = ValidateDbFieldType(request.json)
    if (('status' in db_type_error) and (db_type_error['status'] == 'error')):
        return jsonify(status=401, statusString=db_type_error['errors'])
    inputs = DatabaseInputs(request)
    if (not inputs.validate()):
        return jsonify(status=401, statusString=inputs.errors)
    databases = [(v if (type(v) is list) else [v]) for v in Global.DATABASES.values()]
    if (request.json['name'] in [d['name'] for item in databases for d in item]):
        return make_response(jsonify({'status': 400, 'statusString': 'database name already exists', }), 400)
    if (not Global.DATABASES):
        database_id = 1
    else:
        database_id = (Global.DATABASES.keys()[(-1)] + 1)
    Global.DATABASES[database_id] = {'id': database_id, 'name': request.json['name'], 'members': [], }
    app_root = os.path.dirname(os.path.abspath(__file__))
    with open(os.path.join(app_root, 'deployment.json')) as json_file:
        deployment = json.load(json_file)
        deployment['databaseid'] = database_id
        is_pro_version(deployment)
    Global.DEPLOYMENT[database_id] = deployment
    sync_configuration()
    Configuration.write_configuration_file()
    url = ('http://%s:%u/api/1.0/databases/%u' % (__IP__, __PORT__, database_id))
    resp = make_response(jsonify({'status': 201, 'statusString': 'OK', 'database': Global.DATABASES.get(database_id), }), 201)
    resp.headers['Location'] = url
    return resp
