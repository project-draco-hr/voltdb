@staticmethod
def post():
    '\n        Saves the database.\n        Returns:\n            Information and the status of database if it is saved otherwise the error message.\n        '
    sync_configuration()
    Configuration.write_configuration_file()
    inputs = DatabaseInputs(request)
    if (not inputs.validate()):
        return jsonify(success=False, errors=inputs.errors)
    databases = [(v if (type(v) is list) else [v]) for v in Global.Dict_DATABASES.values()]
    if (request.json['name'] in [d['name'] for item in databases for d in item]):
        return make_response(jsonify({'error': 'database name already exists', }), 404)
    if (not Global.Dict_DATABASES):
        database_id = 1
    else:
        database_id = (len(Global.Dict_DATABASES) + 1)
    Global.Dict_DATABASES[str(database_id)] = {'id': database_id, 'name': request.json['name'], 'members': [], }
    app_root = os.path.dirname(os.path.abspath(__file__))
    with open(os.path.join(app_root, 'deployment.json')) as json_file:
        deployment = json.load(json_file)
        deployment['databaseid'] = database_id
        is_pro_version(deployment)
    Global.DEPLOYMENT.append(deployment)
    sync_configuration()
    Configuration.write_configuration_file()
    return (jsonify({'database': Global.Dict_DATABASES.get(str(database_id)), 'status': 1, }), 201)
