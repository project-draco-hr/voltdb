@staticmethod
def put(database_id, user_id):
    inputs = UserInputs(request)
    if (not inputs.validate()):
        return jsonify(status=401, statusString=inputs.errors)
    current_user = Global.DEPLOYMENT_USERS.get(user_id)
    if (current_user is None):
        return make_response(jsonify({'status': 401, 'statusString': ('No user found for id: %u' % user_id), }), 404)
    is_invalid_roles = check_invalid_roles(request.json['roles'])
    if (not is_invalid_roles):
        return make_response(jsonify({'status': 404, 'statusString': 'Invalid user roles.', }))
    user = [(v if (type(v) is list) else [v]) for v in Global.DEPLOYMENT_USERS.values()]
    if ((request.json['name'] in [d['name'] for item in user for d in item]) and (d['databaseid'] == database_id) and (request.json['name'] != current_user['name'])):
        return make_response(jsonify({'status': 404, 'statusString': 'user name already exists', }), 404)
    user_roles = ','.join(set(request.json.get('roles', current_user['roles']).split(',')))
    current_user = Global.DEPLOYMENT_USERS.get(user_id)
    current_user['name'] = request.json.get('name', current_user['name'])
    current_user['password'] = urllib.unquote(str(request.json.get('password', current_user['password'])).encode('ascii')).decode('utf-8')
    current_user['roles'] = user_roles
    current_user['plaintext'] = request.json.get('plaintext', current_user['plaintext'])
    sync_configuration()
    Configuration.write_configuration_file()
    return jsonify({'user': current_user, 'status': 1, 'statusstring': 'User Updated', })
