@staticmethod
def get(database_id, server_id=None):
    '\n        Get the members of the database with specified database_id.\n        Args:\n            database_id (int): The first parameter.\n        Returns:\n            List of member ids related to specified database.\n        '
    if (server_id is None):
        servers = []
        database = Global.DATABASES.get(database_id)
        if (database is None):
            return make_response(jsonify({'statusstring': ('No database found for id: %u' % database_id), }), 404)
        else:
            members = database['members']
        for server_id in members:
            server = Global.SERVERS.get(server_id)
            if (not server):
                return make_response(jsonify({'statusstring': ('Server details not found for id: %u' % server_id), }), 404)
            servers.append(server)
        return jsonify({'status': 200, 'statusString': 'OK', 'members': servers, })
    else:
        database = Global.DATABASES.get(database_id)
        if (database is None):
            return make_response(jsonify({'statusstring': ('No database found for id: %u' % database_id), }), 404)
        else:
            members = database['members']
        if (server_id in members):
            server = Global.SERVERS.get(server_id)
            if (not server):
                abort(404)
            return jsonify({'status': 200, 'statusString': 'OK', 'server': make_public_server(server), })
        else:
            return jsonify({'statusstring': ("Given server with id %u doesn't belong to database with id %u." % (server_id, database_id)), })
