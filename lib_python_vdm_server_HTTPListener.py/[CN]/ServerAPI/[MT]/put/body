@staticmethod
def put(database_id, server_id):
    '\n        Update the server with specified server_id.\n        Args:\n            server_id (int): The first parameter.\n        Returns:\n            Information of server with specified server_id after being updated\n            otherwise the error message.\n        '
    if (('id' in request.json) and (server_id != request.json['id'])):
        return make_response(jsonify({'error': "Server Id mentioned in the payload and url doesn't match.", }), 404)
    database = Global.DATABASES.get(database_id)
    if (database is None):
        return make_response(jsonify({'statusstring': ('No database found for id: %u' % database_id), }), 404)
    else:
        members = database['members']
    if (server_id in members):
        inputs = ServerInputs(request)
        if (not inputs.validate()):
            return jsonify(success=False, errors=inputs.errors)
        current_server = Global.SERVERS.get(server_id)
        if (current_server is None):
            abort(404)
        result = validate_server_ports(database_id)
        if (result is not None):
            return result
        current_server['name'] = request.json.get('name', current_server['name'])
        current_server['hostname'] = request.json.get('hostname', current_server['hostname'])
        current_server['description'] = request.json.get('description', current_server['description'])
        current_server['enabled'] = request.json.get('enabled', current_server['enabled'])
        current_server['admin-listener'] = request.json.get('admin-listener', current_server['admin-listener'])
        current_server['internal-listener'] = request.json.get('internal-listener', current_server['internal-listener'])
        current_server['http-listener'] = request.json.get('http-listener', current_server['http-listener'])
        current_server['zookeeper-listener'] = request.json.get('zookeeper-listener', current_server['zookeeper-listener'])
        current_server['replication-listener'] = request.json.get('replication-listener', current_server['replication-listener'])
        current_server['client-listener'] = request.json.get('client-listener', current_server['client-listener'])
        current_server['internal-interface'] = request.json.get('internal-interface', current_server['internal-interface'])
        current_server['external-interface'] = request.json.get('external-interface', current_server['external-interface'])
        current_server['public-interface'] = request.json.get('public-interface', current_server['public-interface'])
        current_server['placement-group'] = request.json.get('placement-group', current_server['placement-group'])
        sync_configuration()
        Configuration.write_configuration_file()
        return jsonify({'status': 200, 'statusString': 'OK', 'server': current_server, })
    else:
        return jsonify({'statusString': ("Given server with id %u doesn't belong to database with id %u." % (server_id, database_id)), })
