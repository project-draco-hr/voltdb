@staticmethod
def delete(database_id, server_id):
    '\n        Delete the server with specified server_id.\n        Args:\n            server_id (int): The first parameter.\n        Returns:\n            True if the server is deleted otherwise the error message.\n        '
    database = Global.DATABASES.get(database_id)
    if (database is None):
        return make_response(jsonify({'statusstring': ('No database found for id: %u' % database_id), }), 404)
    else:
        members = database['members']
    if (server_id in members):
        server = Global.SERVERS.get(server_id)
        if (server is None):
            return make_response(jsonify({'statusstring': ('No server found for id: %u in database %u' % (server_id, database_id)), }), 404)
        url = ('http://%s:%u/api/1.0/databases/%u/servers/%u/status' % (server['hostname'], __PORT__, database_id, server_id))
        response = requests.get(url)
        if (response.json()['status'] == 'running'):
            return make_response(jsonify({'statusstring': 'Cannot delete a running server', }), 403)
        else:
            current_database = Global.DATABASES.get(database_id)
            current_database['members'].remove(server_id)
            Global.DELETED_HOSTNAME = server['hostname']
            del Global.SERVERS[server_id]
            sync_configuration()
            Configuration.write_configuration_file()
            return jsonify({'result': True, })
    else:
        return make_response(jsonify({'statusstring': ('No server found for id: %u in database %u' % (server_id, database_id)), }), 404)
