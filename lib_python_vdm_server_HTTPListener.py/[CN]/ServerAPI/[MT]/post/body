@staticmethod
def post(database_id):
    '\n        Saves the server and associate it to database with given database_id.\n        Args:\n            database_id (int): The first parameter.\n        Returns:\n            Information and the status of server if it is saved otherwise the error message.\n        '
    inputs = ServerInputs(request)
    if (not inputs.validate()):
        return jsonify(success=False, errors=inputs.errors)
    result = validate_server_ports(database_id)
    if (result is not None):
        return result
    if (not Global.SERVERS):
        server_id = 1
    else:
        server_id = (Global.SERVERS[(-1)]['id'] + 1)
    server = {'id': server_id, 'name': request.json.get('name', '').strip(), 'description': request.json.get('description', '').strip(), 'hostname': request.json.get('hostname', '').strip(), 'enabled': True, 'admin-listener': request.json.get('admin-listener', '').strip(), 'zookeeper-listener': request.json.get('zookeeper-listener', '').strip(), 'replication-listener': request.json.get('replication-listener', '').strip(), 'client-listener': request.json.get('client-listener', '').strip(), 'internal-interface': request.json.get('internal-interface', '').strip(), 'external-interface': request.json.get('external-interface', '').strip(), 'public-interface': request.json.get('public-interface', '').strip(), 'internal-listener': request.json.get('internal-listener', '').strip(), 'http-listener': request.json.get('http-listener', '').strip(), 'placement-group': request.json.get('placement-group', '').strip(), }
    Global.SERVERS.append(server)
    current_database = [database for database in Global.DATABASES if (database['id'] == database_id)]
    if (len(current_database) == 0):
        abort(404)
    if (not request.json):
        abort(400)
    current_database[0]['members'].append(server_id)
    sync_configuration()
    Configuration.write_configuration_file()
    return (jsonify({'server': server, 'status': 1, 'members': current_database[0]['members'], }), 201)
