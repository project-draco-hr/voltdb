@staticmethod
def put(database_id):
    '\n        Add deployment information to specified database_id.\n        Args:\n            database_id (int): The first parameter.\n        Returns:\n            Deployment object of added deployment.\n        '
    inputs = JsonInputs(request)
    if (not inputs.validate()):
        return jsonify(success=False, errors=inputs.errors)
    if (('systemsettings' in request.json) and ('resourcemonitor' in request.json['systemsettings'])):
        if (('memorylimit' in request.json['systemsettings']['resourcemonitor']) and ('size' in request.json['systemsettings']['resourcemonitor']['memorylimit'])):
            size = str(request.json['systemsettings']['resourcemonitor']['memorylimit']['size'])
            response = json.loads(check_size_value(size, 'memorylimit').data)
            if ('error' in response):
                return jsonify({'error': response['error'], })
        disk_limit_arr = []
        if (('disklimit' in request.json['systemsettings']['resourcemonitor']) and ('feature' in request.json['systemsettings']['resourcemonitor']['disklimit'])):
            for feature in request.json['systemsettings']['resourcemonitor']['disklimit']['feature']:
                size = feature['size']
                if (feature['name'] in disk_limit_arr):
                    return jsonify({'error': 'Duplicate items are not allowed.', })
                disk_limit_arr.append(feature['name'])
                response = json.loads(check_size_value(size, 'disklimit').data)
                if ('error' in response):
                    return jsonify({'error': response['error'], })
    deployment = map_deployment(request, database_id)
    sync_configuration()
    Configuration.write_configuration_file()
    return jsonify({'deployment': deployment, 'status': 1, })
