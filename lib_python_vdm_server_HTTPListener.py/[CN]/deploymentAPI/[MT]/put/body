@staticmethod
def put(database_id):
    '\n        Add deployment information to specified database_id.\n        Args:\n            database_id (int): The first parameter.\n        Returns:\n            Deployment object of added deployment.\n        '
    inputs = JsonInputs(request)
    if (not inputs.validate()):
        return jsonify(success=False, errors=inputs.errors)
    if (('dr' in request.json) and ('type' in request.json['dr'])):
        if (request.json['dr']['type'] != 'Master'):
            if (('connection' in request.json['dr']) and ('source' in request.json['dr']['connection']) and ('servers' in request.json['dr']['connection'])):
                database_selected = [database for database in DATABASES if (database['name'] == str(request.json['dr']['connection']['source']))]
                if (len(database_selected) == 0):
                    make_response(jsonify({'error': 'The selected database must have database enabled.', }), 404)
                deployment_selected = [deployment1 for deployment1 in DEPLOYMENT if (deployment1['databaseid'] == database_selected[0]['id'])]
                if (request.json['dr']['type'] == 'Replica'):
                    if (len(deployment_selected) == 0):
                        make_response(jsonify({'error': 'The selected database must have database enabled.', }), 404)
                    if ((deployment_selected[0]['dr'] is not None) and (deployment_selected[0]['dr']['enabled'] is True) and (deployment_selected[0]['dr']['type'] is not None)):
                        deployment_type = deployment_selected[0]['dr']['type']
                        if (deployment_type != 'Master'):
                            return make_response(jsonify({'error': 'The selected database must be of type Master.', }), 404)
                    else:
                        return make_response(jsonify({'error': 'The selected database must have database enabled.', }), 404)
                if (request.json['dr']['type'] == 'XDCR'):
                    if ((len(deployment_selected) != 0) and (deployment_selected[0]['dr'] is not None) and (len(deployment_selected[0]['dr']) != 0) and (deployment_selected[0]['dr']['enabled'] is True) and (deployment_selected[0]['dr']['type'] is not None)):
                        database_selected = [database for database in DATABASES if (database['id'] == database_id)]
                        if (len(database_selected) == 0):
                            return make_response(jsonify({'error': 'Database not found.', }))
                        if (database_selected[0]['name'] != deployment_selected[0]['dr']['connection']['source']):
                            if ((deployment_selected[0]['dr']['type'] == 'Master') or (deployment_selected[0]['dr']['type'] == 'Replica')):
                                return make_response(jsonify({'error': 'The selected database should be of DR type "XDCR".', }), 404)
                            elif (deployment_selected[0]['dr']['type'] == 'XDCR'):
                                return make_response(jsonify({'error': 'The selected database is configured to use XDCR with another database. Please use another database.', }), 404)
            else:
                return make_response(jsonify({'error': 'Connection source not defined properly.', }), 404)
    deployment = map_deployment(request, database_id)
    make_configuration_file()
    return jsonify({'deployment': deployment, 'status': 1, })
