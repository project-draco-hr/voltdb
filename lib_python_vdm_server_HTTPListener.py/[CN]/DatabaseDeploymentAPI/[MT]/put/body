@staticmethod
def put(database_id):
    file = request.files['file']
    if (file and allowed_file(file.filename)):
        try:
            content = file.read()
            o = XML(content)
            xml_final = json.loads(json.dumps(etree_to_dict(o)))
            if ('deployment' not in xml_final):
                return jsonify({'status': 'failure', 'error': 'Invalid file content.', })
            elif (type(xml_final['deployment']) is dict):
                deployment_data = get_deployment_for_upload(xml_final['deployment'], 'dict')
                if (type(deployment_data) is dict):
                    if ('error' in deployment_data):
                        return jsonify({'error': deployment_data['error'], })
                else:
                    deployment_json = deployment_data[0]
                req = DictClass()
                req.json = {}
                req.json = deployment_json
                inputs = JsonInputs(req)
                if (not inputs.validate()):
                    return jsonify(success=False, errors=inputs.errors)
                if (('systemsettings' in req.json) and ('resourcemonitor' in req.json['systemsettings'])):
                    if (('memorylimit' in req.json['systemsettings']['resourcemonitor']) and ('size' in req.json['systemsettings']['resourcemonitor']['memorylimit'])):
                        size = str(req.json['systemsettings']['resourcemonitor']['memorylimit']['size'])
                        response = json.loads(check_size_value(size, 'memorylimit').data)
                        if ('error' in response):
                            return jsonify({'error': response['error'], })
                    disk_limit_arr = []
                    if (('disklimit' in req.json['systemsettings']['resourcemonitor']) and ('feature' in req.json['systemsettings']['resourcemonitor']['disklimit'])):
                        for feature in req.json['systemsettings']['resourcemonitor']['disklimit']['feature']:
                            size = feature['size']
                            if (feature['name'] in disk_limit_arr):
                                return jsonify({'error': 'Duplicate items are not allowed.', })
                            disk_limit_arr.append(feature['name'])
                            response = json.loads(check_size_value(size, 'disklimit').data)
                            if ('error' in response):
                                return jsonify({'error': response['error'], })
                if (('snapshot' in req.json) and ('frequency' in req.json['snapshot'])):
                    frequency_unit = ['h', 'm', 's']
                    frequency = str(req.json['snapshot']['frequency'])
                    last_char = frequency[(len(frequency) - 1)]
                    if (last_char not in frequency_unit):
                        return jsonify({'error': 'Snapshot: Invalid frequency value.', })
                    frequency = frequency[:(-1)]
                    try:
                        int_frequency = int(frequency)
                    except Exception as exp:
                        return jsonify({'error': ('Snapshot: ' + str(exp)), })
                map_deployment(req, database_id)
                Global.DEPLOYMENT_USERS = []
                if (('users' in req.json) and ('user' in req.json['users'])):
                    for user in req.json['users']['user']:
                        Global.DEPLOYMENT_USERS.append({'name': user['name'], 'roles': user['roles'], 'password': user['password'], 'plaintext': user['plaintext'], 'databaseid': database_id, })
                sync_configuration()
                write_configuration_file()
                return jsonify({'status': 'success', })
            else:
                return jsonify({'status': 'failure', 'error': 'Invalid file content.', })
        except Exception as err:
            return jsonify({'status': 'failure', 'error': 'Invalid file content.', })
    else:
        return jsonify({'status': 'failure', 'error': 'Invalid file type.', })
