@staticmethod
def put(database_id):
    file = request.files['file']
    if (file and allowed_file(file.filename)):
        try:
            content = file.read()
            o = XML(content)
            xml_final = json.loads(json.dumps(etree_to_dict(o)))
            if ('deployment' not in xml_final):
                return jsonify({'status': 'failure', 'error': 'Invalid file content.', })
            elif (type(xml_final['deployment']) is dict):
                deployment_json = get_deployment_from_xml(xml_final['deployment'], 'dict')[0]
                req = DictClass()
                req.json = {}
                req.json = deployment_json
                inputs = JsonInputs(req)
                if (not inputs.validate()):
                    return jsonify(success=False, errors=inputs.errors)
                map_deployment(req, database_id)
                Global.DEPLOYMENT_USERS = []
                if (('users' in req.json) and ('user' in req.json['users'])):
                    for user in req.json['users']['user']:
                        Global.DEPLOYMENT_USERS.append({'name': user['name'], 'roles': user['roles'], 'password': user['password'], 'plaintext': user['plaintext'], 'databaseid': database_id, })
                sync_configuration()
                write_configuration_file()
                return jsonify({'status': 'success', })
            else:
                return jsonify({'status': 'failure', 'error': 'Invalid file content.', })
        except Exception as err:
            return jsonify({'status': 'failure', 'error': 'Invalid file content.', })
    else:
        return jsonify({'status': 'failure', 'error': 'Invalid file type.', })
