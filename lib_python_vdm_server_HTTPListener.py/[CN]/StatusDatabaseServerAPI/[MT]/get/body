@staticmethod
def get(database_id, server_id):
    database = [database for database in Global.DATABASES if (database['id'] == database_id)]
    if (not database):
        return make_response(jsonify({'error': 'Not found', }), 404)
    else:
        server = [server for server in Global.SERVERS if (server['id'] == server_id)]
        if (len(database[0]['members']) == 0):
            return jsonify({'error': 'errorNoMembers', })
        if (not server):
            return make_response(jsonify({'error': 'Not found', }), 404)
        elif (server_id not in database[0]['members']):
            return make_response(jsonify({'error': 'Not found', }), 404)
        else:
            try:
                if (not server[0]['client-listener']):
                    client_port = 21212
                    client_host = str(server[0]['hostname'])
                else:
                    client_listener = server[0]['client-listener']
                    if (':' in client_listener):
                        arr_client = client_listener.split(':', 2)
                        client_port = int(arr_client[1])
                        client_host = str(arr_client[0])
                    else:
                        client_port = int(client_listener)
                        client_host = str(server[0]['hostname'])
                client = voltdbclient.FastSerializer(client_host, client_port)
                proc = voltdbclient.VoltProcedure(client, '@Ping')
                response = proc.call()
                return jsonify({'status': 'running', })
            except:
                voltProcess = voltdbserver.VoltDatabase(database_id)
                error = ''
                try:
                    error = Log.get_error_log_details()
                except:
                    pass
                if voltProcess.Get_Voltdb_Process().isProcessRunning:
                    return jsonify({'status': 'stalled', 'details': error, })
                else:
                    return jsonify({'status': 'stopped', 'details': error, })
