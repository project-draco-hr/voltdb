{
  String hostname=ConnectionUtil.getHostnameOrAddress();
  errorString=null;
  VoltTable result=constructFragmentResultsTable();
  if (fragmentId == SysProcFragmentId.PF_snapshotDelete) {
    int host_id=context.getExecutionSite().getCorrespondingHostId();
    Integer lowest_site_id=VoltDB.instance().getCatalogContext().siteTracker.getLowestLiveExecSiteIdForHost(host_id);
    if (context.getExecutionSite().getSiteId() == lowest_site_id) {
      new Thread(){
        @Override public void run(){
          assert(params.toArray()[0] != null);
          assert(params.toArray()[0] instanceof String[]);
          assert(((String[])params.toArray()[0]).length > 0);
          assert(params.toArray()[1] != null);
          assert(params.toArray()[1] instanceof String[]);
          assert(((String[])params.toArray()[1]).length > 0);
          assert(((String[])params.toArray()[0]).length == ((String[])params.toArray()[1]).length);
          final String paths[]=(String[])params.toArray()[0];
          final String nonces[]=(String[])params.toArray()[1];
          for (int ii=0; ii < paths.length; ii++) {
            List<File> relevantFiles=retrieveRelevantFiles(paths[ii],nonces[ii]);
            if (relevantFiles == null) {
            }
 else {
              for (              final File f : relevantFiles) {
                boolean deleted=f.delete();
              }
            }
          }
        }
      }
.start();
    }
    return new DependencyPair(DEP_snapshotDelete,result);
  }
 else   if (fragmentId == SysProcFragmentId.PF_snapshotDeleteResults) {
    final VoltTable results=constructFragmentResultsTable();
    TRACE_LOG.trace("Aggregating Snapshot Delete  results");
    assert(dependencies.size() > 0);
    List<VoltTable> dep=dependencies.get(DEP_snapshotDelete);
    for (    VoltTable table : dep) {
      while (table.advanceRow()) {
        results.add(table);
      }
    }
    return new DependencyPair(DEP_snapshotDeleteResults,results);
  }
  assert(false);
  return null;
}
