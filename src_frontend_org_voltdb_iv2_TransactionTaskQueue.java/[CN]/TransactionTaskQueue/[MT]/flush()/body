{
  int offered=0;
  if (m_backlog.isEmpty() || !m_backlog.getFirst().getTransactionState().isDone()) {
    return offered;
  }
  m_backlog.removeFirst();
  Iterator<TransactionTask> iter=m_backlog.iterator();
  while (iter.hasNext()) {
    TransactionTask task=iter.next();
    long lastQueuedTxnId=task.getTxnId();
    taskQueueOffer(task);
    ++offered;
    if (task.getTransactionState().isSinglePartition()) {
      iter.remove();
      continue;
    }
 else {
      while (iter.hasNext()) {
        task=iter.next();
        if (task.getTxnId() == lastQueuedTxnId) {
          iter.remove();
          taskQueueOffer(task);
          ++offered;
        }
      }
      break;
    }
  }
  return offered;
}
