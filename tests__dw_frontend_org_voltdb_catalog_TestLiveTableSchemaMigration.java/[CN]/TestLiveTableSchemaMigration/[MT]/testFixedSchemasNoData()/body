{
  migrateSchema("FOO (A:INTEGER, B:TINYINT)","FOO (A:INTEGER, B:TINYINT)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT) P(A)","FOO (A:INTEGER-N, B:TINYINT)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT)","FOO (A:INTEGER-N, B:TINYINT) P(A)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT-N) P(A)","FOO (A:INTEGER-N, B:TINYINT-N) P(B)",false);
  migrateSchema("FOO (A:INTEGER-N, B:BIGINT)","FOO (A:INTEGER-N, B:TINYINT)",false);
  migrateSchema("FOO (A:INTEGER-N, B:VARCHAR120)","FOO (A:INTEGER-N, B:VARCHAR60)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT) P(A)","FOO (A:INTEGER-N, B:VARCHAR30) P(A)",false);
  migrateSchema("FOO (A:INTEGER-N, B:DECIMAL) P(A)","FOO (A:INTEGER-N, B:FLOAT) P(A)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT-N) PK(A,B)","FOO (A:INTEGER-N, B:TINYINT-N) PK(A)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT-N) PK(A,B) P(B)","FOO (A:INTEGER-N, B:TINYINT-N) PK(B) P(B)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT) PK(A,B)","FOO (A:INTEGER-N, B:TINYINT) PK(B,A)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT)","FOO (A:INTEGER-N, B:TINYINT) PK(A)",false);
  migrateSchema("FOO (A:INTEGER-N, B:TINYINT) P(A)","FOO (A:INTEGER-N, B:TINYINT) P(A) PK(A)",false);
}
