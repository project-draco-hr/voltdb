{
  String my_schema="create table BLAH (" + "clm_varinary varbinary(128) default '00' not null," + "clm_smallint smallint default 0 not null, "+ ");";
  pathToCatalog=Configuration.getPathToCatalogForTest("csv.jar");
  pathToDeployment=Configuration.getPathToCatalogForTest("csv.xml");
  builder=new VoltProjectBuilder();
  builder.addLiteralSchema(my_schema);
  builder.addPartitionInfo("BLAH","clm_varinary");
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  localServer=new ServerThread(config);
  client=null;
  localServer.start();
  localServer.waitForInitialization();
  client=ClientFactory.createClient();
  client.createConnection("localhost");
  ClientResponse resp=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES ('22',1);");
  assert(resp.getResults().length == 1);
  resp=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES ('80',3);");
  assert(resp.getResults().length == 1);
  resp=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES ('8081828384858687888990',4);");
  assert(resp.getResults().length == 1);
  Random rand=new Random();
  for (int i=0; i < 1000; i++) {
    byte[] b=new byte[rand.nextInt(128)];
    rand.nextBytes(b);
    String hexString=Encoder.hexEncode(b);
    System.out.println(hexString);
    resp=client.callProcedure("@AdHoc","INSERT INTO BLAH VALUES (" + "'" + hexString + "'"+ ",5);");
    assert(resp.getResults().length == 1);
  }
}
