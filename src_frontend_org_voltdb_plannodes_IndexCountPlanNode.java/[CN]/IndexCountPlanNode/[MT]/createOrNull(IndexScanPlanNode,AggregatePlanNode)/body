{
  List<AbstractExpression> endKeys=new ArrayList<AbstractExpression>();
  IndexLookupType endType=IndexLookupType.EQ;
  List<AbstractExpression> endComparisons=ExpressionUtil.uncombine(isp.getEndExpression());
  for (  AbstractExpression ae : endComparisons) {
    assert(endType == IndexLookupType.EQ);
    if (ae.getExpressionType() == ExpressionType.COMPARE_LESSTHAN) {
      endType=IndexLookupType.LT;
    }
 else     if (ae.getExpressionType() == ExpressionType.COMPARE_LESSTHANOREQUALTO) {
      endType=IndexLookupType.LTE;
    }
 else {
      assert(ae.getExpressionType() == ExpressionType.COMPARE_EQUAL);
    }
    endKeys.add((AbstractExpression)ae.getRight().clone());
  }
  if (isp.getSortDirection() != SortDirectionType.DESC && (endType != IndexLookupType.LT) && (endKeys.size() > 0) && (endKeys.size() < isp.getCatalogIndex().getColumns().size())) {
    return null;
  }
  if ((isp.getSearchKeyExpressions().size() > 0) && (isp.getSearchKeyExpressions().size() < isp.getCatalogIndex().getColumns().size())) {
    return null;
  }
  return new IndexCountPlanNode(isp,apn,endType,endKeys);
}
