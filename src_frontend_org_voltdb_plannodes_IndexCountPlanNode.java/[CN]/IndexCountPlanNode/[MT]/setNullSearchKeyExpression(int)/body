{
  List<AbstractExpression> exprs=new ArrayList<AbstractExpression>();
  String exprsjson=m_catalogIndex.getExpressionsjson();
  List<AbstractExpression> indexedExprs=null;
  if (exprsjson.isEmpty()) {
    indexedExprs=new ArrayList<AbstractExpression>();
    List<ColumnRef> indexedColRefs=CatalogUtil.getSortedCatalogItems(m_catalogIndex.getColumns(),"index");
    for (int i=0; i <= numOfKeysToSetup; i++) {
      ColumnRef colRef=indexedColRefs.get(i);
      Column col=colRef.getColumn();
      TupleValueExpression tve=new TupleValueExpression(m_targetTableName,m_targetTableAlias,col.getTypeName(),col.getTypeName(),col.getIndex());
      tve.setValueType(VoltType.get((byte)col.getType()));
      tve.setValueSize(col.getSize());
      tve.resolveForTable((Table)m_catalogIndex.getParent());
      AbstractExpression expr;
      if (i == numOfKeysToSetup) {
        expr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,tve,null);
      }
 else {
        expr=new ComparisonExpression(ExpressionType.COMPARE_EQUAL,tve,m_searchkeyExpressions.get(i));
      }
      ExpressionUtil.finalizeValueTypes(expr);
      exprs.add(expr);
    }
  }
 else {
    try {
      indexedExprs=AbstractExpression.fromJSONArrayString(exprsjson);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      assert(false);
    }
    for (int i=0; i <= numOfKeysToSetup; i++) {
      AbstractExpression idxExpr=indexedExprs.get(i);
      AbstractExpression expr;
      if (i == numOfKeysToSetup) {
        expr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,idxExpr,null);
      }
 else {
        expr=new ComparisonExpression(ExpressionType.COMPARE_EQUAL,idxExpr,m_searchkeyExpressions.get(i));
      }
      ExpressionUtil.finalizeValueTypes(expr);
      exprs.add(expr);
    }
  }
  m_countNULLKeyExpr=ExpressionUtil.combine(exprs);
  m_countNULLKeyExpr.finalizeValueTypes();
}
