{
  assert(endExpr != null);
  m_endkeyExpressions=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> subEndExpr=endExpr.findAllSubexpressionsOfClass(ComparisonExpression.class);
  int cmpSize=subEndExpr.size();
  int ctEqual=0, ctOther=0;
  for (  AbstractExpression ae : subEndExpr) {
    ExpressionType et=ae.getExpressionType();
    if (et == ExpressionType.COMPARE_EQUAL) {
      ctEqual++;
    }
 else     if (et == ExpressionType.COMPARE_GREATERTHAN) {
      ctOther++;
      m_LookupEndType=IndexLookupType.GT;
    }
 else     if (et == ExpressionType.COMPARE_GREATERTHANOREQUALTO) {
      ctOther++;
      m_LookupEndType=IndexLookupType.GTE;
    }
 else     if (et == ExpressionType.COMPARE_LESSTHAN) {
      ctOther++;
      m_LookupEndType=IndexLookupType.LT;
    }
 else     if (et == ExpressionType.COMPARE_LESSTHANOREQUALTO) {
      ctOther++;
      m_LookupEndType=IndexLookupType.LTE;
    }
 else {
      m_replaceable=false;
      return;
    }
    if (ae.getLeft() instanceof TupleValueExpression) {
      this.addEndKeyExpression(ae.getRight());
    }
 else {
      this.addEndKeyExpression(ae.getLeft());
    }
  }
  if (ctOther != 1 || ctOther + ctEqual != cmpSize) {
    m_replaceable=false;
    return;
  }
  m_replaceable=true;
}
