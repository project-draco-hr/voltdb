{
  assert(endExpr != null);
  m_endkeyExpressions=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> subEndExpr=endExpr.findAllSubexpressionsOfClass(ComparisonExpression.class);
  int cmpSize=subEndExpr.size();
  int ctEqual=0, ctOther=0;
  for (  AbstractExpression ae : subEndExpr) {
    ExpressionType et=ae.getExpressionType();
    if (et == ExpressionType.COMPARE_EQUAL) {
      ctEqual++;
    }
 else     if (et == ExpressionType.COMPARE_LESSTHAN) {
      ctOther++;
      m_endType=IndexLookupType.LT;
    }
 else     if (et == ExpressionType.COMPARE_LESSTHANOREQUALTO) {
      ctOther++;
      m_endType=IndexLookupType.LTE;
    }
 else {
      m_endExprValid=false;
      return;
    }
    if (ae.getLeft() instanceof TupleValueExpression) {
      this.addEndKeyExpression(ae.getRight());
    }
 else {
      this.addEndKeyExpression(ae.getLeft());
    }
  }
  if (ctOther > 1 || ctOther + ctEqual != cmpSize) {
    m_endExprValid=false;
    return;
  }
  if (ctEqual == 1 && ctOther == 0) {
    m_endExprValid=false;
    return;
  }
  List<ColumnRef> sortedColumns=CatalogUtil.getSortedCatalogItems(this.getCatalogIndex().getColumns(),"index");
  m_endExprValid=true;
}
