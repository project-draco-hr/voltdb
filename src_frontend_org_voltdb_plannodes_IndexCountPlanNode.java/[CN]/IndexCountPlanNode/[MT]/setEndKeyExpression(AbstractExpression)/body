{
  assert(endExpr != null);
  m_endkeyExpressions=new ArrayList<AbstractExpression>();
  ArrayList<AbstractExpression> subEndExpr=endExpr.findAllSubexpressionsOfClass(ComparisonExpression.class);
  int ctOther=0;
  for (  AbstractExpression ae : subEndExpr) {
    ExpressionType et=ae.getExpressionType();
    if (et == ExpressionType.COMPARE_EQUAL) {
    }
 else     if (et == ExpressionType.COMPARE_LESSTHAN) {
      ctOther++;
      m_endType=IndexLookupType.LT;
    }
 else     if (et == ExpressionType.COMPARE_LESSTHANOREQUALTO) {
      ctOther++;
      m_endType=IndexLookupType.LTE;
    }
 else {
      m_endExprValid=false;
      return;
    }
    assert(ae.getLeft() instanceof TupleValueExpression);
    this.addEndKeyExpression(ae.getRight());
  }
  if (ctOther != 1) {
    m_endExprValid=false;
    return;
  }
  m_endExprValid=true;
}
