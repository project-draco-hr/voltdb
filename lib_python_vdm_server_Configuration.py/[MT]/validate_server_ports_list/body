def validate_server_ports_list(members, databases, isDict):
    arr = ['http-listener', 'admin-listener', 'internal-listener', 'replication-listener', 'zookeeper-listener', 'client-listener']
    for i in range(len(members)):
        specified_port_values = {'http-listener': HTTPListener.get_port(members[i]['http-listener']), 'admin-listener': HTTPListener.get_port(members[i]['admin-listener']), 'replication-listener': HTTPListener.get_port(members[i]['replication-listener']), 'client-listener': HTTPListener.get_port(members[i]['client-listener']), 'zookeeper-listener': HTTPListener.get_port(members[i]['zookeeper-listener']), 'internal-listener': HTTPListener.get_port(members[i]['internal-listener']), }
        for option in arr:
            value = specified_port_values[option]
            for port_key in specified_port_values.keys():
                if ((option != port_key) and (value is not None) and (specified_port_values[port_key] == value)):
                    return 'Duplicate port'
    if (type(databases) is dict):
        for option in arr:
            result = check_port_valid(option, databases['members']['member'])
            if (result is not None):
                return result
    elif (type(databases) is list):
        for database in databases:
            for option in arr:
                result = check_port_valid(option, database['members']['member'])
                if (result is not None):
                    return result
