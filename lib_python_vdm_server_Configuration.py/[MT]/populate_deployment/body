def populate_deployment(deployments, log):
    success = True
    if (type(deployments) is dict):
        deployment_json = get_deployment_from_xml(deployments, 'dict')
        req = HTTPListener.DictClass()
        req.json = {}
        req.json = deployment_json[0]
        inputs = JsonInputs(req)
        if (not inputs.validate()):
            success = False
            sys.stdout.write(str(inputs.errors))
            log.error('Error while reloading configuration: %s', str(inputs.errors))
        if (success is True):
            HTTPListener.Global.DEPLOYMENT = {deployment_json[0]['databaseid']: deployment_json[0], }
    else:
        deployment_json = get_deployment_from_xml(deployments, 'list')
        for deployment in deployment_json:
            req = HTTPListener.DictClass()
            req.json = {}
            req.json = deployment
            inputs = JsonInputs(req)
            if (not inputs.validate()):
                success = False
                sys.stdout.write(str(inputs.errors))
                log.error('Error while reloading configuration: %s', str(inputs.errors))
        if (success is True):
            HTTPListener.Global.DEPLOYMENT = {}
            for deployment in deployment_json:
                HTTPListener.Global.DEPLOYMENT[deployment['databaseid']] = deployment
    success = True
    if (('users' in deployments) and (deployments['users'] is not None) and ('user' in deployments['users'])):
        if (type(deployments) is dict):
            user_json = get_users_from_xml(deployments, 'dict')
            if (type(user_json) is dict):
                req = HTTPListener.DictClass()
                req.json = {}
                user_json['plaintext'] = bool(user_json['plaintext'])
                req.json = user_json
                inputs = UserInputs(req)
                if (not inputs.validate()):
                    success = False
                    sys.stdout.write(str(inputs.errors))
                    log.error('Error while reloading configuration: %s', str(inputs.errors))
                if (success is True):
                    HTTPListener.Global.DEPLOYMENT_USERS = {int(user_json['userid']): user_json, }
            elif (type(user_json) is list):
                for user in user_json:
                    req = HTTPListener.DictClass()
                    req.json = {}
                    user['plaintext'] = bool(user['plaintext'])
                    req.json = user
                    inputs = UserInputs(req)
                    if (not inputs.validate()):
                        success = False
                        sys.stdout.write(str(inputs.errors))
                        log.error('Error while reloading configuration: %s', str(inputs.errors))
                if (len(user_json) > 1):
                    result = check_duplicate_user(user_json)
                    if (result != ''):
                        success = False
                        log.error('Error while reloading configuration: %s', result)
                if (success is True):
                    HTTPListener.Global.DEPLOYMENT_USERS = {}
                    for user in user_json:
                        HTTPListener.Global.DEPLOYMENT_USERS[int(user['userid'])] = user
        else:
            user_json = get_users_from_xml(deployments, 'list')
            if (type(user_json) is dict):
                req = HTTPListener.DictClass()
                req.json = {}
                user_json['plaintext'] = bool(user_json['plaintext'])
                req.json = user_json
                inputs = UserInputs(req)
                if (not inputs.validate()):
                    success = False
                    sys.stdout.write(str(inputs.errors))
                    log.error('Error while reloading configuration: %s', str(inputs.errors))
                if (success is True):
                    HTTPListener.Global.DEPLOYMENT_USERS = {int(user_json['userid']): user_json, }
            elif (type(user_json) is list):
                for user in user_json:
                    req = HTTPListener.DictClass()
                    req.json = {}
                    user['plaintext'] = bool(user['plaintext'])
                    req.json = user
                    inputs = UserInputs(req)
                    if (not inputs.validate()):
                        success = False
                        sys.stdout.write(str(inputs.errors))
                        log.error('Error while reloading configuration: %s', str(inputs.errors))
                result = check_duplicate_user(user_json)
                if (result != ''):
                    success = False
                    log.error('Error while reloading configuration: %s', result)
                if (success is True):
                    HTTPListener.Global.DEPLOYMENT_USERS = {}
                    for user in user_json:
                        HTTPListener.Global.DEPLOYMENT_USERS[int(user['userid'])] = user
