def check_validation_deployment(req):
    if (('systemsettings' in req.json) and ('resourcemonitor' in req.json['systemsettings'])):
        if (('memorylimit' in req.json['systemsettings']['resourcemonitor']) and ('size' in req.json['systemsettings']['resourcemonitor']['memorylimit'])):
            size = str(req.json['systemsettings']['resourcemonitor']['memorylimit']['size'])
            response = json.loads(HTTPListener.check_size_value(size, 'memorylimit').data)
            if ('error' in response):
                return {'status': 401, 'statusString': response['error'], }
        disk_limit_arr = []
        if (('disklimit' in req.json['systemsettings']['resourcemonitor']) and ('feature' in req.json['systemsettings']['resourcemonitor']['disklimit'])):
            for feature in req.json['systemsettings']['resourcemonitor']['disklimit']['feature']:
                size = feature['size']
                if (feature['name'] in disk_limit_arr):
                    return {'status': 401, 'statusString': 'Duplicate items are not allowed.', }
                disk_limit_arr.append(feature['name'])
                response = json.loads(HTTPListener.check_size_value(size, 'disklimit').data)
                if ('error' in response):
                    return {'status': 401, 'statusString': response['error'], }
        if (('snapshot' in req.json) and ('frequency' in req.json['snapshot'])):
            frequency_unit = ['h', 'm', 's']
            frequency = str(req.json['snapshot']['frequency'])
            if (' ' in frequency):
                return {'status': 401, 'statusString': 'Snapshot: White spaces not allowed in frequency.', }
            last_char = frequency[(len(frequency) - 1)]
            if (last_char not in frequency_unit):
                return {'status': 401, 'statusString': 'Snapshot: Invalid frequency value.', }
            frequency = frequency[:(-1)]
            try:
                int_frequency = int(frequency)
            except Exception as exp:
                return {'status': 401, 'statusString': ('Snapshot: ' + str(exp)), }
    if (('export' in req.json) and ('configuration' in req.json['export'])):
        for configuration in req.json['export']['configuration']:
            result = check_export_property(configuration['type'], configuration['property'])
            if (('status' in result) and (result['status'] == 'error')):
                return {'status': 401, 'statusString': ('Export: ' + result['error']), }
    if (('import' in req.json) and ('configuration' in req.json['import'])):
        for configuration in req.json['import']['configuration']:
            result = check_export_property(configuration['type'], configuration['property'])
            if (('status' in result) and (result['status'] == 'error')):
                return {'status': 401, 'statusString': ('Import: ' + result['error']), }
    return {'status': 200, 'statusString': 'success', }
