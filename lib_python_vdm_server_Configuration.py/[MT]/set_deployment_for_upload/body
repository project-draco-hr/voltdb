def set_deployment_for_upload(database_id, request):
    dep_file = request.files['file']
    if (dep_file and HTTPListener.allowed_file(dep_file.filename)):
        try:
            content = dep_file.read()
            o = XML(content)
            xml_final = json.loads(json.dumps(etree_to_dict(o)))
            if (('deployment' in xml_final) and (type(xml_final['deployment']) is dict)):
                deployment_data = get_deployment_for_upload(xml_final['deployment'])
                if (type(deployment_data) is dict):
                    if ('error' in deployment_data):
                        return {'status': 'failure', 'error': deployment_data['error'], }
                else:
                    deployment_json = deployment_data[0]
                req = HTTPListener.DictClass()
                req.json = {}
                req.json = deployment_json
                inputs = JsonInputs(req)
                if (not inputs.validate()):
                    return {'status': 'failure', 'errors': inputs.errors, }
                result = check_validation_deployment(req)
                if (('status' in result) and (result['status'] == 'error')):
                    return {'status': 'failure', 'error': result['error'], }
                HTTPListener.map_deployment(req, database_id)
                HTTPListener.Global.DEPLOYMENT_USERS = {}
                if (('users' in req.json) and ('user' in req.json['users'])):
                    for user in req.json['users']['user']:
                        HTTPListener.Global.DEPLOYMENT_USERS[int(user['userid'])] = {'name': user['name'], 'roles': user['roles'], 'password': user['password'], 'plaintext': user['plaintext'], 'databaseid': database_id, 'userid': user['userid'], }
                HTTPListener.sync_configuration()
                write_configuration_file()
            else:
                return {'status': 'failure', 'error': 'Invalid file content.', }
        except Exception as err:
            return {'status': 'failure', 'error': 'Invalid file content.', }
    else:
        return {'status': 'failure', 'error': 'Invalid file type.', }
    return {'status': 'success', }
