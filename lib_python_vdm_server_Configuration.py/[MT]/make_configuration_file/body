def make_configuration_file():
    '\n    Prepare the xml content\n    :return: xml content\n    '
    main_header = Element('voltdeploy')
    db_top = SubElement(main_header, 'databases')
    server_top = SubElement(main_header, 'members')
    deployment_top = SubElement(main_header, 'deployments')
    i = 0
    while (i < len(HTTPListener.Global.DATABASES)):
        db_elem = SubElement(db_top, 'database')
        for (key, value) in HTTPListener.Global.DATABASES[i].iteritems():
            if isinstance(value, bool):
                if (value == False):
                    db_elem.attrib[key] = 'false'
                else:
                    db_elem.attrib[key] = 'true'
            else:
                db_elem.attrib[key] = str(value)
        i += 1
    i = 0
    while (i < len(HTTPListener.Global.SERVERS)):
        server_elem = SubElement(server_top, 'member')
        for (key, value) in HTTPListener.Global.SERVERS[i].iteritems():
            if isinstance(value, bool):
                if (value == False):
                    server_elem.attrib[key] = 'false'
                else:
                    server_elem.attrib[key] = 'true'
            else:
                server_elem.attrib[key] = str(value)
        i += 1
    i = 0
    while (i < len(HTTPListener.Global.DEPLOYMENT)):
        HTTPListener.Global.DEPLOYMENT[i]['users'] = {}
        HTTPListener.Global.DEPLOYMENT[i]['users']['user'] = []
        deployment_user = filter((lambda t: (t['databaseid'] == HTTPListener.Global.DEPLOYMENT[i]['databaseid'])), HTTPListener.Global.DEPLOYMENT_USERS)
        if (len(deployment_user) == 0):
            HTTPListener.Global.DEPLOYMENT[i]['users'] = None
        for user in deployment_user:
            HTTPListener.Global.DEPLOYMENT[i]['users']['user'].append({'name': user['name'], 'roles': user['roles'], 'plaintext': user['plaintext'], 'password': user['password'], 'databaseid': user['databaseid'], })
        deployment_elem = SubElement(deployment_top, 'deployment')
        for (key, value) in HTTPListener.Global.DEPLOYMENT[i].iteritems():
            if (type(value) is dict):
                DeploymentConfig.handle_deployment_dict(deployment_elem, key, value, False)
            elif (type(value) is list):
                DeploymentConfig.handle_deployment_list(deployment_elem, key, value)
            elif (value is not None):
                deployment_elem.attrib[key] = str(value)
        i += 1
    return tostring(main_header, encoding='UTF-8')
