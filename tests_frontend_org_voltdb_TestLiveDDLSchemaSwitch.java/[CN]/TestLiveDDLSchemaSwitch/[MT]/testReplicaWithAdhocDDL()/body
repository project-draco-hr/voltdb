{
  generateCatalogsAndDeployments(true);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=m_pathToOtherCatalog;
  config.m_pathToDeployment=m_pathToDeployment;
  config.m_replicationRole=ReplicationRole.REPLICA;
  try {
    startSystem(config);
    assertFalse(findTableInSystemCatalogResults("FOO"));
    boolean threw=false;
    try {
      m_client.updateApplicationCatalog(new File(m_pathToCatalog),null);
    }
 catch (    ProcCallException pce) {
      threw=true;
      assertTrue(pce.getMessage().contains("Cluster is configured to use AdHoc DDL"));
    }
    assertTrue("@UAC should have failed",threw);
    assertFalse(findTableInSystemCatalogResults("FOO"));
    threw=false;
    try {
      m_client.updateApplicationCatalog(null,new File(m_pathToOtherDeployment));
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertFalse("@UAC should should succeed with just a deployment file",threw);
    assertEquals(getHeartbeatTimeout(),6);
    assertFalse(findTableInSystemCatalogResults("BAR"));
    try {
      m_client.callProcedure("@AdHoc","create table BAR (ID integer, VAL varchar(50));");
    }
 catch (    ProcCallException pce) {
      fail("@AdHoc should succeed on replica cluster");
    }
    assertTrue(findTableInSystemCatalogResults("BAR"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","insert into BAR values (100, 'ABC');");
    }
 catch (    ProcCallException pce) {
      threw=true;
      System.out.println(pce.getMessage());
      assertTrue(pce.getMessage().contains("Write procedure @AdHoc_RW_MP is not allowed in replica cluster"));
    }
    assertTrue("Adhoc DDL should have failed",threw);
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.fullddlfeatures.testImportProc"));
    threw=false;
    try {
      InMemoryJarfile jarfile=new InMemoryJarfile();
      VoltCompiler comp=new VoltCompiler();
      comp.addClassToJar(jarfile,org.voltdb_testprocs.fullddlfeatures.testImportProc.class);
      m_client.callProcedure("@UpdateClasses",jarfile.getFullJarBytes(),null);
    }
 catch (    ProcCallException pce) {
      threw=true;
      assertTrue(pce.getMessage().contains("Write procedure @UpdateClasses is not allowed"));
    }
    assertTrue("@UpdateClasses should have failed",threw);
    assertFalse(findClassInSystemCatalog("org.voltdb_testprocs.fullddlfeatures.testImportProc"));
    ClientResponse result=m_client.callProcedure("@AdHoc","select * from baz;");
    assertEquals(ClientResponse.SUCCESS,result.getStatus());
    m_client.callProcedure("@Promote");
    verifyMasterWithAdhocDDL();
  }
  finally {
    teardownSystem();
  }
}
