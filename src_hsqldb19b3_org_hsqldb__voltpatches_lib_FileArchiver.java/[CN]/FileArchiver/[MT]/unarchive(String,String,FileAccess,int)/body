{
  InputStream f=null;
  OutputStream outstream=null;
  boolean completed=false;
  try {
    if (!storage.isStreamElement(infilename)) {
      return;
    }
    storage.removeElement(outfilename);
    byte[] b=new byte[COPY_BLOCK_SIZE];
    f=storage.openInputStreamElement(infilename);
switch (compressionType) {
case COMPRESSION_ZIP:
      f=new InflaterInputStream(f,new Inflater());
    break;
case COMPRESSION_GZIP:
  f=new GZIPInputStream(f,b.length);
break;
case COMPRESSION_NONE:
break;
default :
throw new RuntimeException("FileArchiver: " + compressionType);
}
outstream=storage.openOutputStreamElement(outfilename);
while (true) {
int l=f.read(b,0,b.length);
if (l == -1) {
break;
}
outstream.write(b,0,l);
}
completed=true;
}
 catch (Throwable e) {
throw FileUtil.toIOException(e);
}
 finally {
try {
if (f != null) {
f.close();
}
if (outstream != null) {
outstream.flush();
outstream.close();
}
if (!completed && storage.isStreamElement(outfilename)) {
storage.removeElement(outfilename);
}
}
 catch (Throwable e) {
throw FileUtil.toIOException(e);
}
}
}
