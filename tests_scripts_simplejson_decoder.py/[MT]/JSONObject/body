def JSONObject(match, context, _w=WHITESPACE.match):
    pairs = {}
    s = match.string
    end = _w(s, match.end()).end()
    nextchar = s[end:(end + 1)]
    if (nextchar == '}'):
        return (pairs, (end + 1))
    if (nextchar != '"'):
        raise ValueError(errmsg('Expecting property name', s, end))
    end += 1
    encoding = getattr(context, 'encoding', None)
    strict = getattr(context, 'strict', True)
    iterscan = JSONScanner.iterscan
    while True:
        (key, end) = scanstring(s, end, encoding, strict)
        end = _w(s, end).end()
        if (s[end:(end + 1)] != ':'):
            raise ValueError(errmsg('Expecting : delimiter', s, end))
        end = _w(s, (end + 1)).end()
        try:
            (value, end) = iterscan(s, idx=end, context=context).next()
        except StopIteration:
            raise ValueError(errmsg('Expecting object', s, end))
        pairs[key] = value
        end = _w(s, end).end()
        nextchar = s[end:(end + 1)]
        end += 1
        if (nextchar == '}'):
            break
        if (nextchar != ','):
            raise ValueError(errmsg('Expecting , delimiter', s, (end - 1)))
        end = _w(s, end).end()
        nextchar = s[end:(end + 1)]
        end += 1
        if (nextchar != '"'):
            raise ValueError(errmsg('Expecting property name', s, (end - 1)))
    object_hook = getattr(context, 'object_hook', None)
    if (object_hook is not None):
        pairs = object_hook(pairs)
    return (pairs, end)
