def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):
    if (encoding is None):
        encoding = DEFAULT_ENCODING
    chunks = []
    _append = chunks.append
    begin = (end - 1)
    while 1:
        chunk = _m(s, end)
        if (chunk is None):
            raise ValueError(errmsg('Unterminated string starting at', s, begin))
        end = chunk.end()
        (content, terminator) = chunk.groups()
        if content:
            if (not isinstance(content, unicode)):
                content = unicode(content, encoding)
            _append(content)
        if (terminator == '"'):
            break
        elif (terminator != '\\'):
            if strict:
                raise ValueError(errmsg('Invalid control character %r at', s, end))
            else:
                _append(terminator)
                continue
        try:
            esc = s[end]
        except IndexError:
            raise ValueError(errmsg('Unterminated string starting at', s, begin))
        if (esc != 'u'):
            try:
                m = _b[esc]
            except KeyError:
                raise ValueError(errmsg(('Invalid \\escape: %r' % (esc,)), s, end))
            end += 1
        else:
            esc = s[(end + 1):(end + 5)]
            next_end = (end + 5)
            msg = 'Invalid \\uXXXX escape'
            try:
                if (len(esc) != 4):
                    raise ValueError
                uni = int(esc, 16)
                if ((55296 <= uni <= 56319) and (sys.maxunicode > 65535)):
                    msg = 'Invalid \\uXXXX\\uXXXX surrogate pair'
                    if (not (s[(end + 5):(end + 7)] == '\\u')):
                        raise ValueError
                    esc2 = s[(end + 7):(end + 11)]
                    if (len(esc2) != 4):
                        raise ValueError
                    uni2 = int(esc2, 16)
                    uni = (65536 + (((uni - 55296) << 10) | (uni2 - 56320)))
                    next_end += 6
                m = unichr(uni)
            except ValueError:
                raise ValueError(errmsg(msg, s, end))
            end = next_end
        _append(m)
    return (u''.join(chunks), end)
