{
  int level=0;
  boolean readonly=false;
  Object[] args=new Object[2];
  outerloop:   while (true) {
switch (token.tokenType) {
case Tokens.READ:
{
        if (args[0] != null) {
          throw unexpectedToken();
        }
        read();
        if (token.tokenType == Tokens.ONLY) {
          read();
          readonly=true;
        }
 else {
          readThis(Tokens.WRITE);
          readonly=false;
        }
        args[0]=Boolean.valueOf(readonly);
        break;
      }
case Tokens.ISOLATION:
{
      if (args[1] != null) {
        throw unexpectedToken();
      }
      read();
      readThis(Tokens.LEVEL);
switch (token.tokenType) {
case Tokens.SERIALIZABLE:
        read();
      level=SessionInterface.TX_SERIALIZABLE;
    break;
case Tokens.READ:
  read();
if (token.tokenType == Tokens.COMMITTED) {
  read();
  level=SessionInterface.TX_READ_COMMITTED;
}
 else if (token.tokenType == Tokens.UNCOMMITTED) {
  read();
  level=SessionInterface.TX_READ_UNCOMMITTED;
}
 else {
  throw unexpectedToken();
}
break;
case Tokens.REPEATABLE:
read();
readThis(Tokens.READ);
level=SessionInterface.TX_REPEATABLE_READ;
break;
default :
throw unexpectedToken();
}
args[1]=new Integer(level);
break;
}
default :
{
break outerloop;
}
}
}
if (!readonly && level == 1) {
throw unexpectedToken(Tokens.T_WRITE);
}
return args;
}
