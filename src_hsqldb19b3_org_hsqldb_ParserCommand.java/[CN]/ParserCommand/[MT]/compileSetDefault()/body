{
  read();
switch (token.tokenType) {
case Tokens.INITIAL:
{
      read();
      readThis(Tokens.SCHEMA);
      HsqlName schema=database.schemaManager.getSchemaHsqlName(token.tokenString);
      read();
      Object[] args=new Object[]{schema};
      return new StatementCommand(StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA,args,null,null);
    }
case Tokens.RESULT:
{
    read();
    readThis(Tokens.MEMORY);
    readThis(Tokens.SIZE);
    int size=readInteger();
    Object[] args=new Object[]{new Integer(size)};
    return new StatementCommand(StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS,args,null,null);
  }
case Tokens.TABLE:
{
  read();
  readThis(Tokens.TYPE);
  int type=TableBase.MEMORY_TABLE;
switch (token.tokenType) {
case Tokens.MEMORY:
    break;
case Tokens.CACHED:
  type=TableBase.CACHED_TABLE;
break;
default :
throw unexpectedToken();
}
read();
Object[] args=new Object[]{Integer.valueOf(type)};
return new StatementCommand(StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE,args,null,null);
}
default :
throw unexpectedToken();
}
}
