{
  final long seatmap[]=new long[]{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
  final VoltTable retarray[]=new VoltTable[1];
  retarray[0]=new VoltTable(new VoltTable.ColumnInfo("FID",VoltType.INTEGER),new VoltTable.ColumnInfo("SEAT",VoltType.INTEGER));
  voltQueueSQL(GET_SEATS,fid);
  final VoltTable[] results=voltExecuteSQL();
  assert(results.length == 1);
  while (results[0].advanceRow()) {
    seatmap[(int)(results[0].getLong(2) - 1)]=results[0].getLong(1);
  }
  for (int i=0; i < 150; ++i) {
    if (seatmap[i] != -1) {
      Object[] row=new Object[]{new Integer((int)fid),new Integer(i + 1)};
      retarray[0].addRow(row);
    }
  }
  return retarray;
}
