{
  throwVoltAbortExceptionIf("column count mismatch.  Expected: " + expectedRows.getColumnCount() + " actual: "+ actualRows.getColumnCount(),expectedRows.getColumnCount() != actualRows.getColumnCount(),expectedRows,actualRows);
  throwVoltAbortExceptionIf("row count mismatch.  Expected: " + expectedRows.getRowCount() + " actual: "+ actualRows.getRowCount(),expectedRows.getRowCount() != actualRows.getRowCount(),expectedRows,actualRows);
  int ii=0;
  while (expectedRows.advanceToRow(ii)) {
    throwVoltAbortExceptionIf("too few actual rows; expected more than " + (ii + 1),!actualRows.advanceToRow(ii),expectedRows,actualRows);
    for (int j=0; j < actualRows.getColumnCount(); j++) {
      String columnName=actualRows.getColumnName(j);
      String colPrefix="row " + ii + ": column: "+ columnName+ ": ";
      VoltType actualType=actualRows.getColumnType(j);
      VoltType expectedType=expectedRows.getColumnType(j);
      throwVoltAbortExceptionIf(colPrefix + "type mismatch",expectedType != actualType,expectedRows,actualRows);
      Object expectedObj=expectedRows.get(j,expectedType);
      Object actualObj=actualRows.get(j,actualType);
      boolean expectedNull=expectedRows.wasNull();
      boolean actualNull=actualRows.wasNull();
      throwVoltAbortExceptionIf(colPrefix + "null/not null mismatch",expectedNull != actualNull,expectedRows,actualRows);
      if (expectedNull) {
        continue;
      }
      if (expectedType == VoltType.FLOAT) {
        continue;
      }
      String message=colPrefix + "values not equal: expected: " + expectedObj+ ", actual: "+ actualObj;
      throwVoltAbortExceptionIf(message,!expectedObj.toString().equals(actualObj.toString()),expectedRows,actualRows);
    }
    ii++;
  }
}
