{
  result.resetRowPosition();
  Set<Long> hostsSeen=new HashSet<Long>();
  while (result.advanceRow()) {
    if (checkRowForMultipleTargets(result,columnTargets)) {
      Long thisHostId=result.getLong("HOST_ID");
      if (enforceUnique) {
        StringBuilder message=new StringBuilder();
        message.append("HOST_ID: " + thisHostId + " seen twice in table looking for ");
        for (        Entry<String,String> entry : columnTargets.entrySet()) {
          message.append(entry.getValue() + " in column " + entry.getKey()+ ";");
        }
        assertFalse(message.toString(),hostsSeen.contains(thisHostId));
      }
      hostsSeen.add(thisHostId);
    }
  }
  m_recentAnalysis=null;
  if (HOSTS != hostsSeen.size()) {
    m_recentAnalysis=new StringBuilder();
    m_recentAnalysis.append("Failure follows from these results:\n");
    Set<Long> seenAgain=new HashSet<Long>();
    result.resetRowPosition();
    while (result.advanceRow()) {
      Long thisHostId=result.getLong("HOST_ID");
      String rowStatus="Found a non-match";
      if (checkRowForMultipleTargets(result,columnTargets)) {
        if (seenAgain.add(thisHostId)) {
          rowStatus="Added a match";
        }
 else {
          rowStatus="Duplicated a match";
        }
      }
      m_recentAnalysis.append(rowStatus + " at host " + thisHostId+ " for ");
      for (      String key : columnTargets.keySet()) {
        m_recentAnalysis.append(key + " " + result.getString(key)+ ";");
      }
      m_recentAnalysis.append("\n");
    }
  }
  return hostsSeen.size();
}
