{
  result.resetRowPosition();
  Set<Long> hostsSeen=new HashSet<Long>();
  while (result.advanceRow()) {
    String idFromRow=result.getString(columnName);
    if (rowId.equalsIgnoreCase(idFromRow)) {
      Long thisHostId=result.getLong("HOST_ID");
      if (enforceUnique) {
        assertFalse("HOST_ID: " + thisHostId + " seen twice in table looking for "+ rowId+ " in column "+ columnName,hostsSeen.contains(thisHostId));
      }
      hostsSeen.add(thisHostId);
    }
  }
  if (HOSTS != hostsSeen.size()) {
    System.out.println("Something in the following results may fail an assert expecting " + HOSTS + " and getting "+ hostsSeen.size());
    Set<Long> seenAgain=new HashSet<Long>();
    result.resetRowPosition();
    while (result.advanceRow()) {
      String idFromRow=result.getString(columnName);
      Long thisHostId=result.getLong("HOST_ID");
      if (rowId.equalsIgnoreCase(idFromRow)) {
        System.out.println("Found the match at host " + thisHostId + " for "+ columnName+ " "+ idFromRow+ (seenAgain.add(thisHostId) ? " added" : " duplicated"));
        seenAgain.add(thisHostId);
      }
 else {
        System.out.println("Found non-match at host " + thisHostId + " for "+ columnName+ " "+ idFromRow);
      }
    }
  }
  return hostsSeen.size();
}
