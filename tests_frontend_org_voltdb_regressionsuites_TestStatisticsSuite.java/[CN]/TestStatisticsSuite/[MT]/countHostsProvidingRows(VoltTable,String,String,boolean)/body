{
  result.resetRowPosition();
  Set<Long> hostsSeen=new HashSet<Long>();
  while (result.advanceRow()) {
    String colValFromRow=result.getString(columnName);
    if (targetValue.equalsIgnoreCase(colValFromRow)) {
      Long thisHostId=result.getLong("HOST_ID");
      if (enforceUnique) {
        assertFalse("HOST_ID: " + thisHostId + " seen twice in table looking for "+ targetValue+ " in column "+ columnName,hostsSeen.contains(thisHostId));
      }
      hostsSeen.add(thisHostId);
    }
  }
  m_recentAnalysis=null;
  if (HOSTS != hostsSeen.size()) {
    m_recentAnalysis=new StringBuilder();
    m_recentAnalysis.append("Failure follows from these results:\n");
    Set<Long> seenAgain=new HashSet<Long>();
    result.resetRowPosition();
    while (result.advanceRow()) {
      String colValFromRow=result.getString(columnName);
      Long thisHostId=result.getLong("HOST_ID");
      String rowStatus="Found a non-match";
      if (targetValue.equalsIgnoreCase(colValFromRow)) {
        if (seenAgain.add(thisHostId)) {
          rowStatus="Added a match";
        }
 else {
          rowStatus="Duplicated a match";
        }
      }
      m_recentAnalysis.append(rowStatus + " at host " + thisHostId+ " for "+ columnName+ " "+ colValFromRow+ "\n");
    }
  }
  return hostsSeen.size();
}
