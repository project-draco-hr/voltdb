{
  System.out.println("\n\nTESTING COMMANDLOG STATS\n\n\n");
  Client client=getFullyConnectedClient();
  ColumnInfo[] expectedSchema=new ColumnInfo[8];
  expectedSchema[0]=new ColumnInfo("TIMESTAMP",VoltType.BIGINT);
  expectedSchema[1]=new ColumnInfo("HOST_ID",VoltType.INTEGER);
  expectedSchema[2]=new ColumnInfo("HOSTNAME",VoltType.STRING);
  expectedSchema[3]=new ColumnInfo(CommandLogStats.StatName.OUTSTANDING_BYTES.name(),VoltType.BIGINT);
  expectedSchema[4]=new ColumnInfo(CommandLogStats.StatName.OUTSTANDING_TXNS.name(),VoltType.BIGINT);
  expectedSchema[5]=new ColumnInfo(CommandLogStats.StatName.LOANED_SEGMENT_COUNT.name(),VoltType.INTEGER);
  expectedSchema[6]=new ColumnInfo(CommandLogStats.StatName.SEGMENT_COUNT.name(),VoltType.INTEGER);
  expectedSchema[7]=new ColumnInfo(CommandLogStats.StatName.FSYNC_INTERVAL.name(),VoltType.INTEGER);
  VoltTable expectedTable=new VoltTable(expectedSchema);
  VoltTable[] results=null;
  results=client.callProcedure("@Statistics","COMMANDLOG",0).getResults();
  System.out.println("Node commandlog statistics table: " + results[0].toString());
  assertEquals(1,results.length);
  validateSchema(results[0],expectedTable);
  results[0].advanceRow();
  Map<String,String> columnTargets=new HashMap<String,String>();
  columnTargets.put("HOSTNAME",results[0].getString("HOSTNAME"));
  validateRowSeenAtAllHosts(results[0],columnTargets,true);
  if (!MiscUtils.isPro()) {
    return;
  }
  for (int i=0; i < 2; i++) {
    long start=System.currentTimeMillis();
    for (int j=0; j < 16000; j++) {
      client.callProcedure("NEW_ORDER.insert",(i * 16000 + j) % 32768);
    }
    long end=System.currentTimeMillis();
    System.out.println("Insertion took " + (end - start) + " ms");
    if (end - start < FSYNC_INTERVAL_GOLD) {
      System.out.println("Insertion took " + (end - start) + " ms, sleeping..");
      Thread.sleep(FSYNC_INTERVAL_GOLD - (end - start));
    }
    Thread.sleep(1000);
    results=client.callProcedure("@Statistics","COMMANDLOG",0).getResults();
    System.out.println("commandlog statistics: " + results[0].toString());
    while (results[0].advanceRow()) {
      int actualFsyncInterval=(int)results[0].getLong(CommandLogStats.StatName.FSYNC_INTERVAL.name());
      System.out.println("Actual fsync interval is " + actualFsyncInterval + "ms, specified interval is "+ FSYNC_INTERVAL_GOLD+ "ms");
      if (i == 1) {
        int actualLoanedSegmentCount=(int)results[0].getLong(CommandLogStats.StatName.LOANED_SEGMENT_COUNT.name());
        int actualSegmentCount=(int)results[0].getLong(CommandLogStats.StatName.SEGMENT_COUNT.name());
        String message="Unexpected segment count: should be 2";
        assertTrue(message,actualSegmentCount == 2);
        message="Unexpected segment count: loaned segment count should be less than total count";
        assertTrue(message,actualLoanedSegmentCount <= actualSegmentCount);
      }
    }
  }
}
