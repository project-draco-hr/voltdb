{
  System.out.println("\n\nTESTING LATENCY STATS\n\n\n");
  Client client=getFullyConnectedClient();
  ColumnInfo[] expectedSchema=new ColumnInfo[5];
  expectedSchema[0]=new ColumnInfo("TIMESTAMP",VoltType.BIGINT);
  expectedSchema[1]=new ColumnInfo("HOST_ID",VoltType.INTEGER);
  expectedSchema[2]=new ColumnInfo("HOSTNAME",VoltType.STRING);
  expectedSchema[3]=new ColumnInfo("SITE_ID",VoltType.INTEGER);
  expectedSchema[4]=new ColumnInfo("HISTOGRAM",VoltType.VARBINARY);
  VoltTable expectedTable=new VoltTable(expectedSchema);
  VoltTable[] results=null;
  for (int i=0; i < SITES * HOSTS; i++) {
    results=client.callProcedure("NEW_ORDER.insert",i).getResults();
  }
  results=client.callProcedure("@Statistics","LATENCY",0).getResults();
  assertEquals(1,results.length);
  System.out.println("Test latency table: " + results[0].toString());
  validateSchema(results[0],expectedTable);
  results[0].advanceRow();
  validateRowSeenAtAllHosts(results[0],"HOSTNAME",results[0].getString("HOSTNAME"),false);
  assertEquals(HOSTS,results[0].getRowCount());
  long invocations=0;
  results[0].resetRowPosition();
  while (results[0].advanceRow()) {
    invocations+=AbstractHistogram.fromCompressedBytes(results[0].getVarbinary("HISTOGRAM")).getHistogramData().getTotalCount();
  }
  assertTrue(invocations > 0);
}
