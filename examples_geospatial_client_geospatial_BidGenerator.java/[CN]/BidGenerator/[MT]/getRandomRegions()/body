{
  List<GeographyValue> regions=new ArrayList<GeographyValue>();
  final double MIN_SIDE_LENGTH=0.000823451910;
  final double MAX_SIDE_LENGTH=MIN_SIDE_LENGTH * 5.0;
  final double LNG_MIN=AdBrokerBenchmark.BID_AREA_LNG_MIN;
  final double LNG_MAX=AdBrokerBenchmark.BID_AREA_LNG_MAX - MAX_SIDE_LENGTH;
  final double LAT_MIN=AdBrokerBenchmark.BID_AREA_LAT_MIN;
  final double LAT_MAX=AdBrokerBenchmark.BID_AREA_LAT_MAX - MAX_SIDE_LENGTH;
  for (int i=0; i < AdBrokerBenchmark.NUM_BID_REGIONS; ++i) {
    double d=m_rand.nextDouble();
    double regLngMin=LNG_MIN + d * (LNG_MAX - LNG_MIN);
    d=m_rand.nextDouble();
    double regLatMin=LAT_MIN + d * (LAT_MAX - LAT_MIN);
    d=m_rand.nextDouble();
    double lngSideLength=MIN_SIDE_LENGTH + d * (MAX_SIDE_LENGTH - MIN_SIDE_LENGTH);
    d=m_rand.nextDouble();
    double latSideLength=MIN_SIDE_LENGTH + d * (MAX_SIDE_LENGTH - MIN_SIDE_LENGTH);
    List<GeographyPointValue> ring=new ArrayList<GeographyPointValue>();
    ring.add(new GeographyPointValue(regLngMin,regLatMin));
    ring.add(new GeographyPointValue(regLngMin + lngSideLength,regLatMin));
    ring.add(new GeographyPointValue(regLngMin + lngSideLength,regLatMin + latSideLength));
    ring.add(new GeographyPointValue(regLngMin,regLatMin + latSideLength));
    ring.add(new GeographyPointValue(regLngMin,regLatMin));
    List<List<GeographyPointValue>> rings=new ArrayList<List<GeographyPointValue>>();
    rings.add(ring);
    regions.add(new GeographyValue(rings));
  }
  return regions;
}
