{
  log.info(HORIZONTAL_RULE);
  log.info(" Setup & Initialization");
  log.info(HORIZONTAL_RULE);
  final int cidCount=128;
  final long[] lastRid=new long[cidCount];
  for (int i=0; i < lastRid.length; i++) {
    lastRid[i]=0;
  }
  connect();
  log.info(HORIZONTAL_RULE);
  log.info("Starting Benchmark");
  log.info(HORIZONTAL_RULE);
  benchmarkStartTS=System.currentTimeMillis();
  schedulePeriodicStats();
  log.info("Running benchmark...");
  BigTableLoader partitionedLoader=new BigTableLoader(client,"bigp",(config.partfillerrowmb * 1024 * 1024) / config.fillerrowsize,config.fillerrowsize);
  partitionedLoader.start();
  BigTableLoader replicatedLoader=new BigTableLoader(client,"bigr",(config.replfillerrowmb * 1024 * 1024) / config.fillerrowsize,config.fillerrowsize);
  replicatedLoader.start();
  ReadThread readThread=new ReadThread(client,config.threads,config.threadoffset);
  readThread.start();
  AdHocMayhemThread adHocMayhemThread=new AdHocMayhemThread(client);
  adHocMayhemThread.start();
  List<ClientThread> clientThreads=new ArrayList<ClientThread>();
  for (byte cid=(byte)config.threadoffset; cid < config.threadoffset + config.threads; cid++) {
    ClientThread clientThread=new ClientThread(cid,c,client,processor);
    clientThread.start();
    clientThreads.add(clientThread);
  }
  final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
  while (benchmarkEndTime > System.currentTimeMillis()) {
    Thread.yield();
  }
  replicatedLoader.shutdown();
  partitionedLoader.shutdown();
  readThread.shutdown();
  adHocMayhemThread.shutdown();
  for (  ClientThread clientThread : clientThreads) {
    clientThread.shutdown();
  }
  replicatedLoader.join();
  partitionedLoader.join();
  readThread.join();
  adHocMayhemThread.join();
  for (  ClientThread clientThread : clientThreads) {
    clientThread.join();
  }
  timer.cancel();
  shutdown.set(true);
  es.shutdownNow();
  client.drain();
  client.close();
}
