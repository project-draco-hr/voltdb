{
  VoltLogger log=new VoltLogger("Benchmark.main");
  boolean testResult=true;
  Config config=new Config();
  config.parse(KafkaImportBenchmark.class.getName(),args);
  dbconnect(config.servers,config.ratelimit);
  if (config.expected_rows == 0) {
    testResult=verifyZero();
    endTest(testResult);
  }
  exportProc=new InsertExport(config.alltypes,client,rowsAdded);
  log.info("Starting KafkaImportBenchmark...");
  KafkaImportBenchmark benchmark=new KafkaImportBenchmark(config);
  BenchmarkRunner runner=new BenchmarkRunner(benchmark);
  runner.start();
  runner.join();
  long exportRowCount=0;
  if (config.useexport) {
    exportRowCount=MatchChecks.getExportRowCount(client);
    log.info("Export phase complete, " + exportRowCount + " rows exported, waiting for import to drain...");
  }
  do {
    Thread.sleep(END_WAIT * 1000);
  }
 while (!RUNNING_STATE.equalsIgnoreCase(MatchChecks.getClusterState(client)) || importProgress.size() < 4 || importProgress.get(importProgress.size() - 1) > importProgress.get(importProgress.size() - 2) || importProgress.get(importProgress.size() - 1) > importProgress.get(importProgress.size() - 3) || importProgress.get(importProgress.size() - 1) > importProgress.get(importProgress.size() - 4));
  long[] importStatValues=MatchChecks.getImportValues(client);
  long mirrorRows=MatchChecks.getMirrorTableRowCount(config.alltypes,client);
  long importRows=MatchChecks.getImportTableRowCount(config.alltypes,client);
  long importRowCount=MatchChecks.getImportRowCount(client);
  int trial=3;
  while (!RUNNING_STATE.equalsIgnoreCase(MatchChecks.getClusterState(client)) || ((--trial > 0) && ((importStatValues[OUTSTANDING_REQUESTS] > 0) || (importRows < config.expected_rows)))) {
    Thread.sleep(PAUSE_WAIT * 1000);
    importStatValues=MatchChecks.getImportValues(client);
    mirrorRows=MatchChecks.getMirrorTableRowCount(config.alltypes,client);
    importRows=MatchChecks.getImportTableRowCount(config.alltypes,client);
    importRowCount=MatchChecks.getImportRowCount(client);
  }
  log.info("importer outstanding requests: " + importStatValues[OUTSTANDING_REQUESTS]);
  log.info("mirrorRows: " + mirrorRows);
  log.info("importRows: " + importRows);
  log.info("importRowCount: " + importRowCount);
  if (config.useexport) {
    log.info("exportRowCount: " + exportRowCount);
  }
  if (config.useexport) {
    log.info("Total rows exported: " + finalInsertCount);
    log.info("Unmatched Rows remaining in the export Mirror Table: " + mirrorRows);
    log.info("Unmatched Rows received from Kafka to Import Table (duplicate rows): " + importRows);
    if (mirrorRows != 0) {
      log.error(mirrorRows + " Rows are missing from the import stream, failing test");
      testResult=false;
    }
  }
  if ((exportRowCount != (importStatValues[SUCCESSES] + importStatValues[FAILURES])) && config.useexport) {
    log.error("Export count '" + exportRowCount + "' does not match import stats count '"+ (importStatValues[SUCCESSES] + importStatValues[FAILURES])+ "' test fails.");
    testResult=false;
  }
  if (!config.useexport) {
    testResult=MatchChecks.checkPounderResults(config.expected_rows,client);
  }
  endTest(testResult);
}
