{
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Setup & Initialization");
  System.out.println(HORIZONTAL_RULE);
  System.out.print(HORIZONTAL_RULE);
  System.out.println(" Starting Benchmark");
  System.out.println(HORIZONTAL_RULE);
  SecureRandom rnd=new SecureRandom();
  rnd.setSeed(System.identityHashCode(Thread.currentThread()));
  long icnt=0;
  try {
    System.out.println("Warming up...");
    final long warmupEndTime=System.currentTimeMillis() + (1000l * config.warmup);
    while (warmupEndTime > System.currentTimeMillis()) {
      long value=System.currentTimeMillis();
      long key=rnd.nextLong();
      exportProc.insertExport(key,value);
      icnt++;
    }
    benchmarkStartTS=System.currentTimeMillis();
    schedulePeriodicStats();
    System.out.println("starting data checker...");
    checkTimer=matchChecks.checkTimer(5000,client);
    System.out.println("\nRunning benchmark...");
    final long benchmarkEndTime=System.currentTimeMillis() + (1000l * config.duration);
    while (benchmarkEndTime > System.currentTimeMillis()) {
      long value=System.currentTimeMillis();
      long key=rnd.nextLong();
      exportProc.insertExport(key,value);
      icnt++;
    }
    exportMon.waitForStreamedAllocatedMemoryZero();
    importMon.waitForStreamedAllocatedMemoryZero();
    exportProc.insertFinal(-1,-1);
    System.out.println("Done waiting for import & export tables");
  }
  finally {
    System.out.println("Cancel periodic stats");
    statsTimer.cancel();
    finalInsertCount.addAndGet(icnt);
  }
}
