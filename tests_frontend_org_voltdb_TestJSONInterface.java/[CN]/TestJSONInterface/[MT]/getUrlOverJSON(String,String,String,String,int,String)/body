{
  URL jsonAPIURL=new URL(url);
  HttpURLConnection conn=(HttpURLConnection)jsonAPIURL.openConnection();
  conn.setRequestMethod("GET");
  conn.setDoOutput(true);
  if (user != null && password != null) {
    if (scheme.equalsIgnoreCase("hashed")) {
      MessageDigest md=MessageDigest.getInstance("SHA-1");
      byte hashedPasswordBytes[]=md.digest(password.getBytes("UTF-8"));
      String h=user + ":" + Encoder.hexEncode(hashedPasswordBytes);
      conn.setRequestProperty("Authorization","Hashed " + h);
    }
 else     if (scheme.equalsIgnoreCase("basic")) {
      conn.setRequestProperty("Authorization","Basic " + new String(Base64.encodeToString(new String(user + ":" + password).getBytes(),false)));
    }
  }
  conn.connect();
  BufferedReader in=null;
  try {
    if (conn.getInputStream() != null) {
      in=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
    }
  }
 catch (  IOException e) {
    if (conn.getErrorStream() != null) {
      in=new BufferedReader(new InputStreamReader(conn.getErrorStream(),"UTF-8"));
    }
  }
  if (in == null) {
    throw new Exception("Unable to read response from server");
  }
  String ct=conn.getContentType();
  assertTrue(ct.contains(expectedCt));
  StringBuilder decodedString=new StringBuilder();
  String line;
  while ((line=in.readLine()) != null) {
    decodedString.append(line);
  }
  in.close();
  in=null;
  int responseCode=conn.getResponseCode();
  String response=decodedString.toString();
  assertEquals(expectedCode,responseCode);
  try {
    conn.getInputStream().close();
    conn.disconnect();
  }
 catch (  Exception e) {
  }
  conn=null;
  return response;
}
