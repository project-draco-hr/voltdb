{
  try {
    String simpleSchema="CREATE TABLE foo (\n" + "    bar BIGINT NOT NULL,\n" + "    PRIMARY KEY (bar)\n"+ ");";
    File schemaFile=VoltProjectBuilder.writeStringToTempFile(simpleSchema);
    String schemaPath=schemaFile.getPath();
    schemaPath=URLEncoder.encode(schemaPath,"UTF-8");
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addSchema(schemaPath);
    builder.addPartitionInfo("foo","bar");
    builder.addProcedures(DelayProc.class);
    builder.setHTTPDPort(8095);
    builder.setUseDDLSchema(true);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"));
    assertTrue(success);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    String json=getUrlOverJSON("http://localhost:8095/deployment/users/",null,null,null,200,"application/json");
    assertEquals(json,"");
    getUrlOverJSON("http://localhost:8095/deployment/users/foo",null,null,null,404,"application/json");
    ObjectMapper mapper=new ObjectMapper();
    UsersType.User user=new UsersType.User();
    user.setName("foo");
    user.setPassword("foo");
    String map=mapper.writeValueAsString(user);
    Map<String,String> params=new HashMap<>();
    params.put("user",map);
    putUrlOverJSON("http://localhost:8095/deployment/users/foo/",null,null,null,201,"application/json",params);
    json=getUrlOverJSON("http://localhost:8095/deployment/users/",null,null,null,200,"application/json");
    JSONArray jarray=new JSONArray(json);
    assertEquals(jarray.length(),1);
    JSONObject jobj=jarray.getJSONObject(0);
    assertTrue(jobj.getString("id").contains("/deployment/users/foo"));
    assertTrue(jobj.getString("roles").equalsIgnoreCase("null"));
    user.setRoles("foo");
    map=mapper.writeValueAsString(user);
    params.put("user",map);
    postUrlOverJSON("http://localhost:8095/deployment/users/foo/",null,null,null,200,"application/json",params);
    json=getUrlOverJSON("http://localhost:8095/deployment/users/",null,null,null,200,"application/json");
    jarray=new JSONArray(json);
    assertEquals(jarray.length(),1);
    jobj=jarray.getJSONObject(0);
    assertTrue(jobj.getString("roles").equals("foo"));
    deleteUrlOverJSON("http://localhost:8095/deployment/users/foo/",null,null,null,204,"application/json");
    json=getUrlOverJSON("http://localhost:8095/deployment/users/",null,null,null,200,"application/json");
    assertEquals(json,"");
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
  }
}
