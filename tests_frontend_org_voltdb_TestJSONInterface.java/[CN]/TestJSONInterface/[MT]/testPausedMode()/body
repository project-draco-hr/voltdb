{
  try {
    String testSchema="CREATE TABLE foo (\n" + "  ival bigint default 23 not null, " + "  sval varchar(200) default 'foo', "+ "  PRIMARY KEY (ival)\n"+ ");";
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addLiteralSchema(testSchema);
    builder.addPartitionInfo("foo","ival");
    builder.addStmtProcedure("fooinsert","insert into foo values (?, ?);");
    builder.addStmtProcedure("foocount","select count(*) from foo;");
    builder.setHTTPDPort(8095);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"));
    assertTrue(success);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    int pkStart=0;
    pkStart=runPauseTests(pkStart,false,false);
    pkStart=runPauseTests(pkStart,false,true);
    ParameterSet pset=ParameterSet.emptyParameterSet();
    Response response=responseFromJSON(callProcOverJSON("@Pause",pset,null,null,false,true));
    assertTrue(response.status == ClientResponse.SUCCESS);
    pkStart=runPauseTests(pkStart,true,false);
    pkStart=runPauseTests(pkStart,true,true);
    pset=ParameterSet.emptyParameterSet();
    response=responseFromJSON(callProcOverJSON("@Resume",pset,null,null,false,true));
    assertTrue(response.status == ClientResponse.SUCCESS);
    pkStart=runPauseTests(pkStart,false,false);
    pkStart=runPauseTests(pkStart,false,true);
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
  }
}
