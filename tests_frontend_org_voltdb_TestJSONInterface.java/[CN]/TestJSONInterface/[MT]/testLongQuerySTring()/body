{
  try {
    String simpleSchema="CREATE TABLE foo (\n" + "    bar BIGINT NOT NULL,\n" + "    PRIMARY KEY (bar)\n"+ ");";
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addLiteralSchema(simpleSchema);
    builder.addPartitionInfo("foo","bar");
    builder.addProcedures(DelayProc.class);
    builder.setHTTPDPort(8095);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"));
    assertTrue(success);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    final StringBuilder s=new StringBuilder();
    s.append("Procedure=@Statistics&Parameters=[TABLE]&jsonpxx=");
    for (int i=0; i < 450000; i++) {
      s.append(i);
    }
    String query=s.toString();
    for (int i=0; i < 500; i++) {
      String response=callProcOverJSONRaw(query,200);
      System.out.println(response);
      Response r=responseFromJSON(response);
      assertEquals(ClientResponse.UNEXPECTED_FAILURE,r.status);
      ParameterSet pset=ParameterSet.fromArrayNoCopy("select * from foo");
      String responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
      System.out.println(responseJSON);
      r=responseFromJSON(responseJSON);
      assertEquals(ClientResponse.SUCCESS,r.status);
    }
    ParameterSet pset=ParameterSet.fromArrayNoCopy("select * from foo");
    String responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    System.out.println(responseJSON);
    Response response=responseFromJSON(responseJSON);
    System.out.println(response.statusString);
    assertEquals(ClientResponse.SUCCESS,response.status);
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
  }
}
