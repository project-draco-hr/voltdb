{
  try {
    String simpleSchema="CREATE TABLE foo (\n" + "    bar BIGINT NOT NULL,\n" + "    PRIMARY KEY (bar)\n"+ ");";
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addLiteralSchema(simpleSchema);
    builder.addPartitionInfo("foo","bar");
    builder.addProcedures(InsertProc.class);
    builder.addProcedures(LongReadProc.class);
    builder.setHTTPDPort(8095);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"));
    assertTrue(success);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    ParameterSet pset=null;
    int batchSize=10000;
    for (int i=0; i < 10; i++) {
      pset=ParameterSet.fromArrayNoCopy(i * batchSize,batchSize);
      String response=callProcOverJSON("TestJSONInterface$InsertProc",pset,null,null,false,false,200,ClientAuthScheme.HASH_SHA256);
      Response r=responseFromJSON(response);
      assertEquals(ClientResponse.SUCCESS,r.status);
    }
    pset=ParameterSet.fromArrayNoCopy(100000);
    String response=callProcOverJSON("TestJSONInterface$LongReadProc",pset,null,null,false,false,200,ClientAuthScheme.HASH_SHA256,1);
    Response r=responseFromJSON(response);
    assertEquals(ClientResponse.GRACEFUL_FAILURE,r.status);
    assertTrue(r.statusString.contains("Transaction Interrupted"));
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
  }
}
