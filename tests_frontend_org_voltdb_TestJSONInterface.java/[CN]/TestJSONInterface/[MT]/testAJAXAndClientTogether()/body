{
  try {
    String simpleSchema="CREATE TABLE foo (\n" + "    bar BIGINT NOT NULL,\n" + "    PRIMARY KEY (bar)\n"+ ");";
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addLiteralSchema(simpleSchema);
    builder.setHTTPDPort(8095);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"));
    assertTrue(success);
    VoltDB.Configuration config=new VoltDB.Configuration();
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    client=ClientFactory.createClient(new ClientConfig());
    client.createConnection("localhost");
    final AtomicLong fcnt=new AtomicLong(0);
    final AtomicLong scnt=new AtomicLong(0);
    final AtomicLong cfcnt=new AtomicLong(0);
    final AtomicLong cscnt=new AtomicLong(0);
    final int jsonRunnerCount=50;
    final int clientRunnerCount=50;
    final ParameterSet pset=ParameterSet.fromArrayNoCopy("select count(*) from foo");
    String responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    Response r=responseFromJSON(responseJSON);
    assertEquals(ClientResponse.SUCCESS,r.status);
class JSONRunner implements Runnable {
      @Override public void run(){
        try {
          String rresponseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
          System.out.println("Response: " + rresponseJSON);
          Response rr=responseFromJSON(rresponseJSON);
          assertEquals(ClientResponse.SUCCESS,rr.status);
          scnt.incrementAndGet();
        }
 catch (        Exception ex) {
          fcnt.incrementAndGet();
          ex.printStackTrace();
        }
      }
    }
class ClientRunner implements Runnable {
class Callback implements ProcedureCallback {
        @Override public void clientCallback(        ClientResponse clientResponse) throws Exception {
          if (clientResponse.getStatus() == ClientResponse.SUCCESS) {
            cscnt.incrementAndGet();
          }
 else {
            System.out.println("Client failed: " + clientResponse.getStatusString());
            cfcnt.incrementAndGet();
          }
        }
      }
      @Override public void run(){
        try {
          if (!client.callProcedure(new Callback(),"@AdHoc","SELECT count(*) from foo")) {
            cfcnt.decrementAndGet();
          }
        }
 catch (        Exception ex) {
          fcnt.incrementAndGet();
          ex.printStackTrace();
        }
      }
    }
    ExecutorService es=CoreUtils.getBoundedSingleThreadExecutor("runners",jsonRunnerCount);
    for (int i=0; i < jsonRunnerCount; i++) {
      es.submit(new JSONRunner());
    }
    ExecutorService ces=CoreUtils.getBoundedSingleThreadExecutor("crunners",clientRunnerCount);
    for (int i=0; i < clientRunnerCount; i++) {
      ces.submit(new ClientRunner());
    }
    es.shutdown();
    es.awaitTermination(1,TimeUnit.DAYS);
    assertEquals(jsonRunnerCount,scnt.get());
    ces.shutdown();
    ces.awaitTermination(1,TimeUnit.DAYS);
    client.drain();
    assertEquals(clientRunnerCount,cscnt.get());
    responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    r=responseFromJSON(responseJSON);
    assertEquals(ClientResponse.SUCCESS,r.status);
    ClientResponse resp=client.callProcedure("@AdHoc","SELECT count(*) from foo");
    assertEquals(ClientResponse.SUCCESS,resp.getStatus());
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
    if (client != null) {
      client.close();
    }
  }
}
