{
  String simpleSchema="create table blah (" + "ival bigint default 23 not null, " + "sval varchar(200) default 'foo', "+ "dateval timestamp, "+ "fval float, "+ "decval decimal, "+ "PRIMARY KEY(ival));";
  File schemaFile=VoltProjectBuilder.writeStringToTempFile(simpleSchema);
  String schemaPath=schemaFile.getPath();
  schemaPath=URLEncoder.encode(schemaPath,"UTF-8");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addSchema(schemaPath);
  builder.addPartitionInfo("blah","ival");
  builder.addStmtProcedure("Insert","insert into blah values (?,?,?,?,?);");
  builder.addProcedures(CrazyBlahProc.class);
  boolean success=builder.compile("json.jar");
  assertTrue(success);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_httpAdminPort=8095;
  config.m_pathToCatalog="json.jar";
  ServerThread server=new ServerThread(config);
  server.start();
  server.waitForInitialization();
  ParameterSet pset=new ParameterSet();
  pset.setParameters(1,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),new BigDecimal[]{},new TimestampType(System.currentTimeMillis()));
  String paramsInJSON=pset.toJSONString();
  JSONObject jobj=new JSONObject("{ params: " + paramsInJSON + " }");
  System.out.println(jobj.toString(2));
  HashMap<String,String> params=new HashMap<String,String>();
  params.put("Procedure","CrazyBlahProc");
  params.put("Parameters",paramsInJSON);
  String varString=getHTTPVarString(params);
  URL jsonAPIURL=new URL("http://localhost:8095/api/");
  HttpURLConnection conn=(HttpURLConnection)jsonAPIURL.openConnection();
  conn.setDoOutput(true);
  conn.setRequestMethod("POST");
  OutputStreamWriter out=new OutputStreamWriter(conn.getOutputStream());
  out.write(varString);
  out.close();
  BufferedReader in=null;
  try {
    if (conn.getInputStream() != null) {
      in=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    }
  }
 catch (  IOException e) {
    if (conn.getErrorStream() != null) {
      in=new BufferedReader(new InputStreamReader(conn.getErrorStream()));
    }
  }
  if (in == null) {
    throw new Exception("Unable to read response from server");
  }
  StringBuffer decodedString=new StringBuffer();
  String line;
  while ((line=in.readLine()) != null) {
    decodedString.append(line);
  }
  in.close();
  int responseCode=conn.getResponseCode();
  String response=decodedString.toString();
  assertEquals(200,responseCode);
  System.out.println(response);
  JSONObject jsonObj=new JSONObject(response);
  JSONArray results=jsonObj.getJSONArray("results");
  assertEquals(3,results.length());
  JSONObject table=results.getJSONObject(0);
  JSONArray data=table.getJSONArray("data");
  assertEquals(1,data.length());
  JSONArray row=data.getJSONArray(0);
  assertEquals(1,row.length());
  long value=row.getLong(0);
  assertEquals(1,value);
  System.out.println(responseCode);
  System.out.println(decodedString.toString());
  server.shutdown();
  server.join();
}
