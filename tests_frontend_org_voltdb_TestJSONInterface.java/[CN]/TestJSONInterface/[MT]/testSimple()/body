{
  try {
    String simpleSchema="create table blah (" + "ival bigint default 23 not null, " + "sval varchar(200) default 'foo', "+ "dateval timestamp, "+ "fval float, "+ "decval decimal, "+ "PRIMARY KEY(ival));";
    File schemaFile=VoltProjectBuilder.writeStringToTempFile(simpleSchema);
    String schemaPath=schemaFile.getPath();
    schemaPath=URLEncoder.encode(schemaPath,"UTF-8");
    VoltDB.Configuration config=new VoltDB.Configuration();
    VoltProjectBuilder builder=new VoltProjectBuilder();
    builder.addSchema(schemaPath);
    builder.addPartitionInfo("blah","ival");
    builder.addStmtProcedure("Insert","insert into blah values (?,?,?,?,?);");
    builder.addProcedures(CrazyBlahProc.class);
    builder.setHTTPDPort(10777);
    boolean success=builder.compile(Configuration.getPathToCatalogForTest("json.jar"),1,1,0,21213,false);
    assertTrue(success);
    config.m_pathToCatalog=config.setPathToCatalogForTest("json.jar");
    config.m_pathToDeployment=builder.getPathToDeployment();
    server=new ServerThread(config);
    server.start();
    server.waitForInitialization();
    ParameterSet pset;
    String responseJSON;
    Response response;
    pset=ParameterSet.fromArrayNoCopy(1,"hello",new TimestampType(System.currentTimeMillis()),5.0,"5.0");
    responseJSON=callProcOverJSON("Insert",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    assertTrue(response.status == ClientResponse.SUCCESS);
    responseJSON=callProcOverJSON("Insert",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    assertTrue(response.status != ClientResponse.SUCCESS);
    pset=ParameterSet.fromArrayNoCopy(1,5,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),new BigDecimal(5),new BigDecimal[]{},new TimestampType(System.currentTimeMillis()));
    responseJSON=callProcOverJSON("CrazyBlahProc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    assertEquals(ClientResponse.SUCCESS,response.status);
    JSONObject jsonObj=new JSONObject(responseJSON);
    JSONArray results=jsonObj.getJSONArray("results");
    assertEquals(4,response.results.length);
    JSONObject table=results.getJSONObject(0);
    JSONArray data=table.getJSONArray("data");
    assertEquals(1,data.length());
    JSONArray row=data.getJSONArray(0);
    assertEquals(1,row.length());
    long value=row.getLong(0);
    assertEquals(1,value);
    java.sql.Timestamp ts=new java.sql.Timestamp(System.currentTimeMillis());
    ts.setNanos(123456000);
    pset=ParameterSet.fromArrayNoCopy(1,5,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),new BigDecimal(5),new BigDecimal[]{},ts.toString());
    responseJSON=callProcOverJSON("CrazyBlahProc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    assertEquals(ClientResponse.SUCCESS,response.status);
    response.results[3].advanceRow();
    System.out.println(response.results[3].getTimestampAsTimestamp(0).getTime());
    assertEquals(123456,response.results[3].getTimestampAsTimestamp(0).getTime() % 1000000);
    pset=ParameterSet.fromArrayNoCopy(1,VoltType.NULL_SMALLINT,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),new BigDecimal(5),new BigDecimal[]{},new TimestampType(System.currentTimeMillis()));
    responseJSON=callProcOverJSON("CrazyBlahProc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    assertFalse(response.status == ClientResponse.SUCCESS);
    pset=ParameterSet.fromArrayNoCopy(1,Long.MAX_VALUE - 100,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),new BigDecimal(5),new BigDecimal[]{},new TimestampType(System.currentTimeMillis()));
    responseJSON=callProcOverJSON("CrazyBlahProc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    assertFalse(response.status == ClientResponse.SUCCESS);
    pset=ParameterSet.fromArrayNoCopy(1,4,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),5,new BigDecimal[]{},new TimestampType(System.currentTimeMillis()));
    responseJSON=callProcOverJSON("CrazyBlahProc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    System.out.println(response.statusString);
    assertEquals(ClientResponse.SUCCESS,response.status);
    pset=ParameterSet.fromArrayNoCopy(1,4,new double[]{1.5,6.0,4},new VoltTable(new VoltTable.ColumnInfo("foo",VoltType.BIGINT)),5,new BigDecimal[]{},null);
    responseJSON=callProcOverJSON("CrazyBlahProc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    System.out.println(response.statusString);
    assertEquals(ClientResponse.SUCCESS,response.status);
    responseJSON=callProcOverJSONRaw("Procedure=@Statistics&Parameters=[TABLE]&jsonp=fooBar",200);
    System.out.println(responseJSON);
    assertTrue(responseJSON.startsWith("fooBar("));
    pset=ParameterSet.fromArrayNoCopy("select * from blah");
    responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    System.out.println(response.statusString);
    assertEquals(ClientResponse.SUCCESS,response.status);
    pset=ParameterSet.fromArrayNoCopy("insert into blah values (974599638818488300, NULL, NULL, NULL, NULL);");
    responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    System.out.println(response.statusString);
    assertEquals(ClientResponse.SUCCESS,response.status);
    pset=ParameterSet.fromArrayNoCopy("select * from blah where ival = 974599638818488300;");
    responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    System.out.println(responseJSON);
    response=responseFromJSON(responseJSON);
    System.out.println(response.statusString);
    assertEquals(ClientResponse.SUCCESS,response.status);
    assertEquals(1,response.results.length);
    assertEquals(1,response.results[0].getRowCount());
    pset=ParameterSet.emptyParameterSet();
    responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    assertTrue(responseJSON.contains("Adhoc system procedure requires at least the query parameter."));
    pset=ParameterSet.fromArrayNoCopy("select * from blah","foo","bar");
    responseJSON=callProcOverJSON("@AdHoc",pset,null,null,false);
    assertTrue(responseJSON.contains("Incorrect number of parameters passed: expected 0, passed 2"));
  }
  finally {
    if (server != null) {
      server.shutdown();
      server.join();
    }
    server=null;
  }
}
