{
  for (byte ii=0; ii < 32; ii++) {
    StreamBlock sb=getStreamBlockWithFill(ii);
    m_sbq.offer(sb);
    if (ii == 2) {
      m_sbq.poll().deleteContent();
      m_sbq.poll().deleteContent();
    }
  }
  long weirdSizeValue=((1024 * 1024 * 2 + 12) * 30);
  assertEquals(m_sbq.sizeInBytes(),weirdSizeValue);
  Iterator<StreamBlock> iter=m_sbq.iterator();
  ArrayList<StreamBlock> blocks=new ArrayList<StreamBlock>();
  long uso=1024 * 1024 * 6;
  for (int ii=2; ii < 32; ii++) {
    assertTrue(iter.hasNext());
    StreamBlock sb=iter.next();
    blocks.add(sb);
    assertEquals(sb.uso(),uso);
    uso+=1024 * 1024 * 2;
    assertEquals(sb.totalUso(),1024 * 1024 * 2);
    ByteBuffer buf=sb.unreleasedBuffer();
    buf.order(ByteOrder.LITTLE_ENDIAN);
    assertEquals(buf.getInt(),1024 * 1024 * 2);
    while (buf.hasRemaining()) {
      assertEquals(buf.get(),ii);
    }
  }
  boolean threw=false;
  try {
    iter.next();
  }
 catch (  NoSuchElementException e) {
    threw=true;
  }
  assertTrue(threw);
  assertEquals(m_sbq.sizeInBytes(),weirdSizeValue);
  iter=m_sbq.iterator();
  while (iter.hasNext()) {
    iter.next();
    iter.remove();
  }
  for (  StreamBlock sb : blocks) {
    sb.deleteContent();
  }
  assertEquals(m_sbq.sizeInBytes(),0);
  assertTrue(m_sbq.isEmpty());
}
