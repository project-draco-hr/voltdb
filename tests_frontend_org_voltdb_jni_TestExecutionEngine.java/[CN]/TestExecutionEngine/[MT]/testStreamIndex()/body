{
  sourceEngine.loadCatalog(0,m_catalog.serialize());
  final AtomicReference<ExecutionEngine> destinationEngine=new AtomicReference<ExecutionEngine>();
  final byte configBytes[]=LegacyHashinator.getConfigureBytes(1);
  Thread destEEThread=new Thread(){
    @Override public void run(){
      destinationEngine.set(new ExecutionEngineJNI(CLUSTER_ID,NODE_ID,0,0,"",100,new HashinatorConfig(HashinatorType.LEGACY,configBytes,0,0)));
    }
  }
;
  destEEThread.start();
  destEEThread.join();
  destinationEngine.get().loadCatalog(0,m_catalog.serialize());
  int STOCK_TABLEID=stockTableId(m_catalog);
  loadTestTables(sourceEngine,m_catalog);
  SnapshotPredicates predicates=new SnapshotPredicates(-1);
  predicates.addPredicate(new HashRangeExpressionBuilder().put(0x00000000,0x7fffffff).build(0),true);
  sourceEngine.activateTableStream(STOCK_TABLEID,TableStreamType.ELASTIC_INDEX,Long.MAX_VALUE,predicates.toBytes());
  final BBContainer origin=DBBPool.allocateDirect(1024 * 1024 * 2);
  origin.b().clear();
  BBContainer container=new BBContainer(origin.b()){
    @Override public void discard(){
      checkDoubleFree();
      origin.discard();
    }
  }
;
  try {
    List<BBContainer> output=new ArrayList<BBContainer>();
    output.add(container);
    assertEquals(0,sourceEngine.tableStreamSerializeMore(STOCK_TABLEID,TableStreamType.ELASTIC_INDEX,output).getSecond()[0]);
  }
  finally {
    container.discard();
  }
}
