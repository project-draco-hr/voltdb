{
  final int sourceId=0;
  final int destinationId=32;
  final AtomicReference<Boolean> sourceCompleted=new AtomicReference<Boolean>(false);
  final AtomicReference<Boolean> destinationCompleted=new AtomicReference<Boolean>(false);
  final Catalog catalog=new Catalog();
  catalog.execute(LoadCatalogToString.THE_CATALOG);
  sourceEngine.loadCatalog(catalog.serialize());
  final ExecutionEngine destinationEngine=new ExecutionEngineJNI(null,CLUSTER_ID,NODE_ID,destinationId,destinationId,"");
  destinationEngine.loadCatalog(catalog.serialize());
  int WAREHOUSE_TABLEID=warehouseTableId(catalog);
  int STOCK_TABLEID=stockTableId(catalog);
  loadTestTables(catalog);
  final HashMap<Pair<String,Integer>,HashSet<Integer>> tablesAndDestinations=new HashMap<Pair<String,Integer>,HashSet<Integer>>();
  HashSet<Integer> destinations=new HashSet<Integer>();
  destinations.add(destinationId);
  tablesAndDestinations.put(Pair.of("STOCK",STOCK_TABLEID),destinations);
  tablesAndDestinations.put(Pair.of("WAREHOUSE",WAREHOUSE_TABLEID),destinations);
  final MockMailbox sourceMailbox=new MockMailbox();
  MockMailbox.registerMailbox(sourceId,sourceMailbox);
  final Runnable onSourceCompletion=new Runnable(){
    @Override public void run(){
      sourceCompleted.set(true);
    }
  }
;
  final MessageHandler mh=new MessageHandler(){
    @Override public void handleMessage(    VoltMessage message){
      fail();
    }
  }
;
  Thread sourceThread=new Thread("Source thread"){
    @Override public void run(){
      try {
        VoltMessage message=sourceMailbox.recvBlocking();
        assertTrue(message != null);
        assertTrue(message instanceof RecoveryMessage);
        RecoveryMessage rm=(RecoveryMessage)message;
        SocketChannel sc=RecoverySiteProcessorSource.createRecoveryConnection(rm.address(),rm.port());
        final RecoverySiteProcessorSource sourceProcessor=new RecoverySiteProcessorSource(rm.txnId(),rm.sourceSite(),tablesAndDestinations,sourceEngine,sourceMailbox,sourceId,onSourceCompletion,mh,sc);
        sourceProcessor.doRecoveryWork(0);
      }
 catch (      java.io.IOException e) {
        e.printStackTrace();
        return;
      }
    }
  }
;
  sourceThread.start();
  final HashMap<Pair<String,Integer>,Integer> tablesAndSources=new HashMap<Pair<String,Integer>,Integer>();
  tablesAndSources.put(Pair.of("STOCK",STOCK_TABLEID),sourceId);
  tablesAndSources.put(Pair.of("WAREHOUSE",WAREHOUSE_TABLEID),sourceId);
  final MockMailbox destinationMailbox=new MockMailbox();
  MockMailbox.registerMailbox(destinationId,destinationMailbox);
  final Runnable onDestinationCompletion=new Runnable(){
    @Override public void run(){
      destinationCompleted.set(true);
    }
  }
;
  Thread destinationThread=new Thread("Destination thread"){
    @Override public void run(){
      RecoverySiteProcessorDestination destinationProcess=new RecoverySiteProcessorDestination(tablesAndSources,destinationEngine,destinationMailbox,destinationId,0,onDestinationCompletion,mh);
      destinationProcess.doRecoveryWork(-1);
      destinationProcess.doRecoveryWork(0);
      assert(destinationCompleted.get());
    }
  }
;
  destinationThread.start();
  destinationThread.join();
  sourceThread.join();
  assertEquals(sourceEngine.tableHashCode(STOCK_TABLEID),destinationEngine.tableHashCode(STOCK_TABLEID));
  assertEquals(sourceEngine.tableHashCode(WAREHOUSE_TABLEID),destinationEngine.tableHashCode(WAREHOUSE_TABLEID));
  assertEquals(200,sourceEngine.serializeTable(WAREHOUSE_TABLEID).getRowCount());
  assertEquals(1000,sourceEngine.serializeTable(STOCK_TABLEID).getRowCount());
  assertEquals(200,destinationEngine.serializeTable(WAREHOUSE_TABLEID).getRowCount());
  assertEquals(1000,destinationEngine.serializeTable(STOCK_TABLEID).getRowCount());
}
