{
  final Catalog catalog=new Catalog();
  catalog.execute(LoadCatalogToString.THE_CATALOG);
  sourceEngine.loadCatalog(catalog.serialize());
  ExecutionEngine destinationEngine=new ExecutionEngineJNI(null,CLUSTER_ID,NODE_ID,0,0,"");
  destinationEngine.loadCatalog(catalog.serialize());
  int WAREHOUSE_TABLEID=warehouseTableId(catalog);
  int STOCK_TABLEID=stockTableId(catalog);
  loadTestTables(sourceEngine,catalog);
  sourceEngine.activateTableStream(WAREHOUSE_TABLEID,TableStreamType.RECOVERY);
  sourceEngine.activateTableStream(STOCK_TABLEID,TableStreamType.RECOVERY);
  BBContainer origin=DBBPool.allocateDirect(1024 * 1024 * 2);
  try {
    origin.b.clear();
    long address=org.voltdb.utils.DBBPool.getBufferAddress(origin.b);
    BBContainer container=new BBContainer(origin.b,address){
      @Override public void discard(){
      }
    }
;
    int serialized=sourceEngine.tableStreamSerializeMore(container,WAREHOUSE_TABLEID,TableStreamType.RECOVERY);
    assertTrue(serialized > 0);
    container.b.limit(serialized);
    destinationEngine.processRecoveryMessage(container.b,container.address);
    serialized=sourceEngine.tableStreamSerializeMore(container,WAREHOUSE_TABLEID,TableStreamType.RECOVERY);
    assertEquals(21,serialized);
    assertEquals(RecoveryMessageType.Complete.ordinal(),container.b.get());
    assertEquals(WAREHOUSE_TABLEID,container.b.getInt());
    assertEquals(sourceEngine.tableHashCode(WAREHOUSE_TABLEID),destinationEngine.tableHashCode(WAREHOUSE_TABLEID));
    container.b.clear();
    serialized=sourceEngine.tableStreamSerializeMore(container,STOCK_TABLEID,TableStreamType.RECOVERY);
    assertTrue(serialized > 0);
    container.b.limit(serialized);
    destinationEngine.processRecoveryMessage(container.b,container.address);
    serialized=sourceEngine.tableStreamSerializeMore(container,STOCK_TABLEID,TableStreamType.RECOVERY);
    assertEquals(21,serialized);
    assertEquals(RecoveryMessageType.Complete.ordinal(),container.b.get());
    assertEquals(STOCK_TABLEID,container.b.getInt());
    assertEquals(sourceEngine.tableHashCode(STOCK_TABLEID),destinationEngine.tableHashCode(STOCK_TABLEID));
  }
  finally {
    origin.discard();
  }
}
