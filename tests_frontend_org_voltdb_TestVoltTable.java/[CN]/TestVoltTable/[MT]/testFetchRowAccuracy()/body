{
  final int ROW_COUNT=10000;
  TableHelper th=new TableHelper();
  RandomTable rt=th.getTotallyRandomTable("FOO");
  th.randomFill(rt.table,ROW_COUNT,128);
  assertTrue(rt.table.getRowCount() == ROW_COUNT);
  VoltTable t=rt.table;
  Object[] results=new Object[ROW_COUNT];
  t.resetRowPosition();
  int i=0;
  while (t.advanceRow()) {
    VoltTableRow r=t.fetchRow(i);
    Object lhs=r.get(0,r.getColumnType(0));
    Object rhs=t.get(0,t.getColumnType(0));
    if (lhs == null) {
      assert(rhs == null);
    }
 else {
      assertTrue(lhs.equals(rhs));
    }
    results[i++]=lhs;
  }
  Random rand=new Random();
  for (i=0; i < 1000; i++) {
    int randIndex=rand.nextInt(ROW_COUNT);
    VoltTableRow r=t.fetchRow(randIndex);
    Object lhs=r.get(0,r.getColumnType(0));
    Object rhs=results[randIndex];
    if (lhs == null) {
      assert(rhs == null);
    }
 else {
      assertTrue(lhs.equals(rhs));
    }
  }
  for (i=0; i < 1000; i++) {
    int randIndex=rand.nextInt(ROW_COUNT * 3 / 2) - (ROW_COUNT / 4);
    try {
      VoltTableRow r=t.fetchRow(randIndex);
      assertTrue(randIndex >= 0);
      assertTrue(randIndex < ROW_COUNT);
      Object lhs=r.get(0,r.getColumnType(0));
      Object rhs=results[randIndex];
      if (lhs == null) {
        assert(rhs == null);
      }
 else {
        assertTrue(lhs.equals(rhs));
      }
    }
 catch (    Exception e) {
      assertTrue((randIndex < 0) || (randIndex >= ROW_COUNT));
    }
  }
}
