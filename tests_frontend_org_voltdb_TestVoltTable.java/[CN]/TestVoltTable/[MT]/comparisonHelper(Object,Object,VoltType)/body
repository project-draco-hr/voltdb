{
switch (vt) {
case TINYINT:
    Byte b1=(Byte)lhs;
  Byte b2=(Byte)rhs;
return b1.byteValue() == b2.byteValue();
case SMALLINT:
Short s1=(Short)lhs;
Short s2=(Short)rhs;
return s1.shortValue() == s2.shortValue();
case INTEGER:
Integer i1=(Integer)lhs;
Integer i2=(Integer)rhs;
return i1.intValue() == i2.intValue();
case BIGINT:
Long l1=(Long)lhs;
Long l2=(Long)rhs;
return l1.longValue() == l2.longValue();
case FLOAT:
Double d1=(Double)lhs;
Double d2=(Double)rhs;
return (d1.compareTo(d2) == 0);
case STRING:
if (lhs == null && rhs == null) return true;
if (lhs == VoltType.NULL_STRING_OR_VARBINARY && rhs == null) return true;
return ((String)lhs).equals(rhs);
case VARBINARY:
if (lhs == null && rhs == null) return true;
if (lhs == VoltType.NULL_STRING_OR_VARBINARY && rhs == null) return true;
return Arrays.equals((byte[])lhs,(byte[])rhs);
case TIMESTAMP:
if (lhs == null && rhs == null) return true;
if (lhs == VoltType.NULL_TIMESTAMP && rhs == null) return true;
return ((TimestampType)lhs).equals(rhs);
case DECIMAL:
if (lhs == null && rhs == null) return true;
if (lhs == VoltType.NULL_DECIMAL && rhs == null) return true;
if (lhs == null || rhs == null) return false;
return ((BigDecimal)lhs).equals(rhs);
}
return false;
}
