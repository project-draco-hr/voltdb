{
  VoltTable vt=new VoltTable(new ColumnInfo("gg",VoltType.GEOGRAPHY));
  addAllPrimitives(vt,new Class[]{GeographyValue.class});
  VoltTable vtCopy=roundTrip(vt);
  assertEquals(2,vt.getRowCount());
  assertEquals(2,vtCopy.getRowCount());
  assertTrue(vt.advanceRow());
  assertTrue(vtCopy.advanceRow());
  assertNull(vt.getGeographyValue(0));
  assertNull(vtCopy.getGeographyValue(0));
  assertNull(vt.get(0,VoltType.GEOGRAPHY));
  assertTrue(vt.wasNull());
  assertTrue(vtCopy.wasNull());
  assertTrue(vt.advanceRow());
  assertTrue(vtCopy.advanceRow());
  String wkt=GEOG_VALUE.toString();
  assertEquals(wkt,vt.getGeographyValue(0).toString());
  assertEquals(wkt,vtCopy.getGeographyValue(0).toString());
  assertEquals(wkt,vt.getGeographyValue("gg").toString());
  assertEquals(wkt,vt.get(0,VoltType.GEOGRAPHY).toString());
  byte[] raw=vt.getRaw(0);
  assertEquals(GEOG_VALUE.getLengthInBytes(),raw.length - 4);
  byte[] rawCopy=vtCopy.getRaw(0);
  assertEquals(raw.length,rawCopy.length);
  for (int i=0; i < rawCopy.length; ++i) {
    assertEquals("raw geography not equal to copy at byte " + i,raw[i],rawCopy[i]);
  }
  assertFalse(vt.advanceRow());
  assertFalse(vtCopy.advanceRow());
}
