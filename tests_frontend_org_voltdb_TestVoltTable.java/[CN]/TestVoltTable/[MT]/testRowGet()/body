{
  byte b1=(byte)1;
  short s1=(short)2;
  int i1=3;
  long l1=Long.MIN_VALUE + 1;
  double f1=3.5;
  String S1="A";
  TimestampType d1=new TimestampType(0);
  BigDecimal B1=new BigDecimal(7654321).setScale(VoltDecimalHelper.kDefaultScale);
  Object content[]={b1,S1,i1,l1,f1,s1,d1,B1,b1};
  Object nulls[]={VoltType.NULL_TINYINT,VoltType.NULL_STRING_OR_VARBINARY,VoltType.NULL_INTEGER,VoltType.NULL_BIGINT,VoltType.NULL_FLOAT,VoltType.NULL_SMALLINT,VoltType.NULL_TIMESTAMP,VoltType.NULL_DECIMAL,VoltType.NULL_TINYINT};
  VoltType types[]={VoltType.TINYINT,VoltType.STRING,VoltType.INTEGER,VoltType.BIGINT,VoltType.FLOAT,VoltType.SMALLINT,VoltType.TIMESTAMP,VoltType.DECIMAL,VoltType.TINYINT};
  VoltTable tt=new VoltTable(new ColumnInfo("tinyint",types[0]),new ColumnInfo("string",types[1]),new ColumnInfo("integer",types[2]),new ColumnInfo("bigint",types[3]),new ColumnInfo("float",types[4]),new ColumnInfo("smallint",types[5]),new ColumnInfo("timestamp",types[6]),new ColumnInfo("decimal",types[7]),new ColumnInfo("tinyint",types[0]));
  for (int i=0; i < content.length; ++i) {
    Object[] vals=new Object[content.length];
    ;
    for (int k=0; k < content.length; k++) {
      if (i == k)       vals[k]=nulls[k];
 else       vals[k]=content[k];
    }
    System.out.println("Adding row: " + i);
    tt.addRow(vals);
  }
  System.out.println(tt);
  int rowcounter=0;
  while (tt.advanceRow()) {
    for (int k=0; k < content.length; k++) {
      System.out.println("verifying row:" + rowcounter + " col:"+ k);
      if (rowcounter == k) {
        boolean result=comparisonHelper(nulls[k],tt.get(k,types[k]),types[k]);
        assertTrue(result);
        assertTrue(tt.wasNull());
      }
 else {
        Object got=tt.get(k,types[k]);
        System.out.println("Type: " + types[k]);
        System.out.println("Expecting: " + content[k]);
        System.out.println("Got: " + got);
        assertTrue(comparisonHelper(content[k],got,types[k]));
        assertFalse(tt.wasNull());
      }
    }
    rowcounter++;
  }
  assertEquals(rowcounter,content.length);
}
