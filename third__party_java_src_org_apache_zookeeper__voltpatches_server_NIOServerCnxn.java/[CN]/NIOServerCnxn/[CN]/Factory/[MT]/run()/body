{
  while (!ss.socket().isClosed()) {
    try {
      selector.select(1000);
      Set<SelectionKey> selected;
synchronized (this) {
        selected=selector.selectedKeys();
      }
      ArrayList<SelectionKey> selectedList=new ArrayList<SelectionKey>(selected);
      Collections.shuffle(selectedList);
      for (      SelectionKey k : selectedList) {
        if ((k.readyOps() & SelectionKey.OP_ACCEPT) != 0) {
          SocketChannel sc=((ServerSocketChannel)k.channel()).accept();
          InetAddress ia=sc.socket().getInetAddress();
          int cnxncount=getClientCnxnCount(ia);
          if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns) {
            LOG.warn("Too many connections from " + ia + " - max is "+ maxClientCnxns);
            sc.close();
          }
 else {
            LOG.info("Accepted socket connection from " + sc.socket().getRemoteSocketAddress());
            sc.configureBlocking(false);
            SelectionKey sk=sc.register(selector,SelectionKey.OP_READ);
            NIOServerCnxn cnxn=createConnection(sc,sk);
            sk.attach(cnxn);
            addCnxn(cnxn);
          }
        }
 else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {
          NIOServerCnxn c=(NIOServerCnxn)k.attachment();
          c.doIO(k);
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Unexpected ops in select " + k.readyOps());
          }
        }
      }
      selected.clear();
    }
 catch (    RuntimeException e) {
      LOG.warn("Ignoring unexpected runtime exception",e);
    }
catch (    Exception e) {
      LOG.warn("Ignoring exception",e);
    }
  }
  clear();
  LOG.debug("NIOServerCnxn factory exited run method");
}
