def use_setuptools(version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir, download_delay=15):
    "Automatically find/download setuptools and make it available on sys.path\n\n    `version` should be a valid setuptools version number that is available\n    as an egg for download under the `download_base` URL (which should end with\n    a '/').  `to_dir` is the directory where setuptools will be downloaded, if\n    it is not already available.  If `download_delay` is specified, it should\n    be the number of seconds that will be paused before initiating a download,\n    should one be required.  If an older version of setuptools is installed,\n    this routine will print a message to ``sys.stderr`` and raise SystemExit in\n    an attempt to abort the calling script.\n    "
    was_imported = (('pkg_resources' in sys.modules) or ('setuptools' in sys.modules))

    def do_download():
        egg = download_setuptools(version, download_base, to_dir, download_delay)
        sys.path.insert(0, egg)
        import setuptools
        setuptools.bootstrap_install_from = egg
    try:
        import pkg_resources
    except ImportError:
        return do_download()
    try:
        pkg_resources.require(('setuptools>=' + version))
        return
    except pkg_resources.VersionConflict as e:
        if was_imported:
            print  >> sys.stderr, ("The required version of setuptools (>=%s) is not available, and\ncan't be installed while this script is running. Please install\n a more recent version first, using 'easy_install -U setuptools'.\n\n(Currently using %r)" % (version, e.args[0]))
            sys.exit(2)
    except pkg_resources.DistributionNotFound:
        pass
    del pkg_resources, sys.modules['pkg_resources']
    return do_download()
