{
  long ts1_millis=1346794571099L;
  long ts2_millis=8503056615029L;
  String simpleSchema=String.format("create table blah (" + "ival bigint default 0 not null, " + "ts timestamp default %d, "+ "PRIMARY KEY(ival));",ts1_millis);
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema(simpleSchema);
  builder.addPartitionInfo("blah","ival");
  builder.addStmtProcedure("InsertFull","insert into blah values (?, ?);",null);
  builder.addStmtProcedure("InsertDefault","insert into blah (ival) values (?);",null);
  boolean success=builder.compile(Configuration.getPathToCatalogForTest("hsqldbbin.jar"),1,1,0);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),Configuration.getPathToCatalogForTest("hsqldbbin.xml"));
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=Configuration.getPathToCatalogForTest("hsqldbbin.jar");
  config.m_pathToDeployment=Configuration.getPathToCatalogForTest("hsqldbbin.xml");
  config.m_backend=BackendTarget.HSQLDB_BACKEND;
  ServerThread localServer=new ServerThread(config);
  localServer.start();
  localServer.waitForInitialization();
  Client client=ClientFactory.createClient();
  client.createConnection("localhost");
  ClientResponse cr;
  VoltTable vt;
  cr=client.callProcedure("InsertDefault",1);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("InsertFull",2,ts2_millis * 1000);
  assertTrue(cr.getStatus() == ClientResponse.SUCCESS);
  cr=client.callProcedure("@AdHoc","SELECT ts FROM blah WHERE ival = 1;");
  vt=cr.getResults()[0];
  assertEquals(1,vt.getRowCount());
  assertTrue(vt.advanceRow());
  assertEquals(ts1_millis * 1000,vt.getTimestampAsLong(0));
  cr=client.callProcedure("@AdHoc","SELECT ts FROM blah WHERE ival = 2;");
  vt=cr.getResults()[0];
  assertEquals(1,vt.getRowCount());
  assertTrue(vt.advanceRow());
  assertEquals(ts2_millis * 1000,vt.getTimestampAsLong(0));
  VoltDB.instance().shutdown(localServer);
}
