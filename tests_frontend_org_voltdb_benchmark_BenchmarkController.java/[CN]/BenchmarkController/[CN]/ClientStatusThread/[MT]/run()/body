{
  long resultsToRead=m_pollCount * m_clients.size();
  while (resultsToRead > 0) {
    ProcessSetManager.OutputLine line=m_clientPSM.nextBlocking();
    if (line.stream == ProcessSetManager.Stream.STDERR) {
      continue;
    }
    String[] parts=line.value.split(",");
    for (int i=0; i < parts.length; i++)     parts[i]=parts[i].trim();
    if (parts.length < 2) {
      if (line.value.startsWith("Listening for transport dt_socket at address:") || line.value.contains("Attempting to load") || line.value.contains("Successfully loaded native VoltDB library")) {
        benchmarkLog.info(line.processName + ": " + line.value+ "\n");
        continue;
      }
      m_clientPSM.killProcess(line.processName);
      LogKeys logkey=LogKeys.benchmark_BenchmarkController_ProcessReturnedMalformedLine;
      benchmarkLog.l7dlog(Level.ERROR,logkey.name(),new Object[]{line.processName,line.value},null);
      continue;
    }
    long time=Long.parseLong(parts[0]);
    String status=parts[1];
    if (status.equals("READY")) {
      LogKeys logkey=LogKeys.benchmark_BenchmarkController_GotReadyMessage;
      benchmarkLog.l7dlog(Level.INFO,logkey.name(),new Object[]{line.processName},null);
      benchmarkLog.info("Got ready message.");
      m_clientsNotReady.decrementAndGet();
    }
 else     if (status.equals("ERROR")) {
      m_clientPSM.killProcess(line.processName);
      LogKeys logkey=LogKeys.benchmark_BenchmarkController_ReturnedErrorMessage;
      benchmarkLog.l7dlog(Level.ERROR,logkey.name(),new Object[]{line.processName,parts[2]},null);
      benchmarkLog.error("(" + line.processName + ") Returned error message:\n"+ " \""+ parts[2]+ "\"\n");
      continue;
    }
 else     if (status.equals("RUNNING")) {
      HashMap<String,Long> results=new HashMap<String,Long>();
      if ((parts.length % 2) != 0) {
        m_clientPSM.killProcess(line.processName);
        LogKeys logkey=LogKeys.benchmark_BenchmarkController_ProcessReturnedMalformedLine;
        benchmarkLog.l7dlog(Level.ERROR,logkey.name(),new Object[]{line.processName,line.value},null);
        continue;
      }
      for (int i=2; i < parts.length; i+=2) {
        String txnName=parts[i];
        long txnCount=Long.valueOf(parts[i + 1]);
        results.put(txnName,txnCount);
      }
      resultsToRead--;
      setPollResponseInfo(line.processName,time,results,null);
    }
  }
}
