{
  long interval=10000;
  long duration=60000;
  int hostCount=1;
  int sitesPerHost=2;
  int clientCount=1;
  int processesPerClient=1;
  String remotePath="voltbin/";
  String remoteUser=null;
  String clientClassname=m_tpccClientClassName;
  boolean listenForDebugger=false;
  int serverHeapSize=2048;
  int clientHeapSize=1024;
  boolean localmode=false;
  String useProfile="";
  String backend="jni";
  String snapshotPath=null;
  String snapshotFrequency=null;
  String snapshotPrefix=null;
  int snapshotRetain=-1;
  float checkTransaction=0;
  LinkedHashMap<String,String> clientParams=new LinkedHashMap<String,String>();
  for (  String arg : vargs) {
    String[] parts=arg.split("=",2);
    if (parts.length == 1) {
      continue;
    }
 else     if (parts[1].startsWith("${")) {
      continue;
    }
 else     if (parts[0].equals("CHECKTRANSACTION")) {
      checkTransaction=Float.parseFloat(parts[1]);
    }
 else     if (parts[0].equals("USEPROFILE")) {
      useProfile=parts[1];
    }
 else     if (parts[0].equals("LOCAL")) {
      localmode=Boolean.parseBoolean(parts[1]);
    }
 else     if (parts[0].equals("HOSTCOUNT")) {
      hostCount=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("SITESPERHOST")) {
      sitesPerHost=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CLIENTCOUNT")) {
      clientCount=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("PROCESSESPERCLIENT")) {
      processesPerClient=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CLIENTHEAP")) {
      clientHeapSize=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("SERVERHEAP")) {
      serverHeapSize=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("INTERVAL")) {
      interval=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("DURATION")) {
      duration=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CLIENT")) {
      clientClassname=parts[1];
    }
 else     if (parts[0].equals("REMOTEPATH")) {
      remotePath=parts[1];
    }
 else     if (parts[0].equals("REMOTEUSER")) {
      remoteUser=parts[1];
    }
 else     if (parts[0].equals("HOST") || parts[0].equals("CLIENTHOST")) {
    }
 else     if (parts[0].equals("LISTENFORDEBUGGER")) {
      listenForDebugger=Boolean.parseBoolean(parts[1]);
    }
 else     if (parts[0].equals("BACKEND")) {
      backend=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTPATH")) {
      snapshotPath=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTFREQUENCY")) {
      snapshotFrequency=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTPREFIX")) {
      snapshotPrefix=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTRETAIN")) {
      snapshotRetain=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("TXNRATE")) {
      clientParams.put(parts[0],parts[1]);
    }
 else     if (parts[0].equals("NUMCONNECTIONS")) {
      clientParams.put(parts[0],parts[1]);
    }
 else {
      clientParams.put(parts[0].toLowerCase(),parts[1]);
    }
  }
  if (duration < 1000) {
    System.err.println("Duration is specified in milliseconds");
    System.exit(-1);
  }
  if (clientClassname.equals(m_tpccClientClassName)) {
    if (clientParams.containsKey("warehouses") == false)     clientParams.put("warehouses","4");
    if (clientParams.containsKey("loadthreads") == false)     clientParams.put("loadthreads","4");
  }
  ArrayList<String> hosts=new ArrayList<String>();
  ArrayList<String> clients=new ArrayList<String>();
  for (  String arg : vargs) {
    String[] parts=arg.split("=",2);
    if (parts.length == 1) {
      continue;
    }
 else     if (parts[1].startsWith("${")) {
      continue;
    }
 else     if (parts[0].equals("HOST")) {
      String hostnport[]=parts[1].split("\\:",2);
      hosts.add(hostnport[0]);
    }
 else     if (parts[0].equals("CLIENTHOST")) {
      String hostnport[]=parts[1].split("\\:",2);
      clients.add(hostnport[0]);
    }
  }
  if (hosts.size() == 0)   hosts.add("localhost");
  if (clients.size() == 0)   clients.add("localhost");
  if (clients.size() < clientCount) {
    LogKeys logkey=LogKeys.benchmark_BenchmarkController_NotEnoughClients;
    benchmarkLog.l7dlog(Level.FATAL,logkey.name(),new Object[]{clients.size(),clientCount},null);
    System.exit(-1);
  }
  if (hosts.size() < hostCount) {
    LogKeys logkey=LogKeys.benchmark_BenchmarkController_NotEnoughHosts;
    benchmarkLog.l7dlog(Level.FATAL,logkey.name(),new Object[]{hosts.size(),hostCount},null);
    benchmarkLog.fatal("Don't have enough hosts(" + hosts.size() + ") for host count "+ hostCount);
    System.exit(-1);
  }
  String[] hostNames=new String[hostCount];
  for (int i=0; i < hostCount; i++)   hostNames[i]=hosts.get(i);
  String[] clientNames=new String[clientCount];
  for (int i=0; i < clientCount; i++)   clientNames[i]=clients.get(i);
  BenchmarkConfig config=new BenchmarkConfig(clientClassname,backend,hostNames,sitesPerHost,clientNames,processesPerClient,interval,duration,remotePath,remoteUser,listenForDebugger,serverHeapSize,clientHeapSize,localmode,useProfile,checkTransaction,snapshotPath,snapshotPrefix,snapshotFrequency,snapshotRetain);
  config.parameters.putAll(clientParams);
  BenchmarkController controller=new BenchmarkController(config);
  controller.setupBenchmark();
  controller.runBenchmark();
  controller.cleanUpBenchmark();
}
