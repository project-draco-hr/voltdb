{
  long interval=10000;
  long duration=60000;
  int hostCount=1;
  int sitesPerHost=2;
  int k_factor=0;
  int clientCount=1;
  int processesPerClient=1;
  String remotePath="voltbin/";
  String remoteUser=null;
  String clientClassname=m_tpccClientClassName;
  String projectBuilderName=null;
  boolean listenForDebugger=false;
  int serverHeapSize=2048;
  int clientHeapSize=1024;
  boolean localmode=false;
  String useProfile="";
  String backend="jni";
  String voltRoot=null;
  String snapshotPath=null;
  String snapshotFrequency=null;
  String snapshotPrefix=null;
  int snapshotRetain=-1;
  float checkTransaction=0;
  boolean checkTables=false;
  String statsTag=null;
  String applicationName=null;
  String subApplicationName=null;
  boolean showConsoleOutput=false;
  String pushfiles=null;
  Integer maxOutstanding=null;
  String[] databaseURL=null;
  try {
    databaseURL=readConnectionStringFromFile(remotePath);
    assert(databaseURL.length == 2);
  }
 catch (  RuntimeException e) {
    databaseURL=new String[2];
    System.out.println(e.getMessage());
  }
  LinkedHashMap<String,String> clientParams=new LinkedHashMap<String,String>();
  for (  String arg : vargs) {
    String[] parts=arg.split("=",2);
    if (parts.length == 1) {
      continue;
    }
 else     if (parts[1].startsWith("${")) {
      continue;
    }
 else     if (parts[0].equals("CHECKTRANSACTION")) {
      checkTransaction=Float.parseFloat(parts[1]);
    }
 else     if (parts[0].equals("CHECKTABLES")) {
      checkTables=Boolean.parseBoolean(parts[1]);
    }
 else     if (parts[0].equals("USEPROFILE")) {
      useProfile=parts[1];
    }
 else     if (parts[0].equals("LOCAL")) {
      localmode=Boolean.parseBoolean(parts[1]);
    }
 else     if (parts[0].equals("HOSTCOUNT")) {
      hostCount=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("SITESPERHOST")) {
      sitesPerHost=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("KFACTOR")) {
      k_factor=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CLIENTCOUNT")) {
      clientCount=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("PROCESSESPERCLIENT")) {
      processesPerClient=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CLIENTHEAP")) {
      clientHeapSize=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("SERVERHEAP")) {
      serverHeapSize=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("INTERVAL")) {
      interval=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("DURATION")) {
      duration=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("CLIENT")) {
      clientClassname=parts[1];
    }
 else     if (parts[0].equals("REMOTEPATH")) {
      remotePath=parts[1];
    }
 else     if (parts[0].equals("REMOTEUSER")) {
      remoteUser=parts[1];
    }
 else     if (parts[0].equals("HOST") || parts[0].equals("CLIENTHOST")) {
    }
 else     if (parts[0].equals("LISTENFORDEBUGGER")) {
      listenForDebugger=Boolean.parseBoolean(parts[1]);
    }
 else     if (parts[0].equals("BACKEND")) {
      backend=parts[1];
    }
 else     if (parts[0].equals("VOLTROOT")) {
      voltRoot=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTPATH")) {
      snapshotPath=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTFREQUENCY")) {
      snapshotFrequency=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTPREFIX")) {
      snapshotPrefix=parts[1];
    }
 else     if (parts[0].equals("SNAPSHOTRETAIN")) {
      snapshotRetain=Integer.parseInt(parts[1]);
    }
 else     if (parts[0].equals("TXNRATE")) {
      clientParams.put(parts[0],parts[1]);
    }
 else     if (parts[0].equals("NUMCONNECTIONS")) {
      clientParams.put(parts[0],parts[1]);
    }
 else     if (parts[0].equals("STATSDATABASEURL")) {
      databaseURL[0]=parts[1];
    }
 else     if (parts[0].equals("STATSTAG")) {
      statsTag=parts[1];
    }
 else     if (parts[0].equals("APPLICATIONNAME")) {
      applicationName=parts[1];
    }
 else     if (parts[0].equals("SUBAPPLICATIONNAME")) {
      subApplicationName=parts[1];
    }
 else     if (parts[0].equals("SHOWCONSOLEOUTPUT")) {
      showConsoleOutput=true;
    }
 else     if (parts[0].equals("PROJECTBUILDERNAME")) {
      projectBuilderName=parts[1];
    }
 else     if (parts[0].equals("PUSHFILES")) {
      pushfiles=parts[1];
    }
 else     if (parts[0].equals("MAXOUTSTANDING")) {
      maxOutstanding=Integer.parseInt(parts[1]);
    }
 else {
      clientParams.put(parts[0].toLowerCase(),parts[1]);
    }
  }
  if (maxOutstanding == null) {
    maxOutstanding=org.voltdb.dtxn.SimpleDtxnInitiator.MAX_DESIRED_PENDING_TXNS * (hostCount / (k_factor + 1));
  }
  if (duration < 1000) {
    System.err.println("Duration is specified in milliseconds");
    System.exit(-1);
  }
  if (clientClassname.equals(m_tpccClientClassName)) {
    if (clientParams.containsKey("warehouses") == false)     clientParams.put("warehouses","4");
    if (clientParams.containsKey("loadthreads") == false)     clientParams.put("loadthreads","4");
  }
  ArrayList<InetSocketAddress> hosts=new ArrayList<InetSocketAddress>();
  ArrayList<String> clients=new ArrayList<String>();
  for (  String arg : vargs) {
    String[] parts=arg.split("=",2);
    if (parts.length == 1) {
      continue;
    }
 else     if (parts[1].startsWith("${")) {
      continue;
    }
 else     if (parts[0].equals("HOST")) {
      String hostnport[]=parts[1].split("\\:",2);
      String host=hostnport[0];
      int port;
      if (hostnport.length < 2) {
        port=VoltDB.DEFAULT_PORT;
      }
 else {
        port=Integer.valueOf(hostnport[1]);
      }
      hosts.add(new InetSocketAddress(host,port));
    }
 else     if (parts[0].equals("CLIENTHOST")) {
      String hostnport[]=parts[1].split("\\:",2);
      String host=hostnport[0];
      clients.add(host);
    }
  }
  if (hosts.size() == 0)   hosts.add(new InetSocketAddress("localhost",VoltDB.DEFAULT_PORT));
  if (clients.size() == 0)   clients.add("localhost");
  if (clients.size() < clientCount) {
    LogKeys logkey=LogKeys.benchmark_BenchmarkController_NotEnoughClients;
    benchmarkLog.l7dlog(Level.FATAL,logkey.name(),new Object[]{clients.size(),clientCount},null);
    System.exit(-1);
  }
  if (hosts.size() < hostCount) {
    LogKeys logkey=LogKeys.benchmark_BenchmarkController_NotEnoughHosts;
    benchmarkLog.l7dlog(Level.FATAL,logkey.name(),new Object[]{hosts.size(),hostCount},null);
    benchmarkLog.fatal("Don't have enough hosts(" + hosts.size() + ") for host count "+ hostCount);
    System.exit(-1);
  }
  InetSocketAddress[] hostlist=new InetSocketAddress[hostCount];
  for (int i=0; i < hostCount; i++)   hostlist[i]=hosts.get(i);
  String[] clientlist=new String[clientCount];
  for (int i=0; i < clientCount; i++)   clientlist[i]=clients.get(i);
  BenchmarkConfig config=new BenchmarkConfig(clientClassname,projectBuilderName,backend,hostlist,sitesPerHost,k_factor,clientlist,processesPerClient,interval,duration,remotePath,remoteUser,listenForDebugger,serverHeapSize,clientHeapSize,localmode,useProfile,checkTransaction,checkTables,voltRoot,snapshotPath,snapshotPrefix,snapshotFrequency,snapshotRetain,databaseURL[0],databaseURL[1],statsTag,applicationName,subApplicationName,showConsoleOutput,pushfiles,maxOutstanding);
  config.parameters.putAll(clientParams);
  BenchmarkController controller=new BenchmarkController(config);
  controller.setupBenchmark();
  controller.runBenchmark();
  controller.cleanUpBenchmark();
}
