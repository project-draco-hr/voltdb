{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table FOO (" + "PKCOL integer not null," + "DROPME bigint, "+ "PROCCOL bigint, "+ "VIEWCOL bigint, "+ "INDEXCOL bigint, "+ "INDEX1COL bigint, "+ "INDEX2COL bigint, "+ "constraint pk_tree primary key (PKCOL)"+ ");\n"+ "create procedure BAR as select PROCCOL from FOO;\n"+ "create view FOOVIEW (VIEWCOL, TOTAL) as select VIEWCOL, COUNT(*) from FOO group by VIEWCOL;\n"+ "create index FOODEX on FOO(INDEXCOL);\n"+ "create index FOO2DEX on FOO(INDEX1COL, INDEX2COL);\n"+ "create table ONECOL ("+ "SOLOCOL integer, "+ ");\n"+ "create table BAZ ("+ "PKCOL1 integer not null, "+ "PKCOL2 integer not null, "+ "constraint pk_tree2 primary key (PKCOL1, PKCOL2)"+ ");\n");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    assertTrue(doesColumnExist("FOO","DROPME"));
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column DROPME;");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Should be able to drop a bare column.");
    }
    assertFalse(doesColumnExist("FOO","DROPME"));
    boolean threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column DROPME; --commentfortesting");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertTrue("Shouldn't be able to drop a column that doesn't exist",threw);
    assertFalse(doesColumnExist("FOO","DROPME"));
    assertTrue(doesColumnExist("FOO","PROCCOL"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column PROCCOL;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertTrue("Shouldn't be able to drop a column used by a procedure",threw);
    assertTrue(doesColumnExist("FOO","PROCCOL"));
    try {
      m_client.callProcedure("BAR");
    }
 catch (    ProcCallException pce) {
      fail("Procedure should still exist.");
    }
    assertTrue(doesColumnExist("FOO","VIEWCOL"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column VIEWCOL;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertTrue("Shouldn't be able to drop a column used by a view",threw);
    assertTrue(doesColumnExist("FOO","VIEWCOL"));
    assertTrue(findTableInSystemCatalogResults("FOOVIEW"));
    assertTrue(doesColumnExist("FOO","VIEWCOL"));
    assertTrue(findTableInSystemCatalogResults("FOOVIEW"));
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column VIEWCOL cascade; --comment messes up cascade?");
    }
 catch (    ProcCallException pce) {
      fail("Dropping a column should drop a view with cascade");
    }
    assertFalse(doesColumnExist("FOO","VIEWCOL"));
    assertFalse(findTableInSystemCatalogResults("FOOVIEW"));
    assertTrue(doesColumnExist("FOO","INDEXCOL"));
    assertTrue(findIndexInSystemCatalogResults("FOODEX"));
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column INDEXCOL;");
    }
 catch (    ProcCallException pce) {
      fail("Should be able to drop a single column backing a single column index.");
    }
    assertFalse(doesColumnExist("FOO","INDEXCOL"));
    assertFalse(findIndexInSystemCatalogResults("FOODEX"));
    assertTrue(doesColumnExist("FOO","PKCOL"));
    assertTrue(findIndexInSystemCatalogResults("VOLTDB_AUTOGEN_CONSTRAINT_IDX_PK_TREE"));
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column PKCOL;");
    }
 catch (    ProcCallException pce) {
      fail("Should be able to drop a single column backing a single column primary key.");
    }
    assertFalse(doesColumnExist("FOO","PKCOL"));
    assertFalse(findIndexInSystemCatalogResults("VOLTDB_AUTOGEN_CONSTRAINT_IDX_PK_TREE"));
    assertTrue(doesColumnExist("FOO","INDEX1COL"));
    assertTrue(findIndexInSystemCatalogResults("FOO2DEX"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table FOO drop column INDEX1COL;");
    }
 catch (    ProcCallException pce) {
      fail("Dropping a column used by an index should kill the index");
    }
    assertFalse(doesColumnExist("FOO","INDEX1COL"));
    assertFalse(findIndexInSystemCatalogResults("FOO2DEX"));
    assertTrue(doesColumnExist("BAZ","PKCOL1"));
    assertTrue(findIndexInSystemCatalogResults("VOLTDB_AUTOGEN_CONSTRAINT_IDX_PK_TREE2"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table BAZ drop column PKCOL1;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    System.out.println("COLUMNS: " + m_client.callProcedure("@SystemCatalog","COLUMNS").getResults()[0]);
    System.out.println("INDEXES: " + m_client.callProcedure("@SystemCatalog","INDEXINFO").getResults()[0]);
    assertTrue("Shouldn't be able to drop a column used by a multi-column primary key",threw);
    assertTrue(doesColumnExist("BAZ","PKCOL1"));
    assertTrue(findIndexInSystemCatalogResults("VOLTDB_AUTOGEN_CONSTRAINT_IDX_PK_TREE2"));
    assertTrue(doesColumnExist("ONECOL","SOLOCOL"));
    threw=false;
    try {
      m_client.callProcedure("@AdHoc","alter table BAZ drop column PKCOL1;");
    }
 catch (    ProcCallException pce) {
      threw=true;
    }
    assertTrue("Shouldn't be able to drop the last column in a table",threw);
    assertTrue(doesColumnExist("ONECOL","SOLOCOL"));
  }
  finally {
    teardownSystem();
  }
}
