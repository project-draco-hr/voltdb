{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table FOO (" + "NUM1 integer," + "VAL integer, "+ "ID integer not null,"+ "NUM2 integer,"+ "constraint FOO_PK_TREE primary key (ID)"+ ");\n"+ "create view FOOVIEW (VAL, TOTAL) as "+ "select VAL, COUNT(*) from FOO group by VAL;"+ "create table BAR ("+ "NUM1 integer,"+ "VAL integer, "+ "ID integer not null,"+ "NUM2 integer,"+ "constraint BAR_PK_TREE primary key (ID)"+ ");\n"+ "create view BARVIEW (VAL, TOTAL) as "+ "select VAL, COUNT(*) from BAR where VAL >= 1 group by VAL;");
  builder.addPartitionInfo("FOO","ID");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,1,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    checkAlterTableSucceed("alter table FOO add column NEWCOL varchar(50);");
    assertTrue(verifyTableColumnType("FOO","NEWCOL","VARCHAR"));
    checkAlterTableSucceed("alter table FOO drop column NEWCOL;");
    assertFalse(doesColumnExist("FOO","NEWCOL"));
    checkAlterTableSucceed("alter table FOO alter column NUM1 bigint;");
    assertTrue(verifyTableColumnType("FOO","NUM1","BIGINT"));
    checkAlterTableFailed("alter table FOO alter column VAL bigint;","dependent objects exist");
    assertTrue(verifyTableColumnType("FOO","VAL","INTEGER"));
    checkAlterTableFailed("alter table FOO drop column VAL;","column is referenced in");
    assertTrue(doesColumnExist("FOO","VAL"));
    checkAlterTableSucceed("alter table FOO drop column NUM1;");
    assertFalse(doesColumnExist("FOO","NUM1"));
    checkAlterTableFailed("alter table BAR drop column NUM1;","May not dynamically modify field 'predicate' of schema object 'MaterializedViewInfo{BARVIEW}'");
    assertTrue(doesColumnExist("BAR","NUM1"));
    checkAlterTableSucceed("alter table FOO drop column NUM2;");
    assertFalse(doesColumnExist("FOO","NUM2"));
    checkAlterTableSucceed("alter table BAR drop column NUM2;");
    assertFalse(doesColumnExist("BAR","NUM2"));
    checkAlterTableFailed("alter table FOO rename to FOO1;","AdHoc DDL ALTER/RENAME is not yet supported");
    assertTrue(verifyTableColumnType("FOO","VAL","INTEGER"));
    VoltTable vt;
    m_client.callProcedure("@AdHoc","insert into FOO values(1, 1);");
    m_client.callProcedure("@AdHoc","insert into FOO values(1, 2);");
    m_client.callProcedure("@AdHoc","insert into FOO values(2, 3);");
    m_client.callProcedure("@AdHoc","insert into FOO values(-2, 4);");
    vt=m_client.callProcedure("@AdHoc","select val, total from fooview order by 1, 2;").getResults()[0];
    RegressionSuite.validateTableOfLongs(vt,new long[][]{{-2,1},{1,2},{2,1}});
    m_client.callProcedure("@AdHoc","insert into BAR values(1, 1, 1);");
    m_client.callProcedure("@AdHoc","insert into BAR values(1, 1, 2);");
    m_client.callProcedure("@AdHoc","insert into BAR values(1, 2, 3);");
    m_client.callProcedure("@AdHoc","insert into BAR values(1, -2, 4);");
    vt=m_client.callProcedure("@AdHoc","select val, total from barview order by 1, 2;").getResults()[0];
    RegressionSuite.validateTableOfLongs(vt,new long[][]{{1,2},{2,1}});
  }
  finally {
    teardownSystem();
  }
}
