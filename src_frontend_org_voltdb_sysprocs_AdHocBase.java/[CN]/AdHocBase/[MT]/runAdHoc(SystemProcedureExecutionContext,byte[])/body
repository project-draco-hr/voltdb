{
  assert(serializedBatchData != null);
  ByteBuffer buf=ByteBuffer.wrap(serializedBatchData);
  AdHocPlannedStatement[] statements=null;
  try {
    statements=AdHocPlannedStmtBatch.planArrayFromBuffer(buf);
  }
 catch (  IOException e) {
    throw new VoltAbortException(e);
  }
  if (statements.length == 0) {
    return new VoltTable[]{};
  }
  int currentCatalogVersion=ctx.getCatalogVersion();
  for (  AdHocPlannedStatement statement : statements) {
    if (currentCatalogVersion != statement.core.catalogVersion) {
      String msg=String.format("AdHoc transaction %d wasn't planned " + "against the current catalog version. Statement: %s",ctx.getCurrentTxnId(),new String(statement.sql,Constants.UTF8ENCODING));
      throw new VoltAbortException(msg);
    }
    long aggFragId=m_site.loadOrAddRefPlanFragment(statement.core.aggregatorHash,statement.core.aggregatorFragment);
    long collectorFragId=0;
    if (statement.core.collectorFragment != null) {
      collectorFragId=m_site.loadOrAddRefPlanFragment(statement.core.collectorHash,statement.core.collectorFragment);
    }
    SQLStmt stmt=SQLStmtAdHocHelper.createWithPlan(statement.sql,aggFragId,statement.core.aggregatorHash,true,collectorFragId,statement.core.collectorHash,true,statement.core.isReplicatedTableDML,statement.core.readOnly,statement.core.parameterTypes,m_site);
    voltQueueSQL(stmt,statement.extractedParamValues.toArray());
  }
  return voltExecuteSQL(true);
}
