{
  assert(serializedBatchData != null);
  ByteBuffer buf=ByteBuffer.wrap(serializedBatchData);
  AdHocPlannedStatement[] statements=null;
  try {
    statements=AdHocPlannedStmtBatch.planArrayFromBuffer(buf);
  }
 catch (  IOException e) {
    throw new VoltAbortException(e);
  }
  if (statements.length == 0) {
    return new VoltTable[]{};
  }
  int currentCatalogVersion=ctx.getCatalogVersion();
  for (  AdHocPlannedStatement statement : statements) {
    if (currentCatalogVersion != statement.catalogVersion) {
      String msg=String.format("AdHoc transaction %d wasn't planned " + "against the current catalog version. Statement: %s",ctx.getCurrentTxnId(),new String(statement.sql,VoltDB.UTF8ENCODING));
      throw new VoltAbortException(msg);
    }
    SQLStmt stmt=SQLStmtAdHocHelper.createWithPlan(statement.sql,statement.aggregatorFragment,statement.collectorFragment,statement.isReplicatedTableDML,statement.parameterTypes);
    voltQueueSQL(stmt,statement.extractedParamValues.toArray());
  }
  return voltExecuteSQL(true);
}
