{
  addListener(new Listener(){
    @Override public void running(){
      startup.set(RUNNING);
    }
    @Override public void stopping(    State from){
      if (from == STARTING) {
        startup.set(STOPPING);
      }
    }
    @Override public void terminated(    State from){
      if (from == NEW) {
        startup.set(TERMINATED);
      }
      shutdown.set(TERMINATED);
    }
    @Override public void failed(    State from,    Throwable failure){
switch (from) {
case STARTING:
        startup.setException(failure);
      shutdown.setException(new Exception("Service failed to start.",failure));
    break;
case RUNNING:
  shutdown.setException(new Exception("Service failed while running",failure));
break;
case STOPPING:
shutdown.setException(failure);
break;
case TERMINATED:
case FAILED:
case NEW:
default :
throw new AssertionError("Unexpected from state: " + from);
}
}
}
,MoreExecutors.sameThreadExecutor());
}
