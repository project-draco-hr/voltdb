{
  if (bytes.length == 1) {
    if (base64Encode) {
      return new byte[][]{Base64.encodeToByte(compressBytes(bytes[0]),false)};
    }
 else {
      return new byte[][]{compressBytes(bytes[0])};
    }
  }
  ArrayList<Future<byte[]>> futures=new ArrayList<Future<byte[]>>(bytes.length);
  for (  final byte bts[] : bytes) {
    futures.add(submitCompressionTask(new Callable<byte[]>(){
      @Override public byte[] call() throws Exception {
        if (base64Encode) {
          return Base64.encodeToByte(compressBytes(bts),false);
        }
 else {
          return compressBytes(bts);
        }
      }
    }
));
  }
  byte compressedBytes[][]=new byte[bytes.length][];
  for (int ii=0; ii < bytes.length; ii++) {
    compressedBytes[ii]=futures.get(ii).get();
  }
  return compressedBytes;
}
