{
  if (Log.isDebugEnabled())   Log.debug("Extract " + this + " to "+ directory);
  String urlString=this.getURL().toExternalForm().trim();
  int endOfJarUrl=urlString.indexOf("!/");
  int startOfJarUrl=(endOfJarUrl >= 0 ? 4 : 0);
  if (endOfJarUrl < 0)   throw new IOException("Not a valid jar url: " + urlString);
  URL jarFileURL=new URL(urlString.substring(startOfJarUrl,endOfJarUrl));
  String subEntryName=(endOfJarUrl + 2 < urlString.length() ? urlString.substring(endOfJarUrl + 2) : null);
  boolean subEntryIsDir=(subEntryName != null && subEntryName.endsWith("/") ? true : false);
  if (Log.isDebugEnabled())   Log.debug("Extracting entry = " + subEntryName + " from jar "+ jarFileURL);
  InputStream is=jarFileURL.openConnection().getInputStream();
  JarInputStream jin=new JarInputStream(is);
  JarEntry entry;
  boolean shouldExtract;
  String directoryCanonicalPath=directory.getCanonicalPath() + "/";
  while ((entry=jin.getNextJarEntry()) != null) {
    String entryName=entry.getName();
    if ((subEntryName != null) && (entryName.startsWith(subEntryName))) {
      if (subEntryIsDir) {
        entryName=entryName.substring(subEntryName.length());
        if (!entryName.equals("")) {
          shouldExtract=true;
        }
 else         shouldExtract=false;
      }
 else       shouldExtract=true;
    }
 else     if ((subEntryName != null) && (!entryName.startsWith(subEntryName))) {
      shouldExtract=false;
    }
 else {
      shouldExtract=true;
    }
    if (!shouldExtract) {
      if (Log.isDebugEnabled())       Log.debug("Skipping entry: " + entryName);
      continue;
    }
    String dotCheck=entryName.replace('\\','/');
    dotCheck=URIUtil.canonicalPath(dotCheck);
    if (dotCheck == null) {
      if (Log.isDebugEnabled())       Log.debug("Invalid entry: " + entryName);
      continue;
    }
    File file=new File(directory,entryName);
    if (entry.isDirectory()) {
      if (!file.exists())       file.mkdirs();
    }
 else {
      File dir=new File(file.getParent());
      if (!dir.exists())       dir.mkdirs();
      FileOutputStream fout=null;
      try {
        fout=new FileOutputStream(file);
        IO.copy(jin,fout);
      }
  finally {
        IO.close(fout);
      }
      if (entry.getTime() >= 0)       file.setLastModified(entry.getTime());
    }
  }
  if ((subEntryName == null) || (subEntryName != null && subEntryName.equalsIgnoreCase("META-INF/MANIFEST.MF"))) {
    Manifest manifest=jin.getManifest();
    if (manifest != null) {
      File metaInf=new File(directory,"META-INF");
      metaInf.mkdir();
      File f=new File(metaInf,"MANIFEST.MF");
      FileOutputStream fout=new FileOutputStream(f);
      manifest.write(fout);
      fout.close();
    }
  }
  IO.close(jin);
}
