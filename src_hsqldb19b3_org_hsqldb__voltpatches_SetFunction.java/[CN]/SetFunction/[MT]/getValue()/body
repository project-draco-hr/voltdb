{
  if (setType == OpTypes.COUNT) {
    return ValuePool.getInt(count);
  }
  if (setType == OpTypes.APPROX_COUNT_DISTINCT) {
    throw Error.error(ErrorCode.X_42581,Tokens.T_APPROX_COUNT_DISTINCT);
  }
  if (count == 0) {
    return null;
  }
switch (setType) {
case OpTypes.AVG:
{
switch (dataType) {
case Types.TINYINT:
case Types.SQL_SMALLINT:
case Types.SQL_INTEGER:
        return new Long(currentLong / count);
case Types.SQL_BIGINT:
{
        long value=getLongSum().divide(BigInteger.valueOf(count)).longValue();
        return new Long(value);
      }
case Types.SQL_REAL:
case Types.SQL_FLOAT:
case Types.SQL_DOUBLE:
    return new Double(currentDouble / count);
case Types.SQL_NUMERIC:
case Types.SQL_DECIMAL:
  return currentBigDecimal.divide(new BigDecimal(count),BigDecimal.ROUND_DOWN);
case Types.SQL_INTERVAL:
{
  BigInteger bi=getLongSum().divide(BigInteger.valueOf(count));
  if (!NumberType.isInLongLimits(bi)) {
    throw Error.error(ErrorCode.X_22015);
  }
  if (((IntervalType)type).isDaySecondIntervalType()) {
    return new IntervalSecondData(bi.longValue(),currentLong,(IntervalType)type,true);
  }
 else {
    return IntervalMonthData.newIntervalMonth(bi.longValue(),(IntervalType)type);
  }
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"SetFunction");
}
}
case OpTypes.SUM:
{
switch (dataType) {
case Types.TINYINT:
case Types.SQL_SMALLINT:
case Types.SQL_INTEGER:
return new Long(currentLong);
case Types.SQL_BIGINT:
return new BigDecimal(getLongSum());
case Types.SQL_REAL:
case Types.SQL_FLOAT:
case Types.SQL_DOUBLE:
return new Double(currentDouble);
case Types.SQL_NUMERIC:
case Types.SQL_DECIMAL:
return currentBigDecimal;
case Types.SQL_INTERVAL:
{
BigInteger bi=getLongSum();
if (!NumberType.isInLongLimits(bi)) {
throw Error.error(ErrorCode.X_22015);
}
if (((IntervalType)type).isDaySecondIntervalType()) {
return new IntervalSecondData(bi.longValue(),currentLong,(IntervalType)type,true);
}
 else {
return IntervalMonthData.newIntervalMonth(bi.longValue(),(IntervalType)type);
}
}
default :
throw Error.runtimeError(ErrorCode.U_S0500,"SetFunction");
}
}
case OpTypes.MIN:
case OpTypes.MAX:
return currentValue;
case OpTypes.EVERY:
return every ? Boolean.TRUE : Boolean.FALSE;
case OpTypes.SOME:
return some ? Boolean.TRUE : Boolean.FALSE;
case OpTypes.STDDEV_POP:
case OpTypes.STDDEV_SAMP:
return getStdDev();
case OpTypes.VAR_POP:
case OpTypes.VAR_SAMP:
return getVariance();
default :
throw Error.runtimeError(ErrorCode.U_S0500,"SetFunction");
}
}
