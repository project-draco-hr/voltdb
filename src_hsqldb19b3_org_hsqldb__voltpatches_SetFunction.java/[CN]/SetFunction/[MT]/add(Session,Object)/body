{
  if (item == null) {
    hasNull=true;
    session.addWarning(Error.error(ErrorCode.W_01003));
    return;
  }
  if (isDistinct && !distinctValues.add(item)) {
    return;
  }
  count++;
switch (setType) {
case OpTypes.COUNT:
    return;
case OpTypes.APPROX_COUNT_DISTINCT:
  throw Error.error(ErrorCode.X_42581,Tokens.T_APPROX_COUNT_DISTINCT);
case OpTypes.AVG:
case OpTypes.SUM:
{
switch (dataType) {
case Types.TINYINT:
case Types.SQL_SMALLINT:
case Types.SQL_INTEGER:
    currentLong+=((Number)item).intValue();
  return;
case Types.SQL_INTERVAL:
if (item instanceof IntervalSecondData) {
  addLong(((IntervalSecondData)item).units);
  currentLong+=((IntervalSecondData)item).nanos;
  if (Math.abs(currentLong) >= DTIType.nanoScaleFactors[0]) {
    addLong(currentLong / DTIType.nanoScaleFactors[0]);
    currentLong%=DTIType.nanoScaleFactors[0];
  }
}
 else if (item instanceof IntervalMonthData) {
  addLong(((IntervalMonthData)item).units);
}
return;
case Types.SQL_BIGINT:
addLong(((Number)item).longValue());
return;
case Types.SQL_REAL:
case Types.SQL_FLOAT:
case Types.SQL_DOUBLE:
currentDouble+=((Number)item).doubleValue();
return;
case Types.SQL_NUMERIC:
case Types.SQL_DECIMAL:
if (currentBigDecimal == null) {
currentBigDecimal=(BigDecimal)item;
}
 else {
currentBigDecimal=currentBigDecimal.add((BigDecimal)item);
}
return;
default :
throw Error.error(ErrorCode.X_42565);
}
}
case OpTypes.MIN:
{
if (currentValue == null) {
currentValue=item;
return;
}
if (type.compare(currentValue,item) > 0) {
currentValue=item;
}
return;
}
case OpTypes.MAX:
{
if (currentValue == null) {
currentValue=item;
return;
}
if (type.compare(currentValue,item) < 0) {
currentValue=item;
}
return;
}
case OpTypes.EVERY:
if (!(item instanceof Boolean)) {
throw Error.error(ErrorCode.X_42565);
}
every=every && ((Boolean)item).booleanValue();
return;
case OpTypes.SOME:
if (!(item instanceof Boolean)) {
throw Error.error(ErrorCode.X_42565);
}
some=some || ((Boolean)item).booleanValue();
return;
case OpTypes.STDDEV_POP:
case OpTypes.STDDEV_SAMP:
case OpTypes.VAR_POP:
case OpTypes.VAR_SAMP:
addDataPoint((Number)item);
return;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"SetFunction");
}
}
