{
  if (setType == OpTypes.COUNT) {
    return Type.SQL_INTEGER;
  }
  int dataType=type.isIntervalType() ? Types.SQL_INTERVAL : type.typeCode;
switch (setType) {
case OpTypes.AVG:
{
switch (dataType) {
case Types.TINYINT:
case Types.SQL_SMALLINT:
case Types.SQL_INTEGER:
case Types.SQL_BIGINT:
case Types.SQL_REAL:
case Types.SQL_FLOAT:
case Types.SQL_DOUBLE:
case Types.SQL_NUMERIC:
case Types.SQL_DECIMAL:
case Types.SQL_INTERVAL:
        return type;
default :
      throw Error.error(ErrorCode.X_42565);
  }
}
case OpTypes.SUM:
{
switch (dataType) {
case Types.TINYINT:
case Types.SQL_SMALLINT:
case Types.SQL_INTEGER:
  return Type.SQL_BIGINT;
case Types.SQL_BIGINT:
return Type.SQL_BIGINT;
case Types.SQL_REAL:
case Types.SQL_FLOAT:
case Types.SQL_DOUBLE:
return Type.SQL_DOUBLE;
case Types.SQL_NUMERIC:
case Types.SQL_DECIMAL:
return Type.getType(type.typeCode,0,type.precision * 2,type.scale);
case Types.SQL_INTERVAL:
return IntervalType.newIntervalType(type.typeCode,DTIType.maxIntervalPrecision,type.scale);
default :
throw Error.error(ErrorCode.X_42565);
}
}
case OpTypes.MIN:
case OpTypes.MAX:
return type;
case OpTypes.EVERY:
case OpTypes.SOME:
if (type.isBooleanType()) {
return Type.SQL_BOOLEAN;
}
break;
case OpTypes.STDDEV_POP:
case OpTypes.STDDEV_SAMP:
case OpTypes.VAR_POP:
case OpTypes.VAR_SAMP:
if (type.isNumberType()) {
return Type.SQL_DOUBLE;
}
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"SetFunction");
}
throw Error.error(ErrorCode.X_42565);
}
