{
  ExecutorService executor=Executors.newFixedThreadPool(m_hosts.size() * 4);
  ExecutorService executor2=Executors.newFixedThreadPool(m_hosts.size() * 4);
  CompletionService<Long> ecs=new ExecutorCompletionService<>(executor2);
  List<Future<Long>> doneFutures=new ArrayList<>();
  ExportConsumer bconsumer=null;
  Map<String,Integer> topicCountMap=new HashMap<String,Integer>();
  topicCountMap.put(topic,1);
  for (  RemoteHost rh : m_hosts) {
    Map<String,List<KafkaStream<byte[],byte[]>>> consumerMap=rh.consumer.createMessageStreams(topicCountMap);
    List<KafkaStream<byte[],byte[]>> streams=consumerMap.get(topic);
    int threadNumber=0;
    for (    final KafkaStream stream : streams) {
      System.out.println("Creating consumer for " + topic);
      bconsumer=new ExportConsumer(stream,threadNumber++,false,rh.consumer);
      executor.submit(bconsumer);
    }
  }
  Map<String,Integer> topicDoneCountMap=new HashMap<String,Integer>();
  topicDoneCountMap.put(doneTopic,1);
  for (  RemoteHost rh : m_hosts) {
    Map<String,List<KafkaStream<byte[],byte[]>>> consumerMap=rh.doneConsumer.createMessageStreams(topicDoneCountMap);
    List<KafkaStream<byte[],byte[]>> doneStreams=consumerMap.get(doneTopic);
    int threadNumber=0;
    for (    final KafkaStream stream : doneStreams) {
      System.out.println("Creating consumer for " + doneTopic);
      bconsumer=new ExportConsumer(stream,threadNumber,true,rh.doneConsumer);
      Future<Long> f=ecs.submit(bconsumer,new Long(threadNumber++));
      doneFutures.add(f);
    }
  }
  System.out.println("All Consumer Creation Done...Waiting for EOS");
  Long l=ecs.take().get();
  System.out.println("Consumer " + l + " Saw EOS...Cancelling rest of the done consumers.");
  for (  Future<Long> f : doneFutures) {
    f.cancel(true);
  }
  executor.awaitTermination(2,TimeUnit.MINUTES);
}
