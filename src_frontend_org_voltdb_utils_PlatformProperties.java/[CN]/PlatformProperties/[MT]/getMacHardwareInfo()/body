{
  HardwareInfo hw=new HardwareInfo();
  hw.hardwareThreads=Runtime.getRuntime().availableProcessors();
  String result=ShellTools.cmd("/usr/sbin/system_profiler -detailLevel mini SPHardwareDataType").trim();
  String[] lines=result.split("\n");
  for (  String line : lines) {
    line=line.trim();
    if (line.length() == 0)     continue;
    String[] parts=line.split(":");
    if (parts.length < 2)     continue;
    if (parts[0].compareToIgnoreCase("Processor Name") == 0) {
      hw.cpuDesc=parts[1].trim();
    }
    if (parts[0].compareToIgnoreCase("Processor Speed") == 0) {
      hw.cpuDesc+=" " + parts[1].trim();
    }
    if (parts[0].compareToIgnoreCase("Number of Processors") == 0) {
      hw.socketCount=Integer.valueOf(parts[1].trim());
    }
    if (parts[0].compareToIgnoreCase("Total Number of Cores") == 0) {
      hw.coreCount=Integer.valueOf(parts[1].trim());
    }
    if (parts[0].compareToIgnoreCase("L2 Cache (per Core)") == 0) {
      hw.cpuDesc+=" " + parts[1].trim() + " L2/core";
    }
    if (parts[0].compareToIgnoreCase("L3 Cache") == 0) {
      hw.cpuDesc+=" " + parts[1].trim() + " L3";
    }
    if (parts[0].compareToIgnoreCase("Memory") == 0) {
      String[] subParts=parts[1].trim().split(" ");
      if (subParts[1].contains("GB")) {
        hw.ramInMegabytes=Integer.parseInt(subParts[0]) * 1024;
      }
 else {
        assert(subParts[1].contains("MB"));
        hw.ramInMegabytes=Integer.parseInt(subParts[0]);
      }
    }
  }
  return hw;
}
