{
  int hostCount=cluster.getHostcount();
  int sitesPerHost=cluster.getSitesperhost();
  String leader=cluster.getLeader();
  int kFactor=cluster.getKfactor();
  ClusterConfig config=new ClusterConfig(hostCount,sitesPerHost,kFactor,leader);
  hostLog.l7dlog(Level.INFO,LogKeys.compiler_VoltCompiler_LeaderAndHostCountAndSitesPerHost.name(),new Object[]{config.getLeaderAddress(),config.getHostCount(),config.getSitesPerHost()},null);
  if (!config.validate()) {
    hostLog.error(config.getErrorMsg());
  }
 else {
    ClusterCompiler.compile(catalog,config);
    Cluster catCluster=catalog.getClusters().get("cluster");
    if (cluster.getPartitionDetection() != null && cluster.getPartitionDetection().isEnabled()) {
      catCluster.setNetworkpartition(true);
      CatalogMap<SnapshotSchedule> faultsnapshots=catCluster.getFaultsnapshots();
      SnapshotSchedule sched=faultsnapshots.add(FaultType.CLUSTER_PARTITION.toString());
      sched.setPrefix(cluster.getPartitionDetection().getSnapshot().getPrefix());
      sched.setPath(cluster.getPartitionDetection().getSnapshot().getPath());
    }
 else {
      catCluster.setNetworkpartition(false);
    }
  }
}
