{
  int hostCount=cluster.getHostcount();
  int sitesPerHost=cluster.getSitesperhost();
  String leader=cluster.getLeader();
  int kFactor=cluster.getKfactor();
  ClusterConfig config=new ClusterConfig(hostCount,sitesPerHost,kFactor,leader);
  hostLog.l7dlog(Level.INFO,LogKeys.compiler_VoltCompiler_LeaderAndHostCountAndSitesPerHost.name(),new Object[]{config.getHostCount(),config.getLeaderAddress(),config.getSitesPerHost(),config.getReplicationFactor()},null);
  int replicas=config.getReplicationFactor() + 1;
  int partitionCount=config.getSitesPerHost() * config.getHostCount() / replicas;
  hostLog.info(String.format("The entire cluster has %d %s of%s %d logical partition%s.",replicas,replicas > 1 ? "copies" : "copy",partitionCount > 1 ? " each of the" : "",partitionCount,partitionCount > 1 ? "s" : ""));
  if (!config.validate()) {
    hostLog.error(config.getErrorMsg());
  }
 else {
    ClusterCompiler.compile(catalog,config);
    Cluster catCluster=catalog.getClusters().get("cluster");
    if (cluster.getPartitionDetection() != null && cluster.getPartitionDetection().isEnabled()) {
      catCluster.setNetworkpartition(true);
      CatalogMap<SnapshotSchedule> faultsnapshots=catCluster.getFaultsnapshots();
      SnapshotSchedule sched=faultsnapshots.add("CLUSTER_PARTITION");
      sched.setPrefix(cluster.getPartitionDetection().getSnapshot().getPrefix());
      hostLog.info("Detection of network partitions in the cluster enabled.");
    }
 else {
      catCluster.setNetworkpartition(false);
      hostLog.info("Detection of network partitions in the cluster is not enabled.");
    }
    if (cluster.getAdminMode() != null) {
      catCluster.setAdminenabled(true);
      catCluster.setAdminport(cluster.getAdminMode().getPort());
      catCluster.setAdminstartup(cluster.getAdminMode().isAdminstartup());
    }
 else {
      catCluster.setAdminenabled(false);
    }
    if (cluster.getHeartbeat() != null) {
      catCluster.setHeartbeattimeout(cluster.getHeartbeat().getTimeout());
    }
 else {
      catCluster.setHeartbeattimeout(10);
    }
  }
}
