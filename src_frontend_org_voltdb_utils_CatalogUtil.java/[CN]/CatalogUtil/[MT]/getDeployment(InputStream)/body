{
  try {
    if (m_jc == null || m_schema == null) {
      throw new RuntimeException("Error schema validation.");
    }
    Unmarshaller unmarshaller=m_jc.createUnmarshaller();
    unmarshaller.setSchema(m_schema);
    JAXBElement<DeploymentType> result=(JAXBElement<DeploymentType>)unmarshaller.unmarshal(deployIS);
    DeploymentType deployment=result.getValue();
    ExportType export=deployment.getExport();
    if (export != null && export.getTarget() != null) {
      if (export.getConfiguration().size() > 1) {
        hostLog.error("Invalid schema, cannot use deprecated export syntax with multiple configuration tags.");
        return null;
      }
      if (export.getConfiguration().isEmpty()) {
        export.getConfiguration().add(new ExportConfigurationType());
      }
      ExportConfigurationType exportConfig=export.getConfiguration().get(0);
      if (export.isEnabled() != null) {
        exportConfig.setEnabled(export.isEnabled());
      }
      if (export.getTarget() != null) {
        exportConfig.setType(export.getTarget());
      }
      if (export.getExportconnectorclass() != null) {
        exportConfig.setExportconnectorclass(export.getExportconnectorclass());
      }
      exportConfig.setTarget(Constants.DEFAULT_EXPORT_CONNECTOR_NAME);
    }
    populateDefaultDeployment(deployment);
    return deployment;
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof java.io.FileNotFoundException) {
      hostLog.error(e.getLinkedException().getMessage());
      return null;
    }
 else     if (e.getLinkedException() instanceof org.xml.sax.SAXParseException) {
      hostLog.error("Error schema validating deployment.xml file. " + e.getLinkedException().getMessage());
      return null;
    }
 else {
      throw new RuntimeException(e);
    }
  }
}
