{
  StringBuilder sb=new StringBuilder(1024);
  sb.append(" CLUSTER ");
  ClusterType ct=deployment.getCluster();
  sb.append(ct.getHostcount()).append(",");
  sb.append(ct.getKfactor()).append(",");
  sb.append(ct.getSitesperhost()).append(",");
  sb.append(" PARTITIONDETECTION ");
  PartitionDetectionType pdt=deployment.getPartitionDetection();
  if (pdt != null) {
    sb.append(pdt.isEnabled()).append(",");
    PartitionDetectionType.Snapshot st=pdt.getSnapshot();
    assert(st != null);
    sb.append(st.getPrefix()).append(",");
  }
  sb.append(" SECURITY ");
  SecurityType st=deployment.getSecurity();
  if (st != null) {
    sb.append(st.isEnabled());
  }
  sb.append(" ADMINMODE ");
  AdminModeType amt=deployment.getAdminMode();
  if (amt != null) {
    sb.append(amt.getPort()).append(",");
    sb.append(amt.isAdminstartup()).append("\n");
  }
  sb.append(" HEARTBEATCONFIG ");
  HeartbeatType hbt=deployment.getHeartbeat();
  if (hbt != null) {
    sb.append(hbt.getTimeout()).append("\n");
  }
  sb.append(" USERS ");
  UsersType ut=deployment.getUsers();
  if (ut != null) {
    List<User> users=ut.getUser();
    for (    User u : users) {
      sb.append(" USER ");
      sb.append(u.getName()).append(",");
      sb.append(Arrays.toString(mergeUserRoles(u).toArray()));
      sb.append(",").append(u.getPassword()).append(",");
    }
  }
  sb.append("\n");
  sb.append(" HTTPD ");
  HttpdType ht=deployment.getHttpd();
  if (ht != null) {
    HttpdType.Jsonapi jt=ht.getJsonapi();
    if (jt != null) {
      sb.append(jt.isEnabled()).append(",");
    }
    sb.append(ht.isEnabled());
    sb.append(ht.getPort());
  }
  sb.append(" SYSTEMSETTINGS ");
  SystemSettingsType sst=deployment.getSystemsettings();
  if (sst != null) {
    sb.append(" TEMPTABLES ");
    Temptables ttt=sst.getTemptables();
    if (ttt != null) {
      sb.append(ttt.getMaxsize()).append("\n");
    }
  }
  byte[] data=null;
  try {
    data=sb.toString().getBytes("UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    hostLog.error("CRCing deployment file to determine" + " compatibility and determined deployment file is" + " not valid UTF-8. File must be UTF-8 encoded.");
    data=new byte[]{0x0};
  }
  CRC32 crc=new CRC32();
  crc.update(data);
  long retval=crc.getValue();
  return Math.abs(retval);
}
