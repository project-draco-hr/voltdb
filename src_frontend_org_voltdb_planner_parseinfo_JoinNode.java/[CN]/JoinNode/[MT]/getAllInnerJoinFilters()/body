{
  ArrayDeque<JoinNode> joinNodes=new ArrayDeque<JoinNode>();
  ArrayDeque<AbstractExpression> in=new ArrayDeque<AbstractExpression>();
  ArrayDeque<AbstractExpression> out=new ArrayDeque<AbstractExpression>();
  joinNodes.add(this);
  while (!joinNodes.isEmpty()) {
    JoinNode joinNode=joinNodes.poll();
    if (joinNode.m_joinExpr != null) {
      in.add(joinNode.m_joinExpr);
    }
    if (joinNode.m_whereExpr != null) {
      in.add(joinNode.m_whereExpr);
    }
    joinNode.queueChildren(joinNodes);
  }
  AbstractExpression inExpr=null;
  while ((inExpr=in.poll()) != null) {
    if (inExpr.getExpressionType() == ExpressionType.CONJUNCTION_AND) {
      in.add(inExpr.getLeft());
      in.add(inExpr.getRight());
    }
 else {
      out.add(inExpr);
    }
  }
  return ExpressionUtil.combine(out);
}
