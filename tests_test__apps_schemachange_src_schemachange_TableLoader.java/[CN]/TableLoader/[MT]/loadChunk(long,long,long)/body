{
  assert(startPkey < stopPkey);
  assert(startPkey >= 0);
  long nextPkey=startPkey;
  long maxSentPkey=-1;
  hadError.set(false);
  while ((nextPkey <= stopPkey) && (!hadError.get())) {
    Object[] row=TableHelper.randomRow(table,Integer.MAX_VALUE,rand);
    row[pkeyColIndex]=nextPkey;
    try {
      outstandingPkeys.add(nextPkey);
      maxSentPkey=nextPkey;
      client.callProcedure(new Callback(nextPkey),insertCRUD,row);
    }
 catch (    Exception e) {
      break;
    }
    nextPkey+=jump;
  }
  try {
    client.drain();
  }
 catch (  Exception e) {
  }
  long minOutstandingPkey=-1;
  try {
    minOutstandingPkey=outstandingPkeys.first();
  }
 catch (  NoSuchElementException e) {
    assert((maxSentPkey + jump) > stopPkey);
    return stopPkey;
  }
  assert(minOutstandingPkey >= 0);
  for (long pkey=minOutstandingPkey; pkey <= maxSentPkey; pkey+=jump) {
    long modCount=scc.callROProcedureWithRetry(deleteCRUD,pkey).getResults()[0].asScalarLong();
    assert((modCount >= 0) && (modCount <= 1));
  }
  return Math.max(minOutstandingPkey - jump,-1);
}
