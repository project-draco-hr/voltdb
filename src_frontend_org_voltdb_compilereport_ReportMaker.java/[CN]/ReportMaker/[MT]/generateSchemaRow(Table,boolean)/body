{
  StringBuilder sb=new StringBuilder();
  sb.append("<tr class='primaryrow'>");
  String anchor=table.getTypeName().toLowerCase();
  sb.append("<td style='white-space: nowrap;'><i id='s-" + anchor + "--icon' class='icon-chevron-right'></i> <a href='#' id='s-");
  sb.append(anchor).append("' class='togglex'>");
  sb.append(table.getTypeName());
  sb.append("</a></td>");
  sb.append("<td>");
  if (table.getMaterializer() != null) {
    tag(sb,"info","Materialized View");
  }
 else {
    if (isExportTable) {
      tag(sb,"inverse","Export Table");
    }
 else {
      tag(sb,null,"Table");
    }
  }
  sb.append("</td>");
  sb.append("<td style='whitespace: nowrap;'>");
  if (table.getIsreplicated()) {
    tag(sb,"warning","Replicated");
  }
 else {
    tag(sb,"success","Partitioned");
    Column partitionCol=table.getPartitioncolumn();
    if (partitionCol != null) {
      sb.append("<small> on " + partitionCol.getName() + "</small>");
    }
 else {
      Table matSrc=table.getMaterializer();
      if (matSrc != null) {
        sb.append("<small> with " + matSrc.getTypeName() + "</small>");
      }
    }
  }
  sb.append("</td>");
  sb.append("<td>");
  sb.append(table.getColumns().size());
  sb.append("</td>");
  sb.append("<td>");
  sb.append(table.getIndexes().size());
  int unusedIndexes=0;
  for (  Index index : table.getIndexes()) {
    IndexAnnotation indexAnnotation=(IndexAnnotation)index.getAnnotation();
    if (indexAnnotation == null) {
      unusedIndexes++;
    }
  }
  if (unusedIndexes != 0) {
    sb.append(" (" + unusedIndexes + " unused)");
  }
  sb.append("</td>");
  sb.append("<td>");
  boolean found=false;
  for (  Constraint constraint : table.getConstraints()) {
    if (ConstraintType.get(constraint.getType()) == ConstraintType.PRIMARY_KEY) {
      found=true;
      break;
    }
  }
  if (found) {
    tag(sb,"info","Has-PKey");
  }
 else {
    tag(sb,null,"No-PKey");
  }
  sb.append("</td>");
  sb.append("<td>");
  if (table.getTuplelimit() != Integer.MAX_VALUE) {
    tag(sb,"info",String.valueOf(table.getTuplelimit()));
    if (CatalogUtil.getLimitPartitionRowsDeleteStmt(table) != null) {
      sb.append("<small>enforced by DELETE statement</small>");
    }
  }
 else {
    tag(sb,null,"No-limit");
  }
  sb.append("</td>");
  sb.append("</tr>\n");
  sb.append("<tr class='tablesorter-childRow'><td class='invert' colspan='7' id='s-" + table.getTypeName().toLowerCase() + "--dropdown'>\n");
  TableAnnotation annotation=(TableAnnotation)table.getAnnotation();
  if (annotation != null) {
    if (annotation.ddl == null) {
      sb.append("<p>MISSING DDL</p>\n");
    }
 else {
      String ddl=escapeHtml4(annotation.ddl);
      sb.append("<p><pre>" + ddl + "</pre></p>\n");
    }
    annotation.proceduresThatReadThis.removeAll(annotation.proceduresThatUpdateThis);
    if (annotation.proceduresThatReadThis.size() > 0) {
      sb.append("<p>Read-only by procedures: ");
      List<String> procs=new ArrayList<String>();
      for (      Procedure proc : annotation.proceduresThatReadThis) {
        procs.add("<a href='#p-" + proc.getTypeName() + "'>"+ proc.getTypeName()+ "</a>");
      }
      sb.append(StringUtils.join(procs,", "));
      sb.append("</p>");
    }
    if (annotation.proceduresThatUpdateThis.size() > 0) {
      sb.append("<p>Read/Write by procedures: ");
      List<String> procs=new ArrayList<String>();
      for (      Procedure proc : annotation.proceduresThatUpdateThis) {
        procs.add("<a href='#p-" + proc.getTypeName() + "'>"+ proc.getTypeName()+ "</a>");
      }
      sb.append(StringUtils.join(procs,", "));
      sb.append("</p>");
    }
  }
  if (!table.getTuplelimitdeletestmt().isEmpty()) {
    assert(table.getTuplelimitdeletestmt().size() == 1);
    Statement stmt=table.getTuplelimitdeletestmt().iterator().next();
    for (    String tableDotIndexPair : stmt.getIndexesused().split(",")) {
      if (tableDotIndexPair.length() == 0)       continue;
      String parts[]=tableDotIndexPair.split("\\.",2);
      assert(parts.length == 2);
      if (parts.length != 2)       continue;
      String tableName=parts[0];
      String indexName=parts[1];
      if (!table.getTypeName().equals(tableName))       continue;
      Index i=table.getIndexes().get(indexName);
      assert(i != null);
      IndexAnnotation ia=(IndexAnnotation)i.getAnnotation();
      if (ia == null) {
        ia=new IndexAnnotation();
        i.setAnnotation(ia);
      }
      ia.statementsThatUseThis.add(stmt);
    }
  }
  if (table.getIndexes().size() > 0) {
    sb.append(generateIndexesTable(table));
  }
 else {
    sb.append("<p>No indexes defined on table.</p>\n");
  }
  sb.append("</td></tr>\n");
  return sb.toString();
}
