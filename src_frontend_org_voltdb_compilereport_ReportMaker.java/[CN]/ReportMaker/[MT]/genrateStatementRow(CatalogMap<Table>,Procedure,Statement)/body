{
  ProcedureAnnotation procAnnotation=(ProcedureAnnotation)procedure.getAnnotation();
  assert(procAnnotation != null);
  StringBuilder sb=new StringBuilder();
  sb.append("        <tr class='primaryrow2'>");
  String anchor=(procedure.getTypeName() + "-" + statement.getTypeName()).toLowerCase();
  sb.append("<td style='white-space: nowrap'><i id='p-" + anchor + "--icon' class='icon-chevron-right'></i> <a href='#' id='p-");
  sb.append(anchor).append("' class='togglex'>");
  sb.append(statement.getTypeName());
  sb.append("</a></td>");
  sb.append("<td><tt>");
  sb.append(escapeHtml4(statement.getSqltext()));
  sb.append("</td></tt>");
  sb.append("<td>");
  List<StmtParameter> params=CatalogUtil.getSortedCatalogItems(statement.getParameters(),"index");
  List<String> paramTypes=new ArrayList<String>();
  for (  StmtParameter param : params) {
    paramTypes.add(VoltType.get((byte)param.getJavatype()).name());
  }
  if (paramTypes.size() == 0) {
    sb.append("<i>None</i>");
  }
  sb.append(StringUtils.join(paramTypes,", "));
  sb.append("</td>");
  sb.append("<td>");
  if (statement.getReadonly()) {
    tag(sb,"success","Read");
  }
 else {
    tag(sb,"warning","Write");
  }
  sb.append("</td>");
  sb.append("<td>");
  if (!statement.getIscontentdeterministic() || !statement.getIsorderdeterministic()) {
    tag(sb,"inverse","Determinism");
  }
  if (statement.getSeqscancount() > 0) {
    tag(sb,"important","Scans");
  }
  sb.append("</td>");
  sb.append("</tr>\n");
  sb.append("<tr class='dropdown2'><td colspan='5' id='p-" + procedure.getTypeName().toLowerCase() + "-"+ statement.getTypeName().toLowerCase()+ "--dropdown'>\n");
  sb.append("<div class='well well-small'><h4>Explain Plan:</h4>\n");
  String plan=escapeHtml4(Encoder.hexDecodeToString(statement.getExplainplan()));
  plan=plan.replace("\n","<br/>");
  plan=plan.replace(" ","&nbsp;");
  for (  String tableName : statement.getTablesread().split(",")) {
    if (tableName.length() == 0)     continue;
    Table t=tables.get(tableName);
    assert(t != null);
    TableAnnotation ta=(TableAnnotation)t.getAnnotation();
    assert(ta != null);
    ta.statementsThatReadThis.add(statement);
    ta.proceduresThatReadThis.add(procedure);
    procAnnotation.tablesRead.add(t);
    String uname=tableName.toUpperCase();
    String link="\"<a href='#s-" + tableName + "'>"+ uname+ "</a>\"";
    plan=plan.replace("&quot;" + uname + "&quot;",link);
  }
  for (  String tableName : statement.getTablesupdated().split(",")) {
    if (tableName.length() == 0)     continue;
    Table t=tables.get(tableName);
    assert(t != null);
    TableAnnotation ta=(TableAnnotation)t.getAnnotation();
    assert(ta != null);
    ta.statementsThatUpdateThis.add(statement);
    ta.proceduresThatUpdateThis.add(procedure);
    procAnnotation.tablesUpdated.add(t);
    String uname=tableName.toUpperCase();
    String link="\"<a href='#s-" + tableName + "'>"+ uname+ "</a>\"";
    plan=plan.replace("&quot;" + uname + "&quot;",link);
  }
  for (  String tableDotIndexPair : statement.getIndexesused().split(",")) {
    if (tableDotIndexPair.length() == 0)     continue;
    String parts[]=tableDotIndexPair.split("\\.",2);
    assert(parts.length == 2);
    if (parts.length != 2)     continue;
    String tableName=parts[0];
    String indexName=parts[1];
    Table t=tables.get(tableName);
    assert(t != null);
    Index i=t.getIndexes().get(indexName);
    assert(i != null);
    IndexAnnotation ia=(IndexAnnotation)i.getAnnotation();
    if (ia == null) {
      ia=new IndexAnnotation();
      i.setAnnotation(ia);
    }
    ia.proceduresThatUseThis.add(procedure);
    ia.statementsThatUseThis.add(statement);
    procAnnotation.indexesUsed.add(i);
    String uindexName=indexName.toUpperCase();
    String link="\"<a href='#s-" + tableName + "-"+ indexName+ "'>"+ uindexName+ "</a>\"";
    plan=plan.replace("&quot;" + uindexName + "&quot;",link);
  }
  sb.append("<tt>").append(plan).append("</tt>");
  sb.append("</div>\n");
  sb.append("</td></tr>\n");
  return sb.toString();
}
