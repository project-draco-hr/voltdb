{
  try {
    ArrayList<Long> cpList=new ArrayList<Long>();
    while ((currentRowCount.get() < targetCount) && (m_shouldContinue.get())) {
      byte shouldCopy=(byte)(m_random.nextInt(3) == 0 ? 1 : 0);
      CountDownLatch latch=new CountDownLatch(batchSize);
      for (int i=0; i < batchSize; i++) {
        m_table.clearRowData();
        m_permits.acquire();
        long p=Math.abs(r.nextLong());
        m_table.addRow(p,p,Calendar.getInstance().getTimeInMillis());
        if (shouldCopy != 0) {
          cpList.add(p);
        }
        if (!m_isMP) {
          Object rpartitionParam=TheHashinator.valueToBytes(m_table.fetchRow(0).get(m_partitionedColumnIndex,VoltType.BIGINT));
          client.callProcedure(new InsertCallback(latch),m_procName,rpartitionParam,m_tableName,m_table);
        }
 else {
          client.callProcedure(new InsertCallback(latch),m_procName,m_tableName,m_table);
        }
      }
      latch.await(60,TimeUnit.SECONDS);
      long nextRowCount=getRowCount();
      if (nextRowCount == currentRowCount.get()) {
        Thread.sleep(1000);
      }
      if (!m_isMP) {
        CountDownLatch clatch=new CountDownLatch(cpList.size());
        for (        Long lcid : cpList) {
          client.callProcedure(new InsertCopyCallback(clatch),"CopyLoadPartitionedSP",lcid);
        }
        clatch.await(10,TimeUnit.SECONDS);
        CountDownLatch dlatch=new CountDownLatch(cpList.size());
        for (        Long lcid : cpList) {
          client.callProcedure(new DeleteCallback(dlatch),"DeleteLoadPartitionedSP",lcid);
        }
        dlatch.await(10,TimeUnit.SECONDS);
        cpList.clear();
      }
 else {
        CountDownLatch clatch=new CountDownLatch(cpList.size());
        for (        Long lcid : cpList) {
          client.callProcedure(new InsertCopyCallback(clatch),"CopyLoadPartitionedMP",lcid);
        }
        clatch.await(10,TimeUnit.SECONDS);
        CountDownLatch dlatch=new CountDownLatch(cpList.size());
        for (        Long lcid : cpList) {
          client.callProcedure(new DeleteCallback(dlatch),"DeleteLoadPartitionedMP",lcid);
        }
        dlatch.await(10,TimeUnit.SECONDS);
        cpList.clear();
      }
    }
  }
 catch (  Exception e) {
    log.error("LoadTableLoader failed a procedure call for table " + m_tableName + " and the thread will now stop.",e);
  }
}
