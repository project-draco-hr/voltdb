def go(self, verb, runner):
    if self.check_environment_config:
        incompatible_options = checkconfig.check_config()
        if (incompatible_options is not None):
            utility.abort(incompatible_options)
    final_args = None
    if (self.subcommand in ('create', 'recover')):
        if runner.opts.replica:
            final_args = [self.subcommand, 'replica']
    if self.supports_live:
        if runner.opts.block:
            final_args = [self.subcommand]
        else:
            final_args = ['live', self.subcommand]
    elif (final_args == None):
        final_args = [self.subcommand]
    if self.safemode_available:
        if runner.opts.safemode:
            final_args.extend(['safemode'])
    if self.needs_catalog:
        catalog = runner.opts.catalog
        if (not catalog):
            catalog = runner.config.get('volt.catalog')
        if (not (catalog is None)):
            final_args.extend(['catalog', catalog])
    if runner.opts.deployment:
        final_args.extend(['deployment', runner.opts.deployment])
    if runner.opts.placementgroup:
        final_args.extend(['placementgroup', runner.opts.placementgroup])
    if runner.opts.host:
        final_args.extend(['host', runner.opts.host])
    else:
        utility.abort('host is required.')
    if runner.opts.clientport:
        final_args.extend(['port', runner.opts.clientport])
    if runner.opts.adminport:
        final_args.extend(['adminport', runner.opts.adminport])
    if runner.opts.httpport:
        final_args.extend(['httpport', runner.opts.httpport])
    if runner.opts.license:
        final_args.extend(['license', runner.opts.license])
    if runner.opts.internalinterface:
        final_args.extend(['internalinterface', runner.opts.internalinterface])
    if runner.opts.internalport:
        final_args.extend(['internalport', runner.opts.internalport])
    if runner.opts.replicationport:
        final_args.extend(['replicationport', runner.opts.replicationport])
    if runner.opts.zkport:
        final_args.extend(['zkport', runner.opts.zkport])
    if runner.opts.externalinterface:
        final_args.extend(['externalinterface', runner.opts.externalinterface])
    if runner.opts.publicinterface:
        final_args.extend(['publicinterface', runner.opts.publicinterface])
    if runner.args:
        final_args.extend(runner.args)
    kwargs = {}
    if (self.supports_daemon and runner.opts.daemon):
        daemon_description = self.daemon_description
        if (daemon_description is None):
            daemon_description = 'VoltDB server'
        runner.setup_daemon_kwargs(kwargs, name=self.daemon_name, description=daemon_description, output=self.daemon_output)
    else:
        kwargs['exec'] = True
    self.run_java(verb, runner, *final_args, **kwargs)
