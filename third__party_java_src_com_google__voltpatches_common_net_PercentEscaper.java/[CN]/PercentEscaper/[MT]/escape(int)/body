{
  if (cp < safeOctets.length && safeOctets[cp]) {
    return null;
  }
 else   if (cp == ' ' && plusForSpace) {
    return PLUS_SIGN;
  }
 else   if (cp <= 0x7F) {
    char[] dest=new char[3];
    dest[0]='%';
    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];
    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];
    return dest;
  }
 else   if (cp <= 0x7ff) {
    char[] dest=new char[6];
    dest[0]='%';
    dest[3]='%';
    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];
    cp>>>=2;
    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[1]=UPPER_HEX_DIGITS[0xC | cp];
    return dest;
  }
 else   if (cp <= 0xffff) {
    char[] dest=new char[9];
    dest[0]='%';
    dest[1]='E';
    dest[3]='%';
    dest[6]='%';
    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];
    cp>>>=2;
    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];
    cp>>>=2;
    dest[2]=UPPER_HEX_DIGITS[cp];
    return dest;
  }
 else   if (cp <= 0x10ffff) {
    char[] dest=new char[12];
    dest[0]='%';
    dest[1]='F';
    dest[3]='%';
    dest[6]='%';
    dest[9]='%';
    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];
    cp>>>=2;
    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];
    cp>>>=2;
    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];
    cp>>>=4;
    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];
    cp>>>=2;
    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];
    return dest;
  }
 else {
    throw new IllegalArgumentException("Invalid unicode character value " + cp);
  }
}
