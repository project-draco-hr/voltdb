{
  MAX_LITERAL_ENTRIES=maxLiteralEntries;
  MAX_CORE_ENTRIES=maxCoreEntries;
  m_literalCache=new LinkedHashMap<String,AdHocPlannedStatement>(MAX_LITERAL_ENTRIES * 2,.75f,true){
    private static final long serialVersionUID=1L;
    @Override public boolean removeEldestEntry(    Map.Entry<String,AdHocPlannedStatement> eldest){
      if (size() > MAX_LITERAL_ENTRIES) {
        ++m_literalEvictions;
        return true;
      }
      return false;
    }
  }
;
  m_coreCache=new LinkedHashMap<String,CorePlan>(MAX_CORE_ENTRIES * 2,.75f,true){
    private static final long serialVersionUID=1L;
    @Override public boolean removeEldestEntry(    Map.Entry<String,CorePlan> eldest){
      if (size() > MAX_CORE_ENTRIES) {
        ++m_planEvictions;
        return true;
      }
      return false;
    }
  }
;
}
