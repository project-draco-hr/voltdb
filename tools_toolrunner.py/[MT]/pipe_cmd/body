def pipe_cmd(*args):
    '\n    Run program, capture output, and yield each output line for iteration.\n    '
    try:
        verbose_info('Running external command:', args)
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        for line in iter(proc.stdout.readline, ''):
            yield (False, line.rstrip())
        for line in iter(proc.stderr.readline, ''):
            yield (True, line.rstrip())
        proc.stdout.close()
        proc.stderr.close()
        returncode = proc.wait()
        if (returncode != 0):
            abort(('Command failed with return code %d:' % returncode), (' '.join(args),))
    except Exception as e:
        abort(('Exception running command: %s' % ' '.join(args)), e)
