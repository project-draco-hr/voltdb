def vmain(description='(no description)', standalone=False, directory='', packages=None, verbose=False):
    '\n    Main entry point for commands running in an auto-generated virtual environment.\n    :param description:\n    :param standalone:\n    :param directory:\n    :param packages:\n    :param verbose:\n    '
    G.verbose = verbose
    start_logging()
    vname = ('%s.venv' % G.script_name)
    venv_base = os.path.join(G.script_dir, vname)
    venv_dir = os.path.join(venv_base, sys.platform)
    venv_complete = False
    try:
        try:
            if (not os.path.isdir(venv_base)):
                info(('Creating virtual environment "%s" ...' % venv_dir))
                os.makedirs(venv_base)
            if (not os.path.isdir(venv_dir)):
                virtualenv = find_in_path('virtualenv', required=True)
                pip = os.path.join(venv_dir, 'bin', 'pip')
                save_dir = os.getcwd()
                try:
                    os.chdir(venv_base)
                    info('Initializing Python virtual environment ...')
                    run_cmd(virtualenv, '--clear', '--system-site-packages', sys.platform)
                    if packages:
                        for package in packages:
                            info(('Installing package "%s" into virtual environment ...' % package))
                            run_cmd(pip, 'install', package)
                finally:
                    os.chdir(save_dir)
            venv_complete = True
            python = os.path.join(venv_dir, 'bin', 'python')
            args = ([python, G.module_path, G.script_name, G.script_dir, os.path.dirname(G.script_dir), str(description), str(standalone), str(directory), str(verbose)] + sys.argv[1:])
            verbose_info('Re-starting with virtual environment:', args)
            os.execvp(python, args)
        except KeyboardInterrupt:
            sys.stderr.write('\n<break>\n')
    finally:
        stop_logging()
        if ((not venv_complete) and os.path.exists(venv_dir)):
            warning('Removing incomplete virtual environment after installation failure ...')
            shutil.rmtree(venv_dir, True)
