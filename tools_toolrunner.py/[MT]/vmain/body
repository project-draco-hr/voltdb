def vmain(description='(no description)', standalone=False, directory='', packages=None, verbose=False, libpath=''):
    '\n    Main entry point for commands running in an auto-generated virtual environment.\n    :param description:\n    :param standalone:\n    :param directory:\n    :param packages:\n    :param verbose:\n    '
    G.verbose = verbose
    start_logging()
    output_dir = os.path.join(G.user_dir, G.script_name)
    if (not os.path.isdir(output_dir)):
        if os.path.exists(output_dir):
            abort(('Output path "%s" exists, but is not a directory.' % output_dir), 'Please move or delete it before running this command again.')
        try:
            os.makedirs(output_dir)
        except (IOError, OSError) as e:
            abort(('Output path "%s" exists, but is not a directory.' % output_dir), 'Please move or delete it before running this command again.', e)
    venv_base = os.path.join(output_dir, 'venv')
    venv_dir = os.path.join(venv_base, sys.platform)
    venv_complete = False
    version = get_version(os.path.dirname(G.script_dir))
    try:
        try:
            build_venv = (not os.path.isdir(venv_dir))
            if (not build_venv):
                venv_version = get_version(venv_dir, error_abort=False)
                if (venv_version is None):
                    warning('Unable to read the version file:', [os.path.join(venv_dir, 'version.txt')], 'Assuming that the virtual environment is current.', 'To force a rebuild delete the virtual environment base directory:', [venv_base])
                else:
                    build_venv = (venv_version != version)
            if build_venv:
                _build_virtual_environment(venv_dir, version, packages)
            venv_complete = True
            python = os.path.join(venv_dir, 'bin', 'python')
            args = ([python, G.module_path, G.script_name, G.script_dir, os.path.dirname(G.script_dir), str(description), str(standalone), str(directory), str(verbose), libpath] + sys.argv[1:])
            verbose_info('Re-starting with virtual environment:', args)
            os.execvp(python, args)
        except KeyboardInterrupt:
            sys.stderr.write('\n<break>\n')
    finally:
        stop_logging()
        if ((not venv_complete) and os.path.exists(venv_dir)):
            warning('Removing incomplete virtual environment after installation failure ...')
            shutil.rmtree(venv_dir, True)
