def vmain(description='(no description)', standalone=False, directory='', packages=None, verbose=False, libpath=''):
    '\n    Main entry point for commands running in an auto-generated virtual environment.\n    :param description:\n    :param standalone:\n    :param directory:\n    :param packages:\n    :param verbose:\n    '
    G.verbose = verbose
    start_logging()
    vname = ('%s.venv' % G.script_name)
    venv_base = os.path.join(G.script_dir, vname)
    venv_dir = os.path.join(venv_base, sys.platform)
    venv_complete = False
    try:
        try:
            if (not os.path.isdir(venv_base)):
                os.makedirs(venv_base)
            if (not os.path.isdir(venv_dir)):
                save_dir = os.getcwd()
                save_lc_all = os.environ.get('LC_ALL', None)
                os.environ['LC_ALL'] = 'C'
                try:
                    os.chdir(venv_base)
                    args = get_virtualenv()
                    pip = os.path.join(venv_dir, 'bin', 'pip')
                    info(('Preparing the %s Python virtual environment:' % G.script_name), ['(an Internet connection is required)', ('Folder: %s' % venv_dir)])
                    args += ['--clear', '--system-site-packages', sys.platform]
                    run_cmd(*args)
                    if packages:
                        for package in packages:
                            info(('Installing virtual environment package: %s' % package))
                            run_cmd(pip, 'install', package)
                finally:
                    os.chdir(save_dir)
                    if (save_lc_all is None):
                        del os.environ['LC_ALL']
                    else:
                        os.environ['LC_ALL'] = save_lc_all
            venv_complete = True
            python = os.path.join(venv_dir, 'bin', 'python')
            args = ([python, G.module_path, G.script_name, G.script_dir, os.path.dirname(G.script_dir), str(description), str(standalone), str(directory), str(verbose), libpath] + sys.argv[1:])
            verbose_info('Re-starting with virtual environment:', args)
            os.execvp(python, args)
        except KeyboardInterrupt:
            sys.stderr.write('\n<break>\n')
    finally:
        stop_logging()
        if ((not venv_complete) and os.path.exists(venv_dir)):
            warning('Removing incomplete virtual environment after installation failure ...')
            shutil.rmtree(venv_dir, True)
