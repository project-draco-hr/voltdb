{
  this.zooKeeper=zooKeeper;
  this.watcher=watcher;
  this.sessionId=sessionId;
  this.sessionPasswd=sessionPasswd;
  int off=hosts.indexOf('/');
  if (off >= 0) {
    String chrootPath=hosts.substring(off);
    if (chrootPath.length() == 1) {
      this.chrootPath=null;
    }
 else {
      PathUtils.validatePath(chrootPath);
      this.chrootPath=chrootPath;
    }
    hosts=hosts.substring(0,off);
  }
 else {
    this.chrootPath=null;
  }
  String hostsList[]=hosts.split(",");
  for (  String host : hostsList) {
    int port=2181;
    int pidx=host.lastIndexOf(':');
    if (pidx >= 0) {
      if (pidx < host.length() - 1) {
        port=Integer.parseInt(host.substring(pidx + 1));
      }
      host=host.substring(0,pidx);
    }
    InetAddress addrs[]=InetAddress.getAllByName(host);
    for (    InetAddress addr : addrs) {
      serverAddrs.add(new InetSocketAddress(addr,port));
    }
  }
  this.sessionTimeout=sessionTimeout;
  connectTimeout=sessionTimeout / hostsList.length;
  readTimeout=sessionTimeout * 2 / 3;
  Collections.shuffle(serverAddrs);
  sendThread=new SendThread();
  eventThread=new EventThread();
}
