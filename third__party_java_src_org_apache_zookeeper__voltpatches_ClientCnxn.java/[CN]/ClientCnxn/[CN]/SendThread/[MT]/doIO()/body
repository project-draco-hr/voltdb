{
  boolean packetReceived=false;
  SocketChannel sock=(SocketChannel)sockKey.channel();
  if (sock == null) {
    throw new IOException("Socket is null!");
  }
  if (sockKey.isReadable()) {
    int rc=sock.read(incomingBuffer);
    if (rc < 0) {
      throw new EndOfStreamException("Unable to read additional data from server sessionid 0x" + Long.toHexString(sessionId) + ", likely server has closed socket");
    }
    if (!incomingBuffer.hasRemaining()) {
      incomingBuffer.flip();
      if (incomingBuffer == lenBuffer) {
        recvCount++;
        readLength();
      }
 else       if (!initialized) {
        readConnectResult();
        enableRead();
        if (!outgoingQueue.isEmpty()) {
          enableWrite();
        }
        lenBuffer.clear();
        incomingBuffer=lenBuffer;
        packetReceived=true;
        initialized=true;
      }
 else {
        readResponse();
        lenBuffer.clear();
        incomingBuffer=lenBuffer;
        packetReceived=true;
      }
    }
  }
  if (sockKey.isWritable()) {
synchronized (outgoingQueue) {
      if (!outgoingQueue.isEmpty()) {
        ByteBuffer pbb=outgoingQueue.getFirst().bb;
        sock.write(pbb);
        if (!pbb.hasRemaining()) {
          sentCount++;
          Packet p=outgoingQueue.removeFirst();
          if (p.header != null && p.header.getType() != OpCode.ping && p.header.getType() != OpCode.auth) {
            pendingQueue.add(p);
          }
        }
      }
    }
  }
  if (outgoingQueue.isEmpty()) {
    disableWrite();
  }
 else {
    enableWrite();
  }
  return packetReceived;
}
