{
  try {
    if (event instanceof WatcherSetEventPair) {
      WatcherSetEventPair pair=(WatcherSetEventPair)event;
      for (      Watcher watcher : pair.watchers) {
        try {
          watcher.process(pair.event);
        }
 catch (        Throwable t) {
          LOG.error("Error while calling watcher ",t);
        }
      }
    }
 else {
      Packet p=(Packet)event;
      int rc=0;
      String clientPath=p.clientPath;
      if (p.replyHeader.getErr() != 0) {
        rc=p.replyHeader.getErr();
      }
      if (p.cb == null) {
        LOG.warn("Somehow a null cb got to EventThread!");
      }
 else       if (p.response instanceof ExistsResponse || p.response instanceof SetDataResponse || p.response instanceof SetACLResponse) {
        StatCallback cb=(StatCallback)p.cb;
        if (rc == 0) {
          if (p.response instanceof ExistsResponse) {
            cb.processResult(rc,clientPath,p.ctx,((ExistsResponse)p.response).getStat());
          }
 else           if (p.response instanceof SetDataResponse) {
            cb.processResult(rc,clientPath,p.ctx,((SetDataResponse)p.response).getStat());
          }
 else           if (p.response instanceof SetACLResponse) {
            cb.processResult(rc,clientPath,p.ctx,((SetACLResponse)p.response).getStat());
          }
        }
 else {
          cb.processResult(rc,clientPath,p.ctx,null);
        }
      }
 else       if (p.response instanceof GetDataResponse) {
        DataCallback cb=(DataCallback)p.cb;
        GetDataResponse rsp=(GetDataResponse)p.response;
        if (rc == 0) {
          cb.processResult(rc,clientPath,p.ctx,rsp.getData(),rsp.getStat());
        }
 else {
          cb.processResult(rc,clientPath,p.ctx,null,null);
        }
      }
 else       if (p.response instanceof GetACLResponse) {
        ACLCallback cb=(ACLCallback)p.cb;
        GetACLResponse rsp=(GetACLResponse)p.response;
        if (rc == 0) {
          cb.processResult(rc,clientPath,p.ctx,rsp.getAcl(),rsp.getStat());
        }
 else {
          cb.processResult(rc,clientPath,p.ctx,null,null);
        }
      }
 else       if (p.response instanceof GetChildrenResponse) {
        ChildrenCallback cb=(ChildrenCallback)p.cb;
        GetChildrenResponse rsp=(GetChildrenResponse)p.response;
        if (rc == 0) {
          cb.processResult(rc,clientPath,p.ctx,rsp.getChildren());
        }
 else {
          cb.processResult(rc,clientPath,p.ctx,null);
        }
      }
 else       if (p.response instanceof GetChildren2Response) {
        Children2Callback cb=(Children2Callback)p.cb;
        GetChildren2Response rsp=(GetChildren2Response)p.response;
        if (rc == 0) {
          cb.processResult(rc,clientPath,p.ctx,rsp.getChildren(),rsp.getStat());
        }
 else {
          cb.processResult(rc,clientPath,p.ctx,null,null);
        }
      }
 else       if (p.response instanceof CreateResponse) {
        StringCallback cb=(StringCallback)p.cb;
        CreateResponse rsp=(CreateResponse)p.response;
        if (rc == 0) {
          cb.processResult(rc,clientPath,p.ctx,(chrootPath == null ? rsp.getPath() : rsp.getPath().substring(chrootPath.length())));
        }
 else {
          cb.processResult(rc,clientPath,p.ctx,null);
        }
      }
 else       if (p.cb instanceof VoidCallback) {
        VoidCallback cb=(VoidCallback)p.cb;
        cb.processResult(rc,clientPath,p.ctx);
      }
    }
  }
 catch (  Throwable t) {
    LOG.error("Caught unexpected throwable",t);
  }
}
