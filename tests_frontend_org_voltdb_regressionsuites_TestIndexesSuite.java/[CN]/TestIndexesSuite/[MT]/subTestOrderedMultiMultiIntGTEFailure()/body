{
  final Client client=getClient();
  final VoltTable results[]=client.callProcedure("CheckMultiMultiIntGTEFailure").getResults();
  if (results == null) {
    fail();
  }
  assertEquals(10,results.length);
  int tableI=0;
  final VoltTableRow countEQ=results[tableI].fetchRow(0);
  assertEquals(2,countEQ.getLong(0));
  tableI++;
  final VoltTableRow countGT=results[tableI].fetchRow(0);
  assertEquals(3,countGT.getLong(0));
  tableI++;
  final VoltTableRow countGTE=results[tableI].fetchRow(0);
  assertEquals(1,countGTE.getLong(0));
  tableI++;
  final VoltTableRow countLTE=results[tableI].fetchRow(0);
  assertEquals(3,countLTE.getLong(0));
  tableI++;
  final VoltTableRow countLT=results[tableI].fetchRow(0);
  assertEquals(1,countLT.getLong(0));
  tableI++;
  int rowI=0;
  assertEquals(2,results[tableI].getRowCount());
  final VoltTableRow rowEQ0=results[tableI].fetchRow(rowI++);
  assertEquals(0,rowEQ0.getLong(0));
  assertEquals(0,rowEQ0.getLong(1));
  final VoltTableRow rowEQ1=results[tableI].fetchRow(rowI++);
  assertEquals(0,rowEQ1.getLong(0));
  assertEquals(1,rowEQ1.getLong(1));
  tableI++;
  rowI=0;
  assertEquals(3,results[tableI].getRowCount());
  final VoltTableRow rowGTE0=results[tableI].fetchRow(rowI++);
  assertEquals(0,rowGTE0.getLong(0));
  assertEquals(0,rowGTE0.getLong(1));
  final VoltTableRow rowGTE1=results[tableI].fetchRow(rowI++);
  assertEquals(0,rowGTE1.getLong(0));
  assertEquals(1,rowGTE1.getLong(1));
  final VoltTableRow rowGTE2=results[tableI].fetchRow(rowI++);
  assertEquals(1,rowGTE2.getLong(0));
  assertEquals(1,rowGTE2.getLong(1));
  tableI++;
  rowI=0;
  assertEquals(1,results[tableI].getRowCount());
  final VoltTableRow rowGT0=results[tableI].fetchRow(rowI++);
  assertEquals(1,rowGT0.getLong(0));
  assertEquals(1,rowGT0.getLong(1));
  tableI++;
  rowI=0;
  assertEquals(3,results[tableI].getRowCount());
  final VoltTableRow rowLTE0=results[tableI].fetchRow(rowI++);
  final VoltTableRow rowLTE1=results[tableI].fetchRow(rowI++);
  final VoltTableRow rowLTE2=results[tableI].fetchRow(rowI++);
  HashSet<Long> TID=new HashSet<Long>();
  HashSet<Long> BID=new HashSet<Long>();
  HashSet<Long> expectedTID=new HashSet<Long>();
  HashSet<Long> expectedBID=new HashSet<Long>();
  expectedTID.add(-1L);
  expectedTID.add(0L);
  expectedTID.add(0L);
  expectedBID.add(0L);
  expectedBID.add(0L);
  expectedBID.add(1L);
  TID.add(rowLTE0.getLong(0));
  TID.add(rowLTE1.getLong(0));
  TID.add(rowLTE2.getLong(0));
  BID.add(rowLTE0.getLong(1));
  BID.add(rowLTE1.getLong(1));
  BID.add(rowLTE2.getLong(1));
  assertTrue(TID.equals(expectedTID));
  assertTrue(BID.equals(expectedBID));
  tableI++;
  rowI=0;
  assertEquals(1,results[tableI].getRowCount());
  final VoltTableRow rowLT0=results[tableI].fetchRow(rowI++);
  assertEquals(-1,rowLT0.getLong(0));
  assertEquals(0,rowLT0.getLong(1));
  truncateTables(new String[]{"BINGO_BOARD"});
}
