{
  String[] tables={"P3","R3"};
  Object[] line1=new Object[]{1,"a",100,1,14.5};
  Object[] line2=new Object[]{2,"b",100,2,15.5};
  Object[] line3=new Object[]{3,"c",200,3,16.5};
  Object[] line6=new Object[]{6,"f",200,6,17.5};
  Object[] line7=new Object[]{7,"g",300,7,18.5};
  Object[] line8=new Object[]{8,"h",300,8,19.5};
  Client client=getClient();
  String query;
  VoltTable[] results;
  results=client.callProcedure("@AdHoc","INSERT INTO tableX VALUES (1, 10, 1, 'one', 31, 41);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableX VALUES (2, 20, 1, 'two', 32, 42);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableX VALUES (3, 30, 1, 'three', 32, 42);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableX VALUES (5, 50, 5, 'one', 35, 45);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableY VALUES (1, 10, 1000, 10000);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableY VALUES (2, 20, 2000, 20000);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableY VALUES (3, 30, 3000, 30000);").getResults();
  assertEquals(1,results[0].asScalarLong());
  results=client.callProcedure("@AdHoc","INSERT INTO tableY VALUES (5, 50, 1000, 10000);").getResults();
  assertEquals(1,results[0].asScalarLong());
  query="SELECT amps.keyB " + "   FROM tableX amps INNER JOIN tableY ohms " + "     ON amps.keyA = ohms.keyA "+ "    AND amps.keyB = ohms.keyB "+ " WHERE "+ "     amps.keyC = 1 AND"+ "     amps.keyD IN ('one','two') AND"+ "     ohms.keyH IN (1000,3000) "+ " ORDER BY amps.sort1 DESC; "+ "";
  results=client.callProcedure("@AdHoc",query).getResults();
  System.out.println(results[0]);
  try {
    assertEquals(10,results[0].asScalarLong());
  }
 catch (  IllegalStateException not_one) {
    fail("IN LIST test query rerurned wrong number of rows: " + not_one);
  }
  for (  String table : tables) {
    client.callProcedure("Insert",table,1,"a",100,1,14.5);
    client.callProcedure("Insert",table,2,"b",100,2,15.5);
    client.callProcedure("Insert",table,3,"c",200,3,16.5);
    client.callProcedure("Insert",table,6,"f",200,6,17.5);
    client.callProcedure("Insert",table,7,"g",300,7,18.5);
    client.callProcedure("Insert",table,8,"h",300,8,19.5);
    query=String.format("select * from %s T where T.NUM IN (200, 300) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.NUM IN (10, 200, 300, -1) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.NUM IN (10, 200, 300, -1, 200) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.NUM IN (200) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6});
    query=String.format("select * from %s T where T.NUM IN (10)",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(0,results[0].getRowCount());
    query=String.format("select * from %s T where T.DESC IN ('c', 'f', 'g', 'h') ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.DESC IN ('', 'c', 'f', 'g', 'h', " + "'a value with some length to it in case there are object allocation issues'" + ") ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.DESC " + "IN ('', 'c', 'f', 'g', 'h', 'f') ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.DESC IN ('a')",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    compareRow(results[0],line1);
    query=String.format("select * from %s T where T.DESC IN ('b')",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    compareRow(results[0],line2);
    query=String.format("select * from %s T where T.DESC IN ('')",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(0,results[0].getRowCount());
    query=String.format("select * from %s T where T.DESC IN ('c', 'f', 'g', 'h')" + " and T.NUM IN (200, 300) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.DESC IN ('', 'c', 'f', 'g', 'h', " + "'a value with some length to it in case there are object allocation issues'" + ")"+ " and T.NUM IN (10, 200, 300, -1) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.DESC IN ('', 'c', 'f', 'g', 'h', 'f')" + " and T.NUM IN (10, 200, 300, -1, 200) ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line3,line6,line7,line8});
    query=String.format("select * from %s T where T.DESC IN ('a')" + " and T.NUM IN (100)",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    compareRow(results[0],line1);
    query=String.format("select * from %s T where T.DESC IN ('b')" + " and T.NUM IN (100)",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    compareRow(results[0],line2);
    query=String.format("select * from %s T where T.DESC IN ('')" + " and T.NUM IN (10)",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(0,results[0].getRowCount());
    query=String.format("delete from %s where DESC IN ('')" + " and NUM IN (111,112)",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    System.out.println("Delete results:" + results[0]);
    assertEquals(1,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals(0,results[0].getLong(0));
    query=String.format("select * from %s T ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line1,line2,line3,line6,line7,line8});
    query=String.format("delete from %s where DESC IN ('x','y', 'b','z')" + " and NUM IN (119,100)",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals(1,results[0].getLong(0));
    query=String.format("select * from %s T ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(5,results[0].getRowCount());
    compareTable(results[0],new Object[][]{line1,line3,line6,line7,line8});
    results=client.callProcedure("Insert",table,2,"b",100,2,15.5).getResults();
    assertEquals(1,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals(1,results[0].getLong(0));
    query=String.format("update %s set num2 = 10 where DESC IN ('x', 'y', 'z', 'c')",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals(1,results[0].getLong(0));
    query=String.format("select id, desc from %s where num2 = 10 ",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals(3,results[0].getLong(0));
    assertEquals("c",results[0].getString(1));
    query=String.format("update %s set num2 = 3 where DESC = 'c'",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    assertEquals(1,results[0].getRowCount());
    results[0].advanceRow();
    assertEquals(1,results[0].getLong(0));
    query=String.format("select * from %s T ORDER BY T.ID",table);
    results=client.callProcedure("@AdHoc",query).getResults();
    compareTable(results[0],new Object[][]{line1,line2,line3,line6,line7,line8});
  }
  int hsql=isHSQL() ? 1 : 0;
  String[] fewdescs=new String[]{"","b","no match","this either","and last but not least the obligatory longish value to test object allocation"};
  int[] fewnums=new int[]{10,100,100,100,-1};
  results=client.callProcedure("CompiledInLists",fewdescs,fewnums,hsql).getResults();
  assertEquals(6,results.length);
  assertEquals(1,results[0].getRowCount());
  assertEquals(1,results[1].getRowCount());
  assertEquals(1,results[2].getRowCount());
  assertEquals(2,results[3].getRowCount());
  assertEquals(2,results[4].getRowCount());
  assertEquals(2,results[5].getRowCount());
  String[] manydescs=new String[]{"b","c","f","g","h"};
  int[] manynums=new int[]{100,200,300,200,100};
  results=client.callProcedure("CompiledInLists",manydescs,manynums,hsql).getResults();
  assertEquals(6,results.length);
  assertEquals(5,results[0].getRowCount());
  assertEquals(5,results[1].getRowCount());
  assertEquals(5,results[2].getRowCount());
  assertEquals(4,results[3].getRowCount());
  assertEquals(4,results[4].getRowCount());
  assertEquals(4,results[5].getRowCount());
  Integer fewObjNums[]=new Integer[fewnums.length];
  for (int ii=0; ii < fewnums.length; ++ii) {
    fewObjNums[ii]=new Integer(fewnums[ii]);
  }
  Integer manyObjNums[]=new Integer[manynums.length];
  for (int ii=0; ii < manynums.length; ++ii) {
    manyObjNums[ii]=new Integer(manynums[ii]);
  }
  results=client.callProcedure("InlinedInListP3with5DESCs",(Object[])fewdescs).getResults();
  assertEquals(1,results.length);
  assertEquals(1,results[0].getRowCount());
  results=client.callProcedure("InlinedInListR3with5DESCs",(Object[])fewdescs).getResults();
  assertEquals(1,results.length);
  assertEquals(1,results[0].getRowCount());
  if (!isHSQL()) {
    results=client.callProcedure("InlinedInListP3withDESCs",(Object)fewdescs).getResults();
    assertEquals(1,results.length);
    assertEquals(1,results[0].getRowCount());
  }
  results=client.callProcedure("InlinedInListP3with5NUMs",(Object[])fewObjNums).getResults();
  assertEquals(1,results.length);
  assertEquals(2,results[0].getRowCount());
  results=client.callProcedure("InlinedInListR3with5NUMs",(Object[])fewObjNums).getResults();
  assertEquals(1,results.length);
  assertEquals(2,results[0].getRowCount());
  if (!isHSQL()) {
    results=client.callProcedure("InlinedInListP3withNUMs",fewnums).getResults();
    assertEquals(1,results.length);
    assertEquals(2,results[0].getRowCount());
  }
  results=client.callProcedure("InlinedInListP3with5DESCs",(Object[])manydescs).getResults();
  assertEquals(1,results.length);
  assertEquals(5,results[0].getRowCount());
  results=client.callProcedure("InlinedInListR3with5DESCs",(Object[])manydescs).getResults();
  assertEquals(1,results.length);
  assertEquals(5,results[0].getRowCount());
  if (!isHSQL()) {
    results=client.callProcedure("InlinedInListP3withDESCs",(Object)manydescs).getResults();
    assertEquals(1,results.length);
    assertEquals(5,results[0].getRowCount());
  }
  results=client.callProcedure("InlinedInListP3with5NUMs",(Object[])manyObjNums).getResults();
  assertEquals(1,results.length);
  assertEquals(4,results[0].getRowCount());
  results=client.callProcedure("InlinedInListR3with5NUMs",(Object[])manyObjNums).getResults();
  assertEquals(1,results.length);
  assertEquals(4,results[0].getRowCount());
  if (!isHSQL()) {
    results=client.callProcedure("InlinedInListP3withNUMs",manynums).getResults();
    assertEquals(1,results.length);
    assertEquals(4,results[0].getRowCount());
  }
  results=client.callProcedure("@AdHoc","select count(*) from R3 where DESC IN ('x', 'y', 'z', 'a')" + " and NUM IN (1010, 1020, 1030, -1040, 100)").getResults();
  assertEquals(1,results.length);
  assertEquals(1,results[0].getRowCount());
  results[0].advanceRow();
  assertEquals(1,results[0].getLong(0));
  results=client.callProcedure("@AdHoc","select count(*) from P3 where DESC IN ('x', 'y', 'z', 'b')" + " and NUM IN (1010, 1020, 1030, -1040, 100)").getResults();
  assertEquals(1,results.length);
  assertEquals(1,results[0].getRowCount());
  results[0].advanceRow();
  assertEquals(1,results[0].getLong(0));
  results=client.callProcedure("@AdHoc","update R3 set NUM = (1000) where DESC IN ('x', 'y', 'z', 'a')" + " and NUM IN (1010, 1020, 1030, -1040, 100)").getResults();
  assertEquals(1,results.length);
  assertEquals(1,results[0].getRowCount());
  results[0].advanceRow();
  assertEquals(1,results[0].getLong(0));
  results=client.callProcedure("@AdHoc","delete from P3 where DESC IN ('x', 'y', 'z', 'b')" + " and NUM IN (1010, 1020, 1030, -1040, 100)").getResults();
  assertEquals(1,results.length);
  assertEquals(1,results[0].getRowCount());
  results[0].advanceRow();
  assertEquals(1,results[0].getLong(0));
}
