{
  if (b == null)   return null;
  int bLen=b.length;
  if (bLen % 4 != 0)   throw new IllegalArgumentException("Input block size is not 4");
  int li=bLen - 1;
  while (li >= 0 && b[li] == (byte)pad)   li--;
  if (li < 0)   return new byte[0];
  int rLen=((li + 1) * 3) / 4;
  byte r[]=new byte[rLen];
  int ri=0;
  int bi=0;
  int stop=(rLen / 3) * 3;
  byte b0, b1, b2, b3;
  try {
    while (ri < stop) {
      b0=code2nibble[b[bi++]];
      b1=code2nibble[b[bi++]];
      b2=code2nibble[b[bi++]];
      b3=code2nibble[b[bi++]];
      if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)       throw new IllegalArgumentException("Not B64 encoded");
      r[ri++]=(byte)(b0 << 2 | b1 >>> 4);
      r[ri++]=(byte)(b1 << 4 | b2 >>> 2);
      r[ri++]=(byte)(b2 << 6 | b3);
    }
    if (rLen != ri) {
switch (rLen % 3) {
case 2:
        b0=code2nibble[b[bi++]];
      b1=code2nibble[b[bi++]];
    b2=code2nibble[b[bi++]];
  if (b0 < 0 || b1 < 0 || b2 < 0)   throw new IllegalArgumentException("Not B64 encoded");
r[ri++]=(byte)(b0 << 2 | b1 >>> 4);
r[ri++]=(byte)(b1 << 4 | b2 >>> 2);
break;
case 1:
b0=code2nibble[b[bi++]];
b1=code2nibble[b[bi++]];
if (b0 < 0 || b1 < 0) throw new IllegalArgumentException("Not B64 encoded");
r[ri++]=(byte)(b0 << 2 | b1 >>> 4);
break;
default :
break;
}
}
}
 catch (IndexOutOfBoundsException e) {
throw new IllegalArgumentException("char " + bi + " was not B64 encoded");
}
return r;
}
