{
  long dataSize=header.getDataSize();
  if (dataSize < 1) {
    throw new TarMalformatException(RB.singleton.getString(RB.PIF_UNKNOWN_DATASIZE));
  }
  if (dataSize > Integer.MAX_VALUE) {
    throw new TarMalformatException(RB.singleton.getString(RB.PIF_DATA_TOOBIG,Long.toString(dataSize),Integer.MAX_VALUE));
  }
  int readNow;
  int readBlocks=(int)(dataSize / 512L);
  int modulus=(int)(dataSize % 512L);
  PipedOutputStream outPipe=new PipedOutputStream();
  PipedInputStream inPipe=new PipedInputStream(outPipe);
  try {
    while (readBlocks > 0) {
      readNow=(readBlocks > archive.getReadBufferBlocks()) ? archive.getReadBufferBlocks() : readBlocks;
      archive.readBlocks(readNow);
      readBlocks-=readNow;
      outPipe.write(archive.readBuffer,0,readNow * 512);
    }
    if (modulus != 0) {
      archive.readBlock();
      outPipe.write(archive.readBuffer,0,modulus);
    }
    outPipe.flush();
  }
 catch (  IOException ioe) {
    inPipe.close();
    throw ioe;
  }
 finally {
    outPipe.close();
  }
  return new PIFData(inPipe);
}
