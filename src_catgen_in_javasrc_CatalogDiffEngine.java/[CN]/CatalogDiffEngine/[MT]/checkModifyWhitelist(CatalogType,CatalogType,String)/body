{
  CatalogType orig=suspect;
  if (suspect instanceof Database && field.equals("schema"))   return true;
  if (suspect instanceof Cluster && field.equals("securityEnabled"))   return true;
  if (suspect instanceof Constraint && field.equals("index"))   return true;
  if (suspect instanceof Table && field.equals("signature"))   return true;
  if (suspect instanceof Column) {
    if (!areTableColumnsMutable((Table)suspect.getParent())) {
      return false;
    }
    if (field.equals("index"))     return true;
    if (field.equals("defaultvalue"))     return true;
    if (field.equals("defaulttype"))     return true;
    if (field.equals("nullable")) {
      Boolean nullable=(Boolean)suspect.getField(field);
      assert(nullable != null);
      if (nullable)       return true;
    }
    if (field.equals("type") || field.equals("size")) {
      int oldTypeInt=(Integer)prevType.getField("type");
      int newTypeInt=(Integer)suspect.getField("type");
      int oldSize=(Integer)prevType.getField("size");
      int newSize=(Integer)suspect.getField("size");
      VoltType oldType=VoltType.get((byte)oldTypeInt);
      VoltType newType=VoltType.get((byte)newTypeInt);
      if (checkIfColumnTypeChangeIsSupported(oldType,oldSize,newType,newSize)) {
        m_requiresSnapshotIsolation=true;
        return true;
      }
    }
  }
  do {
    if (suspect instanceof User)     return true;
    if (suspect instanceof Group)     return true;
    if (suspect instanceof Procedure)     return true;
    if (suspect instanceof SnapshotSchedule)     return true;
  }
 while ((suspect=suspect.m_parent) != null);
  m_errors.append("May not dynamically modify field " + field + " of "+ orig+ "\n");
  m_supported=false;
  return false;
}
