{
  m_canOccurWithElasticRebalance=false;
  if (suspect instanceof User || suspect instanceof Group || suspect instanceof Procedure|| suspect instanceof SnapshotSchedule|| suspect instanceof ConstraintRef|| suspect instanceof GroupRef|| suspect instanceof UserRef|| suspect instanceof Constraint) {
    return null;
  }
 else   if (suspect instanceof Table) {
    Table tbl=(Table)suspect;
    if (ChangeType.ADDITION == changeType && CatalogUtil.isTableExportOnly((Database)tbl.getParent(),tbl)) {
      m_newTablesForExport.add(tbl.getTypeName());
    }
    return null;
  }
 else   if (suspect instanceof Connector) {
    if (ChangeType.ADDITION == changeType) {
      for (      ConnectorTableInfo cti : ((Connector)suspect).getTableinfo()) {
        trackExportOfAlreadyExistingTables(cti.getTable().getTypeName());
      }
    }
    return null;
  }
 else   if (suspect instanceof ConnectorTableInfo) {
    if (ChangeType.ADDITION == changeType) {
      trackExportOfAlreadyExistingTables(((ConnectorTableInfo)suspect).getTable().getTypeName());
    }
    return null;
  }
 else   if (suspect instanceof ConnectorProperty) {
    return null;
  }
 else   if (suspect instanceof ColumnRef) {
    if (suspect.getParent() instanceof Index) {
      Index parent=(Index)suspect.getParent();
      if (parent.getUnique() && (changeType == ChangeType.DELETION)) {
        CatalogMap<Index> newIndexes=m_newIndexesByTable.get(parent.getParent().getTypeName());
        Index newIndex=newIndexes.get(parent.getTypeName());
        if (!checkNewUniqueIndex(newIndex)) {
          return "May not dynamically remove columns from unique index: " + parent.getTypeName();
        }
      }
    }
    return null;
  }
 else   if (suspect instanceof Column) {
    if (m_inStrictMatViewDiffMode) {
      return "May not dynamically add, drop, or rename materialized view columns.";
    }
    if (changeType == ChangeType.ADDITION) {
      Column col=(Column)suspect;
      if ((!col.getNullable()) && (col.getDefaultvalue() == null)) {
        return "May not dynamically add non-nullable column without default value.";
      }
    }
    m_requiresSnapshotIsolation=true;
    return null;
  }
 else   if (suspect instanceof Index) {
    Index index=(Index)suspect;
    if (!index.m_unique) {
      return null;
    }
    if (changeType == ChangeType.DELETION) {
      return null;
    }
    if (checkNewUniqueIndex(index)) {
      return null;
    }
    return "May not dynamically add unique indexes that don't cover existing unique indexes.\n";
  }
 else   if (suspect instanceof MaterializedViewInfo && !m_inStrictMatViewDiffMode) {
    return null;
  }
 else   if (isTableLimitDeleteStmt(suspect)) {
    return null;
  }
  for (CatalogType parent=suspect.getParent(); parent != null; parent=parent.getParent()) {
    if (parent instanceof Procedure || parent instanceof Connector || parent instanceof ConstraintRef|| parent instanceof Column) {
      if (m_triggeredVerbosity) {
        System.out.println("DEBUG VERBOSE diffRecursively " + ((changeType == ChangeType.ADDITION) ? "addition" : "deletion") + " of schema object '"+ suspect+ "'"+ " rescued by context '"+ parent+ "'");
      }
      return null;
    }
  }
  return "May not dynamically add/drop schema object: '" + suspect + "'\n";
}
