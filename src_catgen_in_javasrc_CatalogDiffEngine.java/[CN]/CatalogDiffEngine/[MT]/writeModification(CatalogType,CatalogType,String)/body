{
  if (checkModifyIgnoreList(newType,prevType,field)) {
    return;
  }
  String errorMessage=checkModifyWhitelist(newType,prevType,field);
  if (errorMessage != null) {
    String[] response=checkModifyIfTableIsEmptyWhitelist(newType,prevType,field);
    assert((response == null) || (response.length == 2));
    if (response == null) {
      m_supported=false;
      m_errors.append(errorMessage);
    }
 else {
      assert(response.length == 2);
      String tableName=response[0];
      assert(tableName != null);
      String nonEmptyErrorMessage=response[1];
      assert(nonEmptyErrorMessage != null);
      String existingErrorMessagesForNonEmptyTable=m_tablesThatMustBeEmpty.get(tableName);
      if (nonEmptyErrorMessage.length() == 0) {
        assert(existingErrorMessagesForNonEmptyTable != null);
      }
 else {
        if (existingErrorMessagesForNonEmptyTable != null) {
          nonEmptyErrorMessage=nonEmptyErrorMessage + "\n" + existingErrorMessagesForNonEmptyTable;
        }
        m_tablesThatMustBeEmpty.put(tableName,"  " + nonEmptyErrorMessage);
      }
    }
  }
  newType.writeCommandForField(m_sb,field,true);
  if ((newType instanceof Database) && field.equals("schema")) {
    return;
  }
  CatalogChangeGroup cgrp=m_changes.get(DiffClass.get(newType));
  cgrp.processChange(newType,prevType,field);
}
