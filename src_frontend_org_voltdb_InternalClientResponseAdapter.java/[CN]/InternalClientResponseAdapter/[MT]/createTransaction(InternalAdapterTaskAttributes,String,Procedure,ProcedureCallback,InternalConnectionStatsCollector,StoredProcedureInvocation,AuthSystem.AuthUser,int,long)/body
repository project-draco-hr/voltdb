{
  if (!m_partitionExecutor.containsKey(partition)) {
    m_partitionExecutor.putIfAbsent(partition,CoreUtils.getSingleThreadExecutor("InternalHandlerExecutor - " + partition));
  }
  final InvocationDispatcher dispatcher=getClientInterface().getDispatcher();
  ExecutorService executor=m_partitionExecutor.get(partition);
  try {
    executor.submit(new Runnable(){
      @Override public void run(){
        kattrs.setBackPressure(hasBackPressure());
        if (!m_internalConnectionIds.containsKey(kattrs.getName())) {
          m_internalConnectionIds.putIfAbsent(kattrs.getName(),VoltProtocolHandler.getNextConnectionId());
        }
        submitTransaction();
      }
      public boolean submitTransaction(){
        final long handle=nextHandle();
        task.setClientHandle(handle);
        final InternalCallback cb=new InternalCallback(kattrs,catProc,task,procName,partition,proccb,statsCollector,user,handle);
        m_callbacks.put(handle,cb);
        ClientResponseImpl r=dispatcher.dispatch(task,kattrs,InternalClientResponseAdapter.this,user);
        boolean bval=r == null || r.getStatus() == ClientResponse.SUCCESS;
        if (r != null) {
          try {
            cb.handleResponse(r);
          }
 catch (          Exception e) {
            m_logger.error("failed to process dispatch response " + r.getStatusString(),e);
          }
 finally {
            m_callbacks.remove(handle);
          }
          return bval;
        }
        if (!bval) {
          m_logger.error("Failed to submit transaction.");
          m_callbacks.remove(handle);
        }
        return bval;
      }
    }
);
  }
 catch (  RejectedExecutionException ex) {
    m_logger.error("Failed to submit transaction to the partition queue.",ex);
    return false;
  }
  return true;
}
