{
  for (int i=0; i < nodes.length; i++) {
    if (nodes[i] != null) {
      nodes[i].resolveTypes(session,this);
    }
  }
  boolean isEscapeFixedConstant=true;
  if (nodes[ESCAPE] != null) {
    if (nodes[ESCAPE].isParam) {
      throw Error.error(ErrorCode.X_42567);
    }
    nodes[ESCAPE].resolveTypes(session,this);
    isEscapeFixedConstant=nodes[ESCAPE].opType == OpTypes.VALUE;
    if (isEscapeFixedConstant) {
      nodes[ESCAPE].setAsConstantValue(session);
      if (nodes[ESCAPE].dataType == null) {
        throw Error.error(ErrorCode.X_42567);
      }
      if (nodes[ESCAPE].valueData != null) {
        long length;
switch (nodes[ESCAPE].dataType.typeCode) {
case Types.SQL_CHAR:
case Types.SQL_VARCHAR:
          length=((String)nodes[ESCAPE].valueData).length();
        break;
case Types.SQL_BINARY:
case Types.SQL_VARBINARY:
      length=((BinaryData)nodes[ESCAPE].valueData).length(session);
    break;
default :
  throw Error.error(ErrorCode.X_42565);
}
if (length != 1) {
throw Error.error(ErrorCode.X_22019);
}
}
}
}
if (nodes[LEFT].isParam) {
nodes[LEFT].dataType=nodes[RIGHT].dataType;
}
 else if (nodes[RIGHT].isParam) {
nodes[RIGHT].dataType=nodes[LEFT].dataType;
}
if (nodes[LEFT].dataType == null || nodes[RIGHT].dataType == null) {
throw Error.error(ErrorCode.X_42567);
}
if (nodes[LEFT].dataType.isCharacterType() && nodes[RIGHT].dataType.isCharacterType() && (nodes[ESCAPE] == null || nodes[ESCAPE].dataType.isCharacterType())) {
boolean ignoreCase=nodes[LEFT].dataType.typeCode == Types.VARCHAR_IGNORECASE || nodes[RIGHT].dataType.typeCode == Types.VARCHAR_IGNORECASE;
likeObject.setIgnoreCase(ignoreCase);
}
 else if (nodes[LEFT].dataType.isBinaryType() && nodes[RIGHT].dataType.isBinaryType() && (nodes[ESCAPE] == null || nodes[ESCAPE].dataType.isBinaryType())) {
likeObject.isBinary=true;
}
 else {
throw Error.error(ErrorCode.X_42565);
}
if (nodes[ESCAPE] == null) {
Expression oldNodes[]=nodes;
nodes=new Expression[BINARY];
nodes[LEFT]=oldNodes[LEFT];
nodes[RIGHT]=oldNodes[RIGHT];
}
likeObject.dataType=nodes[LEFT].dataType;
boolean isRightArgFixedConstant=nodes[RIGHT].opType == OpTypes.VALUE;
if (isRightArgFixedConstant && isEscapeFixedConstant && nodes[LEFT].opType == OpTypes.VALUE) {
setAsConstantValue(session);
likeObject=null;
return;
}
if (isRightArgFixedConstant && isEscapeFixedConstant) {
likeObject.isVariable=false;
}
 else {
if (nodes.length > 2) {
throw new RuntimeException("Like with an escape is not supported in parameterized queries");
}
return;
}
Object pattern=isRightArgFixedConstant ? nodes[RIGHT].getConstantValue(session) : null;
boolean constantEscape=isEscapeFixedConstant && (nodes.length > 2);
Object escape=constantEscape ? nodes[ESCAPE].getConstantValue(session) : null;
likeObject.setPattern(session,pattern,escape,(nodes.length > 2));
if (noOptimisation) {
return;
}
if (likeObject.isEquivalentToUnknownPredicate()) {
this.setAsConstantValue(null);
likeObject=null;
}
 else if (likeObject.isEquivalentToEqualsPredicate()) {
opType=OpTypes.EQUAL;
nodes[RIGHT]=new ExpressionValue(likeObject.getRangeLow(),Type.SQL_VARCHAR);
likeObject=null;
}
 else if (likeObject.isEquivalentToNotNullPredicate()) {
Expression notNull=new ExpressionLogical(OpTypes.IS_NULL,nodes[LEFT]);
opType=OpTypes.NOT;
nodes=new Expression[UNARY];
nodes[LEFT]=notNull;
likeObject=null;
}
 else {
if (nodes[LEFT].opType != OpTypes.COLUMN) {
return;
}
if (!nodes[LEFT].dataType.isCharacterType()) {
return;
}
boolean between=false;
boolean like=false;
boolean larger=false;
if (likeObject.isEquivalentToBetweenPredicate()) {
larger=likeObject.hasCollation;
between=!larger;
like=larger;
}
 else if (likeObject.isEquivalentToBetweenPredicateAugmentedWithLike()) {
larger=likeObject.hasCollation;
between=!larger;
like=true;
}
if (!between && !larger) {
if (nodes.length > 2) {
throw new RuntimeException("Like with an escape is not supported unless it is prefix like");
}
return;
}
Expression leftBound=new ExpressionValue(likeObject.getRangeLow(),Type.SQL_VARCHAR);
Expression rightBound=new ExpressionValue(likeObject.getRangeHigh(session),Type.SQL_VARCHAR);
if (between && !like) {
Expression leftOld=nodes[LEFT];
nodes=new Expression[BINARY];
nodes[LEFT]=new ExpressionLogical(OpTypes.GREATER_EQUAL,leftOld,leftBound);
nodes[RIGHT]=new ExpressionLogical(OpTypes.SMALLER_EQUAL,leftOld,rightBound);
opType=OpTypes.AND;
likeObject=null;
}
 else if (between && like) {
Expression gte=new ExpressionLogical(OpTypes.GREATER_EQUAL,nodes[LEFT],leftBound);
Expression lte=new ExpressionLogical(OpTypes.SMALLER_EQUAL,nodes[LEFT],rightBound);
ExpressionLike newLike=new ExpressionLike(this);
if (nodes.length > 2) {
throw new RuntimeException("Like with an escape is not supported unless it is prefix like");
}
nodes=new Expression[BINARY];
likeObject=null;
nodes[LEFT]=new ExpressionLogical(OpTypes.AND,gte,lte);
nodes[RIGHT]=newLike;
opType=OpTypes.AND;
}
 else if (larger) {
Expression gte=new ExpressionLogical(OpTypes.GREATER_EQUAL,nodes[LEFT],leftBound);
ExpressionLike newLike=new ExpressionLike(this);
nodes=new Expression[BINARY];
likeObject=null;
nodes[LEFT]=gte;
nodes[RIGHT]=newLike;
opType=OpTypes.AND;
}
 else {
if (nodes.length > 2) {
throw new RuntimeException("Like with an escape is not supported unless it is prefix like");
}
}
}
}
