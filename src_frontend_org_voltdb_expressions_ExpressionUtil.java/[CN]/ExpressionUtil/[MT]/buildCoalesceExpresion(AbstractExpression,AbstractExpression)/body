{
  VoltType leftType=leftExpr.getValueType();
  VoltType rightType=righExpr.getValueType();
  VoltType superType;
  int superSize;
  if (leftType.canExactlyRepresentAnyValueOf(rightType)) {
    superType=leftType;
    superSize=((TupleValueExpression)leftExpr).getValueSize();
  }
 else {
    assert(rightType.canExactlyRepresentAnyValueOf(leftType));
    superType=rightType;
    superSize=((TupleValueExpression)righExpr).getValueSize();
  }
  AbstractExpression altExpr=new OperatorExpression(ExpressionType.OPERATOR_ALTERNATIVE,righExpr,leftExpr);
  altExpr.setValueType(superType);
  altExpr.setValueSize(superSize);
  AbstractExpression isnullExpr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,leftExpr,null);
  isnullExpr.setValueType(VoltType.BIGINT);
  isnullExpr.setValueSize(VoltType.BIGINT.getLengthInBytesForFixedTypes());
  AbstractExpression coalesceExpr=new OperatorExpression(ExpressionType.OPERATOR_CASE_WHEN,isnullExpr,altExpr);
  coalesceExpr.setValueType(superType);
  coalesceExpr.setValueSize(superSize);
  return coalesceExpr;
}
