{
  if (input.getExpressionType() == ExpressionType.VALUE_PARAMETER) {
    ParameterValueExpression pve=(ParameterValueExpression)input;
    paramTypeOverrideMap.put(pve.m_paramIndex,neededType);
    input.setValueType(neededType);
    input.setValueSize(neededSize);
  }
 else   if (input.getExpressionType() == ExpressionType.VALUE_CONSTANT) {
    ConstantValueExpression cve=(ConstantValueExpression)input;
    if (cve.m_isNull) {
      cve.setValueType(neededType);
      cve.setValueSize(neededSize);
      return;
    }
    if (cve.getValueType() == neededType) {
      if ((cve.getValueType() == VoltType.STRING) || (cve.getValueType() == VoltType.VARBINARY)) {
        if (cve.getValue().length() > neededSize)         throw new StringIndexOutOfBoundsException("Constant VARCHAR value too long for column.");
      }
      cve.setValueSize(neededSize);
      checkConstantValueTypeSafety(cve);
      return;
    }
    if (neededType.isInteger()) {
      if (cve.getValueType().isInteger()) {
        castIntegerValueDownSafely(cve,neededType);
        checkConstantValueTypeSafety(cve);
        return;
      }
    }
    if (neededType == VoltType.FLOAT) {
      if (cve.getValueType().isExactNumeric()) {
        cve.setValueType(neededType);
        cve.setValueSize(neededSize);
        checkConstantValueTypeSafety(cve);
        return;
      }
    }
    if (neededType == VoltType.DECIMAL) {
      if ((cve.getValueType().isExactNumeric()) || (cve.getValueType() == VoltType.FLOAT)) {
        cve.setValueType(neededType);
        cve.setValueSize(neededSize);
        checkConstantValueTypeSafety(cve);
        return;
      }
    }
    if (neededType == VoltType.VARBINARY) {
      if ((cve.getValueType() == VoltType.STRING) && (Encoder.isHexEncodedString(cve.getValue()))) {
        cve.setValueType(neededType);
        cve.setValueSize(neededSize);
        checkConstantValueTypeSafety(cve);
        return;
      }
    }
    if (neededType == VoltType.TIMESTAMP) {
      if (cve.getValueType() == VoltType.STRING) {
        try {
          java.sql.Timestamp sqlTS=java.sql.Timestamp.valueOf(cve.m_value);
          long timeInMicroSecs=sqlTS.getTime() * 1000;
          timeInMicroSecs+=sqlTS.getNanos() / 1000;
          cve.m_value=String.valueOf(timeInMicroSecs);
          cve.setValueType(neededType);
          cve.setValueSize(neededSize);
          checkConstantValueTypeSafety(cve);
        }
 catch (        IllegalArgumentException e) {
        }
        return;
      }
    }
    throw new Exception("Constant value cannot be converted to column type.");
  }
 else {
    input.setValueType(neededType);
    input.setValueSize(neededSize);
    setOutputTypeForInsertExpressionRecursively(input.getLeft(),neededType,neededSize,paramTypeOverrideMap);
    setOutputTypeForInsertExpressionRecursively(input.getRight(),neededType,neededSize,paramTypeOverrideMap);
  }
}
