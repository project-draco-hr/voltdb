{
  if (input == null)   return;
  if (input.getExpressionType() == ExpressionType.VALUE_PARAMETER) {
    ParameterValueExpression pve=(ParameterValueExpression)input;
switch (parentType) {
case BIGINT:
case INTEGER:
case SMALLINT:
case TINYINT:
      paramTypeOverrideMap.put(pve.m_paramIndex,VoltType.BIGINT);
    input.setValueType(VoltType.BIGINT);
  input.setValueSize(VoltType.BIGINT.getLengthInBytesForFixedTypes());
break;
case DECIMAL:
paramTypeOverrideMap.put(pve.m_paramIndex,VoltType.DECIMAL);
input.setValueType(VoltType.DECIMAL);
input.setValueSize(VoltType.DECIMAL.getLengthInBytesForFixedTypes());
break;
case FLOAT:
paramTypeOverrideMap.put(pve.m_paramIndex,VoltType.FLOAT);
input.setValueType(VoltType.FLOAT);
input.setValueSize(VoltType.FLOAT.getLengthInBytesForFixedTypes());
break;
}
}
if (input.getExpressionType() == ExpressionType.VALUE_CONSTANT) {
checkConstantValueTypeSafety((ConstantValueExpression)input);
}
setOutputTypeForInsertExpressionRecursively(input.getLeft(),parentType,parentSize,paramTypeOverrideMap);
setOutputTypeForInsertExpressionRecursively(input.getRight(),parentType,parentSize,paramTypeOverrideMap);
}
