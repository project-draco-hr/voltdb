{
  checkPositive("x",x);
  int logFloor=log10Floor(x);
  int floorPow=powersOf10[logFloor];
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(x == floorPow);
case FLOOR:
case DOWN:
  return logFloor;
case CEILING:
case UP:
return logFloor + lessThanBranchFree(floorPow,x);
case HALF_DOWN:
case HALF_UP:
case HALF_EVEN:
return logFloor + lessThanBranchFree(halfPowersOf10[logFloor],x);
default :
throw new AssertionError();
}
}
