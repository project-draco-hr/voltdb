{
  checkNotNull(mode);
  if (q == 0) {
    throw new ArithmeticException("/ by zero");
  }
  int div=p / q;
  int rem=p - q * div;
  if (rem == 0) {
    return div;
  }
  int signum=1 | ((p ^ q) >> (Integer.SIZE - 1));
  boolean increment;
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(rem == 0);
case DOWN:
  increment=false;
break;
case UP:
increment=true;
break;
case CEILING:
increment=signum > 0;
break;
case FLOOR:
increment=signum < 0;
break;
case HALF_EVEN:
case HALF_DOWN:
case HALF_UP:
int absRem=abs(rem);
int cmpRemToHalfDivisor=absRem - (abs(q) - absRem);
if (cmpRemToHalfDivisor == 0) {
increment=(mode == HALF_UP || (mode == HALF_EVEN & (div & 1) != 0));
}
 else {
increment=cmpRemToHalfDivisor > 0;
}
break;
default :
throw new AssertionError();
}
return increment ? div + signum : div;
}
