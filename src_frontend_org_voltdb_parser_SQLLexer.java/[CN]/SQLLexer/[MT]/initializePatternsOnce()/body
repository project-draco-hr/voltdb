{
  if (s_initialized) {
    return;
  }
  int supportedVerbCount=0;
  int unsupportedVerbCount=0;
  String[] verbsAll=new String[VERB_TOKENS.length];
  for (int i=0; i < VERB_TOKENS.length; ++i) {
    verbsAll[i]=VERB_TOKENS[i].token;
    if (VERB_TOKENS[i].supported) {
      supportedVerbCount++;
    }
 else {
      unsupportedVerbCount++;
    }
  }
  PAT_ANY_DDL_FIRST_TOKEN=SPF.statementLeader(SPF.capture(SPF.token(verbsAll)),SPF.anyClause()).compile();
  int renameableCount=0;
  String[] secondTokens=new String[OBJECT_TOKENS.length + MODIFIER_TOKENS.length];
  for (int i=0; i < OBJECT_TOKENS.length; ++i) {
    secondTokens[i]=OBJECT_TOKENS[i].token;
    if (OBJECT_TOKENS[i].renameable) {
      renameableCount++;
    }
  }
  for (int j=0; j < MODIFIER_TOKENS.length; ++j) {
    secondTokens[OBJECT_TOKENS.length + j]=MODIFIER_TOKENS[j];
  }
  String[] verbsSupported=new String[supportedVerbCount];
  supportedVerbCount=0;
  for (int i=0; i < VERB_TOKENS.length; ++i) {
    if (VERB_TOKENS[i].supported) {
      verbsSupported[supportedVerbCount++]=VERB_TOKENS[i].token;
    }
  }
  Pattern patSupportedPreambles=SPF.statementLeader(SPF.capture(SPF.token(verbsSupported)),SPF.capture(SPF.token(secondTokens))).compile();
  PAT_WHITELISTS=new Pattern[]{patSupportedPreambles};
  String[] verbsNotSupported=new String[unsupportedVerbCount];
  unsupportedVerbCount=0;
  for (int i=0; i < VERB_TOKENS.length; ++i) {
    if (!VERB_TOKENS[i].supported) {
      verbsNotSupported[unsupportedVerbCount++]=VERB_TOKENS[i].token;
    }
  }
  String[] renameables=new String[renameableCount];
  renameableCount=0;
  for (int i=0; i < OBJECT_TOKENS.length; ++i) {
    if (OBJECT_TOKENS[i].renameable) {
      renameables[renameableCount++]=OBJECT_TOKENS[i].token;
    }
  }
  Pattern patUnsupportedPreambles=SPF.statementLeader(SPF.capture(SPF.token(verbsNotSupported))).compile();
  PAT_BLACKLISTS=new Pattern[]{patUnsupportedPreambles,generateRenamePattern(renameables)};
  s_initialized=true;
}
