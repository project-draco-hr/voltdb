{
  String[] secondTokens=new String[OBJECT_TOKENS.length + MODIFIER_TOKENS.length];
  for (int i=0; i < OBJECT_TOKENS.length; ++i) {
    secondTokens[i]=OBJECT_TOKENS[i].token;
  }
  for (int j=0; j < MODIFIER_TOKENS.length; ++j) {
    secondTokens[OBJECT_TOKENS.length + j]=MODIFIER_TOKENS[j];
  }
  int supportedVerbCount=0;
  for (int i=0; i < VERB_TOKENS.length; ++i) {
    if (VERB_TOKENS[i].supported) {
      supportedVerbCount++;
    }
  }
  String[] verbsSupported=new String[supportedVerbCount];
  supportedVerbCount=0;
  for (int i=0; i < VERB_TOKENS.length; ++i) {
    if (VERB_TOKENS[i].supported) {
      verbsSupported[supportedVerbCount++]=VERB_TOKENS[i].token;
    }
  }
  Pattern whitelistPattern=SPF.statementLeader(SPF.clause(SPF.tokenAlternatives(verbsSupported),SPF.tokenAlternatives(secondTokens))).compile("PAT_WHITELISTS-PREAMBLES");
  return whitelistPattern;
}
