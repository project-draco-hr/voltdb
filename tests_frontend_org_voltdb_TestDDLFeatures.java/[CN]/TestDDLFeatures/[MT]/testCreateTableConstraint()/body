{
  VoltProjectBuilder builder=new VoltProjectBuilder();
  String schema="CREATE TABLE T9 (C1 INTEGER PRIMARY KEY NOT NULL, C2 SMALLINT UNIQUE NOT NULL);" + "CREATE TABLE T10 (C INTEGER DEFAULT 123 NOT NULL, CONSTRAINT con UNIQUE(C));" + "CREATE TABLE T11 (C INTEGER DEFAULT 123 NOT NULL, CONSTRAINT pk1 PRIMARY KEY(C));"+ "PARTITION TABLE T12 ON COLUMN C1;"+ "CREATE TABLE T12 (C1 INTEGER NOT NULL, C2 INTEGER DEFAULT 123 NOT NULL, CONSTRAINT au ASSUMEUNIQUE(C2));"+ "CREATE TABLE T16 (C INTEGER, CONSTRAINT lpr1 LIMIT PARTITION ROWS 1);"+ "PARTITION TABLE T21 ON COLUMN C3;"+ "CREATE TABLE T21 (C1 TINYINT DEFAULT 127 NOT NULL, C2 SMALLINT DEFAULT 32767 NOT NULL, "+ "C3 INTEGER DEFAULT 2147483647 NOT NULL, C4 BIGINT NOT NULL, C5 FLOAT NOT NULL, C6 DECIMAL ASSUMEUNIQUE NOT NULL, "+ "C7 VARCHAR(32) NOT NULL, C8 VARBINARY(32) NOT NULL, C9 TIMESTAMP DEFAULT NOW NOT NULL, "+ "C10 TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ASSUMEUNIQUE (C1, C9));"+ "CREATE TABLE T22 (C1 TINYINT DEFAULT 127 NOT NULL UNIQUE, C2 SMALLINT DEFAULT 32767 NOT NULL, "+ "C3 INTEGER DEFAULT 2147483647 NOT NULL, C4 BIGINT NOT NULL, C5 FLOAT NOT NULL, C6 DECIMAL UNIQUE NOT NULL, "+ "C7 VARCHAR(32) NOT NULL, C8 VARBINARY(32) NOT NULL, C9 TIMESTAMP DEFAULT NOW NOT NULL, "+ "C10 TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE (C1, C9));"+ "CREATE TABLE T23 (C1 INTEGER NOT NULL, C2 SMALLINT UNIQUE, C3 VARCHAR(32) NOT NULL, "+ "C4 TINYINT NOT NULL, C5 TIMESTAMP NOT NULL, C6 BIGINT NOT NULL, C7 FLOAT NOT NULL, C8 DECIMAL NOT NULL, "+ "C9 INTEGER, CONSTRAINT hash_pk PRIMARY KEY (C1, C5), CONSTRAINT uni2 UNIQUE(C1, C7), "+ "CONSTRAINT lpr2 LIMIT PARTITION ROWS 123);";
  builder.addLiteralSchema(schema);
  boolean success=builder.compile(pathToCatalog);
  assertTrue(success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  startSystem(config);
  ClientResponse resp;
  boolean threw;
  VoltTable vt;
  assertTrue(findTableInSystemCatalogResults("T9"));
  resp=m_client.callProcedure("T9.insert",1,2);
  assertEquals(resp.getResults()[0].m_rowCount,1);
  threw=false;
  try {
    m_client.callProcedure("T9.insert",1,3);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate PRIMARY KEY constraint",threw);
  threw=false;
  try {
    m_client.callProcedure("T9.insert",2,2);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate UNIQUE constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T10"));
  resp=m_client.callProcedure("T10.insert",1);
  assertEquals(resp.getResults()[0].m_rowCount,1);
  threw=false;
  try {
    m_client.callProcedure("T10.insert",1);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate UNIQUE constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T11"));
  resp=m_client.callProcedure("T11.insert",1);
  assertEquals(resp.getResults()[0].m_rowCount,1);
  threw=false;
  try {
    m_client.callProcedure("T11.insert",1);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate PRIMARY KEY constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T12"));
  assertTrue(isColumnPartitionColumn("T12","C1"));
  resp=m_client.callProcedure("T12.insert",1,2);
  assertEquals(resp.getResults()[0].m_rowCount,1);
  threw=false;
  try {
    m_client.callProcedure("T12.insert",3,2);
  }
 catch (  ProcCallException pce) {
    threw=true;
  }
  assertTrue("Shouldn't violate ASSUMEUNIQUE constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T16"));
  resp=m_client.callProcedure("T16.insert",1);
  assertEquals(resp.getResults()[0].m_rowCount,1);
  threw=false;
  try {
    m_client.callProcedure("T16.insert",2);
  }
 catch (  ProcCallException pce) {
    pce.printStackTrace();
    threw=true;
  }
  assertTrue("Shouldn't violate LIMIT PARTITION ROW constraint",threw);
  assertTrue(findTableInSystemCatalogResults("T21"));
  assertEquals(indexedColumnCount("T21"),3);
  assertTrue(isColumnPartitionColumn("T21","C3"));
  assertTrue(findTableInSystemCatalogResults("T22"));
  assertEquals(indexedColumnCount("T22"),4);
  assertTrue(findTableInSystemCatalogResults("T23"));
  assertEquals(indexedColumnCount("T23"),5);
  teardownSystem();
}
