{
  VoltDB.Configuration configuration=new VoltDB.Configuration();
  configuration.m_noLoadLibVOLTDB=true;
  MockVoltDB mockvolt=new MockVoltDB();
  VoltDB.ignoreCrash=true;
  VoltDB.replaceVoltDBInstanceForTest(mockvolt);
  mockvolt.m_noLoadLib=true;
  assertFalse(EELibraryLoader.loadExecutionEngineLibrary(false));
  assertFalse(VoltDB.wasCrashCalled);
  boolean threw=false;
  try {
    assertFalse(EELibraryLoader.loadExecutionEngineLibrary(true));
  }
 catch (  AssertionError ae) {
    threw=true;
  }
  assertTrue(threw);
  assertTrue(VoltDB.wasCrashCalled);
  VoltDB.wasCrashCalled=false;
  VoltDB.initialize(configuration);
  assertFalse(EELibraryLoader.loadExecutionEngineLibrary(true));
  assertFalse(VoltDB.wasCrashCalled);
  configuration=new VoltDB.Configuration();
  VoltDBInterface mockitovolt=mock(VoltDBInterface.class);
  VoltDBInterface realvolt=new RealVoltDB();
  when(mockitovolt.getEELibraryVersionString()).thenReturn(realvolt.getEELibraryVersionString());
  CatalogContext catContext=mock(CatalogContext.class);
  Cluster cluster=mock(Cluster.class);
  when(catContext.getCluster()).thenReturn(cluster);
  when(mockitovolt.getCatalogContext()).thenReturn(catContext);
  VoltDB.replaceVoltDBInstanceForTest(mockitovolt);
  VoltDB.initialize(configuration);
  assertTrue(EELibraryLoader.loadExecutionEngineLibrary(true));
}
