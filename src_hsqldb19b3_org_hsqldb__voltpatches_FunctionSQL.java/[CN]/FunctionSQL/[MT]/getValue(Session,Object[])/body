{
switch (funcType) {
case FUNC_POSITION_CHAR:
{
      if (data[0] == null || data[1] == null) {
        return null;
      }
      long result=((CharacterType)nodes[1].dataType).position(session,data[1],data[0],nodes[0].dataType,0) + 1;
      if (nodes[2] != null && ((Number)nodes[2].valueData).intValue() == Tokens.OCTETS) {
        result*=2;
      }
      return ValuePool.getLong(result);
    }
case FUNC_POSITION_BINARY:
{
    if (data[0] == null || data[1] == null) {
      return null;
    }
    long result=((BinaryType)nodes[1].dataType).position(session,(BlobData)data[1],(BlobData)data[0],nodes[0].dataType,0) + 1;
    if (nodes[2] != null && ((Number)nodes[2].valueData).intValue() == Tokens.OCTETS) {
      result*=2;
    }
    return ValuePool.getLong(result);
  }
case FUNC_EXTRACT:
{
  if (data[1] == null) {
    return null;
  }
  int part=((Number)nodes[0].valueData).intValue();
  part=DTIType.getFieldNameTypeForToken(part);
switch (part) {
case Types.SQL_INTERVAL_SECOND:
{
      return ((DTIType)nodes[1].dataType).getSecondPart(data[1]);
    }
case DTIType.MONTH_NAME:
case DTIType.DAY_NAME:
{
    return ((DateTimeType)nodes[1].dataType).getPartString(session,data[1],part);
  }
default :
{
  int value=((DTIType)nodes[1].dataType).getPart(session,data[1],part);
  return ValuePool.getInt(value);
}
}
}
case FUNC_CHAR_LENGTH:
{
if (data[0] == null) {
return null;
}
long result=((CharacterType)nodes[0].dataType).size(session,data[0]);
return ValuePool.getLong(result);
}
case FUNC_BIT_LENGTH:
{
if (data[0] == null) {
return null;
}
long result;
if (nodes[0].dataType.isBinaryType()) {
result=((BlobData)data[0]).bitLength(session);
}
 else {
result=16 * ((CharacterType)nodes[0].dataType).size(session,data[0]);
}
return ValuePool.getLong(result);
}
case FUNC_OCTET_LENGTH:
{
if (data[0] == null) {
return null;
}
long result;
if (nodes[0].dataType.isBinaryType()) {
result=((BlobData)data[0]).length(session);
}
 else {
result=2 * ((CharacterType)nodes[0].dataType).size(session,data[0]);
}
return ValuePool.getLong(result);
}
case FUNC_ABS:
{
if (data[0] == null) {
return null;
}
return dataType.absolute(data[0]);
}
case FUNC_MOD:
{
if (data[0] == null || data[1] == null) {
return null;
}
Object value=((NumberType)nodes[0].dataType).divide(nodes[0],nodes[1]);
value=((NumberType)nodes[0].dataType).subtract(nodes[0],value,nodes[1].dataType);
return ((NumberType)dataType).convertToTypeLimits(session,value);
}
case FUNC_LN:
{
if (data[0] == null) {
return null;
}
double d=((Number)data[0]).doubleValue();
if (d <= 0) {
throw Error.error(ErrorCode.X_2201E);
}
d=Math.log(d);
return ValuePool.getDouble(Double.doubleToLongBits(d));
}
case FUNC_EXP:
{
if (data[0] == null) {
return null;
}
double val=Math.exp(((Number)data[0]).doubleValue());
return ValuePool.getDouble(Double.doubleToLongBits(val));
}
case FUNC_POWER:
{
if (data[0] == null || data[1] == null) {
return null;
}
double base=((Number)data[0]).doubleValue();
double exponent=((Number)data[1]).doubleValue();
double val;
if (base == 0) {
if (exponent < 0) {
throw Error.error(ErrorCode.X_2201F);
}
 else if (exponent == 0) {
val=1;
}
 else {
val=0;
}
}
 else {
val=Math.pow(base,exponent);
}
return ValuePool.getDouble(Double.doubleToLongBits(val));
}
case FUNC_SQRT:
{
if (data[0] == null) {
return null;
}
double val=Math.sqrt(((Number)data[0]).doubleValue());
return ValuePool.getDouble(Double.doubleToLongBits(val));
}
case FUNC_FLOOR:
{
if (data[0] == null) {
return null;
}
return ((NumberType)dataType).floor(data[0]);
}
case FUNC_CEILING:
{
if (data[0] == null) {
return null;
}
return ((NumberType)dataType).ceiling(data[0]);
}
case FUNC_WIDTH_BUCKET:
{
return null;
}
case FUNC_SUBSTRING_CHAR:
{
if (data[0] == null || data[1] == null) {
return null;
}
Object value;
value=Type.SQL_BIGINT.convertToType(session,data[1],nodes[1].dataType);
long offset=((Number)value).longValue() - 1;
long length=0;
if (nodes[2] != null) {
if (data[2] == null) {
return null;
}
value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);
length=((Number)value).longValue();
}
if (nodes[3] != null && ((Number)nodes[2].valueData).intValue() == Tokens.OCTETS) {
}
return ((CharacterType)dataType).substring(session,data[0],offset,length,nodes[2] != null,false);
}
case FUNC_FOLD_LOWER:
if (data[0] == null) {
return null;
}
return ((CharacterType)dataType).lower(session,data[0]);
case FUNC_FOLD_UPPER:
if (data[0] == null) {
return null;
}
return ((CharacterType)dataType).upper(session,data[0]);
case FUNC_TRIM_CHAR:
{
if (data[1] == null || data[2] == null) {
return null;
}
boolean leading=false;
boolean trailing=false;
switch (((Number)nodes[0].valueData).intValue()) {
case Tokens.BOTH:
leading=trailing=true;
break;
case Tokens.LEADING:
leading=true;
break;
case Tokens.TRAILING:
trailing=true;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");
}
String string=(String)data[1];
if (string.length() != 1) {
throw Error.error(ErrorCode.X_22027);
}
int character=string.charAt(0);
return ((CharacterType)dataType).trim(session,data[2],character,leading,trailing);
}
case FUNC_OVERLAY_CHAR:
{
if (data[0] == null || data[1] == null || data[2] == null) {
return null;
}
Object value;
value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);
long offset=((Number)value).longValue() - 1;
long length=0;
if (nodes[3] != null) {
if (data[3] == null) {
return null;
}
value=Type.SQL_BIGINT.convertToType(session,data[3],nodes[3].dataType);
length=((Number)value).longValue();
}
return ((CharacterType)dataType).overlay(null,data[0],data[1],offset,length,nodes[3] != null);
}
case FUNC_SUBSTRING_BINARY:
{
if (data[0] == null || data[1] == null) {
return null;
}
Object value;
value=Type.SQL_BIGINT.convertToType(session,data[1],nodes[1].dataType);
long offset=((Number)value).longValue() - 1;
long length=0;
if (nodes[2] != null) {
if (data[2] == null) {
return null;
}
value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);
length=((Number)value).intValue();
}
return ((BinaryType)dataType).substring(session,(BlobData)data[0],offset,length,nodes[2] != null);
}
case FUNC_TRIM_BINARY:
{
if (data[1] == null || data[2] == null) {
return null;
}
boolean leading=false;
boolean trailing=false;
int spec=((Number)nodes[0].valueData).intValue();
switch (spec) {
case Tokens.BOTH:
leading=trailing=true;
break;
case Tokens.LEADING:
leading=true;
break;
case Tokens.TRAILING:
trailing=true;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");
}
BlobData string=(BlobData)data[1];
if (string.length(session) != 1) {
throw Error.error(ErrorCode.X_22027);
}
byte[] bytes=string.getBytes();
return ((BinaryType)dataType).trim(session,(BlobData)data[3],bytes[0],leading,trailing);
}
case FUNC_OVERLAY_BINARY:
{
if (data[0] == null || data[1] == null || data[2] == null) {
return null;
}
Object value;
value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);
long offset=((Number)value).longValue() - 1;
long length=0;
if (nodes[3] != null) {
if (data[3] == null) {
return null;
}
value=Type.SQL_BIGINT.convertToType(session,data[3],nodes[3].dataType);
length=((Number)value).longValue();
}
return ((BinaryType)dataType).overlay(session,(BlobData)data[0],(BlobData)data[1],offset,length,nodes[3] != null);
}
case FUNC_CURRENT_CATALOG:
return session.database.getCatalogName().name;
case FUNC_CURRENT_ROLE:
return null;
case FUNC_CURRENT_SCHEMA:
return session.currentSchema.name;
case FUNC_CURRENT_USER:
return session.getGrantee().getNameString();
case FUNC_SESSION_USER:
return session.getGrantee().getNameString();
case FUNC_SYSTEM_USER:
return session.getGrantee().getNameString();
case FUNC_USER:
return session.getGrantee().getNameString();
case FUNC_VALUE:
return session.sessionData.currentValue;
case FUNC_CURRENT_DATE:
return session.getCurrentDate();
case FUNC_CURRENT_TIME:
return dataType.convertToTypeLimits(session,session.getCurrentTime(true));
case FUNC_CURRENT_TIMESTAMP:
return dataType.convertToTypeLimits(session,session.getCurrentTimestamp(true));
case FUNC_LOCALTIME:
return dataType.convertToTypeLimits(session,session.getCurrentTime(false));
case FUNC_LOCALTIMESTAMP:
return dataType.convertToTypeLimits(session,session.getCurrentTimestamp(false));
default :
throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");
}
}
