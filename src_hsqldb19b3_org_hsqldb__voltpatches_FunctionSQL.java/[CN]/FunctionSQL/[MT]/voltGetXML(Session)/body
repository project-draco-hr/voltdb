{
  assert(getType() == OpTypes.SQL_FUNCTION);
  VoltXMLElement exp=new VoltXMLElement("function");
  exp.attributes.put("name",name);
  exp.attributes.put("type",dataType.getNameString());
  if (parameterArg != -1) {
    exp.attributes.put("parameter",String.valueOf(parameterArg));
  }
  int volt_funcType=funcType;
switch (funcType) {
case FUNC_SUBSTRING_CHAR:
    if (nodes[2] == null) {
      exp.attributes.put("volt_alias","substring_from");
      volt_funcType=FUNC_VOLT_SUBSTRING_CHAR_FROM;
    }
 else {
      exp.attributes.put("volt_alias","substring_from_for");
    }
  break;
case FUNC_EXTRACT:
String volt_alias=null;
int keywordConstant=((Integer)nodes[0].valueData).intValue();
switch (keywordConstant) {
case Tokens.DAY_NAME:
volt_alias="day_name";
break;
case Tokens.MONTH_NAME:
volt_alias="month_name";
break;
case Tokens.QUARTER:
volt_alias="quarter";
break;
case Tokens.DAY_OF_MONTH:
volt_alias="day_of_month";
break;
case Tokens.DAY_OF_YEAR:
volt_alias="day_of_year";
break;
case Tokens.DAY_OF_WEEK:
volt_alias="day_of_week";
break;
case Tokens.WEEK_OF_YEAR:
volt_alias="week_of_year";
break;
case Types.SQL_INTERVAL_YEAR:
volt_alias="interval_year";
break;
case Types.SQL_INTERVAL_MONTH:
volt_alias="interval_month";
break;
case Types.SQL_INTERVAL_DAY:
volt_alias="interval_day";
break;
case Types.SQL_INTERVAL_HOUR:
volt_alias="interval_hour";
break;
case Types.SQL_INTERVAL_MINUTE:
volt_alias="interval_minute";
break;
case Types.SQL_INTERVAL_SECOND:
volt_alias="interval_second";
break;
case Tokens.YEAR:
volt_alias="year";
break;
case Tokens.MONTH:
volt_alias="month";
break;
case Tokens.DAY:
volt_alias="day";
break;
case Tokens.HOUR:
volt_alias="hour";
break;
case Tokens.MINUTE:
volt_alias="minute";
break;
case Tokens.SECOND:
volt_alias="interval_second";
break;
case Tokens.SECONDS_MIDNIGHT:
volt_alias="seconds_midnight";
break;
case Tokens.TIMEZONE_HOUR:
volt_alias="timezone_hour";
break;
case Tokens.TIMEZONE_MINUTE:
volt_alias="timezone_minute";
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeTypeForVoltDB: " + String.valueOf(keywordConstant));
}
exp.attributes.put("id",String.valueOf(keywordConstant + SQL_EXTRACT_VOLT_FUNC_OFFSET));
exp.attributes.put("volt_alias",volt_alias);
VoltXMLElement vxmle=nodes[1].voltGetXML(session);
exp.children.add(vxmle);
return exp;
default :
if (voltDisabled != null) {
exp.attributes.put("disabled",voltDisabled);
}
break;
}
exp.attributes.put("id",String.valueOf(volt_funcType));
switch (funcType) {
case FUNC_SUBSTRING_CHAR:
if (nodes[2] == null) {
exp.attributes.put("volt_alias","substring_from");
}
 else {
exp.attributes.put("volt_alias","substring_from_for");
}
break;
default :
break;
}
for (Expression expr : nodes) {
if (expr != null) {
VoltXMLElement vxmle=expr.voltGetXML(session);
exp.children.add(vxmle);
assert(vxmle != null);
}
}
return exp;
}
