{
  assert(getType() == OpTypes.SQL_FUNCTION);
  exp.attributes.put("name",name);
  exp.attributes.put("valuetype",dataType.getNameString());
  if (parameterArg != -1) {
    exp.attributes.put("result_type_parameter_index",String.valueOf(parameterArg));
  }
  int volt_funcType=funcType;
  String implied_argument=null;
  int keywordConstant=0;
switch (funcType) {
case FUNC_SUBSTRING_CHAR:
    if (nodes.length == 2 || nodes[2] == null) {
      volt_funcType=FUNC_VOLT_SUBSTRING_CHAR_FROM;
    }
  exp.attributes.put("function_id",String.valueOf(volt_funcType));
return exp;
case FUNC_TRIM_CHAR:
implied_argument=null;
keywordConstant=((Integer)nodes[0].valueData).intValue();
switch (keywordConstant) {
case Tokens.BOTH:
implied_argument="BOTH";
break;
case Tokens.LEADING:
implied_argument="LEADING";
break;
case Tokens.TRAILING:
implied_argument="TRAILING";
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");
}
assert(implied_argument != null);
exp.attributes.put("function_id",String.valueOf(keywordConstant + SQL_TRIM_VOLT_FUNC_OFFSET));
exp.attributes.put("implied_argument",implied_argument);
exp.children.remove(0);
return exp;
case FUNC_EXTRACT:
implied_argument=null;
keywordConstant=((Integer)nodes[0].valueData).intValue();
switch (keywordConstant) {
case Tokens.DAY_NAME:
implied_argument="DAY_NAME";
break;
case Tokens.MONTH_NAME:
implied_argument="MONTH_NAME";
break;
case Tokens.QUARTER:
implied_argument="QUARTER";
break;
case Tokens.DAY_OF_YEAR:
implied_argument="DAY_OF_YEAR";
break;
case Tokens.WEEKDAY:
implied_argument="WEEKDAY";
break;
case Tokens.DAY_OF_WEEK:
implied_argument="DAY_OF_WEEK";
break;
case Tokens.WEEK:
keywordConstant=Tokens.WEEK_OF_YEAR;
case Tokens.WEEK_OF_YEAR:
implied_argument="WEEK_OF_YEAR";
break;
case Types.SQL_INTERVAL_YEAR:
implied_argument="INTERVAL_YEAR";
break;
case Types.SQL_INTERVAL_MONTH:
implied_argument="SQL_INTERVAL_MONTH";
break;
case Types.SQL_INTERVAL_DAY:
implied_argument="SQL_INTERVAL_DAY";
break;
case Types.SQL_INTERVAL_HOUR:
implied_argument="SQL_INTERVAL_HOUR";
break;
case Types.SQL_INTERVAL_MINUTE:
implied_argument="SQL_INTERVAL_MINUTE";
break;
case Types.SQL_INTERVAL_SECOND:
implied_argument="SQL_INTERVAL_SECOND";
break;
case Tokens.YEAR:
implied_argument="YEAR";
break;
case Tokens.MONTH:
implied_argument="MONTH";
break;
case Tokens.DAY_OF_MONTH:
keywordConstant=Tokens.DAY;
case Tokens.DAY:
implied_argument="DAY";
break;
case Tokens.HOUR:
implied_argument="HOUR";
break;
case Tokens.MINUTE:
implied_argument="MINUTE";
break;
case Tokens.SECOND:
implied_argument="SECOND";
break;
case Tokens.SECONDS_MIDNIGHT:
implied_argument="SECONDS_MIDNIGHT";
break;
case Tokens.TIMEZONE_HOUR:
implied_argument="TIMEZONE_HOUR";
break;
case Tokens.TIMEZONE_MINUTE:
implied_argument="TIMEZONE_MINUTE";
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeTypeForVoltDB: " + String.valueOf(keywordConstant));
}
assert(implied_argument != null);
exp.attributes.put("function_id",String.valueOf(keywordConstant + SQL_EXTRACT_VOLT_FUNC_OFFSET));
exp.attributes.put("implied_argument",implied_argument);
exp.children.remove(0);
return exp;
case FunctionForVoltDB.FunctionId.FUNC_VOLT_SINCE_EPOCH:
implied_argument=null;
keywordConstant=((Integer)nodes[0].valueData).intValue();
int since_epoch_func=-1;
switch (keywordConstant) {
case Tokens.SECOND:
implied_argument="SECOND";
since_epoch_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_SINCE_EPOCH_SECOND;
break;
case Tokens.MILLIS:
case Tokens.MILLISECOND:
implied_argument="MILLISECOND";
since_epoch_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_SINCE_EPOCH_MILLISECOND;
break;
case Tokens.MICROS:
case Tokens.MICROSECOND:
implied_argument="MICROSECOND";
since_epoch_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_SINCE_EPOCH_MICROSECOND;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeTypeForVoltDB: " + String.valueOf(keywordConstant));
}
assert(implied_argument != null);
assert(-1 != since_epoch_func);
exp.attributes.put("function_id",String.valueOf(since_epoch_func));
exp.attributes.put("implied_argument",implied_argument);
exp.children.remove(0);
return exp;
case FunctionForVoltDB.FunctionId.FUNC_VOLT_TO_TIMESTAMP:
implied_argument=null;
keywordConstant=((Integer)nodes[0].valueData).intValue();
int to_timestamp_func=-1;
switch (keywordConstant) {
case Tokens.SECOND:
implied_argument="SECOND";
to_timestamp_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TO_TIMESTAMP_SECOND;
break;
case Tokens.MILLIS:
case Tokens.MILLISECOND:
implied_argument="MILLISECOND";
to_timestamp_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TO_TIMESTAMP_MILLISECOND;
break;
case Tokens.MICROS:
case Tokens.MICROSECOND:
implied_argument="MICROSECOND";
to_timestamp_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TO_TIMESTAMP_MICROSECOND;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeTypeForVoltDB: " + String.valueOf(keywordConstant));
}
assert(-1 != to_timestamp_func);
exp.attributes.put("function_id",String.valueOf(to_timestamp_func));
exp.attributes.put("implied_argument",implied_argument);
exp.children.remove(0);
return exp;
case FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_TIMESTAMP:
implied_argument=null;
keywordConstant=((Integer)nodes[0].valueData).intValue();
int truncate_func=-1;
switch (keywordConstant) {
case Tokens.YEAR:
implied_argument="YEAR";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_YEAR;
break;
case Tokens.QUARTER:
implied_argument="QUARTER";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_QUARTER;
break;
case Tokens.MONTH:
implied_argument="MONTH";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_MONTH;
break;
case Tokens.DAY:
implied_argument="DAY";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_DAY;
break;
case Tokens.HOUR:
implied_argument="HOUR";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_HOUR;
break;
case Tokens.MINUTE:
implied_argument="MINUTE";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_MINUTE;
break;
case Tokens.SECOND:
implied_argument="SECOND";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_SECOND;
break;
case Tokens.MILLIS:
case Tokens.MILLISECOND:
implied_argument="MILLISECOND";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_MILLISECOND;
break;
case Tokens.MICROS:
case Tokens.MICROSECOND:
implied_argument="MICROSECOND";
truncate_func=FunctionForVoltDB.FunctionId.FUNC_VOLT_TRUNCATE_MICROSECOND;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeTypeForVoltDB: " + String.valueOf(keywordConstant));
}
assert(implied_argument != null);
assert(-1 != truncate_func);
exp.attributes.put("function_id",String.valueOf(truncate_func));
exp.attributes.put("implied_argument",implied_argument);
exp.children.remove(0);
return exp;
case FunctionForVoltDB.FunctionId.FUNC_VOLT_DISTANCE:
Type leftChildType=nodes[0].dataType;
Type rightChildType=nodes[1].dataType;
int distanceFunctionId=-1;
if (leftChildType.isGeographyType()) {
if (rightChildType.isGeographyType()) {
assert(false);
throw Error.error(ErrorCode.X_42565,"Distance between two polygons not supported");
}
 else if (rightChildType.isPointType()) {
distanceFunctionId=FunctionForVoltDB.FunctionId.FUNC_VOLT_DISTANCE_POLYGON_POINT;
}
 else {
assert(false);
throw Error.error(ErrorCode.X_42565,"2nd argument to distance() of invalid type");
}
}
 else if (leftChildType.isPointType()) {
if (rightChildType.isPointType()) {
distanceFunctionId=FunctionForVoltDB.FunctionId.FUNC_VOLT_DISTANCE_POINT_POINT;
}
 else if (rightChildType.isGeographyType()) {
assert(false);
throw Error.runtimeError(ErrorCode.X_42565,"distance between point and polygon");
}
 else {
assert(false);
throw Error.error(ErrorCode.X_42565,"2nd argument to distance() of invalid type");
}
}
 else {
assert(false);
throw Error.error(ErrorCode.X_42565);
}
exp.attributes.put("function_id",String.valueOf(distanceFunctionId));
return exp;
default :
if (voltDisabled != null) {
exp.attributes.put("disabled",voltDisabled);
}
exp.attributes.put("function_id",String.valueOf(volt_funcType));
return exp;
}
}
