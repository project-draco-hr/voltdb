{
  this();
  this.funcType=id;
switch (id) {
case FUNC_POSITION_CHAR:
case FUNC_POSITION_BINARY:
    name=Tokens.T_POSITION;
  parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.IN,Tokens.QUESTION,Tokens.X_OPTION,5,Tokens.USING,Tokens.X_KEYSET,2,Tokens.CHARACTERS,Tokens.OCTETS,Tokens.CLOSEBRACKET};
break;
case FUNC_OCCURENCES_REGEX:
case FUNC_POSITION_REGEX:
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_EXTRACT:
name=Tokens.T_EXTRACT;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,16,Tokens.YEAR,Tokens.MONTH,Tokens.DAY,Tokens.HOUR,Tokens.MINUTE,Tokens.SECOND,Tokens.DAY_OF_WEEK,Tokens.WEEK_OF_YEAR,Tokens.QUARTER,Tokens.DAY_OF_YEAR,Tokens.DAY_OF_MONTH,Tokens.DAY_NAME,Tokens.MONTH_NAME,Tokens.SECONDS_MIDNIGHT,Tokens.TIMEZONE_HOUR,Tokens.TIMEZONE_MINUTE,Tokens.FROM,Tokens.QUESTION,Tokens.CLOSEBRACKET};
break;
case FUNC_CHAR_LENGTH:
name=Tokens.T_CHAR_LENGTH;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.X_OPTION,5,Tokens.USING,Tokens.X_KEYSET,2,Tokens.CHARACTERS,Tokens.OCTETS,Tokens.CLOSEBRACKET};
break;
case FUNC_BIT_LENGTH:
name=Tokens.T_BIT_LENGTH;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_OCTET_LENGTH:
name=Tokens.T_OCTET_LENGTH;
parseList=singleParamList;
break;
case FUNC_CARDINALITY:
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_ABS:
name=Tokens.T_ABS;
parseList=singleParamList;
break;
case FUNC_MOD:
name=Tokens.T_MOD;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_LN:
name=Tokens.T_LN;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_EXP:
name=Tokens.T_EXP;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_POWER:
name=Tokens.T_POWER;
parseList=doubleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_SQRT:
name=Tokens.T_SQRT;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_FLOOR:
name=Tokens.T_FLOOR;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CEILING:
name=Tokens.T_CEILING;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_WIDTH_BUCKET:
name=Tokens.T_WIDTH_BUCKET;
parseList=quadParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_SUBSTRING_BINARY:
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
case FUNC_SUBSTRING_CHAR:
name=Tokens.T_SUBSTRING;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.FROM,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.FOR,Tokens.QUESTION,Tokens.X_OPTION,5,Tokens.USING,Tokens.X_KEYSET,2,Tokens.CHARACTERS,Tokens.OCTETS,Tokens.CLOSEBRACKET};
parseListAlt=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};
break;
case FUNC_FOLD_LOWER:
name=Tokens.T_LOWER;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_FOLD_UPPER:
name=Tokens.T_UPPER;
parseList=singleParamList;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_TRIM_BINARY:
case FUNC_TRIM_CHAR:
name=Tokens.T_TRIM;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_OPTION,11,Tokens.X_OPTION,5,Tokens.X_KEYSET,3,Tokens.LEADING,Tokens.TRAILING,Tokens.BOTH,Tokens.X_OPTION,1,Tokens.QUESTION,Tokens.FROM,Tokens.QUESTION,Tokens.CLOSEBRACKET};
break;
case FUNC_OVERLAY_BINARY:
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
case FUNC_OVERLAY_CHAR:
name=Tokens.T_OVERLAY;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.PLACING,Tokens.QUESTION,Tokens.FROM,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.FOR,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.USING,Tokens.CHARACTERS,Tokens.CLOSEBRACKET};
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_CATALOG:
name=Tokens.T_CURRENT_CATALOG;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_ROLE:
name=Tokens.T_CURRENT_ROLE;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_SCHEMA:
name=Tokens.T_CURRENT_SCHEMA;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_USER:
name=Tokens.T_CURRENT_USER;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_SESSION_USER:
name=Tokens.T_SESSION_USER;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_SYSTEM_USER:
name=Tokens.T_SYSTEM_USER;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_USER:
name=Tokens.T_USER;
parseList=optionalNoParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_VALUE:
name=Tokens.T_VALUE;
parseList=noParamList;
isValueFunction=false;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_DATE:
name=Tokens.T_CURRENT_DATE;
parseList=noParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_TIME:
name=Tokens.T_CURRENT_TIME;
parseList=optionalIntegerParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_CURRENT_TIMESTAMP:
name=Tokens.T_CURRENT_TIMESTAMP;
parseList=optionalIntegerParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_LOCALTIME:
name=Tokens.T_LOCALTIME;
parseList=optionalIntegerParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
case FUNC_LOCALTIMESTAMP:
name=Tokens.T_LOCALTIMESTAMP;
parseList=optionalIntegerParamList;
isValueFunction=true;
voltDisabled=DISABLED_IN_FUNCTIONSQL_CONSTRUCTOR;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");
}
}
