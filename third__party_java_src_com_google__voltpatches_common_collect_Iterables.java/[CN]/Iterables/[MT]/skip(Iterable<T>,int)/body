{
  checkNotNull(iterable);
  checkArgument(numberToSkip >= 0,"number to skip cannot be negative");
  if (iterable instanceof List) {
    final List<T> list=(List<T>)iterable;
    return new FluentIterable<T>(){
      @Override public Iterator<T> iterator(){
        int toSkip=Math.min(list.size(),numberToSkip);
        return list.subList(toSkip,list.size()).iterator();
      }
    }
;
  }
  return new FluentIterable<T>(){
    @Override public Iterator<T> iterator(){
      final Iterator<T> iterator=iterable.iterator();
      Iterators.advance(iterator,numberToSkip);
      return new Iterator<T>(){
        boolean atStart=true;
        @Override public boolean hasNext(){
          return iterator.hasNext();
        }
        @Override public T next(){
          T result=iterator.next();
          atStart=false;
          return result;
        }
        @Override public void remove(){
          checkRemove(!atStart);
          iterator.remove();
        }
      }
;
    }
  }
;
}
