{
  AbstractPlanNode node=compile("SELECT A+B, MOD(A, B), B, RANK() OVER (PARTITION BY A,B ORDER BY B DESC ) AS ARANK FROM AAA;");
  assertTrue(node instanceof SendPlanNode);
  AbstractPlanNode sendNode=node;
  AbstractPlanNode projPlanNode=node.getChild(0);
  assertTrue(projPlanNode instanceof ProjectionPlanNode);
  AbstractPlanNode partitionByPlanNode=projPlanNode.getChild(0);
  assertTrue(partitionByPlanNode instanceof PartitionByPlanNode);
  AbstractPlanNode abstractOrderByNode=partitionByPlanNode.getChild(0);
  assertTrue(abstractOrderByNode instanceof OrderByPlanNode);
  OrderByPlanNode orderByNode=(OrderByPlanNode)abstractOrderByNode;
  NodeSchema input_schema=orderByNode.getOutputSchema();
  assertNotNull(input_schema);
  AbstractPlanNode seqScanNode=orderByNode.getChild(0);
  assertTrue(seqScanNode instanceof SeqScanPlanNode);
  PartitionByPlanNode pbPlanNode=(PartitionByPlanNode)partitionByPlanNode;
  NodeSchema schema=pbPlanNode.getOutputSchema();
  assertEquals(2,orderByNode.getSortExpressions().size());
  assertEquals(SortDirectionType.ASC,orderByNode.getSortDirections().get(0));
  assertEquals(SortDirectionType.DESC,orderByNode.getSortDirections().get(1));
  SchemaColumn column=schema.getColumns().get(0);
  assertTrue(column.getExpression() instanceof WindowedExpression);
  assertEquals("ARANK",column.getColumnAlias());
  assertEquals(2,pbPlanNode.getNumberOfPartitionByExpressions());
  validateTVEs(input_schema,pbPlanNode);
}
