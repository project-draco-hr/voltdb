{
  assertTrue(pn.size() == 2);
  AbstractPlanNode p=pn.get(0).getChild(0);
  ;
  if (hasProjectionNode) {
    assertTrue(p instanceof ProjectionPlanNode);
    p=p.getChild(0);
  }
  assertTrue(p instanceof AggregatePlanNode);
  String fragmentString=p.toJSONString();
  ExpressionType[] topTypes=(pushDownTypes != null) ? pushDownTypes : aggTypes;
  for (  ExpressionType type : topTypes) {
    assertTrue(fragmentString.contains("\"AGGREGATE_TYPE\":\"" + type.toString() + "\""));
  }
  p=pn.get(1).getChild(0);
  if (pushDownTypes == null) {
    assertTrue(p instanceof AbstractScanPlanNode);
    return;
  }
  if (isAggInlined) {
    assertTrue(p instanceof AbstractScanPlanNode);
    assertNotNull(p.getInlinePlanNode(PlanNodeType.AGGREGATE));
    p=p.getInlinePlanNode(PlanNodeType.AGGREGATE);
  }
 else {
    assertTrue(p instanceof AggregatePlanNode);
  }
  fragmentString=p.toJSONString();
  for (  ExpressionType type : aggTypes) {
    assertTrue(fragmentString.contains("\"AGGREGATE_TYPE\":\"" + type.toString() + "\""));
  }
}
