{
  List<AbstractPlanNode> pn=compileToFragments("SELECT count(distinct PKEY), sum(distinct PKEY), min(distinct PKEY), max(distinct PKEY), avg(distinct PKEY)" + " FROM T1;");
  for (  AbstractPlanNode apn : pn) {
    System.out.println(apn.toExplainPlanString());
  }
  checkPushedDown(pn,true,new ExpressionType[]{ExpressionType.AGGREGATE_COUNT,ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_MIN,ExpressionType.AGGREGATE_MAX,ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_COUNT},new ExpressionType[]{ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_MIN,ExpressionType.AGGREGATE_MAX,ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_SUM},true);
  pn=compileToFragments("SELECT count(distinct PKEY), count(A1), min(distinct PKEY), max(distinct A1), sum(A1)" + " FROM T1;");
  for (  AbstractPlanNode apn : pn) {
    System.out.println(apn.toExplainPlanString());
  }
  checkPushedDown(pn,true,new ExpressionType[]{ExpressionType.AGGREGATE_COUNT,ExpressionType.AGGREGATE_COUNT,ExpressionType.AGGREGATE_MIN,ExpressionType.AGGREGATE_MAX,ExpressionType.AGGREGATE_SUM},new ExpressionType[]{ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_SUM,ExpressionType.AGGREGATE_MIN,ExpressionType.AGGREGATE_MAX,ExpressionType.AGGREGATE_SUM});
  pn=compileToFragments("SELECT count(distinct PKEY), count(distinct A1) FROM T1;");
  assertTrue(pn.size() == 2);
  assertTrue(pn.get(1).getChild(0) instanceof AbstractScanPlanNode);
  AbstractScanPlanNode asp=(AbstractScanPlanNode)pn.get(1).getChild(0);
  assertTrue(asp.getInlinePlanNode(PlanNodeType.AGGREGATE) == null);
}
