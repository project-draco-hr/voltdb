{
  StringBuffer sb=new StringBuffer();
  sb.append(OpTypes.aggregateName(opType)).append("(");
  for (  Expression e : nodes) {
    sb.append(e.getSQL());
  }
  sb.append(") ").append(Tokens.T_OVER + " (");
  if (m_partitionByList.size() > 0) {
    sb.append(Tokens.T_PARTITION + ' ' + Tokens.T_BY+ ' ');
    String sep="";
    for (int idx=0; idx < m_partitionByList.size(); idx+=1) {
      Expression expr=m_partitionByList.get(idx);
      sb.append(sep).append(expr.getSQL());
      sep=", ";
    }
  }
  if (m_sortAndSlice != null && m_sortAndSlice.getOrderLength() > 0) {
    sb.append(Tokens.T_ORDER + ' ' + Tokens.T_BY+ ' ');
    for (int idx=0; idx < m_sortAndSlice.getOrderLength(); idx+=1) {
      Expression obExpr=(Expression)m_sortAndSlice.exprList.get(idx);
      assert(obExpr instanceof ExpressionOrderBy);
      ExpressionOrderBy obOrderByExpression=(ExpressionOrderBy)obExpr;
      sb.append(obExpr.getSQL()).append(' ').append(obOrderByExpression.isDescending() ? Tokens.T_DESC : Tokens.T_ASC);
    }
  }
  sb.append(")");
  return sb.toString();
}
