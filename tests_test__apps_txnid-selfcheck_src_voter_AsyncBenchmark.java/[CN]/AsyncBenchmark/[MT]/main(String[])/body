{
  try {
    AppHelper apph=new AppHelper(AsyncBenchmark.class.getCanonicalName()).add("displayinterval","display_interval_in_seconds","Interval for performance feedback, in seconds.",10).add("duration","run_duration_in_seconds","Benchmark duration, in seconds.",120).add("servers","comma_separated_server_list","List of VoltDB servers to connect to.","localhost").add("port","port_number","Client port to connect to on cluster nodes.",21212).add("ratelimit","rate_limit","Rate limit to start from (number of transactions per second).",100000).add("autotune","auto_tune","Flag indicating whether the benchmark should self-tune the transaction rate for a target execution latency (true|false).","true").add("latency-target","latency_target","Execution latency to target to tune transaction rate (in milliseconds).",10.0d).setArguments(args);
    long displayInterval=apph.longValue("displayinterval");
    long duration=apph.longValue("duration");
    String servers=apph.stringValue("servers");
    int port=apph.intValue("port");
    long rateLimit=apph.longValue("ratelimit");
    boolean autoTune=apph.booleanValue("autotune");
    double latencyTarget=apph.doubleValue("latency-target");
    final String csv=apph.stringValue("stats");
    apph.validate("duration",(duration > 0)).validate("displayinterval",(displayInterval > 0)).validate("ratelimit",(rateLimit > 0)).validate("latency-target",(latencyTarget > 0));
    apph.printActualUsage();
    Con=ClientConnectionPool.getWithRetry(servers,port);
    Timer timer=new Timer();
    timer.scheduleAtFixedRate(new TimerTask(){
      @Override public void run(){
        System.out.print(Con.getStatistics("doTxn"));
      }
    }
,displayInterval * 1000l,displayInterval * 1000l);
    java.util.Random r=new java.util.Random(2);
    IRateLimiter limiter=null;
    if (autoTune)     limiter=new LatencyLimiter(Con,"doTxn",latencyTarget,rateLimit);
 else     limiter=new RateLimiter(rateLimit);
    final long endTime=System.currentTimeMillis() + (1000l * duration);
    while (endTime > System.currentTimeMillis()) {
      Con.executeAsync(new ProcedureCallback(){
        @Override public void clientCallback(        ClientResponse response) throws Exception {
          if (response.getStatus() != ClientResponse.SUCCESS) {
            System.out.println(response.getStatusString());
            System.exit(-1);
          }
        }
      }
,"doTxn",(byte)r.nextInt(127));
      limiter.throttle();
    }
    timer.cancel();
    System.out.printf("-------------------------------------------------------------------------------------\n" + " Voting Results\n" + "-------------------------------------------------------------------------------------\n\n"+ "A total of %d votes was received...\n"+ " - %,9d Accepted\n"+ " - %,9d Rejected (Invalid Contestant)\n"+ " - %,9d Rejected (Maximum Vote Count Reached)\n"+ " - %,9d Failed (Transaction Error)\n"+ "\n\n"+ "-------------------------------------------------------------------------------------\n"+ "Contestant Name\t\tVotes Received\n",Con.getStatistics("doTxn").getExecutionCount(),VotingBoardResults.get(0),VotingBoardResults.get(1),VotingBoardResults.get(2),VotingBoardResults.get(3));
    System.out.println("\n\n-------------------------------------------------------------------------------------\n" + " System Statistics\n" + "-------------------------------------------------------------------------------------\n\n");
    System.out.print(Con.getStatistics("doTxn").toString(false));
    Con.saveStatistics(csv);
    Con.close();
  }
 catch (  Exception x) {
    System.out.println("Exception: " + x);
    x.printStackTrace();
  }
}
