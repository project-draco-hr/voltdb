{
  m_rvdb=rvdb;
  m_config=rvdb.m_config;
  m_isRejoin=m_config.m_rejoinToHostAndPort != null;
  m_threadCount=threadCount;
  m_jobs.put(CollectPlatformInfo.class,new CollectPlatformInfo());
  m_jobs.put(ReadDeploymentFile.class,new ReadDeploymentFile());
  m_jobs.put(LoadCatalog.class,new LoadCatalog());
  m_jobs.put(EnforceLicensing.class,new EnforceLicensing());
  m_jobs.put(SetupCommandLogging.class,new SetupCommandLogging());
  m_jobs.put(StartHTTPServer.class,new StartHTTPServer());
  m_jobs.put(InitFaultManager.class,new InitFaultManager());
  m_jobs.put(InitExport.class,new InitExport());
  m_jobs.put(InitHashinator.class,new InitHashinator());
  m_jobs.put(CollectLocalNetworkMetadata.class,new CollectLocalNetworkMetadata());
  m_jobs.put(JoinAndInitNetwork.class,new JoinAndInitNetwork());
  m_jobs.put(InitAgreementSite.class,new InitAgreementSite());
  m_jobs.put(SetupAdminMode.class,new SetupAdminMode());
  m_jobs.put(PostNetworkAndCatalogWork.class,new PostNetworkAndCatalogWork());
  for (  InitWork iw : m_jobs.values()) {
    for (    Class<? extends InitWork> cls : iw.m_blockers) {
      InitWork blocker=m_jobs.get(cls);
      blocker.m_blockees.add(iw.getClass());
    }
  }
  List<Class<? extends InitWork>> toRemove=new ArrayList<Class<? extends InitWork>>();
  for (  Entry<Class<? extends InitWork>,InitWork> e : m_jobs.entrySet()) {
    if (e.getValue().m_blockers.size() == 0) {
      toRemove.add(e.getKey());
      m_readyJobs.add(e.getValue());
    }
  }
}
