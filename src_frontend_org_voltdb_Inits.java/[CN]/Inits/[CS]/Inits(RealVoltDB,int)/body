{
  m_rvdb=rvdb;
  m_config=rvdb.getConfig();
  if (m_config.m_startAction.doesRejoin()) {
    m_isRejoin=true;
  }
 else {
    m_isRejoin=false;
  }
  m_threadCount=threadCount;
  m_deployment=rvdb.m_catalogContext.getDeployment();
  Class<?>[] declaredClasses=Inits.class.getDeclaredClasses();
  for (  Class<?> cls : declaredClasses) {
    if (cls == InitWork.class)     continue;
    if (cls == COMPLETION_WORK.class)     continue;
    if (InitWork.class.isAssignableFrom(cls)) {
      InitWork instance=null;
      try {
        Constructor<?> constructor=cls.getDeclaredConstructor(Inits.class);
        instance=(InitWork)constructor.newInstance(this);
      }
 catch (      Exception e) {
        VoltDB.crashLocalVoltDB("Critical error loading class " + cls.getName(),true,e);
      }
      m_jobs.put(instance.getClass(),instance);
    }
  }
  for (  InitWork iw : m_jobs.values()) {
    for (    Class<? extends InitWork> cls : iw.m_blockers) {
      InitWork blocker=m_jobs.get(cls);
      blocker.m_blockees.add(iw.getClass());
    }
  }
  List<Class<? extends InitWork>> toRemove=new ArrayList<Class<? extends InitWork>>();
  for (  Entry<Class<? extends InitWork>,InitWork> e : m_jobs.entrySet()) {
    if (e.getValue().m_blockers.size() == 0) {
      toRemove.add(e.getKey());
      m_readyJobs.add(e.getValue());
    }
  }
}
