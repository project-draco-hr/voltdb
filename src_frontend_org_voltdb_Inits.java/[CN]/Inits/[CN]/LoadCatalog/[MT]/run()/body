{
  CatalogAndIds catalogStuff=null;
  do {
    try {
      catalogStuff=CatalogUtil.getCatalogFromZK(m_rvdb.getHostMessenger().getZK());
    }
 catch (    org.apache.zookeeper_voltpatches.KeeperException.NoNodeException e) {
    }
catch (    Exception e) {
      VoltDB.crashLocalVoltDB("System was interrupted while waiting for a catalog.",false,null);
    }
  }
 while (catalogStuff == null);
  try {
    Pair<String,String> loadResults=CatalogUtil.loadAndUpgradeCatalogFromJar(catalogStuff.bytes,hostLog);
    m_rvdb.m_serializedCatalog=loadResults.getFirst();
  }
 catch (  IOException e) {
    VoltDB.crashLocalVoltDB("Unable to load catalog",true,e);
  }
  if ((m_rvdb.m_serializedCatalog == null) || (m_rvdb.m_serializedCatalog.length() == 0))   VoltDB.crashLocalVoltDB("Catalog loading failure",false,null);
  Catalog catalog=new Catalog();
  catalog.execute(m_rvdb.m_serializedCatalog);
  try {
    long result=CatalogUtil.compileDeployment(catalog,m_deployment,true,false);
    if (result < 0) {
      hostLog.fatal("Error parsing deployment file");
      VoltDB.crashLocalVoltDB("Error parsing deployment file");
    }
  }
 catch (  Exception e) {
    hostLog.fatal("Error parsing deployment file",e);
    VoltDB.crashLocalVoltDB("Error parsing deployment file",true,e);
  }
  try {
    m_rvdb.m_serializedCatalog=catalog.serialize();
    m_rvdb.m_catalogContext=new CatalogContext(catalogStuff.txnId,catalogStuff.uniqueId,catalog,catalogStuff.bytes,m_rvdb.m_catalogContext.deploymentHash,catalogStuff.version,-1);
  }
 catch (  Exception e) {
    VoltDB.crashLocalVoltDB("Error agreeing on starting catalog version",true,e);
  }
}
