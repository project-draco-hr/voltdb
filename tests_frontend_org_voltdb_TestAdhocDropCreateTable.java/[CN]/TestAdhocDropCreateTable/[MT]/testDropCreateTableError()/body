{
  String pathToCatalog=Configuration.getPathToCatalogForTest("adhocddl.jar");
  String pathToDeployment=Configuration.getPathToCatalogForTest("adhocddl.xml");
  VoltProjectBuilder builder=new VoltProjectBuilder();
  builder.addLiteralSchema("create table FOO (ID integer);");
  builder.setUseDDLSchema(true);
  boolean success=builder.compile(pathToCatalog,2,1,0);
  assertTrue("Schema compilation failed",success);
  MiscUtils.copyFile(builder.getPathToDeployment(),pathToDeployment);
  VoltDB.Configuration config=new VoltDB.Configuration();
  config.m_pathToCatalog=pathToCatalog;
  config.m_pathToDeployment=pathToDeployment;
  try {
    startSystem(config);
    assertTrue(findTableInSystemCatalogResults("FOO"));
    try {
      m_client.callProcedure("@AdHoc","drop table FOO;");
      m_client.callProcedure("@AdHoc","create table FOO (ID integer);");
    }
 catch (    ProcCallException pce) {
      pce.printStackTrace();
      fail("Separate DROP/CREATE commands should have worked.");
    }
    assertTrue(findTableInSystemCatalogResults("FOO"));
    boolean threw=false;
    try {
      m_client.callProcedure("@AdHoc","drop table FOO; create table FOO (ID integer);");
    }
 catch (    ProcCallException pce) {
      threw=true;
      boolean correct=pce.getMessage().contains("contains both DROP and CREATE");
      assertTrue("Wrong error received for DROP/CREATE batch.",correct);
    }
    assertTrue("DROP/CREATE batch didn't fail.",threw);
    assertTrue(findTableInSystemCatalogResults("FOO"));
    assertFalse(findTableInSystemCatalogResults("FO"));
    try {
      m_client.callProcedure("@AdHoc","drop table FOO; create table FO (NAME varchar(20));");
    }
 catch (    ProcCallException pce) {
      fail("Non-conflicting DROP/CREATE commands should have worked.");
    }
    assertFalse(findTableInSystemCatalogResults("FOO"));
    assertTrue(findTableInSystemCatalogResults("FO"));
  }
  finally {
    teardownSystem();
  }
}
