{
  final Iterator<Range<C>> backingItr;
  if (!upperBoundWindow.hasLowerBound()) {
    backingItr=rangesByLowerBound.values().iterator();
  }
 else {
    Entry<Cut<C>,Range<C>> lowerEntry=rangesByLowerBound.lowerEntry(upperBoundWindow.lowerEndpoint());
    if (lowerEntry == null) {
      backingItr=rangesByLowerBound.values().iterator();
    }
 else     if (upperBoundWindow.lowerBound.isLessThan(lowerEntry.getValue().upperBound)) {
      backingItr=rangesByLowerBound.tailMap(lowerEntry.getKey(),true).values().iterator();
    }
 else {
      backingItr=rangesByLowerBound.tailMap(upperBoundWindow.lowerEndpoint(),true).values().iterator();
    }
  }
  return new AbstractIterator<Entry<Cut<C>,Range<C>>>(){
    @Override protected Entry<Cut<C>,Range<C>> computeNext(){
      if (!backingItr.hasNext()) {
        return endOfData();
      }
      Range<C> range=backingItr.next();
      if (upperBoundWindow.upperBound.isLessThan(range.upperBound)) {
        return endOfData();
      }
 else {
        return Maps.immutableEntry(range.upperBound,range);
      }
    }
  }
;
}
