{
  if (restriction.isEmpty()) {
    return Iterators.emptyIterator();
  }
  Cut<Cut<C>> upperBoundOnLowerBounds=Ordering.natural().min(lowerBoundWindow.upperBound,Cut.belowValue(restriction.upperBound));
  final Iterator<Range<C>> completeRangeItr=rangesByLowerBound.headMap(upperBoundOnLowerBounds.endpoint(),upperBoundOnLowerBounds.typeAsUpperBound() == BoundType.CLOSED).descendingMap().values().iterator();
  return new AbstractIterator<Entry<Cut<C>,Range<C>>>(){
    @Override protected Entry<Cut<C>,Range<C>> computeNext(){
      if (!completeRangeItr.hasNext()) {
        return endOfData();
      }
      Range<C> nextRange=completeRangeItr.next();
      if (restriction.lowerBound.compareTo(nextRange.upperBound) >= 0) {
        return endOfData();
      }
      nextRange=nextRange.intersection(restriction);
      if (lowerBoundWindow.contains(nextRange.lowerBound)) {
        return Maps.immutableEntry(nextRange.lowerBound,nextRange);
      }
 else {
        return endOfData();
      }
    }
  }
;
}
