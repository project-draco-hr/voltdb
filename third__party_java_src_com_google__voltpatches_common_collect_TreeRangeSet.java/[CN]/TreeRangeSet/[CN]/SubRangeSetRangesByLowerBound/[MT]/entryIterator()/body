{
  if (restriction.isEmpty()) {
    return Iterators.emptyIterator();
  }
  final Iterator<Range<C>> completeRangeItr;
  if (lowerBoundWindow.upperBound.isLessThan(restriction.lowerBound)) {
    return Iterators.emptyIterator();
  }
 else   if (lowerBoundWindow.lowerBound.isLessThan(restriction.lowerBound)) {
    completeRangeItr=rangesByUpperBound.tailMap(restriction.lowerBound,false).values().iterator();
  }
 else {
    completeRangeItr=rangesByLowerBound.tailMap(lowerBoundWindow.lowerBound.endpoint(),lowerBoundWindow.lowerBoundType() == BoundType.CLOSED).values().iterator();
  }
  final Cut<Cut<C>> upperBoundOnLowerBounds=Ordering.natural().min(lowerBoundWindow.upperBound,Cut.belowValue(restriction.upperBound));
  return new AbstractIterator<Entry<Cut<C>,Range<C>>>(){
    @Override protected Entry<Cut<C>,Range<C>> computeNext(){
      if (!completeRangeItr.hasNext()) {
        return endOfData();
      }
      Range<C> nextRange=completeRangeItr.next();
      if (upperBoundOnLowerBounds.isLessThan(nextRange.lowerBound)) {
        return endOfData();
      }
 else {
        nextRange=nextRange.intersection(restriction);
        return Maps.immutableEntry(nextRange.lowerBound,nextRange);
      }
    }
  }
;
}
