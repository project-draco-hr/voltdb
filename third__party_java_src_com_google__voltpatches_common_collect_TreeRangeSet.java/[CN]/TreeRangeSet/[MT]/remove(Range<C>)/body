{
  checkNotNull(rangeToRemove);
  if (rangeToRemove.isEmpty()) {
    return;
  }
  Entry<Cut<C>,Range<C>> entryBelowLB=rangesByLowerBound.lowerEntry(rangeToRemove.lowerBound);
  if (entryBelowLB != null) {
    Range<C> rangeBelowLB=entryBelowLB.getValue();
    if (rangeBelowLB.upperBound.compareTo(rangeToRemove.lowerBound) >= 0) {
      if (rangeToRemove.hasUpperBound() && rangeBelowLB.upperBound.compareTo(rangeToRemove.upperBound) >= 0) {
        replaceRangeWithSameLowerBound(Range.create(rangeToRemove.upperBound,rangeBelowLB.upperBound));
      }
      replaceRangeWithSameLowerBound(Range.create(rangeBelowLB.lowerBound,rangeToRemove.lowerBound));
    }
  }
  Entry<Cut<C>,Range<C>> entryBelowUB=rangesByLowerBound.floorEntry(rangeToRemove.upperBound);
  if (entryBelowUB != null) {
    Range<C> rangeBelowUB=entryBelowUB.getValue();
    if (rangeToRemove.hasUpperBound() && rangeBelowUB.upperBound.compareTo(rangeToRemove.upperBound) >= 0) {
      replaceRangeWithSameLowerBound(Range.create(rangeToRemove.upperBound,rangeBelowUB.upperBound));
    }
  }
  rangesByLowerBound.subMap(rangeToRemove.lowerBound,rangeToRemove.upperBound).clear();
}
