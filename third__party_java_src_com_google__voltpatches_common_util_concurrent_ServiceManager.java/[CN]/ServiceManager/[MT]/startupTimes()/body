{
  List<Entry<Service,Long>> loadTimes=Lists.newArrayListWithCapacity(services.size());
  for (  Map.Entry<Service,ServiceListener> entry : services.entrySet()) {
    Service service=entry.getKey();
    State state=service.state();
    if (state != State.NEW & state != State.STARTING & !(service instanceof NoOpService)) {
      loadTimes.add(Maps.immutableEntry(service,entry.getValue().startupTimeMillis()));
    }
  }
  Collections.sort(loadTimes,Ordering.<Long>natural().onResultOf(new Function<Entry<Service,Long>,Long>(){
    @Override public Long apply(    Map.Entry<Service,Long> input){
      return input.getValue();
    }
  }
));
  ImmutableMap.Builder<Service,Long> builder=ImmutableMap.builder();
  for (  Entry<Service,Long> entry : loadTimes) {
    builder.put(entry);
  }
  return builder.build();
}
