{
  super();
  this.funcType=id;
switch (id) {
case FUNC_CONCAT:
case FUNC_LEFT:
    parseList=doubleParamList;
  break;
case FUNC_DATABASE:
parseList=emptyParamList;
break;
case FUNC_ISAUTOCOMMIT:
case FUNC_ISREADONLYSESSION:
case FUNC_ISREADONLYDATABASE:
case FUNC_ISREADONLYDATABASEFILES:
parseList=emptyParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_EXTRACT:
name=Tokens.T_EXTRACT;
parseList=singleParamList;
break;
case FUNC_TRIM_CHAR:
name=Tokens.T_TRIM;
parseList=singleParamList;
break;
case FUNC_OVERLAY_CHAR:
name=Tokens.T_OVERLAY;
parseList=quadParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_IDENTITY:
name=Tokens.T_IDENTITY;
parseList=emptyParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_SYSDATE:
name=Tokens.T_SYSDATE;
parseList=noParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_TIMESTAMPADD:
name=Tokens.T_TIMESTAMPADD;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,9,Tokens.SQL_TSI_FRAC_SECOND,Tokens.SQL_TSI_SECOND,Tokens.SQL_TSI_MINUTE,Tokens.SQL_TSI_HOUR,Tokens.SQL_TSI_DAY,Tokens.SQL_TSI_WEEK,Tokens.SQL_TSI_MONTH,Tokens.SQL_TSI_QUARTER,Tokens.SQL_TSI_YEAR,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_TIMESTAMPDIFF:
name=Tokens.T_TIMESTAMPDIFF;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,9,Tokens.SQL_TSI_FRAC_SECOND,Tokens.SQL_TSI_SECOND,Tokens.SQL_TSI_MINUTE,Tokens.SQL_TSI_HOUR,Tokens.SQL_TSI_DAY,Tokens.SQL_TSI_WEEK,Tokens.SQL_TSI_MONTH,Tokens.SQL_TSI_QUARTER,Tokens.SQL_TSI_YEAR,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_TRUNCATE:
parseList=doubleParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_TO_CHAR:
parseList=doubleParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_TIMESTAMP:
name=Tokens.T_TIMESTAMP;
parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_PI:
parseList=emptyParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_RAND:
parseList=optionalIntegerParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_ACOS:
case FUNC_ASIN:
case FUNC_ATAN:
case FUNC_ATAN2:
case FUNC_COS:
case FUNC_COT:
case FUNC_DEGREES:
case FUNC_SIN:
case FUNC_TAN:
case FUNC_LOG10:
case FUNC_RADIANS:
case FUNC_ROUNDMAGIC:
case FUNC_SIGN:
case FUNC_SOUNDEX:
case FUNC_ASCII:
case FUNC_CHAR:
case FUNC_HEXTORAW:
case FUNC_RAWTOHEX:
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
case FUNC_SPACE:
parseList=singleParamList;
break;
case FUNC_ROUND:
case FUNC_BITAND:
case FUNC_BITOR:
case FUNC_BITXOR:
case FUNC_DIFFERENCE:
case FUNC_DATEDIFF:
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
case FUNC_REPEAT:
case FUNC_RIGHT:
parseList=doubleParamList;
break;
case FUNC_LOCATE:
parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
case FUNC_REPLACE:
parseList=tripleParamList;
voltDisabled=DISABLED_IN_FUNCTIONCUSTOM_CONSTRUCTOR;
break;
default :
throw Error.runtimeError(ErrorCode.U_S0500,"SQLFunction");
}
}
