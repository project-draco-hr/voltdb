{
  List<Deque<Node>> result=Lists.newArrayList();
  for (  Collection<Node> deque : nodes) {
    final LinkedList<Node> toBeSorted=Lists.newLinkedList(deque);
    Collections.sort(toBeSorted,new Comparator<Node>(){
      @Override public int compare(      Node o1,      Node o2){
        final Integer o1Connections=master.m_replicationConnections.get(o1);
        final Integer o2Connections=master.m_replicationConnections.get(o2);
        final int connComp=Integer.compare(o1Connections == null ? 0 : o1Connections,o2Connections == null ? 0 : o2Connections);
        if (connComp == 0) {
          final int repFactorComp=Integer.compare(o1.replicationFactor(),o2.replicationFactor());
          if (repFactorComp == 0) {
            return -Integer.compare(o1.m_masterPartitions.size(),o2.m_masterPartitions.size());
          }
 else {
            return repFactorComp;
          }
        }
 else {
          return connComp;
        }
      }
    }
);
    result.add(toBeSorted);
  }
  return result;
}
