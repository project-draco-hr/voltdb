{
  final Iterator<Node> nodeIter=nodes.iterator();
  while (p.m_neededReplicas > 0 && nodeIter.hasNext()) {
    final Node replica=nodeIter.next();
    if (replica.partitionCount() == sitesPerHost) {
      phys.m_root.removeHost(replica);
      continue;
    }
    if (p.m_master == replica || p.m_replicas.contains(replica)) {
      continue;
    }
    p.m_replicas.add(replica);
    p.decrementNeededReplicas();
    replica.m_replicaPartitions.add(p);
    if (p.m_master.m_replicationConnections.containsKey(replica)) {
      final int connections=p.m_master.m_replicationConnections.get(replica);
      p.m_master.m_replicationConnections.put(replica,connections + 1);
      replica.m_replicationConnections.put(p.m_master,connections + 1);
    }
 else {
      p.m_master.m_replicationConnections.put(replica,1);
      replica.m_replicationConnections.put(p.m_master,1);
    }
  }
}
