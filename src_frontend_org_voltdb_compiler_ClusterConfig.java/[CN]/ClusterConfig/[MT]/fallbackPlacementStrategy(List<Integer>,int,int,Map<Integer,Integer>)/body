{
  int partitionCounter=-1;
  TreeMap<Integer,Integer> sitesToHostId=Maps.newTreeMap();
  int sitesCounter=0;
  for (  Map.Entry<Integer,Integer> entry : sitesPerHostMap.entrySet()) {
    sitesToHostId.put(sitesCounter,entry.getKey());
    sitesCounter+=entry.getValue();
  }
  HashMap<Integer,ArrayList<Integer>> partToHosts=new HashMap<Integer,ArrayList<Integer>>();
  for (int i=0; i < partitionCount; i++) {
    ArrayList<Integer> hosts=new ArrayList<Integer>();
    partToHosts.put(i,hosts);
  }
  int totalSitesCount=getTotalSitesCount();
  for (int i=0; i < totalSitesCount; i++) {
    int partition=(++partitionCounter) % partitionCount;
    int hostId=sitesToHostId.get(sitesToHostId.floorKey(i));
    partToHosts.get(partition).add(hostId);
  }
  for (  Map.Entry<Integer,ArrayList<Integer>> e : partToHosts.entrySet()) {
    Collections.sort(e.getValue());
  }
  if (!checkKSafetyConstraint(partToHosts,m_replicationFactor + 1)) {
    VoltDB.crashLocalVoltDB("Unable to find feasible partition replica assignment for the specified configuration");
  }
  JSONStringer stringer=new JSONStringer();
  stringer.object();
  stringer.key("hostcount").value(m_hostCount);
  stringer.key("kfactor").value(getReplicationFactor());
  stringer.key("host_id_to_sph").array();
  for (  Map.Entry<Integer,Integer> entry : sitesPerHostMap.entrySet()) {
    stringer.object();
    stringer.key("host_id").value(entry.getKey());
    stringer.key("sites_per_host").value(entry.getValue());
    stringer.endObject();
  }
  stringer.endArray();
  stringer.key("partitions").array();
  for (int part=0; part < partitionCount; part++) {
    stringer.object();
    stringer.key("partition_id").value(part);
    int index=part % (getReplicationFactor() + 1);
    int master=partToHosts.get(part).get(index);
    stringer.key("master").value(master);
    stringer.key("replicas").array();
    for (    int host_pos : partToHosts.get(part)) {
      stringer.value(host_pos);
    }
    stringer.endArray();
    stringer.endObject();
  }
  stringer.endArray();
  stringer.endObject();
  JSONObject topo=new JSONObject(stringer.toString());
  return topo;
}
