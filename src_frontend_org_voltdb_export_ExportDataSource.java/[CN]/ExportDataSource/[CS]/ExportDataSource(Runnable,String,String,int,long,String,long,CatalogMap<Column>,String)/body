{
  checkNotNull(onDrain,"onDrain runnable is null");
  m_generation=generation;
  m_onDrain=onDrain;
  m_database=db;
  m_tableName=tableName;
  m_es=CoreUtils.getListeningExecutorService("ExportDataSource gen " + generation + " sig "+ signature,1);
  String nonce=signature + "_" + HSId+ "_"+ partitionId;
  m_committedBuffers=new StreamBlockQueue(overflowPath,nonce);
  m_signature=signature;
  m_signatureBytes=m_signature.getBytes(VoltDB.UTF8ENCODING);
  m_partitionId=partitionId;
  m_HSId=HSId;
  m_columnNames.add("VOLT_TRANSACTION_ID");
  m_columnTypes.add(((int)VoltType.BIGINT.getValue()));
  m_columnNames.add("VOLT_EXPORT_TIMESTAMP");
  m_columnTypes.add(((int)VoltType.BIGINT.getValue()));
  m_columnNames.add("VOLT_EXPORT_SEQUENCE_NUMBER");
  m_columnTypes.add(((int)VoltType.BIGINT.getValue()));
  m_columnNames.add("VOLT_PARTITION_ID");
  m_columnTypes.add(((int)VoltType.BIGINT.getValue()));
  m_columnNames.add("VOLT_SITE_ID");
  m_columnTypes.add(((int)VoltType.BIGINT.getValue()));
  m_columnNames.add("VOLT_EXPORT_OPERATION");
  m_columnTypes.add(((int)VoltType.TINYINT.getValue()));
  for (  Column c : CatalogUtil.getSortedCatalogItems(catalogMap,"index")) {
    m_columnNames.add(c.getName());
    m_columnTypes.add(c.getType());
  }
  File adFile=new VoltFile(overflowPath,nonce + ".ad");
  exportLog.info("Creating ad for " + nonce);
  assert(!adFile.exists());
  FastSerializer fs=new FastSerializer();
  fs.writeLong(m_HSId);
  fs.writeString(m_database);
  writeAdvertisementTo(fs);
  FileOutputStream fos=new FileOutputStream(adFile);
  fos.write(fs.getBytes());
  fos.getFD().sync();
  fos.close();
  m_nullArrayLength=((m_columnTypes.size() + 7) & -8) >> 3;
}
