{
  ExportProtoMessage message=m.m_m;
  ExportProtoMessage result=new ExportProtoMessage(message.m_partitionId,message.m_tableId);
  ExportInternalMessage mbp=new ExportInternalMessage(m.m_sb,result);
  StreamBlock first_unpolled_block=null;
  ArrayList<StreamBlock> blocksToDelete=new ArrayList<StreamBlock>();
  try {
synchronized (m_committedBuffers) {
      if (message.isAck() && message.getAckOffset() > 0) {
        if (!releaseExportBytes(message.getAckOffset(),blocksToDelete)) {
          result.error();
          ExportManager.instance().queueMessage(mbp);
          return;
        }
      }
      if (message.isClose()) {
        resetPollMarker();
      }
      if (message.isPoll()) {
        Iterator<StreamBlock> iter=m_committedBuffers.iterator();
        while (iter.hasNext()) {
          StreamBlock block=iter.next();
          if (m_firstUnpolledUso < block.m_uso + block.totalUso()) {
            first_unpolled_block=block;
            m_firstUnpolledUso=block.m_uso + block.totalUso();
            break;
          }
 else {
            blocksToDelete.add(block);
            iter.remove();
          }
        }
      }
    }
  }
  finally {
    for (    StreamBlock sb : blocksToDelete) {
      sb.deleteContent();
    }
  }
  if (message.isPoll()) {
    if (first_unpolled_block == null) {
      ByteBuffer buf=ByteBuffer.allocate(4);
      buf.putInt(0).flip();
      result.pollResponse(m_firstUnpolledUso,buf);
    }
 else {
      result.pollResponse(first_unpolled_block.m_uso + first_unpolled_block.totalUso(),first_unpolled_block.unreleasedBuffer());
    }
    ExportManager.instance().queueMessage(mbp);
  }
}
