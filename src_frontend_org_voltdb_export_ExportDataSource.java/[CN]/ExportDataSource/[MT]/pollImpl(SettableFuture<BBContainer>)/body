{
  if (fut == null) {
    return;
  }
  try {
    StreamBlock first_unpolled_block=null;
    if (m_endOfStream && m_committedBuffers.isEmpty()) {
      try {
        fut.set(null);
      }
 catch (      RejectedExecutionException reex) {
      }
      if (m_onDrain != null) {
        m_onDrain.run();
      }
      return;
    }
    ArrayList<StreamBlock> blocksToDelete=new ArrayList<StreamBlock>();
    try {
      Iterator<StreamBlock> iter=m_committedBuffers.iterator();
      long fuso=getFirstUnpolledUso();
      while (iter.hasNext()) {
        StreamBlock block=iter.next();
        if (fuso < block.uso() + block.totalUso()) {
          first_unpolled_block=block;
          m_firstUnpolledUso=(block.uso() + block.totalUso());
          break;
        }
 else {
          blocksToDelete.add(block);
          iter.remove();
        }
      }
    }
 catch (    RuntimeException e) {
      if (e.getCause() instanceof IOException) {
        VoltDB.crashLocalVoltDB("Error attempting to find unpolled export data",true,e);
      }
 else {
        throw e;
      }
    }
 finally {
      for (      StreamBlock sb : blocksToDelete) {
        sb.discard();
      }
    }
    if (first_unpolled_block == null) {
      m_pollFuture=fut;
    }
 else {
      try {
        fut.set(new AckingContainer(first_unpolled_block.unreleasedContainer(),first_unpolled_block.uso() + first_unpolled_block.totalUso()));
      }
 catch (      RejectedExecutionException reex) {
      }
      m_pollFuture=null;
    }
  }
 catch (  Throwable t) {
    fut.setException(t);
  }
}
