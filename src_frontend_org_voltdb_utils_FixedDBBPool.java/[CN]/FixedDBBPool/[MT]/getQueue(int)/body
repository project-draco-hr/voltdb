{
  return new BlockingQueue<BBContainer>(){
    @Override public boolean add(    BBContainer bbContainer){
      throw new UnsupportedOperationException();
    }
    @Override public boolean offer(    BBContainer bbContainer){
      throw new UnsupportedOperationException();
    }
    @Override public BBContainer remove(){
      throw new UnsupportedOperationException();
    }
    @Override public BBContainer poll(){
      throw new UnsupportedOperationException();
    }
    @Override public BBContainer element(){
      throw new UnsupportedOperationException();
    }
    @Override public BBContainer peek(){
      throw new UnsupportedOperationException();
    }
    @Override public void put(    BBContainer bbContainer) throws InterruptedException {
      throw new UnsupportedOperationException();
    }
    @Override public boolean offer(    BBContainer bbContainer,    long timeout,    TimeUnit unit) throws InterruptedException {
      throw new UnsupportedOperationException();
    }
    @Override public BBContainer take() throws InterruptedException {
      Semaphore permits=m_permits.get(bufLenInBytes);
      permits.acquire();
      return DBBPool.allocateDirectAndPool(bufLenInBytes);
    }
    @Override public BBContainer poll(    long timeout,    TimeUnit unit) throws InterruptedException {
      throw new UnsupportedOperationException();
    }
    @Override public int remainingCapacity(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean remove(    Object o){
      throw new UnsupportedOperationException();
    }
    @Override public boolean containsAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean addAll(    Collection<? extends BBContainer> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean removeAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean retainAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public void clear(){
      throw new UnsupportedOperationException();
    }
    @Override public int size(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean isEmpty(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean contains(    Object o){
      throw new UnsupportedOperationException();
    }
    @Override public Iterator<BBContainer> iterator(){
      throw new UnsupportedOperationException();
    }
    @Override public Object[] toArray(){
      throw new UnsupportedOperationException();
    }
    @Override public <T>T[] toArray(    T[] a){
      throw new UnsupportedOperationException();
    }
    @Override public int drainTo(    Collection<? super BBContainer> c){
      throw new UnsupportedOperationException();
    }
    @Override public int drainTo(    Collection<? super BBContainer> c,    int maxElements){
      throw new UnsupportedOperationException();
    }
  }
;
}
