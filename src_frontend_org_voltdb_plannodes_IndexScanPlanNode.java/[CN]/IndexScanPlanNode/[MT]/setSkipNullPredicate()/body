{
  int nextKeyIndex=m_searchkeyExpressions.size() - 1;
  if (nextKeyIndex < 0 || isReverseScan()) {
    m_skip_null_predicate=null;
    return;
  }
  if (m_endExpression != null && m_searchkeyExpressions.size() < ExpressionUtil.uncombine((AbstractExpression)m_endExpression.clone()).size()) {
    nextKeyIndex=m_searchkeyExpressions.size();
  }
  List<AbstractExpression> exprs=new ArrayList<AbstractExpression>();
  String exprsjson=m_catalogIndex.getExpressionsjson();
  List<AbstractExpression> indexedExprs=null;
  if (exprsjson.isEmpty()) {
    indexedExprs=new ArrayList<AbstractExpression>();
    List<ColumnRef> indexedColRefs=CatalogUtil.getSortedCatalogItems(m_catalogIndex.getColumns(),"index");
    for (int i=0; i <= nextKeyIndex; i++) {
      ColumnRef colRef=indexedColRefs.get(i);
      Column col=colRef.getColumn();
      TupleValueExpression tve=new TupleValueExpression(m_targetTableName,m_targetTableAlias,col.getTypeName(),col.getTypeName());
      tve.setValueType(VoltType.get((byte)col.getType()));
      tve.setValueSize(col.getSize());
      tve.resolveForTable((Table)m_catalogIndex.getParent());
      indexedExprs.add(tve);
    }
  }
 else {
    try {
      indexedExprs=AbstractExpression.fromJSONArrayString(exprsjson);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      assert(false);
    }
  }
  AbstractExpression expr;
  for (int i=0; i < nextKeyIndex; i++) {
    AbstractExpression idxExpr=indexedExprs.get(i);
    expr=new ComparisonExpression(ExpressionType.COMPARE_EQUAL,idxExpr,(AbstractExpression)m_searchkeyExpressions.get(i).clone());
    exprs.add(expr);
  }
  AbstractExpression nullExpr=indexedExprs.get(nextKeyIndex);
  expr=new OperatorExpression(ExpressionType.OPERATOR_IS_NULL,nullExpr,null);
  exprs.add(expr);
  m_skip_null_predicate=ExpressionUtil.combine(exprs);
  m_skip_null_predicate.finalizeValueTypes();
}
