{
  super.loadFromJSONObject(jobj,db);
  m_keyIterate=jobj.getBoolean(Members.KEY_ITERATE.name());
  m_lookupType=IndexLookupType.get(jobj.getString(Members.LOOKUP_TYPE.name()));
  m_sortDirection=SortDirectionType.get(jobj.getString(Members.SORT_DIRECTION.name()));
  m_forDeterminismOnly=jobj.optBoolean(Members.DETERMINISM_ONLY.name());
  m_targetIndexName=jobj.getString(Members.TARGET_INDEX_NAME.name());
  m_catalogIndex=db.getTables().get(super.m_targetTableName).getIndexes().get(m_targetIndexName);
  JSONObject tempjobj=null;
  if (!jobj.isNull(Members.END_EXPRESSION.name())) {
    tempjobj=jobj.getJSONObject(Members.END_EXPRESSION.name());
    m_endExpression=AbstractExpression.fromJSONObject(tempjobj,db);
  }
  if (!jobj.isNull(Members.INITIAL_EXPRESSION.name())) {
    tempjobj=jobj.getJSONObject(Members.INITIAL_EXPRESSION.name());
    m_initialExpression=AbstractExpression.fromJSONObject(tempjobj,db);
  }
  if (!jobj.isNull(Members.SEARCHKEY_EXPRESSIONS.name())) {
    JSONArray jarray=jobj.getJSONArray(Members.SEARCHKEY_EXPRESSIONS.name());
    int size=jarray.length();
    for (int i=0; i < size; i++) {
      tempjobj=jarray.getJSONObject(i);
      m_searchkeyExpressions.add(AbstractExpression.fromJSONObject(tempjobj,db));
    }
  }
}
