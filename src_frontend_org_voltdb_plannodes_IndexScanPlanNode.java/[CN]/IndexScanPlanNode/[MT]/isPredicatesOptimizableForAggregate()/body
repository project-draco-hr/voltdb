{
  List<AbstractExpression> predicates=ExpressionUtil.uncombine(m_predicate);
  if (predicates.size() != 2) {
    return false;
  }
  AbstractExpression expr=predicates.get(0);
  if (expr.getExpressionType() != ExpressionType.COMPARE_LESSTHAN && expr.getExpressionType() != ExpressionType.COMPARE_LESSTHANOREQUALTO) {
    return false;
  }
  int searchKeyCount=m_searchkeyExpressions.size();
  String exprsjson=m_catalogIndex.getExpressionsjson();
  AbstractExpression left=expr.getLeft();
  if (exprsjson.isEmpty()) {
    if (left.getExpressionType() != ExpressionType.VALUE_TUPLE) {
      return false;
    }
    if (((TupleValueExpression)left).getColumnIndex() != CatalogUtil.getSortedCatalogItems(m_catalogIndex.getColumns(),"index").get(searchKeyCount - 1).getColumn().getIndex()) {
      return false;
    }
  }
 else {
    List<AbstractExpression> indexedExprs=null;
    try {
      indexedExprs=AbstractExpression.fromJSONArrayString(exprsjson,null);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      assert(false);
      return false;
    }
    if (left.equals(indexedExprs.get(searchKeyCount - 1))) {
      return false;
    }
  }
  if (!expr.getRight().equals(m_searchkeyExpressions.get(searchKeyCount - 1))) {
    return false;
  }
  expr=predicates.get(1);
  if (expr.getExpressionType() != ExpressionType.OPERATOR_NOT) {
    return false;
  }
  if (expr.getLeft().getExpressionType() != ExpressionType.OPERATOR_IS_NULL) {
    return false;
  }
  if (!expr.getLeft().getLeft().equals(predicates.get(0).getLeft())) {
    return false;
  }
  return true;
}
