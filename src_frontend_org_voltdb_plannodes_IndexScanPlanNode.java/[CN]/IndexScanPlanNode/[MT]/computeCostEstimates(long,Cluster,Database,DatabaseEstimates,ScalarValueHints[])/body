{
  DatabaseEstimates.TableEstimates tableEstimates=estimates.getEstimatesForTable(m_targetTableName);
  double colCount=CatalogUtil.getCatalogIndexSize(m_catalogIndex);
  double keyWidth=m_searchkeyExpressions.size();
  assert(keyWidth <= colCount);
  if (keyWidth > 0.0 && m_lookupType != IndexLookupType.EQ) {
    keyWidth-=0.5;
  }
 else   if (keyWidth == 0.0 && m_endExpression != null) {
    keyWidth=0.5;
  }
  int tuplesToRead=0;
  if (m_catalogIndex.getType() == IndexType.HASH_TABLE.getValue()) {
    tuplesToRead=2;
  }
 else   if ((m_catalogIndex.getType() == IndexType.BALANCED_TREE.getValue()) || (m_catalogIndex.getType() == IndexType.BTREE.getValue())) {
    tuplesToRead=3;
  }
  assert(tuplesToRead > 0);
  if (!m_catalogIndex.getUnique() || (colCount > keyWidth)) {
    tuplesToRead+=(int)(tableEstimates.maxTuples * 0.90 * Math.pow(0.10,keyWidth));
    if (tuplesToRead < 4) {
      tuplesToRead=4;
    }
  }
  m_estimatedOutputTupleCount=tuplesToRead;
  m_estimatedProcessedTupleCount=tuplesToRead;
  if (m_catalogIndex.getUnique() && (colCount == keyWidth)) {
    m_estimatedOutputTupleCount=1;
  }
  if (!m_eliminatedPostFilterExpressions.isEmpty() && m_estimatedProcessedTupleCount > 3) {
    double discount=1.0;
    for (int i=0; i < m_eliminatedPostFilterExpressions.size(); ++i) {
      discount-=Math.pow(0.1,i + 1);
    }
    m_estimatedProcessedTupleCount*=discount;
    if (m_estimatedProcessedTupleCount < 4) {
      m_estimatedProcessedTupleCount=4;
    }
  }
  LimitPlanNode limit=(LimitPlanNode)m_inlineNodes.get(PlanNodeType.LIMIT);
  if (limit != null) {
    int limitInt=limit.getLimit();
    if (limitInt == -1) {
      limitInt=50;
    }
    m_estimatedOutputTupleCount=Math.min(m_estimatedOutputTupleCount,limitInt);
    int offsetInt=limit.getOffset();
    if (m_predicate == null && offsetInt == 0) {
      m_estimatedProcessedTupleCount=limitInt;
    }
  }
}
