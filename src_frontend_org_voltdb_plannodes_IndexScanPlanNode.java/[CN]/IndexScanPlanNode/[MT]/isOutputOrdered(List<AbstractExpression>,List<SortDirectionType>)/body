{
  assert(sortExpressions.size() == sortDirections.size());
  AbstractPlanNode agg=AggregatePlanNode.getInlineAggregationNode(this);
  if (agg != null && agg.getPlanNodeType() == PlanNodeType.HASHAGGREGATE) {
    return false;
  }
  for (  SortDirectionType sortDirection : sortDirections) {
    if (sortDirection != getSortDirection()) {
      return false;
    }
  }
  List<AbstractExpression> indexedExprs=new ArrayList<AbstractExpression>();
  List<ColumnRef> indexedColRefs=new ArrayList<ColumnRef>();
  List<Integer> indexedColIds=new ArrayList<Integer>();
  CatalogUtil.getCatalogIndexExpressions(getCatalogIndex(),getTableScan(),indexedExprs,indexedColRefs,indexedColIds);
  int indexExprCount=(indexedExprs.isEmpty()) ? indexedColRefs.size() : indexedExprs.size();
  if (indexExprCount < sortExpressions.size()) {
    return false;
  }
  for (int idxToCover=0; idxToCover < sortExpressions.size(); ++idxToCover) {
    AbstractExpression sortExpression=sortExpressions.get(idxToCover);
    boolean covered=false;
    if (!indexedExprs.isEmpty()) {
      covered=isSortExpressionCovered(sortExpression,indexedExprs,idxToCover);
    }
 else {
      covered=isSortExpressionCovered(sortExpression,indexedColRefs,idxToCover,getTableScan());
    }
    if (!covered) {
      return false;
    }
  }
  return true;
}
