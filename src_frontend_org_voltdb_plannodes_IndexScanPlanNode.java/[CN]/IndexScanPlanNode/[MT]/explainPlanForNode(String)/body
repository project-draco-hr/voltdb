{
  assert(m_catalogIndex != null);
  int keySize=m_searchkeyExpressions.size();
  if (keySize == 0 && m_endExpression != null) {
    keySize=ExpressionUtil.uncombineAny(m_endExpression).size();
  }
  String usageInfo;
  String predicatePrefix;
  if (keySize == 0) {
    if (m_purpose == FOR_DETERMINISM) {
      usageInfo=" (for deterministic order only)";
    }
 else     if (m_purpose == FOR_GROUPING) {
      usageInfo=" (for optimized grouping only)";
    }
 else {
      usageInfo=" (for sort order only)";
    }
    predicatePrefix="\n" + indent + " filter by ";
  }
 else {
    int indexSize=CatalogUtil.getCatalogIndexSize(m_catalogIndex);
    String[] asIndexed=new String[indexSize];
    for (int ii=0; ii < keySize; ++ii) {
      asIndexed[ii]="(index key " + ii + ")";
    }
    String jsonExpr=m_catalogIndex.getExpressionsjson();
    if (jsonExpr.isEmpty()) {
      for (      ColumnRef cref : m_catalogIndex.getColumns()) {
        Column col=cref.getColumn();
        asIndexed[cref.getIndex()]=col.getName();
      }
    }
 else {
      try {
        List<AbstractExpression> indexExpressions=AbstractExpression.fromJSONArrayString(jsonExpr,m_tableScan);
        int ii=0;
        for (        AbstractExpression ae : indexExpressions) {
          asIndexed[ii++]=ae.explain(m_targetTableName);
        }
      }
 catch (      JSONException e) {
      }
    }
    String start=explainSearchKeys(asIndexed,keySize);
    if (m_lookupType == IndexLookupType.EQ) {
      if (m_catalogIndex.getUnique()) {
        usageInfo="\n" + indent + " uniquely match "+ start;
      }
 else {
        usageInfo="\n" + indent + " scan matches for "+ start;
      }
    }
 else {
      usageInfo="\n" + indent;
      if (isReverseScan()) {
        usageInfo+="reverse ";
      }
      if (indexSize == keySize) {
        usageInfo+="range-scan covering from " + start;
      }
 else {
        usageInfo+=String.format("range-scan on %d of %d cols from %s",keySize,indexSize,start);
      }
      usageInfo+=explainEndKeys();
    }
    predicatePrefix=", filter by ";
  }
  String predicate=explainPredicate(predicatePrefix);
  String retval="INDEX SCAN of \"" + m_targetTableName + "\"";
  String indexDescription=" using \"" + m_targetIndexName + "\"";
  if (m_targetIndexName.startsWith(IndexAVL.AUTO_GEN_PRIMARY_KEY_PREFIX) || m_targetIndexName.startsWith("MATVIEW_PK_INDEX")) {
    indexDescription=" using its primary key index";
  }
  retval+=indexDescription;
  retval+=usageInfo + predicate;
  return retval;
}
