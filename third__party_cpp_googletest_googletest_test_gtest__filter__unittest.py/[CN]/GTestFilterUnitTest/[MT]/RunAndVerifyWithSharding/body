def RunAndVerifyWithSharding(self, gtest_filter, total_shards, tests_to_run, args=None, check_exit_0=False):
    'Checks that binary runs correct tests for the given filter and shard.\n\n    Runs all shards of gtest_filter_unittest_ with the given filter, and\n    verifies that the right set of tests were run. The union of tests run\n    on each shard should be identical to tests_to_run, without duplicates.\n\n    Args:\n      gtest_filter: A filter to apply to the tests.\n      total_shards: A total number of shards to split test run into.\n      tests_to_run: A set of tests expected to run.\n      args   :      Arguments to pass to the to the test binary.\n      check_exit_0: When set to a true value, make sure that all shards\n                    return 0.\n    '
    tests_to_run = self.AdjustForParameterizedTests(tests_to_run)
    if (CAN_TEST_EMPTY_FILTER or (gtest_filter != '')):
        SetEnvVar(FILTER_ENV_VAR, gtest_filter)
        partition = []
        for i in range(0, total_shards):
            (tests_run, exit_code) = RunWithSharding(total_shards, i, args)
            if check_exit_0:
                self.assertEqual(0, exit_code)
            partition.append(tests_run)
        self.AssertPartitionIsValid(tests_to_run, partition)
        SetEnvVar(FILTER_ENV_VAR, None)
