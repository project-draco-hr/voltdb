{
  VoltTable results=new VoltTable(clusterInfoSchema);
  results.addRow("voltdbroot",context.getCluster().getVoltroot());
  Deployment deploy=context.getCluster().getDeployment().get("deployment");
  results.addRow("hostcount",Integer.toString(deploy.getHostcount()));
  results.addRow("kfactor",Integer.toString(deploy.getKfactor()));
  results.addRow("sitesperhost",Integer.toString(deploy.getSitesperhost()));
  String http_enabled="false";
  int http_port=context.getCluster().getHttpdportno();
  if (http_port != -1) {
    http_enabled="true";
    results.addRow("httpport",Integer.toString(http_port));
  }
  results.addRow("httpenabled",http_enabled);
  String json_enabled="false";
  if (context.getCluster().getJsonapi()) {
    json_enabled="true";
  }
  results.addRow("jsonenabled",json_enabled);
  SnapshotSchedule snaps=context.getDatabase().getSnapshotschedule().get("default");
  String snap_enabled="false";
  if (snaps != null) {
    snap_enabled="true";
    String snap_freq=Integer.toString(snaps.getFrequencyvalue()) + snaps.getFrequencyunit();
    results.addRow("snapshotpath",snaps.getPath());
    results.addRow("snapshotprefix",snaps.getPrefix());
    results.addRow("snapshotfrequency",snap_freq);
    results.addRow("snapshotretain",Integer.toString(snaps.getRetain()));
  }
  results.addRow("snapshotenabled",snap_enabled);
  Connector export_conn=context.getDatabase().getConnectors().get("0");
  String export_enabled="false";
  if (export_conn != null && export_conn.getEnabled()) {
    export_enabled="true";
    results.addRow("exportoverflowpath",context.getCluster().getExportoverflow());
  }
  results.addRow("export",export_enabled);
  String partition_detect_enabled="false";
  if (context.getCluster().getNetworkpartition()) {
    partition_detect_enabled="true";
    String partition_detect_snapshot_path=context.getCluster().getFaultsnapshots().get("CLUSTER_PARTITION").getPath();
    String partition_detect_snapshot_prefix=context.getCluster().getFaultsnapshots().get("CLUSTER_PARTITION").getPrefix();
    results.addRow("partitiondetectionsnapshotpath",partition_detect_snapshot_path);
    results.addRow("partitiondetectionsnapshotprefix",partition_detect_snapshot_prefix);
  }
  results.addRow("partitiondetection",partition_detect_enabled);
  results.addRow("heartbeattimeout",Integer.toString(context.getCluster().getHeartbeattimeout()));
  results.addRow("adminport",Integer.toString(context.getCluster().getAdminport()));
  String adminstartup="false";
  if (context.getCluster().getAdminstartup()) {
    adminstartup="true";
  }
  results.addRow("adminstartup",adminstartup);
  String users="";
  for (  User user : context.getDatabase().getUsers()) {
    users+=addEscapes(user.getTypeName());
    if (user.getGroups() != null && user.getGroups().size() > 0) {
      users+=":";
      for (      GroupRef gref : user.getGroups()) {
        users+=addEscapes(gref.getGroup().getTypeName());
        users+=",";
      }
      users=users.substring(0,users.length() - 1);
    }
    users+=";";
  }
  results.addRow("users",users);
  return results;
}
